
Wine_prediction_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099d8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000172ec  08009ba0  08009ba0  00019ba0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020e8c  08020e8c  0004097c  2**0
                  CONTENTS
  4 .ARM          00000008  08020e8c  08020e8c  00030e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020e94  08020e94  0004097c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08020e94  08020e94  00030e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08020e98  08020e98  00030e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000097c  20000000  08020e9c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000998  20000980  08021818  00040980  2**5
                  ALLOC
 10 ._user_heap_stack 00001000  20001318  08021818  00041318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004097c  2**0
                  CONTENTS, READONLY
 12 .comment      00000093  00000000  00000000  000409ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a500  00000000  00000000  00040a3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000376a  00000000  00000000  0005af3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001468  00000000  00000000  0005e6b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fbf  00000000  00000000  0005fb18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003656d  00000000  00000000  00060ad7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b6ef  00000000  00000000  00097044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0013e470  00000000  00000000  000b2733  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005d14  00000000  00000000  001f0ba4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  001f68b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000980 	.word	0x20000980
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08009b80 	.word	0x08009b80

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000984 	.word	0x20000984
 80001fc:	08009b80 	.word	0x08009b80

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a0:	f001 f891 	bl	80016c6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a4:	f000 f815 	bl	80005d2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a8:	f000 fa6c 	bl	8000a84 <MX_GPIO_Init>
  MX_CRC_Init();
 80005ac:	f000 f864 	bl	8000678 <MX_CRC_Init>
  MX_FMC_Init();
 80005b0:	f000 fa02 	bl	80009b8 <MX_FMC_Init>
  MX_I2C1_Init();
 80005b4:	f000 f882 	bl	80006bc <MX_I2C1_Init>
  MX_SAI1_Init();
 80005b8:	f000 f8c0 	bl	800073c <MX_SAI1_Init>
  //MX_SDMMC1_SD_Init();
  MX_SPI2_Init();
 80005bc:	f000 f926 	bl	800080c <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80005c0:	f000 f962 	bl	8000888 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80005c4:	f000 f9ac 	bl	8000920 <MX_USART3_UART_Init>
  //MX_USB_OTG_FS_PCD_Init();
  MX_X_CUBE_AI_Init();
 80005c8:	f005 ff64 	bl	8006494 <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
  MX_X_CUBE_AI_Process();
 80005cc:	f005 ff70 	bl	80064b0 <MX_X_CUBE_AI_Process>
 80005d0:	e7fc      	b.n	80005cc <main+0x30>

080005d2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d2:	b580      	push	{r7, lr}
 80005d4:	b096      	sub	sp, #88	; 0x58
 80005d6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d8:	f107 0314 	add.w	r3, r7, #20
 80005dc:	2244      	movs	r2, #68	; 0x44
 80005de:	2100      	movs	r1, #0
 80005e0:	4618      	mov	r0, r3
 80005e2:	f008 fcbb 	bl	8008f5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e6:	463b      	mov	r3, r7
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80005f4:	2000      	movs	r0, #0
 80005f6:	f001 fdbf 	bl	8002178 <HAL_PWREx_ControlVoltageScaling>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000600:	f000 fc5e 	bl	8000ec0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
 8000604:	2330      	movs	r3, #48	; 0x30
 8000606:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000608:	2301      	movs	r3, #1
 800060a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800060c:	2301      	movs	r3, #1
 800060e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000610:	2300      	movs	r3, #0
 8000612:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000614:	2360      	movs	r3, #96	; 0x60
 8000616:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000618:	2302      	movs	r3, #2
 800061a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800061c:	2301      	movs	r3, #1
 800061e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000620:	2301      	movs	r3, #1
 8000622:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000624:	233c      	movs	r3, #60	; 0x3c
 8000626:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 8000628:	2305      	movs	r3, #5
 800062a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800062c:	2302      	movs	r3, #2
 800062e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000630:	2302      	movs	r3, #2
 8000632:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000634:	f107 0314 	add.w	r3, r7, #20
 8000638:	4618      	mov	r0, r3
 800063a:	f001 fe51 	bl	80022e0 <HAL_RCC_OscConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000644:	f000 fc3c 	bl	8000ec0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000648:	230f      	movs	r3, #15
 800064a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064c:	2303      	movs	r3, #3
 800064e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800065c:	463b      	mov	r3, r7
 800065e:	2105      	movs	r1, #5
 8000660:	4618      	mov	r0, r3
 8000662:	f002 fa57 	bl	8002b14 <HAL_RCC_ClockConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800066c:	f000 fc28 	bl	8000ec0 <Error_Handler>
  }
}
 8000670:	bf00      	nop
 8000672:	3758      	adds	r7, #88	; 0x58
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800067c:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <MX_CRC_Init+0x3c>)
 800067e:	4a0e      	ldr	r2, [pc, #56]	; (80006b8 <MX_CRC_Init+0x40>)
 8000680:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000682:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <MX_CRC_Init+0x3c>)
 8000684:	2200      	movs	r2, #0
 8000686:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000688:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <MX_CRC_Init+0x3c>)
 800068a:	2200      	movs	r2, #0
 800068c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800068e:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <MX_CRC_Init+0x3c>)
 8000690:	2200      	movs	r2, #0
 8000692:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000694:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <MX_CRC_Init+0x3c>)
 8000696:	2200      	movs	r2, #0
 8000698:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800069a:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <MX_CRC_Init+0x3c>)
 800069c:	2201      	movs	r2, #1
 800069e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006a0:	4804      	ldr	r0, [pc, #16]	; (80006b4 <MX_CRC_Init+0x3c>)
 80006a2:	f001 f98f 	bl	80019c4 <HAL_CRC_Init>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80006ac:	f000 fc08 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	2000099c 	.word	0x2000099c
 80006b8:	40023000 	.word	0x40023000

080006bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006c0:	4b1b      	ldr	r3, [pc, #108]	; (8000730 <MX_I2C1_Init+0x74>)
 80006c2:	4a1c      	ldr	r2, [pc, #112]	; (8000734 <MX_I2C1_Init+0x78>)
 80006c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80006c6:	4b1a      	ldr	r3, [pc, #104]	; (8000730 <MX_I2C1_Init+0x74>)
 80006c8:	4a1b      	ldr	r2, [pc, #108]	; (8000738 <MX_I2C1_Init+0x7c>)
 80006ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006cc:	4b18      	ldr	r3, [pc, #96]	; (8000730 <MX_I2C1_Init+0x74>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d2:	4b17      	ldr	r3, [pc, #92]	; (8000730 <MX_I2C1_Init+0x74>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d8:	4b15      	ldr	r3, [pc, #84]	; (8000730 <MX_I2C1_Init+0x74>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006de:	4b14      	ldr	r3, [pc, #80]	; (8000730 <MX_I2C1_Init+0x74>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006e4:	4b12      	ldr	r3, [pc, #72]	; (8000730 <MX_I2C1_Init+0x74>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ea:	4b11      	ldr	r3, [pc, #68]	; (8000730 <MX_I2C1_Init+0x74>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f0:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <MX_I2C1_Init+0x74>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006f6:	480e      	ldr	r0, [pc, #56]	; (8000730 <MX_I2C1_Init+0x74>)
 80006f8:	f001 fbf8 	bl	8001eec <HAL_I2C_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000702:	f000 fbdd 	bl	8000ec0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000706:	2100      	movs	r1, #0
 8000708:	4809      	ldr	r0, [pc, #36]	; (8000730 <MX_I2C1_Init+0x74>)
 800070a:	f001 fc7e 	bl	800200a <HAL_I2CEx_ConfigAnalogFilter>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000714:	f000 fbd4 	bl	8000ec0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000718:	2100      	movs	r1, #0
 800071a:	4805      	ldr	r0, [pc, #20]	; (8000730 <MX_I2C1_Init+0x74>)
 800071c:	f001 fcc0 	bl	80020a0 <HAL_I2CEx_ConfigDigitalFilter>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000726:	f000 fbcb 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	200009c0 	.word	0x200009c0
 8000734:	40005400 	.word	0x40005400
 8000738:	307075b1 	.word	0x307075b1

0800073c <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000740:	4b2f      	ldr	r3, [pc, #188]	; (8000800 <MX_SAI1_Init+0xc4>)
 8000742:	4a30      	ldr	r2, [pc, #192]	; (8000804 <MX_SAI1_Init+0xc8>)
 8000744:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000746:	4b2e      	ldr	r3, [pc, #184]	; (8000800 <MX_SAI1_Init+0xc4>)
 8000748:	2200      	movs	r2, #0
 800074a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800074c:	4b2c      	ldr	r3, [pc, #176]	; (8000800 <MX_SAI1_Init+0xc4>)
 800074e:	2200      	movs	r2, #0
 8000750:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000752:	4b2b      	ldr	r3, [pc, #172]	; (8000800 <MX_SAI1_Init+0xc4>)
 8000754:	2240      	movs	r2, #64	; 0x40
 8000756:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000758:	4b29      	ldr	r3, [pc, #164]	; (8000800 <MX_SAI1_Init+0xc4>)
 800075a:	2200      	movs	r2, #0
 800075c:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800075e:	4b28      	ldr	r3, [pc, #160]	; (8000800 <MX_SAI1_Init+0xc4>)
 8000760:	2200      	movs	r2, #0
 8000762:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000764:	4b26      	ldr	r3, [pc, #152]	; (8000800 <MX_SAI1_Init+0xc4>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800076a:	4b25      	ldr	r3, [pc, #148]	; (8000800 <MX_SAI1_Init+0xc4>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000770:	4b23      	ldr	r3, [pc, #140]	; (8000800 <MX_SAI1_Init+0xc4>)
 8000772:	2200      	movs	r2, #0
 8000774:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8000776:	4b22      	ldr	r3, [pc, #136]	; (8000800 <MX_SAI1_Init+0xc4>)
 8000778:	2200      	movs	r2, #0
 800077a:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800077c:	4b20      	ldr	r3, [pc, #128]	; (8000800 <MX_SAI1_Init+0xc4>)
 800077e:	2200      	movs	r2, #0
 8000780:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000782:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <MX_SAI1_Init+0xc4>)
 8000784:	4a20      	ldr	r2, [pc, #128]	; (8000808 <MX_SAI1_Init+0xcc>)
 8000786:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000788:	4b1d      	ldr	r3, [pc, #116]	; (8000800 <MX_SAI1_Init+0xc4>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800078e:	4b1c      	ldr	r3, [pc, #112]	; (8000800 <MX_SAI1_Init+0xc4>)
 8000790:	2200      	movs	r2, #0
 8000792:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000794:	4b1a      	ldr	r3, [pc, #104]	; (8000800 <MX_SAI1_Init+0xc4>)
 8000796:	2200      	movs	r2, #0
 8000798:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800079a:	4b19      	ldr	r3, [pc, #100]	; (8000800 <MX_SAI1_Init+0xc4>)
 800079c:	2200      	movs	r2, #0
 800079e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 80007a0:	4b17      	ldr	r3, [pc, #92]	; (8000800 <MX_SAI1_Init+0xc4>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 0;
 80007a8:	4b15      	ldr	r3, [pc, #84]	; (8000800 <MX_SAI1_Init+0xc4>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80007ae:	4b14      	ldr	r3, [pc, #80]	; (8000800 <MX_SAI1_Init+0xc4>)
 80007b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007b4:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 80007b6:	4b12      	ldr	r3, [pc, #72]	; (8000800 <MX_SAI1_Init+0xc4>)
 80007b8:	2208      	movs	r2, #8
 80007ba:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 80007bc:	4b10      	ldr	r3, [pc, #64]	; (8000800 <MX_SAI1_Init+0xc4>)
 80007be:	2201      	movs	r2, #1
 80007c0:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80007c2:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <MX_SAI1_Init+0xc4>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80007c8:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <MX_SAI1_Init+0xc4>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80007ce:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <MX_SAI1_Init+0xc4>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 80007d4:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <MX_SAI1_Init+0xc4>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_SAI1_Init+0xc4>)
 80007dc:	2200      	movs	r2, #0
 80007de:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 80007e0:	4b07      	ldr	r3, [pc, #28]	; (8000800 <MX_SAI1_Init+0xc4>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <MX_SAI1_Init+0xc4>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 80007ec:	4804      	ldr	r0, [pc, #16]	; (8000800 <MX_SAI1_Init+0xc4>)
 80007ee:	f004 f9f5 	bl	8004bdc <HAL_SAI_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 80007f8:	f000 fb62 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000a14 	.word	0x20000a14
 8000804:	40015404 	.word	0x40015404
 8000808:	0002ee00 	.word	0x0002ee00

0800080c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000810:	4b1b      	ldr	r3, [pc, #108]	; (8000880 <MX_SPI2_Init+0x74>)
 8000812:	4a1c      	ldr	r2, [pc, #112]	; (8000884 <MX_SPI2_Init+0x78>)
 8000814:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000816:	4b1a      	ldr	r3, [pc, #104]	; (8000880 <MX_SPI2_Init+0x74>)
 8000818:	f44f 7282 	mov.w	r2, #260	; 0x104
 800081c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800081e:	4b18      	ldr	r3, [pc, #96]	; (8000880 <MX_SPI2_Init+0x74>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000824:	4b16      	ldr	r3, [pc, #88]	; (8000880 <MX_SPI2_Init+0x74>)
 8000826:	f44f 7240 	mov.w	r2, #768	; 0x300
 800082a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800082c:	4b14      	ldr	r3, [pc, #80]	; (8000880 <MX_SPI2_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000832:	4b13      	ldr	r3, [pc, #76]	; (8000880 <MX_SPI2_Init+0x74>)
 8000834:	2200      	movs	r2, #0
 8000836:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000838:	4b11      	ldr	r3, [pc, #68]	; (8000880 <MX_SPI2_Init+0x74>)
 800083a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800083e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000840:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <MX_SPI2_Init+0x74>)
 8000842:	2208      	movs	r2, #8
 8000844:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <MX_SPI2_Init+0x74>)
 8000848:	2200      	movs	r2, #0
 800084a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800084c:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <MX_SPI2_Init+0x74>)
 800084e:	2200      	movs	r2, #0
 8000850:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <MX_SPI2_Init+0x74>)
 8000854:	2200      	movs	r2, #0
 8000856:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000858:	4b09      	ldr	r3, [pc, #36]	; (8000880 <MX_SPI2_Init+0x74>)
 800085a:	2207      	movs	r2, #7
 800085c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800085e:	4b08      	ldr	r3, [pc, #32]	; (8000880 <MX_SPI2_Init+0x74>)
 8000860:	2200      	movs	r2, #0
 8000862:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <MX_SPI2_Init+0x74>)
 8000866:	2208      	movs	r2, #8
 8000868:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800086a:	4805      	ldr	r0, [pc, #20]	; (8000880 <MX_SPI2_Init+0x74>)
 800086c:	f004 fbce 	bl	800500c <HAL_SPI_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000876:	f000 fb23 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000aa8 	.word	0x20000aa8
 8000884:	40003800 	.word	0x40003800

08000888 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800088c:	4b22      	ldr	r3, [pc, #136]	; (8000918 <MX_USART2_UART_Init+0x90>)
 800088e:	4a23      	ldr	r2, [pc, #140]	; (800091c <MX_USART2_UART_Init+0x94>)
 8000890:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000892:	4b21      	ldr	r3, [pc, #132]	; (8000918 <MX_USART2_UART_Init+0x90>)
 8000894:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000898:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800089a:	4b1f      	ldr	r3, [pc, #124]	; (8000918 <MX_USART2_UART_Init+0x90>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008a0:	4b1d      	ldr	r3, [pc, #116]	; (8000918 <MX_USART2_UART_Init+0x90>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008a6:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <MX_USART2_UART_Init+0x90>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008ac:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <MX_USART2_UART_Init+0x90>)
 80008ae:	220c      	movs	r2, #12
 80008b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b2:	4b19      	ldr	r3, [pc, #100]	; (8000918 <MX_USART2_UART_Init+0x90>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b8:	4b17      	ldr	r3, [pc, #92]	; (8000918 <MX_USART2_UART_Init+0x90>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008be:	4b16      	ldr	r3, [pc, #88]	; (8000918 <MX_USART2_UART_Init+0x90>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008c4:	4b14      	ldr	r3, [pc, #80]	; (8000918 <MX_USART2_UART_Init+0x90>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ca:	4b13      	ldr	r3, [pc, #76]	; (8000918 <MX_USART2_UART_Init+0x90>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008d0:	4811      	ldr	r0, [pc, #68]	; (8000918 <MX_USART2_UART_Init+0x90>)
 80008d2:	f004 fc86 	bl	80051e2 <HAL_UART_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80008dc:	f000 faf0 	bl	8000ec0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008e0:	2100      	movs	r1, #0
 80008e2:	480d      	ldr	r0, [pc, #52]	; (8000918 <MX_USART2_UART_Init+0x90>)
 80008e4:	f005 fb22 	bl	8005f2c <HAL_UARTEx_SetTxFifoThreshold>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80008ee:	f000 fae7 	bl	8000ec0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008f2:	2100      	movs	r1, #0
 80008f4:	4808      	ldr	r0, [pc, #32]	; (8000918 <MX_USART2_UART_Init+0x90>)
 80008f6:	f005 fb57 	bl	8005fa8 <HAL_UARTEx_SetRxFifoThreshold>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000900:	f000 fade 	bl	8000ec0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000904:	4804      	ldr	r0, [pc, #16]	; (8000918 <MX_USART2_UART_Init+0x90>)
 8000906:	f005 fad8 	bl	8005eba <HAL_UARTEx_DisableFifoMode>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000910:	f000 fad6 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000b0c 	.word	0x20000b0c
 800091c:	40004400 	.word	0x40004400

08000920 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000924:	4b22      	ldr	r3, [pc, #136]	; (80009b0 <MX_USART3_UART_Init+0x90>)
 8000926:	4a23      	ldr	r2, [pc, #140]	; (80009b4 <MX_USART3_UART_Init+0x94>)
 8000928:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800092a:	4b21      	ldr	r3, [pc, #132]	; (80009b0 <MX_USART3_UART_Init+0x90>)
 800092c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000930:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000932:	4b1f      	ldr	r3, [pc, #124]	; (80009b0 <MX_USART3_UART_Init+0x90>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000938:	4b1d      	ldr	r3, [pc, #116]	; (80009b0 <MX_USART3_UART_Init+0x90>)
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800093e:	4b1c      	ldr	r3, [pc, #112]	; (80009b0 <MX_USART3_UART_Init+0x90>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000944:	4b1a      	ldr	r3, [pc, #104]	; (80009b0 <MX_USART3_UART_Init+0x90>)
 8000946:	220c      	movs	r2, #12
 8000948:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094a:	4b19      	ldr	r3, [pc, #100]	; (80009b0 <MX_USART3_UART_Init+0x90>)
 800094c:	2200      	movs	r2, #0
 800094e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000950:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <MX_USART3_UART_Init+0x90>)
 8000952:	2200      	movs	r2, #0
 8000954:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000956:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <MX_USART3_UART_Init+0x90>)
 8000958:	2200      	movs	r2, #0
 800095a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800095c:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <MX_USART3_UART_Init+0x90>)
 800095e:	2200      	movs	r2, #0
 8000960:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000962:	4b13      	ldr	r3, [pc, #76]	; (80009b0 <MX_USART3_UART_Init+0x90>)
 8000964:	2200      	movs	r2, #0
 8000966:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000968:	4811      	ldr	r0, [pc, #68]	; (80009b0 <MX_USART3_UART_Init+0x90>)
 800096a:	f004 fc3a 	bl	80051e2 <HAL_UART_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000974:	f000 faa4 	bl	8000ec0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000978:	2100      	movs	r1, #0
 800097a:	480d      	ldr	r0, [pc, #52]	; (80009b0 <MX_USART3_UART_Init+0x90>)
 800097c:	f005 fad6 	bl	8005f2c <HAL_UARTEx_SetTxFifoThreshold>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000986:	f000 fa9b 	bl	8000ec0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800098a:	2100      	movs	r1, #0
 800098c:	4808      	ldr	r0, [pc, #32]	; (80009b0 <MX_USART3_UART_Init+0x90>)
 800098e:	f005 fb0b 	bl	8005fa8 <HAL_UARTEx_SetRxFifoThreshold>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000998:	f000 fa92 	bl	8000ec0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800099c:	4804      	ldr	r0, [pc, #16]	; (80009b0 <MX_USART3_UART_Init+0x90>)
 800099e:	f005 fa8c 	bl	8005eba <HAL_UARTEx_DisableFifoMode>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009a8:	f000 fa8a 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000b9c 	.word	0x20000b9c
 80009b4:	40004800 	.word	0x40004800

080009b8 <MX_FMC_Init>:

}

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b088      	sub	sp, #32
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 80009be:	463b      	mov	r3, r7
 80009c0:	2220      	movs	r2, #32
 80009c2:	2100      	movs	r1, #0
 80009c4:	4618      	mov	r0, r3
 80009c6:	f008 fac9 	bl	8008f5c <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 80009ca:	4b2c      	ldr	r3, [pc, #176]	; (8000a7c <MX_FMC_Init+0xc4>)
 80009cc:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80009d0:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80009d2:	4b2a      	ldr	r3, [pc, #168]	; (8000a7c <MX_FMC_Init+0xc4>)
 80009d4:	4a2a      	ldr	r2, [pc, #168]	; (8000a80 <MX_FMC_Init+0xc8>)
 80009d6:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 80009d8:	4b28      	ldr	r3, [pc, #160]	; (8000a7c <MX_FMC_Init+0xc4>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80009de:	4b27      	ldr	r3, [pc, #156]	; (8000a7c <MX_FMC_Init+0xc4>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_PSRAM;
 80009e4:	4b25      	ldr	r3, [pc, #148]	; (8000a7c <MX_FMC_Init+0xc4>)
 80009e6:	2204      	movs	r2, #4
 80009e8:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80009ea:	4b24      	ldr	r3, [pc, #144]	; (8000a7c <MX_FMC_Init+0xc4>)
 80009ec:	2210      	movs	r2, #16
 80009ee:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_ENABLE;
 80009f0:	4b22      	ldr	r3, [pc, #136]	; (8000a7c <MX_FMC_Init+0xc4>)
 80009f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009f6:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80009f8:	4b20      	ldr	r3, [pc, #128]	; (8000a7c <MX_FMC_Init+0xc4>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80009fe:	4b1f      	ldr	r3, [pc, #124]	; (8000a7c <MX_FMC_Init+0xc4>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8000a04:	4b1d      	ldr	r3, [pc, #116]	; (8000a7c <MX_FMC_Init+0xc4>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_ENABLE;
 8000a0a:	4b1c      	ldr	r3, [pc, #112]	; (8000a7c <MX_FMC_Init+0xc4>)
 8000a0c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a10:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000a12:	4b1a      	ldr	r3, [pc, #104]	; (8000a7c <MX_FMC_Init+0xc4>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000a18:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <MX_FMC_Init+0xc4>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_ENABLE;
 8000a1e:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <MX_FMC_Init+0xc4>)
 8000a20:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000a24:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000a26:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <MX_FMC_Init+0xc4>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000a2c:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <MX_FMC_Init+0xc4>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 8000a32:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <MX_FMC_Init+0xc4>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	645a      	str	r2, [r3, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000a38:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <MX_FMC_Init+0xc4>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000a3e:	230f      	movs	r3, #15
 8000a40:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8000a42:	230f      	movs	r3, #15
 8000a44:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8000a46:	23ff      	movs	r3, #255	; 0xff
 8000a48:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000a4e:	230f      	movs	r3, #15
 8000a50:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000a52:	2310      	movs	r3, #16
 8000a54:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 2;
 8000a56:	2302      	movs	r3, #2
 8000a58:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000a5e:	463b      	mov	r3, r7
 8000a60:	2200      	movs	r2, #0
 8000a62:	4619      	mov	r1, r3
 8000a64:	4805      	ldr	r0, [pc, #20]	; (8000a7c <MX_FMC_Init+0xc4>)
 8000a66:	f004 fb74 	bl	8005152 <HAL_SRAM_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_FMC_Init+0xbc>
  {
    Error_Handler( );
 8000a70:	f000 fa26 	bl	8000ec0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000a74:	bf00      	nop
 8000a76:	3720      	adds	r7, #32
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000c2c 	.word	0x20000c2c
 8000a80:	a0000104 	.word	0xa0000104

08000a84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08e      	sub	sp, #56	; 0x38
 8000a88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
 8000a98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a9a:	4bb2      	ldr	r3, [pc, #712]	; (8000d64 <MX_GPIO_Init+0x2e0>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	4ab1      	ldr	r2, [pc, #708]	; (8000d64 <MX_GPIO_Init+0x2e0>)
 8000aa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aa6:	4baf      	ldr	r3, [pc, #700]	; (8000d64 <MX_GPIO_Init+0x2e0>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000aae:	623b      	str	r3, [r7, #32]
 8000ab0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ab2:	4bac      	ldr	r3, [pc, #688]	; (8000d64 <MX_GPIO_Init+0x2e0>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab6:	4aab      	ldr	r2, [pc, #684]	; (8000d64 <MX_GPIO_Init+0x2e0>)
 8000ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000abc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000abe:	4ba9      	ldr	r3, [pc, #676]	; (8000d64 <MX_GPIO_Init+0x2e0>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ac6:	61fb      	str	r3, [r7, #28]
 8000ac8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aca:	4ba6      	ldr	r3, [pc, #664]	; (8000d64 <MX_GPIO_Init+0x2e0>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ace:	4aa5      	ldr	r2, [pc, #660]	; (8000d64 <MX_GPIO_Init+0x2e0>)
 8000ad0:	f043 0310 	orr.w	r3, r3, #16
 8000ad4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad6:	4ba3      	ldr	r3, [pc, #652]	; (8000d64 <MX_GPIO_Init+0x2e0>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ada:	f003 0310 	and.w	r3, r3, #16
 8000ade:	61bb      	str	r3, [r7, #24]
 8000ae0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae2:	4ba0      	ldr	r3, [pc, #640]	; (8000d64 <MX_GPIO_Init+0x2e0>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae6:	4a9f      	ldr	r2, [pc, #636]	; (8000d64 <MX_GPIO_Init+0x2e0>)
 8000ae8:	f043 0302 	orr.w	r3, r3, #2
 8000aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aee:	4b9d      	ldr	r3, [pc, #628]	; (8000d64 <MX_GPIO_Init+0x2e0>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af2:	f003 0302 	and.w	r3, r3, #2
 8000af6:	617b      	str	r3, [r7, #20]
 8000af8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	4b9a      	ldr	r3, [pc, #616]	; (8000d64 <MX_GPIO_Init+0x2e0>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afe:	4a99      	ldr	r2, [pc, #612]	; (8000d64 <MX_GPIO_Init+0x2e0>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b06:	4b97      	ldr	r3, [pc, #604]	; (8000d64 <MX_GPIO_Init+0x2e0>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	613b      	str	r3, [r7, #16]
 8000b10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b12:	4b94      	ldr	r3, [pc, #592]	; (8000d64 <MX_GPIO_Init+0x2e0>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b16:	4a93      	ldr	r2, [pc, #588]	; (8000d64 <MX_GPIO_Init+0x2e0>)
 8000b18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b1e:	4b91      	ldr	r3, [pc, #580]	; (8000d64 <MX_GPIO_Init+0x2e0>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 8000b2a:	f001 fbc9 	bl	80022c0 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b2e:	4b8d      	ldr	r3, [pc, #564]	; (8000d64 <MX_GPIO_Init+0x2e0>)
 8000b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b32:	4a8c      	ldr	r2, [pc, #560]	; (8000d64 <MX_GPIO_Init+0x2e0>)
 8000b34:	f043 0308 	orr.w	r3, r3, #8
 8000b38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b3a:	4b8a      	ldr	r3, [pc, #552]	; (8000d64 <MX_GPIO_Init+0x2e0>)
 8000b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3e:	f003 0308 	and.w	r3, r3, #8
 8000b42:	60bb      	str	r3, [r7, #8]
 8000b44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b46:	4b87      	ldr	r3, [pc, #540]	; (8000d64 <MX_GPIO_Init+0x2e0>)
 8000b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4a:	4a86      	ldr	r2, [pc, #536]	; (8000d64 <MX_GPIO_Init+0x2e0>)
 8000b4c:	f043 0304 	orr.w	r3, r3, #4
 8000b50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b52:	4b84      	ldr	r3, [pc, #528]	; (8000d64 <MX_GPIO_Init+0x2e0>)
 8000b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b56:	f003 0304 	and.w	r3, r3, #4
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b5e:	4b81      	ldr	r3, [pc, #516]	; (8000d64 <MX_GPIO_Init+0x2e0>)
 8000b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b62:	4a80      	ldr	r2, [pc, #512]	; (8000d64 <MX_GPIO_Init+0x2e0>)
 8000b64:	f043 0320 	orr.w	r3, r3, #32
 8000b68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b6a:	4b7e      	ldr	r3, [pc, #504]	; (8000d64 <MX_GPIO_Init+0x2e0>)
 8000b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6e:	f003 0320 	and.w	r3, r3, #32
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8000b76:	2200      	movs	r2, #0
 8000b78:	f244 0114 	movw	r1, #16404	; 0x4014
 8000b7c:	487a      	ldr	r0, [pc, #488]	; (8000d68 <MX_GPIO_Init+0x2e4>)
 8000b7e:	f001 f99d 	bl	8001ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(JOY_SEL_GPIO_Port, JOY_SEL_Pin, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b88:	4878      	ldr	r0, [pc, #480]	; (8000d6c <MX_GPIO_Init+0x2e8>)
 8000b8a:	f001 f997 	bl	8001ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2140      	movs	r1, #64	; 0x40
 8000b92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b96:	f001 f991 	bl	8001ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_Port, MFX_WAKEUP_Pin, GPIO_PIN_RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2104      	movs	r1, #4
 8000b9e:	4874      	ldr	r0, [pc, #464]	; (8000d70 <MX_GPIO_Init+0x2ec>)
 8000ba0:	f001 f98c 	bl	8001ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OCTOSPIM_P2_IO1_Pin OCTOSPIM_P2_IO2_Pin OCTOSPIM_P2_CLK_Pin OCTOSPIM_P2_IO0_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO1_Pin|OCTOSPIM_P2_IO2_Pin|OCTOSPIM_P2_CLK_Pin|OCTOSPIM_P2_IO0_Pin;
 8000ba4:	f44f 6364 	mov.w	r3, #3648	; 0xe40
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000baa:	2302      	movs	r3, #2
 8000bac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000bb6:	2305      	movs	r3, #5
 8000bb8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000bba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	486c      	ldr	r0, [pc, #432]	; (8000d74 <MX_GPIO_Init+0x2f0>)
 8000bc2:	f000 ffe9 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : MIC_VDD_Pin DSI_SPI_USART_CS_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin;
 8000bc6:	f244 0314 	movw	r3, #16404	; 0x4014
 8000bca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4862      	ldr	r0, [pc, #392]	; (8000d68 <MX_GPIO_Init+0x2e4>)
 8000be0:	f000 ffda 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000be4:	2310      	movs	r3, #16
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be8:	2302      	movs	r3, #2
 8000bea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000bf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	485c      	ldr	r0, [pc, #368]	; (8000d70 <MX_GPIO_Init+0x2ec>)
 8000c00:	f000 ffca 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D7_Pin DCMI_D5_Pin DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 8000c04:	23b0      	movs	r3, #176	; 0xb0
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c10:	2300      	movs	r3, #0
 8000c12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000c14:	230a      	movs	r3, #10
 8000c16:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4855      	ldr	r0, [pc, #340]	; (8000d74 <MX_GPIO_Init+0x2f0>)
 8000c20:	f000 ffba 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOSPIM_P2_IO6_Pin OCTOSPIM_P2_DQS_Pin OCTOSPIM_P2_IO7_Pin OCTOSPIM_P2_CS_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO6_Pin|OCTOSPIM_P2_DQS_Pin|OCTOSPIM_P2_IO7_Pin|OCTOSPIM_P2_CS_Pin;
 8000c24:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c32:	2303      	movs	r3, #3
 8000c34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000c36:	2305      	movs	r3, #5
 8000c38:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3e:	4619      	mov	r1, r3
 8000c40:	484d      	ldr	r0, [pc, #308]	; (8000d78 <MX_GPIO_Init+0x2f4>)
 8000c42:	f000 ffa9 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8000c46:	2302      	movs	r3, #2
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c4a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8000c54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4846      	ldr	r0, [pc, #280]	; (8000d74 <MX_GPIO_Init+0x2f0>)
 8000c5c:	f000 ff9c 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D3_Pin DCMI_PIXCLK_Pin DCMI_D2_Pin */
  GPIO_InitStruct.Pin = DCMI_D3_Pin|DCMI_PIXCLK_Pin|DCMI_D2_Pin;
 8000c60:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c66:	2302      	movs	r3, #2
 8000c68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000c72:	230a      	movs	r3, #10
 8000c74:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	483a      	ldr	r0, [pc, #232]	; (8000d68 <MX_GPIO_Init+0x2e4>)
 8000c7e:	f000 ff8b 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 8000c82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c90:	2300      	movs	r3, #0
 8000c92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000c94:	2303      	movs	r3, #3
 8000c96:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8000c98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4832      	ldr	r0, [pc, #200]	; (8000d68 <MX_GPIO_Init+0x2e4>)
 8000ca0:	f000 ff7a 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOPSIM_P2_IO4_Pin OCTOSPIM_P2_IO5_Pin OCTOSPI_P2_IO3_Pin */
  GPIO_InitStruct.Pin = OCTOPSIM_P2_IO4_Pin|OCTOSPIM_P2_IO5_Pin|OCTOSPI_P2_IO3_Pin;
 8000ca4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	2302      	movs	r3, #2
 8000cac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000cb6:	2305      	movs	r3, #5
 8000cb8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4829      	ldr	r0, [pc, #164]	; (8000d68 <MX_GPIO_Init+0x2e4>)
 8000cc2:	f000 ff69 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_SEL_Pin;
 8000cc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 8000cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4823      	ldr	r0, [pc, #140]	; (8000d6c <MX_GPIO_Init+0x2e8>)
 8000ce0:	f000 ff5a 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_14_Pin ARD_15_Pin */
  GPIO_InitStruct.Pin = ARD_14_Pin|ARD_15_Pin;
 8000ce4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cea:	2312      	movs	r3, #18
 8000cec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000cf6:	2304      	movs	r3, #4
 8000cf8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cfe:	4619      	mov	r1, r3
 8000d00:	481d      	ldr	r0, [pc, #116]	; (8000d78 <MX_GPIO_Init+0x2f4>)
 8000d02:	f000 ff49 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_INT_Pin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 8000d06:	2340      	movs	r3, #64	; 0x40
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d0a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 8000d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4814      	ldr	r0, [pc, #80]	; (8000d6c <MX_GPIO_Init+0x2e8>)
 8000d1c:	f000 ff3c 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFDATIN3_Pin DF_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFDATIN3_Pin|DF_CKOUT_Pin;
 8000d20:	2384      	movs	r3, #132	; 0x84
 8000d22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d24:	2302      	movs	r3, #2
 8000d26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000d30:	2306      	movs	r3, #6
 8000d32:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d38:	4619      	mov	r1, r3
 8000d3a:	480c      	ldr	r0, [pc, #48]	; (8000d6c <MX_GPIO_Init+0x2e8>)
 8000d3c:	f000 ff2c 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D0_Pin ARD_D1_Pin */
  GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8000d40:	2303      	movs	r3, #3
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d44:	2302      	movs	r3, #2
 8000d46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000d50:	2308      	movs	r3, #8
 8000d52:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4804      	ldr	r0, [pc, #16]	; (8000d6c <MX_GPIO_Init+0x2e8>)
 8000d5c:	f000 ff1c 	bl	8001b98 <HAL_GPIO_Init>
 8000d60:	e00c      	b.n	8000d7c <MX_GPIO_Init+0x2f8>
 8000d62:	bf00      	nop
 8000d64:	40021000 	.word	0x40021000
 8000d68:	48001c00 	.word	0x48001c00
 8000d6c:	48000800 	.word	0x48000800
 8000d70:	48000400 	.word	0x48000400
 8000d74:	48002000 	.word	0x48002000
 8000d78:	48001800 	.word	0x48001800

  /*Configure GPIO pins : ARD_A2_Pin ARD_A1_Pin */
  GPIO_InitStruct.Pin = ARD_A2_Pin|ARD_A1_Pin;
 8000d7c:	2318      	movs	r3, #24
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d80:	230b      	movs	r3, #11
 8000d82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4849      	ldr	r0, [pc, #292]	; (8000eb4 <MX_GPIO_Init+0x430>)
 8000d90:	f000 ff02 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A4_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A4_Pin|ARD_A0_Pin;
 8000d94:	2381      	movs	r3, #129	; 0x81
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d98:	230b      	movs	r3, #11
 8000d9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da4:	4619      	mov	r1, r3
 8000da6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000daa:	f000 fef5 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_PWM_Pin */
  GPIO_InitStruct.Pin = STMOD_PWM_Pin;
 8000dae:	2320      	movs	r3, #32
 8000db0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db2:	2302      	movs	r3, #2
 8000db4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(STMOD_PWM_GPIO_Port, &GPIO_InitStruct);
 8000dc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dcc:	f000 fee4 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8000dd0:	2340      	movs	r3, #64	; 0x40
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8000de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de4:	4619      	mov	r1, r3
 8000de6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dea:	f000 fed5 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8000dee:	2302      	movs	r3, #2
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df2:	2302      	movs	r3, #2
 8000df4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8000e02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e06:	4619      	mov	r1, r3
 8000e08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e0c:	f000 fec4 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_TE_Pin */
  GPIO_InitStruct.Pin = DSI_TE_Pin;
 8000e10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e16:	2302      	movs	r3, #2
 8000e18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_DSI;
 8000e22:	230b      	movs	r3, #11
 8000e24:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 8000e26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4822      	ldr	r0, [pc, #136]	; (8000eb8 <MX_GPIO_Init+0x434>)
 8000e2e:	f000 feb3 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_HSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin;
 8000e32:	2310      	movs	r3, #16
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	2302      	movs	r3, #2
 8000e38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000e42:	230a      	movs	r3, #10
 8000e44:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8000e46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e50:	f000 fea2 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_A3_Pin */
  GPIO_InitStruct.Pin = ARD_A3_Pin;
 8000e54:	2301      	movs	r3, #1
 8000e56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e58:	230b      	movs	r3, #11
 8000e5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 8000e60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e64:	4619      	mov	r1, r3
 8000e66:	4815      	ldr	r0, [pc, #84]	; (8000ebc <MX_GPIO_Init+0x438>)
 8000e68:	f000 fe96 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8000e6c:	2304      	movs	r3, #4
 8000e6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e70:	2301      	movs	r3, #1
 8000e72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000e7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e80:	4619      	mov	r1, r3
 8000e82:	480e      	ldr	r0, [pc, #56]	; (8000ebc <MX_GPIO_Init+0x438>)
 8000e84:	f000 fe88 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFDATIN1_Pin */
  GPIO_InitStruct.Pin = DFDATIN1_Pin;
 8000e88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2300      	movs	r3, #0
 8000e98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000e9a:	2306      	movs	r3, #6
 8000e9c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 8000e9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4805      	ldr	r0, [pc, #20]	; (8000ebc <MX_GPIO_Init+0x438>)
 8000ea6:	f000 fe77 	bl	8001b98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000eaa:	bf00      	nop
 8000eac:	3738      	adds	r7, #56	; 0x38
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	48000800 	.word	0x48000800
 8000eb8:	48001400 	.word	0x48001400
 8000ebc:	48000400 	.word	0x48000400

08000ec0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec4:	b672      	cpsid	i
}
 8000ec6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <Error_Handler+0x8>
	...

08000ecc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed2:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <HAL_MspInit+0x44>)
 8000ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ed6:	4a0e      	ldr	r2, [pc, #56]	; (8000f10 <HAL_MspInit+0x44>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	6613      	str	r3, [r2, #96]	; 0x60
 8000ede:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <HAL_MspInit+0x44>)
 8000ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eea:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <HAL_MspInit+0x44>)
 8000eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eee:	4a08      	ldr	r2, [pc, #32]	; (8000f10 <HAL_MspInit+0x44>)
 8000ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ef6:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_MspInit+0x44>)
 8000ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efe:	603b      	str	r3, [r7, #0]
 8000f00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	40021000 	.word	0x40021000

08000f14 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <HAL_CRC_MspInit+0x38>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d10b      	bne.n	8000f3e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f26:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <HAL_CRC_MspInit+0x3c>)
 8000f28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f2a:	4a09      	ldr	r2, [pc, #36]	; (8000f50 <HAL_CRC_MspInit+0x3c>)
 8000f2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f30:	6493      	str	r3, [r2, #72]	; 0x48
 8000f32:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <HAL_CRC_MspInit+0x3c>)
 8000f34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000f3e:	bf00      	nop
 8000f40:	3714      	adds	r7, #20
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	40023000 	.word	0x40023000
 8000f50:	40021000 	.word	0x40021000

08000f54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b0b2      	sub	sp, #200	; 0xc8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f6c:	f107 0318 	add.w	r3, r7, #24
 8000f70:	229c      	movs	r2, #156	; 0x9c
 8000f72:	2100      	movs	r1, #0
 8000f74:	4618      	mov	r0, r3
 8000f76:	f007 fff1 	bl	8008f5c <memset>
  if(hi2c->Instance==I2C1)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a33      	ldr	r2, [pc, #204]	; (800104c <HAL_I2C_MspInit+0xf8>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d15e      	bne.n	8001042 <HAL_I2C_MspInit+0xee>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f84:	2340      	movs	r3, #64	; 0x40
 8000f86:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f8c:	f107 0318 	add.w	r3, r7, #24
 8000f90:	4618      	mov	r0, r3
 8000f92:	f002 f879 	bl	8003088 <HAL_RCCEx_PeriphCLKConfig>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000f9c:	f7ff ff90 	bl	8000ec0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa0:	4b2b      	ldr	r3, [pc, #172]	; (8001050 <HAL_I2C_MspInit+0xfc>)
 8000fa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa4:	4a2a      	ldr	r2, [pc, #168]	; (8001050 <HAL_I2C_MspInit+0xfc>)
 8000fa6:	f043 0302 	orr.w	r3, r3, #2
 8000faa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fac:	4b28      	ldr	r3, [pc, #160]	; (8001050 <HAL_I2C_MspInit+0xfc>)
 8000fae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb0:	f003 0302 	and.w	r3, r3, #2
 8000fb4:	617b      	str	r3, [r7, #20]
 8000fb6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fb8:	4b25      	ldr	r3, [pc, #148]	; (8001050 <HAL_I2C_MspInit+0xfc>)
 8000fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fbc:	4a24      	ldr	r2, [pc, #144]	; (8001050 <HAL_I2C_MspInit+0xfc>)
 8000fbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fc4:	4b22      	ldr	r3, [pc, #136]	; (8001050 <HAL_I2C_MspInit+0xfc>)
 8000fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fcc:	613b      	str	r3, [r7, #16]
 8000fce:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8000fd0:	f001 f976 	bl	80022c0 <HAL_PWREx_EnableVddIO2>
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PG13     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin;
 8000fd4:	2340      	movs	r3, #64	; 0x40
 8000fd6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fda:	2312      	movs	r3, #18
 8000fdc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fec:	2304      	movs	r3, #4
 8000fee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(I2C1_SCL_GPIO_Port, &GPIO_InitStruct);
 8000ff2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4816      	ldr	r0, [pc, #88]	; (8001054 <HAL_I2C_MspInit+0x100>)
 8000ffa:	f000 fdcd 	bl	8001b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C1_SDA_Pin;
 8000ffe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001002:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001006:	2312      	movs	r3, #18
 8001008:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800100c:	2301      	movs	r3, #1
 800100e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001012:	2303      	movs	r3, #3
 8001014:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001018:	2304      	movs	r3, #4
 800101a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStruct);
 800101e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001022:	4619      	mov	r1, r3
 8001024:	480c      	ldr	r0, [pc, #48]	; (8001058 <HAL_I2C_MspInit+0x104>)
 8001026:	f000 fdb7 	bl	8001b98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800102a:	4b09      	ldr	r3, [pc, #36]	; (8001050 <HAL_I2C_MspInit+0xfc>)
 800102c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102e:	4a08      	ldr	r2, [pc, #32]	; (8001050 <HAL_I2C_MspInit+0xfc>)
 8001030:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001034:	6593      	str	r3, [r2, #88]	; 0x58
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_I2C_MspInit+0xfc>)
 8001038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800103a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001042:	bf00      	nop
 8001044:	37c8      	adds	r7, #200	; 0xc8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40005400 	.word	0x40005400
 8001050:	40021000 	.word	0x40021000
 8001054:	48000400 	.word	0x48000400
 8001058:	48001800 	.word	0x48001800

0800105c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08a      	sub	sp, #40	; 0x28
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a25      	ldr	r2, [pc, #148]	; (8001110 <HAL_SPI_MspInit+0xb4>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d144      	bne.n	8001108 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800107e:	4b25      	ldr	r3, [pc, #148]	; (8001114 <HAL_SPI_MspInit+0xb8>)
 8001080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001082:	4a24      	ldr	r2, [pc, #144]	; (8001114 <HAL_SPI_MspInit+0xb8>)
 8001084:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001088:	6593      	str	r3, [r2, #88]	; 0x58
 800108a:	4b22      	ldr	r3, [pc, #136]	; (8001114 <HAL_SPI_MspInit+0xb8>)
 800108c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800108e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001092:	613b      	str	r3, [r7, #16]
 8001094:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001096:	4b1f      	ldr	r3, [pc, #124]	; (8001114 <HAL_SPI_MspInit+0xb8>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109a:	4a1e      	ldr	r2, [pc, #120]	; (8001114 <HAL_SPI_MspInit+0xb8>)
 800109c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010a2:	4b1c      	ldr	r3, [pc, #112]	; (8001114 <HAL_SPI_MspInit+0xb8>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ae:	4b19      	ldr	r3, [pc, #100]	; (8001114 <HAL_SPI_MspInit+0xb8>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b2:	4a18      	ldr	r2, [pc, #96]	; (8001114 <HAL_SPI_MspInit+0xb8>)
 80010b4:	f043 0302 	orr.w	r3, r3, #2
 80010b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ba:	4b16      	ldr	r3, [pc, #88]	; (8001114 <HAL_SPI_MspInit+0xb8>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	68bb      	ldr	r3, [r7, #8]
    PI0     ------> SPI2_NSS
    PB15     ------> SPI2_MOSI
    PB14     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = ARD_10_Pin;
 80010c6:	2301      	movs	r3, #1
 80010c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	2302      	movs	r3, #2
 80010cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d2:	2303      	movs	r3, #3
 80010d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010d6:	2305      	movs	r3, #5
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_10_GPIO_Port, &GPIO_InitStruct);
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	4619      	mov	r1, r3
 80010e0:	480d      	ldr	r0, [pc, #52]	; (8001118 <HAL_SPI_MspInit+0xbc>)
 80010e2:	f000 fd59 	bl	8001b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_MOSI_Pin|SPI2_MISO_Pin|SPI2_CLK_Pin;
 80010e6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80010ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	2302      	movs	r3, #2
 80010ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f4:	2303      	movs	r3, #3
 80010f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010f8:	2305      	movs	r3, #5
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	4619      	mov	r1, r3
 8001102:	4806      	ldr	r0, [pc, #24]	; (800111c <HAL_SPI_MspInit+0xc0>)
 8001104:	f000 fd48 	bl	8001b98 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001108:	bf00      	nop
 800110a:	3728      	adds	r7, #40	; 0x28
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40003800 	.word	0x40003800
 8001114:	40021000 	.word	0x40021000
 8001118:	48002000 	.word	0x48002000
 800111c:	48000400 	.word	0x48000400

08001120 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b0b4      	sub	sp, #208	; 0xd0
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001138:	f107 0320 	add.w	r3, r7, #32
 800113c:	229c      	movs	r2, #156	; 0x9c
 800113e:	2100      	movs	r1, #0
 8001140:	4618      	mov	r0, r3
 8001142:	f007 ff0b 	bl	8008f5c <memset>
  if(huart->Instance==USART2)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a54      	ldr	r2, [pc, #336]	; (800129c <HAL_UART_MspInit+0x17c>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d13c      	bne.n	80011ca <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001150:	2302      	movs	r3, #2
 8001152:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001154:	2300      	movs	r3, #0
 8001156:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001158:	f107 0320 	add.w	r3, r7, #32
 800115c:	4618      	mov	r0, r3
 800115e:	f001 ff93 	bl	8003088 <HAL_RCCEx_PeriphCLKConfig>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001168:	f7ff feaa 	bl	8000ec0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800116c:	4b4c      	ldr	r3, [pc, #304]	; (80012a0 <HAL_UART_MspInit+0x180>)
 800116e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001170:	4a4b      	ldr	r2, [pc, #300]	; (80012a0 <HAL_UART_MspInit+0x180>)
 8001172:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001176:	6593      	str	r3, [r2, #88]	; 0x58
 8001178:	4b49      	ldr	r3, [pc, #292]	; (80012a0 <HAL_UART_MspInit+0x180>)
 800117a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800117c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001180:	61fb      	str	r3, [r7, #28]
 8001182:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001184:	4b46      	ldr	r3, [pc, #280]	; (80012a0 <HAL_UART_MspInit+0x180>)
 8001186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001188:	4a45      	ldr	r2, [pc, #276]	; (80012a0 <HAL_UART_MspInit+0x180>)
 800118a:	f043 0301 	orr.w	r3, r3, #1
 800118e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001190:	4b43      	ldr	r3, [pc, #268]	; (80012a0 <HAL_UART_MspInit+0x180>)
 8001192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	61bb      	str	r3, [r7, #24]
 800119a:	69bb      	ldr	r3, [r7, #24]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_TX_Pin;
 800119c:	230c      	movs	r3, #12
 800119e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a2:	2302      	movs	r3, #2
 80011a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ae:	2303      	movs	r3, #3
 80011b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011b4:	2307      	movs	r3, #7
 80011b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ba:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80011be:	4619      	mov	r1, r3
 80011c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c4:	f000 fce8 	bl	8001b98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011c8:	e063      	b.n	8001292 <HAL_UART_MspInit+0x172>
  else if(huart->Instance==USART3)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a35      	ldr	r2, [pc, #212]	; (80012a4 <HAL_UART_MspInit+0x184>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d15e      	bne.n	8001292 <HAL_UART_MspInit+0x172>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011d4:	2304      	movs	r3, #4
 80011d6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80011d8:	2300      	movs	r3, #0
 80011da:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011dc:	f107 0320 	add.w	r3, r7, #32
 80011e0:	4618      	mov	r0, r3
 80011e2:	f001 ff51 	bl	8003088 <HAL_RCCEx_PeriphCLKConfig>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 80011ec:	f7ff fe68 	bl	8000ec0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80011f0:	4b2b      	ldr	r3, [pc, #172]	; (80012a0 <HAL_UART_MspInit+0x180>)
 80011f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f4:	4a2a      	ldr	r2, [pc, #168]	; (80012a0 <HAL_UART_MspInit+0x180>)
 80011f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011fa:	6593      	str	r3, [r2, #88]	; 0x58
 80011fc:	4b28      	ldr	r3, [pc, #160]	; (80012a0 <HAL_UART_MspInit+0x180>)
 80011fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001200:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001204:	617b      	str	r3, [r7, #20]
 8001206:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001208:	4b25      	ldr	r3, [pc, #148]	; (80012a0 <HAL_UART_MspInit+0x180>)
 800120a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120c:	4a24      	ldr	r2, [pc, #144]	; (80012a0 <HAL_UART_MspInit+0x180>)
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001214:	4b22      	ldr	r3, [pc, #136]	; (80012a0 <HAL_UART_MspInit+0x180>)
 8001216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	613b      	str	r3, [r7, #16]
 800121e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001220:	4b1f      	ldr	r3, [pc, #124]	; (80012a0 <HAL_UART_MspInit+0x180>)
 8001222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001224:	4a1e      	ldr	r2, [pc, #120]	; (80012a0 <HAL_UART_MspInit+0x180>)
 8001226:	f043 0302 	orr.w	r3, r3, #2
 800122a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800122c:	4b1c      	ldr	r3, [pc, #112]	; (80012a0 <HAL_UART_MspInit+0x180>)
 800122e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001230:	f003 0302 	and.w	r3, r3, #2
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART3_RTS_Pin;
 8001238:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800123c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001240:	2302      	movs	r3, #2
 8001242:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124c:	2303      	movs	r3, #3
 800124e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001252:	2307      	movs	r3, #7
 8001254:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(USART3_RTS_GPIO_Port, &GPIO_InitStruct);
 8001258:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800125c:	4619      	mov	r1, r3
 800125e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001262:	f000 fc99 	bl	8001b98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART3_RX_Pin|USART3_TX_Pin;
 8001266:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800126a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126e:	2302      	movs	r3, #2
 8001270:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127a:	2303      	movs	r3, #3
 800127c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001280:	2307      	movs	r3, #7
 8001282:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001286:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800128a:	4619      	mov	r1, r3
 800128c:	4806      	ldr	r0, [pc, #24]	; (80012a8 <HAL_UART_MspInit+0x188>)
 800128e:	f000 fc83 	bl	8001b98 <HAL_GPIO_Init>
}
 8001292:	bf00      	nop
 8001294:	37d0      	adds	r7, #208	; 0xd0
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40004400 	.word	0x40004400
 80012a0:	40021000 	.word	0x40021000
 80012a4:	40004800 	.word	0x40004800
 80012a8:	48000400 	.word	0x48000400

080012ac <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80012c0:	4b32      	ldr	r3, [pc, #200]	; (800138c <HAL_FMC_MspInit+0xe0>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d15d      	bne.n	8001384 <HAL_FMC_MspInit+0xd8>
    return;
  }
  FMC_Initialized = 1;
 80012c8:	4b30      	ldr	r3, [pc, #192]	; (800138c <HAL_FMC_MspInit+0xe0>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80012ce:	4b30      	ldr	r3, [pc, #192]	; (8001390 <HAL_FMC_MspInit+0xe4>)
 80012d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012d2:	4a2f      	ldr	r2, [pc, #188]	; (8001390 <HAL_FMC_MspInit+0xe4>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	6513      	str	r3, [r2, #80]	; 0x50
 80012da:	4b2d      	ldr	r3, [pc, #180]	; (8001390 <HAL_FMC_MspInit+0xe4>)
 80012dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	603b      	str	r3, [r7, #0]
 80012e4:	683b      	ldr	r3, [r7, #0]
  PF13   ------> FMC_A7
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|PSRAM_A20_Pin|PSRAM_A19_Pin
 80012e6:	f64f 739b 	movw	r3, #65435	; 0xff9b
 80012ea:	607b      	str	r3, [r7, #4]
                          |D7_Pin|D6_Pin|D12_Pin|D5_Pin
                          |D11_Pin|D4_Pin|D10_Pin|D9_Pin
                          |D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ec:	2302      	movs	r3, #2
 80012ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f4:	2303      	movs	r3, #3
 80012f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012f8:	230c      	movs	r3, #12
 80012fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	4619      	mov	r1, r3
 8001300:	4824      	ldr	r0, [pc, #144]	; (8001394 <HAL_FMC_MspInit+0xe8>)
 8001302:	f000 fc49 	bl	8001b98 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|PSRAM_OE_Pin|D3_Pin|PSRAM_WE_Pin
 8001306:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 800130a:	607b      	str	r3, [r7, #4]
                          |PSRAM_WAIT_Pin|PSRAM_CLK_Pin|PSRAM_NE1_Pin|PSRAM_A18_Pin
                          |D1_Pin|D0_Pin|PSRAM_A17_Pin|PSRAM_A16_Pin
                          |D15_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130c:	2302      	movs	r3, #2
 800130e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001314:	2303      	movs	r3, #3
 8001316:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001318:	230c      	movs	r3, #12
 800131a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	4619      	mov	r1, r3
 8001320:	481d      	ldr	r0, [pc, #116]	; (8001398 <HAL_FMC_MspInit+0xec>)
 8001322:	f000 fc39 	bl	8001b98 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_ADV_Pin;
 8001326:	2380      	movs	r3, #128	; 0x80
 8001328:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132a:	2302      	movs	r3, #2
 800132c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001332:	2303      	movs	r3, #3
 8001334:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001336:	230c      	movs	r3, #12
 8001338:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PSRAM_ADV_GPIO_Port, &GPIO_InitStruct);
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	4619      	mov	r1, r3
 800133e:	4817      	ldr	r0, [pc, #92]	; (800139c <HAL_FMC_MspInit+0xf0>)
 8001340:	f000 fc2a 	bl	8001b98 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 8001344:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001348:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134a:	2302      	movs	r3, #2
 800134c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001352:	2303      	movs	r3, #3
 8001354:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001356:	230c      	movs	r3, #12
 8001358:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	4619      	mov	r1, r3
 800135e:	4810      	ldr	r0, [pc, #64]	; (80013a0 <HAL_FMC_MspInit+0xf4>)
 8001360:	f000 fc1a 	bl	8001b98 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A15_Pin|PSRAM_A11_Pin
 8001364:	233f      	movs	r3, #63	; 0x3f
 8001366:	607b      	str	r3, [r7, #4]
                          |PSRAM_A12_Pin|PSRAM_A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001368:	2302      	movs	r3, #2
 800136a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001370:	2303      	movs	r3, #3
 8001372:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001374:	230c      	movs	r3, #12
 8001376:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001378:	1d3b      	adds	r3, r7, #4
 800137a:	4619      	mov	r1, r3
 800137c:	4809      	ldr	r0, [pc, #36]	; (80013a4 <HAL_FMC_MspInit+0xf8>)
 800137e:	f000 fc0b 	bl	8001b98 <HAL_GPIO_Init>
 8001382:	e000      	b.n	8001386 <HAL_FMC_MspInit+0xda>
    return;
 8001384:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001386:	3718      	adds	r7, #24
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000c7c 	.word	0x20000c7c
 8001390:	40021000 	.word	0x40021000
 8001394:	48001000 	.word	0x48001000
 8001398:	48000c00 	.word	0x48000c00
 800139c:	48000400 	.word	0x48000400
 80013a0:	48001400 	.word	0x48001400
 80013a4:	48001800 	.word	0x48001800

080013a8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80013b0:	f7ff ff7c 	bl	80012ac <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80013b4:	bf00      	nop
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b0b0      	sub	sp, #192	; 0xc0
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013c4:	f107 0310 	add.w	r3, r7, #16
 80013c8:	229c      	movs	r2, #156	; 0x9c
 80013ca:	2100      	movs	r1, #0
 80013cc:	4618      	mov	r0, r3
 80013ce:	f007 fdc5 	bl	8008f5c <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a32      	ldr	r2, [pc, #200]	; (80014a0 <HAL_SAI_MspInit+0xe4>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d15d      	bne.n	8001498 <HAL_SAI_MspInit+0xdc>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80013dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013e0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80013e2:	2300      	movs	r3, #0
 80013e4:	67fb      	str	r3, [r7, #124]	; 0x7c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80013e6:	2301      	movs	r3, #1
 80013e8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80013ea:	2301      	movs	r3, #1
 80013ec:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80013ee:	2310      	movs	r3, #16
 80013f0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80013f2:	2302      	movs	r3, #2
 80013f4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80013f6:	2302      	movs	r3, #2
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80013fa:	2302      	movs	r3, #2
 80013fc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 80013fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001402:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001404:	f107 0310 	add.w	r3, r7, #16
 8001408:	4618      	mov	r0, r3
 800140a:	f001 fe3d 	bl	8003088 <HAL_RCCEx_PeriphCLKConfig>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <HAL_SAI_MspInit+0x5c>
    {
      Error_Handler();
 8001414:	f7ff fd54 	bl	8000ec0 <Error_Handler>
    }

    if (SAI1_client == 0)
 8001418:	4b22      	ldr	r3, [pc, #136]	; (80014a4 <HAL_SAI_MspInit+0xe8>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d10b      	bne.n	8001438 <HAL_SAI_MspInit+0x7c>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001420:	4b21      	ldr	r3, [pc, #132]	; (80014a8 <HAL_SAI_MspInit+0xec>)
 8001422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001424:	4a20      	ldr	r2, [pc, #128]	; (80014a8 <HAL_SAI_MspInit+0xec>)
 8001426:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800142a:	6613      	str	r3, [r2, #96]	; 0x60
 800142c:	4b1e      	ldr	r3, [pc, #120]	; (80014a8 <HAL_SAI_MspInit+0xec>)
 800142e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001430:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 8001438:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <HAL_SAI_MspInit+0xe8>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	3301      	adds	r3, #1
 800143e:	4a19      	ldr	r2, [pc, #100]	; (80014a4 <HAL_SAI_MspInit+0xe8>)
 8001440:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PB9     ------> SAI1_FS_A
    PE6     ------> SAI1_SD_A
    PE5     ------> SAI1_SCK_A
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin|SAI1_FSA_Pin;
 8001442:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001446:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144a:	2302      	movs	r3, #2
 800144c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001456:	2300      	movs	r3, #0
 8001458:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800145c:	230d      	movs	r3, #13
 800145e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001462:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001466:	4619      	mov	r1, r3
 8001468:	4810      	ldr	r0, [pc, #64]	; (80014ac <HAL_SAI_MspInit+0xf0>)
 800146a:	f000 fb95 	bl	8001b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCKA_Pin|SAI1_SDA_Pin|SAI1_SCKA_Pin;
 800146e:	2364      	movs	r3, #100	; 0x64
 8001470:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001474:	2302      	movs	r3, #2
 8001476:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001480:	2300      	movs	r3, #0
 8001482:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001486:	230d      	movs	r3, #13
 8001488:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800148c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001490:	4619      	mov	r1, r3
 8001492:	4807      	ldr	r0, [pc, #28]	; (80014b0 <HAL_SAI_MspInit+0xf4>)
 8001494:	f000 fb80 	bl	8001b98 <HAL_GPIO_Init>

    }
}
 8001498:	bf00      	nop
 800149a:	37c0      	adds	r7, #192	; 0xc0
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40015404 	.word	0x40015404
 80014a4:	20000c80 	.word	0x20000c80
 80014a8:	40021000 	.word	0x40021000
 80014ac:	48000400 	.word	0x48000400
 80014b0:	48001000 	.word	0x48001000

080014b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <NMI_Handler+0x4>

080014ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014be:	e7fe      	b.n	80014be <HardFault_Handler+0x4>

080014c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c4:	e7fe      	b.n	80014c4 <MemManage_Handler+0x4>

080014c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ca:	e7fe      	b.n	80014ca <BusFault_Handler+0x4>

080014cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <UsageFault_Handler+0x4>

080014d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001500:	f000 f936 	bl	8001770 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}

08001508 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]
 8001518:	e00a      	b.n	8001530 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800151a:	f3af 8000 	nop.w
 800151e:	4601      	mov	r1, r0
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	1c5a      	adds	r2, r3, #1
 8001524:	60ba      	str	r2, [r7, #8]
 8001526:	b2ca      	uxtb	r2, r1
 8001528:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	3301      	adds	r3, #1
 800152e:	617b      	str	r3, [r7, #20]
 8001530:	697a      	ldr	r2, [r7, #20]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	429a      	cmp	r2, r3
 8001536:	dbf0      	blt.n	800151a <_read+0x12>
  }

  return len;
 8001538:	687b      	ldr	r3, [r7, #4]
}
 800153a:	4618      	mov	r0, r3
 800153c:	3718      	adds	r7, #24
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b086      	sub	sp, #24
 8001546:	af00      	add	r7, sp, #0
 8001548:	60f8      	str	r0, [r7, #12]
 800154a:	60b9      	str	r1, [r7, #8]
 800154c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800154e:	2300      	movs	r3, #0
 8001550:	617b      	str	r3, [r7, #20]
 8001552:	e009      	b.n	8001568 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	1c5a      	adds	r2, r3, #1
 8001558:	60ba      	str	r2, [r7, #8]
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	4618      	mov	r0, r3
 800155e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	3301      	adds	r3, #1
 8001566:	617b      	str	r3, [r7, #20]
 8001568:	697a      	ldr	r2, [r7, #20]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	429a      	cmp	r2, r3
 800156e:	dbf1      	blt.n	8001554 <_write+0x12>
  }
  return len;
 8001570:	687b      	ldr	r3, [r7, #4]
}
 8001572:	4618      	mov	r0, r3
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <_close>:

int _close(int file)
{
 800157a:	b480      	push	{r7}
 800157c:	b083      	sub	sp, #12
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001582:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001586:	4618      	mov	r0, r3
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001592:	b480      	push	{r7}
 8001594:	b083      	sub	sp, #12
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
 800159a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015a2:	605a      	str	r2, [r3, #4]
  return 0;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <_isatty>:

int _isatty(int file)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b083      	sub	sp, #12
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015ba:	2301      	movs	r3, #1
}
 80015bc:	4618      	mov	r0, r3
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3714      	adds	r7, #20
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
	...

080015e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015ec:	4a14      	ldr	r2, [pc, #80]	; (8001640 <_sbrk+0x5c>)
 80015ee:	4b15      	ldr	r3, [pc, #84]	; (8001644 <_sbrk+0x60>)
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015f8:	4b13      	ldr	r3, [pc, #76]	; (8001648 <_sbrk+0x64>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d102      	bne.n	8001606 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001600:	4b11      	ldr	r3, [pc, #68]	; (8001648 <_sbrk+0x64>)
 8001602:	4a12      	ldr	r2, [pc, #72]	; (800164c <_sbrk+0x68>)
 8001604:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001606:	4b10      	ldr	r3, [pc, #64]	; (8001648 <_sbrk+0x64>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4413      	add	r3, r2
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	429a      	cmp	r2, r3
 8001612:	d207      	bcs.n	8001624 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001614:	f007 fd00 	bl	8009018 <__errno>
 8001618:	4603      	mov	r3, r0
 800161a:	220c      	movs	r2, #12
 800161c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800161e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001622:	e009      	b.n	8001638 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001624:	4b08      	ldr	r3, [pc, #32]	; (8001648 <_sbrk+0x64>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800162a:	4b07      	ldr	r3, [pc, #28]	; (8001648 <_sbrk+0x64>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4413      	add	r3, r2
 8001632:	4a05      	ldr	r2, [pc, #20]	; (8001648 <_sbrk+0x64>)
 8001634:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001636:	68fb      	ldr	r3, [r7, #12]
}
 8001638:	4618      	mov	r0, r3
 800163a:	3718      	adds	r7, #24
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	200a0000 	.word	0x200a0000
 8001644:	00000800 	.word	0x00000800
 8001648:	20000c84 	.word	0x20000c84
 800164c:	20001318 	.word	0x20001318

08001650 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001654:	4b06      	ldr	r3, [pc, #24]	; (8001670 <SystemInit+0x20>)
 8001656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800165a:	4a05      	ldr	r2, [pc, #20]	; (8001670 <SystemInit+0x20>)
 800165c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001660:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	e000ed00 	.word	0xe000ed00

08001674 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001674:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001678:	f7ff ffea 	bl	8001650 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800167c:	480c      	ldr	r0, [pc, #48]	; (80016b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800167e:	490d      	ldr	r1, [pc, #52]	; (80016b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001680:	4a0d      	ldr	r2, [pc, #52]	; (80016b8 <LoopForever+0xe>)
  movs r3, #0
 8001682:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001684:	e002      	b.n	800168c <LoopCopyDataInit>

08001686 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001686:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001688:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800168a:	3304      	adds	r3, #4

0800168c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800168c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800168e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001690:	d3f9      	bcc.n	8001686 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001692:	4a0a      	ldr	r2, [pc, #40]	; (80016bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001694:	4c0a      	ldr	r4, [pc, #40]	; (80016c0 <LoopForever+0x16>)
  movs r3, #0
 8001696:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001698:	e001      	b.n	800169e <LoopFillZerobss>

0800169a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800169a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800169c:	3204      	adds	r2, #4

0800169e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800169e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016a0:	d3fb      	bcc.n	800169a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016a2:	f007 fcbf 	bl	8009024 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016a6:	f7fe ff79 	bl	800059c <main>

080016aa <LoopForever>:

LoopForever:
    b LoopForever
 80016aa:	e7fe      	b.n	80016aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80016ac:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80016b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016b4:	2000097c 	.word	0x2000097c
  ldr r2, =_sidata
 80016b8:	08020e9c 	.word	0x08020e9c
  ldr r2, =_sbss
 80016bc:	20000980 	.word	0x20000980
  ldr r4, =_ebss
 80016c0:	20001318 	.word	0x20001318

080016c4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016c4:	e7fe      	b.n	80016c4 <ADC1_IRQHandler>

080016c6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016cc:	2300      	movs	r3, #0
 80016ce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d0:	2003      	movs	r0, #3
 80016d2:	f000 f943 	bl	800195c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016d6:	2000      	movs	r0, #0
 80016d8:	f000 f80e 	bl	80016f8 <HAL_InitTick>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d002      	beq.n	80016e8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	71fb      	strb	r3, [r7, #7]
 80016e6:	e001      	b.n	80016ec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016e8:	f7ff fbf0 	bl	8000ecc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016ec:	79fb      	ldrb	r3, [r7, #7]
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
	...

080016f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001700:	2300      	movs	r3, #0
 8001702:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001704:	4b17      	ldr	r3, [pc, #92]	; (8001764 <HAL_InitTick+0x6c>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d023      	beq.n	8001754 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800170c:	4b16      	ldr	r3, [pc, #88]	; (8001768 <HAL_InitTick+0x70>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	4b14      	ldr	r3, [pc, #80]	; (8001764 <HAL_InitTick+0x6c>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	4619      	mov	r1, r3
 8001716:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800171a:	fbb3 f3f1 	udiv	r3, r3, r1
 800171e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001722:	4618      	mov	r0, r3
 8001724:	f000 f941 	bl	80019aa <HAL_SYSTICK_Config>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d10f      	bne.n	800174e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b0f      	cmp	r3, #15
 8001732:	d809      	bhi.n	8001748 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001734:	2200      	movs	r2, #0
 8001736:	6879      	ldr	r1, [r7, #4]
 8001738:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800173c:	f000 f919 	bl	8001972 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001740:	4a0a      	ldr	r2, [pc, #40]	; (800176c <HAL_InitTick+0x74>)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6013      	str	r3, [r2, #0]
 8001746:	e007      	b.n	8001758 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	73fb      	strb	r3, [r7, #15]
 800174c:	e004      	b.n	8001758 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	73fb      	strb	r3, [r7, #15]
 8001752:	e001      	b.n	8001758 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001758:	7bfb      	ldrb	r3, [r7, #15]
}
 800175a:	4618      	mov	r0, r3
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20000008 	.word	0x20000008
 8001768:	20000000 	.word	0x20000000
 800176c:	20000004 	.word	0x20000004

08001770 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001774:	4b06      	ldr	r3, [pc, #24]	; (8001790 <HAL_IncTick+0x20>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	461a      	mov	r2, r3
 800177a:	4b06      	ldr	r3, [pc, #24]	; (8001794 <HAL_IncTick+0x24>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4413      	add	r3, r2
 8001780:	4a04      	ldr	r2, [pc, #16]	; (8001794 <HAL_IncTick+0x24>)
 8001782:	6013      	str	r3, [r2, #0]
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	20000008 	.word	0x20000008
 8001794:	20000c88 	.word	0x20000c88

08001798 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  return uwTick;
 800179c:	4b03      	ldr	r3, [pc, #12]	; (80017ac <HAL_GetTick+0x14>)
 800179e:	681b      	ldr	r3, [r3, #0]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	20000c88 	.word	0x20000c88

080017b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017b8:	f7ff ffee 	bl	8001798 <HAL_GetTick>
 80017bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017c8:	d005      	beq.n	80017d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80017ca:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <HAL_Delay+0x44>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	461a      	mov	r2, r3
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	4413      	add	r3, r2
 80017d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017d6:	bf00      	nop
 80017d8:	f7ff ffde 	bl	8001798 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d8f7      	bhi.n	80017d8 <HAL_Delay+0x28>
  {
  }
}
 80017e8:	bf00      	nop
 80017ea:	bf00      	nop
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000008 	.word	0x20000008

080017f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001808:	4b0c      	ldr	r3, [pc, #48]	; (800183c <__NVIC_SetPriorityGrouping+0x44>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800180e:	68ba      	ldr	r2, [r7, #8]
 8001810:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001814:	4013      	ands	r3, r2
 8001816:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001820:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001828:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800182a:	4a04      	ldr	r2, [pc, #16]	; (800183c <__NVIC_SetPriorityGrouping+0x44>)
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	60d3      	str	r3, [r2, #12]
}
 8001830:	bf00      	nop
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001844:	4b04      	ldr	r3, [pc, #16]	; (8001858 <__NVIC_GetPriorityGrouping+0x18>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	0a1b      	lsrs	r3, r3, #8
 800184a:	f003 0307 	and.w	r3, r3, #7
}
 800184e:	4618      	mov	r0, r3
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	6039      	str	r1, [r7, #0]
 8001866:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186c:	2b00      	cmp	r3, #0
 800186e:	db0a      	blt.n	8001886 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	b2da      	uxtb	r2, r3
 8001874:	490c      	ldr	r1, [pc, #48]	; (80018a8 <__NVIC_SetPriority+0x4c>)
 8001876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187a:	0112      	lsls	r2, r2, #4
 800187c:	b2d2      	uxtb	r2, r2
 800187e:	440b      	add	r3, r1
 8001880:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001884:	e00a      	b.n	800189c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	b2da      	uxtb	r2, r3
 800188a:	4908      	ldr	r1, [pc, #32]	; (80018ac <__NVIC_SetPriority+0x50>)
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	f003 030f 	and.w	r3, r3, #15
 8001892:	3b04      	subs	r3, #4
 8001894:	0112      	lsls	r2, r2, #4
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	440b      	add	r3, r1
 800189a:	761a      	strb	r2, [r3, #24]
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	e000e100 	.word	0xe000e100
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b089      	sub	sp, #36	; 0x24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	f1c3 0307 	rsb	r3, r3, #7
 80018ca:	2b04      	cmp	r3, #4
 80018cc:	bf28      	it	cs
 80018ce:	2304      	movcs	r3, #4
 80018d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	3304      	adds	r3, #4
 80018d6:	2b06      	cmp	r3, #6
 80018d8:	d902      	bls.n	80018e0 <NVIC_EncodePriority+0x30>
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	3b03      	subs	r3, #3
 80018de:	e000      	b.n	80018e2 <NVIC_EncodePriority+0x32>
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	43da      	mvns	r2, r3
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	401a      	ands	r2, r3
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001902:	43d9      	mvns	r1, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001908:	4313      	orrs	r3, r2
         );
}
 800190a:	4618      	mov	r0, r3
 800190c:	3724      	adds	r7, #36	; 0x24
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
	...

08001918 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3b01      	subs	r3, #1
 8001924:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001928:	d301      	bcc.n	800192e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800192a:	2301      	movs	r3, #1
 800192c:	e00f      	b.n	800194e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800192e:	4a0a      	ldr	r2, [pc, #40]	; (8001958 <SysTick_Config+0x40>)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3b01      	subs	r3, #1
 8001934:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001936:	210f      	movs	r1, #15
 8001938:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800193c:	f7ff ff8e 	bl	800185c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001940:	4b05      	ldr	r3, [pc, #20]	; (8001958 <SysTick_Config+0x40>)
 8001942:	2200      	movs	r2, #0
 8001944:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001946:	4b04      	ldr	r3, [pc, #16]	; (8001958 <SysTick_Config+0x40>)
 8001948:	2207      	movs	r2, #7
 800194a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	e000e010 	.word	0xe000e010

0800195c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f7ff ff47 	bl	80017f8 <__NVIC_SetPriorityGrouping>
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b086      	sub	sp, #24
 8001976:	af00      	add	r7, sp, #0
 8001978:	4603      	mov	r3, r0
 800197a:	60b9      	str	r1, [r7, #8]
 800197c:	607a      	str	r2, [r7, #4]
 800197e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001984:	f7ff ff5c 	bl	8001840 <__NVIC_GetPriorityGrouping>
 8001988:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	68b9      	ldr	r1, [r7, #8]
 800198e:	6978      	ldr	r0, [r7, #20]
 8001990:	f7ff ff8e 	bl	80018b0 <NVIC_EncodePriority>
 8001994:	4602      	mov	r2, r0
 8001996:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800199a:	4611      	mov	r1, r2
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff ff5d 	bl	800185c <__NVIC_SetPriority>
}
 80019a2:	bf00      	nop
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b082      	sub	sp, #8
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f7ff ffb0 	bl	8001918 <SysTick_Config>
 80019b8:	4603      	mov	r3, r0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
	...

080019c4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e054      	b.n	8001a80 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	7f5b      	ldrb	r3, [r3, #29]
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d105      	bne.n	80019ec <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff fa94 	bl	8000f14 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2202      	movs	r2, #2
 80019f0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	791b      	ldrb	r3, [r3, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d10c      	bne.n	8001a14 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a22      	ldr	r2, [pc, #136]	; (8001a88 <HAL_CRC_Init+0xc4>)
 8001a00:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	689a      	ldr	r2, [r3, #8]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f022 0218 	bic.w	r2, r2, #24
 8001a10:	609a      	str	r2, [r3, #8]
 8001a12:	e00c      	b.n	8001a2e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6899      	ldr	r1, [r3, #8]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f000 f834 	bl	8001a8c <HAL_CRCEx_Polynomial_Set>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e028      	b.n	8001a80 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	795b      	ldrb	r3, [r3, #5]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d105      	bne.n	8001a42 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a3e:	611a      	str	r2, [r3, #16]
 8001a40:	e004      	b.n	8001a4c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	6912      	ldr	r2, [r2, #16]
 8001a4a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	695a      	ldr	r2, [r3, #20]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	699a      	ldr	r2, [r3, #24]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	430a      	orrs	r2, r1
 8001a76:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	04c11db7 	.word	0x04c11db7

08001a8c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b087      	sub	sp, #28
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001a9c:	231f      	movs	r3, #31
 8001a9e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001aa0:	bf00      	nop
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1e5a      	subs	r2, r3, #1
 8001aa6:	613a      	str	r2, [r7, #16]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d009      	beq.n	8001ac0 <HAL_CRCEx_Polynomial_Set+0x34>
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	f003 031f 	and.w	r3, r3, #31
 8001ab2:	68ba      	ldr	r2, [r7, #8]
 8001ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d0f0      	beq.n	8001aa2 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b18      	cmp	r3, #24
 8001ac4:	d846      	bhi.n	8001b54 <HAL_CRCEx_Polynomial_Set+0xc8>
 8001ac6:	a201      	add	r2, pc, #4	; (adr r2, 8001acc <HAL_CRCEx_Polynomial_Set+0x40>)
 8001ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001acc:	08001b5b 	.word	0x08001b5b
 8001ad0:	08001b55 	.word	0x08001b55
 8001ad4:	08001b55 	.word	0x08001b55
 8001ad8:	08001b55 	.word	0x08001b55
 8001adc:	08001b55 	.word	0x08001b55
 8001ae0:	08001b55 	.word	0x08001b55
 8001ae4:	08001b55 	.word	0x08001b55
 8001ae8:	08001b55 	.word	0x08001b55
 8001aec:	08001b49 	.word	0x08001b49
 8001af0:	08001b55 	.word	0x08001b55
 8001af4:	08001b55 	.word	0x08001b55
 8001af8:	08001b55 	.word	0x08001b55
 8001afc:	08001b55 	.word	0x08001b55
 8001b00:	08001b55 	.word	0x08001b55
 8001b04:	08001b55 	.word	0x08001b55
 8001b08:	08001b55 	.word	0x08001b55
 8001b0c:	08001b3d 	.word	0x08001b3d
 8001b10:	08001b55 	.word	0x08001b55
 8001b14:	08001b55 	.word	0x08001b55
 8001b18:	08001b55 	.word	0x08001b55
 8001b1c:	08001b55 	.word	0x08001b55
 8001b20:	08001b55 	.word	0x08001b55
 8001b24:	08001b55 	.word	0x08001b55
 8001b28:	08001b55 	.word	0x08001b55
 8001b2c:	08001b31 	.word	0x08001b31
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	2b06      	cmp	r3, #6
 8001b34:	d913      	bls.n	8001b5e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001b3a:	e010      	b.n	8001b5e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	2b07      	cmp	r3, #7
 8001b40:	d90f      	bls.n	8001b62 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001b46:	e00c      	b.n	8001b62 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	2b0f      	cmp	r3, #15
 8001b4c:	d90b      	bls.n	8001b66 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001b52:	e008      	b.n	8001b66 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	75fb      	strb	r3, [r7, #23]
      break;
 8001b58:	e006      	b.n	8001b68 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001b5a:	bf00      	nop
 8001b5c:	e004      	b.n	8001b68 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001b5e:	bf00      	nop
 8001b60:	e002      	b.n	8001b68 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001b62:	bf00      	nop
 8001b64:	e000      	b.n	8001b68 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001b66:	bf00      	nop
  }
  if (status == HAL_OK)
 8001b68:	7dfb      	ldrb	r3, [r7, #23]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d10d      	bne.n	8001b8a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	68ba      	ldr	r2, [r7, #8]
 8001b74:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f023 0118 	bic.w	r1, r3, #24
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	430a      	orrs	r2, r1
 8001b88:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001b8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	371c      	adds	r7, #28
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b087      	sub	sp, #28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ba6:	e166      	b.n	8001e76 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	2101      	movs	r1, #1
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f000 8158 	beq.w	8001e70 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f003 0303 	and.w	r3, r3, #3
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d005      	beq.n	8001bd8 <HAL_GPIO_Init+0x40>
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 0303 	and.w	r3, r3, #3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d130      	bne.n	8001c3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	2203      	movs	r2, #3
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	43db      	mvns	r3, r3
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	4013      	ands	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	68da      	ldr	r2, [r3, #12]
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c0e:	2201      	movs	r2, #1
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	43db      	mvns	r3, r3
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	091b      	lsrs	r3, r3, #4
 8001c24:	f003 0201 	and.w	r2, r3, #1
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f003 0303 	and.w	r3, r3, #3
 8001c42:	2b03      	cmp	r3, #3
 8001c44:	d017      	beq.n	8001c76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	2203      	movs	r2, #3
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43db      	mvns	r3, r3
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	689a      	ldr	r2, [r3, #8]
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f003 0303 	and.w	r3, r3, #3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d123      	bne.n	8001cca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	08da      	lsrs	r2, r3, #3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	3208      	adds	r2, #8
 8001c8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	220f      	movs	r2, #15
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	691a      	ldr	r2, [r3, #16]
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	08da      	lsrs	r2, r3, #3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	3208      	adds	r2, #8
 8001cc4:	6939      	ldr	r1, [r7, #16]
 8001cc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	2203      	movs	r2, #3
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f003 0203 	and.w	r2, r3, #3
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f000 80b2 	beq.w	8001e70 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d0c:	4b61      	ldr	r3, [pc, #388]	; (8001e94 <HAL_GPIO_Init+0x2fc>)
 8001d0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d10:	4a60      	ldr	r2, [pc, #384]	; (8001e94 <HAL_GPIO_Init+0x2fc>)
 8001d12:	f043 0301 	orr.w	r3, r3, #1
 8001d16:	6613      	str	r3, [r2, #96]	; 0x60
 8001d18:	4b5e      	ldr	r3, [pc, #376]	; (8001e94 <HAL_GPIO_Init+0x2fc>)
 8001d1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	60bb      	str	r3, [r7, #8]
 8001d22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d24:	4a5c      	ldr	r2, [pc, #368]	; (8001e98 <HAL_GPIO_Init+0x300>)
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	089b      	lsrs	r3, r3, #2
 8001d2a:	3302      	adds	r3, #2
 8001d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	f003 0303 	and.w	r3, r3, #3
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	220f      	movs	r2, #15
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	43db      	mvns	r3, r3
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	4013      	ands	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d4e:	d02b      	beq.n	8001da8 <HAL_GPIO_Init+0x210>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a52      	ldr	r2, [pc, #328]	; (8001e9c <HAL_GPIO_Init+0x304>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d025      	beq.n	8001da4 <HAL_GPIO_Init+0x20c>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a51      	ldr	r2, [pc, #324]	; (8001ea0 <HAL_GPIO_Init+0x308>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d01f      	beq.n	8001da0 <HAL_GPIO_Init+0x208>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a50      	ldr	r2, [pc, #320]	; (8001ea4 <HAL_GPIO_Init+0x30c>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d019      	beq.n	8001d9c <HAL_GPIO_Init+0x204>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a4f      	ldr	r2, [pc, #316]	; (8001ea8 <HAL_GPIO_Init+0x310>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d013      	beq.n	8001d98 <HAL_GPIO_Init+0x200>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a4e      	ldr	r2, [pc, #312]	; (8001eac <HAL_GPIO_Init+0x314>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d00d      	beq.n	8001d94 <HAL_GPIO_Init+0x1fc>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a4d      	ldr	r2, [pc, #308]	; (8001eb0 <HAL_GPIO_Init+0x318>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d007      	beq.n	8001d90 <HAL_GPIO_Init+0x1f8>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4a4c      	ldr	r2, [pc, #304]	; (8001eb4 <HAL_GPIO_Init+0x31c>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d101      	bne.n	8001d8c <HAL_GPIO_Init+0x1f4>
 8001d88:	2307      	movs	r3, #7
 8001d8a:	e00e      	b.n	8001daa <HAL_GPIO_Init+0x212>
 8001d8c:	2308      	movs	r3, #8
 8001d8e:	e00c      	b.n	8001daa <HAL_GPIO_Init+0x212>
 8001d90:	2306      	movs	r3, #6
 8001d92:	e00a      	b.n	8001daa <HAL_GPIO_Init+0x212>
 8001d94:	2305      	movs	r3, #5
 8001d96:	e008      	b.n	8001daa <HAL_GPIO_Init+0x212>
 8001d98:	2304      	movs	r3, #4
 8001d9a:	e006      	b.n	8001daa <HAL_GPIO_Init+0x212>
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e004      	b.n	8001daa <HAL_GPIO_Init+0x212>
 8001da0:	2302      	movs	r3, #2
 8001da2:	e002      	b.n	8001daa <HAL_GPIO_Init+0x212>
 8001da4:	2301      	movs	r3, #1
 8001da6:	e000      	b.n	8001daa <HAL_GPIO_Init+0x212>
 8001da8:	2300      	movs	r3, #0
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	f002 0203 	and.w	r2, r2, #3
 8001db0:	0092      	lsls	r2, r2, #2
 8001db2:	4093      	lsls	r3, r2
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001dba:	4937      	ldr	r1, [pc, #220]	; (8001e98 <HAL_GPIO_Init+0x300>)
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	089b      	lsrs	r3, r3, #2
 8001dc0:	3302      	adds	r3, #2
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001dc8:	4b3b      	ldr	r3, [pc, #236]	; (8001eb8 <HAL_GPIO_Init+0x320>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d003      	beq.n	8001dec <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001dec:	4a32      	ldr	r2, [pc, #200]	; (8001eb8 <HAL_GPIO_Init+0x320>)
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001df2:	4b31      	ldr	r3, [pc, #196]	; (8001eb8 <HAL_GPIO_Init+0x320>)
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e16:	4a28      	ldr	r2, [pc, #160]	; (8001eb8 <HAL_GPIO_Init+0x320>)
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e1c:	4b26      	ldr	r3, [pc, #152]	; (8001eb8 <HAL_GPIO_Init+0x320>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	43db      	mvns	r3, r3
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d003      	beq.n	8001e40 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e40:	4a1d      	ldr	r2, [pc, #116]	; (8001eb8 <HAL_GPIO_Init+0x320>)
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e46:	4b1c      	ldr	r3, [pc, #112]	; (8001eb8 <HAL_GPIO_Init+0x320>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	43db      	mvns	r3, r3
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	4013      	ands	r3, r2
 8001e54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e6a:	4a13      	ldr	r2, [pc, #76]	; (8001eb8 <HAL_GPIO_Init+0x320>)
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	3301      	adds	r3, #1
 8001e74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f47f ae91 	bne.w	8001ba8 <HAL_GPIO_Init+0x10>
  }
}
 8001e86:	bf00      	nop
 8001e88:	bf00      	nop
 8001e8a:	371c      	adds	r7, #28
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	40021000 	.word	0x40021000
 8001e98:	40010000 	.word	0x40010000
 8001e9c:	48000400 	.word	0x48000400
 8001ea0:	48000800 	.word	0x48000800
 8001ea4:	48000c00 	.word	0x48000c00
 8001ea8:	48001000 	.word	0x48001000
 8001eac:	48001400 	.word	0x48001400
 8001eb0:	48001800 	.word	0x48001800
 8001eb4:	48001c00 	.word	0x48001c00
 8001eb8:	40010400 	.word	0x40010400

08001ebc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	807b      	strh	r3, [r7, #2]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ecc:	787b      	ldrb	r3, [r7, #1]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ed2:	887a      	ldrh	r2, [r7, #2]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ed8:	e002      	b.n	8001ee0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001eda:	887a      	ldrh	r2, [r7, #2]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e081      	b.n	8002002 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d106      	bne.n	8001f18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f7ff f81e 	bl	8000f54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2224      	movs	r2, #36	; 0x24
 8001f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f022 0201 	bic.w	r2, r2, #1
 8001f2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f3c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f4c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d107      	bne.n	8001f66 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689a      	ldr	r2, [r3, #8]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	e006      	b.n	8001f74 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689a      	ldr	r2, [r3, #8]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001f72:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d104      	bne.n	8001f86 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f84:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	6812      	ldr	r2, [r2, #0]
 8001f90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f98:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68da      	ldr	r2, [r3, #12]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fa8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	691a      	ldr	r2, [r3, #16]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	69d9      	ldr	r1, [r3, #28]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a1a      	ldr	r2, [r3, #32]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f042 0201 	orr.w	r2, r2, #1
 8001fe2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2220      	movs	r2, #32
 8001fee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800200a:	b480      	push	{r7}
 800200c:	b083      	sub	sp, #12
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
 8002012:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b20      	cmp	r3, #32
 800201e:	d138      	bne.n	8002092 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002026:	2b01      	cmp	r3, #1
 8002028:	d101      	bne.n	800202e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800202a:	2302      	movs	r3, #2
 800202c:	e032      	b.n	8002094 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2201      	movs	r2, #1
 8002032:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2224      	movs	r2, #36	; 0x24
 800203a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f022 0201 	bic.w	r2, r2, #1
 800204c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800205c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6819      	ldr	r1, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	430a      	orrs	r2, r1
 800206c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f042 0201 	orr.w	r2, r2, #1
 800207c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2220      	movs	r2, #32
 8002082:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800208e:	2300      	movs	r3, #0
 8002090:	e000      	b.n	8002094 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002092:	2302      	movs	r3, #2
  }
}
 8002094:	4618      	mov	r0, r3
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b20      	cmp	r3, #32
 80020b4:	d139      	bne.n	800212a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d101      	bne.n	80020c4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80020c0:	2302      	movs	r3, #2
 80020c2:	e033      	b.n	800212c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2224      	movs	r2, #36	; 0x24
 80020d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f022 0201 	bic.w	r2, r2, #1
 80020e2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80020f2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	021b      	lsls	r3, r3, #8
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f042 0201 	orr.w	r2, r2, #1
 8002114:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2220      	movs	r2, #32
 800211a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002126:	2300      	movs	r3, #0
 8002128:	e000      	b.n	800212c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800212a:	2302      	movs	r3, #2
  }
}
 800212c:	4618      	mov	r0, r3
 800212e:	3714      	adds	r7, #20
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800213c:	4b0d      	ldr	r3, [pc, #52]	; (8002174 <HAL_PWREx_GetVoltageRange+0x3c>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002144:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002148:	d102      	bne.n	8002150 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800214a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800214e:	e00b      	b.n	8002168 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002150:	4b08      	ldr	r3, [pc, #32]	; (8002174 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002152:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800215e:	d102      	bne.n	8002166 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002160:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002164:	e000      	b.n	8002168 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002166:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002168:	4618      	mov	r0, r3
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	40007000 	.word	0x40007000

08002178 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d141      	bne.n	800220a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002186:	4b4b      	ldr	r3, [pc, #300]	; (80022b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800218e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002192:	d131      	bne.n	80021f8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002194:	4b47      	ldr	r3, [pc, #284]	; (80022b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002196:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800219a:	4a46      	ldr	r2, [pc, #280]	; (80022b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800219c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021a4:	4b43      	ldr	r3, [pc, #268]	; (80022b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021ac:	4a41      	ldr	r2, [pc, #260]	; (80022b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80021b4:	4b40      	ldr	r3, [pc, #256]	; (80022b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2232      	movs	r2, #50	; 0x32
 80021ba:	fb02 f303 	mul.w	r3, r2, r3
 80021be:	4a3f      	ldr	r2, [pc, #252]	; (80022bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80021c0:	fba2 2303 	umull	r2, r3, r2, r3
 80021c4:	0c9b      	lsrs	r3, r3, #18
 80021c6:	3301      	adds	r3, #1
 80021c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021ca:	e002      	b.n	80021d2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	3b01      	subs	r3, #1
 80021d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021d2:	4b38      	ldr	r3, [pc, #224]	; (80022b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021de:	d102      	bne.n	80021e6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1f2      	bne.n	80021cc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021e6:	4b33      	ldr	r3, [pc, #204]	; (80022b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021f2:	d158      	bne.n	80022a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e057      	b.n	80022a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021f8:	4b2e      	ldr	r3, [pc, #184]	; (80022b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021fe:	4a2d      	ldr	r2, [pc, #180]	; (80022b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002200:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002204:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002208:	e04d      	b.n	80022a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002210:	d141      	bne.n	8002296 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002212:	4b28      	ldr	r3, [pc, #160]	; (80022b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800221a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800221e:	d131      	bne.n	8002284 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002220:	4b24      	ldr	r3, [pc, #144]	; (80022b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002222:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002226:	4a23      	ldr	r2, [pc, #140]	; (80022b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800222c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002230:	4b20      	ldr	r3, [pc, #128]	; (80022b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002238:	4a1e      	ldr	r2, [pc, #120]	; (80022b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800223a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800223e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002240:	4b1d      	ldr	r3, [pc, #116]	; (80022b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2232      	movs	r2, #50	; 0x32
 8002246:	fb02 f303 	mul.w	r3, r2, r3
 800224a:	4a1c      	ldr	r2, [pc, #112]	; (80022bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800224c:	fba2 2303 	umull	r2, r3, r2, r3
 8002250:	0c9b      	lsrs	r3, r3, #18
 8002252:	3301      	adds	r3, #1
 8002254:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002256:	e002      	b.n	800225e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	3b01      	subs	r3, #1
 800225c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800225e:	4b15      	ldr	r3, [pc, #84]	; (80022b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002266:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800226a:	d102      	bne.n	8002272 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1f2      	bne.n	8002258 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002272:	4b10      	ldr	r3, [pc, #64]	; (80022b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800227a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800227e:	d112      	bne.n	80022a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e011      	b.n	80022a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002284:	4b0b      	ldr	r3, [pc, #44]	; (80022b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002286:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800228a:	4a0a      	ldr	r2, [pc, #40]	; (80022b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800228c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002290:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002294:	e007      	b.n	80022a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002296:	4b07      	ldr	r3, [pc, #28]	; (80022b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800229e:	4a05      	ldr	r2, [pc, #20]	; (80022b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022a4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3714      	adds	r7, #20
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	40007000 	.word	0x40007000
 80022b8:	20000000 	.word	0x20000000
 80022bc:	431bde83 	.word	0x431bde83

080022c0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80022c4:	4b05      	ldr	r3, [pc, #20]	; (80022dc <HAL_PWREx_EnableVddIO2+0x1c>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	4a04      	ldr	r2, [pc, #16]	; (80022dc <HAL_PWREx_EnableVddIO2+0x1c>)
 80022ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022ce:	6053      	str	r3, [r2, #4]
}
 80022d0:	bf00      	nop
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	40007000 	.word	0x40007000

080022e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b088      	sub	sp, #32
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d102      	bne.n	80022f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	f000 bc08 	b.w	8002b04 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022f4:	4b96      	ldr	r3, [pc, #600]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f003 030c 	and.w	r3, r3, #12
 80022fc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022fe:	4b94      	ldr	r3, [pc, #592]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0310 	and.w	r3, r3, #16
 8002310:	2b00      	cmp	r3, #0
 8002312:	f000 80e4 	beq.w	80024de <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d007      	beq.n	800232c <HAL_RCC_OscConfig+0x4c>
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	2b0c      	cmp	r3, #12
 8002320:	f040 808b 	bne.w	800243a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	2b01      	cmp	r3, #1
 8002328:	f040 8087 	bne.w	800243a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800232c:	4b88      	ldr	r3, [pc, #544]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d005      	beq.n	8002344 <HAL_RCC_OscConfig+0x64>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d101      	bne.n	8002344 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e3df      	b.n	8002b04 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a1a      	ldr	r2, [r3, #32]
 8002348:	4b81      	ldr	r3, [pc, #516]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0308 	and.w	r3, r3, #8
 8002350:	2b00      	cmp	r3, #0
 8002352:	d004      	beq.n	800235e <HAL_RCC_OscConfig+0x7e>
 8002354:	4b7e      	ldr	r3, [pc, #504]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800235c:	e005      	b.n	800236a <HAL_RCC_OscConfig+0x8a>
 800235e:	4b7c      	ldr	r3, [pc, #496]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 8002360:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002364:	091b      	lsrs	r3, r3, #4
 8002366:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800236a:	4293      	cmp	r3, r2
 800236c:	d223      	bcs.n	80023b6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	4618      	mov	r0, r3
 8002374:	f000 fdca 	bl	8002f0c <RCC_SetFlashLatencyFromMSIRange>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e3c0      	b.n	8002b04 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002382:	4b73      	ldr	r3, [pc, #460]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a72      	ldr	r2, [pc, #456]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 8002388:	f043 0308 	orr.w	r3, r3, #8
 800238c:	6013      	str	r3, [r2, #0]
 800238e:	4b70      	ldr	r3, [pc, #448]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a1b      	ldr	r3, [r3, #32]
 800239a:	496d      	ldr	r1, [pc, #436]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 800239c:	4313      	orrs	r3, r2
 800239e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023a0:	4b6b      	ldr	r3, [pc, #428]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	69db      	ldr	r3, [r3, #28]
 80023ac:	021b      	lsls	r3, r3, #8
 80023ae:	4968      	ldr	r1, [pc, #416]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	604b      	str	r3, [r1, #4]
 80023b4:	e025      	b.n	8002402 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023b6:	4b66      	ldr	r3, [pc, #408]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a65      	ldr	r2, [pc, #404]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 80023bc:	f043 0308 	orr.w	r3, r3, #8
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	4b63      	ldr	r3, [pc, #396]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a1b      	ldr	r3, [r3, #32]
 80023ce:	4960      	ldr	r1, [pc, #384]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023d4:	4b5e      	ldr	r3, [pc, #376]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	69db      	ldr	r3, [r3, #28]
 80023e0:	021b      	lsls	r3, r3, #8
 80023e2:	495b      	ldr	r1, [pc, #364]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d109      	bne.n	8002402 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f000 fd8a 	bl	8002f0c <RCC_SetFlashLatencyFromMSIRange>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e380      	b.n	8002b04 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002402:	f000 fcc1 	bl	8002d88 <HAL_RCC_GetSysClockFreq>
 8002406:	4602      	mov	r2, r0
 8002408:	4b51      	ldr	r3, [pc, #324]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	091b      	lsrs	r3, r3, #4
 800240e:	f003 030f 	and.w	r3, r3, #15
 8002412:	4950      	ldr	r1, [pc, #320]	; (8002554 <HAL_RCC_OscConfig+0x274>)
 8002414:	5ccb      	ldrb	r3, [r1, r3]
 8002416:	f003 031f 	and.w	r3, r3, #31
 800241a:	fa22 f303 	lsr.w	r3, r2, r3
 800241e:	4a4e      	ldr	r2, [pc, #312]	; (8002558 <HAL_RCC_OscConfig+0x278>)
 8002420:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002422:	4b4e      	ldr	r3, [pc, #312]	; (800255c <HAL_RCC_OscConfig+0x27c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff f966 	bl	80016f8 <HAL_InitTick>
 800242c:	4603      	mov	r3, r0
 800242e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002430:	7bfb      	ldrb	r3, [r7, #15]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d052      	beq.n	80024dc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002436:	7bfb      	ldrb	r3, [r7, #15]
 8002438:	e364      	b.n	8002b04 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d032      	beq.n	80024a8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002442:	4b43      	ldr	r3, [pc, #268]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a42      	ldr	r2, [pc, #264]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 8002448:	f043 0301 	orr.w	r3, r3, #1
 800244c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800244e:	f7ff f9a3 	bl	8001798 <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002454:	e008      	b.n	8002468 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002456:	f7ff f99f 	bl	8001798 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e34d      	b.n	8002b04 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002468:	4b39      	ldr	r3, [pc, #228]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d0f0      	beq.n	8002456 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002474:	4b36      	ldr	r3, [pc, #216]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a35      	ldr	r2, [pc, #212]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 800247a:	f043 0308 	orr.w	r3, r3, #8
 800247e:	6013      	str	r3, [r2, #0]
 8002480:	4b33      	ldr	r3, [pc, #204]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	4930      	ldr	r1, [pc, #192]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 800248e:	4313      	orrs	r3, r2
 8002490:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002492:	4b2f      	ldr	r3, [pc, #188]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	021b      	lsls	r3, r3, #8
 80024a0:	492b      	ldr	r1, [pc, #172]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	604b      	str	r3, [r1, #4]
 80024a6:	e01a      	b.n	80024de <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80024a8:	4b29      	ldr	r3, [pc, #164]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a28      	ldr	r2, [pc, #160]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 80024ae:	f023 0301 	bic.w	r3, r3, #1
 80024b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024b4:	f7ff f970 	bl	8001798 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024bc:	f7ff f96c 	bl	8001798 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e31a      	b.n	8002b04 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024ce:	4b20      	ldr	r3, [pc, #128]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1f0      	bne.n	80024bc <HAL_RCC_OscConfig+0x1dc>
 80024da:	e000      	b.n	80024de <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024dc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d073      	beq.n	80025d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	2b08      	cmp	r3, #8
 80024ee:	d005      	beq.n	80024fc <HAL_RCC_OscConfig+0x21c>
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	2b0c      	cmp	r3, #12
 80024f4:	d10e      	bne.n	8002514 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	2b03      	cmp	r3, #3
 80024fa:	d10b      	bne.n	8002514 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024fc:	4b14      	ldr	r3, [pc, #80]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d063      	beq.n	80025d0 <HAL_RCC_OscConfig+0x2f0>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d15f      	bne.n	80025d0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e2f7      	b.n	8002b04 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800251c:	d106      	bne.n	800252c <HAL_RCC_OscConfig+0x24c>
 800251e:	4b0c      	ldr	r3, [pc, #48]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a0b      	ldr	r2, [pc, #44]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 8002524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002528:	6013      	str	r3, [r2, #0]
 800252a:	e025      	b.n	8002578 <HAL_RCC_OscConfig+0x298>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002534:	d114      	bne.n	8002560 <HAL_RCC_OscConfig+0x280>
 8002536:	4b06      	ldr	r3, [pc, #24]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a05      	ldr	r2, [pc, #20]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 800253c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002540:	6013      	str	r3, [r2, #0]
 8002542:	4b03      	ldr	r3, [pc, #12]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a02      	ldr	r2, [pc, #8]	; (8002550 <HAL_RCC_OscConfig+0x270>)
 8002548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800254c:	6013      	str	r3, [r2, #0]
 800254e:	e013      	b.n	8002578 <HAL_RCC_OscConfig+0x298>
 8002550:	40021000 	.word	0x40021000
 8002554:	08009cd4 	.word	0x08009cd4
 8002558:	20000000 	.word	0x20000000
 800255c:	20000004 	.word	0x20000004
 8002560:	4ba0      	ldr	r3, [pc, #640]	; (80027e4 <HAL_RCC_OscConfig+0x504>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a9f      	ldr	r2, [pc, #636]	; (80027e4 <HAL_RCC_OscConfig+0x504>)
 8002566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800256a:	6013      	str	r3, [r2, #0]
 800256c:	4b9d      	ldr	r3, [pc, #628]	; (80027e4 <HAL_RCC_OscConfig+0x504>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a9c      	ldr	r2, [pc, #624]	; (80027e4 <HAL_RCC_OscConfig+0x504>)
 8002572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002576:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d013      	beq.n	80025a8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002580:	f7ff f90a 	bl	8001798 <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002588:	f7ff f906 	bl	8001798 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b64      	cmp	r3, #100	; 0x64
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e2b4      	b.n	8002b04 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800259a:	4b92      	ldr	r3, [pc, #584]	; (80027e4 <HAL_RCC_OscConfig+0x504>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d0f0      	beq.n	8002588 <HAL_RCC_OscConfig+0x2a8>
 80025a6:	e014      	b.n	80025d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a8:	f7ff f8f6 	bl	8001798 <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025b0:	f7ff f8f2 	bl	8001798 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b64      	cmp	r3, #100	; 0x64
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e2a0      	b.n	8002b04 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025c2:	4b88      	ldr	r3, [pc, #544]	; (80027e4 <HAL_RCC_OscConfig+0x504>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f0      	bne.n	80025b0 <HAL_RCC_OscConfig+0x2d0>
 80025ce:	e000      	b.n	80025d2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d060      	beq.n	80026a0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	2b04      	cmp	r3, #4
 80025e2:	d005      	beq.n	80025f0 <HAL_RCC_OscConfig+0x310>
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	2b0c      	cmp	r3, #12
 80025e8:	d119      	bne.n	800261e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d116      	bne.n	800261e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025f0:	4b7c      	ldr	r3, [pc, #496]	; (80027e4 <HAL_RCC_OscConfig+0x504>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d005      	beq.n	8002608 <HAL_RCC_OscConfig+0x328>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d101      	bne.n	8002608 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e27d      	b.n	8002b04 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002608:	4b76      	ldr	r3, [pc, #472]	; (80027e4 <HAL_RCC_OscConfig+0x504>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	061b      	lsls	r3, r3, #24
 8002616:	4973      	ldr	r1, [pc, #460]	; (80027e4 <HAL_RCC_OscConfig+0x504>)
 8002618:	4313      	orrs	r3, r2
 800261a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800261c:	e040      	b.n	80026a0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d023      	beq.n	800266e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002626:	4b6f      	ldr	r3, [pc, #444]	; (80027e4 <HAL_RCC_OscConfig+0x504>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a6e      	ldr	r2, [pc, #440]	; (80027e4 <HAL_RCC_OscConfig+0x504>)
 800262c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002630:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002632:	f7ff f8b1 	bl	8001798 <HAL_GetTick>
 8002636:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002638:	e008      	b.n	800264c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800263a:	f7ff f8ad 	bl	8001798 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e25b      	b.n	8002b04 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800264c:	4b65      	ldr	r3, [pc, #404]	; (80027e4 <HAL_RCC_OscConfig+0x504>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002654:	2b00      	cmp	r3, #0
 8002656:	d0f0      	beq.n	800263a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002658:	4b62      	ldr	r3, [pc, #392]	; (80027e4 <HAL_RCC_OscConfig+0x504>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	061b      	lsls	r3, r3, #24
 8002666:	495f      	ldr	r1, [pc, #380]	; (80027e4 <HAL_RCC_OscConfig+0x504>)
 8002668:	4313      	orrs	r3, r2
 800266a:	604b      	str	r3, [r1, #4]
 800266c:	e018      	b.n	80026a0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800266e:	4b5d      	ldr	r3, [pc, #372]	; (80027e4 <HAL_RCC_OscConfig+0x504>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a5c      	ldr	r2, [pc, #368]	; (80027e4 <HAL_RCC_OscConfig+0x504>)
 8002674:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002678:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267a:	f7ff f88d 	bl	8001798 <HAL_GetTick>
 800267e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002680:	e008      	b.n	8002694 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002682:	f7ff f889 	bl	8001798 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e237      	b.n	8002b04 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002694:	4b53      	ldr	r3, [pc, #332]	; (80027e4 <HAL_RCC_OscConfig+0x504>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1f0      	bne.n	8002682 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0308 	and.w	r3, r3, #8
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d03c      	beq.n	8002726 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	695b      	ldr	r3, [r3, #20]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d01c      	beq.n	80026ee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026b4:	4b4b      	ldr	r3, [pc, #300]	; (80027e4 <HAL_RCC_OscConfig+0x504>)
 80026b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026ba:	4a4a      	ldr	r2, [pc, #296]	; (80027e4 <HAL_RCC_OscConfig+0x504>)
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c4:	f7ff f868 	bl	8001798 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026cc:	f7ff f864 	bl	8001798 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e212      	b.n	8002b04 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026de:	4b41      	ldr	r3, [pc, #260]	; (80027e4 <HAL_RCC_OscConfig+0x504>)
 80026e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0ef      	beq.n	80026cc <HAL_RCC_OscConfig+0x3ec>
 80026ec:	e01b      	b.n	8002726 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026ee:	4b3d      	ldr	r3, [pc, #244]	; (80027e4 <HAL_RCC_OscConfig+0x504>)
 80026f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026f4:	4a3b      	ldr	r2, [pc, #236]	; (80027e4 <HAL_RCC_OscConfig+0x504>)
 80026f6:	f023 0301 	bic.w	r3, r3, #1
 80026fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026fe:	f7ff f84b 	bl	8001798 <HAL_GetTick>
 8002702:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002704:	e008      	b.n	8002718 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002706:	f7ff f847 	bl	8001798 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e1f5      	b.n	8002b04 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002718:	4b32      	ldr	r3, [pc, #200]	; (80027e4 <HAL_RCC_OscConfig+0x504>)
 800271a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1ef      	bne.n	8002706 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0304 	and.w	r3, r3, #4
 800272e:	2b00      	cmp	r3, #0
 8002730:	f000 80a6 	beq.w	8002880 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002734:	2300      	movs	r3, #0
 8002736:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002738:	4b2a      	ldr	r3, [pc, #168]	; (80027e4 <HAL_RCC_OscConfig+0x504>)
 800273a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10d      	bne.n	8002760 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002744:	4b27      	ldr	r3, [pc, #156]	; (80027e4 <HAL_RCC_OscConfig+0x504>)
 8002746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002748:	4a26      	ldr	r2, [pc, #152]	; (80027e4 <HAL_RCC_OscConfig+0x504>)
 800274a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800274e:	6593      	str	r3, [r2, #88]	; 0x58
 8002750:	4b24      	ldr	r3, [pc, #144]	; (80027e4 <HAL_RCC_OscConfig+0x504>)
 8002752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002758:	60bb      	str	r3, [r7, #8]
 800275a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800275c:	2301      	movs	r3, #1
 800275e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002760:	4b21      	ldr	r3, [pc, #132]	; (80027e8 <HAL_RCC_OscConfig+0x508>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002768:	2b00      	cmp	r3, #0
 800276a:	d118      	bne.n	800279e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800276c:	4b1e      	ldr	r3, [pc, #120]	; (80027e8 <HAL_RCC_OscConfig+0x508>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a1d      	ldr	r2, [pc, #116]	; (80027e8 <HAL_RCC_OscConfig+0x508>)
 8002772:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002776:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002778:	f7ff f80e 	bl	8001798 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002780:	f7ff f80a 	bl	8001798 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e1b8      	b.n	8002b04 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002792:	4b15      	ldr	r3, [pc, #84]	; (80027e8 <HAL_RCC_OscConfig+0x508>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0f0      	beq.n	8002780 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d108      	bne.n	80027b8 <HAL_RCC_OscConfig+0x4d8>
 80027a6:	4b0f      	ldr	r3, [pc, #60]	; (80027e4 <HAL_RCC_OscConfig+0x504>)
 80027a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ac:	4a0d      	ldr	r2, [pc, #52]	; (80027e4 <HAL_RCC_OscConfig+0x504>)
 80027ae:	f043 0301 	orr.w	r3, r3, #1
 80027b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027b6:	e029      	b.n	800280c <HAL_RCC_OscConfig+0x52c>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	2b05      	cmp	r3, #5
 80027be:	d115      	bne.n	80027ec <HAL_RCC_OscConfig+0x50c>
 80027c0:	4b08      	ldr	r3, [pc, #32]	; (80027e4 <HAL_RCC_OscConfig+0x504>)
 80027c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c6:	4a07      	ldr	r2, [pc, #28]	; (80027e4 <HAL_RCC_OscConfig+0x504>)
 80027c8:	f043 0304 	orr.w	r3, r3, #4
 80027cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027d0:	4b04      	ldr	r3, [pc, #16]	; (80027e4 <HAL_RCC_OscConfig+0x504>)
 80027d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d6:	4a03      	ldr	r2, [pc, #12]	; (80027e4 <HAL_RCC_OscConfig+0x504>)
 80027d8:	f043 0301 	orr.w	r3, r3, #1
 80027dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027e0:	e014      	b.n	800280c <HAL_RCC_OscConfig+0x52c>
 80027e2:	bf00      	nop
 80027e4:	40021000 	.word	0x40021000
 80027e8:	40007000 	.word	0x40007000
 80027ec:	4b9d      	ldr	r3, [pc, #628]	; (8002a64 <HAL_RCC_OscConfig+0x784>)
 80027ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f2:	4a9c      	ldr	r2, [pc, #624]	; (8002a64 <HAL_RCC_OscConfig+0x784>)
 80027f4:	f023 0301 	bic.w	r3, r3, #1
 80027f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027fc:	4b99      	ldr	r3, [pc, #612]	; (8002a64 <HAL_RCC_OscConfig+0x784>)
 80027fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002802:	4a98      	ldr	r2, [pc, #608]	; (8002a64 <HAL_RCC_OscConfig+0x784>)
 8002804:	f023 0304 	bic.w	r3, r3, #4
 8002808:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d016      	beq.n	8002842 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002814:	f7fe ffc0 	bl	8001798 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800281a:	e00a      	b.n	8002832 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800281c:	f7fe ffbc 	bl	8001798 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	f241 3288 	movw	r2, #5000	; 0x1388
 800282a:	4293      	cmp	r3, r2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e168      	b.n	8002b04 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002832:	4b8c      	ldr	r3, [pc, #560]	; (8002a64 <HAL_RCC_OscConfig+0x784>)
 8002834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d0ed      	beq.n	800281c <HAL_RCC_OscConfig+0x53c>
 8002840:	e015      	b.n	800286e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002842:	f7fe ffa9 	bl	8001798 <HAL_GetTick>
 8002846:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002848:	e00a      	b.n	8002860 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800284a:	f7fe ffa5 	bl	8001798 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	f241 3288 	movw	r2, #5000	; 0x1388
 8002858:	4293      	cmp	r3, r2
 800285a:	d901      	bls.n	8002860 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e151      	b.n	8002b04 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002860:	4b80      	ldr	r3, [pc, #512]	; (8002a64 <HAL_RCC_OscConfig+0x784>)
 8002862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1ed      	bne.n	800284a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800286e:	7ffb      	ldrb	r3, [r7, #31]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d105      	bne.n	8002880 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002874:	4b7b      	ldr	r3, [pc, #492]	; (8002a64 <HAL_RCC_OscConfig+0x784>)
 8002876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002878:	4a7a      	ldr	r2, [pc, #488]	; (8002a64 <HAL_RCC_OscConfig+0x784>)
 800287a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800287e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0320 	and.w	r3, r3, #32
 8002888:	2b00      	cmp	r3, #0
 800288a:	d03c      	beq.n	8002906 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	2b00      	cmp	r3, #0
 8002892:	d01c      	beq.n	80028ce <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002894:	4b73      	ldr	r3, [pc, #460]	; (8002a64 <HAL_RCC_OscConfig+0x784>)
 8002896:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800289a:	4a72      	ldr	r2, [pc, #456]	; (8002a64 <HAL_RCC_OscConfig+0x784>)
 800289c:	f043 0301 	orr.w	r3, r3, #1
 80028a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a4:	f7fe ff78 	bl	8001798 <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028ac:	f7fe ff74 	bl	8001798 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e122      	b.n	8002b04 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028be:	4b69      	ldr	r3, [pc, #420]	; (8002a64 <HAL_RCC_OscConfig+0x784>)
 80028c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0ef      	beq.n	80028ac <HAL_RCC_OscConfig+0x5cc>
 80028cc:	e01b      	b.n	8002906 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028ce:	4b65      	ldr	r3, [pc, #404]	; (8002a64 <HAL_RCC_OscConfig+0x784>)
 80028d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028d4:	4a63      	ldr	r2, [pc, #396]	; (8002a64 <HAL_RCC_OscConfig+0x784>)
 80028d6:	f023 0301 	bic.w	r3, r3, #1
 80028da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028de:	f7fe ff5b 	bl	8001798 <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028e6:	f7fe ff57 	bl	8001798 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e105      	b.n	8002b04 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80028f8:	4b5a      	ldr	r3, [pc, #360]	; (8002a64 <HAL_RCC_OscConfig+0x784>)
 80028fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1ef      	bne.n	80028e6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290a:	2b00      	cmp	r3, #0
 800290c:	f000 80f9 	beq.w	8002b02 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002914:	2b02      	cmp	r3, #2
 8002916:	f040 80cf 	bne.w	8002ab8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800291a:	4b52      	ldr	r3, [pc, #328]	; (8002a64 <HAL_RCC_OscConfig+0x784>)
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	f003 0203 	and.w	r2, r3, #3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292a:	429a      	cmp	r2, r3
 800292c:	d12c      	bne.n	8002988 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002938:	3b01      	subs	r3, #1
 800293a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800293c:	429a      	cmp	r2, r3
 800293e:	d123      	bne.n	8002988 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800294a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800294c:	429a      	cmp	r2, r3
 800294e:	d11b      	bne.n	8002988 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800295c:	429a      	cmp	r2, r3
 800295e:	d113      	bne.n	8002988 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800296a:	085b      	lsrs	r3, r3, #1
 800296c:	3b01      	subs	r3, #1
 800296e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002970:	429a      	cmp	r2, r3
 8002972:	d109      	bne.n	8002988 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	085b      	lsrs	r3, r3, #1
 8002980:	3b01      	subs	r3, #1
 8002982:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002984:	429a      	cmp	r2, r3
 8002986:	d071      	beq.n	8002a6c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	2b0c      	cmp	r3, #12
 800298c:	d068      	beq.n	8002a60 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800298e:	4b35      	ldr	r3, [pc, #212]	; (8002a64 <HAL_RCC_OscConfig+0x784>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d105      	bne.n	80029a6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800299a:	4b32      	ldr	r3, [pc, #200]	; (8002a64 <HAL_RCC_OscConfig+0x784>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e0ac      	b.n	8002b04 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80029aa:	4b2e      	ldr	r3, [pc, #184]	; (8002a64 <HAL_RCC_OscConfig+0x784>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a2d      	ldr	r2, [pc, #180]	; (8002a64 <HAL_RCC_OscConfig+0x784>)
 80029b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029b4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029b6:	f7fe feef 	bl	8001798 <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029be:	f7fe feeb 	bl	8001798 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e099      	b.n	8002b04 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029d0:	4b24      	ldr	r3, [pc, #144]	; (8002a64 <HAL_RCC_OscConfig+0x784>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1f0      	bne.n	80029be <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029dc:	4b21      	ldr	r3, [pc, #132]	; (8002a64 <HAL_RCC_OscConfig+0x784>)
 80029de:	68da      	ldr	r2, [r3, #12]
 80029e0:	4b21      	ldr	r3, [pc, #132]	; (8002a68 <HAL_RCC_OscConfig+0x788>)
 80029e2:	4013      	ands	r3, r2
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80029ec:	3a01      	subs	r2, #1
 80029ee:	0112      	lsls	r2, r2, #4
 80029f0:	4311      	orrs	r1, r2
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029f6:	0212      	lsls	r2, r2, #8
 80029f8:	4311      	orrs	r1, r2
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80029fe:	0852      	lsrs	r2, r2, #1
 8002a00:	3a01      	subs	r2, #1
 8002a02:	0552      	lsls	r2, r2, #21
 8002a04:	4311      	orrs	r1, r2
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a0a:	0852      	lsrs	r2, r2, #1
 8002a0c:	3a01      	subs	r2, #1
 8002a0e:	0652      	lsls	r2, r2, #25
 8002a10:	4311      	orrs	r1, r2
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a16:	06d2      	lsls	r2, r2, #27
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	4912      	ldr	r1, [pc, #72]	; (8002a64 <HAL_RCC_OscConfig+0x784>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a20:	4b10      	ldr	r3, [pc, #64]	; (8002a64 <HAL_RCC_OscConfig+0x784>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a0f      	ldr	r2, [pc, #60]	; (8002a64 <HAL_RCC_OscConfig+0x784>)
 8002a26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a2a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a2c:	4b0d      	ldr	r3, [pc, #52]	; (8002a64 <HAL_RCC_OscConfig+0x784>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	4a0c      	ldr	r2, [pc, #48]	; (8002a64 <HAL_RCC_OscConfig+0x784>)
 8002a32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a36:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a38:	f7fe feae 	bl	8001798 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a40:	f7fe feaa 	bl	8001798 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e058      	b.n	8002b04 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a52:	4b04      	ldr	r3, [pc, #16]	; (8002a64 <HAL_RCC_OscConfig+0x784>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d0f0      	beq.n	8002a40 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a5e:	e050      	b.n	8002b02 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e04f      	b.n	8002b04 <HAL_RCC_OscConfig+0x824>
 8002a64:	40021000 	.word	0x40021000
 8002a68:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a6c:	4b27      	ldr	r3, [pc, #156]	; (8002b0c <HAL_RCC_OscConfig+0x82c>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d144      	bne.n	8002b02 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a78:	4b24      	ldr	r3, [pc, #144]	; (8002b0c <HAL_RCC_OscConfig+0x82c>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a23      	ldr	r2, [pc, #140]	; (8002b0c <HAL_RCC_OscConfig+0x82c>)
 8002a7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a82:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a84:	4b21      	ldr	r3, [pc, #132]	; (8002b0c <HAL_RCC_OscConfig+0x82c>)
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	4a20      	ldr	r2, [pc, #128]	; (8002b0c <HAL_RCC_OscConfig+0x82c>)
 8002a8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a8e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a90:	f7fe fe82 	bl	8001798 <HAL_GetTick>
 8002a94:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a96:	e008      	b.n	8002aaa <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a98:	f7fe fe7e 	bl	8001798 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e02c      	b.n	8002b04 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aaa:	4b18      	ldr	r3, [pc, #96]	; (8002b0c <HAL_RCC_OscConfig+0x82c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d0f0      	beq.n	8002a98 <HAL_RCC_OscConfig+0x7b8>
 8002ab6:	e024      	b.n	8002b02 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	2b0c      	cmp	r3, #12
 8002abc:	d01f      	beq.n	8002afe <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002abe:	4b13      	ldr	r3, [pc, #76]	; (8002b0c <HAL_RCC_OscConfig+0x82c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a12      	ldr	r2, [pc, #72]	; (8002b0c <HAL_RCC_OscConfig+0x82c>)
 8002ac4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ac8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aca:	f7fe fe65 	bl	8001798 <HAL_GetTick>
 8002ace:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ad0:	e008      	b.n	8002ae4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ad2:	f7fe fe61 	bl	8001798 <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d901      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e00f      	b.n	8002b04 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ae4:	4b09      	ldr	r3, [pc, #36]	; (8002b0c <HAL_RCC_OscConfig+0x82c>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1f0      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002af0:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <HAL_RCC_OscConfig+0x82c>)
 8002af2:	68da      	ldr	r2, [r3, #12]
 8002af4:	4905      	ldr	r1, [pc, #20]	; (8002b0c <HAL_RCC_OscConfig+0x82c>)
 8002af6:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <HAL_RCC_OscConfig+0x830>)
 8002af8:	4013      	ands	r3, r2
 8002afa:	60cb      	str	r3, [r1, #12]
 8002afc:	e001      	b.n	8002b02 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e000      	b.n	8002b04 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3720      	adds	r7, #32
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	feeefffc 	.word	0xfeeefffc

08002b14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d101      	bne.n	8002b2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e11d      	b.n	8002d68 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b2c:	4b90      	ldr	r3, [pc, #576]	; (8002d70 <HAL_RCC_ClockConfig+0x25c>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 030f 	and.w	r3, r3, #15
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d910      	bls.n	8002b5c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3a:	4b8d      	ldr	r3, [pc, #564]	; (8002d70 <HAL_RCC_ClockConfig+0x25c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f023 020f 	bic.w	r2, r3, #15
 8002b42:	498b      	ldr	r1, [pc, #556]	; (8002d70 <HAL_RCC_ClockConfig+0x25c>)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b4a:	4b89      	ldr	r3, [pc, #548]	; (8002d70 <HAL_RCC_ClockConfig+0x25c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d001      	beq.n	8002b5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e105      	b.n	8002d68 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d010      	beq.n	8002b8a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689a      	ldr	r2, [r3, #8]
 8002b6c:	4b81      	ldr	r3, [pc, #516]	; (8002d74 <HAL_RCC_ClockConfig+0x260>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d908      	bls.n	8002b8a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b78:	4b7e      	ldr	r3, [pc, #504]	; (8002d74 <HAL_RCC_ClockConfig+0x260>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	497b      	ldr	r1, [pc, #492]	; (8002d74 <HAL_RCC_ClockConfig+0x260>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d079      	beq.n	8002c8a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b03      	cmp	r3, #3
 8002b9c:	d11e      	bne.n	8002bdc <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b9e:	4b75      	ldr	r3, [pc, #468]	; (8002d74 <HAL_RCC_ClockConfig+0x260>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e0dc      	b.n	8002d68 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002bae:	f000 fa07 	bl	8002fc0 <RCC_GetSysClockFreqFromPLLSource>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	4a70      	ldr	r2, [pc, #448]	; (8002d78 <HAL_RCC_ClockConfig+0x264>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d946      	bls.n	8002c48 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002bba:	4b6e      	ldr	r3, [pc, #440]	; (8002d74 <HAL_RCC_ClockConfig+0x260>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d140      	bne.n	8002c48 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002bc6:	4b6b      	ldr	r3, [pc, #428]	; (8002d74 <HAL_RCC_ClockConfig+0x260>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bce:	4a69      	ldr	r2, [pc, #420]	; (8002d74 <HAL_RCC_ClockConfig+0x260>)
 8002bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bd4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002bd6:	2380      	movs	r3, #128	; 0x80
 8002bd8:	617b      	str	r3, [r7, #20]
 8002bda:	e035      	b.n	8002c48 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d107      	bne.n	8002bf4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002be4:	4b63      	ldr	r3, [pc, #396]	; (8002d74 <HAL_RCC_ClockConfig+0x260>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d115      	bne.n	8002c1c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e0b9      	b.n	8002d68 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d107      	bne.n	8002c0c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bfc:	4b5d      	ldr	r3, [pc, #372]	; (8002d74 <HAL_RCC_ClockConfig+0x260>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d109      	bne.n	8002c1c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e0ad      	b.n	8002d68 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c0c:	4b59      	ldr	r3, [pc, #356]	; (8002d74 <HAL_RCC_ClockConfig+0x260>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e0a5      	b.n	8002d68 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002c1c:	f000 f8b4 	bl	8002d88 <HAL_RCC_GetSysClockFreq>
 8002c20:	4603      	mov	r3, r0
 8002c22:	4a55      	ldr	r2, [pc, #340]	; (8002d78 <HAL_RCC_ClockConfig+0x264>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d90f      	bls.n	8002c48 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002c28:	4b52      	ldr	r3, [pc, #328]	; (8002d74 <HAL_RCC_ClockConfig+0x260>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d109      	bne.n	8002c48 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002c34:	4b4f      	ldr	r3, [pc, #316]	; (8002d74 <HAL_RCC_ClockConfig+0x260>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c3c:	4a4d      	ldr	r2, [pc, #308]	; (8002d74 <HAL_RCC_ClockConfig+0x260>)
 8002c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c42:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002c44:	2380      	movs	r3, #128	; 0x80
 8002c46:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c48:	4b4a      	ldr	r3, [pc, #296]	; (8002d74 <HAL_RCC_ClockConfig+0x260>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f023 0203 	bic.w	r2, r3, #3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	4947      	ldr	r1, [pc, #284]	; (8002d74 <HAL_RCC_ClockConfig+0x260>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c5a:	f7fe fd9d 	bl	8001798 <HAL_GetTick>
 8002c5e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c60:	e00a      	b.n	8002c78 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c62:	f7fe fd99 	bl	8001798 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d901      	bls.n	8002c78 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e077      	b.n	8002d68 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c78:	4b3e      	ldr	r3, [pc, #248]	; (8002d74 <HAL_RCC_ClockConfig+0x260>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 020c 	and.w	r2, r3, #12
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d1eb      	bne.n	8002c62 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	2b80      	cmp	r3, #128	; 0x80
 8002c8e:	d105      	bne.n	8002c9c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002c90:	4b38      	ldr	r3, [pc, #224]	; (8002d74 <HAL_RCC_ClockConfig+0x260>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	4a37      	ldr	r2, [pc, #220]	; (8002d74 <HAL_RCC_ClockConfig+0x260>)
 8002c96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c9a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d010      	beq.n	8002cca <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	4b31      	ldr	r3, [pc, #196]	; (8002d74 <HAL_RCC_ClockConfig+0x260>)
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d208      	bcs.n	8002cca <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cb8:	4b2e      	ldr	r3, [pc, #184]	; (8002d74 <HAL_RCC_ClockConfig+0x260>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	492b      	ldr	r1, [pc, #172]	; (8002d74 <HAL_RCC_ClockConfig+0x260>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cca:	4b29      	ldr	r3, [pc, #164]	; (8002d70 <HAL_RCC_ClockConfig+0x25c>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 030f 	and.w	r3, r3, #15
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d210      	bcs.n	8002cfa <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cd8:	4b25      	ldr	r3, [pc, #148]	; (8002d70 <HAL_RCC_ClockConfig+0x25c>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f023 020f 	bic.w	r2, r3, #15
 8002ce0:	4923      	ldr	r1, [pc, #140]	; (8002d70 <HAL_RCC_ClockConfig+0x25c>)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ce8:	4b21      	ldr	r3, [pc, #132]	; (8002d70 <HAL_RCC_ClockConfig+0x25c>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 030f 	and.w	r3, r3, #15
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d001      	beq.n	8002cfa <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e036      	b.n	8002d68 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0304 	and.w	r3, r3, #4
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d008      	beq.n	8002d18 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d06:	4b1b      	ldr	r3, [pc, #108]	; (8002d74 <HAL_RCC_ClockConfig+0x260>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	4918      	ldr	r1, [pc, #96]	; (8002d74 <HAL_RCC_ClockConfig+0x260>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0308 	and.w	r3, r3, #8
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d009      	beq.n	8002d38 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d24:	4b13      	ldr	r3, [pc, #76]	; (8002d74 <HAL_RCC_ClockConfig+0x260>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	4910      	ldr	r1, [pc, #64]	; (8002d74 <HAL_RCC_ClockConfig+0x260>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d38:	f000 f826 	bl	8002d88 <HAL_RCC_GetSysClockFreq>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	4b0d      	ldr	r3, [pc, #52]	; (8002d74 <HAL_RCC_ClockConfig+0x260>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	091b      	lsrs	r3, r3, #4
 8002d44:	f003 030f 	and.w	r3, r3, #15
 8002d48:	490c      	ldr	r1, [pc, #48]	; (8002d7c <HAL_RCC_ClockConfig+0x268>)
 8002d4a:	5ccb      	ldrb	r3, [r1, r3]
 8002d4c:	f003 031f 	and.w	r3, r3, #31
 8002d50:	fa22 f303 	lsr.w	r3, r2, r3
 8002d54:	4a0a      	ldr	r2, [pc, #40]	; (8002d80 <HAL_RCC_ClockConfig+0x26c>)
 8002d56:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d58:	4b0a      	ldr	r3, [pc, #40]	; (8002d84 <HAL_RCC_ClockConfig+0x270>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7fe fccb 	bl	80016f8 <HAL_InitTick>
 8002d62:	4603      	mov	r3, r0
 8002d64:	73fb      	strb	r3, [r7, #15]

  return status;
 8002d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3718      	adds	r7, #24
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40022000 	.word	0x40022000
 8002d74:	40021000 	.word	0x40021000
 8002d78:	04c4b400 	.word	0x04c4b400
 8002d7c:	08009cd4 	.word	0x08009cd4
 8002d80:	20000000 	.word	0x20000000
 8002d84:	20000004 	.word	0x20000004

08002d88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b089      	sub	sp, #36	; 0x24
 8002d8c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	61fb      	str	r3, [r7, #28]
 8002d92:	2300      	movs	r3, #0
 8002d94:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d96:	4b3e      	ldr	r3, [pc, #248]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 030c 	and.w	r3, r3, #12
 8002d9e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002da0:	4b3b      	ldr	r3, [pc, #236]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	f003 0303 	and.w	r3, r3, #3
 8002da8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d005      	beq.n	8002dbc <HAL_RCC_GetSysClockFreq+0x34>
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	2b0c      	cmp	r3, #12
 8002db4:	d121      	bne.n	8002dfa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d11e      	bne.n	8002dfa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002dbc:	4b34      	ldr	r3, [pc, #208]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0308 	and.w	r3, r3, #8
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d107      	bne.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002dc8:	4b31      	ldr	r3, [pc, #196]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dce:	0a1b      	lsrs	r3, r3, #8
 8002dd0:	f003 030f 	and.w	r3, r3, #15
 8002dd4:	61fb      	str	r3, [r7, #28]
 8002dd6:	e005      	b.n	8002de4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002dd8:	4b2d      	ldr	r3, [pc, #180]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	091b      	lsrs	r3, r3, #4
 8002dde:	f003 030f 	and.w	r3, r3, #15
 8002de2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002de4:	4a2b      	ldr	r2, [pc, #172]	; (8002e94 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d10d      	bne.n	8002e10 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002df8:	e00a      	b.n	8002e10 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	d102      	bne.n	8002e06 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e00:	4b25      	ldr	r3, [pc, #148]	; (8002e98 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e02:	61bb      	str	r3, [r7, #24]
 8002e04:	e004      	b.n	8002e10 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	2b08      	cmp	r3, #8
 8002e0a:	d101      	bne.n	8002e10 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e0c:	4b22      	ldr	r3, [pc, #136]	; (8002e98 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e0e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	2b0c      	cmp	r3, #12
 8002e14:	d134      	bne.n	8002e80 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e16:	4b1e      	ldr	r3, [pc, #120]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	f003 0303 	and.w	r3, r3, #3
 8002e1e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d003      	beq.n	8002e2e <HAL_RCC_GetSysClockFreq+0xa6>
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	2b03      	cmp	r3, #3
 8002e2a:	d003      	beq.n	8002e34 <HAL_RCC_GetSysClockFreq+0xac>
 8002e2c:	e005      	b.n	8002e3a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e2e:	4b1a      	ldr	r3, [pc, #104]	; (8002e98 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e30:	617b      	str	r3, [r7, #20]
      break;
 8002e32:	e005      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e34:	4b18      	ldr	r3, [pc, #96]	; (8002e98 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e36:	617b      	str	r3, [r7, #20]
      break;
 8002e38:	e002      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	617b      	str	r3, [r7, #20]
      break;
 8002e3e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e40:	4b13      	ldr	r3, [pc, #76]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	091b      	lsrs	r3, r3, #4
 8002e46:	f003 030f 	and.w	r3, r3, #15
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e4e:	4b10      	ldr	r3, [pc, #64]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	0a1b      	lsrs	r3, r3, #8
 8002e54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	fb03 f202 	mul.w	r2, r3, r2
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e64:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e66:	4b0a      	ldr	r3, [pc, #40]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	0e5b      	lsrs	r3, r3, #25
 8002e6c:	f003 0303 	and.w	r3, r3, #3
 8002e70:	3301      	adds	r3, #1
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e7e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e80:	69bb      	ldr	r3, [r7, #24]
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3724      	adds	r7, #36	; 0x24
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	40021000 	.word	0x40021000
 8002e94:	08009cec 	.word	0x08009cec
 8002e98:	00f42400 	.word	0x00f42400

08002e9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ea0:	4b03      	ldr	r3, [pc, #12]	; (8002eb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	20000000 	.word	0x20000000

08002eb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002eb8:	f7ff fff0 	bl	8002e9c <HAL_RCC_GetHCLKFreq>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	4b06      	ldr	r3, [pc, #24]	; (8002ed8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	0a1b      	lsrs	r3, r3, #8
 8002ec4:	f003 0307 	and.w	r3, r3, #7
 8002ec8:	4904      	ldr	r1, [pc, #16]	; (8002edc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002eca:	5ccb      	ldrb	r3, [r1, r3]
 8002ecc:	f003 031f 	and.w	r3, r3, #31
 8002ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	08009ce4 	.word	0x08009ce4

08002ee0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ee4:	f7ff ffda 	bl	8002e9c <HAL_RCC_GetHCLKFreq>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	4b06      	ldr	r3, [pc, #24]	; (8002f04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	0adb      	lsrs	r3, r3, #11
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	4904      	ldr	r1, [pc, #16]	; (8002f08 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ef6:	5ccb      	ldrb	r3, [r1, r3]
 8002ef8:	f003 031f 	and.w	r3, r3, #31
 8002efc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	40021000 	.word	0x40021000
 8002f08:	08009ce4 	.word	0x08009ce4

08002f0c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f14:	2300      	movs	r3, #0
 8002f16:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f18:	4b27      	ldr	r3, [pc, #156]	; (8002fb8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d003      	beq.n	8002f2c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f24:	f7ff f908 	bl	8002138 <HAL_PWREx_GetVoltageRange>
 8002f28:	6178      	str	r0, [r7, #20]
 8002f2a:	e014      	b.n	8002f56 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f2c:	4b22      	ldr	r3, [pc, #136]	; (8002fb8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f30:	4a21      	ldr	r2, [pc, #132]	; (8002fb8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f36:	6593      	str	r3, [r2, #88]	; 0x58
 8002f38:	4b1f      	ldr	r3, [pc, #124]	; (8002fb8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f44:	f7ff f8f8 	bl	8002138 <HAL_PWREx_GetVoltageRange>
 8002f48:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f4a:	4b1b      	ldr	r3, [pc, #108]	; (8002fb8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f4e:	4a1a      	ldr	r2, [pc, #104]	; (8002fb8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f54:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f5c:	d10b      	bne.n	8002f76 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b80      	cmp	r3, #128	; 0x80
 8002f62:	d913      	bls.n	8002f8c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2ba0      	cmp	r3, #160	; 0xa0
 8002f68:	d902      	bls.n	8002f70 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	613b      	str	r3, [r7, #16]
 8002f6e:	e00d      	b.n	8002f8c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f70:	2301      	movs	r3, #1
 8002f72:	613b      	str	r3, [r7, #16]
 8002f74:	e00a      	b.n	8002f8c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2b7f      	cmp	r3, #127	; 0x7f
 8002f7a:	d902      	bls.n	8002f82 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	613b      	str	r3, [r7, #16]
 8002f80:	e004      	b.n	8002f8c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b70      	cmp	r3, #112	; 0x70
 8002f86:	d101      	bne.n	8002f8c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f88:	2301      	movs	r3, #1
 8002f8a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f8c:	4b0b      	ldr	r3, [pc, #44]	; (8002fbc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f023 020f 	bic.w	r2, r3, #15
 8002f94:	4909      	ldr	r1, [pc, #36]	; (8002fbc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f9c:	4b07      	ldr	r3, [pc, #28]	; (8002fbc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 030f 	and.w	r3, r3, #15
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d001      	beq.n	8002fae <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e000      	b.n	8002fb0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3718      	adds	r7, #24
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	40022000 	.word	0x40022000

08002fc0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b087      	sub	sp, #28
 8002fc4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002fc6:	4b2d      	ldr	r3, [pc, #180]	; (800307c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	f003 0303 	and.w	r3, r3, #3
 8002fce:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2b03      	cmp	r3, #3
 8002fd4:	d00b      	beq.n	8002fee <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2b03      	cmp	r3, #3
 8002fda:	d825      	bhi.n	8003028 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d008      	beq.n	8002ff4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d11f      	bne.n	8003028 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002fe8:	4b25      	ldr	r3, [pc, #148]	; (8003080 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002fea:	613b      	str	r3, [r7, #16]
    break;
 8002fec:	e01f      	b.n	800302e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002fee:	4b24      	ldr	r3, [pc, #144]	; (8003080 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002ff0:	613b      	str	r3, [r7, #16]
    break;
 8002ff2:	e01c      	b.n	800302e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ff4:	4b21      	ldr	r3, [pc, #132]	; (800307c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0308 	and.w	r3, r3, #8
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d107      	bne.n	8003010 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003000:	4b1e      	ldr	r3, [pc, #120]	; (800307c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003002:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003006:	0a1b      	lsrs	r3, r3, #8
 8003008:	f003 030f 	and.w	r3, r3, #15
 800300c:	617b      	str	r3, [r7, #20]
 800300e:	e005      	b.n	800301c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003010:	4b1a      	ldr	r3, [pc, #104]	; (800307c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	091b      	lsrs	r3, r3, #4
 8003016:	f003 030f 	and.w	r3, r3, #15
 800301a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800301c:	4a19      	ldr	r2, [pc, #100]	; (8003084 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003024:	613b      	str	r3, [r7, #16]
    break;
 8003026:	e002      	b.n	800302e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003028:	2300      	movs	r3, #0
 800302a:	613b      	str	r3, [r7, #16]
    break;
 800302c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800302e:	4b13      	ldr	r3, [pc, #76]	; (800307c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	091b      	lsrs	r3, r3, #4
 8003034:	f003 030f 	and.w	r3, r3, #15
 8003038:	3301      	adds	r3, #1
 800303a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800303c:	4b0f      	ldr	r3, [pc, #60]	; (800307c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	0a1b      	lsrs	r3, r3, #8
 8003042:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	fb03 f202 	mul.w	r2, r3, r2
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003052:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003054:	4b09      	ldr	r3, [pc, #36]	; (800307c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	0e5b      	lsrs	r3, r3, #25
 800305a:	f003 0303 	and.w	r3, r3, #3
 800305e:	3301      	adds	r3, #1
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	fbb2 f3f3 	udiv	r3, r2, r3
 800306c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800306e:	683b      	ldr	r3, [r7, #0]
}
 8003070:	4618      	mov	r0, r3
 8003072:	371c      	adds	r7, #28
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr
 800307c:	40021000 	.word	0x40021000
 8003080:	00f42400 	.word	0x00f42400
 8003084:	08009cec 	.word	0x08009cec

08003088 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003090:	2300      	movs	r3, #0
 8003092:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003094:	2300      	movs	r3, #0
 8003096:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d040      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030a8:	2b80      	cmp	r3, #128	; 0x80
 80030aa:	d02a      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80030ac:	2b80      	cmp	r3, #128	; 0x80
 80030ae:	d825      	bhi.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x74>
 80030b0:	2b60      	cmp	r3, #96	; 0x60
 80030b2:	d026      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80030b4:	2b60      	cmp	r3, #96	; 0x60
 80030b6:	d821      	bhi.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x74>
 80030b8:	2b40      	cmp	r3, #64	; 0x40
 80030ba:	d006      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x42>
 80030bc:	2b40      	cmp	r3, #64	; 0x40
 80030be:	d81d      	bhi.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x74>
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d009      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80030c4:	2b20      	cmp	r3, #32
 80030c6:	d010      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x62>
 80030c8:	e018      	b.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030ca:	4b89      	ldr	r3, [pc, #548]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	4a88      	ldr	r2, [pc, #544]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030d4:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030d6:	e015      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3304      	adds	r3, #4
 80030dc:	2100      	movs	r1, #0
 80030de:	4618      	mov	r0, r3
 80030e0:	f001 fa82 	bl	80045e8 <RCCEx_PLLSAI1_Config>
 80030e4:	4603      	mov	r3, r0
 80030e6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030e8:	e00c      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	3320      	adds	r3, #32
 80030ee:	2100      	movs	r1, #0
 80030f0:	4618      	mov	r0, r3
 80030f2:	f001 fb6d 	bl	80047d0 <RCCEx_PLLSAI2_Config>
 80030f6:	4603      	mov	r3, r0
 80030f8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030fa:	e003      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	74fb      	strb	r3, [r7, #19]
      break;
 8003100:	e000      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003102:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003104:	7cfb      	ldrb	r3, [r7, #19]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d10b      	bne.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800310a:	4b79      	ldr	r3, [pc, #484]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800310c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003110:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003118:	4975      	ldr	r1, [pc, #468]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800311a:	4313      	orrs	r3, r2
 800311c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003120:	e001      	b.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003122:	7cfb      	ldrb	r3, [r7, #19]
 8003124:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d047      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003136:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800313a:	d030      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x116>
 800313c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003140:	d82a      	bhi.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003142:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003146:	d02a      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003148:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800314c:	d824      	bhi.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800314e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003152:	d008      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003154:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003158:	d81e      	bhi.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00a      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800315e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003162:	d010      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003164:	e018      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003166:	4b62      	ldr	r3, [pc, #392]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	4a61      	ldr	r2, [pc, #388]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800316c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003170:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003172:	e015      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3304      	adds	r3, #4
 8003178:	2100      	movs	r1, #0
 800317a:	4618      	mov	r0, r3
 800317c:	f001 fa34 	bl	80045e8 <RCCEx_PLLSAI1_Config>
 8003180:	4603      	mov	r3, r0
 8003182:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003184:	e00c      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	3320      	adds	r3, #32
 800318a:	2100      	movs	r1, #0
 800318c:	4618      	mov	r0, r3
 800318e:	f001 fb1f 	bl	80047d0 <RCCEx_PLLSAI2_Config>
 8003192:	4603      	mov	r3, r0
 8003194:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003196:	e003      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	74fb      	strb	r3, [r7, #19]
      break;
 800319c:	e000      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800319e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031a0:	7cfb      	ldrb	r3, [r7, #19]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10b      	bne.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031a6:	4b52      	ldr	r3, [pc, #328]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b4:	494e      	ldr	r1, [pc, #312]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80031bc:	e001      	b.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031be:	7cfb      	ldrb	r3, [r7, #19]
 80031c0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f000 809f 	beq.w	800330e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031d0:	2300      	movs	r3, #0
 80031d2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031d4:	4b46      	ldr	r3, [pc, #280]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d101      	bne.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80031e0:	2301      	movs	r3, #1
 80031e2:	e000      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80031e4:	2300      	movs	r3, #0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00d      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031ea:	4b41      	ldr	r3, [pc, #260]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ee:	4a40      	ldr	r2, [pc, #256]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031f4:	6593      	str	r3, [r2, #88]	; 0x58
 80031f6:	4b3e      	ldr	r3, [pc, #248]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031fe:	60bb      	str	r3, [r7, #8]
 8003200:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003202:	2301      	movs	r3, #1
 8003204:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003206:	4b3b      	ldr	r3, [pc, #236]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a3a      	ldr	r2, [pc, #232]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800320c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003210:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003212:	f7fe fac1 	bl	8001798 <HAL_GetTick>
 8003216:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003218:	e009      	b.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800321a:	f7fe fabd 	bl	8001798 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d902      	bls.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	74fb      	strb	r3, [r7, #19]
        break;
 800322c:	e005      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800322e:	4b31      	ldr	r3, [pc, #196]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003236:	2b00      	cmp	r3, #0
 8003238:	d0ef      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800323a:	7cfb      	ldrb	r3, [r7, #19]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d15b      	bne.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003240:	4b2b      	ldr	r3, [pc, #172]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003246:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800324a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d01f      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003258:	697a      	ldr	r2, [r7, #20]
 800325a:	429a      	cmp	r2, r3
 800325c:	d019      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800325e:	4b24      	ldr	r3, [pc, #144]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003264:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003268:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800326a:	4b21      	ldr	r3, [pc, #132]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800326c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003270:	4a1f      	ldr	r2, [pc, #124]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003272:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003276:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800327a:	4b1d      	ldr	r3, [pc, #116]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800327c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003280:	4a1b      	ldr	r2, [pc, #108]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003282:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003286:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800328a:	4a19      	ldr	r2, [pc, #100]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	2b00      	cmp	r3, #0
 800329a:	d016      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329c:	f7fe fa7c 	bl	8001798 <HAL_GetTick>
 80032a0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032a2:	e00b      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a4:	f7fe fa78 	bl	8001798 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d902      	bls.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	74fb      	strb	r3, [r7, #19]
            break;
 80032ba:	e006      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032bc:	4b0c      	ldr	r3, [pc, #48]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0ec      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80032ca:	7cfb      	ldrb	r3, [r7, #19]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10c      	bne.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032d0:	4b07      	ldr	r3, [pc, #28]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032e0:	4903      	ldr	r1, [pc, #12]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80032e8:	e008      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032ea:	7cfb      	ldrb	r3, [r7, #19]
 80032ec:	74bb      	strb	r3, [r7, #18]
 80032ee:	e005      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x274>
 80032f0:	40021000 	.word	0x40021000
 80032f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032f8:	7cfb      	ldrb	r3, [r7, #19]
 80032fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032fc:	7c7b      	ldrb	r3, [r7, #17]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d105      	bne.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003302:	4ba0      	ldr	r3, [pc, #640]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003306:	4a9f      	ldr	r2, [pc, #636]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003308:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800330c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00a      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800331a:	4b9a      	ldr	r3, [pc, #616]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800331c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003320:	f023 0203 	bic.w	r2, r3, #3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003328:	4996      	ldr	r1, [pc, #600]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800332a:	4313      	orrs	r3, r2
 800332c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00a      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800333c:	4b91      	ldr	r3, [pc, #580]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800333e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003342:	f023 020c 	bic.w	r2, r3, #12
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	498e      	ldr	r1, [pc, #568]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800334c:	4313      	orrs	r3, r2
 800334e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0304 	and.w	r3, r3, #4
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00a      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800335e:	4b89      	ldr	r3, [pc, #548]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003364:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336c:	4985      	ldr	r1, [pc, #532]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800336e:	4313      	orrs	r3, r2
 8003370:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0308 	and.w	r3, r3, #8
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00a      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003380:	4b80      	ldr	r3, [pc, #512]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003386:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800338e:	497d      	ldr	r1, [pc, #500]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003390:	4313      	orrs	r3, r2
 8003392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0310 	and.w	r3, r3, #16
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00a      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033a2:	4b78      	ldr	r3, [pc, #480]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b0:	4974      	ldr	r1, [pc, #464]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0320 	and.w	r3, r3, #32
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00a      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033c4:	4b6f      	ldr	r3, [pc, #444]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033d2:	496c      	ldr	r1, [pc, #432]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00a      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033e6:	4b67      	ldr	r3, [pc, #412]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033f4:	4963      	ldr	r1, [pc, #396]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00a      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003408:	4b5e      	ldr	r3, [pc, #376]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800340a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800340e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003416:	495b      	ldr	r1, [pc, #364]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003418:	4313      	orrs	r3, r2
 800341a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00a      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800342a:	4b56      	ldr	r3, [pc, #344]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800342c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003430:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003438:	4952      	ldr	r1, [pc, #328]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800343a:	4313      	orrs	r3, r2
 800343c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00a      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800344c:	4b4d      	ldr	r3, [pc, #308]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800344e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003452:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345a:	494a      	ldr	r1, [pc, #296]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800345c:	4313      	orrs	r3, r2
 800345e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00a      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800346e:	4b45      	ldr	r3, [pc, #276]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003474:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800347c:	4941      	ldr	r1, [pc, #260]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800347e:	4313      	orrs	r3, r2
 8003480:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00a      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003490:	4b3c      	ldr	r3, [pc, #240]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003492:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003496:	f023 0203 	bic.w	r2, r3, #3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800349e:	4939      	ldr	r1, [pc, #228]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d028      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034b2:	4b34      	ldr	r3, [pc, #208]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034c0:	4930      	ldr	r1, [pc, #192]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034d0:	d106      	bne.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034d2:	4b2c      	ldr	r3, [pc, #176]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	4a2b      	ldr	r2, [pc, #172]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034dc:	60d3      	str	r3, [r2, #12]
 80034de:	e011      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034e8:	d10c      	bne.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	3304      	adds	r3, #4
 80034ee:	2101      	movs	r1, #1
 80034f0:	4618      	mov	r0, r3
 80034f2:	f001 f879 	bl	80045e8 <RCCEx_PLLSAI1_Config>
 80034f6:	4603      	mov	r3, r0
 80034f8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80034fa:	7cfb      	ldrb	r3, [r7, #19]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003500:	7cfb      	ldrb	r3, [r7, #19]
 8003502:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d04d      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003514:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003518:	d108      	bne.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800351a:	4b1a      	ldr	r3, [pc, #104]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800351c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003520:	4a18      	ldr	r2, [pc, #96]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003522:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003526:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800352a:	e012      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800352c:	4b15      	ldr	r3, [pc, #84]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800352e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003532:	4a14      	ldr	r2, [pc, #80]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003534:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003538:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800353c:	4b11      	ldr	r3, [pc, #68]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800353e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003542:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800354a:	490e      	ldr	r1, [pc, #56]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800354c:	4313      	orrs	r3, r2
 800354e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003556:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800355a:	d106      	bne.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800355c:	4b09      	ldr	r3, [pc, #36]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	4a08      	ldr	r2, [pc, #32]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003562:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003566:	60d3      	str	r3, [r2, #12]
 8003568:	e020      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800356e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003572:	d109      	bne.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003574:	4b03      	ldr	r3, [pc, #12]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	4a02      	ldr	r2, [pc, #8]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800357a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800357e:	60d3      	str	r3, [r2, #12]
 8003580:	e014      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003582:	bf00      	nop
 8003584:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800358c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003590:	d10c      	bne.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	3304      	adds	r3, #4
 8003596:	2101      	movs	r1, #1
 8003598:	4618      	mov	r0, r3
 800359a:	f001 f825 	bl	80045e8 <RCCEx_PLLSAI1_Config>
 800359e:	4603      	mov	r3, r0
 80035a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035a2:	7cfb      	ldrb	r3, [r7, #19]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d001      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80035a8:	7cfb      	ldrb	r3, [r7, #19]
 80035aa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d028      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035b8:	4b7a      	ldr	r3, [pc, #488]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80035ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035c6:	4977      	ldr	r1, [pc, #476]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035d6:	d106      	bne.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035d8:	4b72      	ldr	r3, [pc, #456]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	4a71      	ldr	r2, [pc, #452]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80035de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035e2:	60d3      	str	r3, [r2, #12]
 80035e4:	e011      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035ee:	d10c      	bne.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	3304      	adds	r3, #4
 80035f4:	2101      	movs	r1, #1
 80035f6:	4618      	mov	r0, r3
 80035f8:	f000 fff6 	bl	80045e8 <RCCEx_PLLSAI1_Config>
 80035fc:	4603      	mov	r3, r0
 80035fe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003600:	7cfb      	ldrb	r3, [r7, #19]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003606:	7cfb      	ldrb	r3, [r7, #19]
 8003608:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d01e      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003616:	4b63      	ldr	r3, [pc, #396]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800361c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003626:	495f      	ldr	r1, [pc, #380]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003628:	4313      	orrs	r3, r2
 800362a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003634:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003638:	d10c      	bne.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	3304      	adds	r3, #4
 800363e:	2102      	movs	r1, #2
 8003640:	4618      	mov	r0, r3
 8003642:	f000 ffd1 	bl	80045e8 <RCCEx_PLLSAI1_Config>
 8003646:	4603      	mov	r3, r0
 8003648:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800364a:	7cfb      	ldrb	r3, [r7, #19]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003650:	7cfb      	ldrb	r3, [r7, #19]
 8003652:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00b      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003660:	4b50      	ldr	r3, [pc, #320]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003662:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003666:	f023 0204 	bic.w	r2, r3, #4
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003670:	494c      	ldr	r1, [pc, #304]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003672:	4313      	orrs	r3, r2
 8003674:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00b      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003684:	4b47      	ldr	r3, [pc, #284]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003686:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800368a:	f023 0218 	bic.w	r2, r3, #24
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003694:	4943      	ldr	r1, [pc, #268]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003696:	4313      	orrs	r3, r2
 8003698:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d035      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80036a8:	4b3e      	ldr	r3, [pc, #248]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a3d      	ldr	r2, [pc, #244]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80036ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036b4:	f7fe f870 	bl	8001798 <HAL_GetTick>
 80036b8:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036ba:	e009      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80036bc:	f7fe f86c 	bl	8001798 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d902      	bls.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	74fb      	strb	r3, [r7, #19]
        break;
 80036ce:	e005      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036d0:	4b34      	ldr	r3, [pc, #208]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1ef      	bne.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 80036dc:	7cfb      	ldrb	r3, [r7, #19]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d113      	bne.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 80036e2:	4b30      	ldr	r3, [pc, #192]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80036e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036f2:	492c      	ldr	r1, [pc, #176]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	3320      	adds	r3, #32
 80036fe:	2102      	movs	r1, #2
 8003700:	4618      	mov	r0, r3
 8003702:	f001 f865 	bl	80047d0 <RCCEx_PLLSAI2_Config>
 8003706:	4603      	mov	r3, r0
 8003708:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800370a:	7cfb      	ldrb	r3, [r7, #19]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d001      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8003710:	7cfb      	ldrb	r3, [r7, #19]
 8003712:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d01e      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8003720:	4b20      	ldr	r3, [pc, #128]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003722:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003726:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003730:	491c      	ldr	r1, [pc, #112]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003732:	4313      	orrs	r3, r2
 8003734:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800373e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003742:	d10c      	bne.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	3320      	adds	r3, #32
 8003748:	2101      	movs	r1, #1
 800374a:	4618      	mov	r0, r3
 800374c:	f001 f840 	bl	80047d0 <RCCEx_PLLSAI2_Config>
 8003750:	4603      	mov	r3, r0
 8003752:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003754:	7cfb      	ldrb	r3, [r7, #19]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 800375a:	7cfb      	ldrb	r3, [r7, #19]
 800375c:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d017      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800376a:	4b0e      	ldr	r3, [pc, #56]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800376c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003770:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800377a:	490a      	ldr	r1, [pc, #40]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800377c:	4313      	orrs	r3, r2
 800377e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003788:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800378c:	d105      	bne.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800378e:	4b05      	ldr	r3, [pc, #20]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	4a04      	ldr	r2, [pc, #16]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003794:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003798:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800379a:	7cbb      	ldrb	r3, [r7, #18]
}
 800379c:	4618      	mov	r0, r3
 800379e:	3718      	adds	r7, #24
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	40021000 	.word	0x40021000

080037a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b088      	sub	sp, #32
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80037b0:	2300      	movs	r3, #0
 80037b2:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037ba:	d13e      	bne.n	800383a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80037bc:	4bb6      	ldr	r3, [pc, #728]	; (8003a98 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80037be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037c6:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037ce:	d028      	beq.n	8003822 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037d6:	f200 86f2 	bhi.w	80045be <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037e0:	d005      	beq.n	80037ee <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037e8:	d00e      	beq.n	8003808 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80037ea:	f000 bee8 	b.w	80045be <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80037ee:	4baa      	ldr	r3, [pc, #680]	; (8003a98 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80037f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	f040 86e2 	bne.w	80045c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
        frequency = LSE_VALUE;
 80037fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003802:	61fb      	str	r3, [r7, #28]
      break;
 8003804:	f000 bedd 	b.w	80045c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003808:	4ba3      	ldr	r3, [pc, #652]	; (8003a98 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800380a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b02      	cmp	r3, #2
 8003814:	f040 86d7 	bne.w	80045c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = LSI_VALUE;
 8003818:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800381c:	61fb      	str	r3, [r7, #28]
      break;
 800381e:	f000 bed2 	b.w	80045c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003822:	4b9d      	ldr	r3, [pc, #628]	; (8003a98 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800382e:	f040 86cc 	bne.w	80045ca <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
        frequency = HSE_VALUE / 32U;
 8003832:	4b9a      	ldr	r3, [pc, #616]	; (8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003834:	61fb      	str	r3, [r7, #28]
      break;
 8003836:	f000 bec8 	b.w	80045ca <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800383a:	4b97      	ldr	r3, [pc, #604]	; (8003a98 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	f003 0303 	and.w	r3, r3, #3
 8003842:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	2b03      	cmp	r3, #3
 8003848:	d036      	beq.n	80038b8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	2b03      	cmp	r3, #3
 800384e:	d840      	bhi.n	80038d2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d003      	beq.n	800385e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	2b02      	cmp	r3, #2
 800385a:	d020      	beq.n	800389e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 800385c:	e039      	b.n	80038d2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800385e:	4b8e      	ldr	r3, [pc, #568]	; (8003a98 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b02      	cmp	r3, #2
 8003868:	d116      	bne.n	8003898 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800386a:	4b8b      	ldr	r3, [pc, #556]	; (8003a98 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0308 	and.w	r3, r3, #8
 8003872:	2b00      	cmp	r3, #0
 8003874:	d005      	beq.n	8003882 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8003876:	4b88      	ldr	r3, [pc, #544]	; (8003a98 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	091b      	lsrs	r3, r3, #4
 800387c:	f003 030f 	and.w	r3, r3, #15
 8003880:	e005      	b.n	800388e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8003882:	4b85      	ldr	r3, [pc, #532]	; (8003a98 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003884:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003888:	0a1b      	lsrs	r3, r3, #8
 800388a:	f003 030f 	and.w	r3, r3, #15
 800388e:	4a84      	ldr	r2, [pc, #528]	; (8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003894:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003896:	e01f      	b.n	80038d8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003898:	2300      	movs	r3, #0
 800389a:	61bb      	str	r3, [r7, #24]
      break;
 800389c:	e01c      	b.n	80038d8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800389e:	4b7e      	ldr	r3, [pc, #504]	; (8003a98 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038aa:	d102      	bne.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80038ac:	4b7d      	ldr	r3, [pc, #500]	; (8003aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80038ae:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80038b0:	e012      	b.n	80038d8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80038b2:	2300      	movs	r3, #0
 80038b4:	61bb      	str	r3, [r7, #24]
      break;
 80038b6:	e00f      	b.n	80038d8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80038b8:	4b77      	ldr	r3, [pc, #476]	; (8003a98 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038c4:	d102      	bne.n	80038cc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80038c6:	4b77      	ldr	r3, [pc, #476]	; (8003aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80038c8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80038ca:	e005      	b.n	80038d8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80038cc:	2300      	movs	r3, #0
 80038ce:	61bb      	str	r3, [r7, #24]
      break;
 80038d0:	e002      	b.n	80038d8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80038d2:	2300      	movs	r3, #0
 80038d4:	61bb      	str	r3, [r7, #24]
      break;
 80038d6:	bf00      	nop
    }

    switch(PeriphClk)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038de:	f000 8604 	beq.w	80044ea <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038e8:	f200 8671 	bhi.w	80045ce <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038f2:	f000 8467 	beq.w	80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038fc:	f200 8667 	bhi.w	80045ce <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003906:	f000 852f 	beq.w	8004368 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003910:	f200 865d 	bhi.w	80045ce <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800391a:	f000 8185 	beq.w	8003c28 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003924:	f200 8653 	bhi.w	80045ce <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800392e:	f000 80cb 	beq.w	8003ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003938:	f200 8649 	bhi.w	80045ce <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003942:	f000 842e 	beq.w	80041a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800394c:	f200 863f 	bhi.w	80045ce <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003956:	f000 83e2 	beq.w	800411e <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003960:	f200 8635 	bhi.w	80045ce <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800396a:	f000 80ad 	beq.w	8003ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003974:	f200 862b 	bhi.w	80045ce <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800397e:	f000 809b 	beq.w	8003ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003988:	f200 8621 	bhi.w	80045ce <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003992:	f000 8089 	beq.w	8003aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800399c:	f200 8617 	bhi.w	80045ce <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039a6:	f000 8552 	beq.w	800444e <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039b0:	f200 860d 	bhi.w	80045ce <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039ba:	f000 84fe 	beq.w	80043ba <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039c4:	f200 8603 	bhi.w	80045ce <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039ce:	f000 849f 	beq.w	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039d8:	f200 85f9 	bhi.w	80045ce <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b80      	cmp	r3, #128	; 0x80
 80039e0:	f000 846a 	beq.w	80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b80      	cmp	r3, #128	; 0x80
 80039e8:	f200 85f1 	bhi.w	80045ce <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b20      	cmp	r3, #32
 80039f0:	d84c      	bhi.n	8003a8c <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 85ea 	beq.w	80045ce <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	3b01      	subs	r3, #1
 80039fe:	2b1f      	cmp	r3, #31
 8003a00:	f200 85e5 	bhi.w	80045ce <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003a04:	a201      	add	r2, pc, #4	; (adr r2, 8003a0c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8003a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a0a:	bf00      	nop
 8003a0c:	08003e1d 	.word	0x08003e1d
 8003a10:	08003e8b 	.word	0x08003e8b
 8003a14:	080045cf 	.word	0x080045cf
 8003a18:	08003f1f 	.word	0x08003f1f
 8003a1c:	080045cf 	.word	0x080045cf
 8003a20:	080045cf 	.word	0x080045cf
 8003a24:	080045cf 	.word	0x080045cf
 8003a28:	08003f97 	.word	0x08003f97
 8003a2c:	080045cf 	.word	0x080045cf
 8003a30:	080045cf 	.word	0x080045cf
 8003a34:	080045cf 	.word	0x080045cf
 8003a38:	080045cf 	.word	0x080045cf
 8003a3c:	080045cf 	.word	0x080045cf
 8003a40:	080045cf 	.word	0x080045cf
 8003a44:	080045cf 	.word	0x080045cf
 8003a48:	0800401b 	.word	0x0800401b
 8003a4c:	080045cf 	.word	0x080045cf
 8003a50:	080045cf 	.word	0x080045cf
 8003a54:	080045cf 	.word	0x080045cf
 8003a58:	080045cf 	.word	0x080045cf
 8003a5c:	080045cf 	.word	0x080045cf
 8003a60:	080045cf 	.word	0x080045cf
 8003a64:	080045cf 	.word	0x080045cf
 8003a68:	080045cf 	.word	0x080045cf
 8003a6c:	080045cf 	.word	0x080045cf
 8003a70:	080045cf 	.word	0x080045cf
 8003a74:	080045cf 	.word	0x080045cf
 8003a78:	080045cf 	.word	0x080045cf
 8003a7c:	080045cf 	.word	0x080045cf
 8003a80:	080045cf 	.word	0x080045cf
 8003a84:	080045cf 	.word	0x080045cf
 8003a88:	0800409d 	.word	0x0800409d
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b40      	cmp	r3, #64	; 0x40
 8003a90:	f000 83e6 	beq.w	8004260 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8003a94:	f000 bd9b 	b.w	80045ce <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	0007a120 	.word	0x0007a120
 8003aa0:	08009cec 	.word	0x08009cec
 8003aa4:	00f42400 	.word	0x00f42400
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8003aa8:	69b9      	ldr	r1, [r7, #24]
 8003aaa:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003aae:	f000 ff83 	bl	80049b8 <RCCEx_GetSAIxPeriphCLKFreq>
 8003ab2:	61f8      	str	r0, [r7, #28]
      break;
 8003ab4:	f000 bd8e 	b.w	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8003ab8:	69b9      	ldr	r1, [r7, #24]
 8003aba:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003abe:	f000 ff7b 	bl	80049b8 <RCCEx_GetSAIxPeriphCLKFreq>
 8003ac2:	61f8      	str	r0, [r7, #28]
      break;
 8003ac4:	f000 bd86 	b.w	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8003ac8:	4b9a      	ldr	r3, [pc, #616]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ace:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8003ad2:	60fb      	str	r3, [r7, #12]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003ada:	d015      	beq.n	8003b08 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003ae2:	f200 8092 	bhi.w	8003c0a <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003aec:	d029      	beq.n	8003b42 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003af4:	f200 8089 	bhi.w	8003c0a <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d07b      	beq.n	8003bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b04:	d04a      	beq.n	8003b9c <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
          break;
 8003b06:	e080      	b.n	8003c0a <HAL_RCCEx_GetPeriphCLKFreq+0x462>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003b08:	4b8a      	ldr	r3, [pc, #552]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d17d      	bne.n	8003c10 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003b14:	4b87      	ldr	r3, [pc, #540]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0308 	and.w	r3, r3, #8
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d005      	beq.n	8003b2c <HAL_RCCEx_GetPeriphCLKFreq+0x384>
 8003b20:	4b84      	ldr	r3, [pc, #528]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	091b      	lsrs	r3, r3, #4
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	e005      	b.n	8003b38 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 8003b2c:	4b81      	ldr	r3, [pc, #516]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003b2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b32:	0a1b      	lsrs	r3, r3, #8
 8003b34:	f003 030f 	and.w	r3, r3, #15
 8003b38:	4a7f      	ldr	r2, [pc, #508]	; (8003d38 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8003b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b3e:	61fb      	str	r3, [r7, #28]
          break;
 8003b40:	e066      	b.n	8003c10 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003b42:	4b7c      	ldr	r3, [pc, #496]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b4e:	d162      	bne.n	8003c16 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8003b50:	4b78      	ldr	r3, [pc, #480]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b5c:	d15b      	bne.n	8003c16 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003b5e:	4b75      	ldr	r3, [pc, #468]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	0a1b      	lsrs	r3, r3, #8
 8003b64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b68:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	68ba      	ldr	r2, [r7, #8]
 8003b6e:	fb03 f202 	mul.w	r2, r3, r2
 8003b72:	4b70      	ldr	r3, [pc, #448]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	091b      	lsrs	r3, r3, #4
 8003b78:	f003 030f 	and.w	r3, r3, #15
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b82:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8003b84:	4b6b      	ldr	r3, [pc, #428]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	0d5b      	lsrs	r3, r3, #21
 8003b8a:	f003 0303 	and.w	r3, r3, #3
 8003b8e:	3301      	adds	r3, #1
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b98:	61fb      	str	r3, [r7, #28]
          break;
 8003b9a:	e03c      	b.n	8003c16 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8003b9c:	4b65      	ldr	r3, [pc, #404]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ba4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ba8:	d138      	bne.n	8003c1c <HAL_RCCEx_GetPeriphCLKFreq+0x474>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8003baa:	4b62      	ldr	r3, [pc, #392]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bb6:	d131      	bne.n	8003c1c <HAL_RCCEx_GetPeriphCLKFreq+0x474>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003bb8:	4b5e      	ldr	r3, [pc, #376]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	0a1b      	lsrs	r3, r3, #8
 8003bbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bc2:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	fb03 f202 	mul.w	r2, r3, r2
 8003bcc:	4b59      	ldr	r3, [pc, #356]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	091b      	lsrs	r3, r3, #4
 8003bd2:	f003 030f 	and.w	r3, r3, #15
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bdc:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8003bde:	4b55      	ldr	r3, [pc, #340]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	0d5b      	lsrs	r3, r3, #21
 8003be4:	f003 0303 	and.w	r3, r3, #3
 8003be8:	3301      	adds	r3, #1
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf2:	61fb      	str	r3, [r7, #28]
          break;
 8003bf4:	e012      	b.n	8003c1c <HAL_RCCEx_GetPeriphCLKFreq+0x474>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8003bf6:	4b4f      	ldr	r3, [pc, #316]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003bf8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d10e      	bne.n	8003c22 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI48_VALUE;
 8003c04:	4b4d      	ldr	r3, [pc, #308]	; (8003d3c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8003c06:	61fb      	str	r3, [r7, #28]
          break;
 8003c08:	e00b      	b.n	8003c22 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          break;
 8003c0a:	bf00      	nop
 8003c0c:	f000 bce2 	b.w	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003c10:	bf00      	nop
 8003c12:	f000 bcdf 	b.w	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003c16:	bf00      	nop
 8003c18:	f000 bcdc 	b.w	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003c1c:	bf00      	nop
 8003c1e:	f000 bcd9 	b.w	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003c22:	bf00      	nop
        break;
 8003c24:	f000 bcd6 	b.w	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8003c28:	4b42      	ldr	r3, [pc, #264]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c36:	d13d      	bne.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003c38:	4b3e      	ldr	r3, [pc, #248]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c44:	f040 84c5 	bne.w	80045d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8003c48:	4b3a      	ldr	r3, [pc, #232]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c54:	f040 84bd 	bne.w	80045d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003c58:	4b36      	ldr	r3, [pc, #216]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	0a1b      	lsrs	r3, r3, #8
 8003c5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c62:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	68ba      	ldr	r2, [r7, #8]
 8003c68:	fb03 f202 	mul.w	r2, r3, r2
 8003c6c:	4b31      	ldr	r3, [pc, #196]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	091b      	lsrs	r3, r3, #4
 8003c72:	f003 030f 	and.w	r3, r3, #15
 8003c76:	3301      	adds	r3, #1
 8003c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c7c:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8003c7e:	4b2d      	ldr	r3, [pc, #180]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	0edb      	lsrs	r3, r3, #27
 8003c84:	f003 031f 	and.w	r3, r3, #31
 8003c88:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10a      	bne.n	8003ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8003c90:	4b28      	ldr	r3, [pc, #160]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d002      	beq.n	8003ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
                pllp = 17U;
 8003c9c:	2311      	movs	r3, #17
 8003c9e:	617b      	str	r3, [r7, #20]
 8003ca0:	e001      	b.n	8003ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 7U;
 8003ca2:	2307      	movs	r3, #7
 8003ca4:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8003ca6:	69ba      	ldr	r2, [r7, #24]
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cae:	61fb      	str	r3, [r7, #28]
      break;
 8003cb0:	f000 bc8f 	b.w	80045d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8003cb4:	4b1f      	ldr	r3, [pc, #124]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cba:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8003cbe:	60fb      	str	r3, [r7, #12]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003cc6:	d016      	beq.n	8003cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003cce:	f200 809b 	bhi.w	8003e08 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cd8:	d032      	beq.n	8003d40 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ce0:	f200 8092 	bhi.w	8003e08 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f000 8084 	beq.w	8003df4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cf2:	d052      	beq.n	8003d9a <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
          break;
 8003cf4:	e088      	b.n	8003e08 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003cf6:	4b0f      	ldr	r3, [pc, #60]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	f040 8084 	bne.w	8003e0c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003d04:	4b0b      	ldr	r3, [pc, #44]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0308 	and.w	r3, r3, #8
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d005      	beq.n	8003d1c <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 8003d10:	4b08      	ldr	r3, [pc, #32]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	091b      	lsrs	r3, r3, #4
 8003d16:	f003 030f 	and.w	r3, r3, #15
 8003d1a:	e005      	b.n	8003d28 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8003d1c:	4b05      	ldr	r3, [pc, #20]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d22:	0a1b      	lsrs	r3, r3, #8
 8003d24:	f003 030f 	and.w	r3, r3, #15
 8003d28:	4a03      	ldr	r2, [pc, #12]	; (8003d38 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8003d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d2e:	61fb      	str	r3, [r7, #28]
          break;
 8003d30:	e06c      	b.n	8003e0c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8003d32:	bf00      	nop
 8003d34:	40021000 	.word	0x40021000
 8003d38:	08009cec 	.word	0x08009cec
 8003d3c:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003d40:	4ba5      	ldr	r3, [pc, #660]	; (8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d4c:	d160      	bne.n	8003e10 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8003d4e:	4ba2      	ldr	r3, [pc, #648]	; (8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d5a:	d159      	bne.n	8003e10 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003d5c:	4b9e      	ldr	r3, [pc, #632]	; (8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	0a1b      	lsrs	r3, r3, #8
 8003d62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d66:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	68ba      	ldr	r2, [r7, #8]
 8003d6c:	fb03 f202 	mul.w	r2, r3, r2
 8003d70:	4b99      	ldr	r3, [pc, #612]	; (8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	091b      	lsrs	r3, r3, #4
 8003d76:	f003 030f 	and.w	r3, r3, #15
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d80:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8003d82:	4b95      	ldr	r3, [pc, #596]	; (8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	0d5b      	lsrs	r3, r3, #21
 8003d88:	f003 0303 	and.w	r3, r3, #3
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	005b      	lsls	r3, r3, #1
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d96:	61fb      	str	r3, [r7, #28]
          break;
 8003d98:	e03a      	b.n	8003e10 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8003d9a:	4b8f      	ldr	r3, [pc, #572]	; (8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003da2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003da6:	d135      	bne.n	8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8003da8:	4b8b      	ldr	r3, [pc, #556]	; (8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003db0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003db4:	d12e      	bne.n	8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003db6:	4b88      	ldr	r3, [pc, #544]	; (8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	0a1b      	lsrs	r3, r3, #8
 8003dbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dc0:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	68ba      	ldr	r2, [r7, #8]
 8003dc6:	fb03 f202 	mul.w	r2, r3, r2
 8003dca:	4b83      	ldr	r3, [pc, #524]	; (8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	091b      	lsrs	r3, r3, #4
 8003dd0:	f003 030f 	and.w	r3, r3, #15
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dda:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8003ddc:	4b7e      	ldr	r3, [pc, #504]	; (8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	0d5b      	lsrs	r3, r3, #21
 8003de2:	f003 0303 	and.w	r3, r3, #3
 8003de6:	3301      	adds	r3, #1
 8003de8:	005b      	lsls	r3, r3, #1
 8003dea:	69ba      	ldr	r2, [r7, #24]
 8003dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df0:	61fb      	str	r3, [r7, #28]
          break;
 8003df2:	e00f      	b.n	8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8003df4:	4b78      	ldr	r3, [pc, #480]	; (8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003df6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d10a      	bne.n	8003e18 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            frequency = HSI48_VALUE;
 8003e02:	4b76      	ldr	r3, [pc, #472]	; (8003fdc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8003e04:	61fb      	str	r3, [r7, #28]
          break;
 8003e06:	e007      	b.n	8003e18 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          break;
 8003e08:	bf00      	nop
 8003e0a:	e3e2      	b.n	80045d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8003e0c:	bf00      	nop
 8003e0e:	e3e0      	b.n	80045d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8003e10:	bf00      	nop
 8003e12:	e3de      	b.n	80045d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8003e14:	bf00      	nop
 8003e16:	e3dc      	b.n	80045d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8003e18:	bf00      	nop
      break;
 8003e1a:	e3da      	b.n	80045d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003e1c:	4b6e      	ldr	r3, [pc, #440]	; (8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e22:	f003 0303 	and.w	r3, r3, #3
 8003e26:	60fb      	str	r3, [r7, #12]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2b03      	cmp	r3, #3
 8003e2c:	d827      	bhi.n	8003e7e <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
 8003e2e:	a201      	add	r2, pc, #4	; (adr r2, 8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 8003e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e34:	08003e45 	.word	0x08003e45
 8003e38:	08003e4d 	.word	0x08003e4d
 8003e3c:	08003e55 	.word	0x08003e55
 8003e40:	08003e69 	.word	0x08003e69
          frequency = HAL_RCC_GetPCLK2Freq();
 8003e44:	f7ff f84c 	bl	8002ee0 <HAL_RCC_GetPCLK2Freq>
 8003e48:	61f8      	str	r0, [r7, #28]
          break;
 8003e4a:	e01d      	b.n	8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          frequency = HAL_RCC_GetSysClockFreq();
 8003e4c:	f7fe ff9c 	bl	8002d88 <HAL_RCC_GetSysClockFreq>
 8003e50:	61f8      	str	r0, [r7, #28]
          break;
 8003e52:	e019      	b.n	8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003e54:	4b60      	ldr	r3, [pc, #384]	; (8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e60:	d10f      	bne.n	8003e82 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
            frequency = HSI_VALUE;
 8003e62:	4b5f      	ldr	r3, [pc, #380]	; (8003fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8003e64:	61fb      	str	r3, [r7, #28]
          break;
 8003e66:	e00c      	b.n	8003e82 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003e68:	4b5b      	ldr	r3, [pc, #364]	; (8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d107      	bne.n	8003e86 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = LSE_VALUE;
 8003e76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e7a:	61fb      	str	r3, [r7, #28]
          break;
 8003e7c:	e003      	b.n	8003e86 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          break;
 8003e7e:	bf00      	nop
 8003e80:	e3a8      	b.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003e82:	bf00      	nop
 8003e84:	e3a6      	b.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003e86:	bf00      	nop
        break;
 8003e88:	e3a4      	b.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8003e8a:	4b53      	ldr	r3, [pc, #332]	; (8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e90:	f003 030c 	and.w	r3, r3, #12
 8003e94:	60fb      	str	r3, [r7, #12]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2b0c      	cmp	r3, #12
 8003e9a:	d83a      	bhi.n	8003f12 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 8003e9c:	a201      	add	r2, pc, #4	; (adr r2, 8003ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>)
 8003e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea2:	bf00      	nop
 8003ea4:	08003ed9 	.word	0x08003ed9
 8003ea8:	08003f13 	.word	0x08003f13
 8003eac:	08003f13 	.word	0x08003f13
 8003eb0:	08003f13 	.word	0x08003f13
 8003eb4:	08003ee1 	.word	0x08003ee1
 8003eb8:	08003f13 	.word	0x08003f13
 8003ebc:	08003f13 	.word	0x08003f13
 8003ec0:	08003f13 	.word	0x08003f13
 8003ec4:	08003ee9 	.word	0x08003ee9
 8003ec8:	08003f13 	.word	0x08003f13
 8003ecc:	08003f13 	.word	0x08003f13
 8003ed0:	08003f13 	.word	0x08003f13
 8003ed4:	08003efd 	.word	0x08003efd
          frequency = HAL_RCC_GetPCLK1Freq();
 8003ed8:	f7fe ffec 	bl	8002eb4 <HAL_RCC_GetPCLK1Freq>
 8003edc:	61f8      	str	r0, [r7, #28]
          break;
 8003ede:	e01d      	b.n	8003f1c <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          frequency = HAL_RCC_GetSysClockFreq();
 8003ee0:	f7fe ff52 	bl	8002d88 <HAL_RCC_GetSysClockFreq>
 8003ee4:	61f8      	str	r0, [r7, #28]
          break;
 8003ee6:	e019      	b.n	8003f1c <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003ee8:	4b3b      	ldr	r3, [pc, #236]	; (8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ef0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ef4:	d10f      	bne.n	8003f16 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
            frequency = HSI_VALUE;
 8003ef6:	4b3a      	ldr	r3, [pc, #232]	; (8003fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8003ef8:	61fb      	str	r3, [r7, #28]
          break;
 8003efa:	e00c      	b.n	8003f16 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003efc:	4b36      	ldr	r3, [pc, #216]	; (8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d107      	bne.n	8003f1a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = LSE_VALUE;
 8003f0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f0e:	61fb      	str	r3, [r7, #28]
          break;
 8003f10:	e003      	b.n	8003f1a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          break;
 8003f12:	bf00      	nop
 8003f14:	e35e      	b.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003f16:	bf00      	nop
 8003f18:	e35c      	b.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003f1a:	bf00      	nop
        break;
 8003f1c:	e35a      	b.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8003f1e:	4b2e      	ldr	r3, [pc, #184]	; (8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f24:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f28:	60fb      	str	r3, [r7, #12]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2b30      	cmp	r3, #48	; 0x30
 8003f2e:	d021      	beq.n	8003f74 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2b30      	cmp	r3, #48	; 0x30
 8003f34:	d829      	bhi.n	8003f8a <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2b20      	cmp	r3, #32
 8003f3a:	d011      	beq.n	8003f60 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2b20      	cmp	r3, #32
 8003f40:	d823      	bhi.n	8003f8a <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d003      	beq.n	8003f50 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2b10      	cmp	r3, #16
 8003f4c:	d004      	beq.n	8003f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
          break;
 8003f4e:	e01c      	b.n	8003f8a <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003f50:	f7fe ffb0 	bl	8002eb4 <HAL_RCC_GetPCLK1Freq>
 8003f54:	61f8      	str	r0, [r7, #28]
          break;
 8003f56:	e01d      	b.n	8003f94 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          frequency = HAL_RCC_GetSysClockFreq();
 8003f58:	f7fe ff16 	bl	8002d88 <HAL_RCC_GetSysClockFreq>
 8003f5c:	61f8      	str	r0, [r7, #28]
          break;
 8003f5e:	e019      	b.n	8003f94 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003f60:	4b1d      	ldr	r3, [pc, #116]	; (8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f6c:	d10f      	bne.n	8003f8e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
            frequency = HSI_VALUE;
 8003f6e:	4b1c      	ldr	r3, [pc, #112]	; (8003fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8003f70:	61fb      	str	r3, [r7, #28]
          break;
 8003f72:	e00c      	b.n	8003f8e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003f74:	4b18      	ldr	r3, [pc, #96]	; (8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d107      	bne.n	8003f92 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = LSE_VALUE;
 8003f82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f86:	61fb      	str	r3, [r7, #28]
          break;
 8003f88:	e003      	b.n	8003f92 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          break;
 8003f8a:	bf00      	nop
 8003f8c:	e322      	b.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003f8e:	bf00      	nop
 8003f90:	e320      	b.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003f92:	bf00      	nop
        break;
 8003f94:	e31e      	b.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8003f96:	4b10      	ldr	r3, [pc, #64]	; (8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003fa0:	60fb      	str	r3, [r7, #12]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2bc0      	cmp	r3, #192	; 0xc0
 8003fa6:	d027      	beq.n	8003ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2bc0      	cmp	r3, #192	; 0xc0
 8003fac:	d82f      	bhi.n	800400e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2b80      	cmp	r3, #128	; 0x80
 8003fb2:	d017      	beq.n	8003fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2b80      	cmp	r3, #128	; 0x80
 8003fb8:	d829      	bhi.n	800400e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d003      	beq.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2b40      	cmp	r3, #64	; 0x40
 8003fc4:	d004      	beq.n	8003fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
          break;
 8003fc6:	e022      	b.n	800400e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003fc8:	f7fe ff74 	bl	8002eb4 <HAL_RCC_GetPCLK1Freq>
 8003fcc:	61f8      	str	r0, [r7, #28]
          break;
 8003fce:	e023      	b.n	8004018 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          frequency = HAL_RCC_GetSysClockFreq();
 8003fd0:	f7fe feda 	bl	8002d88 <HAL_RCC_GetSysClockFreq>
 8003fd4:	61f8      	str	r0, [r7, #28]
          break;
 8003fd6:	e01f      	b.n	8004018 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8003fd8:	40021000 	.word	0x40021000
 8003fdc:	02dc6c00 	.word	0x02dc6c00
 8003fe0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003fe4:	4b9b      	ldr	r3, [pc, #620]	; (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ff0:	d10f      	bne.n	8004012 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
            frequency = HSI_VALUE;
 8003ff2:	4b99      	ldr	r3, [pc, #612]	; (8004258 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8003ff4:	61fb      	str	r3, [r7, #28]
          break;
 8003ff6:	e00c      	b.n	8004012 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003ff8:	4b96      	ldr	r3, [pc, #600]	; (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8003ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b02      	cmp	r3, #2
 8004004:	d107      	bne.n	8004016 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = LSE_VALUE;
 8004006:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800400a:	61fb      	str	r3, [r7, #28]
          break;
 800400c:	e003      	b.n	8004016 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 800400e:	bf00      	nop
 8004010:	e2e0      	b.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004012:	bf00      	nop
 8004014:	e2de      	b.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004016:	bf00      	nop
        break;
 8004018:	e2dc      	b.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800401a:	4b8e      	ldr	r3, [pc, #568]	; (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800401c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004020:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004024:	60fb      	str	r3, [r7, #12]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800402c:	d025      	beq.n	800407a <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004034:	d82c      	bhi.n	8004090 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800403c:	d013      	beq.n	8004066 <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004044:	d824      	bhi.n	8004090 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d004      	beq.n	8004056 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004052:	d004      	beq.n	800405e <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
          break;
 8004054:	e01c      	b.n	8004090 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004056:	f7fe ff2d 	bl	8002eb4 <HAL_RCC_GetPCLK1Freq>
 800405a:	61f8      	str	r0, [r7, #28]
          break;
 800405c:	e01d      	b.n	800409a <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 800405e:	f7fe fe93 	bl	8002d88 <HAL_RCC_GetSysClockFreq>
 8004062:	61f8      	str	r0, [r7, #28]
          break;
 8004064:	e019      	b.n	800409a <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004066:	4b7b      	ldr	r3, [pc, #492]	; (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800406e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004072:	d10f      	bne.n	8004094 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
            frequency = HSI_VALUE;
 8004074:	4b78      	ldr	r3, [pc, #480]	; (8004258 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004076:	61fb      	str	r3, [r7, #28]
          break;
 8004078:	e00c      	b.n	8004094 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800407a:	4b76      	ldr	r3, [pc, #472]	; (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800407c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b02      	cmp	r3, #2
 8004086:	d107      	bne.n	8004098 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = LSE_VALUE;
 8004088:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800408c:	61fb      	str	r3, [r7, #28]
          break;
 800408e:	e003      	b.n	8004098 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 8004090:	bf00      	nop
 8004092:	e29f      	b.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004094:	bf00      	nop
 8004096:	e29d      	b.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004098:	bf00      	nop
        break;
 800409a:	e29b      	b.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800409c:	4b6d      	ldr	r3, [pc, #436]	; (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800409e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80040a6:	60fb      	str	r3, [r7, #12]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040ae:	d025      	beq.n	80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x954>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040b6:	d82c      	bhi.n	8004112 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040be:	d013      	beq.n	80040e8 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040c6:	d824      	bhi.n	8004112 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d004      	beq.n	80040d8 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040d4:	d004      	beq.n	80040e0 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
          break;
 80040d6:	e01c      	b.n	8004112 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80040d8:	f7fe feec 	bl	8002eb4 <HAL_RCC_GetPCLK1Freq>
 80040dc:	61f8      	str	r0, [r7, #28]
          break;
 80040de:	e01d      	b.n	800411c <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = HAL_RCC_GetSysClockFreq();
 80040e0:	f7fe fe52 	bl	8002d88 <HAL_RCC_GetSysClockFreq>
 80040e4:	61f8      	str	r0, [r7, #28]
          break;
 80040e6:	e019      	b.n	800411c <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80040e8:	4b5a      	ldr	r3, [pc, #360]	; (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040f4:	d10f      	bne.n	8004116 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
            frequency = HSI_VALUE;
 80040f6:	4b58      	ldr	r3, [pc, #352]	; (8004258 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80040f8:	61fb      	str	r3, [r7, #28]
          break;
 80040fa:	e00c      	b.n	8004116 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80040fc:	4b55      	ldr	r3, [pc, #340]	; (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80040fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b02      	cmp	r3, #2
 8004108:	d107      	bne.n	800411a <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = LSE_VALUE;
 800410a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800410e:	61fb      	str	r3, [r7, #28]
          break;
 8004110:	e003      	b.n	800411a <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          break;
 8004112:	bf00      	nop
 8004114:	e25e      	b.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004116:	bf00      	nop
 8004118:	e25c      	b.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800411a:	bf00      	nop
        break;
 800411c:	e25a      	b.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800411e:	4b4d      	ldr	r3, [pc, #308]	; (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004124:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004128:	60fb      	str	r3, [r7, #12]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004130:	d007      	beq.n	8004142 <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004138:	d12f      	bne.n	800419a <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          frequency = HAL_RCC_GetSysClockFreq();
 800413a:	f7fe fe25 	bl	8002d88 <HAL_RCC_GetSysClockFreq>
 800413e:	61f8      	str	r0, [r7, #28]
          break;
 8004140:	e02e      	b.n	80041a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8004142:	4b44      	ldr	r3, [pc, #272]	; (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800414a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800414e:	d126      	bne.n	800419e <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
 8004150:	4b40      	ldr	r3, [pc, #256]	; (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d020      	beq.n	800419e <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800415c:	4b3d      	ldr	r3, [pc, #244]	; (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	0a1b      	lsrs	r3, r3, #8
 8004162:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004166:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	68ba      	ldr	r2, [r7, #8]
 800416c:	fb03 f202 	mul.w	r2, r3, r2
 8004170:	4b38      	ldr	r3, [pc, #224]	; (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	091b      	lsrs	r3, r3, #4
 8004176:	f003 030f 	and.w	r3, r3, #15
 800417a:	3301      	adds	r3, #1
 800417c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004180:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8004182:	4b34      	ldr	r3, [pc, #208]	; (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	0e5b      	lsrs	r3, r3, #25
 8004188:	f003 0303 	and.w	r3, r3, #3
 800418c:	3301      	adds	r3, #1
 800418e:	005b      	lsls	r3, r3, #1
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	fbb2 f3f3 	udiv	r3, r2, r3
 8004196:	61fb      	str	r3, [r7, #28]
          break;
 8004198:	e001      	b.n	800419e <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          break;
 800419a:	bf00      	nop
 800419c:	e21a      	b.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800419e:	bf00      	nop
        break;
 80041a0:	e218      	b.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80041a2:	4b2c      	ldr	r3, [pc, #176]	; (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80041a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041a8:	f003 0304 	and.w	r3, r3, #4
 80041ac:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d103      	bne.n	80041bc <HAL_RCCEx_GetPeriphCLKFreq+0xa14>
          frequency = HAL_RCC_GetPCLK2Freq();
 80041b4:	f7fe fe94 	bl	8002ee0 <HAL_RCC_GetPCLK2Freq>
 80041b8:	61f8      	str	r0, [r7, #28]
        break;
 80041ba:	e20b      	b.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          frequency = HAL_RCC_GetSysClockFreq();
 80041bc:	f7fe fde4 	bl	8002d88 <HAL_RCC_GetSysClockFreq>
 80041c0:	61f8      	str	r0, [r7, #28]
        break;
 80041c2:	e207      	b.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 80041c4:	4b23      	ldr	r3, [pc, #140]	; (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80041c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041ca:	f003 0318 	and.w	r3, r3, #24
 80041ce:	60fb      	str	r3, [r7, #12]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2b10      	cmp	r3, #16
 80041d4:	d010      	beq.n	80041f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2b10      	cmp	r3, #16
 80041da:	d834      	bhi.n	8004246 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d003      	beq.n	80041ea <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2b08      	cmp	r3, #8
 80041e6:	d024      	beq.n	8004232 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          break;
 80041e8:	e02d      	b.n	8004246 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80041ea:	69b9      	ldr	r1, [r7, #24]
 80041ec:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80041f0:	f000 fbe2 	bl	80049b8 <RCCEx_GetSAIxPeriphCLKFreq>
 80041f4:	61f8      	str	r0, [r7, #28]
          break;
 80041f6:	e02b      	b.n	8004250 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80041f8:	4b16      	ldr	r3, [pc, #88]	; (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0302 	and.w	r3, r3, #2
 8004200:	2b02      	cmp	r3, #2
 8004202:	d122      	bne.n	800424a <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004204:	4b13      	ldr	r3, [pc, #76]	; (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0308 	and.w	r3, r3, #8
 800420c:	2b00      	cmp	r3, #0
 800420e:	d005      	beq.n	800421c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8004210:	4b10      	ldr	r3, [pc, #64]	; (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	091b      	lsrs	r3, r3, #4
 8004216:	f003 030f 	and.w	r3, r3, #15
 800421a:	e005      	b.n	8004228 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 800421c:	4b0d      	ldr	r3, [pc, #52]	; (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800421e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004222:	0a1b      	lsrs	r3, r3, #8
 8004224:	f003 030f 	and.w	r3, r3, #15
 8004228:	4a0c      	ldr	r2, [pc, #48]	; (800425c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800422a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800422e:	61fb      	str	r3, [r7, #28]
          break;
 8004230:	e00b      	b.n	800424a <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004232:	4b08      	ldr	r3, [pc, #32]	; (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800423a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800423e:	d106      	bne.n	800424e <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = HSI_VALUE;
 8004240:	4b05      	ldr	r3, [pc, #20]	; (8004258 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004242:	61fb      	str	r3, [r7, #28]
          break;
 8004244:	e003      	b.n	800424e <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          break;
 8004246:	bf00      	nop
 8004248:	e1c4      	b.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800424a:	bf00      	nop
 800424c:	e1c2      	b.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800424e:	bf00      	nop
        break;
 8004250:	e1c0      	b.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 8004252:	bf00      	nop
 8004254:	40021000 	.word	0x40021000
 8004258:	00f42400 	.word	0x00f42400
 800425c:	08009cec 	.word	0x08009cec
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004260:	4b96      	ldr	r3, [pc, #600]	; (80044bc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004266:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800426a:	60fb      	str	r3, [r7, #12]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004272:	d013      	beq.n	800429c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800427a:	d819      	bhi.n	80042b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d004      	beq.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004288:	d004      	beq.n	8004294 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
          break;
 800428a:	e011      	b.n	80042b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          frequency = HAL_RCC_GetPCLK1Freq();
 800428c:	f7fe fe12 	bl	8002eb4 <HAL_RCC_GetPCLK1Freq>
 8004290:	61f8      	str	r0, [r7, #28]
          break;
 8004292:	e010      	b.n	80042b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8004294:	f7fe fd78 	bl	8002d88 <HAL_RCC_GetSysClockFreq>
 8004298:	61f8      	str	r0, [r7, #28]
          break;
 800429a:	e00c      	b.n	80042b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800429c:	4b87      	ldr	r3, [pc, #540]	; (80044bc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042a8:	d104      	bne.n	80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = HSI_VALUE;
 80042aa:	4b85      	ldr	r3, [pc, #532]	; (80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80042ac:	61fb      	str	r3, [r7, #28]
          break;
 80042ae:	e001      	b.n	80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 80042b0:	bf00      	nop
 80042b2:	e18f      	b.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80042b4:	bf00      	nop
        break;
 80042b6:	e18d      	b.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80042b8:	4b80      	ldr	r3, [pc, #512]	; (80044bc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80042ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042be:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80042c2:	60fb      	str	r3, [r7, #12]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042ca:	d013      	beq.n	80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042d2:	d819      	bhi.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d004      	beq.n	80042e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042e0:	d004      	beq.n	80042ec <HAL_RCCEx_GetPeriphCLKFreq+0xb44>
          break;
 80042e2:	e011      	b.n	8004308 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          frequency = HAL_RCC_GetPCLK1Freq();
 80042e4:	f7fe fde6 	bl	8002eb4 <HAL_RCC_GetPCLK1Freq>
 80042e8:	61f8      	str	r0, [r7, #28]
          break;
 80042ea:	e010      	b.n	800430e <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          frequency = HAL_RCC_GetSysClockFreq();
 80042ec:	f7fe fd4c 	bl	8002d88 <HAL_RCC_GetSysClockFreq>
 80042f0:	61f8      	str	r0, [r7, #28]
          break;
 80042f2:	e00c      	b.n	800430e <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80042f4:	4b71      	ldr	r3, [pc, #452]	; (80044bc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004300:	d104      	bne.n	800430c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
            frequency = HSI_VALUE;
 8004302:	4b6f      	ldr	r3, [pc, #444]	; (80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004304:	61fb      	str	r3, [r7, #28]
          break;
 8004306:	e001      	b.n	800430c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          break;
 8004308:	bf00      	nop
 800430a:	e163      	b.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800430c:	bf00      	nop
        break;
 800430e:	e161      	b.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004310:	4b6a      	ldr	r3, [pc, #424]	; (80044bc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004316:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800431a:	60fb      	str	r3, [r7, #12]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004322:	d013      	beq.n	800434c <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800432a:	d819      	bhi.n	8004360 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d004      	beq.n	800433c <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004338:	d004      	beq.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
          break;
 800433a:	e011      	b.n	8004360 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
          frequency = HAL_RCC_GetPCLK1Freq();
 800433c:	f7fe fdba 	bl	8002eb4 <HAL_RCC_GetPCLK1Freq>
 8004340:	61f8      	str	r0, [r7, #28]
          break;
 8004342:	e010      	b.n	8004366 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          frequency = HAL_RCC_GetSysClockFreq();
 8004344:	f7fe fd20 	bl	8002d88 <HAL_RCC_GetSysClockFreq>
 8004348:	61f8      	str	r0, [r7, #28]
          break;
 800434a:	e00c      	b.n	8004366 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800434c:	4b5b      	ldr	r3, [pc, #364]	; (80044bc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004358:	d104      	bne.n	8004364 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
            frequency = HSI_VALUE;
 800435a:	4b59      	ldr	r3, [pc, #356]	; (80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800435c:	61fb      	str	r3, [r7, #28]
          break;
 800435e:	e001      	b.n	8004364 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          break;
 8004360:	bf00      	nop
 8004362:	e137      	b.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004364:	bf00      	nop
        break;
 8004366:	e135      	b.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8004368:	4b54      	ldr	r3, [pc, #336]	; (80044bc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800436a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800436e:	f003 0303 	and.w	r3, r3, #3
 8004372:	60fb      	str	r3, [r7, #12]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2b02      	cmp	r3, #2
 8004378:	d011      	beq.n	800439e <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2b02      	cmp	r3, #2
 800437e:	d818      	bhi.n	80043b2 <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d003      	beq.n	800438e <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d004      	beq.n	8004396 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
          break;
 800438c:	e011      	b.n	80043b2 <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800438e:	f7fe fd91 	bl	8002eb4 <HAL_RCC_GetPCLK1Freq>
 8004392:	61f8      	str	r0, [r7, #28]
          break;
 8004394:	e010      	b.n	80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          frequency = HAL_RCC_GetSysClockFreq();
 8004396:	f7fe fcf7 	bl	8002d88 <HAL_RCC_GetSysClockFreq>
 800439a:	61f8      	str	r0, [r7, #28]
          break;
 800439c:	e00c      	b.n	80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800439e:	4b47      	ldr	r3, [pc, #284]	; (80044bc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043aa:	d104      	bne.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
            frequency = HSI_VALUE;
 80043ac:	4b44      	ldr	r3, [pc, #272]	; (80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80043ae:	61fb      	str	r3, [r7, #28]
          break;
 80043b0:	e001      	b.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          break;
 80043b2:	bf00      	nop
 80043b4:	e10e      	b.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80043b6:	bf00      	nop
        break;
 80043b8:	e10c      	b.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80043ba:	4b40      	ldr	r3, [pc, #256]	; (80044bc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80043bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80043c4:	60fb      	str	r3, [r7, #12]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80043cc:	d02c      	beq.n	8004428 <HAL_RCCEx_GetPeriphCLKFreq+0xc80>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80043d4:	d833      	bhi.n	800443e <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80043dc:	d01a      	beq.n	8004414 <HAL_RCCEx_GetPeriphCLKFreq+0xc6c>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80043e4:	d82b      	bhi.n	800443e <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d004      	beq.n	80043f6 <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80043f2:	d004      	beq.n	80043fe <HAL_RCCEx_GetPeriphCLKFreq+0xc56>
          break;
 80043f4:	e023      	b.n	800443e <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
          frequency = HAL_RCC_GetPCLK1Freq();
 80043f6:	f7fe fd5d 	bl	8002eb4 <HAL_RCC_GetPCLK1Freq>
 80043fa:	61f8      	str	r0, [r7, #28]
          break;
 80043fc:	e026      	b.n	800444c <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80043fe:	4b2f      	ldr	r3, [pc, #188]	; (80044bc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004400:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004404:	f003 0302 	and.w	r3, r3, #2
 8004408:	2b02      	cmp	r3, #2
 800440a:	d11a      	bne.n	8004442 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
              frequency = LSI_VALUE;
 800440c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004410:	61fb      	str	r3, [r7, #28]
          break;
 8004412:	e016      	b.n	8004442 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004414:	4b29      	ldr	r3, [pc, #164]	; (80044bc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800441c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004420:	d111      	bne.n	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
            frequency = HSI_VALUE;
 8004422:	4b27      	ldr	r3, [pc, #156]	; (80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004424:	61fb      	str	r3, [r7, #28]
          break;
 8004426:	e00e      	b.n	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004428:	4b24      	ldr	r3, [pc, #144]	; (80044bc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800442a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b02      	cmp	r3, #2
 8004434:	d109      	bne.n	800444a <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = LSE_VALUE;
 8004436:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800443a:	61fb      	str	r3, [r7, #28]
          break;
 800443c:	e005      	b.n	800444a <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          break;
 800443e:	bf00      	nop
 8004440:	e0c8      	b.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004442:	bf00      	nop
 8004444:	e0c6      	b.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004446:	bf00      	nop
 8004448:	e0c4      	b.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800444a:	bf00      	nop
        break;
 800444c:	e0c2      	b.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800444e:	4b1b      	ldr	r3, [pc, #108]	; (80044bc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004454:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004458:	60fb      	str	r3, [r7, #12]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004460:	d030      	beq.n	80044c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004468:	d837      	bhi.n	80044da <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004470:	d01a      	beq.n	80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004478:	d82f      	bhi.n	80044da <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d004      	beq.n	800448a <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004486:	d004      	beq.n	8004492 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          break;
 8004488:	e027      	b.n	80044da <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = HAL_RCC_GetPCLK1Freq();
 800448a:	f7fe fd13 	bl	8002eb4 <HAL_RCC_GetPCLK1Freq>
 800448e:	61f8      	str	r0, [r7, #28]
          break;
 8004490:	e02a      	b.n	80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004492:	4b0a      	ldr	r3, [pc, #40]	; (80044bc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004494:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	2b02      	cmp	r3, #2
 800449e:	d11e      	bne.n	80044de <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
              frequency = LSI_VALUE;
 80044a0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80044a4:	61fb      	str	r3, [r7, #28]
          break;
 80044a6:	e01a      	b.n	80044de <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80044a8:	4b04      	ldr	r3, [pc, #16]	; (80044bc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044b4:	d115      	bne.n	80044e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
            frequency = HSI_VALUE;
 80044b6:	4b02      	ldr	r3, [pc, #8]	; (80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80044b8:	61fb      	str	r3, [r7, #28]
          break;
 80044ba:	e012      	b.n	80044e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 80044bc:	40021000 	.word	0x40021000
 80044c0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80044c4:	4b46      	ldr	r3, [pc, #280]	; (80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80044c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d109      	bne.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = LSE_VALUE;
 80044d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044d6:	61fb      	str	r3, [r7, #28]
          break;
 80044d8:	e005      	b.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
          break;
 80044da:	bf00      	nop
 80044dc:	e07a      	b.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80044de:	bf00      	nop
 80044e0:	e078      	b.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80044e2:	bf00      	nop
 80044e4:	e076      	b.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80044e6:	bf00      	nop
        break;
 80044e8:	e074      	b.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80044ea:	4b3d      	ldr	r3, [pc, #244]	; (80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80044ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044f0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80044f4:	60fb      	str	r3, [r7, #12]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044fc:	d02c      	beq.n	8004558 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004504:	d855      	bhi.n	80045b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d004      	beq.n	8004516 <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004512:	d004      	beq.n	800451e <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
          break;
 8004514:	e04d      	b.n	80045b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
          frequency = HAL_RCC_GetSysClockFreq();
 8004516:	f7fe fc37 	bl	8002d88 <HAL_RCC_GetSysClockFreq>
 800451a:	61f8      	str	r0, [r7, #28]
          break;
 800451c:	e04e      	b.n	80045bc <HAL_RCCEx_GetPeriphCLKFreq+0xe14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800451e:	4b30      	ldr	r3, [pc, #192]	; (80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b02      	cmp	r3, #2
 8004528:	d145      	bne.n	80045b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800452a:	4b2d      	ldr	r3, [pc, #180]	; (80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0308 	and.w	r3, r3, #8
 8004532:	2b00      	cmp	r3, #0
 8004534:	d005      	beq.n	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0xd9a>
 8004536:	4b2a      	ldr	r3, [pc, #168]	; (80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	091b      	lsrs	r3, r3, #4
 800453c:	f003 030f 	and.w	r3, r3, #15
 8004540:	e005      	b.n	800454e <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
 8004542:	4b27      	ldr	r3, [pc, #156]	; (80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004544:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004548:	0a1b      	lsrs	r3, r3, #8
 800454a:	f003 030f 	and.w	r3, r3, #15
 800454e:	4a25      	ldr	r2, [pc, #148]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8004550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004554:	61fb      	str	r3, [r7, #28]
          break;
 8004556:	e02e      	b.n	80045b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004558:	4b21      	ldr	r3, [pc, #132]	; (80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004560:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004564:	d129      	bne.n	80045ba <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004566:	4b1e      	ldr	r3, [pc, #120]	; (80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800456e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004572:	d122      	bne.n	80045ba <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004574:	4b1a      	ldr	r3, [pc, #104]	; (80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	0a1b      	lsrs	r3, r3, #8
 800457a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800457e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	fb03 f202 	mul.w	r2, r3, r2
 8004588:	4b15      	ldr	r3, [pc, #84]	; (80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	091b      	lsrs	r3, r3, #4
 800458e:	f003 030f 	and.w	r3, r3, #15
 8004592:	3301      	adds	r3, #1
 8004594:	fbb2 f3f3 	udiv	r3, r2, r3
 8004598:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800459a:	4b11      	ldr	r3, [pc, #68]	; (80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	0d5b      	lsrs	r3, r3, #21
 80045a0:	f003 0303 	and.w	r3, r3, #3
 80045a4:	3301      	adds	r3, #1
 80045a6:	005b      	lsls	r3, r3, #1
 80045a8:	69ba      	ldr	r2, [r7, #24]
 80045aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ae:	61fb      	str	r3, [r7, #28]
          break;
 80045b0:	e003      	b.n	80045ba <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          break;
 80045b2:	bf00      	nop
 80045b4:	e00e      	b.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80045b6:	bf00      	nop
 80045b8:	e00c      	b.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80045ba:	bf00      	nop
        break;
 80045bc:	e00a      	b.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 80045be:	bf00      	nop
 80045c0:	e008      	b.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 80045c2:	bf00      	nop
 80045c4:	e006      	b.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 80045c6:	bf00      	nop
 80045c8:	e004      	b.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 80045ca:	bf00      	nop
 80045cc:	e002      	b.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 80045ce:	bf00      	nop
 80045d0:	e000      	b.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 80045d2:	bf00      	nop
    }
  }

  return(frequency);
 80045d4:	69fb      	ldr	r3, [r7, #28]
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3720      	adds	r7, #32
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	40021000 	.word	0x40021000
 80045e4:	08009cec 	.word	0x08009cec

080045e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045f2:	2300      	movs	r3, #0
 80045f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80045f6:	4b72      	ldr	r3, [pc, #456]	; (80047c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	f003 0303 	and.w	r3, r3, #3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00e      	beq.n	8004620 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004602:	4b6f      	ldr	r3, [pc, #444]	; (80047c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	f003 0203 	and.w	r2, r3, #3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	429a      	cmp	r2, r3
 8004610:	d103      	bne.n	800461a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
       ||
 8004616:	2b00      	cmp	r3, #0
 8004618:	d142      	bne.n	80046a0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	73fb      	strb	r3, [r7, #15]
 800461e:	e03f      	b.n	80046a0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2b03      	cmp	r3, #3
 8004626:	d018      	beq.n	800465a <RCCEx_PLLSAI1_Config+0x72>
 8004628:	2b03      	cmp	r3, #3
 800462a:	d825      	bhi.n	8004678 <RCCEx_PLLSAI1_Config+0x90>
 800462c:	2b01      	cmp	r3, #1
 800462e:	d002      	beq.n	8004636 <RCCEx_PLLSAI1_Config+0x4e>
 8004630:	2b02      	cmp	r3, #2
 8004632:	d009      	beq.n	8004648 <RCCEx_PLLSAI1_Config+0x60>
 8004634:	e020      	b.n	8004678 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004636:	4b62      	ldr	r3, [pc, #392]	; (80047c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d11d      	bne.n	800467e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004646:	e01a      	b.n	800467e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004648:	4b5d      	ldr	r3, [pc, #372]	; (80047c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004650:	2b00      	cmp	r3, #0
 8004652:	d116      	bne.n	8004682 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004658:	e013      	b.n	8004682 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800465a:	4b59      	ldr	r3, [pc, #356]	; (80047c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10f      	bne.n	8004686 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004666:	4b56      	ldr	r3, [pc, #344]	; (80047c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d109      	bne.n	8004686 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004676:	e006      	b.n	8004686 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	73fb      	strb	r3, [r7, #15]
      break;
 800467c:	e004      	b.n	8004688 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800467e:	bf00      	nop
 8004680:	e002      	b.n	8004688 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004682:	bf00      	nop
 8004684:	e000      	b.n	8004688 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004686:	bf00      	nop
    }

    if(status == HAL_OK)
 8004688:	7bfb      	ldrb	r3, [r7, #15]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d108      	bne.n	80046a0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800468e:	4b4c      	ldr	r3, [pc, #304]	; (80047c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	f023 0203 	bic.w	r2, r3, #3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4949      	ldr	r1, [pc, #292]	; (80047c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800469c:	4313      	orrs	r3, r2
 800469e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80046a0:	7bfb      	ldrb	r3, [r7, #15]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	f040 8086 	bne.w	80047b4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80046a8:	4b45      	ldr	r3, [pc, #276]	; (80047c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a44      	ldr	r2, [pc, #272]	; (80047c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80046b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046b4:	f7fd f870 	bl	8001798 <HAL_GetTick>
 80046b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046ba:	e009      	b.n	80046d0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046bc:	f7fd f86c 	bl	8001798 <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d902      	bls.n	80046d0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	73fb      	strb	r3, [r7, #15]
        break;
 80046ce:	e005      	b.n	80046dc <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046d0:	4b3b      	ldr	r3, [pc, #236]	; (80047c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1ef      	bne.n	80046bc <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80046dc:	7bfb      	ldrb	r3, [r7, #15]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d168      	bne.n	80047b4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d113      	bne.n	8004710 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046e8:	4b35      	ldr	r3, [pc, #212]	; (80047c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046ea:	691a      	ldr	r2, [r3, #16]
 80046ec:	4b35      	ldr	r3, [pc, #212]	; (80047c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80046ee:	4013      	ands	r3, r2
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	6892      	ldr	r2, [r2, #8]
 80046f4:	0211      	lsls	r1, r2, #8
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	68d2      	ldr	r2, [r2, #12]
 80046fa:	06d2      	lsls	r2, r2, #27
 80046fc:	4311      	orrs	r1, r2
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	6852      	ldr	r2, [r2, #4]
 8004702:	3a01      	subs	r2, #1
 8004704:	0112      	lsls	r2, r2, #4
 8004706:	430a      	orrs	r2, r1
 8004708:	492d      	ldr	r1, [pc, #180]	; (80047c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800470a:	4313      	orrs	r3, r2
 800470c:	610b      	str	r3, [r1, #16]
 800470e:	e02d      	b.n	800476c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d115      	bne.n	8004742 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004716:	4b2a      	ldr	r3, [pc, #168]	; (80047c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004718:	691a      	ldr	r2, [r3, #16]
 800471a:	4b2b      	ldr	r3, [pc, #172]	; (80047c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800471c:	4013      	ands	r3, r2
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	6892      	ldr	r2, [r2, #8]
 8004722:	0211      	lsls	r1, r2, #8
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	6912      	ldr	r2, [r2, #16]
 8004728:	0852      	lsrs	r2, r2, #1
 800472a:	3a01      	subs	r2, #1
 800472c:	0552      	lsls	r2, r2, #21
 800472e:	4311      	orrs	r1, r2
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	6852      	ldr	r2, [r2, #4]
 8004734:	3a01      	subs	r2, #1
 8004736:	0112      	lsls	r2, r2, #4
 8004738:	430a      	orrs	r2, r1
 800473a:	4921      	ldr	r1, [pc, #132]	; (80047c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800473c:	4313      	orrs	r3, r2
 800473e:	610b      	str	r3, [r1, #16]
 8004740:	e014      	b.n	800476c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004742:	4b1f      	ldr	r3, [pc, #124]	; (80047c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004744:	691a      	ldr	r2, [r3, #16]
 8004746:	4b21      	ldr	r3, [pc, #132]	; (80047cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004748:	4013      	ands	r3, r2
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	6892      	ldr	r2, [r2, #8]
 800474e:	0211      	lsls	r1, r2, #8
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	6952      	ldr	r2, [r2, #20]
 8004754:	0852      	lsrs	r2, r2, #1
 8004756:	3a01      	subs	r2, #1
 8004758:	0652      	lsls	r2, r2, #25
 800475a:	4311      	orrs	r1, r2
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	6852      	ldr	r2, [r2, #4]
 8004760:	3a01      	subs	r2, #1
 8004762:	0112      	lsls	r2, r2, #4
 8004764:	430a      	orrs	r2, r1
 8004766:	4916      	ldr	r1, [pc, #88]	; (80047c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004768:	4313      	orrs	r3, r2
 800476a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800476c:	4b14      	ldr	r3, [pc, #80]	; (80047c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a13      	ldr	r2, [pc, #76]	; (80047c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004772:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004776:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004778:	f7fd f80e 	bl	8001798 <HAL_GetTick>
 800477c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800477e:	e009      	b.n	8004794 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004780:	f7fd f80a 	bl	8001798 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b02      	cmp	r3, #2
 800478c:	d902      	bls.n	8004794 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	73fb      	strb	r3, [r7, #15]
          break;
 8004792:	e005      	b.n	80047a0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004794:	4b0a      	ldr	r3, [pc, #40]	; (80047c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d0ef      	beq.n	8004780 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80047a0:	7bfb      	ldrb	r3, [r7, #15]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d106      	bne.n	80047b4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80047a6:	4b06      	ldr	r3, [pc, #24]	; (80047c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047a8:	691a      	ldr	r2, [r3, #16]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	4904      	ldr	r1, [pc, #16]	; (80047c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047b0:	4313      	orrs	r3, r2
 80047b2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80047b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	40021000 	.word	0x40021000
 80047c4:	07ff800f 	.word	0x07ff800f
 80047c8:	ff9f800f 	.word	0xff9f800f
 80047cc:	f9ff800f 	.word	0xf9ff800f

080047d0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047da:	2300      	movs	r3, #0
 80047dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047de:	4b72      	ldr	r3, [pc, #456]	; (80049a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	f003 0303 	and.w	r3, r3, #3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00e      	beq.n	8004808 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80047ea:	4b6f      	ldr	r3, [pc, #444]	; (80049a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	f003 0203 	and.w	r2, r3, #3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d103      	bne.n	8004802 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
       ||
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d142      	bne.n	8004888 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	73fb      	strb	r3, [r7, #15]
 8004806:	e03f      	b.n	8004888 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2b03      	cmp	r3, #3
 800480e:	d018      	beq.n	8004842 <RCCEx_PLLSAI2_Config+0x72>
 8004810:	2b03      	cmp	r3, #3
 8004812:	d825      	bhi.n	8004860 <RCCEx_PLLSAI2_Config+0x90>
 8004814:	2b01      	cmp	r3, #1
 8004816:	d002      	beq.n	800481e <RCCEx_PLLSAI2_Config+0x4e>
 8004818:	2b02      	cmp	r3, #2
 800481a:	d009      	beq.n	8004830 <RCCEx_PLLSAI2_Config+0x60>
 800481c:	e020      	b.n	8004860 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800481e:	4b62      	ldr	r3, [pc, #392]	; (80049a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d11d      	bne.n	8004866 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800482e:	e01a      	b.n	8004866 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004830:	4b5d      	ldr	r3, [pc, #372]	; (80049a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004838:	2b00      	cmp	r3, #0
 800483a:	d116      	bne.n	800486a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004840:	e013      	b.n	800486a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004842:	4b59      	ldr	r3, [pc, #356]	; (80049a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10f      	bne.n	800486e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800484e:	4b56      	ldr	r3, [pc, #344]	; (80049a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d109      	bne.n	800486e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800485e:	e006      	b.n	800486e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	73fb      	strb	r3, [r7, #15]
      break;
 8004864:	e004      	b.n	8004870 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004866:	bf00      	nop
 8004868:	e002      	b.n	8004870 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800486a:	bf00      	nop
 800486c:	e000      	b.n	8004870 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800486e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004870:	7bfb      	ldrb	r3, [r7, #15]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d108      	bne.n	8004888 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004876:	4b4c      	ldr	r3, [pc, #304]	; (80049a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	f023 0203 	bic.w	r2, r3, #3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4949      	ldr	r1, [pc, #292]	; (80049a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004884:	4313      	orrs	r3, r2
 8004886:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004888:	7bfb      	ldrb	r3, [r7, #15]
 800488a:	2b00      	cmp	r3, #0
 800488c:	f040 8086 	bne.w	800499c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004890:	4b45      	ldr	r3, [pc, #276]	; (80049a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a44      	ldr	r2, [pc, #272]	; (80049a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004896:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800489a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800489c:	f7fc ff7c 	bl	8001798 <HAL_GetTick>
 80048a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80048a2:	e009      	b.n	80048b8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80048a4:	f7fc ff78 	bl	8001798 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d902      	bls.n	80048b8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	73fb      	strb	r3, [r7, #15]
        break;
 80048b6:	e005      	b.n	80048c4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80048b8:	4b3b      	ldr	r3, [pc, #236]	; (80049a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1ef      	bne.n	80048a4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80048c4:	7bfb      	ldrb	r3, [r7, #15]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d168      	bne.n	800499c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d113      	bne.n	80048f8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80048d0:	4b35      	ldr	r3, [pc, #212]	; (80049a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048d2:	695a      	ldr	r2, [r3, #20]
 80048d4:	4b35      	ldr	r3, [pc, #212]	; (80049ac <RCCEx_PLLSAI2_Config+0x1dc>)
 80048d6:	4013      	ands	r3, r2
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	6892      	ldr	r2, [r2, #8]
 80048dc:	0211      	lsls	r1, r2, #8
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	68d2      	ldr	r2, [r2, #12]
 80048e2:	06d2      	lsls	r2, r2, #27
 80048e4:	4311      	orrs	r1, r2
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	6852      	ldr	r2, [r2, #4]
 80048ea:	3a01      	subs	r2, #1
 80048ec:	0112      	lsls	r2, r2, #4
 80048ee:	430a      	orrs	r2, r1
 80048f0:	492d      	ldr	r1, [pc, #180]	; (80049a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	614b      	str	r3, [r1, #20]
 80048f6:	e02d      	b.n	8004954 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d115      	bne.n	800492a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80048fe:	4b2a      	ldr	r3, [pc, #168]	; (80049a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004900:	695a      	ldr	r2, [r3, #20]
 8004902:	4b2b      	ldr	r3, [pc, #172]	; (80049b0 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004904:	4013      	ands	r3, r2
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	6892      	ldr	r2, [r2, #8]
 800490a:	0211      	lsls	r1, r2, #8
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	6912      	ldr	r2, [r2, #16]
 8004910:	0852      	lsrs	r2, r2, #1
 8004912:	3a01      	subs	r2, #1
 8004914:	0552      	lsls	r2, r2, #21
 8004916:	4311      	orrs	r1, r2
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	6852      	ldr	r2, [r2, #4]
 800491c:	3a01      	subs	r2, #1
 800491e:	0112      	lsls	r2, r2, #4
 8004920:	430a      	orrs	r2, r1
 8004922:	4921      	ldr	r1, [pc, #132]	; (80049a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004924:	4313      	orrs	r3, r2
 8004926:	614b      	str	r3, [r1, #20]
 8004928:	e014      	b.n	8004954 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800492a:	4b1f      	ldr	r3, [pc, #124]	; (80049a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800492c:	695a      	ldr	r2, [r3, #20]
 800492e:	4b21      	ldr	r3, [pc, #132]	; (80049b4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004930:	4013      	ands	r3, r2
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	6892      	ldr	r2, [r2, #8]
 8004936:	0211      	lsls	r1, r2, #8
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	6952      	ldr	r2, [r2, #20]
 800493c:	0852      	lsrs	r2, r2, #1
 800493e:	3a01      	subs	r2, #1
 8004940:	0652      	lsls	r2, r2, #25
 8004942:	4311      	orrs	r1, r2
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	6852      	ldr	r2, [r2, #4]
 8004948:	3a01      	subs	r2, #1
 800494a:	0112      	lsls	r2, r2, #4
 800494c:	430a      	orrs	r2, r1
 800494e:	4916      	ldr	r1, [pc, #88]	; (80049a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004950:	4313      	orrs	r3, r2
 8004952:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004954:	4b14      	ldr	r3, [pc, #80]	; (80049a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a13      	ldr	r2, [pc, #76]	; (80049a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800495a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800495e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004960:	f7fc ff1a 	bl	8001798 <HAL_GetTick>
 8004964:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004966:	e009      	b.n	800497c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004968:	f7fc ff16 	bl	8001798 <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	2b02      	cmp	r3, #2
 8004974:	d902      	bls.n	800497c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	73fb      	strb	r3, [r7, #15]
          break;
 800497a:	e005      	b.n	8004988 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800497c:	4b0a      	ldr	r3, [pc, #40]	; (80049a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d0ef      	beq.n	8004968 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004988:	7bfb      	ldrb	r3, [r7, #15]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d106      	bne.n	800499c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800498e:	4b06      	ldr	r3, [pc, #24]	; (80049a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004990:	695a      	ldr	r2, [r3, #20]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	4904      	ldr	r1, [pc, #16]	; (80049a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004998:	4313      	orrs	r3, r2
 800499a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800499c:	7bfb      	ldrb	r3, [r7, #15]
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	40021000 	.word	0x40021000
 80049ac:	07ff800f 	.word	0x07ff800f
 80049b0:	ff9f800f 	.word	0xff9f800f
 80049b4:	f9ff800f 	.word	0xf9ff800f

080049b8 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b089      	sub	sp, #36	; 0x24
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80049c2:	2300      	movs	r3, #0
 80049c4:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80049c6:	2300      	movs	r3, #0
 80049c8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80049ca:	2300      	movs	r3, #0
 80049cc:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049d4:	d10b      	bne.n	80049ee <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80049d6:	4b7e      	ldr	r3, [pc, #504]	; (8004bd0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80049d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049dc:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80049e0:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	2b60      	cmp	r3, #96	; 0x60
 80049e6:	d112      	bne.n	8004a0e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80049e8:	4b7a      	ldr	r3, [pc, #488]	; (8004bd4 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 80049ea:	61fb      	str	r3, [r7, #28]
 80049ec:	e00f      	b.n	8004a0e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049f4:	d10b      	bne.n	8004a0e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80049f6:	4b76      	ldr	r3, [pc, #472]	; (8004bd0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80049f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a00:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a08:	d101      	bne.n	8004a0e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8004a0a:	4b72      	ldr	r3, [pc, #456]	; (8004bd4 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8004a0c:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f040 80d6 	bne.w	8004bc2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	2b40      	cmp	r3, #64	; 0x40
 8004a1e:	d003      	beq.n	8004a28 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a26:	d13b      	bne.n	8004aa0 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004a28:	4b69      	ldr	r3, [pc, #420]	; (8004bd0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a34:	f040 80c4 	bne.w	8004bc0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8004a38:	4b65      	ldr	r3, [pc, #404]	; (8004bd0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f000 80bd 	beq.w	8004bc0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004a46:	4b62      	ldr	r3, [pc, #392]	; (8004bd0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	091b      	lsrs	r3, r3, #4
 8004a4c:	f003 030f 	and.w	r3, r3, #15
 8004a50:	3301      	adds	r3, #1
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a58:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004a5a:	4b5d      	ldr	r3, [pc, #372]	; (8004bd0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	0a1b      	lsrs	r3, r3, #8
 8004a60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a64:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8004a66:	4b5a      	ldr	r3, [pc, #360]	; (8004bd0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	0edb      	lsrs	r3, r3, #27
 8004a6c:	f003 031f 	and.w	r3, r3, #31
 8004a70:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d10a      	bne.n	8004a8e <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004a78:	4b55      	ldr	r3, [pc, #340]	; (8004bd0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d002      	beq.n	8004a8a <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8004a84:	2311      	movs	r3, #17
 8004a86:	617b      	str	r3, [r7, #20]
 8004a88:	e001      	b.n	8004a8e <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8004a8a:	2307      	movs	r3, #7
 8004a8c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	fb03 f202 	mul.w	r2, r3, r2
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a9c:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004a9e:	e08f      	b.n	8004bc0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d13a      	bne.n	8004b1c <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8004aa6:	4b4a      	ldr	r3, [pc, #296]	; (8004bd0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004aae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ab2:	f040 8086 	bne.w	8004bc2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8004ab6:	4b46      	ldr	r3, [pc, #280]	; (8004bd0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d07f      	beq.n	8004bc2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004ac2:	4b43      	ldr	r3, [pc, #268]	; (8004bd0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	091b      	lsrs	r3, r3, #4
 8004ac8:	f003 030f 	and.w	r3, r3, #15
 8004acc:	3301      	adds	r3, #1
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad4:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004ad6:	4b3e      	ldr	r3, [pc, #248]	; (8004bd0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	0a1b      	lsrs	r3, r3, #8
 8004adc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ae0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8004ae2:	4b3b      	ldr	r3, [pc, #236]	; (8004bd0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	0edb      	lsrs	r3, r3, #27
 8004ae8:	f003 031f 	and.w	r3, r3, #31
 8004aec:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d10a      	bne.n	8004b0a <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8004af4:	4b36      	ldr	r3, [pc, #216]	; (8004bd0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d002      	beq.n	8004b06 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8004b00:	2311      	movs	r3, #17
 8004b02:	617b      	str	r3, [r7, #20]
 8004b04:	e001      	b.n	8004b0a <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8004b06:	2307      	movs	r3, #7
 8004b08:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	fb03 f202 	mul.w	r2, r3, r2
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b18:	61fb      	str	r3, [r7, #28]
 8004b1a:	e052      	b.n	8004bc2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	2b80      	cmp	r3, #128	; 0x80
 8004b20:	d003      	beq.n	8004b2a <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b28:	d109      	bne.n	8004b3e <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004b2a:	4b29      	ldr	r3, [pc, #164]	; (8004bd0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b36:	d144      	bne.n	8004bc2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8004b38:	4b27      	ldr	r3, [pc, #156]	; (8004bd8 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8004b3a:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004b3c:	e041      	b.n	8004bc2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	2b20      	cmp	r3, #32
 8004b42:	d003      	beq.n	8004b4c <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b4a:	d13a      	bne.n	8004bc2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8004b4c:	4b20      	ldr	r3, [pc, #128]	; (8004bd0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b58:	d133      	bne.n	8004bc2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8004b5a:	4b1d      	ldr	r3, [pc, #116]	; (8004bd0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d02d      	beq.n	8004bc2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8004b66:	4b1a      	ldr	r3, [pc, #104]	; (8004bd0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	091b      	lsrs	r3, r3, #4
 8004b6c:	f003 030f 	and.w	r3, r3, #15
 8004b70:	3301      	adds	r3, #1
 8004b72:	693a      	ldr	r2, [r7, #16]
 8004b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b78:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8004b7a:	4b15      	ldr	r3, [pc, #84]	; (8004bd0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	0a1b      	lsrs	r3, r3, #8
 8004b80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b84:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8004b86:	4b12      	ldr	r3, [pc, #72]	; (8004bd0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	0edb      	lsrs	r3, r3, #27
 8004b8c:	f003 031f 	and.w	r3, r3, #31
 8004b90:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d10a      	bne.n	8004bae <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8004b98:	4b0d      	ldr	r3, [pc, #52]	; (8004bd0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004b9a:	695b      	ldr	r3, [r3, #20]
 8004b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d002      	beq.n	8004baa <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8004ba4:	2311      	movs	r3, #17
 8004ba6:	617b      	str	r3, [r7, #20]
 8004ba8:	e001      	b.n	8004bae <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8004baa:	2307      	movs	r3, #7
 8004bac:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	fb03 f202 	mul.w	r2, r3, r2
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bbc:	61fb      	str	r3, [r7, #28]
 8004bbe:	e000      	b.n	8004bc2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004bc0:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8004bc2:	69fb      	ldr	r3, [r7, #28]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3724      	adds	r7, #36	; 0x24
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr
 8004bd0:	40021000 	.word	0x40021000
 8004bd4:	001fff68 	.word	0x001fff68
 8004bd8:	00f42400 	.word	0x00f42400

08004bdc <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b08a      	sub	sp, #40	; 0x28
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e1c7      	b.n	8004f7e <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d10e      	bne.n	8004c16 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a81      	ldr	r2, [pc, #516]	; (8004e04 <HAL_SAI_Init+0x228>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d107      	bne.n	8004c12 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d103      	bne.n	8004c12 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e1b3      	b.n	8004f7e <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d106      	bne.n	8004c30 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f7fc fbc6 	bl	80013bc <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 f9b1 	bl	8004f98 <SAI_Disable>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d001      	beq.n	8004c40 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e19e      	b.n	8004f7e <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2202      	movs	r2, #2
 8004c44:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d00c      	beq.n	8004c6a <HAL_SAI_Init+0x8e>
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d80d      	bhi.n	8004c70 <HAL_SAI_Init+0x94>
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d002      	beq.n	8004c5e <HAL_SAI_Init+0x82>
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d003      	beq.n	8004c64 <HAL_SAI_Init+0x88>
 8004c5c:	e008      	b.n	8004c70 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8004c62:	e008      	b.n	8004c76 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004c64:	2310      	movs	r3, #16
 8004c66:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8004c68:	e005      	b.n	8004c76 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8004c6a:	2320      	movs	r3, #32
 8004c6c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8004c6e:	e002      	b.n	8004c76 <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8004c70:	2300      	movs	r3, #0
 8004c72:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8004c74:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	2b03      	cmp	r3, #3
 8004c7c:	d81d      	bhi.n	8004cba <HAL_SAI_Init+0xde>
 8004c7e:	a201      	add	r2, pc, #4	; (adr r2, 8004c84 <HAL_SAI_Init+0xa8>)
 8004c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c84:	08004c95 	.word	0x08004c95
 8004c88:	08004c9b 	.word	0x08004c9b
 8004c8c:	08004ca3 	.word	0x08004ca3
 8004c90:	08004cab 	.word	0x08004cab
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8004c94:	2300      	movs	r3, #0
 8004c96:	61fb      	str	r3, [r7, #28]
      break;
 8004c98:	e012      	b.n	8004cc0 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8004c9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c9e:	61fb      	str	r3, [r7, #28]
      break;
 8004ca0:	e00e      	b.n	8004cc0 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004ca2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004ca6:	61fb      	str	r3, [r7, #28]
      break;
 8004ca8:	e00a      	b.n	8004cc0 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004caa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004cae:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb2:	f043 0301 	orr.w	r3, r3, #1
 8004cb6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8004cb8:	e002      	b.n	8004cc0 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	61fb      	str	r3, [r7, #28]
      break;
 8004cbe:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a4f      	ldr	r2, [pc, #316]	; (8004e04 <HAL_SAI_Init+0x228>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d004      	beq.n	8004cd4 <HAL_SAI_Init+0xf8>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a4e      	ldr	r2, [pc, #312]	; (8004e08 <HAL_SAI_Init+0x22c>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d103      	bne.n	8004cdc <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 8004cd4:	4a4d      	ldr	r2, [pc, #308]	; (8004e0c <HAL_SAI_Init+0x230>)
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd8:	6013      	str	r3, [r2, #0]
 8004cda:	e002      	b.n	8004ce2 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8004cdc:	4a4c      	ldr	r2, [pc, #304]	; (8004e10 <HAL_SAI_Init+0x234>)
 8004cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce0:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d073      	beq.n	8004dd2 <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a45      	ldr	r2, [pc, #276]	; (8004e04 <HAL_SAI_Init+0x228>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d004      	beq.n	8004cfe <HAL_SAI_Init+0x122>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a43      	ldr	r2, [pc, #268]	; (8004e08 <HAL_SAI_Init+0x22c>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d105      	bne.n	8004d0a <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004cfe:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004d02:	f7fe fd51 	bl	80037a8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004d06:	61b8      	str	r0, [r7, #24]
 8004d08:	e004      	b.n	8004d14 <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004d0a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004d0e:	f7fe fd4b 	bl	80037a8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004d12:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004d1c:	d120      	bne.n	8004d60 <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d22:	2b04      	cmp	r3, #4
 8004d24:	d102      	bne.n	8004d2c <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 8004d26:	2340      	movs	r3, #64	; 0x40
 8004d28:	613b      	str	r3, [r7, #16]
 8004d2a:	e00a      	b.n	8004d42 <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d30:	2b08      	cmp	r3, #8
 8004d32:	d103      	bne.n	8004d3c <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8004d34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d38:	613b      	str	r3, [r7, #16]
 8004d3a:	e002      	b.n	8004d42 <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d40:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8004d42:	69ba      	ldr	r2, [r7, #24]
 8004d44:	4613      	mov	r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4413      	add	r3, r2
 8004d4a:	005b      	lsls	r3, r3, #1
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	69db      	ldr	r3, [r3, #28]
 8004d52:	693a      	ldr	r2, [r7, #16]
 8004d54:	fb02 f303 	mul.w	r3, r2, r3
 8004d58:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d5c:	617b      	str	r3, [r7, #20]
 8004d5e:	e017      	b.n	8004d90 <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d68:	d101      	bne.n	8004d6e <HAL_SAI_Init+0x192>
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	e000      	b.n	8004d70 <HAL_SAI_Init+0x194>
 8004d6e:	2301      	movs	r3, #1
 8004d70:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8004d72:	69ba      	ldr	r2, [r7, #24]
 8004d74:	4613      	mov	r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4413      	add	r3, r2
 8004d7a:	005b      	lsls	r3, r3, #1
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	69db      	ldr	r3, [r3, #28]
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	fb02 f303 	mul.w	r3, r2, r3
 8004d88:	021b      	lsls	r3, r3, #8
 8004d8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d8e:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	4a20      	ldr	r2, [pc, #128]	; (8004e14 <HAL_SAI_Init+0x238>)
 8004d94:	fba2 2303 	umull	r2, r3, r2, r3
 8004d98:	08da      	lsrs	r2, r3, #3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8004d9e:	6979      	ldr	r1, [r7, #20]
 8004da0:	4b1c      	ldr	r3, [pc, #112]	; (8004e14 <HAL_SAI_Init+0x238>)
 8004da2:	fba3 2301 	umull	r2, r3, r3, r1
 8004da6:	08da      	lsrs	r2, r3, #3
 8004da8:	4613      	mov	r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	4413      	add	r3, r2
 8004dae:	005b      	lsls	r3, r3, #1
 8004db0:	1aca      	subs	r2, r1, r3
 8004db2:	2a08      	cmp	r2, #8
 8004db4:	d904      	bls.n	8004dc0 <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	1c5a      	adds	r2, r3, #1
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc4:	2b04      	cmp	r3, #4
 8004dc6:	d104      	bne.n	8004dd2 <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a1b      	ldr	r3, [r3, #32]
 8004dcc:	085a      	lsrs	r2, r3, #1
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d003      	beq.n	8004de2 <HAL_SAI_Init+0x206>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d109      	bne.n	8004df6 <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d101      	bne.n	8004dee <HAL_SAI_Init+0x212>
 8004dea:	2300      	movs	r3, #0
 8004dec:	e001      	b.n	8004df2 <HAL_SAI_Init+0x216>
 8004dee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004df2:	623b      	str	r3, [r7, #32]
 8004df4:	e012      	b.n	8004e1c <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d10c      	bne.n	8004e18 <HAL_SAI_Init+0x23c>
 8004dfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e02:	e00a      	b.n	8004e1a <HAL_SAI_Init+0x23e>
 8004e04:	40015404 	.word	0x40015404
 8004e08:	40015424 	.word	0x40015424
 8004e0c:	40015400 	.word	0x40015400
 8004e10:	40015800 	.word	0x40015800
 8004e14:	cccccccd 	.word	0xcccccccd
 8004e18:	2300      	movs	r3, #0
 8004e1a:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	6819      	ldr	r1, [r3, #0]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	4b58      	ldr	r3, [pc, #352]	; (8004f88 <HAL_SAI_Init+0x3ac>)
 8004e28:	400b      	ands	r3, r1
 8004e2a:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	6819      	ldr	r1, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004e40:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e46:	431a      	orrs	r2, r3
 8004e48:	6a3b      	ldr	r3, [r7, #32]
 8004e4a:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 8004e54:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004e60:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a1b      	ldr	r3, [r3, #32]
 8004e66:	051b      	lsls	r3, r3, #20
 8004e68:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8004e6e:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	430a      	orrs	r2, r1
 8004e76:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	6812      	ldr	r2, [r2, #0]
 8004e82:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004e86:	f023 030f 	bic.w	r3, r3, #15
 8004e8a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	6859      	ldr	r1, [r3, #4]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	699a      	ldr	r2, [r3, #24]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9a:	431a      	orrs	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea0:	431a      	orrs	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	430a      	orrs	r2, r1
 8004ea8:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	6899      	ldr	r1, [r3, #8]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	4b35      	ldr	r3, [pc, #212]	; (8004f8c <HAL_SAI_Init+0x3b0>)
 8004eb6:	400b      	ands	r3, r1
 8004eb8:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	6899      	ldr	r1, [r3, #8]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ec4:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004eca:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
                           hsai->FrameInit.FSOffset |
 8004ed0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSDefinition |
 8004ed6:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004edc:	3b01      	subs	r3, #1
 8004ede:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8004ee0:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68d9      	ldr	r1, [r3, #12]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	f24f 0320 	movw	r3, #61472	; 0xf020
 8004ef8:	400b      	ands	r3, r1
 8004efa:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68d9      	ldr	r1, [r3, #12]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f0a:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f10:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004f12:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	021b      	lsls	r3, r3, #8
 8004f1c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	430a      	orrs	r2, r1
 8004f24:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a19      	ldr	r2, [pc, #100]	; (8004f90 <HAL_SAI_Init+0x3b4>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d119      	bne.n	8004f64 <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8004f30:	4b18      	ldr	r3, [pc, #96]	; (8004f94 <HAL_SAI_Init+0x3b8>)
 8004f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f34:	4a17      	ldr	r2, [pc, #92]	; (8004f94 <HAL_SAI_Init+0x3b8>)
 8004f36:	f023 0301 	bic.w	r3, r3, #1
 8004f3a:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d10e      	bne.n	8004f64 <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8004f52:	4910      	ldr	r1, [pc, #64]	; (8004f94 <HAL_SAI_Init+0x3b8>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8004f58:	4b0e      	ldr	r3, [pc, #56]	; (8004f94 <HAL_SAI_Init+0x3b8>)
 8004f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f5c:	4a0d      	ldr	r2, [pc, #52]	; (8004f94 <HAL_SAI_Init+0x3b8>)
 8004f5e:	f043 0301 	orr.w	r3, r3, #1
 8004f62:	6453      	str	r3, [r2, #68]	; 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3728      	adds	r7, #40	; 0x28
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	f805c010 	.word	0xf805c010
 8004f8c:	fff88000 	.word	0xfff88000
 8004f90:	40015404 	.word	0x40015404
 8004f94:	40015400 	.word	0x40015400

08004f98 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004fa0:	4b18      	ldr	r3, [pc, #96]	; (8005004 <SAI_Disable+0x6c>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a18      	ldr	r2, [pc, #96]	; (8005008 <SAI_Disable+0x70>)
 8004fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8004faa:	0b1b      	lsrs	r3, r3, #12
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004fc2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d10a      	bne.n	8004fe0 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      status = HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	72fb      	strb	r3, [r7, #11]
      break;
 8004fde:	e009      	b.n	8004ff4 <SAI_Disable+0x5c>
    }
    count--;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d1e7      	bne.n	8004fc4 <SAI_Disable+0x2c>

  return status;
 8004ff4:	7afb      	ldrb	r3, [r7, #11]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3714      	adds	r7, #20
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	20000000 	.word	0x20000000
 8005008:	95cbec1b 	.word	0x95cbec1b

0800500c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e095      	b.n	800514a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005022:	2b00      	cmp	r3, #0
 8005024:	d108      	bne.n	8005038 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800502e:	d009      	beq.n	8005044 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	61da      	str	r2, [r3, #28]
 8005036:	e005      	b.n	8005044 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005050:	b2db      	uxtb	r3, r3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d106      	bne.n	8005064 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f7fb fffc 	bl	800105c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2202      	movs	r2, #2
 8005068:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800507a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005084:	d902      	bls.n	800508c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005086:	2300      	movs	r3, #0
 8005088:	60fb      	str	r3, [r7, #12]
 800508a:	e002      	b.n	8005092 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800508c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005090:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800509a:	d007      	beq.n	80050ac <HAL_SPI_Init+0xa0>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050a4:	d002      	beq.n	80050ac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80050bc:	431a      	orrs	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	f003 0302 	and.w	r3, r3, #2
 80050c6:	431a      	orrs	r2, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	695b      	ldr	r3, [r3, #20]
 80050cc:	f003 0301 	and.w	r3, r3, #1
 80050d0:	431a      	orrs	r2, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050da:	431a      	orrs	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	69db      	ldr	r3, [r3, #28]
 80050e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050e4:	431a      	orrs	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ee:	ea42 0103 	orr.w	r1, r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	430a      	orrs	r2, r1
 8005100:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	0c1b      	lsrs	r3, r3, #16
 8005108:	f003 0204 	and.w	r2, r3, #4
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005110:	f003 0310 	and.w	r3, r3, #16
 8005114:	431a      	orrs	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800511a:	f003 0308 	and.w	r3, r3, #8
 800511e:	431a      	orrs	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005128:	ea42 0103 	orr.w	r1, r2, r3
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	430a      	orrs	r2, r1
 8005138:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8005152:	b580      	push	{r7, lr}
 8005154:	b084      	sub	sp, #16
 8005156:	af00      	add	r7, sp, #0
 8005158:	60f8      	str	r0, [r7, #12]
 800515a:	60b9      	str	r1, [r7, #8]
 800515c:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d101      	bne.n	8005168 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e038      	b.n	80051da <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800516e:	b2db      	uxtb	r3, r3
 8005170:	2b00      	cmp	r3, #0
 8005172:	d106      	bne.n	8005182 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f7fc f913 	bl	80013a8 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	3308      	adds	r3, #8
 800518a:	4619      	mov	r1, r3
 800518c:	4610      	mov	r0, r2
 800518e:	f000 ff97 	bl	80060c0 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6818      	ldr	r0, [r3, #0]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	461a      	mov	r2, r3
 800519c:	68b9      	ldr	r1, [r7, #8]
 800519e:	f001 f829 	bl	80061f4 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6858      	ldr	r0, [r3, #4]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	689a      	ldr	r2, [r3, #8]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ae:	6879      	ldr	r1, [r7, #4]
 80051b0:	f001 f872 	bl	8006298 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	6892      	ldr	r2, [r2, #8]
 80051bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	6892      	ldr	r2, [r2, #8]
 80051c8:	f041 0101 	orr.w	r1, r1, #1
 80051cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3710      	adds	r7, #16
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b082      	sub	sp, #8
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d101      	bne.n	80051f4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e042      	b.n	800527a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d106      	bne.n	800520c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f7fb ff8a 	bl	8001120 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2224      	movs	r2, #36	; 0x24
 8005210:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f022 0201 	bic.w	r2, r2, #1
 8005222:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 f997 	bl	8005558 <UART_SetConfig>
 800522a:	4603      	mov	r3, r0
 800522c:	2b01      	cmp	r3, #1
 800522e:	d101      	bne.n	8005234 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e022      	b.n	800527a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005238:	2b00      	cmp	r3, #0
 800523a:	d002      	beq.n	8005242 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 fc87 	bl	8005b50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	685a      	ldr	r2, [r3, #4]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005250:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	689a      	ldr	r2, [r3, #8]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005260:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f042 0201 	orr.w	r2, r2, #1
 8005270:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 fd0e 	bl	8005c94 <UART_CheckIdleState>
 8005278:	4603      	mov	r3, r0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3708      	adds	r7, #8
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b08a      	sub	sp, #40	; 0x28
 8005286:	af02      	add	r7, sp, #8
 8005288:	60f8      	str	r0, [r7, #12]
 800528a:	60b9      	str	r1, [r7, #8]
 800528c:	603b      	str	r3, [r7, #0]
 800528e:	4613      	mov	r3, r2
 8005290:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005298:	2b20      	cmp	r3, #32
 800529a:	f040 8084 	bne.w	80053a6 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d002      	beq.n	80052aa <HAL_UART_Transmit+0x28>
 80052a4:	88fb      	ldrh	r3, [r7, #6]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d101      	bne.n	80052ae <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e07c      	b.n	80053a8 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d101      	bne.n	80052bc <HAL_UART_Transmit+0x3a>
 80052b8:	2302      	movs	r3, #2
 80052ba:	e075      	b.n	80053a8 <HAL_UART_Transmit+0x126>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2221      	movs	r2, #33	; 0x21
 80052d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052d4:	f7fc fa60 	bl	8001798 <HAL_GetTick>
 80052d8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	88fa      	ldrh	r2, [r7, #6]
 80052de:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	88fa      	ldrh	r2, [r7, #6]
 80052e6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052f2:	d108      	bne.n	8005306 <HAL_UART_Transmit+0x84>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d104      	bne.n	8005306 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80052fc:	2300      	movs	r3, #0
 80052fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	61bb      	str	r3, [r7, #24]
 8005304:	e003      	b.n	800530e <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800530a:	2300      	movs	r3, #0
 800530c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005316:	e02d      	b.n	8005374 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	2200      	movs	r2, #0
 8005320:	2180      	movs	r1, #128	; 0x80
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f000 fd01 	bl	8005d2a <UART_WaitOnFlagUntilTimeout>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d001      	beq.n	8005332 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e03a      	b.n	80053a8 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d10b      	bne.n	8005350 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	881a      	ldrh	r2, [r3, #0]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005344:	b292      	uxth	r2, r2
 8005346:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	3302      	adds	r3, #2
 800534c:	61bb      	str	r3, [r7, #24]
 800534e:	e008      	b.n	8005362 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	781a      	ldrb	r2, [r3, #0]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	b292      	uxth	r2, r2
 800535a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	3301      	adds	r3, #1
 8005360:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005368:	b29b      	uxth	r3, r3
 800536a:	3b01      	subs	r3, #1
 800536c:	b29a      	uxth	r2, r3
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800537a:	b29b      	uxth	r3, r3
 800537c:	2b00      	cmp	r3, #0
 800537e:	d1cb      	bne.n	8005318 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	9300      	str	r3, [sp, #0]
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	2200      	movs	r2, #0
 8005388:	2140      	movs	r1, #64	; 0x40
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f000 fccd 	bl	8005d2a <UART_WaitOnFlagUntilTimeout>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d001      	beq.n	800539a <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e006      	b.n	80053a8 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2220      	movs	r2, #32
 800539e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80053a2:	2300      	movs	r3, #0
 80053a4:	e000      	b.n	80053a8 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 80053a6:	2302      	movs	r3, #2
  }
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3720      	adds	r7, #32
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b08a      	sub	sp, #40	; 0x28
 80053b4:	af02      	add	r7, sp, #8
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	603b      	str	r3, [r7, #0]
 80053bc:	4613      	mov	r3, r2
 80053be:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c6:	2b20      	cmp	r3, #32
 80053c8:	f040 80c1 	bne.w	800554e <HAL_UART_Receive+0x19e>
  {
    if ((pData == NULL) || (Size == 0U))
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d002      	beq.n	80053d8 <HAL_UART_Receive+0x28>
 80053d2:	88fb      	ldrh	r3, [r7, #6]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d101      	bne.n	80053dc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e0b9      	b.n	8005550 <HAL_UART_Receive+0x1a0>
    }

    __HAL_LOCK(huart);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d101      	bne.n	80053ea <HAL_UART_Receive+0x3a>
 80053e6:	2302      	movs	r3, #2
 80053e8:	e0b2      	b.n	8005550 <HAL_UART_Receive+0x1a0>
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2222      	movs	r2, #34	; 0x22
 80053fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2200      	movs	r2, #0
 8005406:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005408:	f7fc f9c6 	bl	8001798 <HAL_GetTick>
 800540c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	88fa      	ldrh	r2, [r7, #6]
 8005412:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	88fa      	ldrh	r2, [r7, #6]
 800541a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005426:	d10e      	bne.n	8005446 <HAL_UART_Receive+0x96>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d105      	bne.n	800543c <HAL_UART_Receive+0x8c>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005436:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800543a:	e02d      	b.n	8005498 <HAL_UART_Receive+0xe8>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	22ff      	movs	r2, #255	; 0xff
 8005440:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005444:	e028      	b.n	8005498 <HAL_UART_Receive+0xe8>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d10d      	bne.n	800546a <HAL_UART_Receive+0xba>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d104      	bne.n	8005460 <HAL_UART_Receive+0xb0>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	22ff      	movs	r2, #255	; 0xff
 800545a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800545e:	e01b      	b.n	8005498 <HAL_UART_Receive+0xe8>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	227f      	movs	r2, #127	; 0x7f
 8005464:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005468:	e016      	b.n	8005498 <HAL_UART_Receive+0xe8>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005472:	d10d      	bne.n	8005490 <HAL_UART_Receive+0xe0>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d104      	bne.n	8005486 <HAL_UART_Receive+0xd6>
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	227f      	movs	r2, #127	; 0x7f
 8005480:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005484:	e008      	b.n	8005498 <HAL_UART_Receive+0xe8>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	223f      	movs	r2, #63	; 0x3f
 800548a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800548e:	e003      	b.n	8005498 <HAL_UART_Receive+0xe8>
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800549e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054a8:	d108      	bne.n	80054bc <HAL_UART_Receive+0x10c>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d104      	bne.n	80054bc <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 80054b2:	2300      	movs	r3, #0
 80054b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	61bb      	str	r3, [r7, #24]
 80054ba:	e003      	b.n	80054c4 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054c0:	2300      	movs	r3, #0
 80054c2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80054cc:	e033      	b.n	8005536 <HAL_UART_Receive+0x186>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	9300      	str	r3, [sp, #0]
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	2200      	movs	r2, #0
 80054d6:	2120      	movs	r1, #32
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f000 fc26 	bl	8005d2a <UART_WaitOnFlagUntilTimeout>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d001      	beq.n	80054e8 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e033      	b.n	8005550 <HAL_UART_Receive+0x1a0>
      }
      if (pdata8bits == NULL)
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10c      	bne.n	8005508 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	8a7b      	ldrh	r3, [r7, #18]
 80054f8:	4013      	ands	r3, r2
 80054fa:	b29a      	uxth	r2, r3
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	3302      	adds	r3, #2
 8005504:	61bb      	str	r3, [r7, #24]
 8005506:	e00d      	b.n	8005524 <HAL_UART_Receive+0x174>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800550e:	b29b      	uxth	r3, r3
 8005510:	b2da      	uxtb	r2, r3
 8005512:	8a7b      	ldrh	r3, [r7, #18]
 8005514:	b2db      	uxtb	r3, r3
 8005516:	4013      	ands	r3, r2
 8005518:	b2da      	uxtb	r2, r3
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	3301      	adds	r3, #1
 8005522:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800552a:	b29b      	uxth	r3, r3
 800552c:	3b01      	subs	r3, #1
 800552e:	b29a      	uxth	r2, r3
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800553c:	b29b      	uxth	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d1c5      	bne.n	80054ce <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2220      	movs	r2, #32
 8005546:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800554a:	2300      	movs	r3, #0
 800554c:	e000      	b.n	8005550 <HAL_UART_Receive+0x1a0>
  }
  else
  {
    return HAL_BUSY;
 800554e:	2302      	movs	r3, #2
  }
}
 8005550:	4618      	mov	r0, r3
 8005552:	3720      	adds	r7, #32
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005558:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800555c:	b08c      	sub	sp, #48	; 0x30
 800555e:	af00      	add	r7, sp, #0
 8005560:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005562:	2300      	movs	r3, #0
 8005564:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	689a      	ldr	r2, [r3, #8]
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	431a      	orrs	r2, r3
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	695b      	ldr	r3, [r3, #20]
 8005576:	431a      	orrs	r2, r3
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	69db      	ldr	r3, [r3, #28]
 800557c:	4313      	orrs	r3, r2
 800557e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	4baa      	ldr	r3, [pc, #680]	; (8005830 <UART_SetConfig+0x2d8>)
 8005588:	4013      	ands	r3, r2
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	6812      	ldr	r2, [r2, #0]
 800558e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005590:	430b      	orrs	r3, r1
 8005592:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	68da      	ldr	r2, [r3, #12]
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	430a      	orrs	r2, r1
 80055a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a9f      	ldr	r2, [pc, #636]	; (8005834 <UART_SetConfig+0x2dc>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d004      	beq.n	80055c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	6a1b      	ldr	r3, [r3, #32]
 80055be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055c0:	4313      	orrs	r3, r2
 80055c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80055ce:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	6812      	ldr	r2, [r2, #0]
 80055d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055d8:	430b      	orrs	r3, r1
 80055da:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e2:	f023 010f 	bic.w	r1, r3, #15
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	430a      	orrs	r2, r1
 80055f0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a90      	ldr	r2, [pc, #576]	; (8005838 <UART_SetConfig+0x2e0>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d125      	bne.n	8005648 <UART_SetConfig+0xf0>
 80055fc:	4b8f      	ldr	r3, [pc, #572]	; (800583c <UART_SetConfig+0x2e4>)
 80055fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005602:	f003 0303 	and.w	r3, r3, #3
 8005606:	2b03      	cmp	r3, #3
 8005608:	d81a      	bhi.n	8005640 <UART_SetConfig+0xe8>
 800560a:	a201      	add	r2, pc, #4	; (adr r2, 8005610 <UART_SetConfig+0xb8>)
 800560c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005610:	08005621 	.word	0x08005621
 8005614:	08005631 	.word	0x08005631
 8005618:	08005629 	.word	0x08005629
 800561c:	08005639 	.word	0x08005639
 8005620:	2301      	movs	r3, #1
 8005622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005626:	e116      	b.n	8005856 <UART_SetConfig+0x2fe>
 8005628:	2302      	movs	r3, #2
 800562a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800562e:	e112      	b.n	8005856 <UART_SetConfig+0x2fe>
 8005630:	2304      	movs	r3, #4
 8005632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005636:	e10e      	b.n	8005856 <UART_SetConfig+0x2fe>
 8005638:	2308      	movs	r3, #8
 800563a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800563e:	e10a      	b.n	8005856 <UART_SetConfig+0x2fe>
 8005640:	2310      	movs	r3, #16
 8005642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005646:	e106      	b.n	8005856 <UART_SetConfig+0x2fe>
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a7c      	ldr	r2, [pc, #496]	; (8005840 <UART_SetConfig+0x2e8>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d138      	bne.n	80056c4 <UART_SetConfig+0x16c>
 8005652:	4b7a      	ldr	r3, [pc, #488]	; (800583c <UART_SetConfig+0x2e4>)
 8005654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005658:	f003 030c 	and.w	r3, r3, #12
 800565c:	2b0c      	cmp	r3, #12
 800565e:	d82d      	bhi.n	80056bc <UART_SetConfig+0x164>
 8005660:	a201      	add	r2, pc, #4	; (adr r2, 8005668 <UART_SetConfig+0x110>)
 8005662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005666:	bf00      	nop
 8005668:	0800569d 	.word	0x0800569d
 800566c:	080056bd 	.word	0x080056bd
 8005670:	080056bd 	.word	0x080056bd
 8005674:	080056bd 	.word	0x080056bd
 8005678:	080056ad 	.word	0x080056ad
 800567c:	080056bd 	.word	0x080056bd
 8005680:	080056bd 	.word	0x080056bd
 8005684:	080056bd 	.word	0x080056bd
 8005688:	080056a5 	.word	0x080056a5
 800568c:	080056bd 	.word	0x080056bd
 8005690:	080056bd 	.word	0x080056bd
 8005694:	080056bd 	.word	0x080056bd
 8005698:	080056b5 	.word	0x080056b5
 800569c:	2300      	movs	r3, #0
 800569e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056a2:	e0d8      	b.n	8005856 <UART_SetConfig+0x2fe>
 80056a4:	2302      	movs	r3, #2
 80056a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056aa:	e0d4      	b.n	8005856 <UART_SetConfig+0x2fe>
 80056ac:	2304      	movs	r3, #4
 80056ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056b2:	e0d0      	b.n	8005856 <UART_SetConfig+0x2fe>
 80056b4:	2308      	movs	r3, #8
 80056b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056ba:	e0cc      	b.n	8005856 <UART_SetConfig+0x2fe>
 80056bc:	2310      	movs	r3, #16
 80056be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056c2:	e0c8      	b.n	8005856 <UART_SetConfig+0x2fe>
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a5e      	ldr	r2, [pc, #376]	; (8005844 <UART_SetConfig+0x2ec>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d125      	bne.n	800571a <UART_SetConfig+0x1c2>
 80056ce:	4b5b      	ldr	r3, [pc, #364]	; (800583c <UART_SetConfig+0x2e4>)
 80056d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056d4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80056d8:	2b30      	cmp	r3, #48	; 0x30
 80056da:	d016      	beq.n	800570a <UART_SetConfig+0x1b2>
 80056dc:	2b30      	cmp	r3, #48	; 0x30
 80056de:	d818      	bhi.n	8005712 <UART_SetConfig+0x1ba>
 80056e0:	2b20      	cmp	r3, #32
 80056e2:	d00a      	beq.n	80056fa <UART_SetConfig+0x1a2>
 80056e4:	2b20      	cmp	r3, #32
 80056e6:	d814      	bhi.n	8005712 <UART_SetConfig+0x1ba>
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d002      	beq.n	80056f2 <UART_SetConfig+0x19a>
 80056ec:	2b10      	cmp	r3, #16
 80056ee:	d008      	beq.n	8005702 <UART_SetConfig+0x1aa>
 80056f0:	e00f      	b.n	8005712 <UART_SetConfig+0x1ba>
 80056f2:	2300      	movs	r3, #0
 80056f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056f8:	e0ad      	b.n	8005856 <UART_SetConfig+0x2fe>
 80056fa:	2302      	movs	r3, #2
 80056fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005700:	e0a9      	b.n	8005856 <UART_SetConfig+0x2fe>
 8005702:	2304      	movs	r3, #4
 8005704:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005708:	e0a5      	b.n	8005856 <UART_SetConfig+0x2fe>
 800570a:	2308      	movs	r3, #8
 800570c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005710:	e0a1      	b.n	8005856 <UART_SetConfig+0x2fe>
 8005712:	2310      	movs	r3, #16
 8005714:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005718:	e09d      	b.n	8005856 <UART_SetConfig+0x2fe>
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a4a      	ldr	r2, [pc, #296]	; (8005848 <UART_SetConfig+0x2f0>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d125      	bne.n	8005770 <UART_SetConfig+0x218>
 8005724:	4b45      	ldr	r3, [pc, #276]	; (800583c <UART_SetConfig+0x2e4>)
 8005726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800572a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800572e:	2bc0      	cmp	r3, #192	; 0xc0
 8005730:	d016      	beq.n	8005760 <UART_SetConfig+0x208>
 8005732:	2bc0      	cmp	r3, #192	; 0xc0
 8005734:	d818      	bhi.n	8005768 <UART_SetConfig+0x210>
 8005736:	2b80      	cmp	r3, #128	; 0x80
 8005738:	d00a      	beq.n	8005750 <UART_SetConfig+0x1f8>
 800573a:	2b80      	cmp	r3, #128	; 0x80
 800573c:	d814      	bhi.n	8005768 <UART_SetConfig+0x210>
 800573e:	2b00      	cmp	r3, #0
 8005740:	d002      	beq.n	8005748 <UART_SetConfig+0x1f0>
 8005742:	2b40      	cmp	r3, #64	; 0x40
 8005744:	d008      	beq.n	8005758 <UART_SetConfig+0x200>
 8005746:	e00f      	b.n	8005768 <UART_SetConfig+0x210>
 8005748:	2300      	movs	r3, #0
 800574a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800574e:	e082      	b.n	8005856 <UART_SetConfig+0x2fe>
 8005750:	2302      	movs	r3, #2
 8005752:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005756:	e07e      	b.n	8005856 <UART_SetConfig+0x2fe>
 8005758:	2304      	movs	r3, #4
 800575a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800575e:	e07a      	b.n	8005856 <UART_SetConfig+0x2fe>
 8005760:	2308      	movs	r3, #8
 8005762:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005766:	e076      	b.n	8005856 <UART_SetConfig+0x2fe>
 8005768:	2310      	movs	r3, #16
 800576a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800576e:	e072      	b.n	8005856 <UART_SetConfig+0x2fe>
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a35      	ldr	r2, [pc, #212]	; (800584c <UART_SetConfig+0x2f4>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d12a      	bne.n	80057d0 <UART_SetConfig+0x278>
 800577a:	4b30      	ldr	r3, [pc, #192]	; (800583c <UART_SetConfig+0x2e4>)
 800577c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005780:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005784:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005788:	d01a      	beq.n	80057c0 <UART_SetConfig+0x268>
 800578a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800578e:	d81b      	bhi.n	80057c8 <UART_SetConfig+0x270>
 8005790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005794:	d00c      	beq.n	80057b0 <UART_SetConfig+0x258>
 8005796:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800579a:	d815      	bhi.n	80057c8 <UART_SetConfig+0x270>
 800579c:	2b00      	cmp	r3, #0
 800579e:	d003      	beq.n	80057a8 <UART_SetConfig+0x250>
 80057a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057a4:	d008      	beq.n	80057b8 <UART_SetConfig+0x260>
 80057a6:	e00f      	b.n	80057c8 <UART_SetConfig+0x270>
 80057a8:	2300      	movs	r3, #0
 80057aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057ae:	e052      	b.n	8005856 <UART_SetConfig+0x2fe>
 80057b0:	2302      	movs	r3, #2
 80057b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057b6:	e04e      	b.n	8005856 <UART_SetConfig+0x2fe>
 80057b8:	2304      	movs	r3, #4
 80057ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057be:	e04a      	b.n	8005856 <UART_SetConfig+0x2fe>
 80057c0:	2308      	movs	r3, #8
 80057c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057c6:	e046      	b.n	8005856 <UART_SetConfig+0x2fe>
 80057c8:	2310      	movs	r3, #16
 80057ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057ce:	e042      	b.n	8005856 <UART_SetConfig+0x2fe>
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a17      	ldr	r2, [pc, #92]	; (8005834 <UART_SetConfig+0x2dc>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d13a      	bne.n	8005850 <UART_SetConfig+0x2f8>
 80057da:	4b18      	ldr	r3, [pc, #96]	; (800583c <UART_SetConfig+0x2e4>)
 80057dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80057e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057e8:	d01a      	beq.n	8005820 <UART_SetConfig+0x2c8>
 80057ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057ee:	d81b      	bhi.n	8005828 <UART_SetConfig+0x2d0>
 80057f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057f4:	d00c      	beq.n	8005810 <UART_SetConfig+0x2b8>
 80057f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057fa:	d815      	bhi.n	8005828 <UART_SetConfig+0x2d0>
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d003      	beq.n	8005808 <UART_SetConfig+0x2b0>
 8005800:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005804:	d008      	beq.n	8005818 <UART_SetConfig+0x2c0>
 8005806:	e00f      	b.n	8005828 <UART_SetConfig+0x2d0>
 8005808:	2300      	movs	r3, #0
 800580a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800580e:	e022      	b.n	8005856 <UART_SetConfig+0x2fe>
 8005810:	2302      	movs	r3, #2
 8005812:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005816:	e01e      	b.n	8005856 <UART_SetConfig+0x2fe>
 8005818:	2304      	movs	r3, #4
 800581a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800581e:	e01a      	b.n	8005856 <UART_SetConfig+0x2fe>
 8005820:	2308      	movs	r3, #8
 8005822:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005826:	e016      	b.n	8005856 <UART_SetConfig+0x2fe>
 8005828:	2310      	movs	r3, #16
 800582a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800582e:	e012      	b.n	8005856 <UART_SetConfig+0x2fe>
 8005830:	cfff69f3 	.word	0xcfff69f3
 8005834:	40008000 	.word	0x40008000
 8005838:	40013800 	.word	0x40013800
 800583c:	40021000 	.word	0x40021000
 8005840:	40004400 	.word	0x40004400
 8005844:	40004800 	.word	0x40004800
 8005848:	40004c00 	.word	0x40004c00
 800584c:	40005000 	.word	0x40005000
 8005850:	2310      	movs	r3, #16
 8005852:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4aae      	ldr	r2, [pc, #696]	; (8005b14 <UART_SetConfig+0x5bc>)
 800585c:	4293      	cmp	r3, r2
 800585e:	f040 8097 	bne.w	8005990 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005862:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005866:	2b08      	cmp	r3, #8
 8005868:	d823      	bhi.n	80058b2 <UART_SetConfig+0x35a>
 800586a:	a201      	add	r2, pc, #4	; (adr r2, 8005870 <UART_SetConfig+0x318>)
 800586c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005870:	08005895 	.word	0x08005895
 8005874:	080058b3 	.word	0x080058b3
 8005878:	0800589d 	.word	0x0800589d
 800587c:	080058b3 	.word	0x080058b3
 8005880:	080058a3 	.word	0x080058a3
 8005884:	080058b3 	.word	0x080058b3
 8005888:	080058b3 	.word	0x080058b3
 800588c:	080058b3 	.word	0x080058b3
 8005890:	080058ab 	.word	0x080058ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005894:	f7fd fb0e 	bl	8002eb4 <HAL_RCC_GetPCLK1Freq>
 8005898:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800589a:	e010      	b.n	80058be <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800589c:	4b9e      	ldr	r3, [pc, #632]	; (8005b18 <UART_SetConfig+0x5c0>)
 800589e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80058a0:	e00d      	b.n	80058be <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058a2:	f7fd fa71 	bl	8002d88 <HAL_RCC_GetSysClockFreq>
 80058a6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80058a8:	e009      	b.n	80058be <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80058b0:	e005      	b.n	80058be <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80058b2:	2300      	movs	r3, #0
 80058b4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80058bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80058be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f000 8130 	beq.w	8005b26 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ca:	4a94      	ldr	r2, [pc, #592]	; (8005b1c <UART_SetConfig+0x5c4>)
 80058cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058d0:	461a      	mov	r2, r3
 80058d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80058d8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	685a      	ldr	r2, [r3, #4]
 80058de:	4613      	mov	r3, r2
 80058e0:	005b      	lsls	r3, r3, #1
 80058e2:	4413      	add	r3, r2
 80058e4:	69ba      	ldr	r2, [r7, #24]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d305      	bcc.n	80058f6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80058f0:	69ba      	ldr	r2, [r7, #24]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d903      	bls.n	80058fe <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80058fc:	e113      	b.n	8005b26 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005900:	2200      	movs	r2, #0
 8005902:	60bb      	str	r3, [r7, #8]
 8005904:	60fa      	str	r2, [r7, #12]
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590a:	4a84      	ldr	r2, [pc, #528]	; (8005b1c <UART_SetConfig+0x5c4>)
 800590c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005910:	b29b      	uxth	r3, r3
 8005912:	2200      	movs	r2, #0
 8005914:	603b      	str	r3, [r7, #0]
 8005916:	607a      	str	r2, [r7, #4]
 8005918:	e9d7 2300 	ldrd	r2, r3, [r7]
 800591c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005920:	f7fa fcbe 	bl	80002a0 <__aeabi_uldivmod>
 8005924:	4602      	mov	r2, r0
 8005926:	460b      	mov	r3, r1
 8005928:	4610      	mov	r0, r2
 800592a:	4619      	mov	r1, r3
 800592c:	f04f 0200 	mov.w	r2, #0
 8005930:	f04f 0300 	mov.w	r3, #0
 8005934:	020b      	lsls	r3, r1, #8
 8005936:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800593a:	0202      	lsls	r2, r0, #8
 800593c:	6979      	ldr	r1, [r7, #20]
 800593e:	6849      	ldr	r1, [r1, #4]
 8005940:	0849      	lsrs	r1, r1, #1
 8005942:	2000      	movs	r0, #0
 8005944:	460c      	mov	r4, r1
 8005946:	4605      	mov	r5, r0
 8005948:	eb12 0804 	adds.w	r8, r2, r4
 800594c:	eb43 0905 	adc.w	r9, r3, r5
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	469a      	mov	sl, r3
 8005958:	4693      	mov	fp, r2
 800595a:	4652      	mov	r2, sl
 800595c:	465b      	mov	r3, fp
 800595e:	4640      	mov	r0, r8
 8005960:	4649      	mov	r1, r9
 8005962:	f7fa fc9d 	bl	80002a0 <__aeabi_uldivmod>
 8005966:	4602      	mov	r2, r0
 8005968:	460b      	mov	r3, r1
 800596a:	4613      	mov	r3, r2
 800596c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800596e:	6a3b      	ldr	r3, [r7, #32]
 8005970:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005974:	d308      	bcc.n	8005988 <UART_SetConfig+0x430>
 8005976:	6a3b      	ldr	r3, [r7, #32]
 8005978:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800597c:	d204      	bcs.n	8005988 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	6a3a      	ldr	r2, [r7, #32]
 8005984:	60da      	str	r2, [r3, #12]
 8005986:	e0ce      	b.n	8005b26 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800598e:	e0ca      	b.n	8005b26 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	69db      	ldr	r3, [r3, #28]
 8005994:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005998:	d166      	bne.n	8005a68 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800599a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800599e:	2b08      	cmp	r3, #8
 80059a0:	d827      	bhi.n	80059f2 <UART_SetConfig+0x49a>
 80059a2:	a201      	add	r2, pc, #4	; (adr r2, 80059a8 <UART_SetConfig+0x450>)
 80059a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a8:	080059cd 	.word	0x080059cd
 80059ac:	080059d5 	.word	0x080059d5
 80059b0:	080059dd 	.word	0x080059dd
 80059b4:	080059f3 	.word	0x080059f3
 80059b8:	080059e3 	.word	0x080059e3
 80059bc:	080059f3 	.word	0x080059f3
 80059c0:	080059f3 	.word	0x080059f3
 80059c4:	080059f3 	.word	0x080059f3
 80059c8:	080059eb 	.word	0x080059eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059cc:	f7fd fa72 	bl	8002eb4 <HAL_RCC_GetPCLK1Freq>
 80059d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80059d2:	e014      	b.n	80059fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059d4:	f7fd fa84 	bl	8002ee0 <HAL_RCC_GetPCLK2Freq>
 80059d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80059da:	e010      	b.n	80059fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059dc:	4b4e      	ldr	r3, [pc, #312]	; (8005b18 <UART_SetConfig+0x5c0>)
 80059de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80059e0:	e00d      	b.n	80059fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059e2:	f7fd f9d1 	bl	8002d88 <HAL_RCC_GetSysClockFreq>
 80059e6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80059e8:	e009      	b.n	80059fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80059f0:	e005      	b.n	80059fe <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80059f2:	2300      	movs	r3, #0
 80059f4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80059fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80059fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	f000 8090 	beq.w	8005b26 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0a:	4a44      	ldr	r2, [pc, #272]	; (8005b1c <UART_SetConfig+0x5c4>)
 8005a0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a10:	461a      	mov	r2, r3
 8005a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a14:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a18:	005a      	lsls	r2, r3, #1
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	085b      	lsrs	r3, r3, #1
 8005a20:	441a      	add	r2, r3
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a2a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a2c:	6a3b      	ldr	r3, [r7, #32]
 8005a2e:	2b0f      	cmp	r3, #15
 8005a30:	d916      	bls.n	8005a60 <UART_SetConfig+0x508>
 8005a32:	6a3b      	ldr	r3, [r7, #32]
 8005a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a38:	d212      	bcs.n	8005a60 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a3a:	6a3b      	ldr	r3, [r7, #32]
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	f023 030f 	bic.w	r3, r3, #15
 8005a42:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a44:	6a3b      	ldr	r3, [r7, #32]
 8005a46:	085b      	lsrs	r3, r3, #1
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	f003 0307 	and.w	r3, r3, #7
 8005a4e:	b29a      	uxth	r2, r3
 8005a50:	8bfb      	ldrh	r3, [r7, #30]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	8bfa      	ldrh	r2, [r7, #30]
 8005a5c:	60da      	str	r2, [r3, #12]
 8005a5e:	e062      	b.n	8005b26 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005a66:	e05e      	b.n	8005b26 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a68:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005a6c:	2b08      	cmp	r3, #8
 8005a6e:	d828      	bhi.n	8005ac2 <UART_SetConfig+0x56a>
 8005a70:	a201      	add	r2, pc, #4	; (adr r2, 8005a78 <UART_SetConfig+0x520>)
 8005a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a76:	bf00      	nop
 8005a78:	08005a9d 	.word	0x08005a9d
 8005a7c:	08005aa5 	.word	0x08005aa5
 8005a80:	08005aad 	.word	0x08005aad
 8005a84:	08005ac3 	.word	0x08005ac3
 8005a88:	08005ab3 	.word	0x08005ab3
 8005a8c:	08005ac3 	.word	0x08005ac3
 8005a90:	08005ac3 	.word	0x08005ac3
 8005a94:	08005ac3 	.word	0x08005ac3
 8005a98:	08005abb 	.word	0x08005abb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a9c:	f7fd fa0a 	bl	8002eb4 <HAL_RCC_GetPCLK1Freq>
 8005aa0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005aa2:	e014      	b.n	8005ace <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005aa4:	f7fd fa1c 	bl	8002ee0 <HAL_RCC_GetPCLK2Freq>
 8005aa8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005aaa:	e010      	b.n	8005ace <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005aac:	4b1a      	ldr	r3, [pc, #104]	; (8005b18 <UART_SetConfig+0x5c0>)
 8005aae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ab0:	e00d      	b.n	8005ace <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ab2:	f7fd f969 	bl	8002d88 <HAL_RCC_GetSysClockFreq>
 8005ab6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ab8:	e009      	b.n	8005ace <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005aba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005abe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ac0:	e005      	b.n	8005ace <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005acc:	bf00      	nop
    }

    if (pclk != 0U)
 8005ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d028      	beq.n	8005b26 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad8:	4a10      	ldr	r2, [pc, #64]	; (8005b1c <UART_SetConfig+0x5c4>)
 8005ada:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ade:	461a      	mov	r2, r3
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae2:	fbb3 f2f2 	udiv	r2, r3, r2
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	085b      	lsrs	r3, r3, #1
 8005aec:	441a      	add	r2, r3
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005af6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005af8:	6a3b      	ldr	r3, [r7, #32]
 8005afa:	2b0f      	cmp	r3, #15
 8005afc:	d910      	bls.n	8005b20 <UART_SetConfig+0x5c8>
 8005afe:	6a3b      	ldr	r3, [r7, #32]
 8005b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b04:	d20c      	bcs.n	8005b20 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b06:	6a3b      	ldr	r3, [r7, #32]
 8005b08:	b29a      	uxth	r2, r3
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	60da      	str	r2, [r3, #12]
 8005b10:	e009      	b.n	8005b26 <UART_SetConfig+0x5ce>
 8005b12:	bf00      	nop
 8005b14:	40008000 	.word	0x40008000
 8005b18:	00f42400 	.word	0x00f42400
 8005b1c:	08009d1c 	.word	0x08009d1c
      }
      else
      {
        ret = HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	2201      	movs	r2, #1
 8005b32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005b42:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3730      	adds	r7, #48	; 0x30
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005b50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b5c:	f003 0301 	and.w	r3, r3, #1
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00a      	beq.n	8005b7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	430a      	orrs	r2, r1
 8005b78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7e:	f003 0302 	and.w	r3, r3, #2
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00a      	beq.n	8005b9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	430a      	orrs	r2, r1
 8005b9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba0:	f003 0304 	and.w	r3, r3, #4
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d00a      	beq.n	8005bbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	430a      	orrs	r2, r1
 8005bbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc2:	f003 0308 	and.w	r3, r3, #8
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00a      	beq.n	8005be0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	430a      	orrs	r2, r1
 8005bde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be4:	f003 0310 	and.w	r3, r3, #16
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d00a      	beq.n	8005c02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c06:	f003 0320 	and.w	r3, r3, #32
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00a      	beq.n	8005c24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	430a      	orrs	r2, r1
 8005c22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d01a      	beq.n	8005c66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	430a      	orrs	r2, r1
 8005c44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c4e:	d10a      	bne.n	8005c66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	430a      	orrs	r2, r1
 8005c64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00a      	beq.n	8005c88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	430a      	orrs	r2, r1
 8005c86:	605a      	str	r2, [r3, #4]
  }
}
 8005c88:	bf00      	nop
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b086      	sub	sp, #24
 8005c98:	af02      	add	r7, sp, #8
 8005c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ca4:	f7fb fd78 	bl	8001798 <HAL_GetTick>
 8005ca8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0308 	and.w	r3, r3, #8
 8005cb4:	2b08      	cmp	r3, #8
 8005cb6:	d10e      	bne.n	8005cd6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005cbc:	9300      	str	r3, [sp, #0]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 f82f 	bl	8005d2a <UART_WaitOnFlagUntilTimeout>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d001      	beq.n	8005cd6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e025      	b.n	8005d22 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0304 	and.w	r3, r3, #4
 8005ce0:	2b04      	cmp	r3, #4
 8005ce2:	d10e      	bne.n	8005d02 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ce4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ce8:	9300      	str	r3, [sp, #0]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 f819 	bl	8005d2a <UART_WaitOnFlagUntilTimeout>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d001      	beq.n	8005d02 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e00f      	b.n	8005d22 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2220      	movs	r2, #32
 8005d06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2220      	movs	r2, #32
 8005d0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3710      	adds	r7, #16
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b09c      	sub	sp, #112	; 0x70
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	60f8      	str	r0, [r7, #12]
 8005d32:	60b9      	str	r1, [r7, #8]
 8005d34:	603b      	str	r3, [r7, #0]
 8005d36:	4613      	mov	r3, r2
 8005d38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d3a:	e0a9      	b.n	8005e90 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d42:	f000 80a5 	beq.w	8005e90 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d46:	f7fb fd27 	bl	8001798 <HAL_GetTick>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d302      	bcc.n	8005d5c <UART_WaitOnFlagUntilTimeout+0x32>
 8005d56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d140      	bne.n	8005dde <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d64:	e853 3f00 	ldrex	r3, [r3]
 8005d68:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d70:	667b      	str	r3, [r7, #100]	; 0x64
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	461a      	mov	r2, r3
 8005d78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d7c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005d80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005d82:	e841 2300 	strex	r3, r2, [r1]
 8005d86:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005d88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1e6      	bne.n	8005d5c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	3308      	adds	r3, #8
 8005d94:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d98:	e853 3f00 	ldrex	r3, [r3]
 8005d9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da0:	f023 0301 	bic.w	r3, r3, #1
 8005da4:	663b      	str	r3, [r7, #96]	; 0x60
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	3308      	adds	r3, #8
 8005dac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005dae:	64ba      	str	r2, [r7, #72]	; 0x48
 8005db0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005db4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005db6:	e841 2300 	strex	r3, r2, [r1]
 8005dba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005dbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d1e5      	bne.n	8005d8e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2220      	movs	r2, #32
 8005dc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2220      	movs	r2, #32
 8005dce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e069      	b.n	8005eb2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 0304 	and.w	r3, r3, #4
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d051      	beq.n	8005e90 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	69db      	ldr	r3, [r3, #28]
 8005df2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005df6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dfa:	d149      	bne.n	8005e90 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e04:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0e:	e853 3f00 	ldrex	r3, [r3]
 8005e12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e16:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	461a      	mov	r2, r3
 8005e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e24:	637b      	str	r3, [r7, #52]	; 0x34
 8005e26:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e2c:	e841 2300 	strex	r3, r2, [r1]
 8005e30:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1e6      	bne.n	8005e06 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	3308      	adds	r3, #8
 8005e3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	e853 3f00 	ldrex	r3, [r3]
 8005e46:	613b      	str	r3, [r7, #16]
   return(result);
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	f023 0301 	bic.w	r3, r3, #1
 8005e4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	3308      	adds	r3, #8
 8005e56:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005e58:	623a      	str	r2, [r7, #32]
 8005e5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e5c:	69f9      	ldr	r1, [r7, #28]
 8005e5e:	6a3a      	ldr	r2, [r7, #32]
 8005e60:	e841 2300 	strex	r3, r2, [r1]
 8005e64:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d1e5      	bne.n	8005e38 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2220      	movs	r2, #32
 8005e70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2220      	movs	r2, #32
 8005e78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2220      	movs	r2, #32
 8005e80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	e010      	b.n	8005eb2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	69da      	ldr	r2, [r3, #28]
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	4013      	ands	r3, r2
 8005e9a:	68ba      	ldr	r2, [r7, #8]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	bf0c      	ite	eq
 8005ea0:	2301      	moveq	r3, #1
 8005ea2:	2300      	movne	r3, #0
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	79fb      	ldrb	r3, [r7, #7]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	f43f af46 	beq.w	8005d3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3770      	adds	r7, #112	; 0x70
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}

08005eba <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005eba:	b480      	push	{r7}
 8005ebc:	b085      	sub	sp, #20
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d101      	bne.n	8005ed0 <HAL_UARTEx_DisableFifoMode+0x16>
 8005ecc:	2302      	movs	r3, #2
 8005ece:	e027      	b.n	8005f20 <HAL_UARTEx_DisableFifoMode+0x66>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2224      	movs	r2, #36	; 0x24
 8005edc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f022 0201 	bic.w	r2, r2, #1
 8005ef6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005efe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68fa      	ldr	r2, [r7, #12]
 8005f0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2220      	movs	r2, #32
 8005f12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3714      	adds	r7, #20
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d101      	bne.n	8005f44 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005f40:	2302      	movs	r3, #2
 8005f42:	e02d      	b.n	8005fa0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2224      	movs	r2, #36	; 0x24
 8005f50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f022 0201 	bic.w	r2, r2, #1
 8005f6a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	683a      	ldr	r2, [r7, #0]
 8005f7c:	430a      	orrs	r2, r1
 8005f7e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 f84f 	bl	8006024 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2220      	movs	r2, #32
 8005f92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3710      	adds	r7, #16
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d101      	bne.n	8005fc0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005fbc:	2302      	movs	r3, #2
 8005fbe:	e02d      	b.n	800601c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2224      	movs	r2, #36	; 0x24
 8005fcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f022 0201 	bic.w	r2, r2, #1
 8005fe6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	683a      	ldr	r2, [r7, #0]
 8005ff8:	430a      	orrs	r2, r1
 8005ffa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 f811 	bl	8006024 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2220      	movs	r2, #32
 800600e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800601a:	2300      	movs	r3, #0
}
 800601c:	4618      	mov	r0, r3
 800601e:	3710      	adds	r7, #16
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006024:	b480      	push	{r7}
 8006026:	b085      	sub	sp, #20
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006030:	2b00      	cmp	r3, #0
 8006032:	d108      	bne.n	8006046 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006044:	e031      	b.n	80060aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006046:	2308      	movs	r3, #8
 8006048:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800604a:	2308      	movs	r3, #8
 800604c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	0e5b      	lsrs	r3, r3, #25
 8006056:	b2db      	uxtb	r3, r3
 8006058:	f003 0307 	and.w	r3, r3, #7
 800605c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	0f5b      	lsrs	r3, r3, #29
 8006066:	b2db      	uxtb	r3, r3
 8006068:	f003 0307 	and.w	r3, r3, #7
 800606c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800606e:	7bbb      	ldrb	r3, [r7, #14]
 8006070:	7b3a      	ldrb	r2, [r7, #12]
 8006072:	4911      	ldr	r1, [pc, #68]	; (80060b8 <UARTEx_SetNbDataToProcess+0x94>)
 8006074:	5c8a      	ldrb	r2, [r1, r2]
 8006076:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800607a:	7b3a      	ldrb	r2, [r7, #12]
 800607c:	490f      	ldr	r1, [pc, #60]	; (80060bc <UARTEx_SetNbDataToProcess+0x98>)
 800607e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006080:	fb93 f3f2 	sdiv	r3, r3, r2
 8006084:	b29a      	uxth	r2, r3
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800608c:	7bfb      	ldrb	r3, [r7, #15]
 800608e:	7b7a      	ldrb	r2, [r7, #13]
 8006090:	4909      	ldr	r1, [pc, #36]	; (80060b8 <UARTEx_SetNbDataToProcess+0x94>)
 8006092:	5c8a      	ldrb	r2, [r1, r2]
 8006094:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006098:	7b7a      	ldrb	r2, [r7, #13]
 800609a:	4908      	ldr	r1, [pc, #32]	; (80060bc <UARTEx_SetNbDataToProcess+0x98>)
 800609c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800609e:	fb93 f3f2 	sdiv	r3, r3, r2
 80060a2:	b29a      	uxth	r2, r3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80060aa:	bf00      	nop
 80060ac:	3714      	adds	r7, #20
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr
 80060b6:	bf00      	nop
 80060b8:	08009d34 	.word	0x08009d34
 80060bc:	08009d3c 	.word	0x08009d3c

080060c0 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b087      	sub	sp, #28
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060d4:	683a      	ldr	r2, [r7, #0]
 80060d6:	6812      	ldr	r2, [r2, #0]
 80060d8:	f023 0101 	bic.w	r1, r3, #1
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	2b08      	cmp	r3, #8
 80060e8:	d102      	bne.n	80060f0 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80060ea:	2340      	movs	r3, #64	; 0x40
 80060ec:	617b      	str	r3, [r7, #20]
 80060ee:	e001      	b.n	80060f4 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80060f0:	2300      	movs	r3, #0
 80060f2:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8006100:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8006106:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800610c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8006112:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8006118:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800611e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8006124:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800612a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8006130:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8006136:	4313      	orrs	r3, r2
 8006138:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800613e:	693a      	ldr	r2, [r7, #16]
 8006140:	4313      	orrs	r3, r2
 8006142:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	4313      	orrs	r3, r2
 800614c:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006152:	693a      	ldr	r2, [r7, #16]
 8006154:	4313      	orrs	r3, r2
 8006156:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615c:	693a      	ldr	r2, [r7, #16]
 800615e:	4313      	orrs	r3, r2
 8006160:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 8006162:	4b23      	ldr	r3, [pc, #140]	; (80061f0 <FMC_NORSRAM_Init+0x130>)
 8006164:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800616c:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006174:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 800617c:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8006184:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	43db      	mvns	r3, r3
 8006194:	ea02 0103 	and.w	r1, r2, r3
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	4319      	orrs	r1, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061ae:	d10c      	bne.n	80061ca <FMC_NORSRAM_Init+0x10a>
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d008      	beq.n	80061ca <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c4:	431a      	orrs	r2, r3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d006      	beq.n	80061e0 <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061da:	431a      	orrs	r2, r3
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	371c      	adds	r7, #28
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr
 80061ee:	bf00      	nop
 80061f0:	0008fb7f 	.word	0x0008fb7f

080061f4 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b087      	sub	sp, #28
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
#if defined(FMC_BTRx_DATAHLD)
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	1c5a      	adds	r2, r3, #1
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	011b      	lsls	r3, r3, #4
 8006214:	431a      	orrs	r2, r3
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	021b      	lsls	r3, r3, #8
 800621c:	431a      	orrs	r2, r3
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	079b      	lsls	r3, r3, #30
 8006224:	431a      	orrs	r2, r3
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	041b      	lsls	r3, r3, #16
 800622c:	431a      	orrs	r2, r3
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	695b      	ldr	r3, [r3, #20]
 8006232:	3b01      	subs	r3, #1
 8006234:	051b      	lsls	r3, r3, #20
 8006236:	431a      	orrs	r2, r3
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	699b      	ldr	r3, [r3, #24]
 800623c:	3b02      	subs	r3, #2
 800623e:	061b      	lsls	r3, r3, #24
 8006240:	ea42 0103 	orr.w	r1, r2, r3
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	69db      	ldr	r3, [r3, #28]
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	3201      	adds	r2, #1
 800624c:	4319      	orrs	r1, r3
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800625c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006260:	d113      	bne.n	800628a <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800626a:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	695b      	ldr	r3, [r3, #20]
 8006270:	3b01      	subs	r3, #1
 8006272:	051b      	lsls	r3, r3, #20
 8006274:	697a      	ldr	r2, [r7, #20]
 8006276:	4313      	orrs	r3, r2
 8006278:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	431a      	orrs	r2, r3
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800628a:	2300      	movs	r3, #0
}
 800628c:	4618      	mov	r0, r3
 800628e:	371c      	adds	r7, #28
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	607a      	str	r2, [r7, #4]
 80062a4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062ac:	d121      	bne.n	80062f2 <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FMC_BTRx_DATAHLD)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062b6:	f003 627f 	and.w	r2, r3, #267386880	; 0xff00000
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	6819      	ldr	r1, [r3, #0]
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	011b      	lsls	r3, r3, #4
 80062c4:	4319      	orrs	r1, r3
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	021b      	lsls	r3, r3, #8
 80062cc:	4319      	orrs	r1, r3
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	079b      	lsls	r3, r3, #30
 80062d4:	4319      	orrs	r1, r3
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	69db      	ldr	r3, [r3, #28]
 80062da:	4319      	orrs	r1, r3
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	041b      	lsls	r3, r3, #16
 80062e2:	430b      	orrs	r3, r1
 80062e4:	ea42 0103 	orr.w	r1, r2, r3
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80062f0:	e005      	b.n	80062fe <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80062fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80062fe:	2300      	movs	r3, #0
}
 8006300:	4618      	mov	r0, r3
 8006302:	3714      	adds	r7, #20
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <ai_log_err>:

static ai_buffer* ai_input;
static ai_buffer* ai_output;

static void ai_log_err(const ai_error err, const char *fct)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d009      	beq.n	8006330 <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 800631c:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800631e:	461a      	mov	r2, r3
        err.type, err.code);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8006326:	6839      	ldr	r1, [r7, #0]
 8006328:	4806      	ldr	r0, [pc, #24]	; (8006344 <ai_log_err+0x38>)
 800632a:	f002 fcd1 	bl	8008cd0 <iprintf>
 800632e:	e008      	b.n	8006342 <ai_log_err+0x36>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8006330:	793b      	ldrb	r3, [r7, #4]
 8006332:	4619      	mov	r1, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800633a:	461a      	mov	r2, r3
 800633c:	4802      	ldr	r0, [pc, #8]	; (8006348 <ai_log_err+0x3c>)
 800633e:	f002 fcc7 	bl	8008cd0 <iprintf>

  do {} while (1);
 8006342:	e7fe      	b.n	8006342 <ai_log_err+0x36>
 8006344:	08009ba0 	.word	0x08009ba0
 8006348:	08009bd4 	.word	0x08009bd4

0800634c <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle *act_addr)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b086      	sub	sp, #24
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* Create and initialize an instance of the model */
  err = ai_wine_quality_create_and_init(&wine_quality, act_addr, NULL);
 8006354:	2200      	movs	r2, #0
 8006356:	6879      	ldr	r1, [r7, #4]
 8006358:	4828      	ldr	r0, [pc, #160]	; (80063fc <ai_boostrap+0xb0>)
 800635a:	f000 faa9 	bl	80068b0 <ai_wine_quality_create_and_init>
 800635e:	4603      	mov	r3, r0
 8006360:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 8006362:	7b3b      	ldrb	r3, [r7, #12]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d006      	beq.n	8006376 <ai_boostrap+0x2a>
    ai_log_err(err, "ai_wine_quality_create_and_init");
 8006368:	4925      	ldr	r1, [pc, #148]	; (8006400 <ai_boostrap+0xb4>)
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	f7ff ffce 	bl	800630c <ai_log_err>
    return -1;
 8006370:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006374:	e03e      	b.n	80063f4 <ai_boostrap+0xa8>
  }

  ai_input = ai_wine_quality_inputs_get(wine_quality, NULL);
 8006376:	4b21      	ldr	r3, [pc, #132]	; (80063fc <ai_boostrap+0xb0>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2100      	movs	r1, #0
 800637c:	4618      	mov	r0, r3
 800637e:	f000 fb0b 	bl	8006998 <ai_wine_quality_inputs_get>
 8006382:	4603      	mov	r3, r0
 8006384:	4a1f      	ldr	r2, [pc, #124]	; (8006404 <ai_boostrap+0xb8>)
 8006386:	6013      	str	r3, [r2, #0]
  ai_output = ai_wine_quality_outputs_get(wine_quality, NULL);
 8006388:	4b1c      	ldr	r3, [pc, #112]	; (80063fc <ai_boostrap+0xb0>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2100      	movs	r1, #0
 800638e:	4618      	mov	r0, r3
 8006390:	f000 fb1c 	bl	80069cc <ai_wine_quality_outputs_get>
 8006394:	4603      	mov	r3, r0
 8006396:	4a1c      	ldr	r2, [pc, #112]	; (8006408 <ai_boostrap+0xbc>)
 8006398:	6013      	str	r3, [r2, #0]

#if defined(AI_WINE_QUALITY_INPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-inputs" option is used, memory buffer can be
   *  used from the activations buffer. This is not mandatory.
   */
  for (int idx=0; idx < AI_WINE_QUALITY_IN_NUM; idx++) {
 800639a:	2300      	movs	r3, #0
 800639c:	617b      	str	r3, [r7, #20]
 800639e:	e00f      	b.n	80063c0 <ai_boostrap+0x74>
	data_ins[idx] = ai_input[idx].data;
 80063a0:	4b18      	ldr	r3, [pc, #96]	; (8006404 <ai_boostrap+0xb8>)
 80063a2:	6819      	ldr	r1, [r3, #0]
 80063a4:	697a      	ldr	r2, [r7, #20]
 80063a6:	4613      	mov	r3, r2
 80063a8:	00db      	lsls	r3, r3, #3
 80063aa:	1a9b      	subs	r3, r3, r2
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	440b      	add	r3, r1
 80063b0:	685a      	ldr	r2, [r3, #4]
 80063b2:	4916      	ldr	r1, [pc, #88]	; (800640c <ai_boostrap+0xc0>)
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_WINE_QUALITY_IN_NUM; idx++) {
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	3301      	adds	r3, #1
 80063be:	617b      	str	r3, [r7, #20]
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	ddec      	ble.n	80063a0 <ai_boostrap+0x54>

#if defined(AI_WINE_QUALITY_OUTPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-outputs" option is used, memory buffer can be
   *  used from the activations buffer. This is no mandatory.
   */
  for (int idx=0; idx < AI_WINE_QUALITY_OUT_NUM; idx++) {
 80063c6:	2300      	movs	r3, #0
 80063c8:	613b      	str	r3, [r7, #16]
 80063ca:	e00f      	b.n	80063ec <ai_boostrap+0xa0>
	data_outs[idx] = ai_output[idx].data;
 80063cc:	4b0e      	ldr	r3, [pc, #56]	; (8006408 <ai_boostrap+0xbc>)
 80063ce:	6819      	ldr	r1, [r3, #0]
 80063d0:	693a      	ldr	r2, [r7, #16]
 80063d2:	4613      	mov	r3, r2
 80063d4:	00db      	lsls	r3, r3, #3
 80063d6:	1a9b      	subs	r3, r3, r2
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	440b      	add	r3, r1
 80063dc:	685a      	ldr	r2, [r3, #4]
 80063de:	490c      	ldr	r1, [pc, #48]	; (8006410 <ai_boostrap+0xc4>)
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_WINE_QUALITY_OUT_NUM; idx++) {
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	3301      	adds	r3, #1
 80063ea:	613b      	str	r3, [r7, #16]
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	ddec      	ble.n	80063cc <ai_boostrap+0x80>
  for (int idx=0; idx < AI_WINE_QUALITY_OUT_NUM; idx++) {
	ai_output[idx].data = data_outs[idx];
  }
#endif

  return 0;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3718      	adds	r7, #24
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	20001120 	.word	0x20001120
 8006400:	08009c04 	.word	0x08009c04
 8006404:	20001124 	.word	0x20001124
 8006408:	20001128 	.word	0x20001128
 800640c:	20000c8c 	.word	0x20000c8c
 8006410:	20000c90 	.word	0x20000c90

08006414 <ai_run>:

static int ai_run(void)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
  ai_i32 batch;

  batch = ai_wine_quality_run(wine_quality, ai_input, ai_output);
 800641a:	4b0f      	ldr	r3, [pc, #60]	; (8006458 <ai_run+0x44>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a0f      	ldr	r2, [pc, #60]	; (800645c <ai_run+0x48>)
 8006420:	6811      	ldr	r1, [r2, #0]
 8006422:	4a0f      	ldr	r2, [pc, #60]	; (8006460 <ai_run+0x4c>)
 8006424:	6812      	ldr	r2, [r2, #0]
 8006426:	4618      	mov	r0, r3
 8006428:	f000 fb26 	bl	8006a78 <ai_wine_quality_run>
 800642c:	6078      	str	r0, [r7, #4]
  if (batch != 1) {
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2b01      	cmp	r3, #1
 8006432:	d00c      	beq.n	800644e <ai_run+0x3a>
    ai_log_err(ai_wine_quality_get_error(wine_quality),
 8006434:	4b08      	ldr	r3, [pc, #32]	; (8006458 <ai_run+0x44>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4618      	mov	r0, r3
 800643a:	f000 fa17 	bl	800686c <ai_wine_quality_get_error>
 800643e:	4603      	mov	r3, r0
 8006440:	4908      	ldr	r1, [pc, #32]	; (8006464 <ai_run+0x50>)
 8006442:	4618      	mov	r0, r3
 8006444:	f7ff ff62 	bl	800630c <ai_log_err>
        "ai_wine_quality_run");
    return -1;
 8006448:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800644c:	e000      	b.n	8006450 <ai_run+0x3c>
  }

  return 0;
 800644e:	2300      	movs	r3, #0
}
 8006450:	4618      	mov	r0, r3
 8006452:	3708      	adds	r7, #8
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}
 8006458:	20001120 	.word	0x20001120
 800645c:	20001124 	.word	0x20001124
 8006460:	20001128 	.word	0x20001128
 8006464:	08009c24 	.word	0x08009c24

08006468 <acquire_and_process_data>:

/* USER CODE BEGIN 2 */
int acquire_and_process_data(ai_i8* data[])
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
      data[idx] = ....
  }


  */
  return 0;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	370c      	adds	r7, #12
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr

0800647e <post_process>:

int post_process(ai_i8* data[])
{
 800647e:	b480      	push	{r7}
 8006480:	b083      	sub	sp, #12
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
  {
      data[idx] = ....
  }

  */
  return 0;
 8006486:	2300      	movs	r3, #0
}
 8006488:	4618      	mov	r0, r3
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 8006498:	4803      	ldr	r0, [pc, #12]	; (80064a8 <MX_X_CUBE_AI_Init+0x14>)
 800649a:	f002 fc7f 	bl	8008d9c <puts>

  ai_boostrap(data_activations0);
 800649e:	4803      	ldr	r0, [pc, #12]	; (80064ac <MX_X_CUBE_AI_Init+0x18>)
 80064a0:	f7ff ff54 	bl	800634c <ai_boostrap>
    /* USER CODE END 5 */
}
 80064a4:	bf00      	nop
 80064a6:	bd80      	pop	{r7, pc}
 80064a8:	08009c38 	.word	0x08009c38
 80064ac:	2000000c 	.word	0x2000000c

080064b0 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 80064b0:	b590      	push	{r4, r7, lr}
 80064b2:	b08f      	sub	sp, #60	; 0x3c
 80064b4:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 6 */
  int res = -1;
 80064b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064ba:	637b      	str	r3, [r7, #52]	; 0x34

  printf("TEMPLATE - run - main loop\r\n");
 80064bc:	483d      	ldr	r0, [pc, #244]	; (80065b4 <MX_X_CUBE_AI_Process+0x104>)
 80064be:	f002 fc6d 	bl	8008d9c <puts>

  char test[] = "test 101";
 80064c2:	4a3d      	ldr	r2, [pc, #244]	; (80065b8 <MX_X_CUBE_AI_Process+0x108>)
 80064c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80064ca:	c303      	stmia	r3!, {r0, r1}
 80064cc:	701a      	strb	r2, [r3, #0]
  char Rx[8];
  if (wine_quality) {
 80064ce:	4b3b      	ldr	r3, [pc, #236]	; (80065bc <MX_X_CUBE_AI_Process+0x10c>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d05c      	beq.n	8006590 <MX_X_CUBE_AI_Process+0xe0>

    do {

    	HAL_UART_Transmit(&huart2, (uint8_t *) test, sizeof(test), 100);
 80064d6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80064da:	2364      	movs	r3, #100	; 0x64
 80064dc:	2209      	movs	r2, #9
 80064de:	4838      	ldr	r0, [pc, #224]	; (80065c0 <MX_X_CUBE_AI_Process+0x110>)
 80064e0:	f7fe fecf 	bl	8005282 <HAL_UART_Transmit>
    	HAL_UART_Receive(&huart2, (uint8_t *) Rx, sizeof(Rx), 100);
 80064e4:	f107 011c 	add.w	r1, r7, #28
 80064e8:	2364      	movs	r3, #100	; 0x64
 80064ea:	2208      	movs	r2, #8
 80064ec:	4834      	ldr	r0, [pc, #208]	; (80065c0 <MX_X_CUBE_AI_Process+0x110>)
 80064ee:	f7fe ff5f 	bl	80053b0 <HAL_UART_Receive>
    HAL_UART_Transmit(&huart2, (uint8_t *) Rx, sizeof(Rx), 100);
 80064f2:	f107 011c 	add.w	r1, r7, #28
 80064f6:	2364      	movs	r3, #100	; 0x64
 80064f8:	2208      	movs	r2, #8
 80064fa:	4831      	ldr	r0, [pc, #196]	; (80065c0 <MX_X_CUBE_AI_Process+0x110>)
 80064fc:	f7fe fec1 	bl	8005282 <HAL_UART_Transmit>
    if(Rx[0] == 'o' && Rx[1] == 'k'){
 8006500:	7f3b      	ldrb	r3, [r7, #28]
 8006502:	2b6f      	cmp	r3, #111	; 0x6f
 8006504:	d10c      	bne.n	8006520 <MX_X_CUBE_AI_Process+0x70>
 8006506:	7f7b      	ldrb	r3, [r7, #29]
 8006508:	2b6b      	cmp	r3, #107	; 0x6b
 800650a:	d109      	bne.n	8006520 <MX_X_CUBE_AI_Process+0x70>
    	char test2[] = "yes";
 800650c:	4b2d      	ldr	r3, [pc, #180]	; (80065c4 <MX_X_CUBE_AI_Process+0x114>)
 800650e:	61bb      	str	r3, [r7, #24]
    	HAL_UART_Transmit(&huart2, (uint8_t *) test2, sizeof(test2), 100);
 8006510:	f107 0118 	add.w	r1, r7, #24
 8006514:	2364      	movs	r3, #100	; 0x64
 8006516:	2204      	movs	r2, #4
 8006518:	4829      	ldr	r0, [pc, #164]	; (80065c0 <MX_X_CUBE_AI_Process+0x110>)
 800651a:	f7fe feb2 	bl	8005282 <HAL_UART_Transmit>
    if(Rx[0] == 'o' && Rx[1] == 'k'){
 800651e:	e023      	b.n	8006568 <MX_X_CUBE_AI_Process+0xb8>
    }
    else{
    	for (int i =0; i < sizeof(Rx)/sizeof(uint8_t); i++){
 8006520:	2300      	movs	r3, #0
 8006522:	633b      	str	r3, [r7, #48]	; 0x30
 8006524:	e019      	b.n	800655a <MX_X_CUBE_AI_Process+0xaa>
    		char received[] = "receivedData = ";
 8006526:	4b28      	ldr	r3, [pc, #160]	; (80065c8 <MX_X_CUBE_AI_Process+0x118>)
 8006528:	f107 0408 	add.w	r4, r7, #8
 800652c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800652e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    		received[-1] = Rx[i];
 8006532:	f107 021c 	add.w	r2, r7, #28
 8006536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006538:	4413      	add	r3, r2
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	71fb      	strb	r3, [r7, #7]
    		HAL_UART_Transmit(&huart2, (uint8_t *) received, sizeof(received), 100);
 800653e:	f107 0108 	add.w	r1, r7, #8
 8006542:	2364      	movs	r3, #100	; 0x64
 8006544:	2210      	movs	r2, #16
 8006546:	481e      	ldr	r0, [pc, #120]	; (80065c0 <MX_X_CUBE_AI_Process+0x110>)
 8006548:	f7fe fe9b 	bl	8005282 <HAL_UART_Transmit>
    		HAL_Delay(2000);
 800654c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006550:	f7fb f92e 	bl	80017b0 <HAL_Delay>
    	for (int i =0; i < sizeof(Rx)/sizeof(uint8_t); i++){
 8006554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006556:	3301      	adds	r3, #1
 8006558:	633b      	str	r3, [r7, #48]	; 0x30
 800655a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655c:	2b07      	cmp	r3, #7
 800655e:	d9e2      	bls.n	8006526 <MX_X_CUBE_AI_Process+0x76>
    	}
    	HAL_Delay(5000);
 8006560:	f241 3088 	movw	r0, #5000	; 0x1388
 8006564:	f7fb f924 	bl	80017b0 <HAL_Delay>
    }
      /* 1 - acquire and pre-process input data */
      res = acquire_and_process_data(data_ins);
 8006568:	4818      	ldr	r0, [pc, #96]	; (80065cc <MX_X_CUBE_AI_Process+0x11c>)
 800656a:	f7ff ff7d 	bl	8006468 <acquire_and_process_data>
 800656e:	6378      	str	r0, [r7, #52]	; 0x34
      /* 2 - process the data - call inference engine */
      if (res == 0)
 8006570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006572:	2b00      	cmp	r3, #0
 8006574:	d102      	bne.n	800657c <MX_X_CUBE_AI_Process+0xcc>
        res = ai_run();
 8006576:	f7ff ff4d 	bl	8006414 <ai_run>
 800657a:	6378      	str	r0, [r7, #52]	; 0x34
      /* 3- post-process the predictions */
      if (res == 0)
 800657c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800657e:	2b00      	cmp	r3, #0
 8006580:	d103      	bne.n	800658a <MX_X_CUBE_AI_Process+0xda>
        res = post_process(data_outs);
 8006582:	4813      	ldr	r0, [pc, #76]	; (80065d0 <MX_X_CUBE_AI_Process+0x120>)
 8006584:	f7ff ff7b 	bl	800647e <post_process>
 8006588:	6378      	str	r0, [r7, #52]	; 0x34
    } while (res==0);
 800658a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800658c:	2b00      	cmp	r3, #0
 800658e:	d0a2      	beq.n	80064d6 <MX_X_CUBE_AI_Process+0x26>
  }

  if (res) {
 8006590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00a      	beq.n	80065ac <MX_X_CUBE_AI_Process+0xfc>
    ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
 8006596:	2311      	movs	r3, #17
 8006598:	713b      	strb	r3, [r7, #4]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2210      	movs	r2, #16
 800659e:	f362 231f 	bfi	r3, r2, #8, #24
 80065a2:	607b      	str	r3, [r7, #4]
    ai_log_err(err, "Process has FAILED");
 80065a4:	490b      	ldr	r1, [pc, #44]	; (80065d4 <MX_X_CUBE_AI_Process+0x124>)
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f7ff feb0 	bl	800630c <ai_log_err>
  }
    /* USER CODE END 6 */
}
 80065ac:	bf00      	nop
 80065ae:	373c      	adds	r7, #60	; 0x3c
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd90      	pop	{r4, r7, pc}
 80065b4:	08009c58 	.word	0x08009c58
 80065b8:	08009c88 	.word	0x08009c88
 80065bc:	20001120 	.word	0x20001120
 80065c0:	20000b0c 	.word	0x20000b0c
 80065c4:	00736579 	.word	0x00736579
 80065c8:	08009c94 	.word	0x08009c94
 80065cc:	20000c8c 	.word	0x20000c8c
 80065d0:	20000c90 	.word	0x20000c90
 80065d4:	08009c74 	.word	0x08009c74

080065d8 <wine_quality_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool wine_quality_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_wine_quality_activations_map, 1, params)) {
 80065e2:	683a      	ldr	r2, [r7, #0]
 80065e4:	2101      	movs	r1, #1
 80065e6:	4837      	ldr	r0, [pc, #220]	; (80066c4 <wine_quality_configure_activations+0xec>)
 80065e8:	f000 fb24 	bl	8006c34 <ai_platform_get_activations_map>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d05d      	beq.n	80066ae <wine_quality_configure_activations+0xd6>
    /* Updating activations (byte) offsets */
    
    input_0_output_array.data = AI_PTR(g_wine_quality_activations_map[0] + 352);
 80065f2:	4b34      	ldr	r3, [pc, #208]	; (80066c4 <wine_quality_configure_activations+0xec>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80065fa:	4a33      	ldr	r2, [pc, #204]	; (80066c8 <wine_quality_configure_activations+0xf0>)
 80065fc:	6093      	str	r3, [r2, #8]
    input_0_output_array.data_start = AI_PTR(g_wine_quality_activations_map[0] + 352);
 80065fe:	4b31      	ldr	r3, [pc, #196]	; (80066c4 <wine_quality_configure_activations+0xec>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8006606:	4a30      	ldr	r2, [pc, #192]	; (80066c8 <wine_quality_configure_activations+0xf0>)
 8006608:	60d3      	str	r3, [r2, #12]
    
    dense_12_dense_output_array.data = AI_PTR(g_wine_quality_activations_map[0] + 384);
 800660a:	4b2e      	ldr	r3, [pc, #184]	; (80066c4 <wine_quality_configure_activations+0xec>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006612:	4a2e      	ldr	r2, [pc, #184]	; (80066cc <wine_quality_configure_activations+0xf4>)
 8006614:	6093      	str	r3, [r2, #8]
    dense_12_dense_output_array.data_start = AI_PTR(g_wine_quality_activations_map[0] + 384);
 8006616:	4b2b      	ldr	r3, [pc, #172]	; (80066c4 <wine_quality_configure_activations+0xec>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800661e:	4a2b      	ldr	r2, [pc, #172]	; (80066cc <wine_quality_configure_activations+0xf4>)
 8006620:	60d3      	str	r3, [r2, #12]
    
    dense_12_output_array.data = AI_PTR(g_wine_quality_activations_map[0] + 384);
 8006622:	4b28      	ldr	r3, [pc, #160]	; (80066c4 <wine_quality_configure_activations+0xec>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800662a:	4a29      	ldr	r2, [pc, #164]	; (80066d0 <wine_quality_configure_activations+0xf8>)
 800662c:	6093      	str	r3, [r2, #8]
    dense_12_output_array.data_start = AI_PTR(g_wine_quality_activations_map[0] + 384);
 800662e:	4b25      	ldr	r3, [pc, #148]	; (80066c4 <wine_quality_configure_activations+0xec>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006636:	4a26      	ldr	r2, [pc, #152]	; (80066d0 <wine_quality_configure_activations+0xf8>)
 8006638:	60d3      	str	r3, [r2, #12]
    
    dense_13_dense_output_array.data = AI_PTR(g_wine_quality_activations_map[0] + 0);
 800663a:	4b22      	ldr	r3, [pc, #136]	; (80066c4 <wine_quality_configure_activations+0xec>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a25      	ldr	r2, [pc, #148]	; (80066d4 <wine_quality_configure_activations+0xfc>)
 8006640:	6093      	str	r3, [r2, #8]
    dense_13_dense_output_array.data_start = AI_PTR(g_wine_quality_activations_map[0] + 0);
 8006642:	4b20      	ldr	r3, [pc, #128]	; (80066c4 <wine_quality_configure_activations+0xec>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a23      	ldr	r2, [pc, #140]	; (80066d4 <wine_quality_configure_activations+0xfc>)
 8006648:	60d3      	str	r3, [r2, #12]
    
    dense_13_output_array.data = AI_PTR(g_wine_quality_activations_map[0] + 384);
 800664a:	4b1e      	ldr	r3, [pc, #120]	; (80066c4 <wine_quality_configure_activations+0xec>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006652:	4a21      	ldr	r2, [pc, #132]	; (80066d8 <wine_quality_configure_activations+0x100>)
 8006654:	6093      	str	r3, [r2, #8]
    dense_13_output_array.data_start = AI_PTR(g_wine_quality_activations_map[0] + 384);
 8006656:	4b1b      	ldr	r3, [pc, #108]	; (80066c4 <wine_quality_configure_activations+0xec>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800665e:	4a1e      	ldr	r2, [pc, #120]	; (80066d8 <wine_quality_configure_activations+0x100>)
 8006660:	60d3      	str	r3, [r2, #12]
    
    dense_14_dense_output_array.data = AI_PTR(g_wine_quality_activations_map[0] + 0);
 8006662:	4b18      	ldr	r3, [pc, #96]	; (80066c4 <wine_quality_configure_activations+0xec>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a1d      	ldr	r2, [pc, #116]	; (80066dc <wine_quality_configure_activations+0x104>)
 8006668:	6093      	str	r3, [r2, #8]
    dense_14_dense_output_array.data_start = AI_PTR(g_wine_quality_activations_map[0] + 0);
 800666a:	4b16      	ldr	r3, [pc, #88]	; (80066c4 <wine_quality_configure_activations+0xec>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a1b      	ldr	r2, [pc, #108]	; (80066dc <wine_quality_configure_activations+0x104>)
 8006670:	60d3      	str	r3, [r2, #12]
    
    dense_14_output_array.data = AI_PTR(g_wine_quality_activations_map[0] + 128);
 8006672:	4b14      	ldr	r3, [pc, #80]	; (80066c4 <wine_quality_configure_activations+0xec>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	3380      	adds	r3, #128	; 0x80
 8006678:	4a19      	ldr	r2, [pc, #100]	; (80066e0 <wine_quality_configure_activations+0x108>)
 800667a:	6093      	str	r3, [r2, #8]
    dense_14_output_array.data_start = AI_PTR(g_wine_quality_activations_map[0] + 128);
 800667c:	4b11      	ldr	r3, [pc, #68]	; (80066c4 <wine_quality_configure_activations+0xec>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	3380      	adds	r3, #128	; 0x80
 8006682:	4a17      	ldr	r2, [pc, #92]	; (80066e0 <wine_quality_configure_activations+0x108>)
 8006684:	60d3      	str	r3, [r2, #12]
    
    dense_15_dense_output_array.data = AI_PTR(g_wine_quality_activations_map[0] + 0);
 8006686:	4b0f      	ldr	r3, [pc, #60]	; (80066c4 <wine_quality_configure_activations+0xec>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a16      	ldr	r2, [pc, #88]	; (80066e4 <wine_quality_configure_activations+0x10c>)
 800668c:	6093      	str	r3, [r2, #8]
    dense_15_dense_output_array.data_start = AI_PTR(g_wine_quality_activations_map[0] + 0);
 800668e:	4b0d      	ldr	r3, [pc, #52]	; (80066c4 <wine_quality_configure_activations+0xec>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a14      	ldr	r2, [pc, #80]	; (80066e4 <wine_quality_configure_activations+0x10c>)
 8006694:	60d3      	str	r3, [r2, #12]
    
    activation_3_output_array.data = AI_PTR(g_wine_quality_activations_map[0] + 28);
 8006696:	4b0b      	ldr	r3, [pc, #44]	; (80066c4 <wine_quality_configure_activations+0xec>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	331c      	adds	r3, #28
 800669c:	4a12      	ldr	r2, [pc, #72]	; (80066e8 <wine_quality_configure_activations+0x110>)
 800669e:	6093      	str	r3, [r2, #8]
    activation_3_output_array.data_start = AI_PTR(g_wine_quality_activations_map[0] + 28);
 80066a0:	4b08      	ldr	r3, [pc, #32]	; (80066c4 <wine_quality_configure_activations+0xec>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	331c      	adds	r3, #28
 80066a6:	4a10      	ldr	r2, [pc, #64]	; (80066e8 <wine_quality_configure_activations+0x110>)
 80066a8:	60d3      	str	r3, [r2, #12]
    
    return true;
 80066aa:	2301      	movs	r3, #1
 80066ac:	e005      	b.n	80066ba <wine_quality_configure_activations+0xe2>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 80066ae:	2213      	movs	r2, #19
 80066b0:	2130      	movs	r1, #48	; 0x30
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 fba2 	bl	8006dfc <ai_platform_network_set_error>
  return false;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3708      	adds	r7, #8
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	2000112c 	.word	0x2000112c
 80066c8:	20000010 	.word	0x20000010
 80066cc:	20000030 	.word	0x20000030
 80066d0:	20000040 	.word	0x20000040
 80066d4:	20000060 	.word	0x20000060
 80066d8:	20000080 	.word	0x20000080
 80066dc:	20000090 	.word	0x20000090
 80066e0:	200000a0 	.word	0x200000a0
 80066e4:	200000b0 	.word	0x200000b0
 80066e8:	200000c0 	.word	0x200000c0

080066ec <wine_quality_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool wine_quality_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b082      	sub	sp, #8
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_wine_quality_weights_map, 1, params)) {
 80066f6:	683a      	ldr	r2, [r7, #0]
 80066f8:	2101      	movs	r1, #1
 80066fa:	4853      	ldr	r0, [pc, #332]	; (8006848 <wine_quality_configure_weights+0x15c>)
 80066fc:	f000 fa46 	bl	8006b8c <ai_platform_get_weights_map>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	f000 8096 	beq.w	8006834 <wine_quality_configure_weights+0x148>
    /* Updating weights (byte) offsets */
    
    dense_14_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8006708:	4b50      	ldr	r3, [pc, #320]	; (800684c <wine_quality_configure_weights+0x160>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006710:	4a4e      	ldr	r2, [pc, #312]	; (800684c <wine_quality_configure_weights+0x160>)
 8006712:	6013      	str	r3, [r2, #0]
    dense_14_dense_bias_array.data = AI_PTR(g_wine_quality_weights_map[0] + 0);
 8006714:	4b4c      	ldr	r3, [pc, #304]	; (8006848 <wine_quality_configure_weights+0x15c>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a4c      	ldr	r2, [pc, #304]	; (800684c <wine_quality_configure_weights+0x160>)
 800671a:	6093      	str	r3, [r2, #8]
    dense_14_dense_bias_array.data_start = AI_PTR(g_wine_quality_weights_map[0] + 0);
 800671c:	4b4a      	ldr	r3, [pc, #296]	; (8006848 <wine_quality_configure_weights+0x15c>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a4a      	ldr	r2, [pc, #296]	; (800684c <wine_quality_configure_weights+0x160>)
 8006722:	60d3      	str	r3, [r2, #12]
    
    dense_15_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8006724:	4b4a      	ldr	r3, [pc, #296]	; (8006850 <wine_quality_configure_weights+0x164>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800672c:	4a48      	ldr	r2, [pc, #288]	; (8006850 <wine_quality_configure_weights+0x164>)
 800672e:	6013      	str	r3, [r2, #0]
    dense_15_dense_weights_array.data = AI_PTR(g_wine_quality_weights_map[0] + 128);
 8006730:	4b45      	ldr	r3, [pc, #276]	; (8006848 <wine_quality_configure_weights+0x15c>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	3380      	adds	r3, #128	; 0x80
 8006736:	4a46      	ldr	r2, [pc, #280]	; (8006850 <wine_quality_configure_weights+0x164>)
 8006738:	6093      	str	r3, [r2, #8]
    dense_15_dense_weights_array.data_start = AI_PTR(g_wine_quality_weights_map[0] + 128);
 800673a:	4b43      	ldr	r3, [pc, #268]	; (8006848 <wine_quality_configure_weights+0x15c>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	3380      	adds	r3, #128	; 0x80
 8006740:	4a43      	ldr	r2, [pc, #268]	; (8006850 <wine_quality_configure_weights+0x164>)
 8006742:	60d3      	str	r3, [r2, #12]
    
    dense_15_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8006744:	4b43      	ldr	r3, [pc, #268]	; (8006854 <wine_quality_configure_weights+0x168>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800674c:	4a41      	ldr	r2, [pc, #260]	; (8006854 <wine_quality_configure_weights+0x168>)
 800674e:	6013      	str	r3, [r2, #0]
    dense_15_dense_bias_array.data = AI_PTR(g_wine_quality_weights_map[0] + 1024);
 8006750:	4b3d      	ldr	r3, [pc, #244]	; (8006848 <wine_quality_configure_weights+0x15c>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006758:	4a3e      	ldr	r2, [pc, #248]	; (8006854 <wine_quality_configure_weights+0x168>)
 800675a:	6093      	str	r3, [r2, #8]
    dense_15_dense_bias_array.data_start = AI_PTR(g_wine_quality_weights_map[0] + 1024);
 800675c:	4b3a      	ldr	r3, [pc, #232]	; (8006848 <wine_quality_configure_weights+0x15c>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006764:	4a3b      	ldr	r2, [pc, #236]	; (8006854 <wine_quality_configure_weights+0x168>)
 8006766:	60d3      	str	r3, [r2, #12]
    
    dense_12_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8006768:	4b3b      	ldr	r3, [pc, #236]	; (8006858 <wine_quality_configure_weights+0x16c>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006770:	4a39      	ldr	r2, [pc, #228]	; (8006858 <wine_quality_configure_weights+0x16c>)
 8006772:	6013      	str	r3, [r2, #0]
    dense_12_dense_weights_array.data = AI_PTR(g_wine_quality_weights_map[0] + 1052);
 8006774:	4b34      	ldr	r3, [pc, #208]	; (8006848 <wine_quality_configure_weights+0x15c>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800677c:	4a36      	ldr	r2, [pc, #216]	; (8006858 <wine_quality_configure_weights+0x16c>)
 800677e:	6093      	str	r3, [r2, #8]
    dense_12_dense_weights_array.data_start = AI_PTR(g_wine_quality_weights_map[0] + 1052);
 8006780:	4b31      	ldr	r3, [pc, #196]	; (8006848 <wine_quality_configure_weights+0x15c>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8006788:	4a33      	ldr	r2, [pc, #204]	; (8006858 <wine_quality_configure_weights+0x16c>)
 800678a:	60d3      	str	r3, [r2, #12]
    
    dense_12_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800678c:	4b33      	ldr	r3, [pc, #204]	; (800685c <wine_quality_configure_weights+0x170>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006794:	4a31      	ldr	r2, [pc, #196]	; (800685c <wine_quality_configure_weights+0x170>)
 8006796:	6013      	str	r3, [r2, #0]
    dense_12_dense_bias_array.data = AI_PTR(g_wine_quality_weights_map[0] + 7196);
 8006798:	4b2b      	ldr	r3, [pc, #172]	; (8006848 <wine_quality_configure_weights+0x15c>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80067a0:	331c      	adds	r3, #28
 80067a2:	4a2e      	ldr	r2, [pc, #184]	; (800685c <wine_quality_configure_weights+0x170>)
 80067a4:	6093      	str	r3, [r2, #8]
    dense_12_dense_bias_array.data_start = AI_PTR(g_wine_quality_weights_map[0] + 7196);
 80067a6:	4b28      	ldr	r3, [pc, #160]	; (8006848 <wine_quality_configure_weights+0x15c>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80067ae:	331c      	adds	r3, #28
 80067b0:	4a2a      	ldr	r2, [pc, #168]	; (800685c <wine_quality_configure_weights+0x170>)
 80067b2:	60d3      	str	r3, [r2, #12]
    
    dense_13_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 80067b4:	4b2a      	ldr	r3, [pc, #168]	; (8006860 <wine_quality_configure_weights+0x174>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067bc:	4a28      	ldr	r2, [pc, #160]	; (8006860 <wine_quality_configure_weights+0x174>)
 80067be:	6013      	str	r3, [r2, #0]
    dense_13_dense_weights_array.data = AI_PTR(g_wine_quality_weights_map[0] + 7964);
 80067c0:	4b21      	ldr	r3, [pc, #132]	; (8006848 <wine_quality_configure_weights+0x15c>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80067c8:	331c      	adds	r3, #28
 80067ca:	4a25      	ldr	r2, [pc, #148]	; (8006860 <wine_quality_configure_weights+0x174>)
 80067cc:	6093      	str	r3, [r2, #8]
    dense_13_dense_weights_array.data_start = AI_PTR(g_wine_quality_weights_map[0] + 7964);
 80067ce:	4b1e      	ldr	r3, [pc, #120]	; (8006848 <wine_quality_configure_weights+0x15c>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80067d6:	331c      	adds	r3, #28
 80067d8:	4a21      	ldr	r2, [pc, #132]	; (8006860 <wine_quality_configure_weights+0x174>)
 80067da:	60d3      	str	r3, [r2, #12]
    
    dense_13_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 80067dc:	4b21      	ldr	r3, [pc, #132]	; (8006864 <wine_quality_configure_weights+0x178>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067e4:	4a1f      	ldr	r2, [pc, #124]	; (8006864 <wine_quality_configure_weights+0x178>)
 80067e6:	6013      	str	r3, [r2, #0]
    dense_13_dense_bias_array.data = AI_PTR(g_wine_quality_weights_map[0] + 81692);
 80067e8:	4b17      	ldr	r3, [pc, #92]	; (8006848 <wine_quality_configure_weights+0x15c>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f503 339f 	add.w	r3, r3, #81408	; 0x13e00
 80067f0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80067f4:	4a1b      	ldr	r2, [pc, #108]	; (8006864 <wine_quality_configure_weights+0x178>)
 80067f6:	6093      	str	r3, [r2, #8]
    dense_13_dense_bias_array.data_start = AI_PTR(g_wine_quality_weights_map[0] + 81692);
 80067f8:	4b13      	ldr	r3, [pc, #76]	; (8006848 <wine_quality_configure_weights+0x15c>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f503 339f 	add.w	r3, r3, #81408	; 0x13e00
 8006800:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006804:	4a17      	ldr	r2, [pc, #92]	; (8006864 <wine_quality_configure_weights+0x178>)
 8006806:	60d3      	str	r3, [r2, #12]
    
    dense_14_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8006808:	4b17      	ldr	r3, [pc, #92]	; (8006868 <wine_quality_configure_weights+0x17c>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006810:	4a15      	ldr	r2, [pc, #84]	; (8006868 <wine_quality_configure_weights+0x17c>)
 8006812:	6013      	str	r3, [r2, #0]
    dense_14_dense_weights_array.data = AI_PTR(g_wine_quality_weights_map[0] + 82076);
 8006814:	4b0c      	ldr	r3, [pc, #48]	; (8006848 <wine_quality_configure_weights+0x15c>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
 800681c:	339c      	adds	r3, #156	; 0x9c
 800681e:	4a12      	ldr	r2, [pc, #72]	; (8006868 <wine_quality_configure_weights+0x17c>)
 8006820:	6093      	str	r3, [r2, #8]
    dense_14_dense_weights_array.data_start = AI_PTR(g_wine_quality_weights_map[0] + 82076);
 8006822:	4b09      	ldr	r3, [pc, #36]	; (8006848 <wine_quality_configure_weights+0x15c>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
 800682a:	339c      	adds	r3, #156	; 0x9c
 800682c:	4a0e      	ldr	r2, [pc, #56]	; (8006868 <wine_quality_configure_weights+0x17c>)
 800682e:	60d3      	str	r3, [r2, #12]
    
    return true;
 8006830:	2301      	movs	r3, #1
 8006832:	e005      	b.n	8006840 <wine_quality_configure_weights+0x154>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8006834:	2212      	movs	r2, #18
 8006836:	2130      	movs	r1, #48	; 0x30
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 fadf 	bl	8006dfc <ai_platform_network_set_error>
  return false;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3708      	adds	r7, #8
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}
 8006848:	20001130 	.word	0x20001130
 800684c:	20000020 	.word	0x20000020
 8006850:	20000050 	.word	0x20000050
 8006854:	20000070 	.word	0x20000070
 8006858:	200000d0 	.word	0x200000d0
 800685c:	200000e0 	.word	0x200000e0
 8006860:	200000f0 	.word	0x200000f0
 8006864:	20000100 	.word	0x20000100
 8006868:	20000110 	.word	0x20000110

0800686c <ai_wine_quality_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_wine_quality_get_error(ai_handle network)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b082      	sub	sp, #8
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 fa53 	bl	8006d20 <ai_platform_network_get_error>
 800687a:	4603      	mov	r3, r0
}
 800687c:	4618      	mov	r0, r3
 800687e:	3708      	adds	r7, #8
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <ai_wine_quality_create>:

AI_API_ENTRY
ai_error ai_wine_quality_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af02      	add	r7, sp, #8
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800688e:	2300      	movs	r3, #0
 8006890:	9301      	str	r3, [sp, #4]
 8006892:	2305      	movs	r3, #5
 8006894:	9300      	str	r3, [sp, #0]
 8006896:	2301      	movs	r3, #1
 8006898:	4a04      	ldr	r2, [pc, #16]	; (80068ac <ai_wine_quality_create+0x28>)
 800689a:	6839      	ldr	r1, [r7, #0]
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 fc59 	bl	8007154 <ai_platform_network_create>
 80068a2:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3708      	adds	r7, #8
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}
 80068ac:	2000087c 	.word	0x2000087c

080068b0 <ai_wine_quality_create_and_init>:

AI_API_ENTRY
ai_error ai_wine_quality_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b096      	sub	sp, #88	; 0x58
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_wine_quality_create(network, AI_WINE_QUALITY_DATA_CONFIG);
 80068bc:	2100      	movs	r1, #0
 80068be:	68f8      	ldr	r0, [r7, #12]
 80068c0:	f7ff ffe0 	bl	8006884 <ai_wine_quality_create>
 80068c4:	4603      	mov	r3, r0
 80068c6:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 80068c8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d001      	beq.n	80068d4 <ai_wine_quality_create_and_init+0x24>
        return err;
 80068d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068d2:	e05d      	b.n	8006990 <ai_wine_quality_create_and_init+0xe0>
    if (ai_wine_quality_data_params_get(&params) != true) {
 80068d4:	f107 0314 	add.w	r3, r7, #20
 80068d8:	4618      	mov	r0, r3
 80068da:	f000 f8dd 	bl	8006a98 <ai_wine_quality_data_params_get>
 80068de:	4603      	mov	r3, r0
 80068e0:	f083 0301 	eor.w	r3, r3, #1
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d008      	beq.n	80068fc <ai_wine_quality_create_and_init+0x4c>
        err = ai_wine_quality_get_error(*network);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4618      	mov	r0, r3
 80068f0:	f7ff ffbc 	bl	800686c <ai_wine_quality_get_error>
 80068f4:	4603      	mov	r3, r0
 80068f6:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 80068f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068fa:	e049      	b.n	8006990 <ai_wine_quality_create_and_init+0xe0>
    }
#if defined(AI_WINE_QUALITY_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d016      	beq.n	8006930 <ai_wine_quality_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 8006902:	2300      	movs	r3, #0
 8006904:	657b      	str	r3, [r7, #84]	; 0x54
 8006906:	e00e      	b.n	8006926 <ai_wine_quality_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8006908:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800690a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	68ba      	ldr	r2, [r7, #8]
 8006910:	4413      	add	r3, r2
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	f107 0314 	add.w	r3, r7, #20
 8006918:	330c      	adds	r3, #12
 800691a:	4618      	mov	r0, r3
 800691c:	f000 f922 	bl	8006b64 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8006920:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006922:	3301      	adds	r3, #1
 8006924:	657b      	str	r3, [r7, #84]	; 0x54
 8006926:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006928:	461a      	mov	r2, r3
 800692a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800692c:	4293      	cmp	r3, r2
 800692e:	dbeb      	blt.n	8006908 <ai_wine_quality_create_and_init+0x58>
    }
#endif
#if defined(AI_WINE_QUALITY_DATA_WEIGHTS_COUNT)
    if (weights) {
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d016      	beq.n	8006964 <ai_wine_quality_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 8006936:	2300      	movs	r3, #0
 8006938:	653b      	str	r3, [r7, #80]	; 0x50
 800693a:	e00e      	b.n	800695a <ai_wine_quality_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 800693c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800693e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	4413      	add	r3, r2
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	f107 0314 	add.w	r3, r7, #20
 800694c:	3304      	adds	r3, #4
 800694e:	4618      	mov	r0, r3
 8006950:	f000 f908 	bl	8006b64 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8006954:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006956:	3301      	adds	r3, #1
 8006958:	653b      	str	r3, [r7, #80]	; 0x50
 800695a:	8b7b      	ldrh	r3, [r7, #26]
 800695c:	461a      	mov	r2, r3
 800695e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006960:	4293      	cmp	r3, r2
 8006962:	dbeb      	blt.n	800693c <ai_wine_quality_create_and_init+0x8c>
    }
#endif
    if (ai_wine_quality_init(*network, &params) != true) {
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f107 0214 	add.w	r2, r7, #20
 800696c:	4611      	mov	r1, r2
 800696e:	4618      	mov	r0, r3
 8006970:	f000 f846 	bl	8006a00 <ai_wine_quality_init>
 8006974:	4603      	mov	r3, r0
 8006976:	f083 0301 	eor.w	r3, r3, #1
 800697a:	b2db      	uxtb	r3, r3
 800697c:	2b00      	cmp	r3, #0
 800697e:	d006      	beq.n	800698e <ai_wine_quality_create_and_init+0xde>
        err = ai_wine_quality_get_error(*network);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4618      	mov	r0, r3
 8006986:	f7ff ff71 	bl	800686c <ai_wine_quality_get_error>
 800698a:	4603      	mov	r3, r0
 800698c:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 800698e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8006990:	4618      	mov	r0, r3
 8006992:	3758      	adds	r7, #88	; 0x58
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <ai_wine_quality_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_wine_quality_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d104      	bne.n	80069b2 <ai_wine_quality_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 80069a8:	4b06      	ldr	r3, [pc, #24]	; (80069c4 <ai_wine_quality_inputs_get+0x2c>)
 80069aa:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4a06      	ldr	r2, [pc, #24]	; (80069c8 <ai_wine_quality_inputs_get+0x30>)
 80069b0:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 80069b2:	6839      	ldr	r1, [r7, #0]
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 fa27 	bl	8006e08 <ai_platform_inputs_get>
 80069ba:	4603      	mov	r3, r0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3708      	adds	r7, #8
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	2000087c 	.word	0x2000087c
 80069c8:	a1c00100 	.word	0xa1c00100

080069cc <ai_wine_quality_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_wine_quality_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d104      	bne.n	80069e6 <ai_wine_quality_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 80069dc:	4b06      	ldr	r3, [pc, #24]	; (80069f8 <ai_wine_quality_outputs_get+0x2c>)
 80069de:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4a06      	ldr	r2, [pc, #24]	; (80069fc <ai_wine_quality_outputs_get+0x30>)
 80069e4:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 80069e6:	6839      	ldr	r1, [r7, #0]
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 fae3 	bl	8006fb4 <ai_platform_outputs_get>
 80069ee:	4603      	mov	r3, r0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3708      	adds	r7, #8
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	2000087c 	.word	0x2000087c
 80069fc:	a1c00100 	.word	0xa1c00100

08006a00 <ai_wine_quality_init>:
}

AI_API_ENTRY
ai_bool ai_wine_quality_init(
  ai_handle network, const ai_network_params* params)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8006a0a:	6839      	ldr	r1, [r7, #0]
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 fc77 	bl	8007300 <ai_platform_network_init>
 8006a12:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d101      	bne.n	8006a1e <ai_wine_quality_init+0x1e>
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	e028      	b.n	8006a70 <ai_wine_quality_init+0x70>

  ai_bool ok = true;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	72fb      	strb	r3, [r7, #11]
  ok &= wine_quality_configure_weights(net_ctx, params);
 8006a22:	6839      	ldr	r1, [r7, #0]
 8006a24:	68f8      	ldr	r0, [r7, #12]
 8006a26:	f7ff fe61 	bl	80066ec <wine_quality_configure_weights>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	7afb      	ldrb	r3, [r7, #11]
 8006a30:	4013      	ands	r3, r2
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	bf14      	ite	ne
 8006a36:	2301      	movne	r3, #1
 8006a38:	2300      	moveq	r3, #0
 8006a3a:	72fb      	strb	r3, [r7, #11]
  ok &= wine_quality_configure_activations(net_ctx, params);
 8006a3c:	6839      	ldr	r1, [r7, #0]
 8006a3e:	68f8      	ldr	r0, [r7, #12]
 8006a40:	f7ff fdca 	bl	80065d8 <wine_quality_configure_activations>
 8006a44:	4603      	mov	r3, r0
 8006a46:	461a      	mov	r2, r3
 8006a48:	7afb      	ldrb	r3, [r7, #11]
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	bf14      	ite	ne
 8006a50:	2301      	movne	r3, #1
 8006a52:	2300      	moveq	r3, #0
 8006a54:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 fd40 	bl	80074dc <ai_platform_network_post_init>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	461a      	mov	r2, r3
 8006a60:	7afb      	ldrb	r3, [r7, #11]
 8006a62:	4013      	ands	r3, r2
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	bf14      	ite	ne
 8006a68:	2301      	movne	r3, #1
 8006a6a:	2300      	moveq	r3, #0
 8006a6c:	72fb      	strb	r3, [r7, #11]

  return ok;
 8006a6e:	7afb      	ldrb	r3, [r7, #11]
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3710      	adds	r7, #16
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <ai_wine_quality_run>:


AI_API_ENTRY
ai_i32 ai_wine_quality_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	68b9      	ldr	r1, [r7, #8]
 8006a88:	68f8      	ldr	r0, [r7, #12]
 8006a8a:	f000 fdaf 	bl	80075ec <ai_platform_network_process>
 8006a8e:	4603      	mov	r3, r0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3710      	adds	r7, #16
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <ai_wine_quality_data_params_get>:
 * @ingroup wine_quality_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_wine_quality_data_params_get(ai_network_params* params)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b086      	sub	sp, #24
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d101      	bne.n	8006aaa <ai_wine_quality_data_params_get+0x12>
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	e016      	b.n	8006ad8 <ai_wine_quality_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8006aaa:	4a0d      	ldr	r2, [pc, #52]	; (8006ae0 <ai_wine_quality_data_params_get+0x48>)
 8006aac:	f107 0310 	add.w	r3, r7, #16
 8006ab0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006ab4:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_WINE_QUALITY_DATA_ACTIVATIONS_COUNT, g_wine_quality_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8006ab8:	4a0a      	ldr	r2, [pc, #40]	; (8006ae4 <ai_wine_quality_data_params_get+0x4c>)
 8006aba:	f107 0308 	add.w	r3, r7, #8
 8006abe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006ac2:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_WINE_QUALITY_DATA_WEIGHTS_COUNT, g_wine_quality_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8006ac6:	f107 0210 	add.w	r2, r7, #16
 8006aca:	f107 0308 	add.w	r3, r7, #8
 8006ace:	4619      	mov	r1, r3
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 f903 	bl	8006cdc <ai_platform_bind_network_params>
 8006ad6:	4603      	mov	r3, r0
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3718      	adds	r7, #24
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	08009cc4 	.word	0x08009cc4
 8006ae4:	08009ccc 	.word	0x08009ccc

08006ae8 <ai_buffer_get_size>:
 8006ae8:	b378      	cbz	r0, 8006b4a <ai_buffer_get_size+0x62>
 8006aea:	b410      	push	{r4}
 8006aec:	6803      	ldr	r3, [r0, #0]
 8006aee:	4a17      	ldr	r2, [pc, #92]	; (8006b4c <ai_buffer_get_size+0x64>)
 8006af0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8006af4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d01e      	beq.n	8006b3a <ai_buffer_get_size+0x52>
 8006afc:	6984      	ldr	r4, [r0, #24]
 8006afe:	6862      	ldr	r2, [r4, #4]
 8006b00:	7d03      	ldrb	r3, [r0, #20]
 8006b02:	6941      	ldr	r1, [r0, #20]
 8006b04:	f1a3 0301 	sub.w	r3, r3, #1
 8006b08:	fab3 f383 	clz	r3, r3
 8006b0c:	095b      	lsrs	r3, r3, #5
 8006b0e:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8006b12:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8006b16:	da0b      	bge.n	8006b30 <ai_buffer_get_size+0x48>
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d102      	bne.n	8006b22 <ai_buffer_get_size+0x3a>
 8006b1c:	2802      	cmp	r0, #2
 8006b1e:	d007      	beq.n	8006b30 <ai_buffer_get_size+0x48>
 8006b20:	2302      	movs	r3, #2
 8006b22:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8006b26:	3301      	adds	r3, #1
 8006b28:	4298      	cmp	r0, r3
 8006b2a:	fb01 f202 	mul.w	r2, r1, r2
 8006b2e:	d1f3      	bne.n	8006b18 <ai_buffer_get_size+0x30>
 8006b30:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8006b34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b38:	4770      	bx	lr
 8006b3a:	2900      	cmp	r1, #0
 8006b3c:	d0de      	beq.n	8006afc <ai_buffer_get_size+0x14>
 8006b3e:	6984      	ldr	r4, [r0, #24]
 8006b40:	6863      	ldr	r3, [r4, #4]
 8006b42:	331f      	adds	r3, #31
 8006b44:	f023 021f 	bic.w	r2, r3, #31
 8006b48:	e7da      	b.n	8006b00 <ai_buffer_get_size+0x18>
 8006b4a:	4770      	bx	lr
 8006b4c:	000400c0 	.word	0x000400c0

08006b50 <ai_buffer_array_sane>:
 8006b50:	b138      	cbz	r0, 8006b62 <ai_buffer_array_sane+0x12>
 8006b52:	6843      	ldr	r3, [r0, #4]
 8006b54:	b123      	cbz	r3, 8006b60 <ai_buffer_array_sane+0x10>
 8006b56:	8840      	ldrh	r0, [r0, #2]
 8006b58:	3800      	subs	r0, #0
 8006b5a:	bf18      	it	ne
 8006b5c:	2001      	movne	r0, #1
 8006b5e:	4770      	bx	lr
 8006b60:	4618      	mov	r0, r3
 8006b62:	4770      	bx	lr

08006b64 <ai_buffer_array_item_set_address>:
 8006b64:	b150      	cbz	r0, 8006b7c <ai_buffer_array_item_set_address+0x18>
 8006b66:	6843      	ldr	r3, [r0, #4]
 8006b68:	b14b      	cbz	r3, 8006b7e <ai_buffer_array_item_set_address+0x1a>
 8006b6a:	8840      	ldrh	r0, [r0, #2]
 8006b6c:	b900      	cbnz	r0, 8006b70 <ai_buffer_array_item_set_address+0xc>
 8006b6e:	4770      	bx	lr
 8006b70:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8006b74:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006b78:	2001      	movs	r0, #1
 8006b7a:	604a      	str	r2, [r1, #4]
 8006b7c:	4770      	bx	lr
 8006b7e:	4618      	mov	r0, r3
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop

08006b84 <_ai_platform_acquire_crc>:
 8006b84:	2001      	movs	r0, #1
 8006b86:	4770      	bx	lr

08006b88 <_ai_platform_release_crc>:
 8006b88:	4770      	bx	lr
 8006b8a:	bf00      	nop

08006b8c <ai_platform_get_weights_map>:
 8006b8c:	2a00      	cmp	r2, #0
 8006b8e:	d037      	beq.n	8006c00 <ai_platform_get_weights_map+0x74>
 8006b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b92:	4604      	mov	r4, r0
 8006b94:	b1a0      	cbz	r0, 8006bc0 <ai_platform_get_weights_map+0x34>
 8006b96:	460f      	mov	r7, r1
 8006b98:	b191      	cbz	r1, 8006bc0 <ai_platform_get_weights_map+0x34>
 8006b9a:	4b25      	ldr	r3, [pc, #148]	; (8006c30 <ai_platform_get_weights_map+0xa4>)
 8006b9c:	6810      	ldr	r0, [r2, #0]
 8006b9e:	4298      	cmp	r0, r3
 8006ba0:	4615      	mov	r5, r2
 8006ba2:	d00f      	beq.n	8006bc4 <ai_platform_get_weights_map+0x38>
 8006ba4:	6855      	ldr	r5, [r2, #4]
 8006ba6:	b15d      	cbz	r5, 8006bc0 <ai_platform_get_weights_map+0x34>
 8006ba8:	682e      	ldr	r6, [r5, #0]
 8006baa:	429e      	cmp	r6, r3
 8006bac:	d02a      	beq.n	8006c04 <ai_platform_get_weights_map+0x78>
 8006bae:	f1a1 0001 	sub.w	r0, r1, #1
 8006bb2:	6025      	str	r5, [r4, #0]
 8006bb4:	fab0 f080 	clz	r0, r0
 8006bb8:	0940      	lsrs	r0, r0, #5
 8006bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bbc:	42a7      	cmp	r7, r4
 8006bbe:	d034      	beq.n	8006c2a <ai_platform_get_weights_map+0x9e>
 8006bc0:	2000      	movs	r0, #0
 8006bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bc4:	1d10      	adds	r0, r2, #4
 8006bc6:	f7ff ffc3 	bl	8006b50 <ai_buffer_array_sane>
 8006bca:	2800      	cmp	r0, #0
 8006bcc:	d0f8      	beq.n	8006bc0 <ai_platform_get_weights_map+0x34>
 8006bce:	88eb      	ldrh	r3, [r5, #6]
 8006bd0:	429f      	cmp	r7, r3
 8006bd2:	d1f5      	bne.n	8006bc0 <ai_platform_get_weights_map+0x34>
 8006bd4:	f04f 0e00 	mov.w	lr, #0
 8006bd8:	1f23      	subs	r3, r4, #4
 8006bda:	4670      	mov	r0, lr
 8006bdc:	68aa      	ldr	r2, [r5, #8]
 8006bde:	eb02 0c0e 	add.w	ip, r2, lr
 8006be2:	f10e 0e1c 	add.w	lr, lr, #28
 8006be6:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8006bea:	b124      	cbz	r4, 8006bf6 <ai_platform_get_weights_map+0x6a>
 8006bec:	3001      	adds	r0, #1
 8006bee:	4287      	cmp	r7, r0
 8006bf0:	f843 4f04 	str.w	r4, [r3, #4]!
 8006bf4:	d1f2      	bne.n	8006bdc <ai_platform_get_weights_map+0x50>
 8006bf6:	1a38      	subs	r0, r7, r0
 8006bf8:	fab0 f080 	clz	r0, r0
 8006bfc:	0940      	lsrs	r0, r0, #5
 8006bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c00:	2000      	movs	r0, #0
 8006c02:	4770      	bx	lr
 8006c04:	1f23      	subs	r3, r4, #4
 8006c06:	4628      	mov	r0, r5
 8006c08:	2400      	movs	r4, #0
 8006c0a:	e000      	b.n	8006c0e <ai_platform_get_weights_map+0x82>
 8006c0c:	4614      	mov	r4, r2
 8006c0e:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8006c12:	42b2      	cmp	r2, r6
 8006c14:	d0d2      	beq.n	8006bbc <ai_platform_get_weights_map+0x30>
 8006c16:	f843 2f04 	str.w	r2, [r3, #4]!
 8006c1a:	1c62      	adds	r2, r4, #1
 8006c1c:	4297      	cmp	r7, r2
 8006c1e:	d1f5      	bne.n	8006c0c <ai_platform_get_weights_map+0x80>
 8006c20:	3402      	adds	r4, #2
 8006c22:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8006c26:	42b3      	cmp	r3, r6
 8006c28:	d1ca      	bne.n	8006bc0 <ai_platform_get_weights_map+0x34>
 8006c2a:	2001      	movs	r0, #1
 8006c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	a1facade 	.word	0xa1facade

08006c34 <ai_platform_get_activations_map>:
 8006c34:	2a00      	cmp	r2, #0
 8006c36:	d038      	beq.n	8006caa <ai_platform_get_activations_map+0x76>
 8006c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c3a:	4604      	mov	r4, r0
 8006c3c:	b1a0      	cbz	r0, 8006c68 <ai_platform_get_activations_map+0x34>
 8006c3e:	460f      	mov	r7, r1
 8006c40:	b191      	cbz	r1, 8006c68 <ai_platform_get_activations_map+0x34>
 8006c42:	4b25      	ldr	r3, [pc, #148]	; (8006cd8 <ai_platform_get_activations_map+0xa4>)
 8006c44:	6810      	ldr	r0, [r2, #0]
 8006c46:	4298      	cmp	r0, r3
 8006c48:	4615      	mov	r5, r2
 8006c4a:	d00f      	beq.n	8006c6c <ai_platform_get_activations_map+0x38>
 8006c4c:	6a15      	ldr	r5, [r2, #32]
 8006c4e:	b15d      	cbz	r5, 8006c68 <ai_platform_get_activations_map+0x34>
 8006c50:	682e      	ldr	r6, [r5, #0]
 8006c52:	429e      	cmp	r6, r3
 8006c54:	d02b      	beq.n	8006cae <ai_platform_get_activations_map+0x7a>
 8006c56:	f1a1 0001 	sub.w	r0, r1, #1
 8006c5a:	6025      	str	r5, [r4, #0]
 8006c5c:	fab0 f080 	clz	r0, r0
 8006c60:	0940      	lsrs	r0, r0, #5
 8006c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c64:	42a7      	cmp	r7, r4
 8006c66:	d035      	beq.n	8006cd4 <ai_platform_get_activations_map+0xa0>
 8006c68:	2000      	movs	r0, #0
 8006c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c6c:	f102 000c 	add.w	r0, r2, #12
 8006c70:	f7ff ff6e 	bl	8006b50 <ai_buffer_array_sane>
 8006c74:	2800      	cmp	r0, #0
 8006c76:	d0f7      	beq.n	8006c68 <ai_platform_get_activations_map+0x34>
 8006c78:	89eb      	ldrh	r3, [r5, #14]
 8006c7a:	429f      	cmp	r7, r3
 8006c7c:	d1f4      	bne.n	8006c68 <ai_platform_get_activations_map+0x34>
 8006c7e:	f04f 0e00 	mov.w	lr, #0
 8006c82:	1f23      	subs	r3, r4, #4
 8006c84:	4670      	mov	r0, lr
 8006c86:	692a      	ldr	r2, [r5, #16]
 8006c88:	eb02 0c0e 	add.w	ip, r2, lr
 8006c8c:	f10e 0e1c 	add.w	lr, lr, #28
 8006c90:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8006c94:	b124      	cbz	r4, 8006ca0 <ai_platform_get_activations_map+0x6c>
 8006c96:	3001      	adds	r0, #1
 8006c98:	4287      	cmp	r7, r0
 8006c9a:	f843 4f04 	str.w	r4, [r3, #4]!
 8006c9e:	d1f2      	bne.n	8006c86 <ai_platform_get_activations_map+0x52>
 8006ca0:	1a38      	subs	r0, r7, r0
 8006ca2:	fab0 f080 	clz	r0, r0
 8006ca6:	0940      	lsrs	r0, r0, #5
 8006ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006caa:	2000      	movs	r0, #0
 8006cac:	4770      	bx	lr
 8006cae:	1f23      	subs	r3, r4, #4
 8006cb0:	4628      	mov	r0, r5
 8006cb2:	2400      	movs	r4, #0
 8006cb4:	e000      	b.n	8006cb8 <ai_platform_get_activations_map+0x84>
 8006cb6:	4614      	mov	r4, r2
 8006cb8:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8006cbc:	42b2      	cmp	r2, r6
 8006cbe:	d0d1      	beq.n	8006c64 <ai_platform_get_activations_map+0x30>
 8006cc0:	f843 2f04 	str.w	r2, [r3, #4]!
 8006cc4:	1c62      	adds	r2, r4, #1
 8006cc6:	4297      	cmp	r7, r2
 8006cc8:	d1f5      	bne.n	8006cb6 <ai_platform_get_activations_map+0x82>
 8006cca:	3402      	adds	r4, #2
 8006ccc:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8006cd0:	42b3      	cmp	r3, r6
 8006cd2:	d1c9      	bne.n	8006c68 <ai_platform_get_activations_map+0x34>
 8006cd4:	2001      	movs	r0, #1
 8006cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cd8:	a1facade 	.word	0xa1facade

08006cdc <ai_platform_bind_network_params>:
 8006cdc:	b1a0      	cbz	r0, 8006d08 <ai_platform_bind_network_params+0x2c>
 8006cde:	b1b1      	cbz	r1, 8006d0e <ai_platform_bind_network_params+0x32>
 8006ce0:	b1c2      	cbz	r2, 8006d14 <ai_platform_bind_network_params+0x38>
 8006ce2:	b410      	push	{r4}
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	4c0d      	ldr	r4, [pc, #52]	; (8006d1c <ai_platform_bind_network_params+0x40>)
 8006ce8:	f843 4b04 	str.w	r4, [r3], #4
 8006cec:	f100 0c0c 	add.w	ip, r0, #12
 8006cf0:	c903      	ldmia	r1, {r0, r1}
 8006cf2:	e883 0003 	stmia.w	r3, {r0, r1}
 8006cf6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006cfa:	e88c 0003 	stmia.w	ip, {r0, r1}
 8006cfe:	2301      	movs	r3, #1
 8006d00:	4618      	mov	r0, r3
 8006d02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d06:	4770      	bx	lr
 8006d08:	4603      	mov	r3, r0
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	4770      	bx	lr
 8006d0e:	460b      	mov	r3, r1
 8006d10:	4618      	mov	r0, r3
 8006d12:	4770      	bx	lr
 8006d14:	4613      	mov	r3, r2
 8006d16:	4618      	mov	r0, r3
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop
 8006d1c:	a1facade 	.word	0xa1facade

08006d20 <ai_platform_network_get_error>:
 8006d20:	b510      	push	{r4, lr}
 8006d22:	b1f0      	cbz	r0, 8006d62 <ai_platform_network_get_error+0x42>
 8006d24:	4b2f      	ldr	r3, [pc, #188]	; (8006de4 <ai_platform_network_get_error+0xc4>)
 8006d26:	6802      	ldr	r2, [r0, #0]
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	4604      	mov	r4, r0
 8006d2c:	d119      	bne.n	8006d62 <ai_platform_network_get_error+0x42>
 8006d2e:	f7ff ff29 	bl	8006b84 <_ai_platform_acquire_crc>
 8006d32:	4b2d      	ldr	r3, [pc, #180]	; (8006de8 <ai_platform_network_get_error+0xc8>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d3e:	d03c      	beq.n	8006dba <ai_platform_network_get_error+0x9a>
 8006d40:	4a2a      	ldr	r2, [pc, #168]	; (8006dec <ai_platform_network_get_error+0xcc>)
 8006d42:	2301      	movs	r3, #1
 8006d44:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006d48:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d1fb      	bne.n	8006d48 <ai_platform_network_get_error+0x28>
 8006d50:	4b27      	ldr	r3, [pc, #156]	; (8006df0 <ai_platform_network_get_error+0xd0>)
 8006d52:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006d56:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006d5a:	4b26      	ldr	r3, [pc, #152]	; (8006df4 <ai_platform_network_get_error+0xd4>)
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d038      	beq.n	8006dd2 <ai_platform_network_get_error+0xb2>
 8006d60:	e7fe      	b.n	8006d60 <ai_platform_network_get_error+0x40>
 8006d62:	f7ff ff0f 	bl	8006b84 <_ai_platform_acquire_crc>
 8006d66:	4b20      	ldr	r3, [pc, #128]	; (8006de8 <ai_platform_network_get_error+0xc8>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d72:	d010      	beq.n	8006d96 <ai_platform_network_get_error+0x76>
 8006d74:	4a1d      	ldr	r2, [pc, #116]	; (8006dec <ai_platform_network_get_error+0xcc>)
 8006d76:	2301      	movs	r3, #1
 8006d78:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006d7c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d1fb      	bne.n	8006d7c <ai_platform_network_get_error+0x5c>
 8006d84:	4b1a      	ldr	r3, [pc, #104]	; (8006df0 <ai_platform_network_get_error+0xd0>)
 8006d86:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006d8a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006d8e:	4b19      	ldr	r3, [pc, #100]	; (8006df4 <ai_platform_network_get_error+0xd4>)
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d00d      	beq.n	8006db0 <ai_platform_network_get_error+0x90>
 8006d94:	e7fe      	b.n	8006d94 <ai_platform_network_get_error+0x74>
 8006d96:	4a18      	ldr	r2, [pc, #96]	; (8006df8 <ai_platform_network_get_error+0xd8>)
 8006d98:	2301      	movs	r3, #1
 8006d9a:	6093      	str	r3, [r2, #8]
 8006d9c:	6893      	ldr	r3, [r2, #8]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d1fc      	bne.n	8006d9c <ai_platform_network_get_error+0x7c>
 8006da2:	4b13      	ldr	r3, [pc, #76]	; (8006df0 <ai_platform_network_get_error+0xd0>)
 8006da4:	6013      	str	r3, [r2, #0]
 8006da6:	6812      	ldr	r2, [r2, #0]
 8006da8:	4b12      	ldr	r3, [pc, #72]	; (8006df4 <ai_platform_network_get_error+0xd4>)
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d000      	beq.n	8006db0 <ai_platform_network_get_error+0x90>
 8006dae:	e7fe      	b.n	8006dae <ai_platform_network_get_error+0x8e>
 8006db0:	f7ff feea 	bl	8006b88 <_ai_platform_release_crc>
 8006db4:	f241 0010 	movw	r0, #4112	; 0x1010
 8006db8:	bd10      	pop	{r4, pc}
 8006dba:	4a0f      	ldr	r2, [pc, #60]	; (8006df8 <ai_platform_network_get_error+0xd8>)
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	6093      	str	r3, [r2, #8]
 8006dc0:	6893      	ldr	r3, [r2, #8]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d1fc      	bne.n	8006dc0 <ai_platform_network_get_error+0xa0>
 8006dc6:	4b0a      	ldr	r3, [pc, #40]	; (8006df0 <ai_platform_network_get_error+0xd0>)
 8006dc8:	6013      	str	r3, [r2, #0]
 8006dca:	6812      	ldr	r2, [r2, #0]
 8006dcc:	4b09      	ldr	r3, [pc, #36]	; (8006df4 <ai_platform_network_get_error+0xd4>)
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d107      	bne.n	8006de2 <ai_platform_network_get_error+0xc2>
 8006dd2:	f7ff fed9 	bl	8006b88 <_ai_platform_release_crc>
 8006dd6:	f104 0010 	add.w	r0, r4, #16
 8006dda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dde:	f000 be8b 	b.w	8007af8 <core_get_error>
 8006de2:	e7fe      	b.n	8006de2 <ai_platform_network_get_error+0xc2>
 8006de4:	a1c00100 	.word	0xa1c00100
 8006de8:	e0042000 	.word	0xe0042000
 8006dec:	58024000 	.word	0x58024000
 8006df0:	f407a5c2 	.word	0xf407a5c2
 8006df4:	b5e8b5cd 	.word	0xb5e8b5cd
 8006df8:	40023000 	.word	0x40023000

08006dfc <ai_platform_network_set_error>:
 8006dfc:	b110      	cbz	r0, 8006e04 <ai_platform_network_set_error+0x8>
 8006dfe:	3010      	adds	r0, #16
 8006e00:	f000 be80 	b.w	8007b04 <core_set_error>
 8006e04:	4770      	bx	lr
 8006e06:	bf00      	nop

08006e08 <ai_platform_inputs_get>:
 8006e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e0c:	b085      	sub	sp, #20
 8006e0e:	9102      	str	r1, [sp, #8]
 8006e10:	b1f0      	cbz	r0, 8006e50 <ai_platform_inputs_get+0x48>
 8006e12:	4b62      	ldr	r3, [pc, #392]	; (8006f9c <ai_platform_inputs_get+0x194>)
 8006e14:	6802      	ldr	r2, [r0, #0]
 8006e16:	429a      	cmp	r2, r3
 8006e18:	4607      	mov	r7, r0
 8006e1a:	d119      	bne.n	8006e50 <ai_platform_inputs_get+0x48>
 8006e1c:	f7ff feb2 	bl	8006b84 <_ai_platform_acquire_crc>
 8006e20:	4b5f      	ldr	r3, [pc, #380]	; (8006fa0 <ai_platform_inputs_get+0x198>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e2c:	d03d      	beq.n	8006eaa <ai_platform_inputs_get+0xa2>
 8006e2e:	4a5d      	ldr	r2, [pc, #372]	; (8006fa4 <ai_platform_inputs_get+0x19c>)
 8006e30:	2301      	movs	r3, #1
 8006e32:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006e36:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d1fb      	bne.n	8006e36 <ai_platform_inputs_get+0x2e>
 8006e3e:	4b5a      	ldr	r3, [pc, #360]	; (8006fa8 <ai_platform_inputs_get+0x1a0>)
 8006e40:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006e44:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006e48:	4b58      	ldr	r3, [pc, #352]	; (8006fac <ai_platform_inputs_get+0x1a4>)
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d039      	beq.n	8006ec2 <ai_platform_inputs_get+0xba>
 8006e4e:	e7fe      	b.n	8006e4e <ai_platform_inputs_get+0x46>
 8006e50:	f7ff fe98 	bl	8006b84 <_ai_platform_acquire_crc>
 8006e54:	4b52      	ldr	r3, [pc, #328]	; (8006fa0 <ai_platform_inputs_get+0x198>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e60:	d010      	beq.n	8006e84 <ai_platform_inputs_get+0x7c>
 8006e62:	4a50      	ldr	r2, [pc, #320]	; (8006fa4 <ai_platform_inputs_get+0x19c>)
 8006e64:	2301      	movs	r3, #1
 8006e66:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006e6a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d1fb      	bne.n	8006e6a <ai_platform_inputs_get+0x62>
 8006e72:	4b4d      	ldr	r3, [pc, #308]	; (8006fa8 <ai_platform_inputs_get+0x1a0>)
 8006e74:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006e78:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006e7c:	4b4b      	ldr	r3, [pc, #300]	; (8006fac <ai_platform_inputs_get+0x1a4>)
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d00d      	beq.n	8006e9e <ai_platform_inputs_get+0x96>
 8006e82:	e7fe      	b.n	8006e82 <ai_platform_inputs_get+0x7a>
 8006e84:	4a4a      	ldr	r2, [pc, #296]	; (8006fb0 <ai_platform_inputs_get+0x1a8>)
 8006e86:	2301      	movs	r3, #1
 8006e88:	6093      	str	r3, [r2, #8]
 8006e8a:	6893      	ldr	r3, [r2, #8]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d1fc      	bne.n	8006e8a <ai_platform_inputs_get+0x82>
 8006e90:	4b45      	ldr	r3, [pc, #276]	; (8006fa8 <ai_platform_inputs_get+0x1a0>)
 8006e92:	6013      	str	r3, [r2, #0]
 8006e94:	6812      	ldr	r2, [r2, #0]
 8006e96:	4b45      	ldr	r3, [pc, #276]	; (8006fac <ai_platform_inputs_get+0x1a4>)
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d000      	beq.n	8006e9e <ai_platform_inputs_get+0x96>
 8006e9c:	e7fe      	b.n	8006e9c <ai_platform_inputs_get+0x94>
 8006e9e:	f7ff fe73 	bl	8006b88 <_ai_platform_release_crc>
 8006ea2:	2000      	movs	r0, #0
 8006ea4:	b005      	add	sp, #20
 8006ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eaa:	4a41      	ldr	r2, [pc, #260]	; (8006fb0 <ai_platform_inputs_get+0x1a8>)
 8006eac:	2301      	movs	r3, #1
 8006eae:	6093      	str	r3, [r2, #8]
 8006eb0:	6893      	ldr	r3, [r2, #8]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d1fc      	bne.n	8006eb0 <ai_platform_inputs_get+0xa8>
 8006eb6:	4b3c      	ldr	r3, [pc, #240]	; (8006fa8 <ai_platform_inputs_get+0x1a0>)
 8006eb8:	6013      	str	r3, [r2, #0]
 8006eba:	6812      	ldr	r2, [r2, #0]
 8006ebc:	4b3b      	ldr	r3, [pc, #236]	; (8006fac <ai_platform_inputs_get+0x1a4>)
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d155      	bne.n	8006f6e <ai_platform_inputs_get+0x166>
 8006ec2:	f7ff fe61 	bl	8006b88 <_ai_platform_release_crc>
 8006ec6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d051      	beq.n	8006f70 <ai_platform_inputs_get+0x168>
 8006ecc:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8006ed0:	f1ba 0f00 	cmp.w	sl, #0
 8006ed4:	d04c      	beq.n	8006f70 <ai_platform_inputs_get+0x168>
 8006ed6:	f04f 0b00 	mov.w	fp, #0
 8006eda:	465d      	mov	r5, fp
 8006edc:	9703      	str	r7, [sp, #12]
 8006ede:	e016      	b.n	8006f0e <ai_platform_inputs_get+0x106>
 8006ee0:	9901      	ldr	r1, [sp, #4]
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	507b      	str	r3, [r7, r1]
 8006ee6:	69b1      	ldr	r1, [r6, #24]
 8006ee8:	6849      	ldr	r1, [r1, #4]
 8006eea:	6121      	str	r1, [r4, #16]
 8006eec:	f04f 0301 	mov.w	r3, #1
 8006ef0:	7523      	strb	r3, [r4, #20]
 8006ef2:	e9c4 c200 	strd	ip, r2, [r4]
 8006ef6:	6962      	ldr	r2, [r4, #20]
 8006ef8:	60a0      	str	r0, [r4, #8]
 8006efa:	2300      	movs	r3, #0
 8006efc:	f369 221f 	bfi	r2, r9, #8, #24
 8006f00:	f8c4 8018 	str.w	r8, [r4, #24]
 8006f04:	60e3      	str	r3, [r4, #12]
 8006f06:	3501      	adds	r5, #1
 8006f08:	f10b 0b1c 	add.w	fp, fp, #28
 8006f0c:	6162      	str	r2, [r4, #20]
 8006f0e:	f8ba 3000 	ldrh.w	r3, [sl]
 8006f12:	42ab      	cmp	r3, r5
 8006f14:	b2aa      	uxth	r2, r5
 8006f16:	d93a      	bls.n	8006f8e <ai_platform_inputs_get+0x186>
 8006f18:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006f1c:	00e9      	lsls	r1, r5, #3
 8006f1e:	9101      	str	r1, [sp, #4]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d034      	beq.n	8006f8e <ai_platform_inputs_get+0x186>
 8006f24:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8006f28:	2e00      	cmp	r6, #0
 8006f2a:	d030      	beq.n	8006f8e <ai_platform_inputs_get+0x186>
 8006f2c:	f8da 3008 	ldr.w	r3, [sl, #8]
 8006f30:	69b2      	ldr	r2, [r6, #24]
 8006f32:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8006f36:	6810      	ldr	r0, [r2, #0]
 8006f38:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8006f3c:	68b3      	ldr	r3, [r6, #8]
 8006f3e:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8006f42:	f001 fc93 	bl	800886c <ai_array_to_buffer_fmt>
 8006f46:	69b1      	ldr	r1, [r6, #24]
 8006f48:	4684      	mov	ip, r0
 8006f4a:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8006f4e:	688a      	ldr	r2, [r1, #8]
 8006f50:	445c      	add	r4, fp
 8006f52:	2800      	cmp	r0, #0
 8006f54:	d0c8      	beq.n	8006ee8 <ai_platform_inputs_get+0xe0>
 8006f56:	2100      	movs	r1, #0
 8006f58:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8006f5c:	6831      	ldr	r1, [r6, #0]
 8006f5e:	6041      	str	r1, [r0, #4]
 8006f60:	b111      	cbz	r1, 8006f68 <ai_platform_inputs_get+0x160>
 8006f62:	8849      	ldrh	r1, [r1, #2]
 8006f64:	2900      	cmp	r1, #0
 8006f66:	d1bb      	bne.n	8006ee0 <ai_platform_inputs_get+0xd8>
 8006f68:	69b1      	ldr	r1, [r6, #24]
 8006f6a:	2000      	movs	r0, #0
 8006f6c:	e7bc      	b.n	8006ee8 <ai_platform_inputs_get+0xe0>
 8006f6e:	e7fe      	b.n	8006f6e <ai_platform_inputs_get+0x166>
 8006f70:	2218      	movs	r2, #24
 8006f72:	2111      	movs	r1, #17
 8006f74:	f107 0010 	add.w	r0, r7, #16
 8006f78:	f000 fdc4 	bl	8007b04 <core_set_error>
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	4610      	mov	r0, r2
 8006f80:	9b02      	ldr	r3, [sp, #8]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d08e      	beq.n	8006ea4 <ai_platform_inputs_get+0x9c>
 8006f86:	801a      	strh	r2, [r3, #0]
 8006f88:	b005      	add	sp, #20
 8006f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f8e:	9f03      	ldr	r7, [sp, #12]
 8006f90:	2a00      	cmp	r2, #0
 8006f92:	d0ed      	beq.n	8006f70 <ai_platform_inputs_get+0x168>
 8006f94:	f8da 3008 	ldr.w	r3, [sl, #8]
 8006f98:	6858      	ldr	r0, [r3, #4]
 8006f9a:	e7f1      	b.n	8006f80 <ai_platform_inputs_get+0x178>
 8006f9c:	a1c00100 	.word	0xa1c00100
 8006fa0:	e0042000 	.word	0xe0042000
 8006fa4:	58024000 	.word	0x58024000
 8006fa8:	f407a5c2 	.word	0xf407a5c2
 8006fac:	b5e8b5cd 	.word	0xb5e8b5cd
 8006fb0:	40023000 	.word	0x40023000

08006fb4 <ai_platform_outputs_get>:
 8006fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fb8:	b085      	sub	sp, #20
 8006fba:	9102      	str	r1, [sp, #8]
 8006fbc:	b1f0      	cbz	r0, 8006ffc <ai_platform_outputs_get+0x48>
 8006fbe:	4b5f      	ldr	r3, [pc, #380]	; (800713c <ai_platform_outputs_get+0x188>)
 8006fc0:	6802      	ldr	r2, [r0, #0]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	4607      	mov	r7, r0
 8006fc6:	d119      	bne.n	8006ffc <ai_platform_outputs_get+0x48>
 8006fc8:	f7ff fddc 	bl	8006b84 <_ai_platform_acquire_crc>
 8006fcc:	4b5c      	ldr	r3, [pc, #368]	; (8007140 <ai_platform_outputs_get+0x18c>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006fd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fd8:	d03d      	beq.n	8007056 <ai_platform_outputs_get+0xa2>
 8006fda:	4a5a      	ldr	r2, [pc, #360]	; (8007144 <ai_platform_outputs_get+0x190>)
 8006fdc:	2301      	movs	r3, #1
 8006fde:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006fe2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d1fb      	bne.n	8006fe2 <ai_platform_outputs_get+0x2e>
 8006fea:	4b57      	ldr	r3, [pc, #348]	; (8007148 <ai_platform_outputs_get+0x194>)
 8006fec:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006ff0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006ff4:	4b55      	ldr	r3, [pc, #340]	; (800714c <ai_platform_outputs_get+0x198>)
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d039      	beq.n	800706e <ai_platform_outputs_get+0xba>
 8006ffa:	e7fe      	b.n	8006ffa <ai_platform_outputs_get+0x46>
 8006ffc:	f7ff fdc2 	bl	8006b84 <_ai_platform_acquire_crc>
 8007000:	4b4f      	ldr	r3, [pc, #316]	; (8007140 <ai_platform_outputs_get+0x18c>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007008:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800700c:	d010      	beq.n	8007030 <ai_platform_outputs_get+0x7c>
 800700e:	4a4d      	ldr	r2, [pc, #308]	; (8007144 <ai_platform_outputs_get+0x190>)
 8007010:	2301      	movs	r3, #1
 8007012:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007016:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1fb      	bne.n	8007016 <ai_platform_outputs_get+0x62>
 800701e:	4b4a      	ldr	r3, [pc, #296]	; (8007148 <ai_platform_outputs_get+0x194>)
 8007020:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007024:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007028:	4b48      	ldr	r3, [pc, #288]	; (800714c <ai_platform_outputs_get+0x198>)
 800702a:	429a      	cmp	r2, r3
 800702c:	d00d      	beq.n	800704a <ai_platform_outputs_get+0x96>
 800702e:	e7fe      	b.n	800702e <ai_platform_outputs_get+0x7a>
 8007030:	4a47      	ldr	r2, [pc, #284]	; (8007150 <ai_platform_outputs_get+0x19c>)
 8007032:	2301      	movs	r3, #1
 8007034:	6093      	str	r3, [r2, #8]
 8007036:	6893      	ldr	r3, [r2, #8]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d1fc      	bne.n	8007036 <ai_platform_outputs_get+0x82>
 800703c:	4b42      	ldr	r3, [pc, #264]	; (8007148 <ai_platform_outputs_get+0x194>)
 800703e:	6013      	str	r3, [r2, #0]
 8007040:	6812      	ldr	r2, [r2, #0]
 8007042:	4b42      	ldr	r3, [pc, #264]	; (800714c <ai_platform_outputs_get+0x198>)
 8007044:	429a      	cmp	r2, r3
 8007046:	d000      	beq.n	800704a <ai_platform_outputs_get+0x96>
 8007048:	e7fe      	b.n	8007048 <ai_platform_outputs_get+0x94>
 800704a:	f7ff fd9d 	bl	8006b88 <_ai_platform_release_crc>
 800704e:	2000      	movs	r0, #0
 8007050:	b005      	add	sp, #20
 8007052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007056:	4a3e      	ldr	r2, [pc, #248]	; (8007150 <ai_platform_outputs_get+0x19c>)
 8007058:	2301      	movs	r3, #1
 800705a:	6093      	str	r3, [r2, #8]
 800705c:	6893      	ldr	r3, [r2, #8]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d1fc      	bne.n	800705c <ai_platform_outputs_get+0xa8>
 8007062:	4b39      	ldr	r3, [pc, #228]	; (8007148 <ai_platform_outputs_get+0x194>)
 8007064:	6013      	str	r3, [r2, #0]
 8007066:	6812      	ldr	r2, [r2, #0]
 8007068:	4b38      	ldr	r3, [pc, #224]	; (800714c <ai_platform_outputs_get+0x198>)
 800706a:	429a      	cmp	r2, r3
 800706c:	d150      	bne.n	8007110 <ai_platform_outputs_get+0x15c>
 800706e:	f7ff fd8b 	bl	8006b88 <_ai_platform_release_crc>
 8007072:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007074:	2b01      	cmp	r3, #1
 8007076:	d958      	bls.n	800712a <ai_platform_outputs_get+0x176>
 8007078:	f04f 0b00 	mov.w	fp, #0
 800707c:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8007080:	9703      	str	r7, [sp, #12]
 8007082:	465d      	mov	r5, fp
 8007084:	e016      	b.n	80070b4 <ai_platform_outputs_get+0x100>
 8007086:	9901      	ldr	r1, [sp, #4]
 8007088:	2301      	movs	r3, #1
 800708a:	507b      	str	r3, [r7, r1]
 800708c:	69b1      	ldr	r1, [r6, #24]
 800708e:	6849      	ldr	r1, [r1, #4]
 8007090:	6121      	str	r1, [r4, #16]
 8007092:	f04f 0301 	mov.w	r3, #1
 8007096:	7523      	strb	r3, [r4, #20]
 8007098:	e9c4 c200 	strd	ip, r2, [r4]
 800709c:	6962      	ldr	r2, [r4, #20]
 800709e:	60a0      	str	r0, [r4, #8]
 80070a0:	2300      	movs	r3, #0
 80070a2:	f369 221f 	bfi	r2, r9, #8, #24
 80070a6:	f8c4 8018 	str.w	r8, [r4, #24]
 80070aa:	60e3      	str	r3, [r4, #12]
 80070ac:	3501      	adds	r5, #1
 80070ae:	f10b 0b1c 	add.w	fp, fp, #28
 80070b2:	6162      	str	r2, [r4, #20]
 80070b4:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80070b8:	42ab      	cmp	r3, r5
 80070ba:	b2aa      	uxth	r2, r5
 80070bc:	d929      	bls.n	8007112 <ai_platform_outputs_get+0x15e>
 80070be:	f8da 3010 	ldr.w	r3, [sl, #16]
 80070c2:	00e9      	lsls	r1, r5, #3
 80070c4:	9101      	str	r1, [sp, #4]
 80070c6:	b323      	cbz	r3, 8007112 <ai_platform_outputs_get+0x15e>
 80070c8:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80070cc:	b30e      	cbz	r6, 8007112 <ai_platform_outputs_get+0x15e>
 80070ce:	f8da 3014 	ldr.w	r3, [sl, #20]
 80070d2:	69b2      	ldr	r2, [r6, #24]
 80070d4:	f8d6 800c 	ldr.w	r8, [r6, #12]
 80070d8:	6810      	ldr	r0, [r2, #0]
 80070da:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 80070de:	68b3      	ldr	r3, [r6, #8]
 80070e0:	f3c3 2917 	ubfx	r9, r3, #8, #24
 80070e4:	f001 fbc2 	bl	800886c <ai_array_to_buffer_fmt>
 80070e8:	69b1      	ldr	r1, [r6, #24]
 80070ea:	4684      	mov	ip, r0
 80070ec:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 80070f0:	688a      	ldr	r2, [r1, #8]
 80070f2:	445c      	add	r4, fp
 80070f4:	2800      	cmp	r0, #0
 80070f6:	d0ca      	beq.n	800708e <ai_platform_outputs_get+0xda>
 80070f8:	2100      	movs	r1, #0
 80070fa:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 80070fe:	6831      	ldr	r1, [r6, #0]
 8007100:	6041      	str	r1, [r0, #4]
 8007102:	b111      	cbz	r1, 800710a <ai_platform_outputs_get+0x156>
 8007104:	8849      	ldrh	r1, [r1, #2]
 8007106:	2900      	cmp	r1, #0
 8007108:	d1bd      	bne.n	8007086 <ai_platform_outputs_get+0xd2>
 800710a:	69b1      	ldr	r1, [r6, #24]
 800710c:	2000      	movs	r0, #0
 800710e:	e7be      	b.n	800708e <ai_platform_outputs_get+0xda>
 8007110:	e7fe      	b.n	8007110 <ai_platform_outputs_get+0x15c>
 8007112:	9f03      	ldr	r7, [sp, #12]
 8007114:	b14a      	cbz	r2, 800712a <ai_platform_outputs_get+0x176>
 8007116:	f8da 3014 	ldr.w	r3, [sl, #20]
 800711a:	6858      	ldr	r0, [r3, #4]
 800711c:	9b02      	ldr	r3, [sp, #8]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d096      	beq.n	8007050 <ai_platform_outputs_get+0x9c>
 8007122:	801a      	strh	r2, [r3, #0]
 8007124:	b005      	add	sp, #20
 8007126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800712a:	2218      	movs	r2, #24
 800712c:	2111      	movs	r1, #17
 800712e:	f107 0010 	add.w	r0, r7, #16
 8007132:	f000 fce7 	bl	8007b04 <core_set_error>
 8007136:	2200      	movs	r2, #0
 8007138:	4610      	mov	r0, r2
 800713a:	e7ef      	b.n	800711c <ai_platform_outputs_get+0x168>
 800713c:	a1c00100 	.word	0xa1c00100
 8007140:	e0042000 	.word	0xe0042000
 8007144:	58024000 	.word	0x58024000
 8007148:	f407a5c2 	.word	0xf407a5c2
 800714c:	b5e8b5cd 	.word	0xb5e8b5cd
 8007150:	40023000 	.word	0x40023000

08007154 <ai_platform_network_create>:
 8007154:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007158:	b083      	sub	sp, #12
 800715a:	4606      	mov	r6, r0
 800715c:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8007160:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8007164:	4615      	mov	r5, r2
 8007166:	461f      	mov	r7, r3
 8007168:	f7ff fd0c 	bl	8006b84 <_ai_platform_acquire_crc>
 800716c:	b188      	cbz	r0, 8007192 <ai_platform_network_create+0x3e>
 800716e:	4a5d      	ldr	r2, [pc, #372]	; (80072e4 <ai_platform_network_create+0x190>)
 8007170:	6812      	ldr	r2, [r2, #0]
 8007172:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8007176:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800717a:	4603      	mov	r3, r0
 800717c:	d00e      	beq.n	800719c <ai_platform_network_create+0x48>
 800717e:	4a5a      	ldr	r2, [pc, #360]	; (80072e8 <ai_platform_network_create+0x194>)
 8007180:	2118      	movs	r1, #24
 8007182:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8007186:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 800718a:	2918      	cmp	r1, #24
 800718c:	d018      	beq.n	80071c0 <ai_platform_network_create+0x6c>
 800718e:	f7ff fcfb 	bl	8006b88 <_ai_platform_release_crc>
 8007192:	f244 1033 	movw	r0, #16691	; 0x4133
 8007196:	b003      	add	sp, #12
 8007198:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800719c:	4a53      	ldr	r2, [pc, #332]	; (80072ec <ai_platform_network_create+0x198>)
 800719e:	2101      	movs	r1, #1
 80071a0:	6091      	str	r1, [r2, #8]
 80071a2:	2114      	movs	r1, #20
 80071a4:	e001      	b.n	80071aa <ai_platform_network_create+0x56>
 80071a6:	3901      	subs	r1, #1
 80071a8:	d002      	beq.n	80071b0 <ai_platform_network_create+0x5c>
 80071aa:	6894      	ldr	r4, [r2, #8]
 80071ac:	2c00      	cmp	r4, #0
 80071ae:	d1fa      	bne.n	80071a6 <ai_platform_network_create+0x52>
 80071b0:	4a4e      	ldr	r2, [pc, #312]	; (80072ec <ai_platform_network_create+0x198>)
 80071b2:	6891      	ldr	r1, [r2, #8]
 80071b4:	b911      	cbnz	r1, 80071bc <ai_platform_network_create+0x68>
 80071b6:	6812      	ldr	r2, [r2, #0]
 80071b8:	3201      	adds	r2, #1
 80071ba:	d008      	beq.n	80071ce <ai_platform_network_create+0x7a>
 80071bc:	4618      	mov	r0, r3
 80071be:	e7e6      	b.n	800718e <ai_platform_network_create+0x3a>
 80071c0:	2101      	movs	r1, #1
 80071c2:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 80071c6:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 80071ca:	2900      	cmp	r1, #0
 80071cc:	d1fb      	bne.n	80071c6 <ai_platform_network_create+0x72>
 80071ce:	4618      	mov	r0, r3
 80071d0:	f7ff fcda 	bl	8006b88 <_ai_platform_release_crc>
 80071d4:	f7ff fcd6 	bl	8006b84 <_ai_platform_acquire_crc>
 80071d8:	4b42      	ldr	r3, [pc, #264]	; (80072e4 <ai_platform_network_create+0x190>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80071e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071e4:	d010      	beq.n	8007208 <ai_platform_network_create+0xb4>
 80071e6:	4b40      	ldr	r3, [pc, #256]	; (80072e8 <ai_platform_network_create+0x194>)
 80071e8:	2201      	movs	r2, #1
 80071ea:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 80071ee:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 80071f2:	2900      	cmp	r1, #0
 80071f4:	d1fb      	bne.n	80071ee <ai_platform_network_create+0x9a>
 80071f6:	4a3e      	ldr	r2, [pc, #248]	; (80072f0 <ai_platform_network_create+0x19c>)
 80071f8:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 80071fc:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8007200:	4b3c      	ldr	r3, [pc, #240]	; (80072f4 <ai_platform_network_create+0x1a0>)
 8007202:	429a      	cmp	r2, r3
 8007204:	d00c      	beq.n	8007220 <ai_platform_network_create+0xcc>
 8007206:	e7fe      	b.n	8007206 <ai_platform_network_create+0xb2>
 8007208:	4a38      	ldr	r2, [pc, #224]	; (80072ec <ai_platform_network_create+0x198>)
 800720a:	2301      	movs	r3, #1
 800720c:	6093      	str	r3, [r2, #8]
 800720e:	6893      	ldr	r3, [r2, #8]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d1fc      	bne.n	800720e <ai_platform_network_create+0xba>
 8007214:	4b36      	ldr	r3, [pc, #216]	; (80072f0 <ai_platform_network_create+0x19c>)
 8007216:	6013      	str	r3, [r2, #0]
 8007218:	6812      	ldr	r2, [r2, #0]
 800721a:	4b36      	ldr	r3, [pc, #216]	; (80072f4 <ai_platform_network_create+0x1a0>)
 800721c:	429a      	cmp	r2, r3
 800721e:	d122      	bne.n	8007266 <ai_platform_network_create+0x112>
 8007220:	f7ff fcb2 	bl	8006b88 <_ai_platform_release_crc>
 8007224:	b38e      	cbz	r6, 800728a <ai_platform_network_create+0x136>
 8007226:	4b34      	ldr	r3, [pc, #208]	; (80072f8 <ai_platform_network_create+0x1a4>)
 8007228:	602b      	str	r3, [r5, #0]
 800722a:	6035      	str	r5, [r6, #0]
 800722c:	f000 fc62 	bl	8007af4 <core_init>
 8007230:	b1d0      	cbz	r0, 8007268 <ai_platform_network_create+0x114>
 8007232:	f7ff fca7 	bl	8006b84 <_ai_platform_acquire_crc>
 8007236:	4b2b      	ldr	r3, [pc, #172]	; (80072e4 <ai_platform_network_create+0x190>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800723e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007242:	d025      	beq.n	8007290 <ai_platform_network_create+0x13c>
 8007244:	4a28      	ldr	r2, [pc, #160]	; (80072e8 <ai_platform_network_create+0x194>)
 8007246:	2301      	movs	r3, #1
 8007248:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800724c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007250:	2b00      	cmp	r3, #0
 8007252:	d1fb      	bne.n	800724c <ai_platform_network_create+0xf8>
 8007254:	4b26      	ldr	r3, [pc, #152]	; (80072f0 <ai_platform_network_create+0x19c>)
 8007256:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800725a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800725e:	4b25      	ldr	r3, [pc, #148]	; (80072f4 <ai_platform_network_create+0x1a0>)
 8007260:	429a      	cmp	r2, r3
 8007262:	d022      	beq.n	80072aa <ai_platform_network_create+0x156>
 8007264:	e7fe      	b.n	8007264 <ai_platform_network_create+0x110>
 8007266:	e7fe      	b.n	8007266 <ai_platform_network_create+0x112>
 8007268:	2430      	movs	r4, #48	; 0x30
 800726a:	2300      	movs	r3, #0
 800726c:	6033      	str	r3, [r6, #0]
 800726e:	2610      	movs	r6, #16
 8007270:	464a      	mov	r2, r9
 8007272:	4641      	mov	r1, r8
 8007274:	4638      	mov	r0, r7
 8007276:	f001 fb9f 	bl	80089b8 <ai_version_get>
 800727a:	4603      	mov	r3, r0
 800727c:	2000      	movs	r0, #0
 800727e:	f364 0007 	bfi	r0, r4, #0, #8
 8007282:	64ab      	str	r3, [r5, #72]	; 0x48
 8007284:	f366 201f 	bfi	r0, r6, #8, #24
 8007288:	e785      	b.n	8007196 <ai_platform_network_create+0x42>
 800728a:	f241 0010 	movw	r0, #4112	; 0x1010
 800728e:	e782      	b.n	8007196 <ai_platform_network_create+0x42>
 8007290:	4a16      	ldr	r2, [pc, #88]	; (80072ec <ai_platform_network_create+0x198>)
 8007292:	2301      	movs	r3, #1
 8007294:	6093      	str	r3, [r2, #8]
 8007296:	6893      	ldr	r3, [r2, #8]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d1fc      	bne.n	8007296 <ai_platform_network_create+0x142>
 800729c:	4b14      	ldr	r3, [pc, #80]	; (80072f0 <ai_platform_network_create+0x19c>)
 800729e:	6013      	str	r3, [r2, #0]
 80072a0:	6812      	ldr	r2, [r2, #0]
 80072a2:	4b14      	ldr	r3, [pc, #80]	; (80072f4 <ai_platform_network_create+0x1a0>)
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d000      	beq.n	80072aa <ai_platform_network_create+0x156>
 80072a8:	e7fe      	b.n	80072a8 <ai_platform_network_create+0x154>
 80072aa:	f7ff fc6d 	bl	8006b88 <_ai_platform_release_crc>
 80072ae:	2200      	movs	r2, #0
 80072b0:	4641      	mov	r1, r8
 80072b2:	4638      	mov	r0, r7
 80072b4:	f001 fb80 	bl	80089b8 <ai_version_get>
 80072b8:	2200      	movs	r2, #0
 80072ba:	4604      	mov	r4, r0
 80072bc:	2105      	movs	r1, #5
 80072be:	2001      	movs	r0, #1
 80072c0:	f001 fb7a 	bl	80089b8 <ai_version_get>
 80072c4:	4284      	cmp	r4, r0
 80072c6:	d001      	beq.n	80072cc <ai_platform_network_create+0x178>
 80072c8:	2401      	movs	r4, #1
 80072ca:	e7ce      	b.n	800726a <ai_platform_network_create+0x116>
 80072cc:	4b0b      	ldr	r3, [pc, #44]	; (80072fc <ai_platform_network_create+0x1a8>)
 80072ce:	9301      	str	r3, [sp, #4]
 80072d0:	a801      	add	r0, sp, #4
 80072d2:	f000 fc23 	bl	8007b1c <ai_check_custom_types>
 80072d6:	b110      	cbz	r0, 80072de <ai_platform_network_create+0x18a>
 80072d8:	2600      	movs	r6, #0
 80072da:	4634      	mov	r4, r6
 80072dc:	e7c8      	b.n	8007270 <ai_platform_network_create+0x11c>
 80072de:	2402      	movs	r4, #2
 80072e0:	e7c3      	b.n	800726a <ai_platform_network_create+0x116>
 80072e2:	bf00      	nop
 80072e4:	e0042000 	.word	0xe0042000
 80072e8:	58024000 	.word	0x58024000
 80072ec:	40023000 	.word	0x40023000
 80072f0:	f407a5c2 	.word	0xf407a5c2
 80072f4:	b5e8b5cd 	.word	0xb5e8b5cd
 80072f8:	a1c00100 	.word	0xa1c00100
 80072fc:	84048403 	.word	0x84048403

08007300 <ai_platform_network_init>:
 8007300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007304:	b1f8      	cbz	r0, 8007346 <ai_platform_network_init+0x46>
 8007306:	4b6e      	ldr	r3, [pc, #440]	; (80074c0 <ai_platform_network_init+0x1c0>)
 8007308:	6802      	ldr	r2, [r0, #0]
 800730a:	429a      	cmp	r2, r3
 800730c:	4604      	mov	r4, r0
 800730e:	d11a      	bne.n	8007346 <ai_platform_network_init+0x46>
 8007310:	460e      	mov	r6, r1
 8007312:	f7ff fc37 	bl	8006b84 <_ai_platform_acquire_crc>
 8007316:	4b6b      	ldr	r3, [pc, #428]	; (80074c4 <ai_platform_network_init+0x1c4>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800731e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007322:	d03d      	beq.n	80073a0 <ai_platform_network_init+0xa0>
 8007324:	4a68      	ldr	r2, [pc, #416]	; (80074c8 <ai_platform_network_init+0x1c8>)
 8007326:	2301      	movs	r3, #1
 8007328:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800732c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007330:	2b00      	cmp	r3, #0
 8007332:	d1fb      	bne.n	800732c <ai_platform_network_init+0x2c>
 8007334:	4b65      	ldr	r3, [pc, #404]	; (80074cc <ai_platform_network_init+0x1cc>)
 8007336:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800733a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800733e:	4b64      	ldr	r3, [pc, #400]	; (80074d0 <ai_platform_network_init+0x1d0>)
 8007340:	429a      	cmp	r2, r3
 8007342:	d039      	beq.n	80073b8 <ai_platform_network_init+0xb8>
 8007344:	e7fe      	b.n	8007344 <ai_platform_network_init+0x44>
 8007346:	f7ff fc1d 	bl	8006b84 <_ai_platform_acquire_crc>
 800734a:	4b5e      	ldr	r3, [pc, #376]	; (80074c4 <ai_platform_network_init+0x1c4>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007352:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007356:	d010      	beq.n	800737a <ai_platform_network_init+0x7a>
 8007358:	4a5b      	ldr	r2, [pc, #364]	; (80074c8 <ai_platform_network_init+0x1c8>)
 800735a:	2301      	movs	r3, #1
 800735c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007360:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007364:	2b00      	cmp	r3, #0
 8007366:	d1fb      	bne.n	8007360 <ai_platform_network_init+0x60>
 8007368:	4b58      	ldr	r3, [pc, #352]	; (80074cc <ai_platform_network_init+0x1cc>)
 800736a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800736e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007372:	4b57      	ldr	r3, [pc, #348]	; (80074d0 <ai_platform_network_init+0x1d0>)
 8007374:	429a      	cmp	r2, r3
 8007376:	d00d      	beq.n	8007394 <ai_platform_network_init+0x94>
 8007378:	e7fe      	b.n	8007378 <ai_platform_network_init+0x78>
 800737a:	4a56      	ldr	r2, [pc, #344]	; (80074d4 <ai_platform_network_init+0x1d4>)
 800737c:	2301      	movs	r3, #1
 800737e:	6093      	str	r3, [r2, #8]
 8007380:	6893      	ldr	r3, [r2, #8]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d1fc      	bne.n	8007380 <ai_platform_network_init+0x80>
 8007386:	4b51      	ldr	r3, [pc, #324]	; (80074cc <ai_platform_network_init+0x1cc>)
 8007388:	6013      	str	r3, [r2, #0]
 800738a:	6812      	ldr	r2, [r2, #0]
 800738c:	4b50      	ldr	r3, [pc, #320]	; (80074d0 <ai_platform_network_init+0x1d0>)
 800738e:	429a      	cmp	r2, r3
 8007390:	d000      	beq.n	8007394 <ai_platform_network_init+0x94>
 8007392:	e7fe      	b.n	8007392 <ai_platform_network_init+0x92>
 8007394:	f7ff fbf8 	bl	8006b88 <_ai_platform_release_crc>
 8007398:	2600      	movs	r6, #0
 800739a:	4630      	mov	r0, r6
 800739c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073a0:	4a4c      	ldr	r2, [pc, #304]	; (80074d4 <ai_platform_network_init+0x1d4>)
 80073a2:	2301      	movs	r3, #1
 80073a4:	6093      	str	r3, [r2, #8]
 80073a6:	6893      	ldr	r3, [r2, #8]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d1fc      	bne.n	80073a6 <ai_platform_network_init+0xa6>
 80073ac:	4b47      	ldr	r3, [pc, #284]	; (80074cc <ai_platform_network_init+0x1cc>)
 80073ae:	6013      	str	r3, [r2, #0]
 80073b0:	6812      	ldr	r2, [r2, #0]
 80073b2:	4b47      	ldr	r3, [pc, #284]	; (80074d0 <ai_platform_network_init+0x1d0>)
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d11c      	bne.n	80073f2 <ai_platform_network_init+0xf2>
 80073b8:	f7ff fbe6 	bl	8006b88 <_ai_platform_release_crc>
 80073bc:	2e00      	cmp	r6, #0
 80073be:	d06f      	beq.n	80074a0 <ai_platform_network_init+0x1a0>
 80073c0:	4b45      	ldr	r3, [pc, #276]	; (80074d8 <ai_platform_network_init+0x1d8>)
 80073c2:	6832      	ldr	r2, [r6, #0]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d115      	bne.n	80073f4 <ai_platform_network_init+0xf4>
 80073c8:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 80073cc:	6933      	ldr	r3, [r6, #16]
 80073ce:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 80073d2:	89f7      	ldrh	r7, [r6, #14]
 80073d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80073d6:	e9c4 2107 	strd	r2, r1, [r4, #28]
 80073da:	2303      	movs	r3, #3
 80073dc:	84e7      	strh	r7, [r4, #38]	; 0x26
 80073de:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 80073e2:	60e3      	str	r3, [r4, #12]
 80073e4:	4620      	mov	r0, r4
 80073e6:	4626      	mov	r6, r4
 80073e8:	f000 fbc2 	bl	8007b70 <ai_layers_init_all>
 80073ec:	4630      	mov	r0, r6
 80073ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073f2:	e7fe      	b.n	80073f2 <ai_platform_network_init+0xf2>
 80073f4:	2101      	movs	r1, #1
 80073f6:	4630      	mov	r0, r6
 80073f8:	4635      	mov	r5, r6
 80073fa:	6876      	ldr	r6, [r6, #4]
 80073fc:	f7ff fb74 	bl	8006ae8 <ai_buffer_get_size>
 8007400:	f105 081c 	add.w	r8, r5, #28
 8007404:	4681      	mov	r9, r0
 8007406:	2101      	movs	r1, #1
 8007408:	4640      	mov	r0, r8
 800740a:	6a2f      	ldr	r7, [r5, #32]
 800740c:	f7ff fb6c 	bl	8006ae8 <ai_buffer_get_size>
 8007410:	f1b9 0f00 	cmp.w	r9, #0
 8007414:	d025      	beq.n	8007462 <ai_platform_network_init+0x162>
 8007416:	2201      	movs	r2, #1
 8007418:	4696      	mov	lr, r2
 800741a:	bb30      	cbnz	r0, 800746a <ai_platform_network_init+0x16a>
 800741c:	4680      	mov	r8, r0
 800741e:	4607      	mov	r7, r0
 8007420:	b376      	cbz	r6, 8007480 <ai_platform_network_init+0x180>
 8007422:	8be3      	ldrh	r3, [r4, #30]
 8007424:	4573      	cmp	r3, lr
 8007426:	d323      	bcc.n	8007470 <ai_platform_network_init+0x170>
 8007428:	b142      	cbz	r2, 800743c <ai_platform_network_init+0x13c>
 800742a:	46ac      	mov	ip, r5
 800742c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8007430:	6a25      	ldr	r5, [r4, #32]
 8007432:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007434:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8007438:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800743c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800743e:	f8a4 e01e 	strh.w	lr, [r4, #30]
 8007442:	2600      	movs	r6, #0
 8007444:	42bb      	cmp	r3, r7
 8007446:	83a6      	strh	r6, [r4, #28]
 8007448:	d323      	bcc.n	8007492 <ai_platform_network_init+0x192>
 800744a:	b37f      	cbz	r7, 80074ac <ai_platform_network_init+0x1ac>
 800744c:	46c4      	mov	ip, r8
 800744e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8007452:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8007454:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007456:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800745a:	46b6      	mov	lr, r6
 800745c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8007460:	e7bb      	b.n	80073da <ai_platform_network_init+0xda>
 8007462:	464a      	mov	r2, r9
 8007464:	46ce      	mov	lr, r9
 8007466:	464d      	mov	r5, r9
 8007468:	e7d7      	b.n	800741a <ai_platform_network_init+0x11a>
 800746a:	b30f      	cbz	r7, 80074b0 <ai_platform_network_init+0x1b0>
 800746c:	2701      	movs	r7, #1
 800746e:	e7d7      	b.n	8007420 <ai_platform_network_init+0x120>
 8007470:	2212      	movs	r2, #18
 8007472:	2116      	movs	r1, #22
 8007474:	f104 0010 	add.w	r0, r4, #16
 8007478:	f000 fb44 	bl	8007b04 <core_set_error>
 800747c:	2600      	movs	r6, #0
 800747e:	e78c      	b.n	800739a <ai_platform_network_init+0x9a>
 8007480:	f1b9 0f00 	cmp.w	r9, #0
 8007484:	d0cd      	beq.n	8007422 <ai_platform_network_init+0x122>
 8007486:	2110      	movs	r1, #16
 8007488:	2212      	movs	r2, #18
 800748a:	1860      	adds	r0, r4, r1
 800748c:	f000 fb3a 	bl	8007b04 <core_set_error>
 8007490:	e783      	b.n	800739a <ai_platform_network_init+0x9a>
 8007492:	2213      	movs	r2, #19
 8007494:	2116      	movs	r1, #22
 8007496:	f104 0010 	add.w	r0, r4, #16
 800749a:	f000 fb33 	bl	8007b04 <core_set_error>
 800749e:	e77c      	b.n	800739a <ai_platform_network_init+0x9a>
 80074a0:	2110      	movs	r1, #16
 80074a2:	2211      	movs	r2, #17
 80074a4:	1860      	adds	r0, r4, r1
 80074a6:	f000 fb2d 	bl	8007b04 <core_set_error>
 80074aa:	e776      	b.n	800739a <ai_platform_network_init+0x9a>
 80074ac:	46be      	mov	lr, r7
 80074ae:	e794      	b.n	80073da <ai_platform_network_init+0xda>
 80074b0:	2110      	movs	r1, #16
 80074b2:	2213      	movs	r2, #19
 80074b4:	1860      	adds	r0, r4, r1
 80074b6:	f000 fb25 	bl	8007b04 <core_set_error>
 80074ba:	463e      	mov	r6, r7
 80074bc:	e76d      	b.n	800739a <ai_platform_network_init+0x9a>
 80074be:	bf00      	nop
 80074c0:	a1c00100 	.word	0xa1c00100
 80074c4:	e0042000 	.word	0xe0042000
 80074c8:	58024000 	.word	0x58024000
 80074cc:	f407a5c2 	.word	0xf407a5c2
 80074d0:	b5e8b5cd 	.word	0xb5e8b5cd
 80074d4:	40023000 	.word	0x40023000
 80074d8:	a1facade 	.word	0xa1facade

080074dc <ai_platform_network_post_init>:
 80074dc:	b538      	push	{r3, r4, r5, lr}
 80074de:	b1f0      	cbz	r0, 800751e <ai_platform_network_post_init+0x42>
 80074e0:	4b3c      	ldr	r3, [pc, #240]	; (80075d4 <ai_platform_network_post_init+0xf8>)
 80074e2:	6802      	ldr	r2, [r0, #0]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	4604      	mov	r4, r0
 80074e8:	d119      	bne.n	800751e <ai_platform_network_post_init+0x42>
 80074ea:	f7ff fb4b 	bl	8006b84 <_ai_platform_acquire_crc>
 80074ee:	4b3a      	ldr	r3, [pc, #232]	; (80075d8 <ai_platform_network_post_init+0xfc>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80074f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074fa:	d03b      	beq.n	8007574 <ai_platform_network_post_init+0x98>
 80074fc:	4a37      	ldr	r2, [pc, #220]	; (80075dc <ai_platform_network_post_init+0x100>)
 80074fe:	2301      	movs	r3, #1
 8007500:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007504:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007508:	2b00      	cmp	r3, #0
 800750a:	d1fb      	bne.n	8007504 <ai_platform_network_post_init+0x28>
 800750c:	4b34      	ldr	r3, [pc, #208]	; (80075e0 <ai_platform_network_post_init+0x104>)
 800750e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007512:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007516:	4b33      	ldr	r3, [pc, #204]	; (80075e4 <ai_platform_network_post_init+0x108>)
 8007518:	429a      	cmp	r2, r3
 800751a:	d037      	beq.n	800758c <ai_platform_network_post_init+0xb0>
 800751c:	e7fe      	b.n	800751c <ai_platform_network_post_init+0x40>
 800751e:	f7ff fb31 	bl	8006b84 <_ai_platform_acquire_crc>
 8007522:	4b2d      	ldr	r3, [pc, #180]	; (80075d8 <ai_platform_network_post_init+0xfc>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800752a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800752e:	d010      	beq.n	8007552 <ai_platform_network_post_init+0x76>
 8007530:	4a2a      	ldr	r2, [pc, #168]	; (80075dc <ai_platform_network_post_init+0x100>)
 8007532:	2301      	movs	r3, #1
 8007534:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007538:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800753c:	2b00      	cmp	r3, #0
 800753e:	d1fb      	bne.n	8007538 <ai_platform_network_post_init+0x5c>
 8007540:	4b27      	ldr	r3, [pc, #156]	; (80075e0 <ai_platform_network_post_init+0x104>)
 8007542:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007546:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800754a:	4b26      	ldr	r3, [pc, #152]	; (80075e4 <ai_platform_network_post_init+0x108>)
 800754c:	429a      	cmp	r2, r3
 800754e:	d00d      	beq.n	800756c <ai_platform_network_post_init+0x90>
 8007550:	e7fe      	b.n	8007550 <ai_platform_network_post_init+0x74>
 8007552:	4a25      	ldr	r2, [pc, #148]	; (80075e8 <ai_platform_network_post_init+0x10c>)
 8007554:	2301      	movs	r3, #1
 8007556:	6093      	str	r3, [r2, #8]
 8007558:	6893      	ldr	r3, [r2, #8]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d1fc      	bne.n	8007558 <ai_platform_network_post_init+0x7c>
 800755e:	4b20      	ldr	r3, [pc, #128]	; (80075e0 <ai_platform_network_post_init+0x104>)
 8007560:	6013      	str	r3, [r2, #0]
 8007562:	6812      	ldr	r2, [r2, #0]
 8007564:	4b1f      	ldr	r3, [pc, #124]	; (80075e4 <ai_platform_network_post_init+0x108>)
 8007566:	429a      	cmp	r2, r3
 8007568:	d000      	beq.n	800756c <ai_platform_network_post_init+0x90>
 800756a:	e7fe      	b.n	800756a <ai_platform_network_post_init+0x8e>
 800756c:	f7ff fb0c 	bl	8006b88 <_ai_platform_release_crc>
 8007570:	2000      	movs	r0, #0
 8007572:	bd38      	pop	{r3, r4, r5, pc}
 8007574:	4a1c      	ldr	r2, [pc, #112]	; (80075e8 <ai_platform_network_post_init+0x10c>)
 8007576:	2301      	movs	r3, #1
 8007578:	6093      	str	r3, [r2, #8]
 800757a:	6893      	ldr	r3, [r2, #8]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d1fc      	bne.n	800757a <ai_platform_network_post_init+0x9e>
 8007580:	4b17      	ldr	r3, [pc, #92]	; (80075e0 <ai_platform_network_post_init+0x104>)
 8007582:	6013      	str	r3, [r2, #0]
 8007584:	6812      	ldr	r2, [r2, #0]
 8007586:	4b17      	ldr	r3, [pc, #92]	; (80075e4 <ai_platform_network_post_init+0x108>)
 8007588:	429a      	cmp	r2, r3
 800758a:	d11a      	bne.n	80075c2 <ai_platform_network_post_init+0xe6>
 800758c:	f7ff fafc 	bl	8006b88 <_ai_platform_release_crc>
 8007590:	68e3      	ldr	r3, [r4, #12]
 8007592:	f013 0502 	ands.w	r5, r3, #2
 8007596:	d015      	beq.n	80075c4 <ai_platform_network_post_init+0xe8>
 8007598:	4620      	mov	r0, r4
 800759a:	f000 faf7 	bl	8007b8c <ai_layers_post_init_all>
 800759e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80075a0:	b16b      	cbz	r3, 80075be <ai_platform_network_post_init+0xe2>
 80075a2:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80075a4:	e007      	b.n	80075b6 <ai_platform_network_post_init+0xda>
 80075a6:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 80075aa:	4798      	blx	r3
 80075ac:	692b      	ldr	r3, [r5, #16]
 80075ae:	42ab      	cmp	r3, r5
 80075b0:	d005      	beq.n	80075be <ai_platform_network_post_init+0xe2>
 80075b2:	b123      	cbz	r3, 80075be <ai_platform_network_post_init+0xe2>
 80075b4:	461d      	mov	r5, r3
 80075b6:	4629      	mov	r1, r5
 80075b8:	2000      	movs	r0, #0
 80075ba:	2d00      	cmp	r5, #0
 80075bc:	d1f3      	bne.n	80075a6 <ai_platform_network_post_init+0xca>
 80075be:	2001      	movs	r0, #1
 80075c0:	bd38      	pop	{r3, r4, r5, pc}
 80075c2:	e7fe      	b.n	80075c2 <ai_platform_network_post_init+0xe6>
 80075c4:	2210      	movs	r2, #16
 80075c6:	2111      	movs	r1, #17
 80075c8:	18a0      	adds	r0, r4, r2
 80075ca:	f000 fa9b 	bl	8007b04 <core_set_error>
 80075ce:	4628      	mov	r0, r5
 80075d0:	bd38      	pop	{r3, r4, r5, pc}
 80075d2:	bf00      	nop
 80075d4:	a1c00100 	.word	0xa1c00100
 80075d8:	e0042000 	.word	0xe0042000
 80075dc:	58024000 	.word	0x58024000
 80075e0:	f407a5c2 	.word	0xf407a5c2
 80075e4:	b5e8b5cd 	.word	0xb5e8b5cd
 80075e8:	40023000 	.word	0x40023000

080075ec <ai_platform_network_process>:
 80075ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075f0:	460e      	mov	r6, r1
 80075f2:	b085      	sub	sp, #20
 80075f4:	4693      	mov	fp, r2
 80075f6:	4605      	mov	r5, r0
 80075f8:	b120      	cbz	r0, 8007604 <ai_platform_network_process+0x18>
 80075fa:	4bb8      	ldr	r3, [pc, #736]	; (80078dc <ai_platform_network_process+0x2f0>)
 80075fc:	6802      	ldr	r2, [r0, #0]
 80075fe:	429a      	cmp	r2, r3
 8007600:	bf18      	it	ne
 8007602:	2500      	movne	r5, #0
 8007604:	f7ff fabe 	bl	8006b84 <_ai_platform_acquire_crc>
 8007608:	4bb5      	ldr	r3, [pc, #724]	; (80078e0 <ai_platform_network_process+0x2f4>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007610:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007614:	d010      	beq.n	8007638 <ai_platform_network_process+0x4c>
 8007616:	4ab3      	ldr	r2, [pc, #716]	; (80078e4 <ai_platform_network_process+0x2f8>)
 8007618:	2301      	movs	r3, #1
 800761a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800761e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007622:	2b00      	cmp	r3, #0
 8007624:	d1fb      	bne.n	800761e <ai_platform_network_process+0x32>
 8007626:	4bb0      	ldr	r3, [pc, #704]	; (80078e8 <ai_platform_network_process+0x2fc>)
 8007628:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800762c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007630:	4bae      	ldr	r3, [pc, #696]	; (80078ec <ai_platform_network_process+0x300>)
 8007632:	429a      	cmp	r2, r3
 8007634:	d00d      	beq.n	8007652 <ai_platform_network_process+0x66>
 8007636:	e7fe      	b.n	8007636 <ai_platform_network_process+0x4a>
 8007638:	4aad      	ldr	r2, [pc, #692]	; (80078f0 <ai_platform_network_process+0x304>)
 800763a:	2301      	movs	r3, #1
 800763c:	6093      	str	r3, [r2, #8]
 800763e:	6893      	ldr	r3, [r2, #8]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d1fc      	bne.n	800763e <ai_platform_network_process+0x52>
 8007644:	4ba8      	ldr	r3, [pc, #672]	; (80078e8 <ai_platform_network_process+0x2fc>)
 8007646:	6013      	str	r3, [r2, #0]
 8007648:	6812      	ldr	r2, [r2, #0]
 800764a:	4ba8      	ldr	r3, [pc, #672]	; (80078ec <ai_platform_network_process+0x300>)
 800764c:	429a      	cmp	r2, r3
 800764e:	f040 812c 	bne.w	80078aa <ai_platform_network_process+0x2be>
 8007652:	f7ff fa99 	bl	8006b88 <_ai_platform_release_crc>
 8007656:	2d00      	cmp	r5, #0
 8007658:	f000 8154 	beq.w	8007904 <ai_platform_network_process+0x318>
 800765c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 800765e:	2b00      	cmp	r3, #0
 8007660:	f000 8124 	beq.w	80078ac <ai_platform_network_process+0x2c0>
 8007664:	68eb      	ldr	r3, [r5, #12]
 8007666:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 800766a:	f003 0303 	and.w	r3, r3, #3
 800766e:	2700      	movs	r7, #0
 8007670:	2b03      	cmp	r3, #3
 8007672:	616f      	str	r7, [r5, #20]
 8007674:	f040 813e 	bne.w	80078f4 <ai_platform_network_process+0x308>
 8007678:	2e00      	cmp	r6, #0
 800767a:	f000 811d 	beq.w	80078b8 <ai_platform_network_process+0x2cc>
 800767e:	f1ba 0f00 	cmp.w	sl, #0
 8007682:	f000 8119 	beq.w	80078b8 <ai_platform_network_process+0x2cc>
 8007686:	f8ba 3000 	ldrh.w	r3, [sl]
 800768a:	2b00      	cmp	r3, #0
 800768c:	f000 8114 	beq.w	80078b8 <ai_platform_network_process+0x2cc>
 8007690:	69b3      	ldr	r3, [r6, #24]
 8007692:	f8cd b00c 	str.w	fp, [sp, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	e9cd 3501 	strd	r3, r5, [sp, #4]
 800769c:	f8da 3004 	ldr.w	r3, [sl, #4]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d072      	beq.n	800778a <ai_platform_network_process+0x19e>
 80076a4:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 80076a8:	2c00      	cmp	r4, #0
 80076aa:	d06e      	beq.n	800778a <ai_platform_network_process+0x19e>
 80076ac:	f8da 3008 	ldr.w	r3, [sl, #8]
 80076b0:	f8d3 9000 	ldr.w	r9, [r3]
 80076b4:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 80076b8:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 80076bc:	f000 81de 	beq.w	8007a7c <ai_platform_network_process+0x490>
 80076c0:	69a3      	ldr	r3, [r4, #24]
 80076c2:	2101      	movs	r1, #1
 80076c4:	4630      	mov	r0, r6
 80076c6:	685d      	ldr	r5, [r3, #4]
 80076c8:	f7ff fa0e 	bl	8006ae8 <ai_buffer_get_size>
 80076cc:	4285      	cmp	r5, r0
 80076ce:	f0c0 811b 	bcc.w	8007908 <ai_platform_network_process+0x31c>
 80076d2:	68e0      	ldr	r0, [r4, #12]
 80076d4:	69b1      	ldr	r1, [r6, #24]
 80076d6:	68c2      	ldr	r2, [r0, #12]
 80076d8:	68cb      	ldr	r3, [r1, #12]
 80076da:	429a      	cmp	r2, r3
 80076dc:	f040 8114 	bne.w	8007908 <ai_platform_network_process+0x31c>
 80076e0:	6882      	ldr	r2, [r0, #8]
 80076e2:	688b      	ldr	r3, [r1, #8]
 80076e4:	429a      	cmp	r2, r3
 80076e6:	f040 810f 	bne.w	8007908 <ai_platform_network_process+0x31c>
 80076ea:	6842      	ldr	r2, [r0, #4]
 80076ec:	684b      	ldr	r3, [r1, #4]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	f040 810a 	bne.w	8007908 <ai_platform_network_process+0x31c>
 80076f4:	69a3      	ldr	r3, [r4, #24]
 80076f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80076fa:	f001 f94b 	bl	8008994 <ai_array_get_data_byte_size>
 80076fe:	4605      	mov	r5, r0
 8007700:	4620      	mov	r0, r4
 8007702:	f001 f95f 	bl	80089c4 <get_tensor_byte_size>
 8007706:	4285      	cmp	r5, r0
 8007708:	f0c0 80fe 	bcc.w	8007908 <ai_platform_network_process+0x31c>
 800770c:	69a3      	ldr	r3, [r4, #24]
 800770e:	6818      	ldr	r0, [r3, #0]
 8007710:	f001 f8ac 	bl	800886c <ai_array_to_buffer_fmt>
 8007714:	6833      	ldr	r3, [r6, #0]
 8007716:	4058      	eors	r0, r3
 8007718:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800771c:	f040 81b9 	bne.w	8007a92 <ai_platform_network_process+0x4a6>
 8007720:	6873      	ldr	r3, [r6, #4]
 8007722:	2b00      	cmp	r3, #0
 8007724:	f000 81ac 	beq.w	8007a80 <ai_platform_network_process+0x494>
 8007728:	69b3      	ldr	r3, [r6, #24]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	2b00      	cmp	r3, #0
 800772e:	f000 819c 	beq.w	8007a6a <ai_platform_network_process+0x47e>
 8007732:	9a01      	ldr	r2, [sp, #4]
 8007734:	429a      	cmp	r2, r3
 8007736:	bf38      	it	cc
 8007738:	461a      	movcc	r2, r3
 800773a:	4620      	mov	r0, r4
 800773c:	9201      	str	r2, [sp, #4]
 800773e:	f001 f941 	bl	80089c4 <get_tensor_byte_size>
 8007742:	f8c8 0008 	str.w	r0, [r8, #8]
 8007746:	69b3      	ldr	r3, [r6, #24]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	fb00 f303 	mul.w	r3, r0, r3
 800774e:	f8c8 300c 	str.w	r3, [r8, #12]
 8007752:	6871      	ldr	r1, [r6, #4]
 8007754:	f8c8 1004 	str.w	r1, [r8, #4]
 8007758:	440b      	add	r3, r1
 800775a:	f849 300b 	str.w	r3, [r9, fp]
 800775e:	69a0      	ldr	r0, [r4, #24]
 8007760:	6803      	ldr	r3, [r0, #0]
 8007762:	009a      	lsls	r2, r3, #2
 8007764:	f107 0701 	add.w	r7, r7, #1
 8007768:	f106 061c 	add.w	r6, r6, #28
 800776c:	f100 80af 	bmi.w	80078ce <ai_platform_network_process+0x2e2>
 8007770:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8007774:	1a9b      	subs	r3, r3, r2
 8007776:	4419      	add	r1, r3
 8007778:	6081      	str	r1, [r0, #8]
 800777a:	69a3      	ldr	r3, [r4, #24]
 800777c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007780:	60da      	str	r2, [r3, #12]
 8007782:	f8ba 3000 	ldrh.w	r3, [sl]
 8007786:	42bb      	cmp	r3, r7
 8007788:	d888      	bhi.n	800769c <ai_platform_network_process+0xb0>
 800778a:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 800778e:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8007790:	f1bb 0f00 	cmp.w	fp, #0
 8007794:	f000 8186 	beq.w	8007aa4 <ai_platform_network_process+0x4b8>
 8007798:	2a01      	cmp	r2, #1
 800779a:	f240 815e 	bls.w	8007a5a <ai_platform_network_process+0x46e>
 800779e:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 80077a2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	f000 8157 	beq.w	8007a5a <ai_platform_network_process+0x46e>
 80077ac:	465e      	mov	r6, fp
 80077ae:	2700      	movs	r7, #0
 80077b0:	462c      	mov	r4, r5
 80077b2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	f000 80b4 	beq.w	8007924 <ai_platform_network_process+0x338>
 80077bc:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 80077c0:	2d00      	cmp	r5, #0
 80077c2:	f000 80af 	beq.w	8007924 <ai_platform_network_process+0x338>
 80077c6:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80077ca:	f8d3 8000 	ldr.w	r8, [r3]
 80077ce:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 80077d2:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 80077d6:	f000 8171 	beq.w	8007abc <ai_platform_network_process+0x4d0>
 80077da:	69ab      	ldr	r3, [r5, #24]
 80077dc:	2101      	movs	r1, #1
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	9302      	str	r3, [sp, #8]
 80077e2:	4630      	mov	r0, r6
 80077e4:	f7ff f980 	bl	8006ae8 <ai_buffer_get_size>
 80077e8:	9b02      	ldr	r3, [sp, #8]
 80077ea:	4283      	cmp	r3, r0
 80077ec:	f0c0 8134 	bcc.w	8007a58 <ai_platform_network_process+0x46c>
 80077f0:	68e8      	ldr	r0, [r5, #12]
 80077f2:	69b1      	ldr	r1, [r6, #24]
 80077f4:	68c2      	ldr	r2, [r0, #12]
 80077f6:	68cb      	ldr	r3, [r1, #12]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	f040 812d 	bne.w	8007a58 <ai_platform_network_process+0x46c>
 80077fe:	6882      	ldr	r2, [r0, #8]
 8007800:	688b      	ldr	r3, [r1, #8]
 8007802:	429a      	cmp	r2, r3
 8007804:	f040 8128 	bne.w	8007a58 <ai_platform_network_process+0x46c>
 8007808:	6842      	ldr	r2, [r0, #4]
 800780a:	684b      	ldr	r3, [r1, #4]
 800780c:	429a      	cmp	r2, r3
 800780e:	f040 8123 	bne.w	8007a58 <ai_platform_network_process+0x46c>
 8007812:	69ab      	ldr	r3, [r5, #24]
 8007814:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007818:	f001 f8bc 	bl	8008994 <ai_array_get_data_byte_size>
 800781c:	9002      	str	r0, [sp, #8]
 800781e:	4628      	mov	r0, r5
 8007820:	f001 f8d0 	bl	80089c4 <get_tensor_byte_size>
 8007824:	9b02      	ldr	r3, [sp, #8]
 8007826:	4283      	cmp	r3, r0
 8007828:	f0c0 8116 	bcc.w	8007a58 <ai_platform_network_process+0x46c>
 800782c:	69ab      	ldr	r3, [r5, #24]
 800782e:	6818      	ldr	r0, [r3, #0]
 8007830:	f001 f81c 	bl	800886c <ai_array_to_buffer_fmt>
 8007834:	6833      	ldr	r3, [r6, #0]
 8007836:	4058      	eors	r0, r3
 8007838:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800783c:	f040 8136 	bne.w	8007aac <ai_platform_network_process+0x4c0>
 8007840:	6873      	ldr	r3, [r6, #4]
 8007842:	2b00      	cmp	r3, #0
 8007844:	f000 814d 	beq.w	8007ae2 <ai_platform_network_process+0x4f6>
 8007848:	69b3      	ldr	r3, [r6, #24]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	2b00      	cmp	r3, #0
 800784e:	f000 813f 	beq.w	8007ad0 <ai_platform_network_process+0x4e4>
 8007852:	9a01      	ldr	r2, [sp, #4]
 8007854:	429a      	cmp	r2, r3
 8007856:	bf38      	it	cc
 8007858:	461a      	movcc	r2, r3
 800785a:	4628      	mov	r0, r5
 800785c:	9201      	str	r2, [sp, #4]
 800785e:	f001 f8b1 	bl	80089c4 <get_tensor_byte_size>
 8007862:	f8ca 0008 	str.w	r0, [sl, #8]
 8007866:	69b3      	ldr	r3, [r6, #24]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	fb00 f303 	mul.w	r3, r0, r3
 800786e:	f8ca 300c 	str.w	r3, [sl, #12]
 8007872:	6871      	ldr	r1, [r6, #4]
 8007874:	f8ca 1004 	str.w	r1, [sl, #4]
 8007878:	440b      	add	r3, r1
 800787a:	f848 300b 	str.w	r3, [r8, fp]
 800787e:	69a8      	ldr	r0, [r5, #24]
 8007880:	6803      	ldr	r3, [r0, #0]
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	f107 0701 	add.w	r7, r7, #1
 8007888:	f106 061c 	add.w	r6, r6, #28
 800788c:	d445      	bmi.n	800791a <ai_platform_network_process+0x32e>
 800788e:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8007892:	1a9b      	subs	r3, r3, r2
 8007894:	4419      	add	r1, r3
 8007896:	6081      	str	r1, [r0, #8]
 8007898:	69ab      	ldr	r3, [r5, #24]
 800789a:	f8da 2004 	ldr.w	r2, [sl, #4]
 800789e:	60da      	str	r2, [r3, #12]
 80078a0:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80078a4:	429f      	cmp	r7, r3
 80078a6:	d384      	bcc.n	80077b2 <ai_platform_network_process+0x1c6>
 80078a8:	e03c      	b.n	8007924 <ai_platform_network_process+0x338>
 80078aa:	e7fe      	b.n	80078aa <ai_platform_network_process+0x2be>
 80078ac:	68ea      	ldr	r2, [r5, #12]
 80078ae:	616b      	str	r3, [r5, #20]
 80078b0:	f002 0203 	and.w	r2, r2, #3
 80078b4:	2a03      	cmp	r2, #3
 80078b6:	d11d      	bne.n	80078f4 <ai_platform_network_process+0x308>
 80078b8:	2217      	movs	r2, #23
 80078ba:	2112      	movs	r1, #18
 80078bc:	f105 0010 	add.w	r0, r5, #16
 80078c0:	f000 f920 	bl	8007b04 <core_set_error>
 80078c4:	2400      	movs	r4, #0
 80078c6:	4620      	mov	r0, r4
 80078c8:	b005      	add	sp, #20
 80078ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078ce:	f8ba 3000 	ldrh.w	r3, [sl]
 80078d2:	429f      	cmp	r7, r3
 80078d4:	f4ff aee2 	bcc.w	800769c <ai_platform_network_process+0xb0>
 80078d8:	e757      	b.n	800778a <ai_platform_network_process+0x19e>
 80078da:	bf00      	nop
 80078dc:	a1c00100 	.word	0xa1c00100
 80078e0:	e0042000 	.word	0xe0042000
 80078e4:	58024000 	.word	0x58024000
 80078e8:	f407a5c2 	.word	0xf407a5c2
 80078ec:	b5e8b5cd 	.word	0xb5e8b5cd
 80078f0:	40023000 	.word	0x40023000
 80078f4:	2230      	movs	r2, #48	; 0x30
 80078f6:	2111      	movs	r1, #17
 80078f8:	f105 0010 	add.w	r0, r5, #16
 80078fc:	f000 f902 	bl	8007b04 <core_set_error>
 8007900:	2400      	movs	r4, #0
 8007902:	e7e0      	b.n	80078c6 <ai_platform_network_process+0x2da>
 8007904:	462c      	mov	r4, r5
 8007906:	e7de      	b.n	80078c6 <ai_platform_network_process+0x2da>
 8007908:	9d02      	ldr	r5, [sp, #8]
 800790a:	2218      	movs	r2, #24
 800790c:	2112      	movs	r1, #18
 800790e:	f105 0010 	add.w	r0, r5, #16
 8007912:	f000 f8f7 	bl	8007b04 <core_set_error>
 8007916:	2400      	movs	r4, #0
 8007918:	e7d5      	b.n	80078c6 <ai_platform_network_process+0x2da>
 800791a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800791e:	429f      	cmp	r7, r3
 8007920:	f4ff af47 	bcc.w	80077b2 <ai_platform_network_process+0x1c6>
 8007924:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8007928:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800792a:	82a3      	strh	r3, [r4, #20]
 800792c:	4625      	mov	r5, r4
 800792e:	2a00      	cmp	r2, #0
 8007930:	f040 808c 	bne.w	8007a4c <ai_platform_network_process+0x460>
 8007934:	4616      	mov	r6, r2
 8007936:	4617      	mov	r7, r2
 8007938:	8aec      	ldrh	r4, [r5, #22]
 800793a:	429c      	cmp	r4, r3
 800793c:	bf38      	it	cc
 800793e:	46ab      	movcc	fp, r5
 8007940:	d2c1      	bcs.n	80078c6 <ai_platform_network_process+0x2da>
 8007942:	2e00      	cmp	r6, #0
 8007944:	d030      	beq.n	80079a8 <ai_platform_network_process+0x3bc>
 8007946:	f04f 0800 	mov.w	r8, #0
 800794a:	e014      	b.n	8007976 <ai_platform_network_process+0x38a>
 800794c:	6882      	ldr	r2, [r0, #8]
 800794e:	68c5      	ldr	r5, [r0, #12]
 8007950:	6863      	ldr	r3, [r4, #4]
 8007952:	1b52      	subs	r2, r2, r5
 8007954:	4413      	add	r3, r2
 8007956:	6083      	str	r3, [r0, #8]
 8007958:	698b      	ldr	r3, [r1, #24]
 800795a:	6862      	ldr	r2, [r4, #4]
 800795c:	60da      	str	r2, [r3, #12]
 800795e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8007962:	f859 200a 	ldr.w	r2, [r9, sl]
 8007966:	440b      	add	r3, r1
 8007968:	4293      	cmp	r3, r2
 800796a:	bf24      	itt	cs
 800796c:	68e3      	ldrcs	r3, [r4, #12]
 800796e:	1ad3      	subcs	r3, r2, r3
 8007970:	6063      	str	r3, [r4, #4]
 8007972:	f108 0801 	add.w	r8, r8, #1
 8007976:	8833      	ldrh	r3, [r6, #0]
 8007978:	4543      	cmp	r3, r8
 800797a:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 800797e:	d913      	bls.n	80079a8 <ai_platform_network_process+0x3bc>
 8007980:	6873      	ldr	r3, [r6, #4]
 8007982:	b18b      	cbz	r3, 80079a8 <ai_platform_network_process+0x3bc>
 8007984:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8007988:	b171      	cbz	r1, 80079a8 <ai_platform_network_process+0x3bc>
 800798a:	6988      	ldr	r0, [r1, #24]
 800798c:	68b2      	ldr	r2, [r6, #8]
 800798e:	6803      	ldr	r3, [r0, #0]
 8007990:	f8d2 9000 	ldr.w	r9, [r2]
 8007994:	009d      	lsls	r5, r3, #2
 8007996:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800799a:	d5d7      	bpl.n	800794c <ai_platform_network_process+0x360>
 800799c:	6881      	ldr	r1, [r0, #8]
 800799e:	68a2      	ldr	r2, [r4, #8]
 80079a0:	6860      	ldr	r0, [r4, #4]
 80079a2:	f000 fedd 	bl	8008760 <st_int8_copy>
 80079a6:	e7da      	b.n	800795e <ai_platform_network_process+0x372>
 80079a8:	4658      	mov	r0, fp
 80079aa:	f000 f903 	bl	8007bb4 <ai_layers_forward_all>
 80079ae:	2f00      	cmp	r7, #0
 80079b0:	d03d      	beq.n	8007a2e <ai_platform_network_process+0x442>
 80079b2:	2400      	movs	r4, #0
 80079b4:	e016      	b.n	80079e4 <ai_platform_network_process+0x3f8>
 80079b6:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 80079ba:	f859 100a 	ldr.w	r1, [r9, sl]
 80079be:	4413      	add	r3, r2
 80079c0:	428b      	cmp	r3, r1
 80079c2:	bf24      	itt	cs
 80079c4:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 80079c8:	1acb      	subcs	r3, r1, r3
 80079ca:	f8c8 3004 	str.w	r3, [r8, #4]
 80079ce:	6981      	ldr	r1, [r0, #24]
 80079d0:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 80079d4:	1b52      	subs	r2, r2, r5
 80079d6:	4413      	add	r3, r2
 80079d8:	608b      	str	r3, [r1, #8]
 80079da:	6983      	ldr	r3, [r0, #24]
 80079dc:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80079e0:	60da      	str	r2, [r3, #12]
 80079e2:	3401      	adds	r4, #1
 80079e4:	883b      	ldrh	r3, [r7, #0]
 80079e6:	42a3      	cmp	r3, r4
 80079e8:	d921      	bls.n	8007a2e <ai_platform_network_process+0x442>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	b1fb      	cbz	r3, 8007a2e <ai_platform_network_process+0x442>
 80079ee:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80079f2:	b1e0      	cbz	r0, 8007a2e <ai_platform_network_process+0x442>
 80079f4:	68ba      	ldr	r2, [r7, #8]
 80079f6:	6983      	ldr	r3, [r0, #24]
 80079f8:	f8d2 9000 	ldr.w	r9, [r2]
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	0092      	lsls	r2, r2, #2
 8007a00:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8007a04:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8007a08:	d5d5      	bpl.n	80079b6 <ai_platform_network_process+0x3ca>
 8007a0a:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8007a0e:	6898      	ldr	r0, [r3, #8]
 8007a10:	f000 fea6 	bl	8008760 <st_int8_copy>
 8007a14:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8007a18:	f859 200a 	ldr.w	r2, [r9, sl]
 8007a1c:	440b      	add	r3, r1
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	bf24      	itt	cs
 8007a22:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8007a26:	1ad3      	subcs	r3, r2, r3
 8007a28:	f8c8 3004 	str.w	r3, [r8, #4]
 8007a2c:	e7d9      	b.n	80079e2 <ai_platform_network_process+0x3f6>
 8007a2e:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8007a32:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8007a36:	3401      	adds	r4, #1
 8007a38:	b2a4      	uxth	r4, r4
 8007a3a:	42a3      	cmp	r3, r4
 8007a3c:	f8ab 4016 	strh.w	r4, [fp, #22]
 8007a40:	f63f af7f 	bhi.w	8007942 <ai_platform_network_process+0x356>
 8007a44:	4620      	mov	r0, r4
 8007a46:	b005      	add	sp, #20
 8007a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a4c:	2a01      	cmp	r2, #1
 8007a4e:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8007a50:	d03c      	beq.n	8007acc <ai_platform_network_process+0x4e0>
 8007a52:	f106 070c 	add.w	r7, r6, #12
 8007a56:	e76f      	b.n	8007938 <ai_platform_network_process+0x34c>
 8007a58:	4625      	mov	r5, r4
 8007a5a:	2218      	movs	r2, #24
 8007a5c:	2113      	movs	r1, #19
 8007a5e:	f105 0010 	add.w	r0, r5, #16
 8007a62:	f000 f84f 	bl	8007b04 <core_set_error>
 8007a66:	2400      	movs	r4, #0
 8007a68:	e72d      	b.n	80078c6 <ai_platform_network_process+0x2da>
 8007a6a:	9d02      	ldr	r5, [sp, #8]
 8007a6c:	4604      	mov	r4, r0
 8007a6e:	2221      	movs	r2, #33	; 0x21
 8007a70:	2112      	movs	r1, #18
 8007a72:	f105 0010 	add.w	r0, r5, #16
 8007a76:	f000 f845 	bl	8007b04 <core_set_error>
 8007a7a:	e724      	b.n	80078c6 <ai_platform_network_process+0x2da>
 8007a7c:	9d02      	ldr	r5, [sp, #8]
 8007a7e:	e71b      	b.n	80078b8 <ai_platform_network_process+0x2cc>
 8007a80:	9d02      	ldr	r5, [sp, #8]
 8007a82:	4604      	mov	r4, r0
 8007a84:	2217      	movs	r2, #23
 8007a86:	2112      	movs	r1, #18
 8007a88:	f105 0010 	add.w	r0, r5, #16
 8007a8c:	f000 f83a 	bl	8007b04 <core_set_error>
 8007a90:	e719      	b.n	80078c6 <ai_platform_network_process+0x2da>
 8007a92:	9d02      	ldr	r5, [sp, #8]
 8007a94:	2219      	movs	r2, #25
 8007a96:	2112      	movs	r1, #18
 8007a98:	f105 0010 	add.w	r0, r5, #16
 8007a9c:	f000 f832 	bl	8007b04 <core_set_error>
 8007aa0:	2400      	movs	r4, #0
 8007aa2:	e710      	b.n	80078c6 <ai_platform_network_process+0x2da>
 8007aa4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8007aa8:	82ab      	strh	r3, [r5, #20]
 8007aaa:	e740      	b.n	800792e <ai_platform_network_process+0x342>
 8007aac:	f104 0010 	add.w	r0, r4, #16
 8007ab0:	2219      	movs	r2, #25
 8007ab2:	2113      	movs	r1, #19
 8007ab4:	f000 f826 	bl	8007b04 <core_set_error>
 8007ab8:	2400      	movs	r4, #0
 8007aba:	e704      	b.n	80078c6 <ai_platform_network_process+0x2da>
 8007abc:	f104 0010 	add.w	r0, r4, #16
 8007ac0:	2217      	movs	r2, #23
 8007ac2:	2113      	movs	r1, #19
 8007ac4:	f000 f81e 	bl	8007b04 <core_set_error>
 8007ac8:	4654      	mov	r4, sl
 8007aca:	e6fc      	b.n	80078c6 <ai_platform_network_process+0x2da>
 8007acc:	2700      	movs	r7, #0
 8007ace:	e733      	b.n	8007938 <ai_platform_network_process+0x34c>
 8007ad0:	4625      	mov	r5, r4
 8007ad2:	2221      	movs	r2, #33	; 0x21
 8007ad4:	4604      	mov	r4, r0
 8007ad6:	2113      	movs	r1, #19
 8007ad8:	f105 0010 	add.w	r0, r5, #16
 8007adc:	f000 f812 	bl	8007b04 <core_set_error>
 8007ae0:	e6f1      	b.n	80078c6 <ai_platform_network_process+0x2da>
 8007ae2:	4625      	mov	r5, r4
 8007ae4:	2217      	movs	r2, #23
 8007ae6:	4604      	mov	r4, r0
 8007ae8:	2113      	movs	r1, #19
 8007aea:	f105 0010 	add.w	r0, r5, #16
 8007aee:	f000 f809 	bl	8007b04 <core_set_error>
 8007af2:	e6e8      	b.n	80078c6 <ai_platform_network_process+0x2da>

08007af4 <core_init>:
 8007af4:	2001      	movs	r0, #1
 8007af6:	4770      	bx	lr

08007af8 <core_get_error>:
 8007af8:	4603      	mov	r3, r0
 8007afa:	2200      	movs	r2, #0
 8007afc:	6800      	ldr	r0, [r0, #0]
 8007afe:	601a      	str	r2, [r3, #0]
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop

08007b04 <core_set_error>:
 8007b04:	4603      	mov	r3, r0
 8007b06:	7800      	ldrb	r0, [r0, #0]
 8007b08:	b108      	cbz	r0, 8007b0e <core_set_error+0xa>
 8007b0a:	2000      	movs	r0, #0
 8007b0c:	4770      	bx	lr
 8007b0e:	7019      	strb	r1, [r3, #0]
 8007b10:	6819      	ldr	r1, [r3, #0]
 8007b12:	f362 211f 	bfi	r1, r2, #8, #24
 8007b16:	2001      	movs	r0, #1
 8007b18:	6019      	str	r1, [r3, #0]
 8007b1a:	4770      	bx	lr

08007b1c <ai_check_custom_types>:
 8007b1c:	b082      	sub	sp, #8
 8007b1e:	4b13      	ldr	r3, [pc, #76]	; (8007b6c <ai_check_custom_types+0x50>)
 8007b20:	9301      	str	r3, [sp, #4]
 8007b22:	b118      	cbz	r0, 8007b2c <ai_check_custom_types+0x10>
 8007b24:	7803      	ldrb	r3, [r0, #0]
 8007b26:	2b03      	cmp	r3, #3
 8007b28:	d002      	beq.n	8007b30 <ai_check_custom_types+0x14>
 8007b2a:	2000      	movs	r0, #0
 8007b2c:	b002      	add	sp, #8
 8007b2e:	4770      	bx	lr
 8007b30:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d004      	beq.n	8007b42 <ai_check_custom_types+0x26>
 8007b38:	2001      	movs	r0, #1
 8007b3a:	f080 0001 	eor.w	r0, r0, #1
 8007b3e:	b002      	add	sp, #8
 8007b40:	4770      	bx	lr
 8007b42:	7842      	ldrb	r2, [r0, #1]
 8007b44:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	f100 0001 	add.w	r0, r0, #1
 8007b4e:	d1f3      	bne.n	8007b38 <ai_check_custom_types+0x1c>
 8007b50:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8007b54:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d1ed      	bne.n	8007b38 <ai_check_custom_types+0x1c>
 8007b5c:	7842      	ldrb	r2, [r0, #1]
 8007b5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d1e8      	bne.n	8007b38 <ai_check_custom_types+0x1c>
 8007b66:	2000      	movs	r0, #0
 8007b68:	e7e7      	b.n	8007b3a <ai_check_custom_types+0x1e>
 8007b6a:	bf00      	nop
 8007b6c:	84048403 	.word	0x84048403

08007b70 <ai_layers_init_all>:
 8007b70:	4601      	mov	r1, r0
 8007b72:	2000      	movs	r0, #0
 8007b74:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8007b76:	b143      	cbz	r3, 8007b8a <ai_layers_init_all+0x1a>
 8007b78:	691a      	ldr	r2, [r3, #16]
 8007b7a:	60d9      	str	r1, [r3, #12]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	f100 0001 	add.w	r0, r0, #1
 8007b82:	d002      	beq.n	8007b8a <ai_layers_init_all+0x1a>
 8007b84:	b10a      	cbz	r2, 8007b8a <ai_layers_init_all+0x1a>
 8007b86:	4613      	mov	r3, r2
 8007b88:	e7f5      	b.n	8007b76 <ai_layers_init_all+0x6>
 8007b8a:	4770      	bx	lr

08007b8c <ai_layers_post_init_all>:
 8007b8c:	b538      	push	{r3, r4, r5, lr}
 8007b8e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8007b90:	2500      	movs	r5, #0
 8007b92:	b16c      	cbz	r4, 8007bb0 <ai_layers_post_init_all+0x24>
 8007b94:	6863      	ldr	r3, [r4, #4]
 8007b96:	07db      	lsls	r3, r3, #31
 8007b98:	d504      	bpl.n	8007ba4 <ai_layers_post_init_all+0x18>
 8007b9a:	6a23      	ldr	r3, [r4, #32]
 8007b9c:	4620      	mov	r0, r4
 8007b9e:	b10b      	cbz	r3, 8007ba4 <ai_layers_post_init_all+0x18>
 8007ba0:	4798      	blx	r3
 8007ba2:	3501      	adds	r5, #1
 8007ba4:	6923      	ldr	r3, [r4, #16]
 8007ba6:	42a3      	cmp	r3, r4
 8007ba8:	d002      	beq.n	8007bb0 <ai_layers_post_init_all+0x24>
 8007baa:	b10b      	cbz	r3, 8007bb0 <ai_layers_post_init_all+0x24>
 8007bac:	461c      	mov	r4, r3
 8007bae:	e7f0      	b.n	8007b92 <ai_layers_post_init_all+0x6>
 8007bb0:	4628      	mov	r0, r5
 8007bb2:	bd38      	pop	{r3, r4, r5, pc}

08007bb4 <ai_layers_forward_all>:
 8007bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bb8:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 8007bbc:	4604      	mov	r4, r0
 8007bbe:	f1b8 0f00 	cmp.w	r8, #0
 8007bc2:	d02b      	beq.n	8007c1c <ai_layers_forward_all+0x68>
 8007bc4:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8007bc6:	6381      	str	r1, [r0, #56]	; 0x38
 8007bc8:	b321      	cbz	r1, 8007c14 <ai_layers_forward_all+0x60>
 8007bca:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8007bcc:	2001      	movs	r0, #1
 8007bce:	47c0      	blx	r8
 8007bd0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8007bd2:	b1fe      	cbz	r6, 8007c14 <ai_layers_forward_all+0x60>
 8007bd4:	2700      	movs	r7, #0
 8007bd6:	4631      	mov	r1, r6
 8007bd8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007bda:	2002      	movs	r0, #2
 8007bdc:	47c0      	blx	r8
 8007bde:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8007be0:	4628      	mov	r0, r5
 8007be2:	696b      	ldr	r3, [r5, #20]
 8007be4:	4798      	blx	r3
 8007be6:	692e      	ldr	r6, [r5, #16]
 8007be8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007bea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007bec:	42b5      	cmp	r5, r6
 8007bee:	f04f 0003 	mov.w	r0, #3
 8007bf2:	d007      	beq.n	8007c04 <ai_layers_forward_all+0x50>
 8007bf4:	47c0      	blx	r8
 8007bf6:	3701      	adds	r7, #1
 8007bf8:	63a6      	str	r6, [r4, #56]	; 0x38
 8007bfa:	2e00      	cmp	r6, #0
 8007bfc:	d1eb      	bne.n	8007bd6 <ai_layers_forward_all+0x22>
 8007bfe:	4638      	mov	r0, r7
 8007c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c04:	2003      	movs	r0, #3
 8007c06:	47c0      	blx	r8
 8007c08:	2300      	movs	r3, #0
 8007c0a:	3701      	adds	r7, #1
 8007c0c:	63a3      	str	r3, [r4, #56]	; 0x38
 8007c0e:	4638      	mov	r0, r7
 8007c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c14:	2700      	movs	r7, #0
 8007c16:	4638      	mov	r0, r7
 8007c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c1c:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8007c1e:	6385      	str	r5, [r0, #56]	; 0x38
 8007c20:	2d00      	cmp	r5, #0
 8007c22:	d0f7      	beq.n	8007c14 <ai_layers_forward_all+0x60>
 8007c24:	4647      	mov	r7, r8
 8007c26:	696b      	ldr	r3, [r5, #20]
 8007c28:	4628      	mov	r0, r5
 8007c2a:	4798      	blx	r3
 8007c2c:	462b      	mov	r3, r5
 8007c2e:	692d      	ldr	r5, [r5, #16]
 8007c30:	429d      	cmp	r5, r3
 8007c32:	d004      	beq.n	8007c3e <ai_layers_forward_all+0x8a>
 8007c34:	63a5      	str	r5, [r4, #56]	; 0x38
 8007c36:	3701      	adds	r7, #1
 8007c38:	2d00      	cmp	r5, #0
 8007c3a:	d1f4      	bne.n	8007c26 <ai_layers_forward_all+0x72>
 8007c3c:	e7df      	b.n	8007bfe <ai_layers_forward_all+0x4a>
 8007c3e:	2300      	movs	r3, #0
 8007c40:	63a3      	str	r3, [r4, #56]	; 0x38
 8007c42:	3701      	adds	r7, #1
 8007c44:	e7db      	b.n	8007bfe <ai_layers_forward_all+0x4a>
 8007c46:	bf00      	nop

08007c48 <forward_dense>:
 8007c48:	6983      	ldr	r3, [r0, #24]
 8007c4a:	881a      	ldrh	r2, [r3, #0]
 8007c4c:	2a00      	cmp	r2, #0
 8007c4e:	f000 8181 	beq.w	8007f54 <forward_dense+0x30c>
 8007c52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c56:	ed2d 8b02 	vpush	{d8}
 8007c5a:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8007c5e:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8007c62:	b095      	sub	sp, #84	; 0x54
 8007c64:	b105      	cbz	r5, 8007c68 <forward_dense+0x20>
 8007c66:	682d      	ldr	r5, [r5, #0]
 8007c68:	2a01      	cmp	r2, #1
 8007c6a:	f000 828f 	beq.w	800818c <forward_dense+0x544>
 8007c6e:	f8dc 6010 	ldr.w	r6, [ip, #16]
 8007c72:	b106      	cbz	r6, 8007c76 <forward_dense+0x2e>
 8007c74:	6836      	ldr	r6, [r6, #0]
 8007c76:	2a02      	cmp	r2, #2
 8007c78:	f000 816e 	beq.w	8007f58 <forward_dense+0x310>
 8007c7c:	f8dc 301c 	ldr.w	r3, [ip, #28]
 8007c80:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	f000 8274 	beq.w	8008170 <forward_dense+0x528>
 8007c88:	4619      	mov	r1, r3
 8007c8a:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 8007c8e:	6809      	ldr	r1, [r1, #0]
 8007c90:	910d      	str	r1, [sp, #52]	; 0x34
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	f240 826e 	bls.w	8008174 <forward_dense+0x52c>
 8007c98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	68e8      	ldr	r0, [r5, #12]
 8007ca2:	68f7      	ldr	r7, [r6, #12]
 8007ca4:	6840      	ldr	r0, [r0, #4]
 8007ca6:	6999      	ldr	r1, [r3, #24]
 8007ca8:	9013      	str	r0, [sp, #76]	; 0x4c
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	680b      	ldr	r3, [r1, #0]
 8007cae:	9012      	str	r0, [sp, #72]	; 0x48
 8007cb0:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 8007cb4:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 8007cb8:	fb00 f404 	mul.w	r4, r0, r4
 8007cbc:	f3c3 5041 	ubfx	r0, r3, #21, #2
 8007cc0:	fa4e f000 	asr.w	r0, lr, r0
 8007cc4:	2a03      	cmp	r2, #3
 8007cc6:	9010      	str	r0, [sp, #64]	; 0x40
 8007cc8:	f000 825d 	beq.w	8008186 <forward_dense+0x53e>
 8007ccc:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 8007cd0:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8007cd4:	2a00      	cmp	r2, #0
 8007cd6:	f000 8246 	beq.w	8008166 <forward_dense+0x51e>
 8007cda:	6812      	ldr	r2, [r2, #0]
 8007cdc:	2a00      	cmp	r2, #0
 8007cde:	f000 8242 	beq.w	8008166 <forward_dense+0x51e>
 8007ce2:	2b04      	cmp	r3, #4
 8007ce4:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8007ce8:	f000 822c 	beq.w	8008144 <forward_dense+0x4fc>
 8007cec:	2b08      	cmp	r3, #8
 8007cee:	f000 8229 	beq.w	8008144 <forward_dense+0x4fc>
 8007cf2:	f04f 0b00 	mov.w	fp, #0
 8007cf6:	69b2      	ldr	r2, [r6, #24]
 8007cf8:	69ab      	ldr	r3, [r5, #24]
 8007cfa:	6891      	ldr	r1, [r2, #8]
 8007cfc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	6952      	ldr	r2, [r2, #20]
 8007d02:	9106      	str	r1, [sp, #24]
 8007d04:	fb07 f404 	mul.w	r4, r7, r4
 8007d08:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8007d0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007d0e:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8007d12:	4281      	cmp	r1, r0
 8007d14:	ea4f 0482 	mov.w	r4, r2, lsl #2
 8007d18:	900e      	str	r0, [sp, #56]	; 0x38
 8007d1a:	940c      	str	r4, [sp, #48]	; 0x30
 8007d1c:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 8007d20:	f080 8113 	bcs.w	8007f4a <forward_dense+0x302>
 8007d24:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007d26:	ed9f 8a93 	vldr	s16, [pc, #588]	; 8007f74 <forward_dense+0x32c>
 8007d2a:	f021 0201 	bic.w	r2, r1, #1
 8007d2e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8007d32:	9204      	str	r2, [sp, #16]
 8007d34:	f001 0201 	and.w	r2, r1, #1
 8007d38:	08c8      	lsrs	r0, r1, #3
 8007d3a:	9208      	str	r2, [sp, #32]
 8007d3c:	008a      	lsls	r2, r1, #2
 8007d3e:	f001 0a07 	and.w	sl, r1, #7
 8007d42:	920f      	str	r2, [sp, #60]	; 0x3c
 8007d44:	eb03 1240 	add.w	r2, r3, r0, lsl #5
 8007d48:	3320      	adds	r3, #32
 8007d4a:	465c      	mov	r4, fp
 8007d4c:	9007      	str	r0, [sp, #28]
 8007d4e:	46cb      	mov	fp, r9
 8007d50:	9205      	str	r2, [sp, #20]
 8007d52:	9302      	str	r3, [sp, #8]
 8007d54:	46c1      	mov	r9, r8
 8007d56:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8007d5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d5c:	699b      	ldr	r3, [r3, #24]
 8007d5e:	689a      	ldr	r2, [r3, #8]
 8007d60:	9b02      	ldr	r3, [sp, #8]
 8007d62:	3b20      	subs	r3, #32
 8007d64:	930a      	str	r3, [sp, #40]	; 0x28
 8007d66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d68:	b10b      	cbz	r3, 8007d6e <forward_dense+0x126>
 8007d6a:	699b      	ldr	r3, [r3, #24]
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	2c00      	cmp	r4, #0
 8007d70:	f000 81da 	beq.w	8008128 <forward_dense+0x4e0>
 8007d74:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007d76:	2904      	cmp	r1, #4
 8007d78:	9906      	ldr	r1, [sp, #24]
 8007d7a:	f000 80fd 	beq.w	8007f78 <forward_dense+0x330>
 8007d7e:	4549      	cmp	r1, r9
 8007d80:	f080 80d2 	bcs.w	8007f28 <forward_dense+0x2e0>
 8007d84:	460f      	mov	r7, r1
 8007d86:	9907      	ldr	r1, [sp, #28]
 8007d88:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007d8c:	f8dd a014 	ldr.w	sl, [sp, #20]
 8007d90:	1c4e      	adds	r6, r1, #1
 8007d92:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8007d96:	4694      	mov	ip, r2
 8007d98:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007d9a:	468e      	mov	lr, r1
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	f000 80de 	beq.w	8007f5e <forward_dense+0x316>
 8007da2:	ecf3 2a01 	vldmia	r3!, {s5}
 8007da6:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8007f74 <forward_dense+0x32c>
 8007daa:	f1be 0f00 	cmp.w	lr, #0
 8007dae:	f000 80de 	beq.w	8007f6e <forward_dense+0x326>
 8007db2:	f10c 0108 	add.w	r1, ip, #8
 8007db6:	4640      	mov	r0, r8
 8007db8:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8007dbc:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 8007dc0:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 8007dc4:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 8007dc8:	ed50 4a05 	vldr	s9, [r0, #-20]	; 0xffffffec
 8007dcc:	ed10 5a04 	vldr	s10, [r0, #-16]
 8007dd0:	ed50 5a03 	vldr	s11, [r0, #-12]
 8007dd4:	ed10 6a02 	vldr	s12, [r0, #-8]
 8007dd8:	ed50 6a01 	vldr	s13, [r0, #-4]
 8007ddc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007de0:	edd5 7a00 	vldr	s15, [r5]
 8007de4:	f811 5c08 	ldrb.w	r5, [r1, #-8]
 8007de8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007dec:	ee67 7a83 	vmul.f32	s15, s15, s6
 8007df0:	ed95 3a00 	vldr	s6, [r5]
 8007df4:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 8007df8:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007dfc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007e00:	3108      	adds	r1, #8
 8007e02:	edd5 3a00 	vldr	s7, [r5]
 8007e06:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 8007e0a:	eee3 7a84 	vfma.f32	s15, s7, s8
 8007e0e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007e12:	3020      	adds	r0, #32
 8007e14:	ed95 4a00 	vldr	s8, [r5]
 8007e18:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8007e1c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007e20:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007e24:	edd5 4a00 	vldr	s9, [r5]
 8007e28:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8007e2c:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007e30:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007e34:	ed95 5a00 	vldr	s10, [r5]
 8007e38:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8007e3c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007e40:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007e44:	edd5 5a00 	vldr	s11, [r5]
 8007e48:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 8007e4c:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007e50:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007e54:	428e      	cmp	r6, r1
 8007e56:	ed95 6a00 	vldr	s12, [r5]
 8007e5a:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007e5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007e62:	d1a9      	bne.n	8007db8 <forward_dense+0x170>
 8007e64:	f1a6 0108 	sub.w	r1, r6, #8
 8007e68:	4650      	mov	r0, sl
 8007e6a:	2a00      	cmp	r2, #0
 8007e6c:	d04a      	beq.n	8007f04 <forward_dense+0x2bc>
 8007e6e:	780d      	ldrb	r5, [r1, #0]
 8007e70:	edd0 6a00 	vldr	s13, [r0]
 8007e74:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007e78:	edd5 7a00 	vldr	s15, [r5]
 8007e7c:	2a01      	cmp	r2, #1
 8007e7e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007e82:	d03f      	beq.n	8007f04 <forward_dense+0x2bc>
 8007e84:	784d      	ldrb	r5, [r1, #1]
 8007e86:	edd0 6a01 	vldr	s13, [r0, #4]
 8007e8a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007e8e:	edd5 7a00 	vldr	s15, [r5]
 8007e92:	2a02      	cmp	r2, #2
 8007e94:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007e98:	d034      	beq.n	8007f04 <forward_dense+0x2bc>
 8007e9a:	788d      	ldrb	r5, [r1, #2]
 8007e9c:	edd0 6a02 	vldr	s13, [r0, #8]
 8007ea0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007ea4:	edd5 7a00 	vldr	s15, [r5]
 8007ea8:	2a03      	cmp	r2, #3
 8007eaa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007eae:	d029      	beq.n	8007f04 <forward_dense+0x2bc>
 8007eb0:	78cd      	ldrb	r5, [r1, #3]
 8007eb2:	edd0 6a03 	vldr	s13, [r0, #12]
 8007eb6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007eba:	edd5 7a00 	vldr	s15, [r5]
 8007ebe:	2a04      	cmp	r2, #4
 8007ec0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007ec4:	d01e      	beq.n	8007f04 <forward_dense+0x2bc>
 8007ec6:	790d      	ldrb	r5, [r1, #4]
 8007ec8:	edd0 6a04 	vldr	s13, [r0, #16]
 8007ecc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007ed0:	edd5 7a00 	vldr	s15, [r5]
 8007ed4:	2a05      	cmp	r2, #5
 8007ed6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007eda:	d013      	beq.n	8007f04 <forward_dense+0x2bc>
 8007edc:	794d      	ldrb	r5, [r1, #5]
 8007ede:	edd0 6a05 	vldr	s13, [r0, #20]
 8007ee2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007ee6:	edd5 7a00 	vldr	s15, [r5]
 8007eea:	2a06      	cmp	r2, #6
 8007eec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007ef0:	d008      	beq.n	8007f04 <forward_dense+0x2bc>
 8007ef2:	7989      	ldrb	r1, [r1, #6]
 8007ef4:	edd0 7a06 	vldr	s15, [r0, #24]
 8007ef8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007efc:	edd1 6a00 	vldr	s13, [r1]
 8007f00:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007f04:	44dc      	add	ip, fp
 8007f06:	445e      	add	r6, fp
 8007f08:	ee32 7a87 	vadd.f32	s14, s5, s14
 8007f0c:	eca7 7a01 	vstmia	r7!, {s14}
 8007f10:	454f      	cmp	r7, r9
 8007f12:	f4ff af43 	bcc.w	8007d9c <forward_dense+0x154>
 8007f16:	9a06      	ldr	r2, [sp, #24]
 8007f18:	eba9 0302 	sub.w	r3, r9, r2
 8007f1c:	3b01      	subs	r3, #1
 8007f1e:	f023 0303 	bic.w	r3, r3, #3
 8007f22:	3304      	adds	r3, #4
 8007f24:	18d3      	adds	r3, r2, r3
 8007f26:	9306      	str	r3, [sp, #24]
 8007f28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f2a:	9a05      	ldr	r2, [sp, #20]
 8007f2c:	4499      	add	r9, r3
 8007f2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f30:	441a      	add	r2, r3
 8007f32:	9205      	str	r2, [sp, #20]
 8007f34:	9a02      	ldr	r2, [sp, #8]
 8007f36:	441a      	add	r2, r3
 8007f38:	9202      	str	r2, [sp, #8]
 8007f3a:	9a04      	ldr	r2, [sp, #16]
 8007f3c:	441a      	add	r2, r3
 8007f3e:	9204      	str	r2, [sp, #16]
 8007f40:	9b06      	ldr	r3, [sp, #24]
 8007f42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f44:	4293      	cmp	r3, r2
 8007f46:	f4ff af08 	bcc.w	8007d5a <forward_dense+0x112>
 8007f4a:	b015      	add	sp, #84	; 0x54
 8007f4c:	ecbd 8b02 	vpop	{d8}
 8007f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f54:	6853      	ldr	r3, [r2, #4]
 8007f56:	deff      	udf	#255	; 0xff
 8007f58:	2300      	movs	r3, #0
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	deff      	udf	#255	; 0xff
 8007f5e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8007f74 <forward_dense+0x32c>
 8007f62:	eef0 2a48 	vmov.f32	s5, s16
 8007f66:	f1be 0f00 	cmp.w	lr, #0
 8007f6a:	f47f af22 	bne.w	8007db2 <forward_dense+0x16a>
 8007f6e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007f70:	4661      	mov	r1, ip
 8007f72:	e77a      	b.n	8007e6a <forward_dense+0x222>
 8007f74:	00000000 	.word	0x00000000
 8007f78:	4549      	cmp	r1, r9
 8007f7a:	d2d5      	bcs.n	8007f28 <forward_dense+0x2e0>
 8007f7c:	9807      	ldr	r0, [sp, #28]
 8007f7e:	9103      	str	r1, [sp, #12]
 8007f80:	9904      	ldr	r1, [sp, #16]
 8007f82:	f100 0c01 	add.w	ip, r0, #1
 8007f86:	3901      	subs	r1, #1
 8007f88:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8007f8c:	9109      	str	r1, [sp, #36]	; 0x24
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	f000 80b2 	beq.w	80080f8 <forward_dense+0x4b0>
 8007f94:	9907      	ldr	r1, [sp, #28]
 8007f96:	ecf3 2a01 	vldmia	r3!, {s5}
 8007f9a:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 8007f74 <forward_dense+0x32c>
 8007f9e:	2900      	cmp	r1, #0
 8007fa0:	f000 80b2 	beq.w	8008108 <forward_dense+0x4c0>
 8007fa4:	9902      	ldr	r1, [sp, #8]
 8007fa6:	1d10      	adds	r0, r2, #4
 8007fa8:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 8007fac:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 8007fb0:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 8007fb4:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 8007fb8:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 8007fbc:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
 8007fc0:	ed11 5a04 	vldr	s10, [r1, #-16]
 8007fc4:	ed51 5a03 	vldr	s11, [r1, #-12]
 8007fc8:	ed11 6a02 	vldr	s12, [r1, #-8]
 8007fcc:	ed51 6a01 	vldr	s13, [r1, #-4]
 8007fd0:	f006 070f 	and.w	r7, r6, #15
 8007fd4:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8007fd8:	edd7 7a00 	vldr	s15, [r7]
 8007fdc:	0936      	lsrs	r6, r6, #4
 8007fde:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8007fe2:	ed96 3a00 	vldr	s6, [r6]
 8007fe6:	ee67 7a82 	vmul.f32	s15, s15, s4
 8007fea:	092e      	lsrs	r6, r5, #4
 8007fec:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007ff0:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8007ff4:	f005 050f 	and.w	r5, r5, #15
 8007ff8:	edd6 3a00 	vldr	s7, [r6]
 8007ffc:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 8008000:	eee3 7a84 	vfma.f32	s15, s7, s8
 8008004:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008008:	0937      	lsrs	r7, r6, #4
 800800a:	ed95 4a00 	vldr	s8, [r5]
 800800e:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 8008012:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008016:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800801a:	f006 060f 	and.w	r6, r6, #15
 800801e:	edd7 4a00 	vldr	s9, [r7]
 8008022:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008026:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800802a:	3004      	adds	r0, #4
 800802c:	ed96 5a00 	vldr	s10, [r6]
 8008030:	092e      	lsrs	r6, r5, #4
 8008032:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008036:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800803a:	f005 050f 	and.w	r5, r5, #15
 800803e:	edd6 5a00 	vldr	s11, [r6]
 8008042:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008046:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800804a:	4584      	cmp	ip, r0
 800804c:	ed95 6a00 	vldr	s12, [r5]
 8008050:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008054:	f101 0120 	add.w	r1, r1, #32
 8008058:	ee37 7a27 	vadd.f32	s14, s14, s15
 800805c:	d1a4      	bne.n	8007fa8 <forward_dense+0x360>
 800805e:	f8dd e014 	ldr.w	lr, [sp, #20]
 8008062:	f1ac 0804 	sub.w	r8, ip, #4
 8008066:	9904      	ldr	r1, [sp, #16]
 8008068:	458e      	cmp	lr, r1
 800806a:	d22a      	bcs.n	80080c2 <forward_dense+0x47a>
 800806c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800806e:	eba1 070e 	sub.w	r7, r1, lr
 8008072:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
 8008076:	f10e 0008 	add.w	r0, lr, #8
 800807a:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 800807e:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 8008082:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008086:	ed50 5a01 	vldr	s11, [r0, #-4]
 800808a:	ed50 6a02 	vldr	s13, [r0, #-8]
 800808e:	f001 050f 	and.w	r5, r1, #15
 8008092:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008096:	edd5 7a00 	vldr	s15, [r5]
 800809a:	0909      	lsrs	r1, r1, #4
 800809c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80080a0:	ed91 6a00 	vldr	s12, [r1]
 80080a4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80080a8:	42b7      	cmp	r7, r6
 80080aa:	eee6 7a26 	vfma.f32	s15, s12, s13
 80080ae:	f100 0008 	add.w	r0, r0, #8
 80080b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80080b6:	d1e4      	bne.n	8008082 <forward_dense+0x43a>
 80080b8:	f10a 0a01 	add.w	sl, sl, #1
 80080bc:	44d0      	add	r8, sl
 80080be:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 80080c2:	9908      	ldr	r1, [sp, #32]
 80080c4:	b321      	cbz	r1, 8008110 <forward_dense+0x4c8>
 80080c6:	f898 1000 	ldrb.w	r1, [r8]
 80080ca:	edde 7a00 	vldr	s15, [lr]
 80080ce:	0909      	lsrs	r1, r1, #4
 80080d0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80080d4:	edd1 6a00 	vldr	s13, [r1]
 80080d8:	9903      	ldr	r1, [sp, #12]
 80080da:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80080de:	445a      	add	r2, fp
 80080e0:	44dc      	add	ip, fp
 80080e2:	ee72 2a87 	vadd.f32	s5, s5, s14
 80080e6:	ece1 2a01 	vstmia	r1!, {s5}
 80080ea:	4589      	cmp	r9, r1
 80080ec:	9103      	str	r1, [sp, #12]
 80080ee:	f67f af12 	bls.w	8007f16 <forward_dense+0x2ce>
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	f47f af4e 	bne.w	8007f94 <forward_dense+0x34c>
 80080f8:	9907      	ldr	r1, [sp, #28]
 80080fa:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 8007f74 <forward_dense+0x32c>
 80080fe:	eef0 2a48 	vmov.f32	s5, s16
 8008102:	2900      	cmp	r1, #0
 8008104:	f47f af4e 	bne.w	8007fa4 <forward_dense+0x35c>
 8008108:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 800810c:	4690      	mov	r8, r2
 800810e:	e7aa      	b.n	8008066 <forward_dense+0x41e>
 8008110:	9903      	ldr	r1, [sp, #12]
 8008112:	ee32 7a87 	vadd.f32	s14, s5, s14
 8008116:	445a      	add	r2, fp
 8008118:	eca1 7a01 	vstmia	r1!, {s14}
 800811c:	4549      	cmp	r1, r9
 800811e:	9103      	str	r1, [sp, #12]
 8008120:	44dc      	add	ip, fp
 8008122:	f4ff af34 	bcc.w	8007f8e <forward_dense+0x346>
 8008126:	e6f6      	b.n	8007f16 <forward_dense+0x2ce>
 8008128:	9912      	ldr	r1, [sp, #72]	; 0x48
 800812a:	9d06      	ldr	r5, [sp, #24]
 800812c:	9101      	str	r1, [sp, #4]
 800812e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008130:	9100      	str	r1, [sp, #0]
 8008132:	4628      	mov	r0, r5
 8008134:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008136:	f000 f9ef 	bl	8008518 <forward_lite_dense_if32of32wf32>
 800813a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800813c:	462b      	mov	r3, r5
 800813e:	4413      	add	r3, r2
 8008140:	9306      	str	r3, [sp, #24]
 8008142:	e6f1      	b.n	8007f28 <forward_dense+0x2e0>
 8008144:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8008148:	f1b9 0f00 	cmp.w	r9, #0
 800814c:	d016      	beq.n	800817c <forward_dense+0x534>
 800814e:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008152:	f000 fbf7 	bl	8008944 <ai_array_get_byte_size>
 8008156:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 800815a:	4602      	mov	r2, r0
 800815c:	4659      	mov	r1, fp
 800815e:	4640      	mov	r0, r8
 8008160:	f000 fafe 	bl	8008760 <st_int8_copy>
 8008164:	e5c7      	b.n	8007cf6 <forward_dense+0xae>
 8008166:	2b04      	cmp	r3, #4
 8008168:	d00a      	beq.n	8008180 <forward_dense+0x538>
 800816a:	f04f 0900 	mov.w	r9, #0
 800816e:	e5bd      	b.n	8007cec <forward_dense+0xa4>
 8008170:	930d      	str	r3, [sp, #52]	; 0x34
 8008172:	e595      	b.n	8007ca0 <forward_dense+0x58>
 8008174:	2300      	movs	r3, #0
 8008176:	930b      	str	r3, [sp, #44]	; 0x2c
 8008178:	460b      	mov	r3, r1
 800817a:	e591      	b.n	8007ca0 <forward_dense+0x58>
 800817c:	46c3      	mov	fp, r8
 800817e:	e5ba      	b.n	8007cf6 <forward_dense+0xae>
 8008180:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 8008184:	e5b7      	b.n	8007cf6 <forward_dense+0xae>
 8008186:	2300      	movs	r3, #0
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	deff      	udf	#255	; 0xff
 800818c:	2300      	movs	r3, #0
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	deff      	udf	#255	; 0xff
 8008192:	bf00      	nop

08008194 <forward_relu>:
 8008194:	6982      	ldr	r2, [r0, #24]
 8008196:	8813      	ldrh	r3, [r2, #0]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d05b      	beq.n	8008254 <forward_relu+0xc0>
 800819c:	6851      	ldr	r1, [r2, #4]
 800819e:	684a      	ldr	r2, [r1, #4]
 80081a0:	b102      	cbz	r2, 80081a4 <forward_relu+0x10>
 80081a2:	6812      	ldr	r2, [r2, #0]
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	f000 8123 	beq.w	80083f0 <forward_relu+0x25c>
 80081aa:	b470      	push	{r4, r5, r6}
 80081ac:	6909      	ldr	r1, [r1, #16]
 80081ae:	b101      	cbz	r1, 80081b2 <forward_relu+0x1e>
 80081b0:	6809      	ldr	r1, [r1, #0]
 80081b2:	69c6      	ldr	r6, [r0, #28]
 80081b4:	2e00      	cmp	r6, #0
 80081b6:	f000 8097 	beq.w	80082e8 <forward_relu+0x154>
 80081ba:	6873      	ldr	r3, [r6, #4]
 80081bc:	6988      	ldr	r0, [r1, #24]
 80081be:	6991      	ldr	r1, [r2, #24]
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	f000 80c1 	beq.w	8008348 <forward_relu+0x1b4>
 80081c6:	6893      	ldr	r3, [r2, #8]
 80081c8:	6880      	ldr	r0, [r0, #8]
 80081ca:	688c      	ldr	r4, [r1, #8]
 80081cc:	0a1b      	lsrs	r3, r3, #8
 80081ce:	f000 80f2 	beq.w	80083b6 <forward_relu+0x222>
 80081d2:	68d5      	ldr	r5, [r2, #12]
 80081d4:	2201      	movs	r2, #1
 80081d6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80081da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80081de:	42ab      	cmp	r3, r5
 80081e0:	fb01 f202 	mul.w	r2, r1, r2
 80081e4:	d1f9      	bne.n	80081da <forward_relu+0x46>
 80081e6:	68b3      	ldr	r3, [r6, #8]
 80081e8:	ed93 7a02 	vldr	s14, [r3, #8]
 80081ec:	edd3 6a00 	vldr	s13, [r3]
 80081f0:	ed93 6a01 	vldr	s12, [r3, #4]
 80081f4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80081f8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80081fc:	3a01      	subs	r2, #1
 80081fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008202:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008206:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800820a:	d425      	bmi.n	8008258 <forward_relu+0xc4>
 800820c:	429c      	cmp	r4, r3
 800820e:	d81f      	bhi.n	8008250 <forward_relu+0xbc>
 8008210:	1d1a      	adds	r2, r3, #4
 8008212:	1d01      	adds	r1, r0, #4
 8008214:	e00d      	b.n	8008232 <forward_relu+0x9e>
 8008216:	eef4 6ae7 	vcmpe.f32	s13, s15
 800821a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800821e:	db03      	blt.n	8008228 <forward_relu+0x94>
 8008220:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008224:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008228:	3b08      	subs	r3, #8
 800822a:	429c      	cmp	r4, r3
 800822c:	ed61 7a01 	vstmdb	r1!, {s15}
 8008230:	d80e      	bhi.n	8008250 <forward_relu+0xbc>
 8008232:	4613      	mov	r3, r2
 8008234:	ed72 7a01 	vldmdb	r2!, {s15}
 8008238:	eef4 7ac7 	vcmpe.f32	s15, s14
 800823c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008240:	d9e9      	bls.n	8008216 <forward_relu+0x82>
 8008242:	3b08      	subs	r3, #8
 8008244:	eef0 7a47 	vmov.f32	s15, s14
 8008248:	429c      	cmp	r4, r3
 800824a:	ed61 7a01 	vstmdb	r1!, {s15}
 800824e:	d9f0      	bls.n	8008232 <forward_relu+0x9e>
 8008250:	bc70      	pop	{r4, r5, r6}
 8008252:	4770      	bx	lr
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	deff      	udf	#255	; 0xff
 8008258:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800825c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008260:	d11f      	bne.n	80082a2 <forward_relu+0x10e>
 8008262:	429c      	cmp	r4, r3
 8008264:	d8f4      	bhi.n	8008250 <forward_relu+0xbc>
 8008266:	1b1c      	subs	r4, r3, r4
 8008268:	f024 0403 	bic.w	r4, r4, #3
 800826c:	1d1a      	adds	r2, r3, #4
 800826e:	2500      	movs	r5, #0
 8008270:	1b1b      	subs	r3, r3, r4
 8008272:	1d01      	adds	r1, r0, #4
 8008274:	ed72 7a01 	vldmdb	r2!, {s15}
 8008278:	eef4 7ae6 	vcmpe.f32	s15, s13
 800827c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008280:	dc0a      	bgt.n	8008298 <forward_relu+0x104>
 8008282:	429a      	cmp	r2, r3
 8008284:	f841 5d04 	str.w	r5, [r1, #-4]!
 8008288:	d0e2      	beq.n	8008250 <forward_relu+0xbc>
 800828a:	ed72 7a01 	vldmdb	r2!, {s15}
 800828e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8008292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008296:	ddf4      	ble.n	8008282 <forward_relu+0xee>
 8008298:	429a      	cmp	r2, r3
 800829a:	ed61 7a01 	vstmdb	r1!, {s15}
 800829e:	d1e9      	bne.n	8008274 <forward_relu+0xe0>
 80082a0:	e7d6      	b.n	8008250 <forward_relu+0xbc>
 80082a2:	429c      	cmp	r4, r3
 80082a4:	d8d4      	bhi.n	8008250 <forward_relu+0xbc>
 80082a6:	1b1c      	subs	r4, r3, r4
 80082a8:	f024 0403 	bic.w	r4, r4, #3
 80082ac:	1d1a      	adds	r2, r3, #4
 80082ae:	1d01      	adds	r1, r0, #4
 80082b0:	1b1b      	subs	r3, r3, r4
 80082b2:	ed72 7a01 	vldmdb	r2!, {s15}
 80082b6:	eef4 6ae7 	vcmpe.f32	s13, s15
 80082ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082be:	db0e      	blt.n	80082de <forward_relu+0x14a>
 80082c0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80082c4:	4293      	cmp	r3, r2
 80082c6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80082ca:	ed61 7a01 	vstmdb	r1!, {s15}
 80082ce:	d0bf      	beq.n	8008250 <forward_relu+0xbc>
 80082d0:	ed72 7a01 	vldmdb	r2!, {s15}
 80082d4:	eef4 6ae7 	vcmpe.f32	s13, s15
 80082d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082dc:	daf0      	bge.n	80082c0 <forward_relu+0x12c>
 80082de:	4293      	cmp	r3, r2
 80082e0:	ed61 7a01 	vstmdb	r1!, {s15}
 80082e4:	d1e5      	bne.n	80082b2 <forward_relu+0x11e>
 80082e6:	e7b3      	b.n	8008250 <forward_relu+0xbc>
 80082e8:	6893      	ldr	r3, [r2, #8]
 80082ea:	6989      	ldr	r1, [r1, #24]
 80082ec:	6990      	ldr	r0, [r2, #24]
 80082ee:	6889      	ldr	r1, [r1, #8]
 80082f0:	6884      	ldr	r4, [r0, #8]
 80082f2:	0a1b      	lsrs	r3, r3, #8
 80082f4:	d075      	beq.n	80083e2 <forward_relu+0x24e>
 80082f6:	68d5      	ldr	r5, [r2, #12]
 80082f8:	2201      	movs	r2, #1
 80082fa:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80082fe:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8008302:	429d      	cmp	r5, r3
 8008304:	fb00 f202 	mul.w	r2, r0, r2
 8008308:	d1f9      	bne.n	80082fe <forward_relu+0x16a>
 800830a:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 800830e:	3b01      	subs	r3, #1
 8008310:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8008314:	4294      	cmp	r4, r2
 8008316:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800831a:	d899      	bhi.n	8008250 <forward_relu+0xbc>
 800831c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80083f8 <forward_relu+0x264>
 8008320:	3204      	adds	r2, #4
 8008322:	3104      	adds	r1, #4
 8008324:	4613      	mov	r3, r2
 8008326:	ed72 7a01 	vldmdb	r2!, {s15}
 800832a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800832e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008332:	f1a3 0308 	sub.w	r3, r3, #8
 8008336:	bfb8      	it	lt
 8008338:	eef0 7a47 	vmovlt.f32	s15, s14
 800833c:	429c      	cmp	r4, r3
 800833e:	ed61 7a01 	vstmdb	r1!, {s15}
 8008342:	d9ef      	bls.n	8008324 <forward_relu+0x190>
 8008344:	bc70      	pop	{r4, r5, r6}
 8008346:	4770      	bx	lr
 8008348:	688c      	ldr	r4, [r1, #8]
 800834a:	6891      	ldr	r1, [r2, #8]
 800834c:	6880      	ldr	r0, [r0, #8]
 800834e:	0a09      	lsrs	r1, r1, #8
 8008350:	d049      	beq.n	80083e6 <forward_relu+0x252>
 8008352:	68d5      	ldr	r5, [r2, #12]
 8008354:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 8008358:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800835c:	42aa      	cmp	r2, r5
 800835e:	fb01 f303 	mul.w	r3, r1, r3
 8008362:	d1f9      	bne.n	8008358 <forward_relu+0x1c4>
 8008364:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8008368:	3a01      	subs	r2, #1
 800836a:	68b1      	ldr	r1, [r6, #8]
 800836c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008370:	429c      	cmp	r4, r3
 8008372:	ed91 7a00 	vldr	s14, [r1]
 8008376:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800837a:	f63f af69 	bhi.w	8008250 <forward_relu+0xbc>
 800837e:	2500      	movs	r5, #0
 8008380:	3304      	adds	r3, #4
 8008382:	1d02      	adds	r2, r0, #4
 8008384:	ed53 7a01 	vldr	s15, [r3, #-4]
 8008388:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800838c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008390:	f1a3 0104 	sub.w	r1, r3, #4
 8008394:	f1a3 0308 	sub.w	r3, r3, #8
 8008398:	d406      	bmi.n	80083a8 <forward_relu+0x214>
 800839a:	429c      	cmp	r4, r3
 800839c:	f842 5d04 	str.w	r5, [r2, #-4]!
 80083a0:	f63f af56 	bhi.w	8008250 <forward_relu+0xbc>
 80083a4:	460b      	mov	r3, r1
 80083a6:	e7ed      	b.n	8008384 <forward_relu+0x1f0>
 80083a8:	429c      	cmp	r4, r3
 80083aa:	ed62 7a01 	vstmdb	r2!, {s15}
 80083ae:	f63f af4f 	bhi.w	8008250 <forward_relu+0xbc>
 80083b2:	460b      	mov	r3, r1
 80083b4:	e7e6      	b.n	8008384 <forward_relu+0x1f0>
 80083b6:	68b3      	ldr	r3, [r6, #8]
 80083b8:	ed93 7a02 	vldr	s14, [r3, #8]
 80083bc:	edd3 6a00 	vldr	s13, [r3]
 80083c0:	ed93 6a01 	vldr	s12, [r3, #4]
 80083c4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80083c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083cc:	d401      	bmi.n	80083d2 <forward_relu+0x23e>
 80083ce:	4623      	mov	r3, r4
 80083d0:	e71e      	b.n	8008210 <forward_relu+0x7c>
 80083d2:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80083d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083da:	4623      	mov	r3, r4
 80083dc:	f47f af63 	bne.w	80082a6 <forward_relu+0x112>
 80083e0:	e741      	b.n	8008266 <forward_relu+0xd2>
 80083e2:	4622      	mov	r2, r4
 80083e4:	e79a      	b.n	800831c <forward_relu+0x188>
 80083e6:	68b2      	ldr	r2, [r6, #8]
 80083e8:	4623      	mov	r3, r4
 80083ea:	ed92 7a00 	vldr	s14, [r2]
 80083ee:	e7c6      	b.n	800837e <forward_relu+0x1ea>
 80083f0:	2300      	movs	r3, #0
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	deff      	udf	#255	; 0xff
 80083f6:	bf00      	nop
 80083f8:	00000000 	.word	0x00000000

080083fc <forward_sm>:
 80083fc:	6982      	ldr	r2, [r0, #24]
 80083fe:	8813      	ldrh	r3, [r2, #0]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d07c      	beq.n	80084fe <forward_sm+0x102>
 8008404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008408:	ed2d 8b04 	vpush	{d8-d9}
 800840c:	6852      	ldr	r2, [r2, #4]
 800840e:	6854      	ldr	r4, [r2, #4]
 8008410:	b085      	sub	sp, #20
 8008412:	b104      	cbz	r4, 8008416 <forward_sm+0x1a>
 8008414:	6824      	ldr	r4, [r4, #0]
 8008416:	2b01      	cmp	r3, #1
 8008418:	d076      	beq.n	8008508 <forward_sm+0x10c>
 800841a:	6913      	ldr	r3, [r2, #16]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d076      	beq.n	800850e <forward_sm+0x112>
 8008420:	681e      	ldr	r6, [r3, #0]
 8008422:	68a3      	ldr	r3, [r4, #8]
 8008424:	68e0      	ldr	r0, [r4, #12]
 8008426:	68f2      	ldr	r2, [r6, #12]
 8008428:	6845      	ldr	r5, [r0, #4]
 800842a:	6857      	ldr	r7, [r2, #4]
 800842c:	0a1b      	lsrs	r3, r3, #8
 800842e:	d068      	beq.n	8008502 <forward_sm+0x106>
 8008430:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8008434:	2201      	movs	r2, #1
 8008436:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800843a:	4298      	cmp	r0, r3
 800843c:	fb01 f202 	mul.w	r2, r1, r2
 8008440:	d1f9      	bne.n	8008436 <forward_sm+0x3a>
 8008442:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8008446:	69a2      	ldr	r2, [r4, #24]
 8008448:	69b3      	ldr	r3, [r6, #24]
 800844a:	6892      	ldr	r2, [r2, #8]
 800844c:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8008450:	eb02 0309 	add.w	r3, r2, r9
 8008454:	429a      	cmp	r2, r3
 8008456:	9301      	str	r3, [sp, #4]
 8008458:	d24c      	bcs.n	80084f4 <forward_sm+0xf8>
 800845a:	00bb      	lsls	r3, r7, #2
 800845c:	9303      	str	r3, [sp, #12]
 800845e:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 8008462:	00ab      	lsls	r3, r5, #2
 8008464:	2d01      	cmp	r5, #1
 8008466:	ed92 8a00 	vldr	s16, [r2]
 800846a:	9302      	str	r3, [sp, #8]
 800846c:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8008470:	463e      	mov	r6, r7
 8008472:	d93c      	bls.n	80084ee <forward_sm+0xf2>
 8008474:	1d13      	adds	r3, r2, #4
 8008476:	ecf3 7a01 	vldmia	r3!, {s15}
 800847a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800847e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008482:	bfb8      	it	lt
 8008484:	eeb0 8a67 	vmovlt.f32	s16, s15
 8008488:	429e      	cmp	r6, r3
 800848a:	d1f4      	bne.n	8008476 <forward_sm+0x7a>
 800848c:	eddf 8a21 	vldr	s17, [pc, #132]	; 8008514 <forward_sm+0x118>
 8008490:	4692      	mov	sl, r2
 8008492:	46c3      	mov	fp, r8
 8008494:	46c1      	mov	r9, r8
 8008496:	2400      	movs	r4, #0
 8008498:	ecba 0a01 	vldmia	sl!, {s0}
 800849c:	ee30 0a48 	vsub.f32	s0, s0, s16
 80084a0:	f001 fa3a 	bl	8009918 <expf>
 80084a4:	3401      	adds	r4, #1
 80084a6:	42a5      	cmp	r5, r4
 80084a8:	ee78 8a80 	vadd.f32	s17, s17, s0
 80084ac:	eca9 0a01 	vstmia	r9!, {s0}
 80084b0:	d8f2      	bhi.n	8008498 <forward_sm+0x9c>
 80084b2:	eef5 8a40 	vcmp.f32	s17, #0.0
 80084b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084ba:	d00b      	beq.n	80084d4 <forward_sm+0xd8>
 80084bc:	ee89 7a28 	vdiv.f32	s14, s18, s17
 80084c0:	2300      	movs	r3, #0
 80084c2:	3301      	adds	r3, #1
 80084c4:	429d      	cmp	r5, r3
 80084c6:	eddb 7a00 	vldr	s15, [fp]
 80084ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084ce:	eceb 7a01 	vstmia	fp!, {s15}
 80084d2:	d8f6      	bhi.n	80084c2 <forward_sm+0xc6>
 80084d4:	9b03      	ldr	r3, [sp, #12]
 80084d6:	9901      	ldr	r1, [sp, #4]
 80084d8:	4498      	add	r8, r3
 80084da:	9b02      	ldr	r3, [sp, #8]
 80084dc:	42b9      	cmp	r1, r7
 80084de:	463a      	mov	r2, r7
 80084e0:	441e      	add	r6, r3
 80084e2:	d907      	bls.n	80084f4 <forward_sm+0xf8>
 80084e4:	2d01      	cmp	r5, #1
 80084e6:	ed92 8a00 	vldr	s16, [r2]
 80084ea:	441f      	add	r7, r3
 80084ec:	d8c2      	bhi.n	8008474 <forward_sm+0x78>
 80084ee:	2d00      	cmp	r5, #0
 80084f0:	d0f0      	beq.n	80084d4 <forward_sm+0xd8>
 80084f2:	e7cb      	b.n	800848c <forward_sm+0x90>
 80084f4:	b005      	add	sp, #20
 80084f6:	ecbd 8b04 	vpop	{d8-d9}
 80084fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	deff      	udf	#255	; 0xff
 8008502:	f04f 0904 	mov.w	r9, #4
 8008506:	e79e      	b.n	8008446 <forward_sm+0x4a>
 8008508:	2300      	movs	r3, #0
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	deff      	udf	#255	; 0xff
 800850e:	68db      	ldr	r3, [r3, #12]
 8008510:	deff      	udf	#255	; 0xff
 8008512:	bf00      	nop
 8008514:	00000000 	.word	0x00000000

08008518 <forward_lite_dense_if32of32wf32>:
 8008518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800851c:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
 8008520:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 8008524:	4287      	cmp	r7, r0
 8008526:	f240 8106 	bls.w	8008736 <forward_lite_dense_if32of32wf32+0x21e>
 800852a:	f1a6 0810 	sub.w	r8, r6, #16
 800852e:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8008532:	f108 0801 	add.w	r8, r8, #1
 8008536:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800853a:	ea4f 0986 	mov.w	r9, r6, lsl #2
 800853e:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 8008542:	4605      	mov	r5, r0
 8008544:	f006 0a0f 	and.w	sl, r6, #15
 8008548:	2e0f      	cmp	r6, #15
 800854a:	ed9f 7a84 	vldr	s14, [pc, #528]	; 800875c <forward_lite_dense_if32of32wf32+0x244>
 800854e:	f240 8101 	bls.w	8008754 <forward_lite_dense_if32of32wf32+0x23c>
 8008552:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 8008556:	f102 0440 	add.w	r4, r2, #64	; 0x40
 800855a:	46b6      	mov	lr, r6
 800855c:	ed54 5a0f 	vldr	s11, [r4, #-60]	; 0xffffffc4
 8008560:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 8008564:	ed1c 6a10 	vldr	s12, [ip, #-64]	; 0xffffffc0
 8008568:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 800856c:	ed5c 4a0d 	vldr	s9, [ip, #-52]	; 0xffffffcc
 8008570:	ed1c 5a0c 	vldr	s10, [ip, #-48]	; 0xffffffd0
 8008574:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
 8008578:	ed54 3a0a 	vldr	s7, [r4, #-40]	; 0xffffffd8
 800857c:	ed1c 4a09 	vldr	s8, [ip, #-36]	; 0xffffffdc
 8008580:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
 8008584:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 8008588:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 800858c:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 8008590:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008594:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 8008598:	eee6 7a26 	vfma.f32	s15, s12, s13
 800859c:	f1ae 0e10 	sub.w	lr, lr, #16
 80085a0:	f1be 0f0f 	cmp.w	lr, #15
 80085a4:	ed14 6a0e 	vldr	s12, [r4, #-56]	; 0xffffffc8
 80085a8:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 80085ac:	eee5 7a86 	vfma.f32	s15, s11, s12
 80085b0:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 80085b4:	f104 0440 	add.w	r4, r4, #64	; 0x40
 80085b8:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
 80085bc:	ed1c 6a1b 	vldr	s12, [ip, #-108]	; 0xffffff94
 80085c0:	eee4 7aa6 	vfma.f32	s15, s9, s13
 80085c4:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
 80085c8:	ed54 4a19 	vldr	s9, [r4, #-100]	; 0xffffff9c
 80085cc:	eee5 7a25 	vfma.f32	s15, s10, s11
 80085d0:	ed1c 5a18 	vldr	s10, [ip, #-96]	; 0xffffffa0
 80085d4:	ed54 5a18 	vldr	s11, [r4, #-96]	; 0xffffffa0
 80085d8:	eee6 7a26 	vfma.f32	s15, s12, s13
 80085dc:	ed1c 6a17 	vldr	s12, [ip, #-92]	; 0xffffffa4
 80085e0:	ed54 6a17 	vldr	s13, [r4, #-92]	; 0xffffffa4
 80085e4:	eee3 7a23 	vfma.f32	s15, s6, s7
 80085e8:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 80085ec:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 80085f0:	eee4 7a24 	vfma.f32	s15, s8, s9
 80085f4:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 80085f8:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 80085fc:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008600:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 8008604:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 8008608:	eee6 7a26 	vfma.f32	s15, s12, s13
 800860c:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 8008610:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 8008614:	eee1 7a21 	vfma.f32	s15, s2, s3
 8008618:	eee2 7a22 	vfma.f32	s15, s4, s5
 800861c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008620:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008624:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008628:	eee6 7a26 	vfma.f32	s15, s12, s13
 800862c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008630:	d894      	bhi.n	800855c <forward_lite_dense_if32of32wf32+0x44>
 8008632:	eb02 0e0b 	add.w	lr, r2, fp
 8008636:	4654      	mov	r4, sl
 8008638:	46c4      	mov	ip, r8
 800863a:	2c00      	cmp	r4, #0
 800863c:	d075      	beq.n	800872a <forward_lite_dense_if32of32wf32+0x212>
 800863e:	eddc 6a00 	vldr	s13, [ip]
 8008642:	edde 7a00 	vldr	s15, [lr]
 8008646:	2c01      	cmp	r4, #1
 8008648:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800864c:	d06d      	beq.n	800872a <forward_lite_dense_if32of32wf32+0x212>
 800864e:	eddc 6a01 	vldr	s13, [ip, #4]
 8008652:	edde 7a01 	vldr	s15, [lr, #4]
 8008656:	2c02      	cmp	r4, #2
 8008658:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800865c:	d065      	beq.n	800872a <forward_lite_dense_if32of32wf32+0x212>
 800865e:	eddc 6a02 	vldr	s13, [ip, #8]
 8008662:	edde 7a02 	vldr	s15, [lr, #8]
 8008666:	2c03      	cmp	r4, #3
 8008668:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800866c:	d05d      	beq.n	800872a <forward_lite_dense_if32of32wf32+0x212>
 800866e:	eddc 6a03 	vldr	s13, [ip, #12]
 8008672:	edde 7a03 	vldr	s15, [lr, #12]
 8008676:	2c04      	cmp	r4, #4
 8008678:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800867c:	d055      	beq.n	800872a <forward_lite_dense_if32of32wf32+0x212>
 800867e:	eddc 6a04 	vldr	s13, [ip, #16]
 8008682:	edde 7a04 	vldr	s15, [lr, #16]
 8008686:	2c05      	cmp	r4, #5
 8008688:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800868c:	d04d      	beq.n	800872a <forward_lite_dense_if32of32wf32+0x212>
 800868e:	eddc 6a05 	vldr	s13, [ip, #20]
 8008692:	edde 7a05 	vldr	s15, [lr, #20]
 8008696:	2c06      	cmp	r4, #6
 8008698:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800869c:	d045      	beq.n	800872a <forward_lite_dense_if32of32wf32+0x212>
 800869e:	eddc 6a06 	vldr	s13, [ip, #24]
 80086a2:	edde 7a06 	vldr	s15, [lr, #24]
 80086a6:	2c07      	cmp	r4, #7
 80086a8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80086ac:	d03d      	beq.n	800872a <forward_lite_dense_if32of32wf32+0x212>
 80086ae:	eddc 6a07 	vldr	s13, [ip, #28]
 80086b2:	edde 7a07 	vldr	s15, [lr, #28]
 80086b6:	2c08      	cmp	r4, #8
 80086b8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80086bc:	d035      	beq.n	800872a <forward_lite_dense_if32of32wf32+0x212>
 80086be:	eddc 6a08 	vldr	s13, [ip, #32]
 80086c2:	edde 7a08 	vldr	s15, [lr, #32]
 80086c6:	2c09      	cmp	r4, #9
 80086c8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80086cc:	d02d      	beq.n	800872a <forward_lite_dense_if32of32wf32+0x212>
 80086ce:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 80086d2:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 80086d6:	2c0a      	cmp	r4, #10
 80086d8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80086dc:	d025      	beq.n	800872a <forward_lite_dense_if32of32wf32+0x212>
 80086de:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 80086e2:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 80086e6:	2c0b      	cmp	r4, #11
 80086e8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80086ec:	d01d      	beq.n	800872a <forward_lite_dense_if32of32wf32+0x212>
 80086ee:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 80086f2:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 80086f6:	2c0c      	cmp	r4, #12
 80086f8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80086fc:	d015      	beq.n	800872a <forward_lite_dense_if32of32wf32+0x212>
 80086fe:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 8008702:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 8008706:	3c0d      	subs	r4, #13
 8008708:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800870c:	d00d      	beq.n	800872a <forward_lite_dense_if32of32wf32+0x212>
 800870e:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 8008712:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 8008716:	2c01      	cmp	r4, #1
 8008718:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800871c:	d005      	beq.n	800872a <forward_lite_dense_if32of32wf32+0x212>
 800871e:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 8008722:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 8008726:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800872a:	444a      	add	r2, r9
 800872c:	eca5 7a01 	vstmia	r5!, {s14}
 8008730:	42af      	cmp	r7, r5
 8008732:	f63f af09 	bhi.w	8008548 <forward_lite_dense_if32of32wf32+0x30>
 8008736:	b15b      	cbz	r3, 8008750 <forward_lite_dense_if32of32wf32+0x238>
 8008738:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800873a:	b14a      	cbz	r2, 8008750 <forward_lite_dense_if32of32wf32+0x238>
 800873c:	edd0 7a00 	vldr	s15, [r0]
 8008740:	ecb3 7a01 	vldmia	r3!, {s14}
 8008744:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008748:	ece0 7a01 	vstmia	r0!, {s15}
 800874c:	4287      	cmp	r7, r0
 800874e:	d1f5      	bne.n	800873c <forward_lite_dense_if32of32wf32+0x224>
 8008750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008754:	4634      	mov	r4, r6
 8008756:	4696      	mov	lr, r2
 8008758:	468c      	mov	ip, r1
 800875a:	e76e      	b.n	800863a <forward_lite_dense_if32of32wf32+0x122>
 800875c:	00000000 	.word	0x00000000

08008760 <st_int8_copy>:
 8008760:	4288      	cmp	r0, r1
 8008762:	d057      	beq.n	8008814 <st_int8_copy+0xb4>
 8008764:	2a00      	cmp	r2, #0
 8008766:	d055      	beq.n	8008814 <st_int8_copy+0xb4>
 8008768:	4288      	cmp	r0, r1
 800876a:	d354      	bcc.n	8008816 <st_int8_copy+0xb6>
 800876c:	078b      	lsls	r3, r1, #30
 800876e:	d102      	bne.n	8008776 <st_int8_copy+0x16>
 8008770:	e009      	b.n	8008786 <st_int8_copy+0x26>
 8008772:	2a00      	cmp	r2, #0
 8008774:	d05c      	beq.n	8008830 <st_int8_copy+0xd0>
 8008776:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800877a:	f801 3b01 	strb.w	r3, [r1], #1
 800877e:	078b      	lsls	r3, r1, #30
 8008780:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8008784:	d1f5      	bne.n	8008772 <st_int8_copy+0x12>
 8008786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800878a:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 800878e:	d069      	beq.n	8008864 <st_int8_copy+0x104>
 8008790:	ea41 0300 	orr.w	r3, r1, r0
 8008794:	075b      	lsls	r3, r3, #29
 8008796:	d14c      	bne.n	8008832 <st_int8_copy+0xd2>
 8008798:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
 800879c:	2b01      	cmp	r3, #1
 800879e:	d948      	bls.n	8008832 <st_int8_copy+0xd2>
 80087a0:	f100 0310 	add.w	r3, r0, #16
 80087a4:	ea4f 140e 	mov.w	r4, lr, lsl #4
 80087a8:	f101 0c10 	add.w	ip, r1, #16
 80087ac:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 80087b0:	ed13 6b04 	vldr	d6, [r3, #-16]
 80087b4:	ed13 7b02 	vldr	d7, [r3, #-8]
 80087b8:	3310      	adds	r3, #16
 80087ba:	4573      	cmp	r3, lr
 80087bc:	ed0c 6b04 	vstr	d6, [ip, #-16]
 80087c0:	ed0c 7b02 	vstr	d7, [ip, #-8]
 80087c4:	f10c 0c10 	add.w	ip, ip, #16
 80087c8:	d1f2      	bne.n	80087b0 <st_int8_copy+0x50>
 80087ca:	f3c2 0381 	ubfx	r3, r2, #2, #2
 80087ce:	4421      	add	r1, r4
 80087d0:	4420      	add	r0, r4
 80087d2:	f002 0203 	and.w	r2, r2, #3
 80087d6:	b16b      	cbz	r3, 80087f4 <st_int8_copy+0x94>
 80087d8:	6804      	ldr	r4, [r0, #0]
 80087da:	600c      	str	r4, [r1, #0]
 80087dc:	1e5c      	subs	r4, r3, #1
 80087de:	d005      	beq.n	80087ec <st_int8_copy+0x8c>
 80087e0:	6845      	ldr	r5, [r0, #4]
 80087e2:	604d      	str	r5, [r1, #4]
 80087e4:	2c01      	cmp	r4, #1
 80087e6:	bf1c      	itt	ne
 80087e8:	6884      	ldrne	r4, [r0, #8]
 80087ea:	608c      	strne	r4, [r1, #8]
 80087ec:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80087f0:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80087f4:	b162      	cbz	r2, 8008810 <st_int8_copy+0xb0>
 80087f6:	f990 3000 	ldrsb.w	r3, [r0]
 80087fa:	700b      	strb	r3, [r1, #0]
 80087fc:	3a01      	subs	r2, #1
 80087fe:	d007      	beq.n	8008810 <st_int8_copy+0xb0>
 8008800:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8008804:	704b      	strb	r3, [r1, #1]
 8008806:	2a01      	cmp	r2, #1
 8008808:	bf1c      	itt	ne
 800880a:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 800880e:	708b      	strbne	r3, [r1, #2]
 8008810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008814:	4770      	bx	lr
 8008816:	1883      	adds	r3, r0, r2
 8008818:	428b      	cmp	r3, r1
 800881a:	d9a7      	bls.n	800876c <st_int8_copy+0xc>
 800881c:	4283      	cmp	r3, r0
 800881e:	440a      	add	r2, r1
 8008820:	d9f8      	bls.n	8008814 <st_int8_copy+0xb4>
 8008822:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8008826:	f802 1d01 	strb.w	r1, [r2, #-1]!
 800882a:	4283      	cmp	r3, r0
 800882c:	d1f9      	bne.n	8008822 <st_int8_copy+0xc2>
 800882e:	4770      	bx	lr
 8008830:	4770      	bx	lr
 8008832:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8008836:	460b      	mov	r3, r1
 8008838:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 800883c:	4684      	mov	ip, r0
 800883e:	f8dc 7000 	ldr.w	r7, [ip]
 8008842:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8008846:	f8dc 5008 	ldr.w	r5, [ip, #8]
 800884a:	f8dc 800c 	ldr.w	r8, [ip, #12]
 800884e:	f8c3 800c 	str.w	r8, [r3, #12]
 8008852:	601f      	str	r7, [r3, #0]
 8008854:	605e      	str	r6, [r3, #4]
 8008856:	609d      	str	r5, [r3, #8]
 8008858:	3310      	adds	r3, #16
 800885a:	459e      	cmp	lr, r3
 800885c:	f10c 0c10 	add.w	ip, ip, #16
 8008860:	d1ed      	bne.n	800883e <st_int8_copy+0xde>
 8008862:	e7b2      	b.n	80087ca <st_int8_copy+0x6a>
 8008864:	0893      	lsrs	r3, r2, #2
 8008866:	f002 0203 	and.w	r2, r2, #3
 800886a:	e7b4      	b.n	80087d6 <st_int8_copy+0x76>

0800886c <ai_array_to_buffer_fmt>:
 800886c:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8008870:	2b02      	cmp	r3, #2
 8008872:	d050      	beq.n	8008916 <ai_array_to_buffer_fmt+0xaa>
 8008874:	4b2a      	ldr	r3, [pc, #168]	; (8008920 <ai_array_to_buffer_fmt+0xb4>)
 8008876:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 800887a:	429a      	cmp	r2, r3
 800887c:	d00b      	beq.n	8008896 <ai_array_to_buffer_fmt+0x2a>
 800887e:	dc1c      	bgt.n	80088ba <ai_array_to_buffer_fmt+0x4e>
 8008880:	4b28      	ldr	r3, [pc, #160]	; (8008924 <ai_array_to_buffer_fmt+0xb8>)
 8008882:	429a      	cmp	r2, r3
 8008884:	d007      	beq.n	8008896 <ai_array_to_buffer_fmt+0x2a>
 8008886:	dd0b      	ble.n	80088a0 <ai_array_to_buffer_fmt+0x34>
 8008888:	4b27      	ldr	r3, [pc, #156]	; (8008928 <ai_array_to_buffer_fmt+0xbc>)
 800888a:	429a      	cmp	r2, r3
 800888c:	d003      	beq.n	8008896 <ai_array_to_buffer_fmt+0x2a>
 800888e:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8008892:	429a      	cmp	r2, r3
 8008894:	d131      	bne.n	80088fa <ai_array_to_buffer_fmt+0x8e>
 8008896:	4613      	mov	r3, r2
 8008898:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800889c:	4318      	orrs	r0, r3
 800889e:	4770      	bx	lr
 80088a0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d0f6      	beq.n	8008896 <ai_array_to_buffer_fmt+0x2a>
 80088a8:	dd2c      	ble.n	8008904 <ai_array_to_buffer_fmt+0x98>
 80088aa:	4b20      	ldr	r3, [pc, #128]	; (800892c <ai_array_to_buffer_fmt+0xc0>)
 80088ac:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80088b0:	429a      	cmp	r2, r3
 80088b2:	bf18      	it	ne
 80088b4:	2340      	movne	r3, #64	; 0x40
 80088b6:	4318      	orrs	r0, r3
 80088b8:	4770      	bx	lr
 80088ba:	4b1d      	ldr	r3, [pc, #116]	; (8008930 <ai_array_to_buffer_fmt+0xc4>)
 80088bc:	429a      	cmp	r2, r3
 80088be:	d0ea      	beq.n	8008896 <ai_array_to_buffer_fmt+0x2a>
 80088c0:	dd0e      	ble.n	80088e0 <ai_array_to_buffer_fmt+0x74>
 80088c2:	4b1c      	ldr	r3, [pc, #112]	; (8008934 <ai_array_to_buffer_fmt+0xc8>)
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d0e6      	beq.n	8008896 <ai_array_to_buffer_fmt+0x2a>
 80088c8:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d0e2      	beq.n	8008896 <ai_array_to_buffer_fmt+0x2a>
 80088d0:	4b19      	ldr	r3, [pc, #100]	; (8008938 <ai_array_to_buffer_fmt+0xcc>)
 80088d2:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80088d6:	429a      	cmp	r2, r3
 80088d8:	bf18      	it	ne
 80088da:	2340      	movne	r3, #64	; 0x40
 80088dc:	4318      	orrs	r0, r3
 80088de:	4770      	bx	lr
 80088e0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d0d6      	beq.n	8008896 <ai_array_to_buffer_fmt+0x2a>
 80088e8:	3307      	adds	r3, #7
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d0d3      	beq.n	8008896 <ai_array_to_buffer_fmt+0x2a>
 80088ee:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 80088f2:	429a      	cmp	r2, r3
 80088f4:	bf18      	it	ne
 80088f6:	2340      	movne	r3, #64	; 0x40
 80088f8:	e7ce      	b.n	8008898 <ai_array_to_buffer_fmt+0x2c>
 80088fa:	4b10      	ldr	r3, [pc, #64]	; (800893c <ai_array_to_buffer_fmt+0xd0>)
 80088fc:	429a      	cmp	r2, r3
 80088fe:	bf18      	it	ne
 8008900:	2340      	movne	r3, #64	; 0x40
 8008902:	e7c9      	b.n	8008898 <ai_array_to_buffer_fmt+0x2c>
 8008904:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8008908:	429a      	cmp	r2, r3
 800890a:	d0c4      	beq.n	8008896 <ai_array_to_buffer_fmt+0x2a>
 800890c:	3380      	adds	r3, #128	; 0x80
 800890e:	429a      	cmp	r2, r3
 8008910:	bf18      	it	ne
 8008912:	2340      	movne	r3, #64	; 0x40
 8008914:	e7c0      	b.n	8008898 <ai_array_to_buffer_fmt+0x2c>
 8008916:	4b0a      	ldr	r3, [pc, #40]	; (8008940 <ai_array_to_buffer_fmt+0xd4>)
 8008918:	4003      	ands	r3, r0
 800891a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800891e:	e7bb      	b.n	8008898 <ai_array_to_buffer_fmt+0x2c>
 8008920:	00840040 	.word	0x00840040
 8008924:	00040840 	.word	0x00040840
 8008928:	00041040 	.word	0x00041040
 800892c:	00040447 	.word	0x00040447
 8008930:	00840840 	.word	0x00840840
 8008934:	00841040 	.word	0x00841040
 8008938:	0084084f 	.word	0x0084084f
 800893c:	0004084f 	.word	0x0004084f
 8008940:	00803fff 	.word	0x00803fff

08008944 <ai_array_get_byte_size>:
 8008944:	b319      	cbz	r1, 800898e <ai_array_get_byte_size+0x4a>
 8008946:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800894a:	fb03 f101 	mul.w	r1, r3, r1
 800894e:	3107      	adds	r1, #7
 8008950:	f3c0 4243 	ubfx	r2, r0, #17, #4
 8008954:	f021 0307 	bic.w	r3, r1, #7
 8008958:	2a04      	cmp	r2, #4
 800895a:	f3c0 5141 	ubfx	r1, r0, #21, #2
 800895e:	fa23 f101 	lsr.w	r1, r3, r1
 8008962:	ea4f 10e0 	mov.w	r0, r0, asr #7
 8008966:	d00b      	beq.n	8008980 <ai_array_get_byte_size+0x3c>
 8008968:	2a08      	cmp	r2, #8
 800896a:	d002      	beq.n	8008972 <ai_array_get_byte_size+0x2e>
 800896c:	3107      	adds	r1, #7
 800896e:	08c8      	lsrs	r0, r1, #3
 8008970:	4770      	bx	lr
 8008972:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8008976:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800897a:	3107      	adds	r1, #7
 800897c:	08c8      	lsrs	r0, r1, #3
 800897e:	4770      	bx	lr
 8008980:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8008984:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 8008988:	3107      	adds	r1, #7
 800898a:	08c8      	lsrs	r0, r1, #3
 800898c:	4770      	bx	lr
 800898e:	4608      	mov	r0, r1
 8008990:	4770      	bx	lr
 8008992:	bf00      	nop

08008994 <ai_array_get_data_byte_size>:
 8008994:	b169      	cbz	r1, 80089b2 <ai_array_get_data_byte_size+0x1e>
 8008996:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 800899a:	fb02 f101 	mul.w	r1, r2, r1
 800899e:	1dcb      	adds	r3, r1, #7
 80089a0:	f023 0307 	bic.w	r3, r3, #7
 80089a4:	f3c0 5041 	ubfx	r0, r0, #21, #2
 80089a8:	fa23 f000 	lsr.w	r0, r3, r0
 80089ac:	3007      	adds	r0, #7
 80089ae:	08c0      	lsrs	r0, r0, #3
 80089b0:	4770      	bx	lr
 80089b2:	4608      	mov	r0, r1
 80089b4:	4770      	bx	lr
 80089b6:	bf00      	nop

080089b8 <ai_version_get>:
 80089b8:	0212      	lsls	r2, r2, #8
 80089ba:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80089be:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 80089c2:	4770      	bx	lr

080089c4 <get_tensor_byte_size>:
 80089c4:	b410      	push	{r4}
 80089c6:	6983      	ldr	r3, [r0, #24]
 80089c8:	68c4      	ldr	r4, [r0, #12]
 80089ca:	6941      	ldr	r1, [r0, #20]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	68e0      	ldr	r0, [r4, #12]
 80089d0:	4a07      	ldr	r2, [pc, #28]	; (80089f0 <get_tensor_byte_size+0x2c>)
 80089d2:	68c9      	ldr	r1, [r1, #12]
 80089d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089d8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80089dc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80089e0:	fb01 f000 	mul.w	r0, r1, r0
 80089e4:	4293      	cmp	r3, r2
 80089e6:	bf04      	itt	eq
 80089e8:	3007      	addeq	r0, #7
 80089ea:	08c0      	lsreq	r0, r0, #3
 80089ec:	4770      	bx	lr
 80089ee:	bf00      	nop
 80089f0:	000400c0 	.word	0x000400c0

080089f4 <sbrk_aligned>:
 80089f4:	b570      	push	{r4, r5, r6, lr}
 80089f6:	4e0e      	ldr	r6, [pc, #56]	; (8008a30 <sbrk_aligned+0x3c>)
 80089f8:	460c      	mov	r4, r1
 80089fa:	6831      	ldr	r1, [r6, #0]
 80089fc:	4605      	mov	r5, r0
 80089fe:	b911      	cbnz	r1, 8008a06 <sbrk_aligned+0x12>
 8008a00:	f000 fae8 	bl	8008fd4 <_sbrk_r>
 8008a04:	6030      	str	r0, [r6, #0]
 8008a06:	4621      	mov	r1, r4
 8008a08:	4628      	mov	r0, r5
 8008a0a:	f000 fae3 	bl	8008fd4 <_sbrk_r>
 8008a0e:	1c43      	adds	r3, r0, #1
 8008a10:	d00a      	beq.n	8008a28 <sbrk_aligned+0x34>
 8008a12:	1cc4      	adds	r4, r0, #3
 8008a14:	f024 0403 	bic.w	r4, r4, #3
 8008a18:	42a0      	cmp	r0, r4
 8008a1a:	d007      	beq.n	8008a2c <sbrk_aligned+0x38>
 8008a1c:	1a21      	subs	r1, r4, r0
 8008a1e:	4628      	mov	r0, r5
 8008a20:	f000 fad8 	bl	8008fd4 <_sbrk_r>
 8008a24:	3001      	adds	r0, #1
 8008a26:	d101      	bne.n	8008a2c <sbrk_aligned+0x38>
 8008a28:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008a2c:	4620      	mov	r0, r4
 8008a2e:	bd70      	pop	{r4, r5, r6, pc}
 8008a30:	200011d0 	.word	0x200011d0

08008a34 <_malloc_r>:
 8008a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a38:	1ccd      	adds	r5, r1, #3
 8008a3a:	f025 0503 	bic.w	r5, r5, #3
 8008a3e:	3508      	adds	r5, #8
 8008a40:	2d0c      	cmp	r5, #12
 8008a42:	bf38      	it	cc
 8008a44:	250c      	movcc	r5, #12
 8008a46:	2d00      	cmp	r5, #0
 8008a48:	4607      	mov	r7, r0
 8008a4a:	db01      	blt.n	8008a50 <_malloc_r+0x1c>
 8008a4c:	42a9      	cmp	r1, r5
 8008a4e:	d905      	bls.n	8008a5c <_malloc_r+0x28>
 8008a50:	230c      	movs	r3, #12
 8008a52:	603b      	str	r3, [r7, #0]
 8008a54:	2600      	movs	r6, #0
 8008a56:	4630      	mov	r0, r6
 8008a58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a5c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008b30 <_malloc_r+0xfc>
 8008a60:	f000 f868 	bl	8008b34 <__malloc_lock>
 8008a64:	f8d8 3000 	ldr.w	r3, [r8]
 8008a68:	461c      	mov	r4, r3
 8008a6a:	bb5c      	cbnz	r4, 8008ac4 <_malloc_r+0x90>
 8008a6c:	4629      	mov	r1, r5
 8008a6e:	4638      	mov	r0, r7
 8008a70:	f7ff ffc0 	bl	80089f4 <sbrk_aligned>
 8008a74:	1c43      	adds	r3, r0, #1
 8008a76:	4604      	mov	r4, r0
 8008a78:	d155      	bne.n	8008b26 <_malloc_r+0xf2>
 8008a7a:	f8d8 4000 	ldr.w	r4, [r8]
 8008a7e:	4626      	mov	r6, r4
 8008a80:	2e00      	cmp	r6, #0
 8008a82:	d145      	bne.n	8008b10 <_malloc_r+0xdc>
 8008a84:	2c00      	cmp	r4, #0
 8008a86:	d048      	beq.n	8008b1a <_malloc_r+0xe6>
 8008a88:	6823      	ldr	r3, [r4, #0]
 8008a8a:	4631      	mov	r1, r6
 8008a8c:	4638      	mov	r0, r7
 8008a8e:	eb04 0903 	add.w	r9, r4, r3
 8008a92:	f000 fa9f 	bl	8008fd4 <_sbrk_r>
 8008a96:	4581      	cmp	r9, r0
 8008a98:	d13f      	bne.n	8008b1a <_malloc_r+0xe6>
 8008a9a:	6821      	ldr	r1, [r4, #0]
 8008a9c:	1a6d      	subs	r5, r5, r1
 8008a9e:	4629      	mov	r1, r5
 8008aa0:	4638      	mov	r0, r7
 8008aa2:	f7ff ffa7 	bl	80089f4 <sbrk_aligned>
 8008aa6:	3001      	adds	r0, #1
 8008aa8:	d037      	beq.n	8008b1a <_malloc_r+0xe6>
 8008aaa:	6823      	ldr	r3, [r4, #0]
 8008aac:	442b      	add	r3, r5
 8008aae:	6023      	str	r3, [r4, #0]
 8008ab0:	f8d8 3000 	ldr.w	r3, [r8]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d038      	beq.n	8008b2a <_malloc_r+0xf6>
 8008ab8:	685a      	ldr	r2, [r3, #4]
 8008aba:	42a2      	cmp	r2, r4
 8008abc:	d12b      	bne.n	8008b16 <_malloc_r+0xe2>
 8008abe:	2200      	movs	r2, #0
 8008ac0:	605a      	str	r2, [r3, #4]
 8008ac2:	e00f      	b.n	8008ae4 <_malloc_r+0xb0>
 8008ac4:	6822      	ldr	r2, [r4, #0]
 8008ac6:	1b52      	subs	r2, r2, r5
 8008ac8:	d41f      	bmi.n	8008b0a <_malloc_r+0xd6>
 8008aca:	2a0b      	cmp	r2, #11
 8008acc:	d917      	bls.n	8008afe <_malloc_r+0xca>
 8008ace:	1961      	adds	r1, r4, r5
 8008ad0:	42a3      	cmp	r3, r4
 8008ad2:	6025      	str	r5, [r4, #0]
 8008ad4:	bf18      	it	ne
 8008ad6:	6059      	strne	r1, [r3, #4]
 8008ad8:	6863      	ldr	r3, [r4, #4]
 8008ada:	bf08      	it	eq
 8008adc:	f8c8 1000 	streq.w	r1, [r8]
 8008ae0:	5162      	str	r2, [r4, r5]
 8008ae2:	604b      	str	r3, [r1, #4]
 8008ae4:	4638      	mov	r0, r7
 8008ae6:	f104 060b 	add.w	r6, r4, #11
 8008aea:	f000 f829 	bl	8008b40 <__malloc_unlock>
 8008aee:	f026 0607 	bic.w	r6, r6, #7
 8008af2:	1d23      	adds	r3, r4, #4
 8008af4:	1af2      	subs	r2, r6, r3
 8008af6:	d0ae      	beq.n	8008a56 <_malloc_r+0x22>
 8008af8:	1b9b      	subs	r3, r3, r6
 8008afa:	50a3      	str	r3, [r4, r2]
 8008afc:	e7ab      	b.n	8008a56 <_malloc_r+0x22>
 8008afe:	42a3      	cmp	r3, r4
 8008b00:	6862      	ldr	r2, [r4, #4]
 8008b02:	d1dd      	bne.n	8008ac0 <_malloc_r+0x8c>
 8008b04:	f8c8 2000 	str.w	r2, [r8]
 8008b08:	e7ec      	b.n	8008ae4 <_malloc_r+0xb0>
 8008b0a:	4623      	mov	r3, r4
 8008b0c:	6864      	ldr	r4, [r4, #4]
 8008b0e:	e7ac      	b.n	8008a6a <_malloc_r+0x36>
 8008b10:	4634      	mov	r4, r6
 8008b12:	6876      	ldr	r6, [r6, #4]
 8008b14:	e7b4      	b.n	8008a80 <_malloc_r+0x4c>
 8008b16:	4613      	mov	r3, r2
 8008b18:	e7cc      	b.n	8008ab4 <_malloc_r+0x80>
 8008b1a:	230c      	movs	r3, #12
 8008b1c:	603b      	str	r3, [r7, #0]
 8008b1e:	4638      	mov	r0, r7
 8008b20:	f000 f80e 	bl	8008b40 <__malloc_unlock>
 8008b24:	e797      	b.n	8008a56 <_malloc_r+0x22>
 8008b26:	6025      	str	r5, [r4, #0]
 8008b28:	e7dc      	b.n	8008ae4 <_malloc_r+0xb0>
 8008b2a:	605b      	str	r3, [r3, #4]
 8008b2c:	deff      	udf	#255	; 0xff
 8008b2e:	bf00      	nop
 8008b30:	200011cc 	.word	0x200011cc

08008b34 <__malloc_lock>:
 8008b34:	4801      	ldr	r0, [pc, #4]	; (8008b3c <__malloc_lock+0x8>)
 8008b36:	f000 ba9a 	b.w	800906e <__retarget_lock_acquire_recursive>
 8008b3a:	bf00      	nop
 8008b3c:	20001314 	.word	0x20001314

08008b40 <__malloc_unlock>:
 8008b40:	4801      	ldr	r0, [pc, #4]	; (8008b48 <__malloc_unlock+0x8>)
 8008b42:	f000 ba95 	b.w	8009070 <__retarget_lock_release_recursive>
 8008b46:	bf00      	nop
 8008b48:	20001314 	.word	0x20001314

08008b4c <std>:
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	b510      	push	{r4, lr}
 8008b50:	4604      	mov	r4, r0
 8008b52:	e9c0 3300 	strd	r3, r3, [r0]
 8008b56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008b5a:	6083      	str	r3, [r0, #8]
 8008b5c:	8181      	strh	r1, [r0, #12]
 8008b5e:	6643      	str	r3, [r0, #100]	; 0x64
 8008b60:	81c2      	strh	r2, [r0, #14]
 8008b62:	6183      	str	r3, [r0, #24]
 8008b64:	4619      	mov	r1, r3
 8008b66:	2208      	movs	r2, #8
 8008b68:	305c      	adds	r0, #92	; 0x5c
 8008b6a:	f000 f9f7 	bl	8008f5c <memset>
 8008b6e:	4b0d      	ldr	r3, [pc, #52]	; (8008ba4 <std+0x58>)
 8008b70:	6263      	str	r3, [r4, #36]	; 0x24
 8008b72:	4b0d      	ldr	r3, [pc, #52]	; (8008ba8 <std+0x5c>)
 8008b74:	62a3      	str	r3, [r4, #40]	; 0x28
 8008b76:	4b0d      	ldr	r3, [pc, #52]	; (8008bac <std+0x60>)
 8008b78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008b7a:	4b0d      	ldr	r3, [pc, #52]	; (8008bb0 <std+0x64>)
 8008b7c:	6323      	str	r3, [r4, #48]	; 0x30
 8008b7e:	4b0d      	ldr	r3, [pc, #52]	; (8008bb4 <std+0x68>)
 8008b80:	6224      	str	r4, [r4, #32]
 8008b82:	429c      	cmp	r4, r3
 8008b84:	d006      	beq.n	8008b94 <std+0x48>
 8008b86:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008b8a:	4294      	cmp	r4, r2
 8008b8c:	d002      	beq.n	8008b94 <std+0x48>
 8008b8e:	33d0      	adds	r3, #208	; 0xd0
 8008b90:	429c      	cmp	r4, r3
 8008b92:	d105      	bne.n	8008ba0 <std+0x54>
 8008b94:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b9c:	f000 ba66 	b.w	800906c <__retarget_lock_init_recursive>
 8008ba0:	bd10      	pop	{r4, pc}
 8008ba2:	bf00      	nop
 8008ba4:	08008dad 	.word	0x08008dad
 8008ba8:	08008dcf 	.word	0x08008dcf
 8008bac:	08008e07 	.word	0x08008e07
 8008bb0:	08008e2b 	.word	0x08008e2b
 8008bb4:	200011d4 	.word	0x200011d4

08008bb8 <stdio_exit_handler>:
 8008bb8:	4a02      	ldr	r2, [pc, #8]	; (8008bc4 <stdio_exit_handler+0xc>)
 8008bba:	4903      	ldr	r1, [pc, #12]	; (8008bc8 <stdio_exit_handler+0x10>)
 8008bbc:	4803      	ldr	r0, [pc, #12]	; (8008bcc <stdio_exit_handler+0x14>)
 8008bbe:	f000 b869 	b.w	8008c94 <_fwalk_sglue>
 8008bc2:	bf00      	nop
 8008bc4:	20000920 	.word	0x20000920
 8008bc8:	080097c1 	.word	0x080097c1
 8008bcc:	2000092c 	.word	0x2000092c

08008bd0 <cleanup_stdio>:
 8008bd0:	6841      	ldr	r1, [r0, #4]
 8008bd2:	4b0c      	ldr	r3, [pc, #48]	; (8008c04 <cleanup_stdio+0x34>)
 8008bd4:	4299      	cmp	r1, r3
 8008bd6:	b510      	push	{r4, lr}
 8008bd8:	4604      	mov	r4, r0
 8008bda:	d001      	beq.n	8008be0 <cleanup_stdio+0x10>
 8008bdc:	f000 fdf0 	bl	80097c0 <_fflush_r>
 8008be0:	68a1      	ldr	r1, [r4, #8]
 8008be2:	4b09      	ldr	r3, [pc, #36]	; (8008c08 <cleanup_stdio+0x38>)
 8008be4:	4299      	cmp	r1, r3
 8008be6:	d002      	beq.n	8008bee <cleanup_stdio+0x1e>
 8008be8:	4620      	mov	r0, r4
 8008bea:	f000 fde9 	bl	80097c0 <_fflush_r>
 8008bee:	68e1      	ldr	r1, [r4, #12]
 8008bf0:	4b06      	ldr	r3, [pc, #24]	; (8008c0c <cleanup_stdio+0x3c>)
 8008bf2:	4299      	cmp	r1, r3
 8008bf4:	d004      	beq.n	8008c00 <cleanup_stdio+0x30>
 8008bf6:	4620      	mov	r0, r4
 8008bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bfc:	f000 bde0 	b.w	80097c0 <_fflush_r>
 8008c00:	bd10      	pop	{r4, pc}
 8008c02:	bf00      	nop
 8008c04:	200011d4 	.word	0x200011d4
 8008c08:	2000123c 	.word	0x2000123c
 8008c0c:	200012a4 	.word	0x200012a4

08008c10 <global_stdio_init.part.0>:
 8008c10:	b510      	push	{r4, lr}
 8008c12:	4b0b      	ldr	r3, [pc, #44]	; (8008c40 <global_stdio_init.part.0+0x30>)
 8008c14:	4c0b      	ldr	r4, [pc, #44]	; (8008c44 <global_stdio_init.part.0+0x34>)
 8008c16:	4a0c      	ldr	r2, [pc, #48]	; (8008c48 <global_stdio_init.part.0+0x38>)
 8008c18:	601a      	str	r2, [r3, #0]
 8008c1a:	4620      	mov	r0, r4
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	2104      	movs	r1, #4
 8008c20:	f7ff ff94 	bl	8008b4c <std>
 8008c24:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008c28:	2201      	movs	r2, #1
 8008c2a:	2109      	movs	r1, #9
 8008c2c:	f7ff ff8e 	bl	8008b4c <std>
 8008c30:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008c34:	2202      	movs	r2, #2
 8008c36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c3a:	2112      	movs	r1, #18
 8008c3c:	f7ff bf86 	b.w	8008b4c <std>
 8008c40:	2000130c 	.word	0x2000130c
 8008c44:	200011d4 	.word	0x200011d4
 8008c48:	08008bb9 	.word	0x08008bb9

08008c4c <__sfp_lock_acquire>:
 8008c4c:	4801      	ldr	r0, [pc, #4]	; (8008c54 <__sfp_lock_acquire+0x8>)
 8008c4e:	f000 ba0e 	b.w	800906e <__retarget_lock_acquire_recursive>
 8008c52:	bf00      	nop
 8008c54:	20001315 	.word	0x20001315

08008c58 <__sfp_lock_release>:
 8008c58:	4801      	ldr	r0, [pc, #4]	; (8008c60 <__sfp_lock_release+0x8>)
 8008c5a:	f000 ba09 	b.w	8009070 <__retarget_lock_release_recursive>
 8008c5e:	bf00      	nop
 8008c60:	20001315 	.word	0x20001315

08008c64 <__sinit>:
 8008c64:	b510      	push	{r4, lr}
 8008c66:	4604      	mov	r4, r0
 8008c68:	f7ff fff0 	bl	8008c4c <__sfp_lock_acquire>
 8008c6c:	6a23      	ldr	r3, [r4, #32]
 8008c6e:	b11b      	cbz	r3, 8008c78 <__sinit+0x14>
 8008c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c74:	f7ff bff0 	b.w	8008c58 <__sfp_lock_release>
 8008c78:	4b04      	ldr	r3, [pc, #16]	; (8008c8c <__sinit+0x28>)
 8008c7a:	6223      	str	r3, [r4, #32]
 8008c7c:	4b04      	ldr	r3, [pc, #16]	; (8008c90 <__sinit+0x2c>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d1f5      	bne.n	8008c70 <__sinit+0xc>
 8008c84:	f7ff ffc4 	bl	8008c10 <global_stdio_init.part.0>
 8008c88:	e7f2      	b.n	8008c70 <__sinit+0xc>
 8008c8a:	bf00      	nop
 8008c8c:	08008bd1 	.word	0x08008bd1
 8008c90:	2000130c 	.word	0x2000130c

08008c94 <_fwalk_sglue>:
 8008c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c98:	4607      	mov	r7, r0
 8008c9a:	4688      	mov	r8, r1
 8008c9c:	4614      	mov	r4, r2
 8008c9e:	2600      	movs	r6, #0
 8008ca0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008ca4:	f1b9 0901 	subs.w	r9, r9, #1
 8008ca8:	d505      	bpl.n	8008cb6 <_fwalk_sglue+0x22>
 8008caa:	6824      	ldr	r4, [r4, #0]
 8008cac:	2c00      	cmp	r4, #0
 8008cae:	d1f7      	bne.n	8008ca0 <_fwalk_sglue+0xc>
 8008cb0:	4630      	mov	r0, r6
 8008cb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cb6:	89ab      	ldrh	r3, [r5, #12]
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	d907      	bls.n	8008ccc <_fwalk_sglue+0x38>
 8008cbc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	d003      	beq.n	8008ccc <_fwalk_sglue+0x38>
 8008cc4:	4629      	mov	r1, r5
 8008cc6:	4638      	mov	r0, r7
 8008cc8:	47c0      	blx	r8
 8008cca:	4306      	orrs	r6, r0
 8008ccc:	3568      	adds	r5, #104	; 0x68
 8008cce:	e7e9      	b.n	8008ca4 <_fwalk_sglue+0x10>

08008cd0 <iprintf>:
 8008cd0:	b40f      	push	{r0, r1, r2, r3}
 8008cd2:	b507      	push	{r0, r1, r2, lr}
 8008cd4:	4906      	ldr	r1, [pc, #24]	; (8008cf0 <iprintf+0x20>)
 8008cd6:	ab04      	add	r3, sp, #16
 8008cd8:	6808      	ldr	r0, [r1, #0]
 8008cda:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cde:	6881      	ldr	r1, [r0, #8]
 8008ce0:	9301      	str	r3, [sp, #4]
 8008ce2:	f000 fa3d 	bl	8009160 <_vfiprintf_r>
 8008ce6:	b003      	add	sp, #12
 8008ce8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008cec:	b004      	add	sp, #16
 8008cee:	4770      	bx	lr
 8008cf0:	20000978 	.word	0x20000978

08008cf4 <_puts_r>:
 8008cf4:	6a03      	ldr	r3, [r0, #32]
 8008cf6:	b570      	push	{r4, r5, r6, lr}
 8008cf8:	6884      	ldr	r4, [r0, #8]
 8008cfa:	4605      	mov	r5, r0
 8008cfc:	460e      	mov	r6, r1
 8008cfe:	b90b      	cbnz	r3, 8008d04 <_puts_r+0x10>
 8008d00:	f7ff ffb0 	bl	8008c64 <__sinit>
 8008d04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d06:	07db      	lsls	r3, r3, #31
 8008d08:	d405      	bmi.n	8008d16 <_puts_r+0x22>
 8008d0a:	89a3      	ldrh	r3, [r4, #12]
 8008d0c:	0598      	lsls	r0, r3, #22
 8008d0e:	d402      	bmi.n	8008d16 <_puts_r+0x22>
 8008d10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d12:	f000 f9ac 	bl	800906e <__retarget_lock_acquire_recursive>
 8008d16:	89a3      	ldrh	r3, [r4, #12]
 8008d18:	0719      	lsls	r1, r3, #28
 8008d1a:	d513      	bpl.n	8008d44 <_puts_r+0x50>
 8008d1c:	6923      	ldr	r3, [r4, #16]
 8008d1e:	b18b      	cbz	r3, 8008d44 <_puts_r+0x50>
 8008d20:	3e01      	subs	r6, #1
 8008d22:	68a3      	ldr	r3, [r4, #8]
 8008d24:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008d28:	3b01      	subs	r3, #1
 8008d2a:	60a3      	str	r3, [r4, #8]
 8008d2c:	b9e9      	cbnz	r1, 8008d6a <_puts_r+0x76>
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	da2e      	bge.n	8008d90 <_puts_r+0x9c>
 8008d32:	4622      	mov	r2, r4
 8008d34:	210a      	movs	r1, #10
 8008d36:	4628      	mov	r0, r5
 8008d38:	f000 f87b 	bl	8008e32 <__swbuf_r>
 8008d3c:	3001      	adds	r0, #1
 8008d3e:	d007      	beq.n	8008d50 <_puts_r+0x5c>
 8008d40:	250a      	movs	r5, #10
 8008d42:	e007      	b.n	8008d54 <_puts_r+0x60>
 8008d44:	4621      	mov	r1, r4
 8008d46:	4628      	mov	r0, r5
 8008d48:	f000 f8b0 	bl	8008eac <__swsetup_r>
 8008d4c:	2800      	cmp	r0, #0
 8008d4e:	d0e7      	beq.n	8008d20 <_puts_r+0x2c>
 8008d50:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008d54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d56:	07da      	lsls	r2, r3, #31
 8008d58:	d405      	bmi.n	8008d66 <_puts_r+0x72>
 8008d5a:	89a3      	ldrh	r3, [r4, #12]
 8008d5c:	059b      	lsls	r3, r3, #22
 8008d5e:	d402      	bmi.n	8008d66 <_puts_r+0x72>
 8008d60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d62:	f000 f985 	bl	8009070 <__retarget_lock_release_recursive>
 8008d66:	4628      	mov	r0, r5
 8008d68:	bd70      	pop	{r4, r5, r6, pc}
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	da04      	bge.n	8008d78 <_puts_r+0x84>
 8008d6e:	69a2      	ldr	r2, [r4, #24]
 8008d70:	429a      	cmp	r2, r3
 8008d72:	dc06      	bgt.n	8008d82 <_puts_r+0x8e>
 8008d74:	290a      	cmp	r1, #10
 8008d76:	d004      	beq.n	8008d82 <_puts_r+0x8e>
 8008d78:	6823      	ldr	r3, [r4, #0]
 8008d7a:	1c5a      	adds	r2, r3, #1
 8008d7c:	6022      	str	r2, [r4, #0]
 8008d7e:	7019      	strb	r1, [r3, #0]
 8008d80:	e7cf      	b.n	8008d22 <_puts_r+0x2e>
 8008d82:	4622      	mov	r2, r4
 8008d84:	4628      	mov	r0, r5
 8008d86:	f000 f854 	bl	8008e32 <__swbuf_r>
 8008d8a:	3001      	adds	r0, #1
 8008d8c:	d1c9      	bne.n	8008d22 <_puts_r+0x2e>
 8008d8e:	e7df      	b.n	8008d50 <_puts_r+0x5c>
 8008d90:	6823      	ldr	r3, [r4, #0]
 8008d92:	250a      	movs	r5, #10
 8008d94:	1c5a      	adds	r2, r3, #1
 8008d96:	6022      	str	r2, [r4, #0]
 8008d98:	701d      	strb	r5, [r3, #0]
 8008d9a:	e7db      	b.n	8008d54 <_puts_r+0x60>

08008d9c <puts>:
 8008d9c:	4b02      	ldr	r3, [pc, #8]	; (8008da8 <puts+0xc>)
 8008d9e:	4601      	mov	r1, r0
 8008da0:	6818      	ldr	r0, [r3, #0]
 8008da2:	f7ff bfa7 	b.w	8008cf4 <_puts_r>
 8008da6:	bf00      	nop
 8008da8:	20000978 	.word	0x20000978

08008dac <__sread>:
 8008dac:	b510      	push	{r4, lr}
 8008dae:	460c      	mov	r4, r1
 8008db0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008db4:	f000 f8fc 	bl	8008fb0 <_read_r>
 8008db8:	2800      	cmp	r0, #0
 8008dba:	bfab      	itete	ge
 8008dbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008dbe:	89a3      	ldrhlt	r3, [r4, #12]
 8008dc0:	181b      	addge	r3, r3, r0
 8008dc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008dc6:	bfac      	ite	ge
 8008dc8:	6563      	strge	r3, [r4, #84]	; 0x54
 8008dca:	81a3      	strhlt	r3, [r4, #12]
 8008dcc:	bd10      	pop	{r4, pc}

08008dce <__swrite>:
 8008dce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dd2:	461f      	mov	r7, r3
 8008dd4:	898b      	ldrh	r3, [r1, #12]
 8008dd6:	05db      	lsls	r3, r3, #23
 8008dd8:	4605      	mov	r5, r0
 8008dda:	460c      	mov	r4, r1
 8008ddc:	4616      	mov	r6, r2
 8008dde:	d505      	bpl.n	8008dec <__swrite+0x1e>
 8008de0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008de4:	2302      	movs	r3, #2
 8008de6:	2200      	movs	r2, #0
 8008de8:	f000 f8d0 	bl	8008f8c <_lseek_r>
 8008dec:	89a3      	ldrh	r3, [r4, #12]
 8008dee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008df2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008df6:	81a3      	strh	r3, [r4, #12]
 8008df8:	4632      	mov	r2, r6
 8008dfa:	463b      	mov	r3, r7
 8008dfc:	4628      	mov	r0, r5
 8008dfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e02:	f000 b8f7 	b.w	8008ff4 <_write_r>

08008e06 <__sseek>:
 8008e06:	b510      	push	{r4, lr}
 8008e08:	460c      	mov	r4, r1
 8008e0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e0e:	f000 f8bd 	bl	8008f8c <_lseek_r>
 8008e12:	1c43      	adds	r3, r0, #1
 8008e14:	89a3      	ldrh	r3, [r4, #12]
 8008e16:	bf15      	itete	ne
 8008e18:	6560      	strne	r0, [r4, #84]	; 0x54
 8008e1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008e1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008e22:	81a3      	strheq	r3, [r4, #12]
 8008e24:	bf18      	it	ne
 8008e26:	81a3      	strhne	r3, [r4, #12]
 8008e28:	bd10      	pop	{r4, pc}

08008e2a <__sclose>:
 8008e2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e2e:	f000 b89d 	b.w	8008f6c <_close_r>

08008e32 <__swbuf_r>:
 8008e32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e34:	460e      	mov	r6, r1
 8008e36:	4614      	mov	r4, r2
 8008e38:	4605      	mov	r5, r0
 8008e3a:	b118      	cbz	r0, 8008e44 <__swbuf_r+0x12>
 8008e3c:	6a03      	ldr	r3, [r0, #32]
 8008e3e:	b90b      	cbnz	r3, 8008e44 <__swbuf_r+0x12>
 8008e40:	f7ff ff10 	bl	8008c64 <__sinit>
 8008e44:	69a3      	ldr	r3, [r4, #24]
 8008e46:	60a3      	str	r3, [r4, #8]
 8008e48:	89a3      	ldrh	r3, [r4, #12]
 8008e4a:	071a      	lsls	r2, r3, #28
 8008e4c:	d525      	bpl.n	8008e9a <__swbuf_r+0x68>
 8008e4e:	6923      	ldr	r3, [r4, #16]
 8008e50:	b31b      	cbz	r3, 8008e9a <__swbuf_r+0x68>
 8008e52:	6823      	ldr	r3, [r4, #0]
 8008e54:	6922      	ldr	r2, [r4, #16]
 8008e56:	1a98      	subs	r0, r3, r2
 8008e58:	6963      	ldr	r3, [r4, #20]
 8008e5a:	b2f6      	uxtb	r6, r6
 8008e5c:	4283      	cmp	r3, r0
 8008e5e:	4637      	mov	r7, r6
 8008e60:	dc04      	bgt.n	8008e6c <__swbuf_r+0x3a>
 8008e62:	4621      	mov	r1, r4
 8008e64:	4628      	mov	r0, r5
 8008e66:	f000 fcab 	bl	80097c0 <_fflush_r>
 8008e6a:	b9e0      	cbnz	r0, 8008ea6 <__swbuf_r+0x74>
 8008e6c:	68a3      	ldr	r3, [r4, #8]
 8008e6e:	3b01      	subs	r3, #1
 8008e70:	60a3      	str	r3, [r4, #8]
 8008e72:	6823      	ldr	r3, [r4, #0]
 8008e74:	1c5a      	adds	r2, r3, #1
 8008e76:	6022      	str	r2, [r4, #0]
 8008e78:	701e      	strb	r6, [r3, #0]
 8008e7a:	6962      	ldr	r2, [r4, #20]
 8008e7c:	1c43      	adds	r3, r0, #1
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d004      	beq.n	8008e8c <__swbuf_r+0x5a>
 8008e82:	89a3      	ldrh	r3, [r4, #12]
 8008e84:	07db      	lsls	r3, r3, #31
 8008e86:	d506      	bpl.n	8008e96 <__swbuf_r+0x64>
 8008e88:	2e0a      	cmp	r6, #10
 8008e8a:	d104      	bne.n	8008e96 <__swbuf_r+0x64>
 8008e8c:	4621      	mov	r1, r4
 8008e8e:	4628      	mov	r0, r5
 8008e90:	f000 fc96 	bl	80097c0 <_fflush_r>
 8008e94:	b938      	cbnz	r0, 8008ea6 <__swbuf_r+0x74>
 8008e96:	4638      	mov	r0, r7
 8008e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e9a:	4621      	mov	r1, r4
 8008e9c:	4628      	mov	r0, r5
 8008e9e:	f000 f805 	bl	8008eac <__swsetup_r>
 8008ea2:	2800      	cmp	r0, #0
 8008ea4:	d0d5      	beq.n	8008e52 <__swbuf_r+0x20>
 8008ea6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008eaa:	e7f4      	b.n	8008e96 <__swbuf_r+0x64>

08008eac <__swsetup_r>:
 8008eac:	b538      	push	{r3, r4, r5, lr}
 8008eae:	4b2a      	ldr	r3, [pc, #168]	; (8008f58 <__swsetup_r+0xac>)
 8008eb0:	4605      	mov	r5, r0
 8008eb2:	6818      	ldr	r0, [r3, #0]
 8008eb4:	460c      	mov	r4, r1
 8008eb6:	b118      	cbz	r0, 8008ec0 <__swsetup_r+0x14>
 8008eb8:	6a03      	ldr	r3, [r0, #32]
 8008eba:	b90b      	cbnz	r3, 8008ec0 <__swsetup_r+0x14>
 8008ebc:	f7ff fed2 	bl	8008c64 <__sinit>
 8008ec0:	89a3      	ldrh	r3, [r4, #12]
 8008ec2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ec6:	0718      	lsls	r0, r3, #28
 8008ec8:	d422      	bmi.n	8008f10 <__swsetup_r+0x64>
 8008eca:	06d9      	lsls	r1, r3, #27
 8008ecc:	d407      	bmi.n	8008ede <__swsetup_r+0x32>
 8008ece:	2309      	movs	r3, #9
 8008ed0:	602b      	str	r3, [r5, #0]
 8008ed2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008ed6:	81a3      	strh	r3, [r4, #12]
 8008ed8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008edc:	e034      	b.n	8008f48 <__swsetup_r+0x9c>
 8008ede:	0758      	lsls	r0, r3, #29
 8008ee0:	d512      	bpl.n	8008f08 <__swsetup_r+0x5c>
 8008ee2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ee4:	b141      	cbz	r1, 8008ef8 <__swsetup_r+0x4c>
 8008ee6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008eea:	4299      	cmp	r1, r3
 8008eec:	d002      	beq.n	8008ef4 <__swsetup_r+0x48>
 8008eee:	4628      	mov	r0, r5
 8008ef0:	f000 f8c0 	bl	8009074 <_free_r>
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	6363      	str	r3, [r4, #52]	; 0x34
 8008ef8:	89a3      	ldrh	r3, [r4, #12]
 8008efa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008efe:	81a3      	strh	r3, [r4, #12]
 8008f00:	2300      	movs	r3, #0
 8008f02:	6063      	str	r3, [r4, #4]
 8008f04:	6923      	ldr	r3, [r4, #16]
 8008f06:	6023      	str	r3, [r4, #0]
 8008f08:	89a3      	ldrh	r3, [r4, #12]
 8008f0a:	f043 0308 	orr.w	r3, r3, #8
 8008f0e:	81a3      	strh	r3, [r4, #12]
 8008f10:	6923      	ldr	r3, [r4, #16]
 8008f12:	b94b      	cbnz	r3, 8008f28 <__swsetup_r+0x7c>
 8008f14:	89a3      	ldrh	r3, [r4, #12]
 8008f16:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008f1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f1e:	d003      	beq.n	8008f28 <__swsetup_r+0x7c>
 8008f20:	4621      	mov	r1, r4
 8008f22:	4628      	mov	r0, r5
 8008f24:	f000 fc9a 	bl	800985c <__smakebuf_r>
 8008f28:	89a0      	ldrh	r0, [r4, #12]
 8008f2a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f2e:	f010 0301 	ands.w	r3, r0, #1
 8008f32:	d00a      	beq.n	8008f4a <__swsetup_r+0x9e>
 8008f34:	2300      	movs	r3, #0
 8008f36:	60a3      	str	r3, [r4, #8]
 8008f38:	6963      	ldr	r3, [r4, #20]
 8008f3a:	425b      	negs	r3, r3
 8008f3c:	61a3      	str	r3, [r4, #24]
 8008f3e:	6923      	ldr	r3, [r4, #16]
 8008f40:	b943      	cbnz	r3, 8008f54 <__swsetup_r+0xa8>
 8008f42:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008f46:	d1c4      	bne.n	8008ed2 <__swsetup_r+0x26>
 8008f48:	bd38      	pop	{r3, r4, r5, pc}
 8008f4a:	0781      	lsls	r1, r0, #30
 8008f4c:	bf58      	it	pl
 8008f4e:	6963      	ldrpl	r3, [r4, #20]
 8008f50:	60a3      	str	r3, [r4, #8]
 8008f52:	e7f4      	b.n	8008f3e <__swsetup_r+0x92>
 8008f54:	2000      	movs	r0, #0
 8008f56:	e7f7      	b.n	8008f48 <__swsetup_r+0x9c>
 8008f58:	20000978 	.word	0x20000978

08008f5c <memset>:
 8008f5c:	4402      	add	r2, r0
 8008f5e:	4603      	mov	r3, r0
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d100      	bne.n	8008f66 <memset+0xa>
 8008f64:	4770      	bx	lr
 8008f66:	f803 1b01 	strb.w	r1, [r3], #1
 8008f6a:	e7f9      	b.n	8008f60 <memset+0x4>

08008f6c <_close_r>:
 8008f6c:	b538      	push	{r3, r4, r5, lr}
 8008f6e:	4d06      	ldr	r5, [pc, #24]	; (8008f88 <_close_r+0x1c>)
 8008f70:	2300      	movs	r3, #0
 8008f72:	4604      	mov	r4, r0
 8008f74:	4608      	mov	r0, r1
 8008f76:	602b      	str	r3, [r5, #0]
 8008f78:	f7f8 faff 	bl	800157a <_close>
 8008f7c:	1c43      	adds	r3, r0, #1
 8008f7e:	d102      	bne.n	8008f86 <_close_r+0x1a>
 8008f80:	682b      	ldr	r3, [r5, #0]
 8008f82:	b103      	cbz	r3, 8008f86 <_close_r+0x1a>
 8008f84:	6023      	str	r3, [r4, #0]
 8008f86:	bd38      	pop	{r3, r4, r5, pc}
 8008f88:	20001310 	.word	0x20001310

08008f8c <_lseek_r>:
 8008f8c:	b538      	push	{r3, r4, r5, lr}
 8008f8e:	4d07      	ldr	r5, [pc, #28]	; (8008fac <_lseek_r+0x20>)
 8008f90:	4604      	mov	r4, r0
 8008f92:	4608      	mov	r0, r1
 8008f94:	4611      	mov	r1, r2
 8008f96:	2200      	movs	r2, #0
 8008f98:	602a      	str	r2, [r5, #0]
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	f7f8 fb14 	bl	80015c8 <_lseek>
 8008fa0:	1c43      	adds	r3, r0, #1
 8008fa2:	d102      	bne.n	8008faa <_lseek_r+0x1e>
 8008fa4:	682b      	ldr	r3, [r5, #0]
 8008fa6:	b103      	cbz	r3, 8008faa <_lseek_r+0x1e>
 8008fa8:	6023      	str	r3, [r4, #0]
 8008faa:	bd38      	pop	{r3, r4, r5, pc}
 8008fac:	20001310 	.word	0x20001310

08008fb0 <_read_r>:
 8008fb0:	b538      	push	{r3, r4, r5, lr}
 8008fb2:	4d07      	ldr	r5, [pc, #28]	; (8008fd0 <_read_r+0x20>)
 8008fb4:	4604      	mov	r4, r0
 8008fb6:	4608      	mov	r0, r1
 8008fb8:	4611      	mov	r1, r2
 8008fba:	2200      	movs	r2, #0
 8008fbc:	602a      	str	r2, [r5, #0]
 8008fbe:	461a      	mov	r2, r3
 8008fc0:	f7f8 faa2 	bl	8001508 <_read>
 8008fc4:	1c43      	adds	r3, r0, #1
 8008fc6:	d102      	bne.n	8008fce <_read_r+0x1e>
 8008fc8:	682b      	ldr	r3, [r5, #0]
 8008fca:	b103      	cbz	r3, 8008fce <_read_r+0x1e>
 8008fcc:	6023      	str	r3, [r4, #0]
 8008fce:	bd38      	pop	{r3, r4, r5, pc}
 8008fd0:	20001310 	.word	0x20001310

08008fd4 <_sbrk_r>:
 8008fd4:	b538      	push	{r3, r4, r5, lr}
 8008fd6:	4d06      	ldr	r5, [pc, #24]	; (8008ff0 <_sbrk_r+0x1c>)
 8008fd8:	2300      	movs	r3, #0
 8008fda:	4604      	mov	r4, r0
 8008fdc:	4608      	mov	r0, r1
 8008fde:	602b      	str	r3, [r5, #0]
 8008fe0:	f7f8 fb00 	bl	80015e4 <_sbrk>
 8008fe4:	1c43      	adds	r3, r0, #1
 8008fe6:	d102      	bne.n	8008fee <_sbrk_r+0x1a>
 8008fe8:	682b      	ldr	r3, [r5, #0]
 8008fea:	b103      	cbz	r3, 8008fee <_sbrk_r+0x1a>
 8008fec:	6023      	str	r3, [r4, #0]
 8008fee:	bd38      	pop	{r3, r4, r5, pc}
 8008ff0:	20001310 	.word	0x20001310

08008ff4 <_write_r>:
 8008ff4:	b538      	push	{r3, r4, r5, lr}
 8008ff6:	4d07      	ldr	r5, [pc, #28]	; (8009014 <_write_r+0x20>)
 8008ff8:	4604      	mov	r4, r0
 8008ffa:	4608      	mov	r0, r1
 8008ffc:	4611      	mov	r1, r2
 8008ffe:	2200      	movs	r2, #0
 8009000:	602a      	str	r2, [r5, #0]
 8009002:	461a      	mov	r2, r3
 8009004:	f7f8 fa9d 	bl	8001542 <_write>
 8009008:	1c43      	adds	r3, r0, #1
 800900a:	d102      	bne.n	8009012 <_write_r+0x1e>
 800900c:	682b      	ldr	r3, [r5, #0]
 800900e:	b103      	cbz	r3, 8009012 <_write_r+0x1e>
 8009010:	6023      	str	r3, [r4, #0]
 8009012:	bd38      	pop	{r3, r4, r5, pc}
 8009014:	20001310 	.word	0x20001310

08009018 <__errno>:
 8009018:	4b01      	ldr	r3, [pc, #4]	; (8009020 <__errno+0x8>)
 800901a:	6818      	ldr	r0, [r3, #0]
 800901c:	4770      	bx	lr
 800901e:	bf00      	nop
 8009020:	20000978 	.word	0x20000978

08009024 <__libc_init_array>:
 8009024:	b570      	push	{r4, r5, r6, lr}
 8009026:	4d0d      	ldr	r5, [pc, #52]	; (800905c <__libc_init_array+0x38>)
 8009028:	4c0d      	ldr	r4, [pc, #52]	; (8009060 <__libc_init_array+0x3c>)
 800902a:	1b64      	subs	r4, r4, r5
 800902c:	10a4      	asrs	r4, r4, #2
 800902e:	2600      	movs	r6, #0
 8009030:	42a6      	cmp	r6, r4
 8009032:	d109      	bne.n	8009048 <__libc_init_array+0x24>
 8009034:	4d0b      	ldr	r5, [pc, #44]	; (8009064 <__libc_init_array+0x40>)
 8009036:	4c0c      	ldr	r4, [pc, #48]	; (8009068 <__libc_init_array+0x44>)
 8009038:	f000 fda2 	bl	8009b80 <_init>
 800903c:	1b64      	subs	r4, r4, r5
 800903e:	10a4      	asrs	r4, r4, #2
 8009040:	2600      	movs	r6, #0
 8009042:	42a6      	cmp	r6, r4
 8009044:	d105      	bne.n	8009052 <__libc_init_array+0x2e>
 8009046:	bd70      	pop	{r4, r5, r6, pc}
 8009048:	f855 3b04 	ldr.w	r3, [r5], #4
 800904c:	4798      	blx	r3
 800904e:	3601      	adds	r6, #1
 8009050:	e7ee      	b.n	8009030 <__libc_init_array+0xc>
 8009052:	f855 3b04 	ldr.w	r3, [r5], #4
 8009056:	4798      	blx	r3
 8009058:	3601      	adds	r6, #1
 800905a:	e7f2      	b.n	8009042 <__libc_init_array+0x1e>
 800905c:	08020e94 	.word	0x08020e94
 8009060:	08020e94 	.word	0x08020e94
 8009064:	08020e94 	.word	0x08020e94
 8009068:	08020e98 	.word	0x08020e98

0800906c <__retarget_lock_init_recursive>:
 800906c:	4770      	bx	lr

0800906e <__retarget_lock_acquire_recursive>:
 800906e:	4770      	bx	lr

08009070 <__retarget_lock_release_recursive>:
 8009070:	4770      	bx	lr
	...

08009074 <_free_r>:
 8009074:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009076:	2900      	cmp	r1, #0
 8009078:	d044      	beq.n	8009104 <_free_r+0x90>
 800907a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800907e:	9001      	str	r0, [sp, #4]
 8009080:	2b00      	cmp	r3, #0
 8009082:	f1a1 0404 	sub.w	r4, r1, #4
 8009086:	bfb8      	it	lt
 8009088:	18e4      	addlt	r4, r4, r3
 800908a:	f7ff fd53 	bl	8008b34 <__malloc_lock>
 800908e:	4a1e      	ldr	r2, [pc, #120]	; (8009108 <_free_r+0x94>)
 8009090:	9801      	ldr	r0, [sp, #4]
 8009092:	6813      	ldr	r3, [r2, #0]
 8009094:	b933      	cbnz	r3, 80090a4 <_free_r+0x30>
 8009096:	6063      	str	r3, [r4, #4]
 8009098:	6014      	str	r4, [r2, #0]
 800909a:	b003      	add	sp, #12
 800909c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80090a0:	f7ff bd4e 	b.w	8008b40 <__malloc_unlock>
 80090a4:	42a3      	cmp	r3, r4
 80090a6:	d908      	bls.n	80090ba <_free_r+0x46>
 80090a8:	6825      	ldr	r5, [r4, #0]
 80090aa:	1961      	adds	r1, r4, r5
 80090ac:	428b      	cmp	r3, r1
 80090ae:	bf01      	itttt	eq
 80090b0:	6819      	ldreq	r1, [r3, #0]
 80090b2:	685b      	ldreq	r3, [r3, #4]
 80090b4:	1949      	addeq	r1, r1, r5
 80090b6:	6021      	streq	r1, [r4, #0]
 80090b8:	e7ed      	b.n	8009096 <_free_r+0x22>
 80090ba:	461a      	mov	r2, r3
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	b10b      	cbz	r3, 80090c4 <_free_r+0x50>
 80090c0:	42a3      	cmp	r3, r4
 80090c2:	d9fa      	bls.n	80090ba <_free_r+0x46>
 80090c4:	6811      	ldr	r1, [r2, #0]
 80090c6:	1855      	adds	r5, r2, r1
 80090c8:	42a5      	cmp	r5, r4
 80090ca:	d10b      	bne.n	80090e4 <_free_r+0x70>
 80090cc:	6824      	ldr	r4, [r4, #0]
 80090ce:	4421      	add	r1, r4
 80090d0:	1854      	adds	r4, r2, r1
 80090d2:	42a3      	cmp	r3, r4
 80090d4:	6011      	str	r1, [r2, #0]
 80090d6:	d1e0      	bne.n	800909a <_free_r+0x26>
 80090d8:	681c      	ldr	r4, [r3, #0]
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	6053      	str	r3, [r2, #4]
 80090de:	440c      	add	r4, r1
 80090e0:	6014      	str	r4, [r2, #0]
 80090e2:	e7da      	b.n	800909a <_free_r+0x26>
 80090e4:	d902      	bls.n	80090ec <_free_r+0x78>
 80090e6:	230c      	movs	r3, #12
 80090e8:	6003      	str	r3, [r0, #0]
 80090ea:	e7d6      	b.n	800909a <_free_r+0x26>
 80090ec:	6825      	ldr	r5, [r4, #0]
 80090ee:	1961      	adds	r1, r4, r5
 80090f0:	428b      	cmp	r3, r1
 80090f2:	bf04      	itt	eq
 80090f4:	6819      	ldreq	r1, [r3, #0]
 80090f6:	685b      	ldreq	r3, [r3, #4]
 80090f8:	6063      	str	r3, [r4, #4]
 80090fa:	bf04      	itt	eq
 80090fc:	1949      	addeq	r1, r1, r5
 80090fe:	6021      	streq	r1, [r4, #0]
 8009100:	6054      	str	r4, [r2, #4]
 8009102:	e7ca      	b.n	800909a <_free_r+0x26>
 8009104:	b003      	add	sp, #12
 8009106:	bd30      	pop	{r4, r5, pc}
 8009108:	200011cc 	.word	0x200011cc

0800910c <__sfputc_r>:
 800910c:	6893      	ldr	r3, [r2, #8]
 800910e:	3b01      	subs	r3, #1
 8009110:	2b00      	cmp	r3, #0
 8009112:	b410      	push	{r4}
 8009114:	6093      	str	r3, [r2, #8]
 8009116:	da08      	bge.n	800912a <__sfputc_r+0x1e>
 8009118:	6994      	ldr	r4, [r2, #24]
 800911a:	42a3      	cmp	r3, r4
 800911c:	db01      	blt.n	8009122 <__sfputc_r+0x16>
 800911e:	290a      	cmp	r1, #10
 8009120:	d103      	bne.n	800912a <__sfputc_r+0x1e>
 8009122:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009126:	f7ff be84 	b.w	8008e32 <__swbuf_r>
 800912a:	6813      	ldr	r3, [r2, #0]
 800912c:	1c58      	adds	r0, r3, #1
 800912e:	6010      	str	r0, [r2, #0]
 8009130:	7019      	strb	r1, [r3, #0]
 8009132:	4608      	mov	r0, r1
 8009134:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009138:	4770      	bx	lr

0800913a <__sfputs_r>:
 800913a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800913c:	4606      	mov	r6, r0
 800913e:	460f      	mov	r7, r1
 8009140:	4614      	mov	r4, r2
 8009142:	18d5      	adds	r5, r2, r3
 8009144:	42ac      	cmp	r4, r5
 8009146:	d101      	bne.n	800914c <__sfputs_r+0x12>
 8009148:	2000      	movs	r0, #0
 800914a:	e007      	b.n	800915c <__sfputs_r+0x22>
 800914c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009150:	463a      	mov	r2, r7
 8009152:	4630      	mov	r0, r6
 8009154:	f7ff ffda 	bl	800910c <__sfputc_r>
 8009158:	1c43      	adds	r3, r0, #1
 800915a:	d1f3      	bne.n	8009144 <__sfputs_r+0xa>
 800915c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009160 <_vfiprintf_r>:
 8009160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009164:	460d      	mov	r5, r1
 8009166:	b09d      	sub	sp, #116	; 0x74
 8009168:	4614      	mov	r4, r2
 800916a:	4698      	mov	r8, r3
 800916c:	4606      	mov	r6, r0
 800916e:	b118      	cbz	r0, 8009178 <_vfiprintf_r+0x18>
 8009170:	6a03      	ldr	r3, [r0, #32]
 8009172:	b90b      	cbnz	r3, 8009178 <_vfiprintf_r+0x18>
 8009174:	f7ff fd76 	bl	8008c64 <__sinit>
 8009178:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800917a:	07d9      	lsls	r1, r3, #31
 800917c:	d405      	bmi.n	800918a <_vfiprintf_r+0x2a>
 800917e:	89ab      	ldrh	r3, [r5, #12]
 8009180:	059a      	lsls	r2, r3, #22
 8009182:	d402      	bmi.n	800918a <_vfiprintf_r+0x2a>
 8009184:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009186:	f7ff ff72 	bl	800906e <__retarget_lock_acquire_recursive>
 800918a:	89ab      	ldrh	r3, [r5, #12]
 800918c:	071b      	lsls	r3, r3, #28
 800918e:	d501      	bpl.n	8009194 <_vfiprintf_r+0x34>
 8009190:	692b      	ldr	r3, [r5, #16]
 8009192:	b99b      	cbnz	r3, 80091bc <_vfiprintf_r+0x5c>
 8009194:	4629      	mov	r1, r5
 8009196:	4630      	mov	r0, r6
 8009198:	f7ff fe88 	bl	8008eac <__swsetup_r>
 800919c:	b170      	cbz	r0, 80091bc <_vfiprintf_r+0x5c>
 800919e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091a0:	07dc      	lsls	r4, r3, #31
 80091a2:	d504      	bpl.n	80091ae <_vfiprintf_r+0x4e>
 80091a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091a8:	b01d      	add	sp, #116	; 0x74
 80091aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091ae:	89ab      	ldrh	r3, [r5, #12]
 80091b0:	0598      	lsls	r0, r3, #22
 80091b2:	d4f7      	bmi.n	80091a4 <_vfiprintf_r+0x44>
 80091b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091b6:	f7ff ff5b 	bl	8009070 <__retarget_lock_release_recursive>
 80091ba:	e7f3      	b.n	80091a4 <_vfiprintf_r+0x44>
 80091bc:	2300      	movs	r3, #0
 80091be:	9309      	str	r3, [sp, #36]	; 0x24
 80091c0:	2320      	movs	r3, #32
 80091c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80091c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80091ca:	2330      	movs	r3, #48	; 0x30
 80091cc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009380 <_vfiprintf_r+0x220>
 80091d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80091d4:	f04f 0901 	mov.w	r9, #1
 80091d8:	4623      	mov	r3, r4
 80091da:	469a      	mov	sl, r3
 80091dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091e0:	b10a      	cbz	r2, 80091e6 <_vfiprintf_r+0x86>
 80091e2:	2a25      	cmp	r2, #37	; 0x25
 80091e4:	d1f9      	bne.n	80091da <_vfiprintf_r+0x7a>
 80091e6:	ebba 0b04 	subs.w	fp, sl, r4
 80091ea:	d00b      	beq.n	8009204 <_vfiprintf_r+0xa4>
 80091ec:	465b      	mov	r3, fp
 80091ee:	4622      	mov	r2, r4
 80091f0:	4629      	mov	r1, r5
 80091f2:	4630      	mov	r0, r6
 80091f4:	f7ff ffa1 	bl	800913a <__sfputs_r>
 80091f8:	3001      	adds	r0, #1
 80091fa:	f000 80a9 	beq.w	8009350 <_vfiprintf_r+0x1f0>
 80091fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009200:	445a      	add	r2, fp
 8009202:	9209      	str	r2, [sp, #36]	; 0x24
 8009204:	f89a 3000 	ldrb.w	r3, [sl]
 8009208:	2b00      	cmp	r3, #0
 800920a:	f000 80a1 	beq.w	8009350 <_vfiprintf_r+0x1f0>
 800920e:	2300      	movs	r3, #0
 8009210:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009214:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009218:	f10a 0a01 	add.w	sl, sl, #1
 800921c:	9304      	str	r3, [sp, #16]
 800921e:	9307      	str	r3, [sp, #28]
 8009220:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009224:	931a      	str	r3, [sp, #104]	; 0x68
 8009226:	4654      	mov	r4, sl
 8009228:	2205      	movs	r2, #5
 800922a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800922e:	4854      	ldr	r0, [pc, #336]	; (8009380 <_vfiprintf_r+0x220>)
 8009230:	f7f6 ffe6 	bl	8000200 <memchr>
 8009234:	9a04      	ldr	r2, [sp, #16]
 8009236:	b9d8      	cbnz	r0, 8009270 <_vfiprintf_r+0x110>
 8009238:	06d1      	lsls	r1, r2, #27
 800923a:	bf44      	itt	mi
 800923c:	2320      	movmi	r3, #32
 800923e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009242:	0713      	lsls	r3, r2, #28
 8009244:	bf44      	itt	mi
 8009246:	232b      	movmi	r3, #43	; 0x2b
 8009248:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800924c:	f89a 3000 	ldrb.w	r3, [sl]
 8009250:	2b2a      	cmp	r3, #42	; 0x2a
 8009252:	d015      	beq.n	8009280 <_vfiprintf_r+0x120>
 8009254:	9a07      	ldr	r2, [sp, #28]
 8009256:	4654      	mov	r4, sl
 8009258:	2000      	movs	r0, #0
 800925a:	f04f 0c0a 	mov.w	ip, #10
 800925e:	4621      	mov	r1, r4
 8009260:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009264:	3b30      	subs	r3, #48	; 0x30
 8009266:	2b09      	cmp	r3, #9
 8009268:	d94d      	bls.n	8009306 <_vfiprintf_r+0x1a6>
 800926a:	b1b0      	cbz	r0, 800929a <_vfiprintf_r+0x13a>
 800926c:	9207      	str	r2, [sp, #28]
 800926e:	e014      	b.n	800929a <_vfiprintf_r+0x13a>
 8009270:	eba0 0308 	sub.w	r3, r0, r8
 8009274:	fa09 f303 	lsl.w	r3, r9, r3
 8009278:	4313      	orrs	r3, r2
 800927a:	9304      	str	r3, [sp, #16]
 800927c:	46a2      	mov	sl, r4
 800927e:	e7d2      	b.n	8009226 <_vfiprintf_r+0xc6>
 8009280:	9b03      	ldr	r3, [sp, #12]
 8009282:	1d19      	adds	r1, r3, #4
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	9103      	str	r1, [sp, #12]
 8009288:	2b00      	cmp	r3, #0
 800928a:	bfbb      	ittet	lt
 800928c:	425b      	neglt	r3, r3
 800928e:	f042 0202 	orrlt.w	r2, r2, #2
 8009292:	9307      	strge	r3, [sp, #28]
 8009294:	9307      	strlt	r3, [sp, #28]
 8009296:	bfb8      	it	lt
 8009298:	9204      	strlt	r2, [sp, #16]
 800929a:	7823      	ldrb	r3, [r4, #0]
 800929c:	2b2e      	cmp	r3, #46	; 0x2e
 800929e:	d10c      	bne.n	80092ba <_vfiprintf_r+0x15a>
 80092a0:	7863      	ldrb	r3, [r4, #1]
 80092a2:	2b2a      	cmp	r3, #42	; 0x2a
 80092a4:	d134      	bne.n	8009310 <_vfiprintf_r+0x1b0>
 80092a6:	9b03      	ldr	r3, [sp, #12]
 80092a8:	1d1a      	adds	r2, r3, #4
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	9203      	str	r2, [sp, #12]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	bfb8      	it	lt
 80092b2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80092b6:	3402      	adds	r4, #2
 80092b8:	9305      	str	r3, [sp, #20]
 80092ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009390 <_vfiprintf_r+0x230>
 80092be:	7821      	ldrb	r1, [r4, #0]
 80092c0:	2203      	movs	r2, #3
 80092c2:	4650      	mov	r0, sl
 80092c4:	f7f6 ff9c 	bl	8000200 <memchr>
 80092c8:	b138      	cbz	r0, 80092da <_vfiprintf_r+0x17a>
 80092ca:	9b04      	ldr	r3, [sp, #16]
 80092cc:	eba0 000a 	sub.w	r0, r0, sl
 80092d0:	2240      	movs	r2, #64	; 0x40
 80092d2:	4082      	lsls	r2, r0
 80092d4:	4313      	orrs	r3, r2
 80092d6:	3401      	adds	r4, #1
 80092d8:	9304      	str	r3, [sp, #16]
 80092da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092de:	4829      	ldr	r0, [pc, #164]	; (8009384 <_vfiprintf_r+0x224>)
 80092e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80092e4:	2206      	movs	r2, #6
 80092e6:	f7f6 ff8b 	bl	8000200 <memchr>
 80092ea:	2800      	cmp	r0, #0
 80092ec:	d03f      	beq.n	800936e <_vfiprintf_r+0x20e>
 80092ee:	4b26      	ldr	r3, [pc, #152]	; (8009388 <_vfiprintf_r+0x228>)
 80092f0:	bb1b      	cbnz	r3, 800933a <_vfiprintf_r+0x1da>
 80092f2:	9b03      	ldr	r3, [sp, #12]
 80092f4:	3307      	adds	r3, #7
 80092f6:	f023 0307 	bic.w	r3, r3, #7
 80092fa:	3308      	adds	r3, #8
 80092fc:	9303      	str	r3, [sp, #12]
 80092fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009300:	443b      	add	r3, r7
 8009302:	9309      	str	r3, [sp, #36]	; 0x24
 8009304:	e768      	b.n	80091d8 <_vfiprintf_r+0x78>
 8009306:	fb0c 3202 	mla	r2, ip, r2, r3
 800930a:	460c      	mov	r4, r1
 800930c:	2001      	movs	r0, #1
 800930e:	e7a6      	b.n	800925e <_vfiprintf_r+0xfe>
 8009310:	2300      	movs	r3, #0
 8009312:	3401      	adds	r4, #1
 8009314:	9305      	str	r3, [sp, #20]
 8009316:	4619      	mov	r1, r3
 8009318:	f04f 0c0a 	mov.w	ip, #10
 800931c:	4620      	mov	r0, r4
 800931e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009322:	3a30      	subs	r2, #48	; 0x30
 8009324:	2a09      	cmp	r2, #9
 8009326:	d903      	bls.n	8009330 <_vfiprintf_r+0x1d0>
 8009328:	2b00      	cmp	r3, #0
 800932a:	d0c6      	beq.n	80092ba <_vfiprintf_r+0x15a>
 800932c:	9105      	str	r1, [sp, #20]
 800932e:	e7c4      	b.n	80092ba <_vfiprintf_r+0x15a>
 8009330:	fb0c 2101 	mla	r1, ip, r1, r2
 8009334:	4604      	mov	r4, r0
 8009336:	2301      	movs	r3, #1
 8009338:	e7f0      	b.n	800931c <_vfiprintf_r+0x1bc>
 800933a:	ab03      	add	r3, sp, #12
 800933c:	9300      	str	r3, [sp, #0]
 800933e:	462a      	mov	r2, r5
 8009340:	4b12      	ldr	r3, [pc, #72]	; (800938c <_vfiprintf_r+0x22c>)
 8009342:	a904      	add	r1, sp, #16
 8009344:	4630      	mov	r0, r6
 8009346:	f3af 8000 	nop.w
 800934a:	4607      	mov	r7, r0
 800934c:	1c78      	adds	r0, r7, #1
 800934e:	d1d6      	bne.n	80092fe <_vfiprintf_r+0x19e>
 8009350:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009352:	07d9      	lsls	r1, r3, #31
 8009354:	d405      	bmi.n	8009362 <_vfiprintf_r+0x202>
 8009356:	89ab      	ldrh	r3, [r5, #12]
 8009358:	059a      	lsls	r2, r3, #22
 800935a:	d402      	bmi.n	8009362 <_vfiprintf_r+0x202>
 800935c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800935e:	f7ff fe87 	bl	8009070 <__retarget_lock_release_recursive>
 8009362:	89ab      	ldrh	r3, [r5, #12]
 8009364:	065b      	lsls	r3, r3, #25
 8009366:	f53f af1d 	bmi.w	80091a4 <_vfiprintf_r+0x44>
 800936a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800936c:	e71c      	b.n	80091a8 <_vfiprintf_r+0x48>
 800936e:	ab03      	add	r3, sp, #12
 8009370:	9300      	str	r3, [sp, #0]
 8009372:	462a      	mov	r2, r5
 8009374:	4b05      	ldr	r3, [pc, #20]	; (800938c <_vfiprintf_r+0x22c>)
 8009376:	a904      	add	r1, sp, #16
 8009378:	4630      	mov	r0, r6
 800937a:	f000 f879 	bl	8009470 <_printf_i>
 800937e:	e7e4      	b.n	800934a <_vfiprintf_r+0x1ea>
 8009380:	08020e40 	.word	0x08020e40
 8009384:	08020e4a 	.word	0x08020e4a
 8009388:	00000000 	.word	0x00000000
 800938c:	0800913b 	.word	0x0800913b
 8009390:	08020e46 	.word	0x08020e46

08009394 <_printf_common>:
 8009394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009398:	4616      	mov	r6, r2
 800939a:	4699      	mov	r9, r3
 800939c:	688a      	ldr	r2, [r1, #8]
 800939e:	690b      	ldr	r3, [r1, #16]
 80093a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80093a4:	4293      	cmp	r3, r2
 80093a6:	bfb8      	it	lt
 80093a8:	4613      	movlt	r3, r2
 80093aa:	6033      	str	r3, [r6, #0]
 80093ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80093b0:	4607      	mov	r7, r0
 80093b2:	460c      	mov	r4, r1
 80093b4:	b10a      	cbz	r2, 80093ba <_printf_common+0x26>
 80093b6:	3301      	adds	r3, #1
 80093b8:	6033      	str	r3, [r6, #0]
 80093ba:	6823      	ldr	r3, [r4, #0]
 80093bc:	0699      	lsls	r1, r3, #26
 80093be:	bf42      	ittt	mi
 80093c0:	6833      	ldrmi	r3, [r6, #0]
 80093c2:	3302      	addmi	r3, #2
 80093c4:	6033      	strmi	r3, [r6, #0]
 80093c6:	6825      	ldr	r5, [r4, #0]
 80093c8:	f015 0506 	ands.w	r5, r5, #6
 80093cc:	d106      	bne.n	80093dc <_printf_common+0x48>
 80093ce:	f104 0a19 	add.w	sl, r4, #25
 80093d2:	68e3      	ldr	r3, [r4, #12]
 80093d4:	6832      	ldr	r2, [r6, #0]
 80093d6:	1a9b      	subs	r3, r3, r2
 80093d8:	42ab      	cmp	r3, r5
 80093da:	dc26      	bgt.n	800942a <_printf_common+0x96>
 80093dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80093e0:	1e13      	subs	r3, r2, #0
 80093e2:	6822      	ldr	r2, [r4, #0]
 80093e4:	bf18      	it	ne
 80093e6:	2301      	movne	r3, #1
 80093e8:	0692      	lsls	r2, r2, #26
 80093ea:	d42b      	bmi.n	8009444 <_printf_common+0xb0>
 80093ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80093f0:	4649      	mov	r1, r9
 80093f2:	4638      	mov	r0, r7
 80093f4:	47c0      	blx	r8
 80093f6:	3001      	adds	r0, #1
 80093f8:	d01e      	beq.n	8009438 <_printf_common+0xa4>
 80093fa:	6823      	ldr	r3, [r4, #0]
 80093fc:	6922      	ldr	r2, [r4, #16]
 80093fe:	f003 0306 	and.w	r3, r3, #6
 8009402:	2b04      	cmp	r3, #4
 8009404:	bf02      	ittt	eq
 8009406:	68e5      	ldreq	r5, [r4, #12]
 8009408:	6833      	ldreq	r3, [r6, #0]
 800940a:	1aed      	subeq	r5, r5, r3
 800940c:	68a3      	ldr	r3, [r4, #8]
 800940e:	bf0c      	ite	eq
 8009410:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009414:	2500      	movne	r5, #0
 8009416:	4293      	cmp	r3, r2
 8009418:	bfc4      	itt	gt
 800941a:	1a9b      	subgt	r3, r3, r2
 800941c:	18ed      	addgt	r5, r5, r3
 800941e:	2600      	movs	r6, #0
 8009420:	341a      	adds	r4, #26
 8009422:	42b5      	cmp	r5, r6
 8009424:	d11a      	bne.n	800945c <_printf_common+0xc8>
 8009426:	2000      	movs	r0, #0
 8009428:	e008      	b.n	800943c <_printf_common+0xa8>
 800942a:	2301      	movs	r3, #1
 800942c:	4652      	mov	r2, sl
 800942e:	4649      	mov	r1, r9
 8009430:	4638      	mov	r0, r7
 8009432:	47c0      	blx	r8
 8009434:	3001      	adds	r0, #1
 8009436:	d103      	bne.n	8009440 <_printf_common+0xac>
 8009438:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800943c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009440:	3501      	adds	r5, #1
 8009442:	e7c6      	b.n	80093d2 <_printf_common+0x3e>
 8009444:	18e1      	adds	r1, r4, r3
 8009446:	1c5a      	adds	r2, r3, #1
 8009448:	2030      	movs	r0, #48	; 0x30
 800944a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800944e:	4422      	add	r2, r4
 8009450:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009454:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009458:	3302      	adds	r3, #2
 800945a:	e7c7      	b.n	80093ec <_printf_common+0x58>
 800945c:	2301      	movs	r3, #1
 800945e:	4622      	mov	r2, r4
 8009460:	4649      	mov	r1, r9
 8009462:	4638      	mov	r0, r7
 8009464:	47c0      	blx	r8
 8009466:	3001      	adds	r0, #1
 8009468:	d0e6      	beq.n	8009438 <_printf_common+0xa4>
 800946a:	3601      	adds	r6, #1
 800946c:	e7d9      	b.n	8009422 <_printf_common+0x8e>
	...

08009470 <_printf_i>:
 8009470:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009474:	7e0f      	ldrb	r7, [r1, #24]
 8009476:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009478:	2f78      	cmp	r7, #120	; 0x78
 800947a:	4691      	mov	r9, r2
 800947c:	4680      	mov	r8, r0
 800947e:	460c      	mov	r4, r1
 8009480:	469a      	mov	sl, r3
 8009482:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009486:	d807      	bhi.n	8009498 <_printf_i+0x28>
 8009488:	2f62      	cmp	r7, #98	; 0x62
 800948a:	d80a      	bhi.n	80094a2 <_printf_i+0x32>
 800948c:	2f00      	cmp	r7, #0
 800948e:	f000 80d4 	beq.w	800963a <_printf_i+0x1ca>
 8009492:	2f58      	cmp	r7, #88	; 0x58
 8009494:	f000 80c0 	beq.w	8009618 <_printf_i+0x1a8>
 8009498:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800949c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80094a0:	e03a      	b.n	8009518 <_printf_i+0xa8>
 80094a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80094a6:	2b15      	cmp	r3, #21
 80094a8:	d8f6      	bhi.n	8009498 <_printf_i+0x28>
 80094aa:	a101      	add	r1, pc, #4	; (adr r1, 80094b0 <_printf_i+0x40>)
 80094ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80094b0:	08009509 	.word	0x08009509
 80094b4:	0800951d 	.word	0x0800951d
 80094b8:	08009499 	.word	0x08009499
 80094bc:	08009499 	.word	0x08009499
 80094c0:	08009499 	.word	0x08009499
 80094c4:	08009499 	.word	0x08009499
 80094c8:	0800951d 	.word	0x0800951d
 80094cc:	08009499 	.word	0x08009499
 80094d0:	08009499 	.word	0x08009499
 80094d4:	08009499 	.word	0x08009499
 80094d8:	08009499 	.word	0x08009499
 80094dc:	08009621 	.word	0x08009621
 80094e0:	08009549 	.word	0x08009549
 80094e4:	080095db 	.word	0x080095db
 80094e8:	08009499 	.word	0x08009499
 80094ec:	08009499 	.word	0x08009499
 80094f0:	08009643 	.word	0x08009643
 80094f4:	08009499 	.word	0x08009499
 80094f8:	08009549 	.word	0x08009549
 80094fc:	08009499 	.word	0x08009499
 8009500:	08009499 	.word	0x08009499
 8009504:	080095e3 	.word	0x080095e3
 8009508:	682b      	ldr	r3, [r5, #0]
 800950a:	1d1a      	adds	r2, r3, #4
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	602a      	str	r2, [r5, #0]
 8009510:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009514:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009518:	2301      	movs	r3, #1
 800951a:	e09f      	b.n	800965c <_printf_i+0x1ec>
 800951c:	6820      	ldr	r0, [r4, #0]
 800951e:	682b      	ldr	r3, [r5, #0]
 8009520:	0607      	lsls	r7, r0, #24
 8009522:	f103 0104 	add.w	r1, r3, #4
 8009526:	6029      	str	r1, [r5, #0]
 8009528:	d501      	bpl.n	800952e <_printf_i+0xbe>
 800952a:	681e      	ldr	r6, [r3, #0]
 800952c:	e003      	b.n	8009536 <_printf_i+0xc6>
 800952e:	0646      	lsls	r6, r0, #25
 8009530:	d5fb      	bpl.n	800952a <_printf_i+0xba>
 8009532:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009536:	2e00      	cmp	r6, #0
 8009538:	da03      	bge.n	8009542 <_printf_i+0xd2>
 800953a:	232d      	movs	r3, #45	; 0x2d
 800953c:	4276      	negs	r6, r6
 800953e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009542:	485a      	ldr	r0, [pc, #360]	; (80096ac <_printf_i+0x23c>)
 8009544:	230a      	movs	r3, #10
 8009546:	e012      	b.n	800956e <_printf_i+0xfe>
 8009548:	682b      	ldr	r3, [r5, #0]
 800954a:	6820      	ldr	r0, [r4, #0]
 800954c:	1d19      	adds	r1, r3, #4
 800954e:	6029      	str	r1, [r5, #0]
 8009550:	0605      	lsls	r5, r0, #24
 8009552:	d501      	bpl.n	8009558 <_printf_i+0xe8>
 8009554:	681e      	ldr	r6, [r3, #0]
 8009556:	e002      	b.n	800955e <_printf_i+0xee>
 8009558:	0641      	lsls	r1, r0, #25
 800955a:	d5fb      	bpl.n	8009554 <_printf_i+0xe4>
 800955c:	881e      	ldrh	r6, [r3, #0]
 800955e:	4853      	ldr	r0, [pc, #332]	; (80096ac <_printf_i+0x23c>)
 8009560:	2f6f      	cmp	r7, #111	; 0x6f
 8009562:	bf0c      	ite	eq
 8009564:	2308      	moveq	r3, #8
 8009566:	230a      	movne	r3, #10
 8009568:	2100      	movs	r1, #0
 800956a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800956e:	6865      	ldr	r5, [r4, #4]
 8009570:	60a5      	str	r5, [r4, #8]
 8009572:	2d00      	cmp	r5, #0
 8009574:	bfa2      	ittt	ge
 8009576:	6821      	ldrge	r1, [r4, #0]
 8009578:	f021 0104 	bicge.w	r1, r1, #4
 800957c:	6021      	strge	r1, [r4, #0]
 800957e:	b90e      	cbnz	r6, 8009584 <_printf_i+0x114>
 8009580:	2d00      	cmp	r5, #0
 8009582:	d04b      	beq.n	800961c <_printf_i+0x1ac>
 8009584:	4615      	mov	r5, r2
 8009586:	fbb6 f1f3 	udiv	r1, r6, r3
 800958a:	fb03 6711 	mls	r7, r3, r1, r6
 800958e:	5dc7      	ldrb	r7, [r0, r7]
 8009590:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009594:	4637      	mov	r7, r6
 8009596:	42bb      	cmp	r3, r7
 8009598:	460e      	mov	r6, r1
 800959a:	d9f4      	bls.n	8009586 <_printf_i+0x116>
 800959c:	2b08      	cmp	r3, #8
 800959e:	d10b      	bne.n	80095b8 <_printf_i+0x148>
 80095a0:	6823      	ldr	r3, [r4, #0]
 80095a2:	07de      	lsls	r6, r3, #31
 80095a4:	d508      	bpl.n	80095b8 <_printf_i+0x148>
 80095a6:	6923      	ldr	r3, [r4, #16]
 80095a8:	6861      	ldr	r1, [r4, #4]
 80095aa:	4299      	cmp	r1, r3
 80095ac:	bfde      	ittt	le
 80095ae:	2330      	movle	r3, #48	; 0x30
 80095b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80095b4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80095b8:	1b52      	subs	r2, r2, r5
 80095ba:	6122      	str	r2, [r4, #16]
 80095bc:	f8cd a000 	str.w	sl, [sp]
 80095c0:	464b      	mov	r3, r9
 80095c2:	aa03      	add	r2, sp, #12
 80095c4:	4621      	mov	r1, r4
 80095c6:	4640      	mov	r0, r8
 80095c8:	f7ff fee4 	bl	8009394 <_printf_common>
 80095cc:	3001      	adds	r0, #1
 80095ce:	d14a      	bne.n	8009666 <_printf_i+0x1f6>
 80095d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095d4:	b004      	add	sp, #16
 80095d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095da:	6823      	ldr	r3, [r4, #0]
 80095dc:	f043 0320 	orr.w	r3, r3, #32
 80095e0:	6023      	str	r3, [r4, #0]
 80095e2:	4833      	ldr	r0, [pc, #204]	; (80096b0 <_printf_i+0x240>)
 80095e4:	2778      	movs	r7, #120	; 0x78
 80095e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80095ea:	6823      	ldr	r3, [r4, #0]
 80095ec:	6829      	ldr	r1, [r5, #0]
 80095ee:	061f      	lsls	r7, r3, #24
 80095f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80095f4:	d402      	bmi.n	80095fc <_printf_i+0x18c>
 80095f6:	065f      	lsls	r7, r3, #25
 80095f8:	bf48      	it	mi
 80095fa:	b2b6      	uxthmi	r6, r6
 80095fc:	07df      	lsls	r7, r3, #31
 80095fe:	bf48      	it	mi
 8009600:	f043 0320 	orrmi.w	r3, r3, #32
 8009604:	6029      	str	r1, [r5, #0]
 8009606:	bf48      	it	mi
 8009608:	6023      	strmi	r3, [r4, #0]
 800960a:	b91e      	cbnz	r6, 8009614 <_printf_i+0x1a4>
 800960c:	6823      	ldr	r3, [r4, #0]
 800960e:	f023 0320 	bic.w	r3, r3, #32
 8009612:	6023      	str	r3, [r4, #0]
 8009614:	2310      	movs	r3, #16
 8009616:	e7a7      	b.n	8009568 <_printf_i+0xf8>
 8009618:	4824      	ldr	r0, [pc, #144]	; (80096ac <_printf_i+0x23c>)
 800961a:	e7e4      	b.n	80095e6 <_printf_i+0x176>
 800961c:	4615      	mov	r5, r2
 800961e:	e7bd      	b.n	800959c <_printf_i+0x12c>
 8009620:	682b      	ldr	r3, [r5, #0]
 8009622:	6826      	ldr	r6, [r4, #0]
 8009624:	6961      	ldr	r1, [r4, #20]
 8009626:	1d18      	adds	r0, r3, #4
 8009628:	6028      	str	r0, [r5, #0]
 800962a:	0635      	lsls	r5, r6, #24
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	d501      	bpl.n	8009634 <_printf_i+0x1c4>
 8009630:	6019      	str	r1, [r3, #0]
 8009632:	e002      	b.n	800963a <_printf_i+0x1ca>
 8009634:	0670      	lsls	r0, r6, #25
 8009636:	d5fb      	bpl.n	8009630 <_printf_i+0x1c0>
 8009638:	8019      	strh	r1, [r3, #0]
 800963a:	2300      	movs	r3, #0
 800963c:	6123      	str	r3, [r4, #16]
 800963e:	4615      	mov	r5, r2
 8009640:	e7bc      	b.n	80095bc <_printf_i+0x14c>
 8009642:	682b      	ldr	r3, [r5, #0]
 8009644:	1d1a      	adds	r2, r3, #4
 8009646:	602a      	str	r2, [r5, #0]
 8009648:	681d      	ldr	r5, [r3, #0]
 800964a:	6862      	ldr	r2, [r4, #4]
 800964c:	2100      	movs	r1, #0
 800964e:	4628      	mov	r0, r5
 8009650:	f7f6 fdd6 	bl	8000200 <memchr>
 8009654:	b108      	cbz	r0, 800965a <_printf_i+0x1ea>
 8009656:	1b40      	subs	r0, r0, r5
 8009658:	6060      	str	r0, [r4, #4]
 800965a:	6863      	ldr	r3, [r4, #4]
 800965c:	6123      	str	r3, [r4, #16]
 800965e:	2300      	movs	r3, #0
 8009660:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009664:	e7aa      	b.n	80095bc <_printf_i+0x14c>
 8009666:	6923      	ldr	r3, [r4, #16]
 8009668:	462a      	mov	r2, r5
 800966a:	4649      	mov	r1, r9
 800966c:	4640      	mov	r0, r8
 800966e:	47d0      	blx	sl
 8009670:	3001      	adds	r0, #1
 8009672:	d0ad      	beq.n	80095d0 <_printf_i+0x160>
 8009674:	6823      	ldr	r3, [r4, #0]
 8009676:	079b      	lsls	r3, r3, #30
 8009678:	d413      	bmi.n	80096a2 <_printf_i+0x232>
 800967a:	68e0      	ldr	r0, [r4, #12]
 800967c:	9b03      	ldr	r3, [sp, #12]
 800967e:	4298      	cmp	r0, r3
 8009680:	bfb8      	it	lt
 8009682:	4618      	movlt	r0, r3
 8009684:	e7a6      	b.n	80095d4 <_printf_i+0x164>
 8009686:	2301      	movs	r3, #1
 8009688:	4632      	mov	r2, r6
 800968a:	4649      	mov	r1, r9
 800968c:	4640      	mov	r0, r8
 800968e:	47d0      	blx	sl
 8009690:	3001      	adds	r0, #1
 8009692:	d09d      	beq.n	80095d0 <_printf_i+0x160>
 8009694:	3501      	adds	r5, #1
 8009696:	68e3      	ldr	r3, [r4, #12]
 8009698:	9903      	ldr	r1, [sp, #12]
 800969a:	1a5b      	subs	r3, r3, r1
 800969c:	42ab      	cmp	r3, r5
 800969e:	dcf2      	bgt.n	8009686 <_printf_i+0x216>
 80096a0:	e7eb      	b.n	800967a <_printf_i+0x20a>
 80096a2:	2500      	movs	r5, #0
 80096a4:	f104 0619 	add.w	r6, r4, #25
 80096a8:	e7f5      	b.n	8009696 <_printf_i+0x226>
 80096aa:	bf00      	nop
 80096ac:	08020e51 	.word	0x08020e51
 80096b0:	08020e62 	.word	0x08020e62

080096b4 <__sflush_r>:
 80096b4:	898a      	ldrh	r2, [r1, #12]
 80096b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096ba:	4605      	mov	r5, r0
 80096bc:	0710      	lsls	r0, r2, #28
 80096be:	460c      	mov	r4, r1
 80096c0:	d458      	bmi.n	8009774 <__sflush_r+0xc0>
 80096c2:	684b      	ldr	r3, [r1, #4]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	dc05      	bgt.n	80096d4 <__sflush_r+0x20>
 80096c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	dc02      	bgt.n	80096d4 <__sflush_r+0x20>
 80096ce:	2000      	movs	r0, #0
 80096d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80096d6:	2e00      	cmp	r6, #0
 80096d8:	d0f9      	beq.n	80096ce <__sflush_r+0x1a>
 80096da:	2300      	movs	r3, #0
 80096dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80096e0:	682f      	ldr	r7, [r5, #0]
 80096e2:	6a21      	ldr	r1, [r4, #32]
 80096e4:	602b      	str	r3, [r5, #0]
 80096e6:	d032      	beq.n	800974e <__sflush_r+0x9a>
 80096e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80096ea:	89a3      	ldrh	r3, [r4, #12]
 80096ec:	075a      	lsls	r2, r3, #29
 80096ee:	d505      	bpl.n	80096fc <__sflush_r+0x48>
 80096f0:	6863      	ldr	r3, [r4, #4]
 80096f2:	1ac0      	subs	r0, r0, r3
 80096f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80096f6:	b10b      	cbz	r3, 80096fc <__sflush_r+0x48>
 80096f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80096fa:	1ac0      	subs	r0, r0, r3
 80096fc:	2300      	movs	r3, #0
 80096fe:	4602      	mov	r2, r0
 8009700:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009702:	6a21      	ldr	r1, [r4, #32]
 8009704:	4628      	mov	r0, r5
 8009706:	47b0      	blx	r6
 8009708:	1c43      	adds	r3, r0, #1
 800970a:	89a3      	ldrh	r3, [r4, #12]
 800970c:	d106      	bne.n	800971c <__sflush_r+0x68>
 800970e:	6829      	ldr	r1, [r5, #0]
 8009710:	291d      	cmp	r1, #29
 8009712:	d82b      	bhi.n	800976c <__sflush_r+0xb8>
 8009714:	4a29      	ldr	r2, [pc, #164]	; (80097bc <__sflush_r+0x108>)
 8009716:	410a      	asrs	r2, r1
 8009718:	07d6      	lsls	r6, r2, #31
 800971a:	d427      	bmi.n	800976c <__sflush_r+0xb8>
 800971c:	2200      	movs	r2, #0
 800971e:	6062      	str	r2, [r4, #4]
 8009720:	04d9      	lsls	r1, r3, #19
 8009722:	6922      	ldr	r2, [r4, #16]
 8009724:	6022      	str	r2, [r4, #0]
 8009726:	d504      	bpl.n	8009732 <__sflush_r+0x7e>
 8009728:	1c42      	adds	r2, r0, #1
 800972a:	d101      	bne.n	8009730 <__sflush_r+0x7c>
 800972c:	682b      	ldr	r3, [r5, #0]
 800972e:	b903      	cbnz	r3, 8009732 <__sflush_r+0x7e>
 8009730:	6560      	str	r0, [r4, #84]	; 0x54
 8009732:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009734:	602f      	str	r7, [r5, #0]
 8009736:	2900      	cmp	r1, #0
 8009738:	d0c9      	beq.n	80096ce <__sflush_r+0x1a>
 800973a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800973e:	4299      	cmp	r1, r3
 8009740:	d002      	beq.n	8009748 <__sflush_r+0x94>
 8009742:	4628      	mov	r0, r5
 8009744:	f7ff fc96 	bl	8009074 <_free_r>
 8009748:	2000      	movs	r0, #0
 800974a:	6360      	str	r0, [r4, #52]	; 0x34
 800974c:	e7c0      	b.n	80096d0 <__sflush_r+0x1c>
 800974e:	2301      	movs	r3, #1
 8009750:	4628      	mov	r0, r5
 8009752:	47b0      	blx	r6
 8009754:	1c41      	adds	r1, r0, #1
 8009756:	d1c8      	bne.n	80096ea <__sflush_r+0x36>
 8009758:	682b      	ldr	r3, [r5, #0]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d0c5      	beq.n	80096ea <__sflush_r+0x36>
 800975e:	2b1d      	cmp	r3, #29
 8009760:	d001      	beq.n	8009766 <__sflush_r+0xb2>
 8009762:	2b16      	cmp	r3, #22
 8009764:	d101      	bne.n	800976a <__sflush_r+0xb6>
 8009766:	602f      	str	r7, [r5, #0]
 8009768:	e7b1      	b.n	80096ce <__sflush_r+0x1a>
 800976a:	89a3      	ldrh	r3, [r4, #12]
 800976c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009770:	81a3      	strh	r3, [r4, #12]
 8009772:	e7ad      	b.n	80096d0 <__sflush_r+0x1c>
 8009774:	690f      	ldr	r7, [r1, #16]
 8009776:	2f00      	cmp	r7, #0
 8009778:	d0a9      	beq.n	80096ce <__sflush_r+0x1a>
 800977a:	0793      	lsls	r3, r2, #30
 800977c:	680e      	ldr	r6, [r1, #0]
 800977e:	bf08      	it	eq
 8009780:	694b      	ldreq	r3, [r1, #20]
 8009782:	600f      	str	r7, [r1, #0]
 8009784:	bf18      	it	ne
 8009786:	2300      	movne	r3, #0
 8009788:	eba6 0807 	sub.w	r8, r6, r7
 800978c:	608b      	str	r3, [r1, #8]
 800978e:	f1b8 0f00 	cmp.w	r8, #0
 8009792:	dd9c      	ble.n	80096ce <__sflush_r+0x1a>
 8009794:	6a21      	ldr	r1, [r4, #32]
 8009796:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009798:	4643      	mov	r3, r8
 800979a:	463a      	mov	r2, r7
 800979c:	4628      	mov	r0, r5
 800979e:	47b0      	blx	r6
 80097a0:	2800      	cmp	r0, #0
 80097a2:	dc06      	bgt.n	80097b2 <__sflush_r+0xfe>
 80097a4:	89a3      	ldrh	r3, [r4, #12]
 80097a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097aa:	81a3      	strh	r3, [r4, #12]
 80097ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097b0:	e78e      	b.n	80096d0 <__sflush_r+0x1c>
 80097b2:	4407      	add	r7, r0
 80097b4:	eba8 0800 	sub.w	r8, r8, r0
 80097b8:	e7e9      	b.n	800978e <__sflush_r+0xda>
 80097ba:	bf00      	nop
 80097bc:	dfbffffe 	.word	0xdfbffffe

080097c0 <_fflush_r>:
 80097c0:	b538      	push	{r3, r4, r5, lr}
 80097c2:	690b      	ldr	r3, [r1, #16]
 80097c4:	4605      	mov	r5, r0
 80097c6:	460c      	mov	r4, r1
 80097c8:	b913      	cbnz	r3, 80097d0 <_fflush_r+0x10>
 80097ca:	2500      	movs	r5, #0
 80097cc:	4628      	mov	r0, r5
 80097ce:	bd38      	pop	{r3, r4, r5, pc}
 80097d0:	b118      	cbz	r0, 80097da <_fflush_r+0x1a>
 80097d2:	6a03      	ldr	r3, [r0, #32]
 80097d4:	b90b      	cbnz	r3, 80097da <_fflush_r+0x1a>
 80097d6:	f7ff fa45 	bl	8008c64 <__sinit>
 80097da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d0f3      	beq.n	80097ca <_fflush_r+0xa>
 80097e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80097e4:	07d0      	lsls	r0, r2, #31
 80097e6:	d404      	bmi.n	80097f2 <_fflush_r+0x32>
 80097e8:	0599      	lsls	r1, r3, #22
 80097ea:	d402      	bmi.n	80097f2 <_fflush_r+0x32>
 80097ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097ee:	f7ff fc3e 	bl	800906e <__retarget_lock_acquire_recursive>
 80097f2:	4628      	mov	r0, r5
 80097f4:	4621      	mov	r1, r4
 80097f6:	f7ff ff5d 	bl	80096b4 <__sflush_r>
 80097fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097fc:	07da      	lsls	r2, r3, #31
 80097fe:	4605      	mov	r5, r0
 8009800:	d4e4      	bmi.n	80097cc <_fflush_r+0xc>
 8009802:	89a3      	ldrh	r3, [r4, #12]
 8009804:	059b      	lsls	r3, r3, #22
 8009806:	d4e1      	bmi.n	80097cc <_fflush_r+0xc>
 8009808:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800980a:	f7ff fc31 	bl	8009070 <__retarget_lock_release_recursive>
 800980e:	e7dd      	b.n	80097cc <_fflush_r+0xc>

08009810 <__swhatbuf_r>:
 8009810:	b570      	push	{r4, r5, r6, lr}
 8009812:	460c      	mov	r4, r1
 8009814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009818:	2900      	cmp	r1, #0
 800981a:	b096      	sub	sp, #88	; 0x58
 800981c:	4615      	mov	r5, r2
 800981e:	461e      	mov	r6, r3
 8009820:	da0d      	bge.n	800983e <__swhatbuf_r+0x2e>
 8009822:	89a3      	ldrh	r3, [r4, #12]
 8009824:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009828:	f04f 0100 	mov.w	r1, #0
 800982c:	bf0c      	ite	eq
 800982e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009832:	2340      	movne	r3, #64	; 0x40
 8009834:	2000      	movs	r0, #0
 8009836:	6031      	str	r1, [r6, #0]
 8009838:	602b      	str	r3, [r5, #0]
 800983a:	b016      	add	sp, #88	; 0x58
 800983c:	bd70      	pop	{r4, r5, r6, pc}
 800983e:	466a      	mov	r2, sp
 8009840:	f000 f848 	bl	80098d4 <_fstat_r>
 8009844:	2800      	cmp	r0, #0
 8009846:	dbec      	blt.n	8009822 <__swhatbuf_r+0x12>
 8009848:	9901      	ldr	r1, [sp, #4]
 800984a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800984e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009852:	4259      	negs	r1, r3
 8009854:	4159      	adcs	r1, r3
 8009856:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800985a:	e7eb      	b.n	8009834 <__swhatbuf_r+0x24>

0800985c <__smakebuf_r>:
 800985c:	898b      	ldrh	r3, [r1, #12]
 800985e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009860:	079d      	lsls	r5, r3, #30
 8009862:	4606      	mov	r6, r0
 8009864:	460c      	mov	r4, r1
 8009866:	d507      	bpl.n	8009878 <__smakebuf_r+0x1c>
 8009868:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800986c:	6023      	str	r3, [r4, #0]
 800986e:	6123      	str	r3, [r4, #16]
 8009870:	2301      	movs	r3, #1
 8009872:	6163      	str	r3, [r4, #20]
 8009874:	b002      	add	sp, #8
 8009876:	bd70      	pop	{r4, r5, r6, pc}
 8009878:	ab01      	add	r3, sp, #4
 800987a:	466a      	mov	r2, sp
 800987c:	f7ff ffc8 	bl	8009810 <__swhatbuf_r>
 8009880:	9900      	ldr	r1, [sp, #0]
 8009882:	4605      	mov	r5, r0
 8009884:	4630      	mov	r0, r6
 8009886:	f7ff f8d5 	bl	8008a34 <_malloc_r>
 800988a:	b948      	cbnz	r0, 80098a0 <__smakebuf_r+0x44>
 800988c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009890:	059a      	lsls	r2, r3, #22
 8009892:	d4ef      	bmi.n	8009874 <__smakebuf_r+0x18>
 8009894:	f023 0303 	bic.w	r3, r3, #3
 8009898:	f043 0302 	orr.w	r3, r3, #2
 800989c:	81a3      	strh	r3, [r4, #12]
 800989e:	e7e3      	b.n	8009868 <__smakebuf_r+0xc>
 80098a0:	89a3      	ldrh	r3, [r4, #12]
 80098a2:	6020      	str	r0, [r4, #0]
 80098a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098a8:	81a3      	strh	r3, [r4, #12]
 80098aa:	9b00      	ldr	r3, [sp, #0]
 80098ac:	6163      	str	r3, [r4, #20]
 80098ae:	9b01      	ldr	r3, [sp, #4]
 80098b0:	6120      	str	r0, [r4, #16]
 80098b2:	b15b      	cbz	r3, 80098cc <__smakebuf_r+0x70>
 80098b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098b8:	4630      	mov	r0, r6
 80098ba:	f000 f81d 	bl	80098f8 <_isatty_r>
 80098be:	b128      	cbz	r0, 80098cc <__smakebuf_r+0x70>
 80098c0:	89a3      	ldrh	r3, [r4, #12]
 80098c2:	f023 0303 	bic.w	r3, r3, #3
 80098c6:	f043 0301 	orr.w	r3, r3, #1
 80098ca:	81a3      	strh	r3, [r4, #12]
 80098cc:	89a3      	ldrh	r3, [r4, #12]
 80098ce:	431d      	orrs	r5, r3
 80098d0:	81a5      	strh	r5, [r4, #12]
 80098d2:	e7cf      	b.n	8009874 <__smakebuf_r+0x18>

080098d4 <_fstat_r>:
 80098d4:	b538      	push	{r3, r4, r5, lr}
 80098d6:	4d07      	ldr	r5, [pc, #28]	; (80098f4 <_fstat_r+0x20>)
 80098d8:	2300      	movs	r3, #0
 80098da:	4604      	mov	r4, r0
 80098dc:	4608      	mov	r0, r1
 80098de:	4611      	mov	r1, r2
 80098e0:	602b      	str	r3, [r5, #0]
 80098e2:	f7f7 fe56 	bl	8001592 <_fstat>
 80098e6:	1c43      	adds	r3, r0, #1
 80098e8:	d102      	bne.n	80098f0 <_fstat_r+0x1c>
 80098ea:	682b      	ldr	r3, [r5, #0]
 80098ec:	b103      	cbz	r3, 80098f0 <_fstat_r+0x1c>
 80098ee:	6023      	str	r3, [r4, #0]
 80098f0:	bd38      	pop	{r3, r4, r5, pc}
 80098f2:	bf00      	nop
 80098f4:	20001310 	.word	0x20001310

080098f8 <_isatty_r>:
 80098f8:	b538      	push	{r3, r4, r5, lr}
 80098fa:	4d06      	ldr	r5, [pc, #24]	; (8009914 <_isatty_r+0x1c>)
 80098fc:	2300      	movs	r3, #0
 80098fe:	4604      	mov	r4, r0
 8009900:	4608      	mov	r0, r1
 8009902:	602b      	str	r3, [r5, #0]
 8009904:	f7f7 fe55 	bl	80015b2 <_isatty>
 8009908:	1c43      	adds	r3, r0, #1
 800990a:	d102      	bne.n	8009912 <_isatty_r+0x1a>
 800990c:	682b      	ldr	r3, [r5, #0]
 800990e:	b103      	cbz	r3, 8009912 <_isatty_r+0x1a>
 8009910:	6023      	str	r3, [r4, #0]
 8009912:	bd38      	pop	{r3, r4, r5, pc}
 8009914:	20001310 	.word	0x20001310

08009918 <expf>:
 8009918:	b508      	push	{r3, lr}
 800991a:	ed2d 8b02 	vpush	{d8}
 800991e:	eef0 8a40 	vmov.f32	s17, s0
 8009922:	f000 f85f 	bl	80099e4 <__ieee754_expf>
 8009926:	eeb0 8a40 	vmov.f32	s16, s0
 800992a:	eeb0 0a68 	vmov.f32	s0, s17
 800992e:	f000 f829 	bl	8009984 <finitef>
 8009932:	b160      	cbz	r0, 800994e <expf+0x36>
 8009934:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8009974 <expf+0x5c>
 8009938:	eef4 8ae7 	vcmpe.f32	s17, s15
 800993c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009940:	dd0a      	ble.n	8009958 <expf+0x40>
 8009942:	f7ff fb69 	bl	8009018 <__errno>
 8009946:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8009978 <expf+0x60>
 800994a:	2322      	movs	r3, #34	; 0x22
 800994c:	6003      	str	r3, [r0, #0]
 800994e:	eeb0 0a48 	vmov.f32	s0, s16
 8009952:	ecbd 8b02 	vpop	{d8}
 8009956:	bd08      	pop	{r3, pc}
 8009958:	eddf 7a08 	vldr	s15, [pc, #32]	; 800997c <expf+0x64>
 800995c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8009960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009964:	d5f3      	bpl.n	800994e <expf+0x36>
 8009966:	f7ff fb57 	bl	8009018 <__errno>
 800996a:	2322      	movs	r3, #34	; 0x22
 800996c:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8009980 <expf+0x68>
 8009970:	6003      	str	r3, [r0, #0]
 8009972:	e7ec      	b.n	800994e <expf+0x36>
 8009974:	42b17217 	.word	0x42b17217
 8009978:	7f800000 	.word	0x7f800000
 800997c:	c2cff1b5 	.word	0xc2cff1b5
 8009980:	00000000 	.word	0x00000000

08009984 <finitef>:
 8009984:	b082      	sub	sp, #8
 8009986:	ed8d 0a01 	vstr	s0, [sp, #4]
 800998a:	9801      	ldr	r0, [sp, #4]
 800998c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009990:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8009994:	bfac      	ite	ge
 8009996:	2000      	movge	r0, #0
 8009998:	2001      	movlt	r0, #1
 800999a:	b002      	add	sp, #8
 800999c:	4770      	bx	lr

0800999e <with_errnof>:
 800999e:	b513      	push	{r0, r1, r4, lr}
 80099a0:	4604      	mov	r4, r0
 80099a2:	ed8d 0a01 	vstr	s0, [sp, #4]
 80099a6:	f7ff fb37 	bl	8009018 <__errno>
 80099aa:	ed9d 0a01 	vldr	s0, [sp, #4]
 80099ae:	6004      	str	r4, [r0, #0]
 80099b0:	b002      	add	sp, #8
 80099b2:	bd10      	pop	{r4, pc}

080099b4 <xflowf>:
 80099b4:	b130      	cbz	r0, 80099c4 <xflowf+0x10>
 80099b6:	eef1 7a40 	vneg.f32	s15, s0
 80099ba:	ee27 0a80 	vmul.f32	s0, s15, s0
 80099be:	2022      	movs	r0, #34	; 0x22
 80099c0:	f7ff bfed 	b.w	800999e <with_errnof>
 80099c4:	eef0 7a40 	vmov.f32	s15, s0
 80099c8:	e7f7      	b.n	80099ba <xflowf+0x6>
	...

080099cc <__math_uflowf>:
 80099cc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80099d4 <__math_uflowf+0x8>
 80099d0:	f7ff bff0 	b.w	80099b4 <xflowf>
 80099d4:	10000000 	.word	0x10000000

080099d8 <__math_oflowf>:
 80099d8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80099e0 <__math_oflowf+0x8>
 80099dc:	f7ff bfea 	b.w	80099b4 <xflowf>
 80099e0:	70000000 	.word	0x70000000

080099e4 <__ieee754_expf>:
 80099e4:	ee10 2a10 	vmov	r2, s0
 80099e8:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80099ec:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80099f0:	d902      	bls.n	80099f8 <__ieee754_expf+0x14>
 80099f2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80099f6:	4770      	bx	lr
 80099f8:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 80099fc:	d106      	bne.n	8009a0c <__ieee754_expf+0x28>
 80099fe:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8009b38 <__ieee754_expf+0x154>
 8009a02:	2900      	cmp	r1, #0
 8009a04:	bf18      	it	ne
 8009a06:	eeb0 0a67 	vmovne.f32	s0, s15
 8009a0a:	4770      	bx	lr
 8009a0c:	484b      	ldr	r0, [pc, #300]	; (8009b3c <__ieee754_expf+0x158>)
 8009a0e:	4282      	cmp	r2, r0
 8009a10:	dd02      	ble.n	8009a18 <__ieee754_expf+0x34>
 8009a12:	2000      	movs	r0, #0
 8009a14:	f7ff bfe0 	b.w	80099d8 <__math_oflowf>
 8009a18:	2a00      	cmp	r2, #0
 8009a1a:	da05      	bge.n	8009a28 <__ieee754_expf+0x44>
 8009a1c:	4a48      	ldr	r2, [pc, #288]	; (8009b40 <__ieee754_expf+0x15c>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d902      	bls.n	8009a28 <__ieee754_expf+0x44>
 8009a22:	2000      	movs	r0, #0
 8009a24:	f7ff bfd2 	b.w	80099cc <__math_uflowf>
 8009a28:	4a46      	ldr	r2, [pc, #280]	; (8009b44 <__ieee754_expf+0x160>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8009a30:	d952      	bls.n	8009ad8 <__ieee754_expf+0xf4>
 8009a32:	4a45      	ldr	r2, [pc, #276]	; (8009b48 <__ieee754_expf+0x164>)
 8009a34:	4293      	cmp	r3, r2
 8009a36:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8009a3a:	d834      	bhi.n	8009aa6 <__ieee754_expf+0xc2>
 8009a3c:	4b43      	ldr	r3, [pc, #268]	; (8009b4c <__ieee754_expf+0x168>)
 8009a3e:	4413      	add	r3, r2
 8009a40:	ed93 7a00 	vldr	s14, [r3]
 8009a44:	4b42      	ldr	r3, [pc, #264]	; (8009b50 <__ieee754_expf+0x16c>)
 8009a46:	4413      	add	r3, r2
 8009a48:	ee30 7a47 	vsub.f32	s14, s0, s14
 8009a4c:	f1c1 0201 	rsb	r2, r1, #1
 8009a50:	edd3 7a00 	vldr	s15, [r3]
 8009a54:	1a52      	subs	r2, r2, r1
 8009a56:	ee37 0a67 	vsub.f32	s0, s14, s15
 8009a5a:	ee20 6a00 	vmul.f32	s12, s0, s0
 8009a5e:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8009b54 <__ieee754_expf+0x170>
 8009a62:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009b58 <__ieee754_expf+0x174>
 8009a66:	eee6 6a05 	vfma.f32	s13, s12, s10
 8009a6a:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8009b5c <__ieee754_expf+0x178>
 8009a6e:	eea6 5a86 	vfma.f32	s10, s13, s12
 8009a72:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009b60 <__ieee754_expf+0x17c>
 8009a76:	eee5 6a06 	vfma.f32	s13, s10, s12
 8009a7a:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8009b64 <__ieee754_expf+0x180>
 8009a7e:	eea6 5a86 	vfma.f32	s10, s13, s12
 8009a82:	eef0 6a40 	vmov.f32	s13, s0
 8009a86:	eee5 6a46 	vfms.f32	s13, s10, s12
 8009a8a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8009a8e:	ee20 5a26 	vmul.f32	s10, s0, s13
 8009a92:	bb92      	cbnz	r2, 8009afa <__ieee754_expf+0x116>
 8009a94:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8009a98:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8009a9c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8009aa0:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8009aa4:	4770      	bx	lr
 8009aa6:	4b30      	ldr	r3, [pc, #192]	; (8009b68 <__ieee754_expf+0x184>)
 8009aa8:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8009b6c <__ieee754_expf+0x188>
 8009aac:	eddf 6a30 	vldr	s13, [pc, #192]	; 8009b70 <__ieee754_expf+0x18c>
 8009ab0:	4413      	add	r3, r2
 8009ab2:	edd3 7a00 	vldr	s15, [r3]
 8009ab6:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009aba:	eeb0 7a40 	vmov.f32	s14, s0
 8009abe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009ac2:	ee17 2a90 	vmov	r2, s15
 8009ac6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009aca:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8009ace:	eddf 6a29 	vldr	s13, [pc, #164]	; 8009b74 <__ieee754_expf+0x190>
 8009ad2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009ad6:	e7be      	b.n	8009a56 <__ieee754_expf+0x72>
 8009ad8:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 8009adc:	d20b      	bcs.n	8009af6 <__ieee754_expf+0x112>
 8009ade:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009b78 <__ieee754_expf+0x194>
 8009ae2:	ee70 6a26 	vadd.f32	s13, s0, s13
 8009ae6:	eef4 6ae5 	vcmpe.f32	s13, s11
 8009aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009aee:	dd02      	ble.n	8009af6 <__ieee754_expf+0x112>
 8009af0:	ee30 0a25 	vadd.f32	s0, s0, s11
 8009af4:	4770      	bx	lr
 8009af6:	2200      	movs	r2, #0
 8009af8:	e7af      	b.n	8009a5a <__ieee754_expf+0x76>
 8009afa:	ee36 6a66 	vsub.f32	s12, s12, s13
 8009afe:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8009b02:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8009b06:	bfb8      	it	lt
 8009b08:	3264      	addlt	r2, #100	; 0x64
 8009b0a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009b0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009b12:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8009b16:	ee17 3a90 	vmov	r3, s15
 8009b1a:	bfab      	itete	ge
 8009b1c:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8009b20:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8009b24:	ee00 3a10 	vmovge	s0, r3
 8009b28:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8009b7c <__ieee754_expf+0x198>
 8009b2c:	bfbc      	itt	lt
 8009b2e:	ee00 3a10 	vmovlt	s0, r3
 8009b32:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8009b36:	4770      	bx	lr
 8009b38:	00000000 	.word	0x00000000
 8009b3c:	42b17217 	.word	0x42b17217
 8009b40:	42cff1b5 	.word	0x42cff1b5
 8009b44:	3eb17218 	.word	0x3eb17218
 8009b48:	3f851591 	.word	0x3f851591
 8009b4c:	08020e7c 	.word	0x08020e7c
 8009b50:	08020e84 	.word	0x08020e84
 8009b54:	3331bb4c 	.word	0x3331bb4c
 8009b58:	b5ddea0e 	.word	0xb5ddea0e
 8009b5c:	388ab355 	.word	0x388ab355
 8009b60:	bb360b61 	.word	0xbb360b61
 8009b64:	3e2aaaab 	.word	0x3e2aaaab
 8009b68:	08020e74 	.word	0x08020e74
 8009b6c:	3fb8aa3b 	.word	0x3fb8aa3b
 8009b70:	3f317180 	.word	0x3f317180
 8009b74:	3717f7d1 	.word	0x3717f7d1
 8009b78:	7149f2ca 	.word	0x7149f2ca
 8009b7c:	0d800000 	.word	0x0d800000

08009b80 <_init>:
 8009b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b82:	bf00      	nop
 8009b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b86:	bc08      	pop	{r3}
 8009b88:	469e      	mov	lr, r3
 8009b8a:	4770      	bx	lr

08009b8c <_fini>:
 8009b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b8e:	bf00      	nop
 8009b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b92:	bc08      	pop	{r3}
 8009b94:	469e      	mov	lr, r3
 8009b96:	4770      	bx	lr
