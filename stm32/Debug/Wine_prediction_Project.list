
Wine_prediction_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c640  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00007c90  0800c800  0800c800  0001c800  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014490  08014490  00030984  2**0
                  CONTENTS
  4 .ARM          00000008  08014490  08014490  00024490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014498  08014498  00030984  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014498  08014498  00024498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801449c  0801449c  0002449c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000984  20000000  080144a0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bd4  200009a0  08014e24  000309a0  2**5
                  ALLOC
 10 ._user_heap_stack 00001004  20001574  08014e24  00031574  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030984  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022669  00000000  00000000  000309b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042a6  00000000  00000000  0005301d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a68  00000000  00000000  000572c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018b0  00000000  00000000  00058d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00036b4e  00000000  00000000  0005a5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022be3  00000000  00000000  0009112e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013eb89  00000000  00000000  000b3d11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001f289a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000079b0  00000000  00000000  001f28ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000009c  00000000  00000000  001fa29c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000014d  00000000  00000000  001fa338  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200009a0 	.word	0x200009a0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800c7e8 	.word	0x0800c7e8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200009a4 	.word	0x200009a4
 80001fc:	0800c7e8 	.word	0x0800c7e8

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a8:	f001 f98b 	bl	80018c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ac:	f000 f819 	bl	80005e2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b0:	f000 fac4 	bl	8000b3c <MX_GPIO_Init>
  MX_CRC_Init();
 80005b4:	f000 f868 	bl	8000688 <MX_CRC_Init>
  MX_FMC_Init();
 80005b8:	f000 fa5a 	bl	8000a70 <MX_FMC_Init>
  MX_I2C1_Init();
 80005bc:	f000 f886 	bl	80006cc <MX_I2C1_Init>
  MX_SAI1_Init();
 80005c0:	f000 f8c4 	bl	800074c <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 80005c4:	f000 f92a 	bl	800081c <MX_SDMMC1_SD_Init>
  MX_SPI2_Init();
 80005c8:	f000 f94e 	bl	8000868 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80005cc:	f000 f98a 	bl	80008e4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80005d0:	f000 f9d4 	bl	800097c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005d4:	f000 fa1e 	bl	8000a14 <MX_USB_OTG_FS_PCD_Init>
  MX_X_CUBE_AI_Init();
 80005d8:	f008 fb28 	bl	8008c2c <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_X_CUBE_AI_Process();
 80005dc:	f008 fb34 	bl	8008c48 <MX_X_CUBE_AI_Process>
 80005e0:	e7fc      	b.n	80005dc <main+0x38>

080005e2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b096      	sub	sp, #88	; 0x58
 80005e6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e8:	f107 0314 	add.w	r3, r7, #20
 80005ec:	2244      	movs	r2, #68	; 0x44
 80005ee:	2100      	movs	r1, #0
 80005f0:	4618      	mov	r0, r3
 80005f2:	f00a fe13 	bl	800b21c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000604:	2000      	movs	r0, #0
 8000606:	f002 f811 	bl	800262c <HAL_PWREx_ControlVoltageScaling>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000610:	f000 fcb2 	bl	8000f78 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
 8000614:	2330      	movs	r3, #48	; 0x30
 8000616:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000618:	2301      	movs	r3, #1
 800061a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800061c:	2301      	movs	r3, #1
 800061e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000624:	2360      	movs	r3, #96	; 0x60
 8000626:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000628:	2302      	movs	r3, #2
 800062a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800062c:	2301      	movs	r3, #1
 800062e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000630:	2301      	movs	r3, #1
 8000632:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000634:	233c      	movs	r3, #60	; 0x3c
 8000636:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 8000638:	2305      	movs	r3, #5
 800063a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800063c:	2302      	movs	r3, #2
 800063e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000640:	2302      	movs	r3, #2
 8000642:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000644:	f107 0314 	add.w	r3, r7, #20
 8000648:	4618      	mov	r0, r3
 800064a:	f002 f8b3 	bl	80027b4 <HAL_RCC_OscConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000654:	f000 fc90 	bl	8000f78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000658:	230f      	movs	r3, #15
 800065a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065c:	2303      	movs	r3, #3
 800065e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800066c:	463b      	mov	r3, r7
 800066e:	2105      	movs	r1, #5
 8000670:	4618      	mov	r0, r3
 8000672:	f002 fcb9 	bl	8002fe8 <HAL_RCC_ClockConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800067c:	f000 fc7c 	bl	8000f78 <Error_Handler>
  }
}
 8000680:	bf00      	nop
 8000682:	3758      	adds	r7, #88	; 0x58
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800068c:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <MX_CRC_Init+0x3c>)
 800068e:	4a0e      	ldr	r2, [pc, #56]	; (80006c8 <MX_CRC_Init+0x40>)
 8000690:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000692:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <MX_CRC_Init+0x3c>)
 8000694:	2200      	movs	r2, #0
 8000696:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000698:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <MX_CRC_Init+0x3c>)
 800069a:	2200      	movs	r2, #0
 800069c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <MX_CRC_Init+0x3c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80006a4:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <MX_CRC_Init+0x3c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80006aa:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_CRC_Init+0x3c>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006b0:	4804      	ldr	r0, [pc, #16]	; (80006c4 <MX_CRC_Init+0x3c>)
 80006b2:	f001 fa85 	bl	8001bc0 <HAL_CRC_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80006bc:	f000 fc5c 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	200009bc 	.word	0x200009bc
 80006c8:	40023000 	.word	0x40023000

080006cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006d0:	4b1b      	ldr	r3, [pc, #108]	; (8000740 <MX_I2C1_Init+0x74>)
 80006d2:	4a1c      	ldr	r2, [pc, #112]	; (8000744 <MX_I2C1_Init+0x78>)
 80006d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80006d6:	4b1a      	ldr	r3, [pc, #104]	; (8000740 <MX_I2C1_Init+0x74>)
 80006d8:	4a1b      	ldr	r2, [pc, #108]	; (8000748 <MX_I2C1_Init+0x7c>)
 80006da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006dc:	4b18      	ldr	r3, [pc, #96]	; (8000740 <MX_I2C1_Init+0x74>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006e2:	4b17      	ldr	r3, [pc, #92]	; (8000740 <MX_I2C1_Init+0x74>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e8:	4b15      	ldr	r3, [pc, #84]	; (8000740 <MX_I2C1_Init+0x74>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006ee:	4b14      	ldr	r3, [pc, #80]	; (8000740 <MX_I2C1_Init+0x74>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006f4:	4b12      	ldr	r3, [pc, #72]	; (8000740 <MX_I2C1_Init+0x74>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006fa:	4b11      	ldr	r3, [pc, #68]	; (8000740 <MX_I2C1_Init+0x74>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000700:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <MX_I2C1_Init+0x74>)
 8000702:	2200      	movs	r2, #0
 8000704:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000706:	480e      	ldr	r0, [pc, #56]	; (8000740 <MX_I2C1_Init+0x74>)
 8000708:	f001 fcf6 	bl	80020f8 <HAL_I2C_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000712:	f000 fc31 	bl	8000f78 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000716:	2100      	movs	r1, #0
 8000718:	4809      	ldr	r0, [pc, #36]	; (8000740 <MX_I2C1_Init+0x74>)
 800071a:	f001 fd88 	bl	800222e <HAL_I2CEx_ConfigAnalogFilter>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000724:	f000 fc28 	bl	8000f78 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000728:	2100      	movs	r1, #0
 800072a:	4805      	ldr	r0, [pc, #20]	; (8000740 <MX_I2C1_Init+0x74>)
 800072c:	f001 fdca 	bl	80022c4 <HAL_I2CEx_ConfigDigitalFilter>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000736:	f000 fc1f 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	200009e0 	.word	0x200009e0
 8000744:	40005400 	.word	0x40005400
 8000748:	307075b1 	.word	0x307075b1

0800074c <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000750:	4b2f      	ldr	r3, [pc, #188]	; (8000810 <MX_SAI1_Init+0xc4>)
 8000752:	4a30      	ldr	r2, [pc, #192]	; (8000814 <MX_SAI1_Init+0xc8>)
 8000754:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000756:	4b2e      	ldr	r3, [pc, #184]	; (8000810 <MX_SAI1_Init+0xc4>)
 8000758:	2200      	movs	r2, #0
 800075a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800075c:	4b2c      	ldr	r3, [pc, #176]	; (8000810 <MX_SAI1_Init+0xc4>)
 800075e:	2200      	movs	r2, #0
 8000760:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000762:	4b2b      	ldr	r3, [pc, #172]	; (8000810 <MX_SAI1_Init+0xc4>)
 8000764:	2240      	movs	r2, #64	; 0x40
 8000766:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000768:	4b29      	ldr	r3, [pc, #164]	; (8000810 <MX_SAI1_Init+0xc4>)
 800076a:	2200      	movs	r2, #0
 800076c:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800076e:	4b28      	ldr	r3, [pc, #160]	; (8000810 <MX_SAI1_Init+0xc4>)
 8000770:	2200      	movs	r2, #0
 8000772:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000774:	4b26      	ldr	r3, [pc, #152]	; (8000810 <MX_SAI1_Init+0xc4>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800077a:	4b25      	ldr	r3, [pc, #148]	; (8000810 <MX_SAI1_Init+0xc4>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000780:	4b23      	ldr	r3, [pc, #140]	; (8000810 <MX_SAI1_Init+0xc4>)
 8000782:	2200      	movs	r2, #0
 8000784:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8000786:	4b22      	ldr	r3, [pc, #136]	; (8000810 <MX_SAI1_Init+0xc4>)
 8000788:	2200      	movs	r2, #0
 800078a:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800078c:	4b20      	ldr	r3, [pc, #128]	; (8000810 <MX_SAI1_Init+0xc4>)
 800078e:	2200      	movs	r2, #0
 8000790:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000792:	4b1f      	ldr	r3, [pc, #124]	; (8000810 <MX_SAI1_Init+0xc4>)
 8000794:	4a20      	ldr	r2, [pc, #128]	; (8000818 <MX_SAI1_Init+0xcc>)
 8000796:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000798:	4b1d      	ldr	r3, [pc, #116]	; (8000810 <MX_SAI1_Init+0xc4>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800079e:	4b1c      	ldr	r3, [pc, #112]	; (8000810 <MX_SAI1_Init+0xc4>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80007a4:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <MX_SAI1_Init+0xc4>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80007aa:	4b19      	ldr	r3, [pc, #100]	; (8000810 <MX_SAI1_Init+0xc4>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 80007b0:	4b17      	ldr	r3, [pc, #92]	; (8000810 <MX_SAI1_Init+0xc4>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 0;
 80007b8:	4b15      	ldr	r3, [pc, #84]	; (8000810 <MX_SAI1_Init+0xc4>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80007be:	4b14      	ldr	r3, [pc, #80]	; (8000810 <MX_SAI1_Init+0xc4>)
 80007c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007c4:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 80007c6:	4b12      	ldr	r3, [pc, #72]	; (8000810 <MX_SAI1_Init+0xc4>)
 80007c8:	2208      	movs	r2, #8
 80007ca:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 80007cc:	4b10      	ldr	r3, [pc, #64]	; (8000810 <MX_SAI1_Init+0xc4>)
 80007ce:	2201      	movs	r2, #1
 80007d0:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80007d2:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <MX_SAI1_Init+0xc4>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80007d8:	4b0d      	ldr	r3, [pc, #52]	; (8000810 <MX_SAI1_Init+0xc4>)
 80007da:	2200      	movs	r2, #0
 80007dc:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80007de:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <MX_SAI1_Init+0xc4>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 80007e4:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <MX_SAI1_Init+0xc4>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80007ea:	4b09      	ldr	r3, [pc, #36]	; (8000810 <MX_SAI1_Init+0xc4>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 80007f0:	4b07      	ldr	r3, [pc, #28]	; (8000810 <MX_SAI1_Init+0xc4>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 80007f6:	4b06      	ldr	r3, [pc, #24]	; (8000810 <MX_SAI1_Init+0xc4>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 80007fc:	4804      	ldr	r0, [pc, #16]	; (8000810 <MX_SAI1_Init+0xc4>)
 80007fe:	f004 fc57 	bl	80050b0 <HAL_SAI_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 8000808:	f000 fbb6 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000a34 	.word	0x20000a34
 8000814:	40015404 	.word	0x40015404
 8000818:	0002ee00 	.word	0x0002ee00

0800081c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <MX_SDMMC1_SD_Init+0x44>)
 8000822:	4a10      	ldr	r2, [pc, #64]	; (8000864 <MX_SDMMC1_SD_Init+0x48>)
 8000824:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_SDMMC1_SD_Init+0x44>)
 8000828:	2200      	movs	r2, #0
 800082a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <MX_SDMMC1_SD_Init+0x44>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <MX_SDMMC1_SD_Init+0x44>)
 8000834:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000838:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <MX_SDMMC1_SD_Init+0x44>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000840:	4b07      	ldr	r3, [pc, #28]	; (8000860 <MX_SDMMC1_SD_Init+0x44>)
 8000842:	2200      	movs	r2, #0
 8000844:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <MX_SDMMC1_SD_Init+0x44>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 800084c:	4804      	ldr	r0, [pc, #16]	; (8000860 <MX_SDMMC1_SD_Init+0x44>)
 800084e:	f004 fe47 	bl	80054e0 <HAL_SD_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_SDMMC1_SD_Init+0x40>
  {
    Error_Handler();
 8000858:	f000 fb8e 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000ac8 	.word	0x20000ac8
 8000864:	50062400 	.word	0x50062400

08000868 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800086c:	4b1b      	ldr	r3, [pc, #108]	; (80008dc <MX_SPI2_Init+0x74>)
 800086e:	4a1c      	ldr	r2, [pc, #112]	; (80008e0 <MX_SPI2_Init+0x78>)
 8000870:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000872:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <MX_SPI2_Init+0x74>)
 8000874:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000878:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800087a:	4b18      	ldr	r3, [pc, #96]	; (80008dc <MX_SPI2_Init+0x74>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000880:	4b16      	ldr	r3, [pc, #88]	; (80008dc <MX_SPI2_Init+0x74>)
 8000882:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000886:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000888:	4b14      	ldr	r3, [pc, #80]	; (80008dc <MX_SPI2_Init+0x74>)
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800088e:	4b13      	ldr	r3, [pc, #76]	; (80008dc <MX_SPI2_Init+0x74>)
 8000890:	2200      	movs	r2, #0
 8000892:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000894:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_SPI2_Init+0x74>)
 8000896:	f44f 7200 	mov.w	r2, #512	; 0x200
 800089a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800089c:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <MX_SPI2_Init+0x74>)
 800089e:	2208      	movs	r2, #8
 80008a0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <MX_SPI2_Init+0x74>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <MX_SPI2_Init+0x74>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <MX_SPI2_Init+0x74>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80008b4:	4b09      	ldr	r3, [pc, #36]	; (80008dc <MX_SPI2_Init+0x74>)
 80008b6:	2207      	movs	r2, #7
 80008b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008ba:	4b08      	ldr	r3, [pc, #32]	; (80008dc <MX_SPI2_Init+0x74>)
 80008bc:	2200      	movs	r2, #0
 80008be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <MX_SPI2_Init+0x74>)
 80008c2:	2208      	movs	r2, #8
 80008c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_SPI2_Init+0x74>)
 80008c8:	f005 fef5 	bl	80066b6 <HAL_SPI_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80008d2:	f000 fb51 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000b48 	.word	0x20000b48
 80008e0:	40003800 	.word	0x40003800

080008e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008e8:	4b22      	ldr	r3, [pc, #136]	; (8000974 <MX_USART2_UART_Init+0x90>)
 80008ea:	4a23      	ldr	r2, [pc, #140]	; (8000978 <MX_USART2_UART_Init+0x94>)
 80008ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ee:	4b21      	ldr	r3, [pc, #132]	; (8000974 <MX_USART2_UART_Init+0x90>)
 80008f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008f6:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <MX_USART2_UART_Init+0x90>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008fc:	4b1d      	ldr	r3, [pc, #116]	; (8000974 <MX_USART2_UART_Init+0x90>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000902:	4b1c      	ldr	r3, [pc, #112]	; (8000974 <MX_USART2_UART_Init+0x90>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000908:	4b1a      	ldr	r3, [pc, #104]	; (8000974 <MX_USART2_UART_Init+0x90>)
 800090a:	220c      	movs	r2, #12
 800090c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090e:	4b19      	ldr	r3, [pc, #100]	; (8000974 <MX_USART2_UART_Init+0x90>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000914:	4b17      	ldr	r3, [pc, #92]	; (8000974 <MX_USART2_UART_Init+0x90>)
 8000916:	2200      	movs	r2, #0
 8000918:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800091a:	4b16      	ldr	r3, [pc, #88]	; (8000974 <MX_USART2_UART_Init+0x90>)
 800091c:	2200      	movs	r2, #0
 800091e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000920:	4b14      	ldr	r3, [pc, #80]	; (8000974 <MX_USART2_UART_Init+0x90>)
 8000922:	2200      	movs	r2, #0
 8000924:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000926:	4b13      	ldr	r3, [pc, #76]	; (8000974 <MX_USART2_UART_Init+0x90>)
 8000928:	2200      	movs	r2, #0
 800092a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800092c:	4811      	ldr	r0, [pc, #68]	; (8000974 <MX_USART2_UART_Init+0x90>)
 800092e:	f005 ffad 	bl	800688c <HAL_UART_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000938:	f000 fb1e 	bl	8000f78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800093c:	2100      	movs	r1, #0
 800093e:	480d      	ldr	r0, [pc, #52]	; (8000974 <MX_USART2_UART_Init+0x90>)
 8000940:	f006 fe9a 	bl	8007678 <HAL_UARTEx_SetTxFifoThreshold>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800094a:	f000 fb15 	bl	8000f78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800094e:	2100      	movs	r1, #0
 8000950:	4808      	ldr	r0, [pc, #32]	; (8000974 <MX_USART2_UART_Init+0x90>)
 8000952:	f006 fecf 	bl	80076f4 <HAL_UARTEx_SetRxFifoThreshold>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800095c:	f000 fb0c 	bl	8000f78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000960:	4804      	ldr	r0, [pc, #16]	; (8000974 <MX_USART2_UART_Init+0x90>)
 8000962:	f006 fe50 	bl	8007606 <HAL_UARTEx_DisableFifoMode>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800096c:	f000 fb04 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000bac 	.word	0x20000bac
 8000978:	40004400 	.word	0x40004400

0800097c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000980:	4b22      	ldr	r3, [pc, #136]	; (8000a0c <MX_USART3_UART_Init+0x90>)
 8000982:	4a23      	ldr	r2, [pc, #140]	; (8000a10 <MX_USART3_UART_Init+0x94>)
 8000984:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000986:	4b21      	ldr	r3, [pc, #132]	; (8000a0c <MX_USART3_UART_Init+0x90>)
 8000988:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800098c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800098e:	4b1f      	ldr	r3, [pc, #124]	; (8000a0c <MX_USART3_UART_Init+0x90>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000994:	4b1d      	ldr	r3, [pc, #116]	; (8000a0c <MX_USART3_UART_Init+0x90>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800099a:	4b1c      	ldr	r3, [pc, #112]	; (8000a0c <MX_USART3_UART_Init+0x90>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009a0:	4b1a      	ldr	r3, [pc, #104]	; (8000a0c <MX_USART3_UART_Init+0x90>)
 80009a2:	220c      	movs	r2, #12
 80009a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a6:	4b19      	ldr	r3, [pc, #100]	; (8000a0c <MX_USART3_UART_Init+0x90>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ac:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <MX_USART3_UART_Init+0x90>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009b2:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <MX_USART3_UART_Init+0x90>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009b8:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <MX_USART3_UART_Init+0x90>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009be:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <MX_USART3_UART_Init+0x90>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009c4:	4811      	ldr	r0, [pc, #68]	; (8000a0c <MX_USART3_UART_Init+0x90>)
 80009c6:	f005 ff61 	bl	800688c <HAL_UART_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009d0:	f000 fad2 	bl	8000f78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d4:	2100      	movs	r1, #0
 80009d6:	480d      	ldr	r0, [pc, #52]	; (8000a0c <MX_USART3_UART_Init+0x90>)
 80009d8:	f006 fe4e 	bl	8007678 <HAL_UARTEx_SetTxFifoThreshold>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009e2:	f000 fac9 	bl	8000f78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e6:	2100      	movs	r1, #0
 80009e8:	4808      	ldr	r0, [pc, #32]	; (8000a0c <MX_USART3_UART_Init+0x90>)
 80009ea:	f006 fe83 	bl	80076f4 <HAL_UARTEx_SetRxFifoThreshold>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009f4:	f000 fac0 	bl	8000f78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009f8:	4804      	ldr	r0, [pc, #16]	; (8000a0c <MX_USART3_UART_Init+0x90>)
 80009fa:	f006 fe04 	bl	8007606 <HAL_UARTEx_DisableFifoMode>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a04:	f000 fab8 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20000c40 	.word	0x20000c40
 8000a10:	40004800 	.word	0x40004800

08000a14 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a18:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a1a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a1e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a20:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a22:	2206      	movs	r2, #6
 8000a24:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a26:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a28:	2202      	movs	r2, #2
 8000a2a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a2e:	2202      	movs	r2, #2
 8000a30:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000a32:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a38:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000a44:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a4a:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a56:	4805      	ldr	r0, [pc, #20]	; (8000a6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a58:	f001 fc80 	bl	800235c <HAL_PCD_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a62:	f000 fa89 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000cd4 	.word	0x20000cd4

08000a70 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b088      	sub	sp, #32
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000a76:	463b      	mov	r3, r7
 8000a78:	2220      	movs	r2, #32
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f00a fbcd 	bl	800b21c <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000a82:	4b2c      	ldr	r3, [pc, #176]	; (8000b34 <MX_FMC_Init+0xc4>)
 8000a84:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000a88:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000a8a:	4b2a      	ldr	r3, [pc, #168]	; (8000b34 <MX_FMC_Init+0xc4>)
 8000a8c:	4a2a      	ldr	r2, [pc, #168]	; (8000b38 <MX_FMC_Init+0xc8>)
 8000a8e:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000a90:	4b28      	ldr	r3, [pc, #160]	; (8000b34 <MX_FMC_Init+0xc4>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000a96:	4b27      	ldr	r3, [pc, #156]	; (8000b34 <MX_FMC_Init+0xc4>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_PSRAM;
 8000a9c:	4b25      	ldr	r3, [pc, #148]	; (8000b34 <MX_FMC_Init+0xc4>)
 8000a9e:	2204      	movs	r2, #4
 8000aa0:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000aa2:	4b24      	ldr	r3, [pc, #144]	; (8000b34 <MX_FMC_Init+0xc4>)
 8000aa4:	2210      	movs	r2, #16
 8000aa6:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_ENABLE;
 8000aa8:	4b22      	ldr	r3, [pc, #136]	; (8000b34 <MX_FMC_Init+0xc4>)
 8000aaa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000aae:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000ab0:	4b20      	ldr	r3, [pc, #128]	; (8000b34 <MX_FMC_Init+0xc4>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000ab6:	4b1f      	ldr	r3, [pc, #124]	; (8000b34 <MX_FMC_Init+0xc4>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8000abc:	4b1d      	ldr	r3, [pc, #116]	; (8000b34 <MX_FMC_Init+0xc4>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_ENABLE;
 8000ac2:	4b1c      	ldr	r3, [pc, #112]	; (8000b34 <MX_FMC_Init+0xc4>)
 8000ac4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ac8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000aca:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <MX_FMC_Init+0xc4>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000ad0:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <MX_FMC_Init+0xc4>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_ENABLE;
 8000ad6:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <MX_FMC_Init+0xc4>)
 8000ad8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000adc:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000ade:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <MX_FMC_Init+0xc4>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000ae4:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <MX_FMC_Init+0xc4>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 8000aea:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <MX_FMC_Init+0xc4>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	645a      	str	r2, [r3, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000af0:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <MX_FMC_Init+0xc4>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000af6:	230f      	movs	r3, #15
 8000af8:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8000afa:	230f      	movs	r3, #15
 8000afc:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8000afe:	23ff      	movs	r3, #255	; 0xff
 8000b00:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000b06:	230f      	movs	r3, #15
 8000b08:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000b0a:	2310      	movs	r3, #16
 8000b0c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 2;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000b16:	463b      	mov	r3, r7
 8000b18:	2200      	movs	r2, #0
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4805      	ldr	r0, [pc, #20]	; (8000b34 <MX_FMC_Init+0xc4>)
 8000b1e:	f005 fe6d 	bl	80067fc <HAL_SRAM_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_FMC_Init+0xbc>
  {
    Error_Handler( );
 8000b28:	f000 fa26 	bl	8000f78 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000b2c:	bf00      	nop
 8000b2e:	3720      	adds	r7, #32
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	200011e0 	.word	0x200011e0
 8000b38:	a0000104 	.word	0xa0000104

08000b3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08e      	sub	sp, #56	; 0x38
 8000b40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
 8000b50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000b52:	4bb2      	ldr	r3, [pc, #712]	; (8000e1c <MX_GPIO_Init+0x2e0>)
 8000b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b56:	4ab1      	ldr	r2, [pc, #708]	; (8000e1c <MX_GPIO_Init+0x2e0>)
 8000b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b5e:	4baf      	ldr	r3, [pc, #700]	; (8000e1c <MX_GPIO_Init+0x2e0>)
 8000b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b66:	623b      	str	r3, [r7, #32]
 8000b68:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b6a:	4bac      	ldr	r3, [pc, #688]	; (8000e1c <MX_GPIO_Init+0x2e0>)
 8000b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6e:	4aab      	ldr	r2, [pc, #684]	; (8000e1c <MX_GPIO_Init+0x2e0>)
 8000b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b76:	4ba9      	ldr	r3, [pc, #676]	; (8000e1c <MX_GPIO_Init+0x2e0>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b7e:	61fb      	str	r3, [r7, #28]
 8000b80:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b82:	4ba6      	ldr	r3, [pc, #664]	; (8000e1c <MX_GPIO_Init+0x2e0>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b86:	4aa5      	ldr	r2, [pc, #660]	; (8000e1c <MX_GPIO_Init+0x2e0>)
 8000b88:	f043 0310 	orr.w	r3, r3, #16
 8000b8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b8e:	4ba3      	ldr	r3, [pc, #652]	; (8000e1c <MX_GPIO_Init+0x2e0>)
 8000b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b92:	f003 0310 	and.w	r3, r3, #16
 8000b96:	61bb      	str	r3, [r7, #24]
 8000b98:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9a:	4ba0      	ldr	r3, [pc, #640]	; (8000e1c <MX_GPIO_Init+0x2e0>)
 8000b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9e:	4a9f      	ldr	r2, [pc, #636]	; (8000e1c <MX_GPIO_Init+0x2e0>)
 8000ba0:	f043 0302 	orr.w	r3, r3, #2
 8000ba4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ba6:	4b9d      	ldr	r3, [pc, #628]	; (8000e1c <MX_GPIO_Init+0x2e0>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000baa:	f003 0302 	and.w	r3, r3, #2
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	4b9a      	ldr	r3, [pc, #616]	; (8000e1c <MX_GPIO_Init+0x2e0>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb6:	4a99      	ldr	r2, [pc, #612]	; (8000e1c <MX_GPIO_Init+0x2e0>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bbe:	4b97      	ldr	r3, [pc, #604]	; (8000e1c <MX_GPIO_Init+0x2e0>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	613b      	str	r3, [r7, #16]
 8000bc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bca:	4b94      	ldr	r3, [pc, #592]	; (8000e1c <MX_GPIO_Init+0x2e0>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bce:	4a93      	ldr	r2, [pc, #588]	; (8000e1c <MX_GPIO_Init+0x2e0>)
 8000bd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bd6:	4b91      	ldr	r3, [pc, #580]	; (8000e1c <MX_GPIO_Init+0x2e0>)
 8000bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 8000be2:	f001 fdd7 	bl	8002794 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000be6:	4b8d      	ldr	r3, [pc, #564]	; (8000e1c <MX_GPIO_Init+0x2e0>)
 8000be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bea:	4a8c      	ldr	r2, [pc, #560]	; (8000e1c <MX_GPIO_Init+0x2e0>)
 8000bec:	f043 0308 	orr.w	r3, r3, #8
 8000bf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bf2:	4b8a      	ldr	r3, [pc, #552]	; (8000e1c <MX_GPIO_Init+0x2e0>)
 8000bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf6:	f003 0308 	and.w	r3, r3, #8
 8000bfa:	60bb      	str	r3, [r7, #8]
 8000bfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bfe:	4b87      	ldr	r3, [pc, #540]	; (8000e1c <MX_GPIO_Init+0x2e0>)
 8000c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c02:	4a86      	ldr	r2, [pc, #536]	; (8000e1c <MX_GPIO_Init+0x2e0>)
 8000c04:	f043 0304 	orr.w	r3, r3, #4
 8000c08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c0a:	4b84      	ldr	r3, [pc, #528]	; (8000e1c <MX_GPIO_Init+0x2e0>)
 8000c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0e:	f003 0304 	and.w	r3, r3, #4
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c16:	4b81      	ldr	r3, [pc, #516]	; (8000e1c <MX_GPIO_Init+0x2e0>)
 8000c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1a:	4a80      	ldr	r2, [pc, #512]	; (8000e1c <MX_GPIO_Init+0x2e0>)
 8000c1c:	f043 0320 	orr.w	r3, r3, #32
 8000c20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c22:	4b7e      	ldr	r3, [pc, #504]	; (8000e1c <MX_GPIO_Init+0x2e0>)
 8000c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c26:	f003 0320 	and.w	r3, r3, #32
 8000c2a:	603b      	str	r3, [r7, #0]
 8000c2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	f244 0114 	movw	r1, #16404	; 0x4014
 8000c34:	487a      	ldr	r0, [pc, #488]	; (8000e20 <MX_GPIO_Init+0x2e4>)
 8000c36:	f001 fa47 	bl	80020c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(JOY_SEL_GPIO_Port, JOY_SEL_Pin, GPIO_PIN_RESET);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c40:	4878      	ldr	r0, [pc, #480]	; (8000e24 <MX_GPIO_Init+0x2e8>)
 8000c42:	f001 fa41 	bl	80020c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2140      	movs	r1, #64	; 0x40
 8000c4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c4e:	f001 fa3b 	bl	80020c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_Port, MFX_WAKEUP_Pin, GPIO_PIN_RESET);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2104      	movs	r1, #4
 8000c56:	4874      	ldr	r0, [pc, #464]	; (8000e28 <MX_GPIO_Init+0x2ec>)
 8000c58:	f001 fa36 	bl	80020c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OCTOSPIM_P2_IO1_Pin OCTOSPIM_P2_IO2_Pin OCTOSPIM_P2_CLK_Pin OCTOSPIM_P2_IO0_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO1_Pin|OCTOSPIM_P2_IO2_Pin|OCTOSPIM_P2_CLK_Pin|OCTOSPIM_P2_IO0_Pin;
 8000c5c:	f44f 6364 	mov.w	r3, #3648	; 0xe40
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c62:	2302      	movs	r3, #2
 8000c64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000c6e:	2305      	movs	r3, #5
 8000c70:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c76:	4619      	mov	r1, r3
 8000c78:	486c      	ldr	r0, [pc, #432]	; (8000e2c <MX_GPIO_Init+0x2f0>)
 8000c7a:	f001 f893 	bl	8001da4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MIC_VDD_Pin DSI_SPI_USART_CS_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin;
 8000c7e:	f244 0314 	movw	r3, #16404	; 0x4014
 8000c82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c84:	2301      	movs	r3, #1
 8000c86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c94:	4619      	mov	r1, r3
 8000c96:	4862      	ldr	r0, [pc, #392]	; (8000e20 <MX_GPIO_Init+0x2e4>)
 8000c98:	f001 f884 	bl	8001da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000c9c:	2310      	movs	r3, #16
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000cac:	2302      	movs	r3, #2
 8000cae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000cb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	485c      	ldr	r0, [pc, #368]	; (8000e28 <MX_GPIO_Init+0x2ec>)
 8000cb8:	f001 f874 	bl	8001da4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D7_Pin DCMI_D5_Pin DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 8000cbc:	23b0      	movs	r3, #176	; 0xb0
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000ccc:	230a      	movs	r3, #10
 8000cce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4855      	ldr	r0, [pc, #340]	; (8000e2c <MX_GPIO_Init+0x2f0>)
 8000cd8:	f001 f864 	bl	8001da4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOSPIM_P2_IO6_Pin OCTOSPIM_P2_DQS_Pin OCTOSPIM_P2_IO7_Pin OCTOSPIM_P2_CS_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO6_Pin|OCTOSPIM_P2_DQS_Pin|OCTOSPIM_P2_IO7_Pin|OCTOSPIM_P2_CS_Pin;
 8000cdc:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cea:	2303      	movs	r3, #3
 8000cec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000cee:	2305      	movs	r3, #5
 8000cf0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	484d      	ldr	r0, [pc, #308]	; (8000e30 <MX_GPIO_Init+0x2f4>)
 8000cfa:	f001 f853 	bl	8001da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d02:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8000d0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d10:	4619      	mov	r1, r3
 8000d12:	4846      	ldr	r0, [pc, #280]	; (8000e2c <MX_GPIO_Init+0x2f0>)
 8000d14:	f001 f846 	bl	8001da4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D3_Pin DCMI_PIXCLK_Pin DCMI_D2_Pin */
  GPIO_InitStruct.Pin = DCMI_D3_Pin|DCMI_PIXCLK_Pin|DCMI_D2_Pin;
 8000d18:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2300      	movs	r3, #0
 8000d28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000d2a:	230a      	movs	r3, #10
 8000d2c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d32:	4619      	mov	r1, r3
 8000d34:	483a      	ldr	r0, [pc, #232]	; (8000e20 <MX_GPIO_Init+0x2e4>)
 8000d36:	f001 f835 	bl	8001da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 8000d3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d40:	2302      	movs	r3, #2
 8000d42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8000d50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d54:	4619      	mov	r1, r3
 8000d56:	4832      	ldr	r0, [pc, #200]	; (8000e20 <MX_GPIO_Init+0x2e4>)
 8000d58:	f001 f824 	bl	8001da4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOPSIM_P2_IO4_Pin OCTOSPIM_P2_IO5_Pin OCTOSPI_P2_IO3_Pin */
  GPIO_InitStruct.Pin = OCTOPSIM_P2_IO4_Pin|OCTOSPIM_P2_IO5_Pin|OCTOSPI_P2_IO3_Pin;
 8000d5c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d62:	2302      	movs	r3, #2
 8000d64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000d6e:	2305      	movs	r3, #5
 8000d70:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d76:	4619      	mov	r1, r3
 8000d78:	4829      	ldr	r0, [pc, #164]	; (8000e20 <MX_GPIO_Init+0x2e4>)
 8000d7a:	f001 f813 	bl	8001da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_SEL_Pin;
 8000d7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d84:	2301      	movs	r3, #1
 8000d86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 8000d90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d94:	4619      	mov	r1, r3
 8000d96:	4823      	ldr	r0, [pc, #140]	; (8000e24 <MX_GPIO_Init+0x2e8>)
 8000d98:	f001 f804 	bl	8001da4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_14_Pin ARD_15_Pin */
  GPIO_InitStruct.Pin = ARD_14_Pin|ARD_15_Pin;
 8000d9c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000da2:	2312      	movs	r3, #18
 8000da4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000daa:	2303      	movs	r3, #3
 8000dac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000dae:	2304      	movs	r3, #4
 8000db0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000db2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db6:	4619      	mov	r1, r3
 8000db8:	481d      	ldr	r0, [pc, #116]	; (8000e30 <MX_GPIO_Init+0x2f4>)
 8000dba:	f000 fff3 	bl	8001da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_INT_Pin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 8000dbe:	2340      	movs	r3, #64	; 0x40
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dc2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000dc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 8000dcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4814      	ldr	r0, [pc, #80]	; (8000e24 <MX_GPIO_Init+0x2e8>)
 8000dd4:	f000 ffe6 	bl	8001da4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFDATIN3_Pin DF_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFDATIN3_Pin|DF_CKOUT_Pin;
 8000dd8:	2384      	movs	r3, #132	; 0x84
 8000dda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de4:	2300      	movs	r3, #0
 8000de6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000de8:	2306      	movs	r3, #6
 8000dea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df0:	4619      	mov	r1, r3
 8000df2:	480c      	ldr	r0, [pc, #48]	; (8000e24 <MX_GPIO_Init+0x2e8>)
 8000df4:	f000 ffd6 	bl	8001da4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D0_Pin ARD_D1_Pin */
  GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e04:	2303      	movs	r3, #3
 8000e06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000e08:	2308      	movs	r3, #8
 8000e0a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e10:	4619      	mov	r1, r3
 8000e12:	4804      	ldr	r0, [pc, #16]	; (8000e24 <MX_GPIO_Init+0x2e8>)
 8000e14:	f000 ffc6 	bl	8001da4 <HAL_GPIO_Init>
 8000e18:	e00c      	b.n	8000e34 <MX_GPIO_Init+0x2f8>
 8000e1a:	bf00      	nop
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	48001c00 	.word	0x48001c00
 8000e24:	48000800 	.word	0x48000800
 8000e28:	48000400 	.word	0x48000400
 8000e2c:	48002000 	.word	0x48002000
 8000e30:	48001800 	.word	0x48001800

  /*Configure GPIO pins : ARD_A2_Pin ARD_A1_Pin */
  GPIO_InitStruct.Pin = ARD_A2_Pin|ARD_A1_Pin;
 8000e34:	2318      	movs	r3, #24
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e38:	230b      	movs	r3, #11
 8000e3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e44:	4619      	mov	r1, r3
 8000e46:	4849      	ldr	r0, [pc, #292]	; (8000f6c <MX_GPIO_Init+0x430>)
 8000e48:	f000 ffac 	bl	8001da4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A4_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A4_Pin|ARD_A0_Pin;
 8000e4c:	2381      	movs	r3, #129	; 0x81
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e50:	230b      	movs	r3, #11
 8000e52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e62:	f000 ff9f 	bl	8001da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_PWM_Pin */
  GPIO_InitStruct.Pin = STMOD_PWM_Pin;
 8000e66:	2320      	movs	r3, #32
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	2300      	movs	r3, #0
 8000e74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e76:	2301      	movs	r3, #1
 8000e78:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(STMOD_PWM_GPIO_Port, &GPIO_InitStruct);
 8000e7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e7e:	4619      	mov	r1, r3
 8000e80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e84:	f000 ff8e 	bl	8001da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8000e88:	2340      	movs	r3, #64	; 0x40
 8000e8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e94:	2300      	movs	r3, #0
 8000e96:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8000e98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea2:	f000 ff7f 	bl	8001da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8000eba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec4:	f000 ff6e 	bl	8001da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_TE_Pin */
  GPIO_InitStruct.Pin = DSI_TE_Pin;
 8000ec8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_DSI;
 8000eda:	230b      	movs	r3, #11
 8000edc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 8000ede:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4822      	ldr	r0, [pc, #136]	; (8000f70 <MX_GPIO_Init+0x434>)
 8000ee6:	f000 ff5d 	bl	8001da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_HSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin;
 8000eea:	2310      	movs	r3, #16
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000efa:	230a      	movs	r3, #10
 8000efc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8000efe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f02:	4619      	mov	r1, r3
 8000f04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f08:	f000 ff4c 	bl	8001da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_A3_Pin */
  GPIO_InitStruct.Pin = ARD_A3_Pin;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f10:	230b      	movs	r3, #11
 8000f12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 8000f18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4815      	ldr	r0, [pc, #84]	; (8000f74 <MX_GPIO_Init+0x438>)
 8000f20:	f000 ff40 	bl	8001da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8000f24:	2304      	movs	r3, #4
 8000f26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f30:	2300      	movs	r3, #0
 8000f32:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000f34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f38:	4619      	mov	r1, r3
 8000f3a:	480e      	ldr	r0, [pc, #56]	; (8000f74 <MX_GPIO_Init+0x438>)
 8000f3c:	f000 ff32 	bl	8001da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFDATIN1_Pin */
  GPIO_InitStruct.Pin = DFDATIN1_Pin;
 8000f40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000f52:	2306      	movs	r3, #6
 8000f54:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 8000f56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4805      	ldr	r0, [pc, #20]	; (8000f74 <MX_GPIO_Init+0x438>)
 8000f5e:	f000 ff21 	bl	8001da4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f62:	bf00      	nop
 8000f64:	3738      	adds	r7, #56	; 0x38
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	48000800 	.word	0x48000800
 8000f70:	48001400 	.word	0x48001400
 8000f74:	48000400 	.word	0x48000400

08000f78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f7c:	b672      	cpsid	i
}
 8000f7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <Error_Handler+0x8>
	...

08000f84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8a:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <HAL_MspInit+0x44>)
 8000f8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f8e:	4a0e      	ldr	r2, [pc, #56]	; (8000fc8 <HAL_MspInit+0x44>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	6613      	str	r3, [r2, #96]	; 0x60
 8000f96:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <HAL_MspInit+0x44>)
 8000f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <HAL_MspInit+0x44>)
 8000fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fa6:	4a08      	ldr	r2, [pc, #32]	; (8000fc8 <HAL_MspInit+0x44>)
 8000fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fac:	6593      	str	r3, [r2, #88]	; 0x58
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <HAL_MspInit+0x44>)
 8000fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb6:	603b      	str	r3, [r7, #0]
 8000fb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	40021000 	.word	0x40021000

08000fcc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <HAL_CRC_MspInit+0x38>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d10b      	bne.n	8000ff6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000fde:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <HAL_CRC_MspInit+0x3c>)
 8000fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fe2:	4a09      	ldr	r2, [pc, #36]	; (8001008 <HAL_CRC_MspInit+0x3c>)
 8000fe4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fe8:	6493      	str	r3, [r2, #72]	; 0x48
 8000fea:	4b07      	ldr	r3, [pc, #28]	; (8001008 <HAL_CRC_MspInit+0x3c>)
 8000fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000ff6:	bf00      	nop
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	40023000 	.word	0x40023000
 8001008:	40021000 	.word	0x40021000

0800100c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b0b2      	sub	sp, #200	; 0xc8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001024:	f107 0318 	add.w	r3, r7, #24
 8001028:	229c      	movs	r2, #156	; 0x9c
 800102a:	2100      	movs	r1, #0
 800102c:	4618      	mov	r0, r3
 800102e:	f00a f8f5 	bl	800b21c <memset>
  if(hi2c->Instance==I2C1)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a33      	ldr	r2, [pc, #204]	; (8001104 <HAL_I2C_MspInit+0xf8>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d15e      	bne.n	80010fa <HAL_I2C_MspInit+0xee>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800103c:	2340      	movs	r3, #64	; 0x40
 800103e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001040:	2300      	movs	r3, #0
 8001042:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001044:	f107 0318 	add.w	r3, r7, #24
 8001048:	4618      	mov	r0, r3
 800104a:	f002 fa87 	bl	800355c <HAL_RCCEx_PeriphCLKConfig>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001054:	f7ff ff90 	bl	8000f78 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001058:	4b2b      	ldr	r3, [pc, #172]	; (8001108 <HAL_I2C_MspInit+0xfc>)
 800105a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105c:	4a2a      	ldr	r2, [pc, #168]	; (8001108 <HAL_I2C_MspInit+0xfc>)
 800105e:	f043 0302 	orr.w	r3, r3, #2
 8001062:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001064:	4b28      	ldr	r3, [pc, #160]	; (8001108 <HAL_I2C_MspInit+0xfc>)
 8001066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001068:	f003 0302 	and.w	r3, r3, #2
 800106c:	617b      	str	r3, [r7, #20]
 800106e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001070:	4b25      	ldr	r3, [pc, #148]	; (8001108 <HAL_I2C_MspInit+0xfc>)
 8001072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001074:	4a24      	ldr	r2, [pc, #144]	; (8001108 <HAL_I2C_MspInit+0xfc>)
 8001076:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800107a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800107c:	4b22      	ldr	r3, [pc, #136]	; (8001108 <HAL_I2C_MspInit+0xfc>)
 800107e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001084:	613b      	str	r3, [r7, #16]
 8001086:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8001088:	f001 fb84 	bl	8002794 <HAL_PWREx_EnableVddIO2>
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PG13     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin;
 800108c:	2340      	movs	r3, #64	; 0x40
 800108e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001092:	2312      	movs	r3, #18
 8001094:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001098:	2301      	movs	r3, #1
 800109a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109e:	2303      	movs	r3, #3
 80010a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010a4:	2304      	movs	r3, #4
 80010a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(I2C1_SCL_GPIO_Port, &GPIO_InitStruct);
 80010aa:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80010ae:	4619      	mov	r1, r3
 80010b0:	4816      	ldr	r0, [pc, #88]	; (800110c <HAL_I2C_MspInit+0x100>)
 80010b2:	f000 fe77 	bl	8001da4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C1_SDA_Pin;
 80010b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010be:	2312      	movs	r3, #18
 80010c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010c4:	2301      	movs	r3, #1
 80010c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ca:	2303      	movs	r3, #3
 80010cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010d0:	2304      	movs	r3, #4
 80010d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStruct);
 80010d6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80010da:	4619      	mov	r1, r3
 80010dc:	480c      	ldr	r0, [pc, #48]	; (8001110 <HAL_I2C_MspInit+0x104>)
 80010de:	f000 fe61 	bl	8001da4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010e2:	4b09      	ldr	r3, [pc, #36]	; (8001108 <HAL_I2C_MspInit+0xfc>)
 80010e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e6:	4a08      	ldr	r2, [pc, #32]	; (8001108 <HAL_I2C_MspInit+0xfc>)
 80010e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010ec:	6593      	str	r3, [r2, #88]	; 0x58
 80010ee:	4b06      	ldr	r3, [pc, #24]	; (8001108 <HAL_I2C_MspInit+0xfc>)
 80010f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010fa:	bf00      	nop
 80010fc:	37c8      	adds	r7, #200	; 0xc8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40005400 	.word	0x40005400
 8001108:	40021000 	.word	0x40021000
 800110c:	48000400 	.word	0x48000400
 8001110:	48001800 	.word	0x48001800

08001114 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b0b2      	sub	sp, #200	; 0xc8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800112c:	f107 0318 	add.w	r3, r7, #24
 8001130:	229c      	movs	r2, #156	; 0x9c
 8001132:	2100      	movs	r1, #0
 8001134:	4618      	mov	r0, r3
 8001136:	f00a f871 	bl	800b21c <memset>
  if(hsd->Instance==SDMMC1)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a33      	ldr	r2, [pc, #204]	; (800120c <HAL_SD_MspInit+0xf8>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d15f      	bne.n	8001204 <HAL_SD_MspInit+0xf0>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8001144:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001148:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 800114a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800114e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001152:	f107 0318 	add.w	r3, r7, #24
 8001156:	4618      	mov	r0, r3
 8001158:	f002 fa00 	bl	800355c <HAL_RCCEx_PeriphCLKConfig>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 8001162:	f7ff ff09 	bl	8000f78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001166:	4b2a      	ldr	r3, [pc, #168]	; (8001210 <HAL_SD_MspInit+0xfc>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116a:	4a29      	ldr	r2, [pc, #164]	; (8001210 <HAL_SD_MspInit+0xfc>)
 800116c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001170:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001172:	4b27      	ldr	r3, [pc, #156]	; (8001210 <HAL_SD_MspInit+0xfc>)
 8001174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800117a:	617b      	str	r3, [r7, #20]
 800117c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800117e:	4b24      	ldr	r3, [pc, #144]	; (8001210 <HAL_SD_MspInit+0xfc>)
 8001180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001182:	4a23      	ldr	r2, [pc, #140]	; (8001210 <HAL_SD_MspInit+0xfc>)
 8001184:	f043 0308 	orr.w	r3, r3, #8
 8001188:	64d3      	str	r3, [r2, #76]	; 0x4c
 800118a:	4b21      	ldr	r3, [pc, #132]	; (8001210 <HAL_SD_MspInit+0xfc>)
 800118c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118e:	f003 0308 	and.w	r3, r3, #8
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001196:	4b1e      	ldr	r3, [pc, #120]	; (8001210 <HAL_SD_MspInit+0xfc>)
 8001198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119a:	4a1d      	ldr	r2, [pc, #116]	; (8001210 <HAL_SD_MspInit+0xfc>)
 800119c:	f043 0304 	orr.w	r3, r3, #4
 80011a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011a2:	4b1b      	ldr	r3, [pc, #108]	; (8001210 <HAL_SD_MspInit+0xfc>)
 80011a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a6:	f003 0304 	and.w	r3, r3, #4
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 80011ae:	2304      	movs	r3, #4
 80011b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b4:	2302      	movs	r3, #2
 80011b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c0:	2303      	movs	r3, #3
 80011c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80011c6:	230c      	movs	r3, #12
 80011c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 80011cc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80011d0:	4619      	mov	r1, r3
 80011d2:	4810      	ldr	r0, [pc, #64]	; (8001214 <HAL_SD_MspInit+0x100>)
 80011d4:	f000 fde6 	bl	8001da4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D0_Pin
 80011d8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80011dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                          |uSD_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	2302      	movs	r3, #2
 80011e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ec:	2303      	movs	r3, #3
 80011ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80011f2:	230c      	movs	r3, #12
 80011f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80011fc:	4619      	mov	r1, r3
 80011fe:	4806      	ldr	r0, [pc, #24]	; (8001218 <HAL_SD_MspInit+0x104>)
 8001200:	f000 fdd0 	bl	8001da4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001204:	bf00      	nop
 8001206:	37c8      	adds	r7, #200	; 0xc8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	50062400 	.word	0x50062400
 8001210:	40021000 	.word	0x40021000
 8001214:	48000c00 	.word	0x48000c00
 8001218:	48000800 	.word	0x48000800

0800121c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08a      	sub	sp, #40	; 0x28
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a25      	ldr	r2, [pc, #148]	; (80012d0 <HAL_SPI_MspInit+0xb4>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d144      	bne.n	80012c8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800123e:	4b25      	ldr	r3, [pc, #148]	; (80012d4 <HAL_SPI_MspInit+0xb8>)
 8001240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001242:	4a24      	ldr	r2, [pc, #144]	; (80012d4 <HAL_SPI_MspInit+0xb8>)
 8001244:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001248:	6593      	str	r3, [r2, #88]	; 0x58
 800124a:	4b22      	ldr	r3, [pc, #136]	; (80012d4 <HAL_SPI_MspInit+0xb8>)
 800124c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800124e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001256:	4b1f      	ldr	r3, [pc, #124]	; (80012d4 <HAL_SPI_MspInit+0xb8>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125a:	4a1e      	ldr	r2, [pc, #120]	; (80012d4 <HAL_SPI_MspInit+0xb8>)
 800125c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001260:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001262:	4b1c      	ldr	r3, [pc, #112]	; (80012d4 <HAL_SPI_MspInit+0xb8>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800126e:	4b19      	ldr	r3, [pc, #100]	; (80012d4 <HAL_SPI_MspInit+0xb8>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001272:	4a18      	ldr	r2, [pc, #96]	; (80012d4 <HAL_SPI_MspInit+0xb8>)
 8001274:	f043 0302 	orr.w	r3, r3, #2
 8001278:	64d3      	str	r3, [r2, #76]	; 0x4c
 800127a:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <HAL_SPI_MspInit+0xb8>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	60bb      	str	r3, [r7, #8]
 8001284:	68bb      	ldr	r3, [r7, #8]
    PI0     ------> SPI2_NSS
    PB15     ------> SPI2_MOSI
    PB14     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = ARD_10_Pin;
 8001286:	2301      	movs	r3, #1
 8001288:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128a:	2302      	movs	r3, #2
 800128c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001292:	2303      	movs	r3, #3
 8001294:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001296:	2305      	movs	r3, #5
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_10_GPIO_Port, &GPIO_InitStruct);
 800129a:	f107 0314 	add.w	r3, r7, #20
 800129e:	4619      	mov	r1, r3
 80012a0:	480d      	ldr	r0, [pc, #52]	; (80012d8 <HAL_SPI_MspInit+0xbc>)
 80012a2:	f000 fd7f 	bl	8001da4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_MOSI_Pin|SPI2_MISO_Pin|SPI2_CLK_Pin;
 80012a6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80012aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ac:	2302      	movs	r3, #2
 80012ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b4:	2303      	movs	r3, #3
 80012b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012b8:	2305      	movs	r3, #5
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	4619      	mov	r1, r3
 80012c2:	4806      	ldr	r0, [pc, #24]	; (80012dc <HAL_SPI_MspInit+0xc0>)
 80012c4:	f000 fd6e 	bl	8001da4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80012c8:	bf00      	nop
 80012ca:	3728      	adds	r7, #40	; 0x28
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40003800 	.word	0x40003800
 80012d4:	40021000 	.word	0x40021000
 80012d8:	48002000 	.word	0x48002000
 80012dc:	48000400 	.word	0x48000400

080012e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b0b4      	sub	sp, #208	; 0xd0
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012f8:	f107 0320 	add.w	r3, r7, #32
 80012fc:	229c      	movs	r2, #156	; 0x9c
 80012fe:	2100      	movs	r1, #0
 8001300:	4618      	mov	r0, r3
 8001302:	f009 ff8b 	bl	800b21c <memset>
  if(huart->Instance==USART2)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a54      	ldr	r2, [pc, #336]	; (800145c <HAL_UART_MspInit+0x17c>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d13c      	bne.n	800138a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001310:	2302      	movs	r3, #2
 8001312:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001314:	2300      	movs	r3, #0
 8001316:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001318:	f107 0320 	add.w	r3, r7, #32
 800131c:	4618      	mov	r0, r3
 800131e:	f002 f91d 	bl	800355c <HAL_RCCEx_PeriphCLKConfig>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001328:	f7ff fe26 	bl	8000f78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800132c:	4b4c      	ldr	r3, [pc, #304]	; (8001460 <HAL_UART_MspInit+0x180>)
 800132e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001330:	4a4b      	ldr	r2, [pc, #300]	; (8001460 <HAL_UART_MspInit+0x180>)
 8001332:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001336:	6593      	str	r3, [r2, #88]	; 0x58
 8001338:	4b49      	ldr	r3, [pc, #292]	; (8001460 <HAL_UART_MspInit+0x180>)
 800133a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800133c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001340:	61fb      	str	r3, [r7, #28]
 8001342:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001344:	4b46      	ldr	r3, [pc, #280]	; (8001460 <HAL_UART_MspInit+0x180>)
 8001346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001348:	4a45      	ldr	r2, [pc, #276]	; (8001460 <HAL_UART_MspInit+0x180>)
 800134a:	f043 0301 	orr.w	r3, r3, #1
 800134e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001350:	4b43      	ldr	r3, [pc, #268]	; (8001460 <HAL_UART_MspInit+0x180>)
 8001352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001354:	f003 0301 	and.w	r3, r3, #1
 8001358:	61bb      	str	r3, [r7, #24]
 800135a:	69bb      	ldr	r3, [r7, #24]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_TX_Pin;
 800135c:	230c      	movs	r3, #12
 800135e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001362:	2302      	movs	r3, #2
 8001364:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136e:	2303      	movs	r3, #3
 8001370:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001374:	2307      	movs	r3, #7
 8001376:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800137e:	4619      	mov	r1, r3
 8001380:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001384:	f000 fd0e 	bl	8001da4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001388:	e063      	b.n	8001452 <HAL_UART_MspInit+0x172>
  else if(huart->Instance==USART3)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a35      	ldr	r2, [pc, #212]	; (8001464 <HAL_UART_MspInit+0x184>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d15e      	bne.n	8001452 <HAL_UART_MspInit+0x172>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001394:	2304      	movs	r3, #4
 8001396:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001398:	2300      	movs	r3, #0
 800139a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800139c:	f107 0320 	add.w	r3, r7, #32
 80013a0:	4618      	mov	r0, r3
 80013a2:	f002 f8db 	bl	800355c <HAL_RCCEx_PeriphCLKConfig>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 80013ac:	f7ff fde4 	bl	8000f78 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80013b0:	4b2b      	ldr	r3, [pc, #172]	; (8001460 <HAL_UART_MspInit+0x180>)
 80013b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b4:	4a2a      	ldr	r2, [pc, #168]	; (8001460 <HAL_UART_MspInit+0x180>)
 80013b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013ba:	6593      	str	r3, [r2, #88]	; 0x58
 80013bc:	4b28      	ldr	r3, [pc, #160]	; (8001460 <HAL_UART_MspInit+0x180>)
 80013be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013c4:	617b      	str	r3, [r7, #20]
 80013c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c8:	4b25      	ldr	r3, [pc, #148]	; (8001460 <HAL_UART_MspInit+0x180>)
 80013ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013cc:	4a24      	ldr	r2, [pc, #144]	; (8001460 <HAL_UART_MspInit+0x180>)
 80013ce:	f043 0301 	orr.w	r3, r3, #1
 80013d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013d4:	4b22      	ldr	r3, [pc, #136]	; (8001460 <HAL_UART_MspInit+0x180>)
 80013d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	613b      	str	r3, [r7, #16]
 80013de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e0:	4b1f      	ldr	r3, [pc, #124]	; (8001460 <HAL_UART_MspInit+0x180>)
 80013e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e4:	4a1e      	ldr	r2, [pc, #120]	; (8001460 <HAL_UART_MspInit+0x180>)
 80013e6:	f043 0302 	orr.w	r3, r3, #2
 80013ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ec:	4b1c      	ldr	r3, [pc, #112]	; (8001460 <HAL_UART_MspInit+0x180>)
 80013ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f0:	f003 0302 	and.w	r3, r3, #2
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART3_RTS_Pin;
 80013f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001400:	2302      	movs	r3, #2
 8001402:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140c:	2303      	movs	r3, #3
 800140e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001412:	2307      	movs	r3, #7
 8001414:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(USART3_RTS_GPIO_Port, &GPIO_InitStruct);
 8001418:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800141c:	4619      	mov	r1, r3
 800141e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001422:	f000 fcbf 	bl	8001da4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART3_RX_Pin|USART3_TX_Pin;
 8001426:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800142a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	2302      	movs	r3, #2
 8001430:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143a:	2303      	movs	r3, #3
 800143c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001440:	2307      	movs	r3, #7
 8001442:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001446:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800144a:	4619      	mov	r1, r3
 800144c:	4806      	ldr	r0, [pc, #24]	; (8001468 <HAL_UART_MspInit+0x188>)
 800144e:	f000 fca9 	bl	8001da4 <HAL_GPIO_Init>
}
 8001452:	bf00      	nop
 8001454:	37d0      	adds	r7, #208	; 0xd0
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40004400 	.word	0x40004400
 8001460:	40021000 	.word	0x40021000
 8001464:	40004800 	.word	0x40004800
 8001468:	48000400 	.word	0x48000400

0800146c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b0b2      	sub	sp, #200	; 0xc8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001474:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001484:	f107 0318 	add.w	r3, r7, #24
 8001488:	229c      	movs	r2, #156	; 0x9c
 800148a:	2100      	movs	r1, #0
 800148c:	4618      	mov	r0, r3
 800148e:	f009 fec5 	bl	800b21c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800149a:	d16c      	bne.n	8001576 <HAL_PCD_MspInit+0x10a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800149c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014a0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80014a2:	2300      	movs	r3, #0
 80014a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014a8:	f107 0318 	add.w	r3, r7, #24
 80014ac:	4618      	mov	r0, r3
 80014ae:	f002 f855 	bl	800355c <HAL_RCCEx_PeriphCLKConfig>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80014b8:	f7ff fd5e 	bl	8000f78 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014bc:	4b30      	ldr	r3, [pc, #192]	; (8001580 <HAL_PCD_MspInit+0x114>)
 80014be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c0:	4a2f      	ldr	r2, [pc, #188]	; (8001580 <HAL_PCD_MspInit+0x114>)
 80014c2:	f043 0301 	orr.w	r3, r3, #1
 80014c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014c8:	4b2d      	ldr	r3, [pc, #180]	; (8001580 <HAL_PCD_MspInit+0x114>)
 80014ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014cc:	f003 0301 	and.w	r3, r3, #1
 80014d0:	617b      	str	r3, [r7, #20]
 80014d2:	697b      	ldr	r3, [r7, #20]
    PA10     ------> USB_OTG_FS_ID
    PA12     ------> USB_OTG_FS_DP
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = USB_OTGFS_ID_Pin|USB_OTG_FS_DP_Pin|USB_OTGFS_DM_Pin;
 80014d4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80014d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014dc:	2302      	movs	r3, #2
 80014de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e8:	2303      	movs	r3, #3
 80014ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80014ee:	230a      	movs	r3, #10
 80014f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80014f8:	4619      	mov	r1, r3
 80014fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014fe:	f000 fc51 	bl	8001da4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTGFS_VBUS_Pin;
 8001502:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001506:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800150a:	2300      	movs	r3, #0
 800150c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(USB_OTGFS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001516:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800151a:	4619      	mov	r1, r3
 800151c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001520:	f000 fc40 	bl	8001da4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001524:	4b16      	ldr	r3, [pc, #88]	; (8001580 <HAL_PCD_MspInit+0x114>)
 8001526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001528:	4a15      	ldr	r2, [pc, #84]	; (8001580 <HAL_PCD_MspInit+0x114>)
 800152a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800152e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001530:	4b13      	ldr	r3, [pc, #76]	; (8001580 <HAL_PCD_MspInit+0x114>)
 8001532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001534:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001538:	613b      	str	r3, [r7, #16]
 800153a:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800153c:	4b10      	ldr	r3, [pc, #64]	; (8001580 <HAL_PCD_MspInit+0x114>)
 800153e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d114      	bne.n	8001572 <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001548:	4b0d      	ldr	r3, [pc, #52]	; (8001580 <HAL_PCD_MspInit+0x114>)
 800154a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800154c:	4a0c      	ldr	r2, [pc, #48]	; (8001580 <HAL_PCD_MspInit+0x114>)
 800154e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001552:	6593      	str	r3, [r2, #88]	; 0x58
 8001554:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <HAL_PCD_MspInit+0x114>)
 8001556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001560:	f001 f908 	bl	8002774 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001564:	4b06      	ldr	r3, [pc, #24]	; (8001580 <HAL_PCD_MspInit+0x114>)
 8001566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001568:	4a05      	ldr	r2, [pc, #20]	; (8001580 <HAL_PCD_MspInit+0x114>)
 800156a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800156e:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001570:	e001      	b.n	8001576 <HAL_PCD_MspInit+0x10a>
      HAL_PWREx_EnableVddUSB();
 8001572:	f001 f8ff 	bl	8002774 <HAL_PWREx_EnableVddUSB>
}
 8001576:	bf00      	nop
 8001578:	37c8      	adds	r7, #200	; 0xc8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40021000 	.word	0x40021000

08001584 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800158a:	1d3b      	adds	r3, r7, #4
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001598:	4b32      	ldr	r3, [pc, #200]	; (8001664 <HAL_FMC_MspInit+0xe0>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d15d      	bne.n	800165c <HAL_FMC_MspInit+0xd8>
    return;
  }
  FMC_Initialized = 1;
 80015a0:	4b30      	ldr	r3, [pc, #192]	; (8001664 <HAL_FMC_MspInit+0xe0>)
 80015a2:	2201      	movs	r2, #1
 80015a4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80015a6:	4b30      	ldr	r3, [pc, #192]	; (8001668 <HAL_FMC_MspInit+0xe4>)
 80015a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015aa:	4a2f      	ldr	r2, [pc, #188]	; (8001668 <HAL_FMC_MspInit+0xe4>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	6513      	str	r3, [r2, #80]	; 0x50
 80015b2:	4b2d      	ldr	r3, [pc, #180]	; (8001668 <HAL_FMC_MspInit+0xe4>)
 80015b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	603b      	str	r3, [r7, #0]
 80015bc:	683b      	ldr	r3, [r7, #0]
  PF13   ------> FMC_A7
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|PSRAM_A20_Pin|PSRAM_A19_Pin
 80015be:	f64f 739b 	movw	r3, #65435	; 0xff9b
 80015c2:	607b      	str	r3, [r7, #4]
                          |D7_Pin|D6_Pin|D12_Pin|D5_Pin
                          |D11_Pin|D4_Pin|D10_Pin|D9_Pin
                          |D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c4:	2302      	movs	r3, #2
 80015c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015cc:	2303      	movs	r3, #3
 80015ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015d0:	230c      	movs	r3, #12
 80015d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015d4:	1d3b      	adds	r3, r7, #4
 80015d6:	4619      	mov	r1, r3
 80015d8:	4824      	ldr	r0, [pc, #144]	; (800166c <HAL_FMC_MspInit+0xe8>)
 80015da:	f000 fbe3 	bl	8001da4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|PSRAM_OE_Pin|D3_Pin|PSRAM_WE_Pin
 80015de:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 80015e2:	607b      	str	r3, [r7, #4]
                          |PSRAM_WAIT_Pin|PSRAM_CLK_Pin|PSRAM_NE1_Pin|PSRAM_A18_Pin
                          |D1_Pin|D0_Pin|PSRAM_A17_Pin|PSRAM_A16_Pin
                          |D15_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e4:	2302      	movs	r3, #2
 80015e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ec:	2303      	movs	r3, #3
 80015ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015f0:	230c      	movs	r3, #12
 80015f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015f4:	1d3b      	adds	r3, r7, #4
 80015f6:	4619      	mov	r1, r3
 80015f8:	481d      	ldr	r0, [pc, #116]	; (8001670 <HAL_FMC_MspInit+0xec>)
 80015fa:	f000 fbd3 	bl	8001da4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_ADV_Pin;
 80015fe:	2380      	movs	r3, #128	; 0x80
 8001600:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001602:	2302      	movs	r3, #2
 8001604:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160a:	2303      	movs	r3, #3
 800160c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800160e:	230c      	movs	r3, #12
 8001610:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PSRAM_ADV_GPIO_Port, &GPIO_InitStruct);
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	4619      	mov	r1, r3
 8001616:	4817      	ldr	r0, [pc, #92]	; (8001674 <HAL_FMC_MspInit+0xf0>)
 8001618:	f000 fbc4 	bl	8001da4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 800161c:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001620:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001622:	2302      	movs	r3, #2
 8001624:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162a:	2303      	movs	r3, #3
 800162c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800162e:	230c      	movs	r3, #12
 8001630:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001632:	1d3b      	adds	r3, r7, #4
 8001634:	4619      	mov	r1, r3
 8001636:	4810      	ldr	r0, [pc, #64]	; (8001678 <HAL_FMC_MspInit+0xf4>)
 8001638:	f000 fbb4 	bl	8001da4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A15_Pin|PSRAM_A11_Pin
 800163c:	233f      	movs	r3, #63	; 0x3f
 800163e:	607b      	str	r3, [r7, #4]
                          |PSRAM_A12_Pin|PSRAM_A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001640:	2302      	movs	r3, #2
 8001642:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001648:	2303      	movs	r3, #3
 800164a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800164c:	230c      	movs	r3, #12
 800164e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001650:	1d3b      	adds	r3, r7, #4
 8001652:	4619      	mov	r1, r3
 8001654:	4809      	ldr	r0, [pc, #36]	; (800167c <HAL_FMC_MspInit+0xf8>)
 8001656:	f000 fba5 	bl	8001da4 <HAL_GPIO_Init>
 800165a:	e000      	b.n	800165e <HAL_FMC_MspInit+0xda>
    return;
 800165c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20001230 	.word	0x20001230
 8001668:	40021000 	.word	0x40021000
 800166c:	48001000 	.word	0x48001000
 8001670:	48000c00 	.word	0x48000c00
 8001674:	48000400 	.word	0x48000400
 8001678:	48001400 	.word	0x48001400
 800167c:	48001800 	.word	0x48001800

08001680 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001688:	f7ff ff7c 	bl	8001584 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800168c:	bf00      	nop
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b0b0      	sub	sp, #192	; 0xc0
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800169c:	f107 0310 	add.w	r3, r7, #16
 80016a0:	229c      	movs	r2, #156	; 0x9c
 80016a2:	2100      	movs	r1, #0
 80016a4:	4618      	mov	r0, r3
 80016a6:	f009 fdb9 	bl	800b21c <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a32      	ldr	r2, [pc, #200]	; (8001778 <HAL_SAI_MspInit+0xe4>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d15d      	bne.n	8001770 <HAL_SAI_MspInit+0xdc>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80016b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016b8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80016ba:	2300      	movs	r3, #0
 80016bc:	67fb      	str	r3, [r7, #124]	; 0x7c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80016be:	2301      	movs	r3, #1
 80016c0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80016c2:	2301      	movs	r3, #1
 80016c4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80016c6:	2310      	movs	r3, #16
 80016c8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80016ca:	2302      	movs	r3, #2
 80016cc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80016ce:	2302      	movs	r3, #2
 80016d0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80016d2:	2302      	movs	r3, #2
 80016d4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 80016d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016da:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016dc:	f107 0310 	add.w	r3, r7, #16
 80016e0:	4618      	mov	r0, r3
 80016e2:	f001 ff3b 	bl	800355c <HAL_RCCEx_PeriphCLKConfig>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <HAL_SAI_MspInit+0x5c>
    {
      Error_Handler();
 80016ec:	f7ff fc44 	bl	8000f78 <Error_Handler>
    }

    if (SAI1_client == 0)
 80016f0:	4b22      	ldr	r3, [pc, #136]	; (800177c <HAL_SAI_MspInit+0xe8>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d10b      	bne.n	8001710 <HAL_SAI_MspInit+0x7c>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80016f8:	4b21      	ldr	r3, [pc, #132]	; (8001780 <HAL_SAI_MspInit+0xec>)
 80016fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016fc:	4a20      	ldr	r2, [pc, #128]	; (8001780 <HAL_SAI_MspInit+0xec>)
 80016fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001702:	6613      	str	r3, [r2, #96]	; 0x60
 8001704:	4b1e      	ldr	r3, [pc, #120]	; (8001780 <HAL_SAI_MspInit+0xec>)
 8001706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001708:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 8001710:	4b1a      	ldr	r3, [pc, #104]	; (800177c <HAL_SAI_MspInit+0xe8>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	3301      	adds	r3, #1
 8001716:	4a19      	ldr	r2, [pc, #100]	; (800177c <HAL_SAI_MspInit+0xe8>)
 8001718:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PB9     ------> SAI1_FS_A
    PE6     ------> SAI1_SD_A
    PE5     ------> SAI1_SCK_A
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin|SAI1_FSA_Pin;
 800171a:	f44f 7308 	mov.w	r3, #544	; 0x220
 800171e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001722:	2302      	movs	r3, #2
 8001724:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172e:	2300      	movs	r3, #0
 8001730:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001734:	230d      	movs	r3, #13
 8001736:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800173a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800173e:	4619      	mov	r1, r3
 8001740:	4810      	ldr	r0, [pc, #64]	; (8001784 <HAL_SAI_MspInit+0xf0>)
 8001742:	f000 fb2f 	bl	8001da4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCKA_Pin|SAI1_SDA_Pin|SAI1_SCKA_Pin;
 8001746:	2364      	movs	r3, #100	; 0x64
 8001748:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174c:	2302      	movs	r3, #2
 800174e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001758:	2300      	movs	r3, #0
 800175a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800175e:	230d      	movs	r3, #13
 8001760:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001764:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001768:	4619      	mov	r1, r3
 800176a:	4807      	ldr	r0, [pc, #28]	; (8001788 <HAL_SAI_MspInit+0xf4>)
 800176c:	f000 fb1a 	bl	8001da4 <HAL_GPIO_Init>

    }
}
 8001770:	bf00      	nop
 8001772:	37c0      	adds	r7, #192	; 0xc0
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40015404 	.word	0x40015404
 800177c:	20001234 	.word	0x20001234
 8001780:	40021000 	.word	0x40021000
 8001784:	48000400 	.word	0x48000400
 8001788:	48001000 	.word	0x48001000

0800178c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001790:	e7fe      	b.n	8001790 <NMI_Handler+0x4>

08001792 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001796:	e7fe      	b.n	8001796 <HardFault_Handler+0x4>

08001798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800179c:	e7fe      	b.n	800179c <MemManage_Handler+0x4>

0800179e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017a2:	e7fe      	b.n	80017a2 <BusFault_Handler+0x4>

080017a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a8:	e7fe      	b.n	80017a8 <UsageFault_Handler+0x4>

080017aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017d8:	f000 f8c8 	bl	800196c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017dc:	bf00      	nop
 80017de:	bd80      	pop	{r7, pc}

080017e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017e8:	4a14      	ldr	r2, [pc, #80]	; (800183c <_sbrk+0x5c>)
 80017ea:	4b15      	ldr	r3, [pc, #84]	; (8001840 <_sbrk+0x60>)
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017f4:	4b13      	ldr	r3, [pc, #76]	; (8001844 <_sbrk+0x64>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d102      	bne.n	8001802 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017fc:	4b11      	ldr	r3, [pc, #68]	; (8001844 <_sbrk+0x64>)
 80017fe:	4a12      	ldr	r2, [pc, #72]	; (8001848 <_sbrk+0x68>)
 8001800:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001802:	4b10      	ldr	r3, [pc, #64]	; (8001844 <_sbrk+0x64>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4413      	add	r3, r2
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	429a      	cmp	r2, r3
 800180e:	d207      	bcs.n	8001820 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001810:	f009 fcda 	bl	800b1c8 <__errno>
 8001814:	4603      	mov	r3, r0
 8001816:	220c      	movs	r2, #12
 8001818:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800181a:	f04f 33ff 	mov.w	r3, #4294967295
 800181e:	e009      	b.n	8001834 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001820:	4b08      	ldr	r3, [pc, #32]	; (8001844 <_sbrk+0x64>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001826:	4b07      	ldr	r3, [pc, #28]	; (8001844 <_sbrk+0x64>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4413      	add	r3, r2
 800182e:	4a05      	ldr	r2, [pc, #20]	; (8001844 <_sbrk+0x64>)
 8001830:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001832:	68fb      	ldr	r3, [r7, #12]
}
 8001834:	4618      	mov	r0, r3
 8001836:	3718      	adds	r7, #24
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	200a0000 	.word	0x200a0000
 8001840:	00000800 	.word	0x00000800
 8001844:	20001238 	.word	0x20001238
 8001848:	20001578 	.word	0x20001578

0800184c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001850:	4b06      	ldr	r3, [pc, #24]	; (800186c <SystemInit+0x20>)
 8001852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001856:	4a05      	ldr	r2, [pc, #20]	; (800186c <SystemInit+0x20>)
 8001858:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800185c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001870:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001874:	f7ff ffea 	bl	800184c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001878:	480c      	ldr	r0, [pc, #48]	; (80018ac <LoopForever+0x6>)
  ldr r1, =_edata
 800187a:	490d      	ldr	r1, [pc, #52]	; (80018b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800187c:	4a0d      	ldr	r2, [pc, #52]	; (80018b4 <LoopForever+0xe>)
  movs r3, #0
 800187e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001880:	e002      	b.n	8001888 <LoopCopyDataInit>

08001882 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001882:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001884:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001886:	3304      	adds	r3, #4

08001888 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001888:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800188a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800188c:	d3f9      	bcc.n	8001882 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800188e:	4a0a      	ldr	r2, [pc, #40]	; (80018b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001890:	4c0a      	ldr	r4, [pc, #40]	; (80018bc <LoopForever+0x16>)
  movs r3, #0
 8001892:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001894:	e001      	b.n	800189a <LoopFillZerobss>

08001896 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001896:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001898:	3204      	adds	r2, #4

0800189a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800189a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800189c:	d3fb      	bcc.n	8001896 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800189e:	f009 fc99 	bl	800b1d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018a2:	f7fe fe7f 	bl	80005a4 <main>

080018a6 <LoopForever>:

LoopForever:
    b LoopForever
 80018a6:	e7fe      	b.n	80018a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80018a8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80018ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018b0:	20000984 	.word	0x20000984
  ldr r2, =_sidata
 80018b4:	080144a0 	.word	0x080144a0
  ldr r2, =_sbss
 80018b8:	200009a0 	.word	0x200009a0
  ldr r4, =_ebss
 80018bc:	20001574 	.word	0x20001574

080018c0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018c0:	e7fe      	b.n	80018c0 <ADC1_IRQHandler>

080018c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b082      	sub	sp, #8
 80018c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018c8:	2300      	movs	r3, #0
 80018ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018cc:	2003      	movs	r0, #3
 80018ce:	f000 f943 	bl	8001b58 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018d2:	2000      	movs	r0, #0
 80018d4:	f000 f80e 	bl	80018f4 <HAL_InitTick>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d002      	beq.n	80018e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	71fb      	strb	r3, [r7, #7]
 80018e2:	e001      	b.n	80018e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018e4:	f7ff fb4e 	bl	8000f84 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018e8:	79fb      	ldrb	r3, [r7, #7]
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
	...

080018f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018fc:	2300      	movs	r3, #0
 80018fe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001900:	4b17      	ldr	r3, [pc, #92]	; (8001960 <HAL_InitTick+0x6c>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d023      	beq.n	8001950 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001908:	4b16      	ldr	r3, [pc, #88]	; (8001964 <HAL_InitTick+0x70>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	4b14      	ldr	r3, [pc, #80]	; (8001960 <HAL_InitTick+0x6c>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	4619      	mov	r1, r3
 8001912:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001916:	fbb3 f3f1 	udiv	r3, r3, r1
 800191a:	fbb2 f3f3 	udiv	r3, r2, r3
 800191e:	4618      	mov	r0, r3
 8001920:	f000 f941 	bl	8001ba6 <HAL_SYSTICK_Config>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d10f      	bne.n	800194a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2b0f      	cmp	r3, #15
 800192e:	d809      	bhi.n	8001944 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001930:	2200      	movs	r2, #0
 8001932:	6879      	ldr	r1, [r7, #4]
 8001934:	f04f 30ff 	mov.w	r0, #4294967295
 8001938:	f000 f919 	bl	8001b6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800193c:	4a0a      	ldr	r2, [pc, #40]	; (8001968 <HAL_InitTick+0x74>)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6013      	str	r3, [r2, #0]
 8001942:	e007      	b.n	8001954 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	73fb      	strb	r3, [r7, #15]
 8001948:	e004      	b.n	8001954 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	73fb      	strb	r3, [r7, #15]
 800194e:	e001      	b.n	8001954 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001954:	7bfb      	ldrb	r3, [r7, #15]
}
 8001956:	4618      	mov	r0, r3
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20000008 	.word	0x20000008
 8001964:	20000000 	.word	0x20000000
 8001968:	20000004 	.word	0x20000004

0800196c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001970:	4b06      	ldr	r3, [pc, #24]	; (800198c <HAL_IncTick+0x20>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	461a      	mov	r2, r3
 8001976:	4b06      	ldr	r3, [pc, #24]	; (8001990 <HAL_IncTick+0x24>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4413      	add	r3, r2
 800197c:	4a04      	ldr	r2, [pc, #16]	; (8001990 <HAL_IncTick+0x24>)
 800197e:	6013      	str	r3, [r2, #0]
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	20000008 	.word	0x20000008
 8001990:	2000123c 	.word	0x2000123c

08001994 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  return uwTick;
 8001998:	4b03      	ldr	r3, [pc, #12]	; (80019a8 <HAL_GetTick+0x14>)
 800199a:	681b      	ldr	r3, [r3, #0]
}
 800199c:	4618      	mov	r0, r3
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	2000123c 	.word	0x2000123c

080019ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019b4:	f7ff ffee 	bl	8001994 <HAL_GetTick>
 80019b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c4:	d005      	beq.n	80019d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80019c6:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <HAL_Delay+0x44>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	461a      	mov	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	4413      	add	r3, r2
 80019d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019d2:	bf00      	nop
 80019d4:	f7ff ffde 	bl	8001994 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d8f7      	bhi.n	80019d4 <HAL_Delay+0x28>
  {
  }
}
 80019e4:	bf00      	nop
 80019e6:	bf00      	nop
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	20000008 	.word	0x20000008

080019f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a04:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <__NVIC_SetPriorityGrouping+0x44>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a0a:	68ba      	ldr	r2, [r7, #8]
 8001a0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a10:	4013      	ands	r3, r2
 8001a12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a26:	4a04      	ldr	r2, [pc, #16]	; (8001a38 <__NVIC_SetPriorityGrouping+0x44>)
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	60d3      	str	r3, [r2, #12]
}
 8001a2c:	bf00      	nop
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a40:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <__NVIC_GetPriorityGrouping+0x18>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	0a1b      	lsrs	r3, r3, #8
 8001a46:	f003 0307 	and.w	r3, r3, #7
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	6039      	str	r1, [r7, #0]
 8001a62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	db0a      	blt.n	8001a82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	b2da      	uxtb	r2, r3
 8001a70:	490c      	ldr	r1, [pc, #48]	; (8001aa4 <__NVIC_SetPriority+0x4c>)
 8001a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a76:	0112      	lsls	r2, r2, #4
 8001a78:	b2d2      	uxtb	r2, r2
 8001a7a:	440b      	add	r3, r1
 8001a7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a80:	e00a      	b.n	8001a98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	b2da      	uxtb	r2, r3
 8001a86:	4908      	ldr	r1, [pc, #32]	; (8001aa8 <__NVIC_SetPriority+0x50>)
 8001a88:	79fb      	ldrb	r3, [r7, #7]
 8001a8a:	f003 030f 	and.w	r3, r3, #15
 8001a8e:	3b04      	subs	r3, #4
 8001a90:	0112      	lsls	r2, r2, #4
 8001a92:	b2d2      	uxtb	r2, r2
 8001a94:	440b      	add	r3, r1
 8001a96:	761a      	strb	r2, [r3, #24]
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	e000e100 	.word	0xe000e100
 8001aa8:	e000ed00 	.word	0xe000ed00

08001aac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b089      	sub	sp, #36	; 0x24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	f1c3 0307 	rsb	r3, r3, #7
 8001ac6:	2b04      	cmp	r3, #4
 8001ac8:	bf28      	it	cs
 8001aca:	2304      	movcs	r3, #4
 8001acc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	3304      	adds	r3, #4
 8001ad2:	2b06      	cmp	r3, #6
 8001ad4:	d902      	bls.n	8001adc <NVIC_EncodePriority+0x30>
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	3b03      	subs	r3, #3
 8001ada:	e000      	b.n	8001ade <NVIC_EncodePriority+0x32>
 8001adc:	2300      	movs	r3, #0
 8001ade:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43da      	mvns	r2, r3
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	401a      	ands	r2, r3
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001af4:	f04f 31ff 	mov.w	r1, #4294967295
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	fa01 f303 	lsl.w	r3, r1, r3
 8001afe:	43d9      	mvns	r1, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b04:	4313      	orrs	r3, r2
         );
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3724      	adds	r7, #36	; 0x24
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
	...

08001b14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b24:	d301      	bcc.n	8001b2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b26:	2301      	movs	r3, #1
 8001b28:	e00f      	b.n	8001b4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b2a:	4a0a      	ldr	r2, [pc, #40]	; (8001b54 <SysTick_Config+0x40>)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b32:	210f      	movs	r1, #15
 8001b34:	f04f 30ff 	mov.w	r0, #4294967295
 8001b38:	f7ff ff8e 	bl	8001a58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b3c:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <SysTick_Config+0x40>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b42:	4b04      	ldr	r3, [pc, #16]	; (8001b54 <SysTick_Config+0x40>)
 8001b44:	2207      	movs	r2, #7
 8001b46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	e000e010 	.word	0xe000e010

08001b58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f7ff ff47 	bl	80019f4 <__NVIC_SetPriorityGrouping>
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b086      	sub	sp, #24
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	4603      	mov	r3, r0
 8001b76:	60b9      	str	r1, [r7, #8]
 8001b78:	607a      	str	r2, [r7, #4]
 8001b7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b80:	f7ff ff5c 	bl	8001a3c <__NVIC_GetPriorityGrouping>
 8001b84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	68b9      	ldr	r1, [r7, #8]
 8001b8a:	6978      	ldr	r0, [r7, #20]
 8001b8c:	f7ff ff8e 	bl	8001aac <NVIC_EncodePriority>
 8001b90:	4602      	mov	r2, r0
 8001b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b96:	4611      	mov	r1, r2
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff ff5d 	bl	8001a58 <__NVIC_SetPriority>
}
 8001b9e:	bf00      	nop
 8001ba0:	3718      	adds	r7, #24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b082      	sub	sp, #8
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7ff ffb0 	bl	8001b14 <SysTick_Config>
 8001bb4:	4603      	mov	r3, r0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
	...

08001bc0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e054      	b.n	8001c7c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	7f5b      	ldrb	r3, [r3, #29]
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d105      	bne.n	8001be8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7ff f9f2 	bl	8000fcc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2202      	movs	r2, #2
 8001bec:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	791b      	ldrb	r3, [r3, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d10c      	bne.n	8001c10 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a22      	ldr	r2, [pc, #136]	; (8001c84 <HAL_CRC_Init+0xc4>)
 8001bfc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f022 0218 	bic.w	r2, r2, #24
 8001c0c:	609a      	str	r2, [r3, #8]
 8001c0e:	e00c      	b.n	8001c2a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6899      	ldr	r1, [r3, #8]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 f834 	bl	8001c88 <HAL_CRCEx_Polynomial_Set>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e028      	b.n	8001c7c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	795b      	ldrb	r3, [r3, #5]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d105      	bne.n	8001c3e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f04f 32ff 	mov.w	r2, #4294967295
 8001c3a:	611a      	str	r2, [r3, #16]
 8001c3c:	e004      	b.n	8001c48 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	6912      	ldr	r2, [r2, #16]
 8001c46:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	695a      	ldr	r2, [r3, #20]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	699a      	ldr	r2, [r3, #24]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	430a      	orrs	r2, r1
 8001c72:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	04c11db7 	.word	0x04c11db7

08001c88 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b087      	sub	sp, #28
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c94:	2300      	movs	r3, #0
 8001c96:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001c98:	231f      	movs	r3, #31
 8001c9a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d102      	bne.n	8001cac <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	75fb      	strb	r3, [r7, #23]
 8001caa:	e063      	b.n	8001d74 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001cac:	bf00      	nop
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1e5a      	subs	r2, r3, #1
 8001cb2:	613a      	str	r2, [r7, #16]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d009      	beq.n	8001ccc <HAL_CRCEx_Polynomial_Set+0x44>
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	f003 031f 	and.w	r3, r3, #31
 8001cbe:	68ba      	ldr	r2, [r7, #8]
 8001cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d0f0      	beq.n	8001cae <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2b18      	cmp	r3, #24
 8001cd0:	d846      	bhi.n	8001d60 <HAL_CRCEx_Polynomial_Set+0xd8>
 8001cd2:	a201      	add	r2, pc, #4	; (adr r2, 8001cd8 <HAL_CRCEx_Polynomial_Set+0x50>)
 8001cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd8:	08001d67 	.word	0x08001d67
 8001cdc:	08001d61 	.word	0x08001d61
 8001ce0:	08001d61 	.word	0x08001d61
 8001ce4:	08001d61 	.word	0x08001d61
 8001ce8:	08001d61 	.word	0x08001d61
 8001cec:	08001d61 	.word	0x08001d61
 8001cf0:	08001d61 	.word	0x08001d61
 8001cf4:	08001d61 	.word	0x08001d61
 8001cf8:	08001d55 	.word	0x08001d55
 8001cfc:	08001d61 	.word	0x08001d61
 8001d00:	08001d61 	.word	0x08001d61
 8001d04:	08001d61 	.word	0x08001d61
 8001d08:	08001d61 	.word	0x08001d61
 8001d0c:	08001d61 	.word	0x08001d61
 8001d10:	08001d61 	.word	0x08001d61
 8001d14:	08001d61 	.word	0x08001d61
 8001d18:	08001d49 	.word	0x08001d49
 8001d1c:	08001d61 	.word	0x08001d61
 8001d20:	08001d61 	.word	0x08001d61
 8001d24:	08001d61 	.word	0x08001d61
 8001d28:	08001d61 	.word	0x08001d61
 8001d2c:	08001d61 	.word	0x08001d61
 8001d30:	08001d61 	.word	0x08001d61
 8001d34:	08001d61 	.word	0x08001d61
 8001d38:	08001d3d 	.word	0x08001d3d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	2b06      	cmp	r3, #6
 8001d40:	d913      	bls.n	8001d6a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001d46:	e010      	b.n	8001d6a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	2b07      	cmp	r3, #7
 8001d4c:	d90f      	bls.n	8001d6e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001d52:	e00c      	b.n	8001d6e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	2b0f      	cmp	r3, #15
 8001d58:	d90b      	bls.n	8001d72 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001d5e:	e008      	b.n	8001d72 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	75fb      	strb	r3, [r7, #23]
        break;
 8001d64:	e006      	b.n	8001d74 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001d66:	bf00      	nop
 8001d68:	e004      	b.n	8001d74 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001d6a:	bf00      	nop
 8001d6c:	e002      	b.n	8001d74 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001d6e:	bf00      	nop
 8001d70:	e000      	b.n	8001d74 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001d72:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8001d74:	7dfb      	ldrb	r3, [r7, #23]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d10d      	bne.n	8001d96 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68ba      	ldr	r2, [r7, #8]
 8001d80:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f023 0118 	bic.w	r1, r3, #24
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	430a      	orrs	r2, r1
 8001d94:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001d96:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	371c      	adds	r7, #28
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b087      	sub	sp, #28
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dae:	2300      	movs	r3, #0
 8001db0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001db2:	e166      	b.n	8002082 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	2101      	movs	r1, #1
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f000 8158 	beq.w	800207c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 0303 	and.w	r3, r3, #3
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d005      	beq.n	8001de4 <HAL_GPIO_Init+0x40>
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f003 0303 	and.w	r3, r3, #3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d130      	bne.n	8001e46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	2203      	movs	r2, #3
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	43db      	mvns	r3, r3
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	68da      	ldr	r2, [r3, #12]
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	43db      	mvns	r3, r3
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	4013      	ands	r3, r2
 8001e28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	091b      	lsrs	r3, r3, #4
 8001e30:	f003 0201 	and.w	r2, r3, #1
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f003 0303 	and.w	r3, r3, #3
 8001e4e:	2b03      	cmp	r3, #3
 8001e50:	d017      	beq.n	8001e82 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	2203      	movs	r2, #3
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43db      	mvns	r3, r3
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	4013      	ands	r3, r2
 8001e68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	689a      	ldr	r2, [r3, #8]
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 0303 	and.w	r3, r3, #3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d123      	bne.n	8001ed6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	08da      	lsrs	r2, r3, #3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	3208      	adds	r2, #8
 8001e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	220f      	movs	r2, #15
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	691a      	ldr	r2, [r3, #16]
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	f003 0307 	and.w	r3, r3, #7
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	08da      	lsrs	r2, r3, #3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	3208      	adds	r2, #8
 8001ed0:	6939      	ldr	r1, [r7, #16]
 8001ed2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	2203      	movs	r2, #3
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	4013      	ands	r3, r2
 8001eec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f003 0203 	and.w	r2, r3, #3
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f000 80b2 	beq.w	800207c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f18:	4b61      	ldr	r3, [pc, #388]	; (80020a0 <HAL_GPIO_Init+0x2fc>)
 8001f1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f1c:	4a60      	ldr	r2, [pc, #384]	; (80020a0 <HAL_GPIO_Init+0x2fc>)
 8001f1e:	f043 0301 	orr.w	r3, r3, #1
 8001f22:	6613      	str	r3, [r2, #96]	; 0x60
 8001f24:	4b5e      	ldr	r3, [pc, #376]	; (80020a0 <HAL_GPIO_Init+0x2fc>)
 8001f26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	60bb      	str	r3, [r7, #8]
 8001f2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f30:	4a5c      	ldr	r2, [pc, #368]	; (80020a4 <HAL_GPIO_Init+0x300>)
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	089b      	lsrs	r3, r3, #2
 8001f36:	3302      	adds	r3, #2
 8001f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	f003 0303 	and.w	r3, r3, #3
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	220f      	movs	r2, #15
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	4013      	ands	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f5a:	d02b      	beq.n	8001fb4 <HAL_GPIO_Init+0x210>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a52      	ldr	r2, [pc, #328]	; (80020a8 <HAL_GPIO_Init+0x304>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d025      	beq.n	8001fb0 <HAL_GPIO_Init+0x20c>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a51      	ldr	r2, [pc, #324]	; (80020ac <HAL_GPIO_Init+0x308>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d01f      	beq.n	8001fac <HAL_GPIO_Init+0x208>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a50      	ldr	r2, [pc, #320]	; (80020b0 <HAL_GPIO_Init+0x30c>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d019      	beq.n	8001fa8 <HAL_GPIO_Init+0x204>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a4f      	ldr	r2, [pc, #316]	; (80020b4 <HAL_GPIO_Init+0x310>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d013      	beq.n	8001fa4 <HAL_GPIO_Init+0x200>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a4e      	ldr	r2, [pc, #312]	; (80020b8 <HAL_GPIO_Init+0x314>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d00d      	beq.n	8001fa0 <HAL_GPIO_Init+0x1fc>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a4d      	ldr	r2, [pc, #308]	; (80020bc <HAL_GPIO_Init+0x318>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d007      	beq.n	8001f9c <HAL_GPIO_Init+0x1f8>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a4c      	ldr	r2, [pc, #304]	; (80020c0 <HAL_GPIO_Init+0x31c>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d101      	bne.n	8001f98 <HAL_GPIO_Init+0x1f4>
 8001f94:	2307      	movs	r3, #7
 8001f96:	e00e      	b.n	8001fb6 <HAL_GPIO_Init+0x212>
 8001f98:	2308      	movs	r3, #8
 8001f9a:	e00c      	b.n	8001fb6 <HAL_GPIO_Init+0x212>
 8001f9c:	2306      	movs	r3, #6
 8001f9e:	e00a      	b.n	8001fb6 <HAL_GPIO_Init+0x212>
 8001fa0:	2305      	movs	r3, #5
 8001fa2:	e008      	b.n	8001fb6 <HAL_GPIO_Init+0x212>
 8001fa4:	2304      	movs	r3, #4
 8001fa6:	e006      	b.n	8001fb6 <HAL_GPIO_Init+0x212>
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e004      	b.n	8001fb6 <HAL_GPIO_Init+0x212>
 8001fac:	2302      	movs	r3, #2
 8001fae:	e002      	b.n	8001fb6 <HAL_GPIO_Init+0x212>
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e000      	b.n	8001fb6 <HAL_GPIO_Init+0x212>
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	f002 0203 	and.w	r2, r2, #3
 8001fbc:	0092      	lsls	r2, r2, #2
 8001fbe:	4093      	lsls	r3, r2
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fc6:	4937      	ldr	r1, [pc, #220]	; (80020a4 <HAL_GPIO_Init+0x300>)
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	089b      	lsrs	r3, r3, #2
 8001fcc:	3302      	adds	r3, #2
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fd4:	4b3b      	ldr	r3, [pc, #236]	; (80020c4 <HAL_GPIO_Init+0x320>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d003      	beq.n	8001ff8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ff8:	4a32      	ldr	r2, [pc, #200]	; (80020c4 <HAL_GPIO_Init+0x320>)
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ffe:	4b31      	ldr	r3, [pc, #196]	; (80020c4 <HAL_GPIO_Init+0x320>)
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	43db      	mvns	r3, r3
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	4013      	ands	r3, r2
 800200c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	4313      	orrs	r3, r2
 8002020:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002022:	4a28      	ldr	r2, [pc, #160]	; (80020c4 <HAL_GPIO_Init+0x320>)
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002028:	4b26      	ldr	r3, [pc, #152]	; (80020c4 <HAL_GPIO_Init+0x320>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	43db      	mvns	r3, r3
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	4013      	ands	r3, r2
 8002036:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d003      	beq.n	800204c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002044:	693a      	ldr	r2, [r7, #16]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	4313      	orrs	r3, r2
 800204a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800204c:	4a1d      	ldr	r2, [pc, #116]	; (80020c4 <HAL_GPIO_Init+0x320>)
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002052:	4b1c      	ldr	r3, [pc, #112]	; (80020c4 <HAL_GPIO_Init+0x320>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	43db      	mvns	r3, r3
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	4013      	ands	r3, r2
 8002060:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4313      	orrs	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002076:	4a13      	ldr	r2, [pc, #76]	; (80020c4 <HAL_GPIO_Init+0x320>)
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	3301      	adds	r3, #1
 8002080:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	fa22 f303 	lsr.w	r3, r2, r3
 800208c:	2b00      	cmp	r3, #0
 800208e:	f47f ae91 	bne.w	8001db4 <HAL_GPIO_Init+0x10>
  }
}
 8002092:	bf00      	nop
 8002094:	bf00      	nop
 8002096:	371c      	adds	r7, #28
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	40021000 	.word	0x40021000
 80020a4:	40010000 	.word	0x40010000
 80020a8:	48000400 	.word	0x48000400
 80020ac:	48000800 	.word	0x48000800
 80020b0:	48000c00 	.word	0x48000c00
 80020b4:	48001000 	.word	0x48001000
 80020b8:	48001400 	.word	0x48001400
 80020bc:	48001800 	.word	0x48001800
 80020c0:	48001c00 	.word	0x48001c00
 80020c4:	40010400 	.word	0x40010400

080020c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	460b      	mov	r3, r1
 80020d2:	807b      	strh	r3, [r7, #2]
 80020d4:	4613      	mov	r3, r2
 80020d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020d8:	787b      	ldrb	r3, [r7, #1]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020de:	887a      	ldrh	r2, [r7, #2]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020e4:	e002      	b.n	80020ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020e6:	887a      	ldrh	r2, [r7, #2]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e08d      	b.n	8002226 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d106      	bne.n	8002124 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7fe ff74 	bl	800100c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2224      	movs	r2, #36	; 0x24
 8002128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f022 0201 	bic.w	r2, r2, #1
 800213a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685a      	ldr	r2, [r3, #4]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002148:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002158:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d107      	bne.n	8002172 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	689a      	ldr	r2, [r3, #8]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	e006      	b.n	8002180 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800217e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	2b02      	cmp	r3, #2
 8002186:	d108      	bne.n	800219a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	685a      	ldr	r2, [r3, #4]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002196:	605a      	str	r2, [r3, #4]
 8002198:	e007      	b.n	80021aa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	6812      	ldr	r2, [r2, #0]
 80021b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68da      	ldr	r2, [r3, #12]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	691a      	ldr	r2, [r3, #16]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	430a      	orrs	r2, r1
 80021e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	69d9      	ldr	r1, [r3, #28]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a1a      	ldr	r2, [r3, #32]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	430a      	orrs	r2, r1
 80021f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f042 0201 	orr.w	r2, r2, #1
 8002206:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2220      	movs	r2, #32
 8002212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800222e:	b480      	push	{r7}
 8002230:	b083      	sub	sp, #12
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
 8002236:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2b20      	cmp	r3, #32
 8002242:	d138      	bne.n	80022b6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800224a:	2b01      	cmp	r3, #1
 800224c:	d101      	bne.n	8002252 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800224e:	2302      	movs	r3, #2
 8002250:	e032      	b.n	80022b8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2201      	movs	r2, #1
 8002256:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2224      	movs	r2, #36	; 0x24
 800225e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 0201 	bic.w	r2, r2, #1
 8002270:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002280:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	6819      	ldr	r1, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	683a      	ldr	r2, [r7, #0]
 800228e:	430a      	orrs	r2, r1
 8002290:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f042 0201 	orr.w	r2, r2, #1
 80022a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2220      	movs	r2, #32
 80022a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022b2:	2300      	movs	r3, #0
 80022b4:	e000      	b.n	80022b8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80022b6:	2302      	movs	r3, #2
  }
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b20      	cmp	r3, #32
 80022d8:	d139      	bne.n	800234e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d101      	bne.n	80022e8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80022e4:	2302      	movs	r3, #2
 80022e6:	e033      	b.n	8002350 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2224      	movs	r2, #36	; 0x24
 80022f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 0201 	bic.w	r2, r2, #1
 8002306:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002316:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	021b      	lsls	r3, r3, #8
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	4313      	orrs	r3, r2
 8002320:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f042 0201 	orr.w	r2, r2, #1
 8002338:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2220      	movs	r2, #32
 800233e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800234a:	2300      	movs	r3, #0
 800234c:	e000      	b.n	8002350 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800234e:	2302      	movs	r3, #2
  }
}
 8002350:	4618      	mov	r0, r3
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800235c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800235e:	b08f      	sub	sp, #60	; 0x3c
 8002360:	af0a      	add	r7, sp, #40	; 0x28
 8002362:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e116      	b.n	800259c <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b00      	cmp	r3, #0
 800237e:	d106      	bne.n	800238e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f7ff f86f 	bl	800146c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2203      	movs	r2, #3
 8002392:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800239a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d102      	bne.n	80023a8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f006 f893 	bl	80084d8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	603b      	str	r3, [r7, #0]
 80023b8:	687e      	ldr	r6, [r7, #4]
 80023ba:	466d      	mov	r5, sp
 80023bc:	f106 0410 	add.w	r4, r6, #16
 80023c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023cc:	e885 0003 	stmia.w	r5, {r0, r1}
 80023d0:	1d33      	adds	r3, r6, #4
 80023d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023d4:	6838      	ldr	r0, [r7, #0]
 80023d6:	f006 f853 	bl	8008480 <USB_CoreInit>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d005      	beq.n	80023ec <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2202      	movs	r2, #2
 80023e4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e0d7      	b.n	800259c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2100      	movs	r1, #0
 80023f2:	4618      	mov	r0, r3
 80023f4:	f006 f881 	bl	80084fa <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023f8:	2300      	movs	r3, #0
 80023fa:	73fb      	strb	r3, [r7, #15]
 80023fc:	e04a      	b.n	8002494 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023fe:	7bfa      	ldrb	r2, [r7, #15]
 8002400:	6879      	ldr	r1, [r7, #4]
 8002402:	4613      	mov	r3, r2
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	4413      	add	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	440b      	add	r3, r1
 800240c:	333d      	adds	r3, #61	; 0x3d
 800240e:	2201      	movs	r2, #1
 8002410:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002412:	7bfa      	ldrb	r2, [r7, #15]
 8002414:	6879      	ldr	r1, [r7, #4]
 8002416:	4613      	mov	r3, r2
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	4413      	add	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	440b      	add	r3, r1
 8002420:	333c      	adds	r3, #60	; 0x3c
 8002422:	7bfa      	ldrb	r2, [r7, #15]
 8002424:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002426:	7bfa      	ldrb	r2, [r7, #15]
 8002428:	7bfb      	ldrb	r3, [r7, #15]
 800242a:	b298      	uxth	r0, r3
 800242c:	6879      	ldr	r1, [r7, #4]
 800242e:	4613      	mov	r3, r2
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	4413      	add	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	440b      	add	r3, r1
 8002438:	3356      	adds	r3, #86	; 0x56
 800243a:	4602      	mov	r2, r0
 800243c:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800243e:	7bfa      	ldrb	r2, [r7, #15]
 8002440:	6879      	ldr	r1, [r7, #4]
 8002442:	4613      	mov	r3, r2
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	4413      	add	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	440b      	add	r3, r1
 800244c:	3340      	adds	r3, #64	; 0x40
 800244e:	2200      	movs	r2, #0
 8002450:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002452:	7bfa      	ldrb	r2, [r7, #15]
 8002454:	6879      	ldr	r1, [r7, #4]
 8002456:	4613      	mov	r3, r2
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	4413      	add	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	440b      	add	r3, r1
 8002460:	3344      	adds	r3, #68	; 0x44
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002466:	7bfa      	ldrb	r2, [r7, #15]
 8002468:	6879      	ldr	r1, [r7, #4]
 800246a:	4613      	mov	r3, r2
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	4413      	add	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	440b      	add	r3, r1
 8002474:	3348      	adds	r3, #72	; 0x48
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800247a:	7bfa      	ldrb	r2, [r7, #15]
 800247c:	6879      	ldr	r1, [r7, #4]
 800247e:	4613      	mov	r3, r2
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	4413      	add	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	440b      	add	r3, r1
 8002488:	334c      	adds	r3, #76	; 0x4c
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800248e:	7bfb      	ldrb	r3, [r7, #15]
 8002490:	3301      	adds	r3, #1
 8002492:	73fb      	strb	r3, [r7, #15]
 8002494:	7bfa      	ldrb	r2, [r7, #15]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	429a      	cmp	r2, r3
 800249c:	d3af      	bcc.n	80023fe <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800249e:	2300      	movs	r3, #0
 80024a0:	73fb      	strb	r3, [r7, #15]
 80024a2:	e044      	b.n	800252e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80024a4:	7bfa      	ldrb	r2, [r7, #15]
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	4613      	mov	r3, r2
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	4413      	add	r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	440b      	add	r3, r1
 80024b2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80024b6:	2200      	movs	r2, #0
 80024b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80024ba:	7bfa      	ldrb	r2, [r7, #15]
 80024bc:	6879      	ldr	r1, [r7, #4]
 80024be:	4613      	mov	r3, r2
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	4413      	add	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	440b      	add	r3, r1
 80024c8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80024cc:	7bfa      	ldrb	r2, [r7, #15]
 80024ce:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024d0:	7bfa      	ldrb	r2, [r7, #15]
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	4613      	mov	r3, r2
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	4413      	add	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	440b      	add	r3, r1
 80024de:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80024e2:	2200      	movs	r2, #0
 80024e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024e6:	7bfa      	ldrb	r2, [r7, #15]
 80024e8:	6879      	ldr	r1, [r7, #4]
 80024ea:	4613      	mov	r3, r2
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	4413      	add	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	440b      	add	r3, r1
 80024f4:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024fc:	7bfa      	ldrb	r2, [r7, #15]
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	4613      	mov	r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	4413      	add	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	440b      	add	r3, r1
 800250a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002512:	7bfa      	ldrb	r2, [r7, #15]
 8002514:	6879      	ldr	r1, [r7, #4]
 8002516:	4613      	mov	r3, r2
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	4413      	add	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	440b      	add	r3, r1
 8002520:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002528:	7bfb      	ldrb	r3, [r7, #15]
 800252a:	3301      	adds	r3, #1
 800252c:	73fb      	strb	r3, [r7, #15]
 800252e:	7bfa      	ldrb	r2, [r7, #15]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	429a      	cmp	r2, r3
 8002536:	d3b5      	bcc.n	80024a4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	603b      	str	r3, [r7, #0]
 800253e:	687e      	ldr	r6, [r7, #4]
 8002540:	466d      	mov	r5, sp
 8002542:	f106 0410 	add.w	r4, r6, #16
 8002546:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002548:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800254a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800254c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800254e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002552:	e885 0003 	stmia.w	r5, {r0, r1}
 8002556:	1d33      	adds	r3, r6, #4
 8002558:	cb0e      	ldmia	r3, {r1, r2, r3}
 800255a:	6838      	ldr	r0, [r7, #0]
 800255c:	f006 f81a 	bl	8008594 <USB_DevInit>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d005      	beq.n	8002572 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2202      	movs	r2, #2
 800256a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e014      	b.n	800259c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2201      	movs	r2, #1
 800257e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002586:	2b01      	cmp	r3, #1
 8002588:	d102      	bne.n	8002590 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f80a 	bl	80025a4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f006 f9bc 	bl	8008912 <USB_DevDisconnect>

  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080025a4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d6:	f043 0303 	orr.w	r3, r3, #3
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3714      	adds	r7, #20
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80025f0:	4b0d      	ldr	r3, [pc, #52]	; (8002628 <HAL_PWREx_GetVoltageRange+0x3c>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025fc:	d102      	bne.n	8002604 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80025fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002602:	e00b      	b.n	800261c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002604:	4b08      	ldr	r3, [pc, #32]	; (8002628 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002606:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800260a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002612:	d102      	bne.n	800261a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002614:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002618:	e000      	b.n	800261c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800261a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800261c:	4618      	mov	r0, r3
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	40007000 	.word	0x40007000

0800262c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d141      	bne.n	80026be <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800263a:	4b4b      	ldr	r3, [pc, #300]	; (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002642:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002646:	d131      	bne.n	80026ac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002648:	4b47      	ldr	r3, [pc, #284]	; (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800264a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800264e:	4a46      	ldr	r2, [pc, #280]	; (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002650:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002654:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002658:	4b43      	ldr	r3, [pc, #268]	; (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002660:	4a41      	ldr	r2, [pc, #260]	; (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002662:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002666:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002668:	4b40      	ldr	r3, [pc, #256]	; (800276c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2232      	movs	r2, #50	; 0x32
 800266e:	fb02 f303 	mul.w	r3, r2, r3
 8002672:	4a3f      	ldr	r2, [pc, #252]	; (8002770 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002674:	fba2 2303 	umull	r2, r3, r2, r3
 8002678:	0c9b      	lsrs	r3, r3, #18
 800267a:	3301      	adds	r3, #1
 800267c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800267e:	e002      	b.n	8002686 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	3b01      	subs	r3, #1
 8002684:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002686:	4b38      	ldr	r3, [pc, #224]	; (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800268e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002692:	d102      	bne.n	800269a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1f2      	bne.n	8002680 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800269a:	4b33      	ldr	r3, [pc, #204]	; (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026a6:	d158      	bne.n	800275a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e057      	b.n	800275c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026ac:	4b2e      	ldr	r3, [pc, #184]	; (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026b2:	4a2d      	ldr	r2, [pc, #180]	; (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80026bc:	e04d      	b.n	800275a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026c4:	d141      	bne.n	800274a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80026c6:	4b28      	ldr	r3, [pc, #160]	; (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026d2:	d131      	bne.n	8002738 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026d4:	4b24      	ldr	r3, [pc, #144]	; (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026da:	4a23      	ldr	r2, [pc, #140]	; (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026e4:	4b20      	ldr	r3, [pc, #128]	; (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026ec:	4a1e      	ldr	r2, [pc, #120]	; (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80026f4:	4b1d      	ldr	r3, [pc, #116]	; (800276c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2232      	movs	r2, #50	; 0x32
 80026fa:	fb02 f303 	mul.w	r3, r2, r3
 80026fe:	4a1c      	ldr	r2, [pc, #112]	; (8002770 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002700:	fba2 2303 	umull	r2, r3, r2, r3
 8002704:	0c9b      	lsrs	r3, r3, #18
 8002706:	3301      	adds	r3, #1
 8002708:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800270a:	e002      	b.n	8002712 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	3b01      	subs	r3, #1
 8002710:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002712:	4b15      	ldr	r3, [pc, #84]	; (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800271a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800271e:	d102      	bne.n	8002726 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1f2      	bne.n	800270c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002726:	4b10      	ldr	r3, [pc, #64]	; (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800272e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002732:	d112      	bne.n	800275a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e011      	b.n	800275c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002738:	4b0b      	ldr	r3, [pc, #44]	; (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800273a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800273e:	4a0a      	ldr	r2, [pc, #40]	; (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002744:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002748:	e007      	b.n	800275a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800274a:	4b07      	ldr	r3, [pc, #28]	; (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002752:	4a05      	ldr	r2, [pc, #20]	; (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002754:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002758:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	40007000 	.word	0x40007000
 800276c:	20000000 	.word	0x20000000
 8002770:	431bde83 	.word	0x431bde83

08002774 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002778:	4b05      	ldr	r3, [pc, #20]	; (8002790 <HAL_PWREx_EnableVddUSB+0x1c>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	4a04      	ldr	r2, [pc, #16]	; (8002790 <HAL_PWREx_EnableVddUSB+0x1c>)
 800277e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002782:	6053      	str	r3, [r2, #4]
}
 8002784:	bf00      	nop
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	40007000 	.word	0x40007000

08002794 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002798:	4b05      	ldr	r3, [pc, #20]	; (80027b0 <HAL_PWREx_EnableVddIO2+0x1c>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	4a04      	ldr	r2, [pc, #16]	; (80027b0 <HAL_PWREx_EnableVddIO2+0x1c>)
 800279e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027a2:	6053      	str	r3, [r2, #4]
}
 80027a4:	bf00      	nop
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	40007000 	.word	0x40007000

080027b4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b088      	sub	sp, #32
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d102      	bne.n	80027c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	f000 bc08 	b.w	8002fd8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027c8:	4b96      	ldr	r3, [pc, #600]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f003 030c 	and.w	r3, r3, #12
 80027d0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027d2:	4b94      	ldr	r3, [pc, #592]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	f003 0303 	and.w	r3, r3, #3
 80027da:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0310 	and.w	r3, r3, #16
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 80e4 	beq.w	80029b2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d007      	beq.n	8002800 <HAL_RCC_OscConfig+0x4c>
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	2b0c      	cmp	r3, #12
 80027f4:	f040 808b 	bne.w	800290e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	f040 8087 	bne.w	800290e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002800:	4b88      	ldr	r3, [pc, #544]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d005      	beq.n	8002818 <HAL_RCC_OscConfig+0x64>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e3df      	b.n	8002fd8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a1a      	ldr	r2, [r3, #32]
 800281c:	4b81      	ldr	r3, [pc, #516]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0308 	and.w	r3, r3, #8
 8002824:	2b00      	cmp	r3, #0
 8002826:	d004      	beq.n	8002832 <HAL_RCC_OscConfig+0x7e>
 8002828:	4b7e      	ldr	r3, [pc, #504]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002830:	e005      	b.n	800283e <HAL_RCC_OscConfig+0x8a>
 8002832:	4b7c      	ldr	r3, [pc, #496]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 8002834:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002838:	091b      	lsrs	r3, r3, #4
 800283a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800283e:	4293      	cmp	r3, r2
 8002840:	d223      	bcs.n	800288a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	4618      	mov	r0, r3
 8002848:	f000 fdca 	bl	80033e0 <RCC_SetFlashLatencyFromMSIRange>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e3c0      	b.n	8002fd8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002856:	4b73      	ldr	r3, [pc, #460]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a72      	ldr	r2, [pc, #456]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 800285c:	f043 0308 	orr.w	r3, r3, #8
 8002860:	6013      	str	r3, [r2, #0]
 8002862:	4b70      	ldr	r3, [pc, #448]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	496d      	ldr	r1, [pc, #436]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 8002870:	4313      	orrs	r3, r2
 8002872:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002874:	4b6b      	ldr	r3, [pc, #428]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	69db      	ldr	r3, [r3, #28]
 8002880:	021b      	lsls	r3, r3, #8
 8002882:	4968      	ldr	r1, [pc, #416]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 8002884:	4313      	orrs	r3, r2
 8002886:	604b      	str	r3, [r1, #4]
 8002888:	e025      	b.n	80028d6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800288a:	4b66      	ldr	r3, [pc, #408]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a65      	ldr	r2, [pc, #404]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 8002890:	f043 0308 	orr.w	r3, r3, #8
 8002894:	6013      	str	r3, [r2, #0]
 8002896:	4b63      	ldr	r3, [pc, #396]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	4960      	ldr	r1, [pc, #384]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028a8:	4b5e      	ldr	r3, [pc, #376]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	69db      	ldr	r3, [r3, #28]
 80028b4:	021b      	lsls	r3, r3, #8
 80028b6:	495b      	ldr	r1, [pc, #364]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d109      	bne.n	80028d6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f000 fd8a 	bl	80033e0 <RCC_SetFlashLatencyFromMSIRange>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e380      	b.n	8002fd8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028d6:	f000 fcc1 	bl	800325c <HAL_RCC_GetSysClockFreq>
 80028da:	4602      	mov	r2, r0
 80028dc:	4b51      	ldr	r3, [pc, #324]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	091b      	lsrs	r3, r3, #4
 80028e2:	f003 030f 	and.w	r3, r3, #15
 80028e6:	4950      	ldr	r1, [pc, #320]	; (8002a28 <HAL_RCC_OscConfig+0x274>)
 80028e8:	5ccb      	ldrb	r3, [r1, r3]
 80028ea:	f003 031f 	and.w	r3, r3, #31
 80028ee:	fa22 f303 	lsr.w	r3, r2, r3
 80028f2:	4a4e      	ldr	r2, [pc, #312]	; (8002a2c <HAL_RCC_OscConfig+0x278>)
 80028f4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80028f6:	4b4e      	ldr	r3, [pc, #312]	; (8002a30 <HAL_RCC_OscConfig+0x27c>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7fe fffa 	bl	80018f4 <HAL_InitTick>
 8002900:	4603      	mov	r3, r0
 8002902:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002904:	7bfb      	ldrb	r3, [r7, #15]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d052      	beq.n	80029b0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800290a:	7bfb      	ldrb	r3, [r7, #15]
 800290c:	e364      	b.n	8002fd8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d032      	beq.n	800297c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002916:	4b43      	ldr	r3, [pc, #268]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a42      	ldr	r2, [pc, #264]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 800291c:	f043 0301 	orr.w	r3, r3, #1
 8002920:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002922:	f7ff f837 	bl	8001994 <HAL_GetTick>
 8002926:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002928:	e008      	b.n	800293c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800292a:	f7ff f833 	bl	8001994 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b02      	cmp	r3, #2
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e34d      	b.n	8002fd8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800293c:	4b39      	ldr	r3, [pc, #228]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d0f0      	beq.n	800292a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002948:	4b36      	ldr	r3, [pc, #216]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a35      	ldr	r2, [pc, #212]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 800294e:	f043 0308 	orr.w	r3, r3, #8
 8002952:	6013      	str	r3, [r2, #0]
 8002954:	4b33      	ldr	r3, [pc, #204]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	4930      	ldr	r1, [pc, #192]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 8002962:	4313      	orrs	r3, r2
 8002964:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002966:	4b2f      	ldr	r3, [pc, #188]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	69db      	ldr	r3, [r3, #28]
 8002972:	021b      	lsls	r3, r3, #8
 8002974:	492b      	ldr	r1, [pc, #172]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 8002976:	4313      	orrs	r3, r2
 8002978:	604b      	str	r3, [r1, #4]
 800297a:	e01a      	b.n	80029b2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800297c:	4b29      	ldr	r3, [pc, #164]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a28      	ldr	r2, [pc, #160]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 8002982:	f023 0301 	bic.w	r3, r3, #1
 8002986:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002988:	f7ff f804 	bl	8001994 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002990:	f7ff f800 	bl	8001994 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e31a      	b.n	8002fd8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029a2:	4b20      	ldr	r3, [pc, #128]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f0      	bne.n	8002990 <HAL_RCC_OscConfig+0x1dc>
 80029ae:	e000      	b.n	80029b2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d073      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	2b08      	cmp	r3, #8
 80029c2:	d005      	beq.n	80029d0 <HAL_RCC_OscConfig+0x21c>
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	2b0c      	cmp	r3, #12
 80029c8:	d10e      	bne.n	80029e8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	2b03      	cmp	r3, #3
 80029ce:	d10b      	bne.n	80029e8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029d0:	4b14      	ldr	r3, [pc, #80]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d063      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x2f0>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d15f      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e2f7      	b.n	8002fd8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029f0:	d106      	bne.n	8002a00 <HAL_RCC_OscConfig+0x24c>
 80029f2:	4b0c      	ldr	r3, [pc, #48]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a0b      	ldr	r2, [pc, #44]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 80029f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029fc:	6013      	str	r3, [r2, #0]
 80029fe:	e025      	b.n	8002a4c <HAL_RCC_OscConfig+0x298>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a08:	d114      	bne.n	8002a34 <HAL_RCC_OscConfig+0x280>
 8002a0a:	4b06      	ldr	r3, [pc, #24]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a05      	ldr	r2, [pc, #20]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 8002a10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a14:	6013      	str	r3, [r2, #0]
 8002a16:	4b03      	ldr	r3, [pc, #12]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a02      	ldr	r2, [pc, #8]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 8002a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a20:	6013      	str	r3, [r2, #0]
 8002a22:	e013      	b.n	8002a4c <HAL_RCC_OscConfig+0x298>
 8002a24:	40021000 	.word	0x40021000
 8002a28:	0800c920 	.word	0x0800c920
 8002a2c:	20000000 	.word	0x20000000
 8002a30:	20000004 	.word	0x20000004
 8002a34:	4ba0      	ldr	r3, [pc, #640]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a9f      	ldr	r2, [pc, #636]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002a3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a3e:	6013      	str	r3, [r2, #0]
 8002a40:	4b9d      	ldr	r3, [pc, #628]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a9c      	ldr	r2, [pc, #624]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002a46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d013      	beq.n	8002a7c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a54:	f7fe ff9e 	bl	8001994 <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a5c:	f7fe ff9a 	bl	8001994 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b64      	cmp	r3, #100	; 0x64
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e2b4      	b.n	8002fd8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a6e:	4b92      	ldr	r3, [pc, #584]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d0f0      	beq.n	8002a5c <HAL_RCC_OscConfig+0x2a8>
 8002a7a:	e014      	b.n	8002aa6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7c:	f7fe ff8a 	bl	8001994 <HAL_GetTick>
 8002a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a82:	e008      	b.n	8002a96 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a84:	f7fe ff86 	bl	8001994 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b64      	cmp	r3, #100	; 0x64
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e2a0      	b.n	8002fd8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a96:	4b88      	ldr	r3, [pc, #544]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1f0      	bne.n	8002a84 <HAL_RCC_OscConfig+0x2d0>
 8002aa2:	e000      	b.n	8002aa6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d060      	beq.n	8002b74 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	2b04      	cmp	r3, #4
 8002ab6:	d005      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x310>
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	2b0c      	cmp	r3, #12
 8002abc:	d119      	bne.n	8002af2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d116      	bne.n	8002af2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ac4:	4b7c      	ldr	r3, [pc, #496]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d005      	beq.n	8002adc <HAL_RCC_OscConfig+0x328>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d101      	bne.n	8002adc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e27d      	b.n	8002fd8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002adc:	4b76      	ldr	r3, [pc, #472]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	061b      	lsls	r3, r3, #24
 8002aea:	4973      	ldr	r1, [pc, #460]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002af0:	e040      	b.n	8002b74 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d023      	beq.n	8002b42 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002afa:	4b6f      	ldr	r3, [pc, #444]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a6e      	ldr	r2, [pc, #440]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002b00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b06:	f7fe ff45 	bl	8001994 <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b0c:	e008      	b.n	8002b20 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b0e:	f7fe ff41 	bl	8001994 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e25b      	b.n	8002fd8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b20:	4b65      	ldr	r3, [pc, #404]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d0f0      	beq.n	8002b0e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b2c:	4b62      	ldr	r3, [pc, #392]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	061b      	lsls	r3, r3, #24
 8002b3a:	495f      	ldr	r1, [pc, #380]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	604b      	str	r3, [r1, #4]
 8002b40:	e018      	b.n	8002b74 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b42:	4b5d      	ldr	r3, [pc, #372]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a5c      	ldr	r2, [pc, #368]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002b48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b4e:	f7fe ff21 	bl	8001994 <HAL_GetTick>
 8002b52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b54:	e008      	b.n	8002b68 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b56:	f7fe ff1d 	bl	8001994 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e237      	b.n	8002fd8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b68:	4b53      	ldr	r3, [pc, #332]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1f0      	bne.n	8002b56 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0308 	and.w	r3, r3, #8
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d03c      	beq.n	8002bfa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d01c      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b88:	4b4b      	ldr	r3, [pc, #300]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002b8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b8e:	4a4a      	ldr	r2, [pc, #296]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002b90:	f043 0301 	orr.w	r3, r3, #1
 8002b94:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b98:	f7fe fefc 	bl	8001994 <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ba0:	f7fe fef8 	bl	8001994 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e212      	b.n	8002fd8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bb2:	4b41      	ldr	r3, [pc, #260]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002bb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d0ef      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x3ec>
 8002bc0:	e01b      	b.n	8002bfa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bc2:	4b3d      	ldr	r3, [pc, #244]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002bc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bc8:	4a3b      	ldr	r2, [pc, #236]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002bca:	f023 0301 	bic.w	r3, r3, #1
 8002bce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd2:	f7fe fedf 	bl	8001994 <HAL_GetTick>
 8002bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bd8:	e008      	b.n	8002bec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bda:	f7fe fedb 	bl	8001994 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d901      	bls.n	8002bec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e1f5      	b.n	8002fd8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bec:	4b32      	ldr	r3, [pc, #200]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002bee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1ef      	bne.n	8002bda <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0304 	and.w	r3, r3, #4
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f000 80a6 	beq.w	8002d54 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002c0c:	4b2a      	ldr	r3, [pc, #168]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d10d      	bne.n	8002c34 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c18:	4b27      	ldr	r3, [pc, #156]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1c:	4a26      	ldr	r2, [pc, #152]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002c1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c22:	6593      	str	r3, [r2, #88]	; 0x58
 8002c24:	4b24      	ldr	r3, [pc, #144]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c2c:	60bb      	str	r3, [r7, #8]
 8002c2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c30:	2301      	movs	r3, #1
 8002c32:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c34:	4b21      	ldr	r3, [pc, #132]	; (8002cbc <HAL_RCC_OscConfig+0x508>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d118      	bne.n	8002c72 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c40:	4b1e      	ldr	r3, [pc, #120]	; (8002cbc <HAL_RCC_OscConfig+0x508>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a1d      	ldr	r2, [pc, #116]	; (8002cbc <HAL_RCC_OscConfig+0x508>)
 8002c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c4a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c4c:	f7fe fea2 	bl	8001994 <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c54:	f7fe fe9e 	bl	8001994 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e1b8      	b.n	8002fd8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c66:	4b15      	ldr	r3, [pc, #84]	; (8002cbc <HAL_RCC_OscConfig+0x508>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d0f0      	beq.n	8002c54 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d108      	bne.n	8002c8c <HAL_RCC_OscConfig+0x4d8>
 8002c7a:	4b0f      	ldr	r3, [pc, #60]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c80:	4a0d      	ldr	r2, [pc, #52]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002c82:	f043 0301 	orr.w	r3, r3, #1
 8002c86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c8a:	e029      	b.n	8002ce0 <HAL_RCC_OscConfig+0x52c>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	2b05      	cmp	r3, #5
 8002c92:	d115      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x50c>
 8002c94:	4b08      	ldr	r3, [pc, #32]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c9a:	4a07      	ldr	r2, [pc, #28]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002c9c:	f043 0304 	orr.w	r3, r3, #4
 8002ca0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ca4:	4b04      	ldr	r3, [pc, #16]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002caa:	4a03      	ldr	r2, [pc, #12]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002cac:	f043 0301 	orr.w	r3, r3, #1
 8002cb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cb4:	e014      	b.n	8002ce0 <HAL_RCC_OscConfig+0x52c>
 8002cb6:	bf00      	nop
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	40007000 	.word	0x40007000
 8002cc0:	4b9d      	ldr	r3, [pc, #628]	; (8002f38 <HAL_RCC_OscConfig+0x784>)
 8002cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc6:	4a9c      	ldr	r2, [pc, #624]	; (8002f38 <HAL_RCC_OscConfig+0x784>)
 8002cc8:	f023 0301 	bic.w	r3, r3, #1
 8002ccc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cd0:	4b99      	ldr	r3, [pc, #612]	; (8002f38 <HAL_RCC_OscConfig+0x784>)
 8002cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd6:	4a98      	ldr	r2, [pc, #608]	; (8002f38 <HAL_RCC_OscConfig+0x784>)
 8002cd8:	f023 0304 	bic.w	r3, r3, #4
 8002cdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d016      	beq.n	8002d16 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce8:	f7fe fe54 	bl	8001994 <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cee:	e00a      	b.n	8002d06 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cf0:	f7fe fe50 	bl	8001994 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e168      	b.n	8002fd8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d06:	4b8c      	ldr	r3, [pc, #560]	; (8002f38 <HAL_RCC_OscConfig+0x784>)
 8002d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d0ed      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x53c>
 8002d14:	e015      	b.n	8002d42 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d16:	f7fe fe3d 	bl	8001994 <HAL_GetTick>
 8002d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d1c:	e00a      	b.n	8002d34 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d1e:	f7fe fe39 	bl	8001994 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d901      	bls.n	8002d34 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e151      	b.n	8002fd8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d34:	4b80      	ldr	r3, [pc, #512]	; (8002f38 <HAL_RCC_OscConfig+0x784>)
 8002d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1ed      	bne.n	8002d1e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d42:	7ffb      	ldrb	r3, [r7, #31]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d105      	bne.n	8002d54 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d48:	4b7b      	ldr	r3, [pc, #492]	; (8002f38 <HAL_RCC_OscConfig+0x784>)
 8002d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d4c:	4a7a      	ldr	r2, [pc, #488]	; (8002f38 <HAL_RCC_OscConfig+0x784>)
 8002d4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d52:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0320 	and.w	r3, r3, #32
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d03c      	beq.n	8002dda <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d01c      	beq.n	8002da2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d68:	4b73      	ldr	r3, [pc, #460]	; (8002f38 <HAL_RCC_OscConfig+0x784>)
 8002d6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d6e:	4a72      	ldr	r2, [pc, #456]	; (8002f38 <HAL_RCC_OscConfig+0x784>)
 8002d70:	f043 0301 	orr.w	r3, r3, #1
 8002d74:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d78:	f7fe fe0c 	bl	8001994 <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d80:	f7fe fe08 	bl	8001994 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e122      	b.n	8002fd8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d92:	4b69      	ldr	r3, [pc, #420]	; (8002f38 <HAL_RCC_OscConfig+0x784>)
 8002d94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d0ef      	beq.n	8002d80 <HAL_RCC_OscConfig+0x5cc>
 8002da0:	e01b      	b.n	8002dda <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002da2:	4b65      	ldr	r3, [pc, #404]	; (8002f38 <HAL_RCC_OscConfig+0x784>)
 8002da4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002da8:	4a63      	ldr	r2, [pc, #396]	; (8002f38 <HAL_RCC_OscConfig+0x784>)
 8002daa:	f023 0301 	bic.w	r3, r3, #1
 8002dae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db2:	f7fe fdef 	bl	8001994 <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002db8:	e008      	b.n	8002dcc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002dba:	f7fe fdeb 	bl	8001994 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e105      	b.n	8002fd8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002dcc:	4b5a      	ldr	r3, [pc, #360]	; (8002f38 <HAL_RCC_OscConfig+0x784>)
 8002dce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1ef      	bne.n	8002dba <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 80f9 	beq.w	8002fd6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	f040 80cf 	bne.w	8002f8c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002dee:	4b52      	ldr	r3, [pc, #328]	; (8002f38 <HAL_RCC_OscConfig+0x784>)
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	f003 0203 	and.w	r2, r3, #3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d12c      	bne.n	8002e5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d123      	bne.n	8002e5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e1e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d11b      	bne.n	8002e5c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d113      	bne.n	8002e5c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3e:	085b      	lsrs	r3, r3, #1
 8002e40:	3b01      	subs	r3, #1
 8002e42:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d109      	bne.n	8002e5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	085b      	lsrs	r3, r3, #1
 8002e54:	3b01      	subs	r3, #1
 8002e56:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d071      	beq.n	8002f40 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	2b0c      	cmp	r3, #12
 8002e60:	d068      	beq.n	8002f34 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002e62:	4b35      	ldr	r3, [pc, #212]	; (8002f38 <HAL_RCC_OscConfig+0x784>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d105      	bne.n	8002e7a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002e6e:	4b32      	ldr	r3, [pc, #200]	; (8002f38 <HAL_RCC_OscConfig+0x784>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e0ac      	b.n	8002fd8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e7e:	4b2e      	ldr	r3, [pc, #184]	; (8002f38 <HAL_RCC_OscConfig+0x784>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a2d      	ldr	r2, [pc, #180]	; (8002f38 <HAL_RCC_OscConfig+0x784>)
 8002e84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e88:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e8a:	f7fe fd83 	bl	8001994 <HAL_GetTick>
 8002e8e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e90:	e008      	b.n	8002ea4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e92:	f7fe fd7f 	bl	8001994 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e099      	b.n	8002fd8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ea4:	4b24      	ldr	r3, [pc, #144]	; (8002f38 <HAL_RCC_OscConfig+0x784>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1f0      	bne.n	8002e92 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002eb0:	4b21      	ldr	r3, [pc, #132]	; (8002f38 <HAL_RCC_OscConfig+0x784>)
 8002eb2:	68da      	ldr	r2, [r3, #12]
 8002eb4:	4b21      	ldr	r3, [pc, #132]	; (8002f3c <HAL_RCC_OscConfig+0x788>)
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002ec0:	3a01      	subs	r2, #1
 8002ec2:	0112      	lsls	r2, r2, #4
 8002ec4:	4311      	orrs	r1, r2
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002eca:	0212      	lsls	r2, r2, #8
 8002ecc:	4311      	orrs	r1, r2
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ed2:	0852      	lsrs	r2, r2, #1
 8002ed4:	3a01      	subs	r2, #1
 8002ed6:	0552      	lsls	r2, r2, #21
 8002ed8:	4311      	orrs	r1, r2
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ede:	0852      	lsrs	r2, r2, #1
 8002ee0:	3a01      	subs	r2, #1
 8002ee2:	0652      	lsls	r2, r2, #25
 8002ee4:	4311      	orrs	r1, r2
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002eea:	06d2      	lsls	r2, r2, #27
 8002eec:	430a      	orrs	r2, r1
 8002eee:	4912      	ldr	r1, [pc, #72]	; (8002f38 <HAL_RCC_OscConfig+0x784>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ef4:	4b10      	ldr	r3, [pc, #64]	; (8002f38 <HAL_RCC_OscConfig+0x784>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a0f      	ldr	r2, [pc, #60]	; (8002f38 <HAL_RCC_OscConfig+0x784>)
 8002efa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002efe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f00:	4b0d      	ldr	r3, [pc, #52]	; (8002f38 <HAL_RCC_OscConfig+0x784>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	4a0c      	ldr	r2, [pc, #48]	; (8002f38 <HAL_RCC_OscConfig+0x784>)
 8002f06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f0a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f0c:	f7fe fd42 	bl	8001994 <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f14:	f7fe fd3e 	bl	8001994 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e058      	b.n	8002fd8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f26:	4b04      	ldr	r3, [pc, #16]	; (8002f38 <HAL_RCC_OscConfig+0x784>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d0f0      	beq.n	8002f14 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f32:	e050      	b.n	8002fd6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e04f      	b.n	8002fd8 <HAL_RCC_OscConfig+0x824>
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f40:	4b27      	ldr	r3, [pc, #156]	; (8002fe0 <HAL_RCC_OscConfig+0x82c>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d144      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002f4c:	4b24      	ldr	r3, [pc, #144]	; (8002fe0 <HAL_RCC_OscConfig+0x82c>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a23      	ldr	r2, [pc, #140]	; (8002fe0 <HAL_RCC_OscConfig+0x82c>)
 8002f52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f56:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f58:	4b21      	ldr	r3, [pc, #132]	; (8002fe0 <HAL_RCC_OscConfig+0x82c>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	4a20      	ldr	r2, [pc, #128]	; (8002fe0 <HAL_RCC_OscConfig+0x82c>)
 8002f5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f62:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f64:	f7fe fd16 	bl	8001994 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f6c:	f7fe fd12 	bl	8001994 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e02c      	b.n	8002fd8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f7e:	4b18      	ldr	r3, [pc, #96]	; (8002fe0 <HAL_RCC_OscConfig+0x82c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0f0      	beq.n	8002f6c <HAL_RCC_OscConfig+0x7b8>
 8002f8a:	e024      	b.n	8002fd6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	2b0c      	cmp	r3, #12
 8002f90:	d01f      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f92:	4b13      	ldr	r3, [pc, #76]	; (8002fe0 <HAL_RCC_OscConfig+0x82c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a12      	ldr	r2, [pc, #72]	; (8002fe0 <HAL_RCC_OscConfig+0x82c>)
 8002f98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9e:	f7fe fcf9 	bl	8001994 <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa6:	f7fe fcf5 	bl	8001994 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e00f      	b.n	8002fd8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fb8:	4b09      	ldr	r3, [pc, #36]	; (8002fe0 <HAL_RCC_OscConfig+0x82c>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1f0      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002fc4:	4b06      	ldr	r3, [pc, #24]	; (8002fe0 <HAL_RCC_OscConfig+0x82c>)
 8002fc6:	68da      	ldr	r2, [r3, #12]
 8002fc8:	4905      	ldr	r1, [pc, #20]	; (8002fe0 <HAL_RCC_OscConfig+0x82c>)
 8002fca:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <HAL_RCC_OscConfig+0x830>)
 8002fcc:	4013      	ands	r3, r2
 8002fce:	60cb      	str	r3, [r1, #12]
 8002fd0:	e001      	b.n	8002fd6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e000      	b.n	8002fd8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3720      	adds	r7, #32
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	feeefffc 	.word	0xfeeefffc

08002fe8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d101      	bne.n	8003000 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e11d      	b.n	800323c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003000:	4b90      	ldr	r3, [pc, #576]	; (8003244 <HAL_RCC_ClockConfig+0x25c>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 030f 	and.w	r3, r3, #15
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	429a      	cmp	r2, r3
 800300c:	d910      	bls.n	8003030 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300e:	4b8d      	ldr	r3, [pc, #564]	; (8003244 <HAL_RCC_ClockConfig+0x25c>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f023 020f 	bic.w	r2, r3, #15
 8003016:	498b      	ldr	r1, [pc, #556]	; (8003244 <HAL_RCC_ClockConfig+0x25c>)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	4313      	orrs	r3, r2
 800301c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800301e:	4b89      	ldr	r3, [pc, #548]	; (8003244 <HAL_RCC_ClockConfig+0x25c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 030f 	and.w	r3, r3, #15
 8003026:	683a      	ldr	r2, [r7, #0]
 8003028:	429a      	cmp	r2, r3
 800302a:	d001      	beq.n	8003030 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e105      	b.n	800323c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0302 	and.w	r3, r3, #2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d010      	beq.n	800305e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689a      	ldr	r2, [r3, #8]
 8003040:	4b81      	ldr	r3, [pc, #516]	; (8003248 <HAL_RCC_ClockConfig+0x260>)
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003048:	429a      	cmp	r2, r3
 800304a:	d908      	bls.n	800305e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800304c:	4b7e      	ldr	r3, [pc, #504]	; (8003248 <HAL_RCC_ClockConfig+0x260>)
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	497b      	ldr	r1, [pc, #492]	; (8003248 <HAL_RCC_ClockConfig+0x260>)
 800305a:	4313      	orrs	r3, r2
 800305c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b00      	cmp	r3, #0
 8003068:	d079      	beq.n	800315e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	2b03      	cmp	r3, #3
 8003070:	d11e      	bne.n	80030b0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003072:	4b75      	ldr	r3, [pc, #468]	; (8003248 <HAL_RCC_ClockConfig+0x260>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e0dc      	b.n	800323c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003082:	f000 fa07 	bl	8003494 <RCC_GetSysClockFreqFromPLLSource>
 8003086:	4603      	mov	r3, r0
 8003088:	4a70      	ldr	r2, [pc, #448]	; (800324c <HAL_RCC_ClockConfig+0x264>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d946      	bls.n	800311c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800308e:	4b6e      	ldr	r3, [pc, #440]	; (8003248 <HAL_RCC_ClockConfig+0x260>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d140      	bne.n	800311c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800309a:	4b6b      	ldr	r3, [pc, #428]	; (8003248 <HAL_RCC_ClockConfig+0x260>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030a2:	4a69      	ldr	r2, [pc, #420]	; (8003248 <HAL_RCC_ClockConfig+0x260>)
 80030a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030a8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80030aa:	2380      	movs	r3, #128	; 0x80
 80030ac:	617b      	str	r3, [r7, #20]
 80030ae:	e035      	b.n	800311c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d107      	bne.n	80030c8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030b8:	4b63      	ldr	r3, [pc, #396]	; (8003248 <HAL_RCC_ClockConfig+0x260>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d115      	bne.n	80030f0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e0b9      	b.n	800323c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d107      	bne.n	80030e0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030d0:	4b5d      	ldr	r3, [pc, #372]	; (8003248 <HAL_RCC_ClockConfig+0x260>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d109      	bne.n	80030f0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e0ad      	b.n	800323c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030e0:	4b59      	ldr	r3, [pc, #356]	; (8003248 <HAL_RCC_ClockConfig+0x260>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d101      	bne.n	80030f0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e0a5      	b.n	800323c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80030f0:	f000 f8b4 	bl	800325c <HAL_RCC_GetSysClockFreq>
 80030f4:	4603      	mov	r3, r0
 80030f6:	4a55      	ldr	r2, [pc, #340]	; (800324c <HAL_RCC_ClockConfig+0x264>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d90f      	bls.n	800311c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80030fc:	4b52      	ldr	r3, [pc, #328]	; (8003248 <HAL_RCC_ClockConfig+0x260>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d109      	bne.n	800311c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003108:	4b4f      	ldr	r3, [pc, #316]	; (8003248 <HAL_RCC_ClockConfig+0x260>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003110:	4a4d      	ldr	r2, [pc, #308]	; (8003248 <HAL_RCC_ClockConfig+0x260>)
 8003112:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003116:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003118:	2380      	movs	r3, #128	; 0x80
 800311a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800311c:	4b4a      	ldr	r3, [pc, #296]	; (8003248 <HAL_RCC_ClockConfig+0x260>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f023 0203 	bic.w	r2, r3, #3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	4947      	ldr	r1, [pc, #284]	; (8003248 <HAL_RCC_ClockConfig+0x260>)
 800312a:	4313      	orrs	r3, r2
 800312c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800312e:	f7fe fc31 	bl	8001994 <HAL_GetTick>
 8003132:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003134:	e00a      	b.n	800314c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003136:	f7fe fc2d 	bl	8001994 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	f241 3288 	movw	r2, #5000	; 0x1388
 8003144:	4293      	cmp	r3, r2
 8003146:	d901      	bls.n	800314c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e077      	b.n	800323c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800314c:	4b3e      	ldr	r3, [pc, #248]	; (8003248 <HAL_RCC_ClockConfig+0x260>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f003 020c 	and.w	r2, r3, #12
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	429a      	cmp	r2, r3
 800315c:	d1eb      	bne.n	8003136 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	2b80      	cmp	r3, #128	; 0x80
 8003162:	d105      	bne.n	8003170 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003164:	4b38      	ldr	r3, [pc, #224]	; (8003248 <HAL_RCC_ClockConfig+0x260>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	4a37      	ldr	r2, [pc, #220]	; (8003248 <HAL_RCC_ClockConfig+0x260>)
 800316a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800316e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d010      	beq.n	800319e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689a      	ldr	r2, [r3, #8]
 8003180:	4b31      	ldr	r3, [pc, #196]	; (8003248 <HAL_RCC_ClockConfig+0x260>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003188:	429a      	cmp	r2, r3
 800318a:	d208      	bcs.n	800319e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800318c:	4b2e      	ldr	r3, [pc, #184]	; (8003248 <HAL_RCC_ClockConfig+0x260>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	492b      	ldr	r1, [pc, #172]	; (8003248 <HAL_RCC_ClockConfig+0x260>)
 800319a:	4313      	orrs	r3, r2
 800319c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800319e:	4b29      	ldr	r3, [pc, #164]	; (8003244 <HAL_RCC_ClockConfig+0x25c>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 030f 	and.w	r3, r3, #15
 80031a6:	683a      	ldr	r2, [r7, #0]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d210      	bcs.n	80031ce <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ac:	4b25      	ldr	r3, [pc, #148]	; (8003244 <HAL_RCC_ClockConfig+0x25c>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f023 020f 	bic.w	r2, r3, #15
 80031b4:	4923      	ldr	r1, [pc, #140]	; (8003244 <HAL_RCC_ClockConfig+0x25c>)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031bc:	4b21      	ldr	r3, [pc, #132]	; (8003244 <HAL_RCC_ClockConfig+0x25c>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 030f 	and.w	r3, r3, #15
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d001      	beq.n	80031ce <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e036      	b.n	800323c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0304 	and.w	r3, r3, #4
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d008      	beq.n	80031ec <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031da:	4b1b      	ldr	r3, [pc, #108]	; (8003248 <HAL_RCC_ClockConfig+0x260>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	4918      	ldr	r1, [pc, #96]	; (8003248 <HAL_RCC_ClockConfig+0x260>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0308 	and.w	r3, r3, #8
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d009      	beq.n	800320c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031f8:	4b13      	ldr	r3, [pc, #76]	; (8003248 <HAL_RCC_ClockConfig+0x260>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	4910      	ldr	r1, [pc, #64]	; (8003248 <HAL_RCC_ClockConfig+0x260>)
 8003208:	4313      	orrs	r3, r2
 800320a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800320c:	f000 f826 	bl	800325c <HAL_RCC_GetSysClockFreq>
 8003210:	4602      	mov	r2, r0
 8003212:	4b0d      	ldr	r3, [pc, #52]	; (8003248 <HAL_RCC_ClockConfig+0x260>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	091b      	lsrs	r3, r3, #4
 8003218:	f003 030f 	and.w	r3, r3, #15
 800321c:	490c      	ldr	r1, [pc, #48]	; (8003250 <HAL_RCC_ClockConfig+0x268>)
 800321e:	5ccb      	ldrb	r3, [r1, r3]
 8003220:	f003 031f 	and.w	r3, r3, #31
 8003224:	fa22 f303 	lsr.w	r3, r2, r3
 8003228:	4a0a      	ldr	r2, [pc, #40]	; (8003254 <HAL_RCC_ClockConfig+0x26c>)
 800322a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800322c:	4b0a      	ldr	r3, [pc, #40]	; (8003258 <HAL_RCC_ClockConfig+0x270>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4618      	mov	r0, r3
 8003232:	f7fe fb5f 	bl	80018f4 <HAL_InitTick>
 8003236:	4603      	mov	r3, r0
 8003238:	73fb      	strb	r3, [r7, #15]

  return status;
 800323a:	7bfb      	ldrb	r3, [r7, #15]
}
 800323c:	4618      	mov	r0, r3
 800323e:	3718      	adds	r7, #24
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	40022000 	.word	0x40022000
 8003248:	40021000 	.word	0x40021000
 800324c:	04c4b400 	.word	0x04c4b400
 8003250:	0800c920 	.word	0x0800c920
 8003254:	20000000 	.word	0x20000000
 8003258:	20000004 	.word	0x20000004

0800325c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800325c:	b480      	push	{r7}
 800325e:	b089      	sub	sp, #36	; 0x24
 8003260:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003262:	2300      	movs	r3, #0
 8003264:	61fb      	str	r3, [r7, #28]
 8003266:	2300      	movs	r3, #0
 8003268:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800326a:	4b3e      	ldr	r3, [pc, #248]	; (8003364 <HAL_RCC_GetSysClockFreq+0x108>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f003 030c 	and.w	r3, r3, #12
 8003272:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003274:	4b3b      	ldr	r3, [pc, #236]	; (8003364 <HAL_RCC_GetSysClockFreq+0x108>)
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	f003 0303 	and.w	r3, r3, #3
 800327c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d005      	beq.n	8003290 <HAL_RCC_GetSysClockFreq+0x34>
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	2b0c      	cmp	r3, #12
 8003288:	d121      	bne.n	80032ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d11e      	bne.n	80032ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003290:	4b34      	ldr	r3, [pc, #208]	; (8003364 <HAL_RCC_GetSysClockFreq+0x108>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0308 	and.w	r3, r3, #8
 8003298:	2b00      	cmp	r3, #0
 800329a:	d107      	bne.n	80032ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800329c:	4b31      	ldr	r3, [pc, #196]	; (8003364 <HAL_RCC_GetSysClockFreq+0x108>)
 800329e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032a2:	0a1b      	lsrs	r3, r3, #8
 80032a4:	f003 030f 	and.w	r3, r3, #15
 80032a8:	61fb      	str	r3, [r7, #28]
 80032aa:	e005      	b.n	80032b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80032ac:	4b2d      	ldr	r3, [pc, #180]	; (8003364 <HAL_RCC_GetSysClockFreq+0x108>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	091b      	lsrs	r3, r3, #4
 80032b2:	f003 030f 	and.w	r3, r3, #15
 80032b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80032b8:	4a2b      	ldr	r2, [pc, #172]	; (8003368 <HAL_RCC_GetSysClockFreq+0x10c>)
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d10d      	bne.n	80032e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032cc:	e00a      	b.n	80032e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	2b04      	cmp	r3, #4
 80032d2:	d102      	bne.n	80032da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80032d4:	4b25      	ldr	r3, [pc, #148]	; (800336c <HAL_RCC_GetSysClockFreq+0x110>)
 80032d6:	61bb      	str	r3, [r7, #24]
 80032d8:	e004      	b.n	80032e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	2b08      	cmp	r3, #8
 80032de:	d101      	bne.n	80032e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80032e0:	4b22      	ldr	r3, [pc, #136]	; (800336c <HAL_RCC_GetSysClockFreq+0x110>)
 80032e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	2b0c      	cmp	r3, #12
 80032e8:	d134      	bne.n	8003354 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80032ea:	4b1e      	ldr	r3, [pc, #120]	; (8003364 <HAL_RCC_GetSysClockFreq+0x108>)
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	f003 0303 	and.w	r3, r3, #3
 80032f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d003      	beq.n	8003302 <HAL_RCC_GetSysClockFreq+0xa6>
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	2b03      	cmp	r3, #3
 80032fe:	d003      	beq.n	8003308 <HAL_RCC_GetSysClockFreq+0xac>
 8003300:	e005      	b.n	800330e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003302:	4b1a      	ldr	r3, [pc, #104]	; (800336c <HAL_RCC_GetSysClockFreq+0x110>)
 8003304:	617b      	str	r3, [r7, #20]
      break;
 8003306:	e005      	b.n	8003314 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003308:	4b18      	ldr	r3, [pc, #96]	; (800336c <HAL_RCC_GetSysClockFreq+0x110>)
 800330a:	617b      	str	r3, [r7, #20]
      break;
 800330c:	e002      	b.n	8003314 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	617b      	str	r3, [r7, #20]
      break;
 8003312:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003314:	4b13      	ldr	r3, [pc, #76]	; (8003364 <HAL_RCC_GetSysClockFreq+0x108>)
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	091b      	lsrs	r3, r3, #4
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	3301      	adds	r3, #1
 8003320:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003322:	4b10      	ldr	r3, [pc, #64]	; (8003364 <HAL_RCC_GetSysClockFreq+0x108>)
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	0a1b      	lsrs	r3, r3, #8
 8003328:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800332c:	697a      	ldr	r2, [r7, #20]
 800332e:	fb03 f202 	mul.w	r2, r3, r2
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	fbb2 f3f3 	udiv	r3, r2, r3
 8003338:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800333a:	4b0a      	ldr	r3, [pc, #40]	; (8003364 <HAL_RCC_GetSysClockFreq+0x108>)
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	0e5b      	lsrs	r3, r3, #25
 8003340:	f003 0303 	and.w	r3, r3, #3
 8003344:	3301      	adds	r3, #1
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003352:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003354:	69bb      	ldr	r3, [r7, #24]
}
 8003356:	4618      	mov	r0, r3
 8003358:	3724      	adds	r7, #36	; 0x24
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	40021000 	.word	0x40021000
 8003368:	0800c938 	.word	0x0800c938
 800336c:	00f42400 	.word	0x00f42400

08003370 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003374:	4b03      	ldr	r3, [pc, #12]	; (8003384 <HAL_RCC_GetHCLKFreq+0x14>)
 8003376:	681b      	ldr	r3, [r3, #0]
}
 8003378:	4618      	mov	r0, r3
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	20000000 	.word	0x20000000

08003388 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800338c:	f7ff fff0 	bl	8003370 <HAL_RCC_GetHCLKFreq>
 8003390:	4602      	mov	r2, r0
 8003392:	4b06      	ldr	r3, [pc, #24]	; (80033ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	0a1b      	lsrs	r3, r3, #8
 8003398:	f003 0307 	and.w	r3, r3, #7
 800339c:	4904      	ldr	r1, [pc, #16]	; (80033b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800339e:	5ccb      	ldrb	r3, [r1, r3]
 80033a0:	f003 031f 	and.w	r3, r3, #31
 80033a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	40021000 	.word	0x40021000
 80033b0:	0800c930 	.word	0x0800c930

080033b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80033b8:	f7ff ffda 	bl	8003370 <HAL_RCC_GetHCLKFreq>
 80033bc:	4602      	mov	r2, r0
 80033be:	4b06      	ldr	r3, [pc, #24]	; (80033d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	0adb      	lsrs	r3, r3, #11
 80033c4:	f003 0307 	and.w	r3, r3, #7
 80033c8:	4904      	ldr	r1, [pc, #16]	; (80033dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80033ca:	5ccb      	ldrb	r3, [r1, r3]
 80033cc:	f003 031f 	and.w	r3, r3, #31
 80033d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	40021000 	.word	0x40021000
 80033dc:	0800c930 	.word	0x0800c930

080033e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80033e8:	2300      	movs	r3, #0
 80033ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80033ec:	4b27      	ldr	r3, [pc, #156]	; (800348c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80033ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d003      	beq.n	8003400 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80033f8:	f7ff f8f8 	bl	80025ec <HAL_PWREx_GetVoltageRange>
 80033fc:	6178      	str	r0, [r7, #20]
 80033fe:	e014      	b.n	800342a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003400:	4b22      	ldr	r3, [pc, #136]	; (800348c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003404:	4a21      	ldr	r2, [pc, #132]	; (800348c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800340a:	6593      	str	r3, [r2, #88]	; 0x58
 800340c:	4b1f      	ldr	r3, [pc, #124]	; (800348c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800340e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003414:	60fb      	str	r3, [r7, #12]
 8003416:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003418:	f7ff f8e8 	bl	80025ec <HAL_PWREx_GetVoltageRange>
 800341c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800341e:	4b1b      	ldr	r3, [pc, #108]	; (800348c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003422:	4a1a      	ldr	r2, [pc, #104]	; (800348c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003424:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003428:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003430:	d10b      	bne.n	800344a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b80      	cmp	r3, #128	; 0x80
 8003436:	d913      	bls.n	8003460 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2ba0      	cmp	r3, #160	; 0xa0
 800343c:	d902      	bls.n	8003444 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800343e:	2302      	movs	r3, #2
 8003440:	613b      	str	r3, [r7, #16]
 8003442:	e00d      	b.n	8003460 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003444:	2301      	movs	r3, #1
 8003446:	613b      	str	r3, [r7, #16]
 8003448:	e00a      	b.n	8003460 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2b7f      	cmp	r3, #127	; 0x7f
 800344e:	d902      	bls.n	8003456 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003450:	2302      	movs	r3, #2
 8003452:	613b      	str	r3, [r7, #16]
 8003454:	e004      	b.n	8003460 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2b70      	cmp	r3, #112	; 0x70
 800345a:	d101      	bne.n	8003460 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800345c:	2301      	movs	r3, #1
 800345e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003460:	4b0b      	ldr	r3, [pc, #44]	; (8003490 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f023 020f 	bic.w	r2, r3, #15
 8003468:	4909      	ldr	r1, [pc, #36]	; (8003490 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	4313      	orrs	r3, r2
 800346e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003470:	4b07      	ldr	r3, [pc, #28]	; (8003490 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 030f 	and.w	r3, r3, #15
 8003478:	693a      	ldr	r2, [r7, #16]
 800347a:	429a      	cmp	r2, r3
 800347c:	d001      	beq.n	8003482 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e000      	b.n	8003484 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3718      	adds	r7, #24
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	40021000 	.word	0x40021000
 8003490:	40022000 	.word	0x40022000

08003494 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003494:	b480      	push	{r7}
 8003496:	b087      	sub	sp, #28
 8003498:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800349a:	4b2d      	ldr	r3, [pc, #180]	; (8003550 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	f003 0303 	and.w	r3, r3, #3
 80034a2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2b03      	cmp	r3, #3
 80034a8:	d00b      	beq.n	80034c2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2b03      	cmp	r3, #3
 80034ae:	d825      	bhi.n	80034fc <RCC_GetSysClockFreqFromPLLSource+0x68>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d008      	beq.n	80034c8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d11f      	bne.n	80034fc <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80034bc:	4b25      	ldr	r3, [pc, #148]	; (8003554 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80034be:	613b      	str	r3, [r7, #16]
    break;
 80034c0:	e01f      	b.n	8003502 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80034c2:	4b24      	ldr	r3, [pc, #144]	; (8003554 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80034c4:	613b      	str	r3, [r7, #16]
    break;
 80034c6:	e01c      	b.n	8003502 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80034c8:	4b21      	ldr	r3, [pc, #132]	; (8003550 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0308 	and.w	r3, r3, #8
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d107      	bne.n	80034e4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80034d4:	4b1e      	ldr	r3, [pc, #120]	; (8003550 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80034d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034da:	0a1b      	lsrs	r3, r3, #8
 80034dc:	f003 030f 	and.w	r3, r3, #15
 80034e0:	617b      	str	r3, [r7, #20]
 80034e2:	e005      	b.n	80034f0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80034e4:	4b1a      	ldr	r3, [pc, #104]	; (8003550 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	091b      	lsrs	r3, r3, #4
 80034ea:	f003 030f 	and.w	r3, r3, #15
 80034ee:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80034f0:	4a19      	ldr	r2, [pc, #100]	; (8003558 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034f8:	613b      	str	r3, [r7, #16]
    break;
 80034fa:	e002      	b.n	8003502 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80034fc:	2300      	movs	r3, #0
 80034fe:	613b      	str	r3, [r7, #16]
    break;
 8003500:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003502:	4b13      	ldr	r3, [pc, #76]	; (8003550 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	091b      	lsrs	r3, r3, #4
 8003508:	f003 030f 	and.w	r3, r3, #15
 800350c:	3301      	adds	r3, #1
 800350e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003510:	4b0f      	ldr	r3, [pc, #60]	; (8003550 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	0a1b      	lsrs	r3, r3, #8
 8003516:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	fb03 f202 	mul.w	r2, r3, r2
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	fbb2 f3f3 	udiv	r3, r2, r3
 8003526:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003528:	4b09      	ldr	r3, [pc, #36]	; (8003550 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	0e5b      	lsrs	r3, r3, #25
 800352e:	f003 0303 	and.w	r3, r3, #3
 8003532:	3301      	adds	r3, #1
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003540:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003542:	683b      	ldr	r3, [r7, #0]
}
 8003544:	4618      	mov	r0, r3
 8003546:	371c      	adds	r7, #28
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr
 8003550:	40021000 	.word	0x40021000
 8003554:	00f42400 	.word	0x00f42400
 8003558:	0800c938 	.word	0x0800c938

0800355c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003564:	2300      	movs	r3, #0
 8003566:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003568:	2300      	movs	r3, #0
 800356a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003574:	2b00      	cmp	r3, #0
 8003576:	d040      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800357c:	2b80      	cmp	r3, #128	; 0x80
 800357e:	d02a      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003580:	2b80      	cmp	r3, #128	; 0x80
 8003582:	d825      	bhi.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003584:	2b60      	cmp	r3, #96	; 0x60
 8003586:	d026      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003588:	2b60      	cmp	r3, #96	; 0x60
 800358a:	d821      	bhi.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800358c:	2b40      	cmp	r3, #64	; 0x40
 800358e:	d006      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003590:	2b40      	cmp	r3, #64	; 0x40
 8003592:	d81d      	bhi.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003594:	2b00      	cmp	r3, #0
 8003596:	d009      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003598:	2b20      	cmp	r3, #32
 800359a:	d010      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x62>
 800359c:	e018      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800359e:	4b89      	ldr	r3, [pc, #548]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	4a88      	ldr	r2, [pc, #544]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80035a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035aa:	e015      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	3304      	adds	r3, #4
 80035b0:	2100      	movs	r1, #0
 80035b2:	4618      	mov	r0, r3
 80035b4:	f001 fa82 	bl	8004abc <RCCEx_PLLSAI1_Config>
 80035b8:	4603      	mov	r3, r0
 80035ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035bc:	e00c      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	3320      	adds	r3, #32
 80035c2:	2100      	movs	r1, #0
 80035c4:	4618      	mov	r0, r3
 80035c6:	f001 fb6d 	bl	8004ca4 <RCCEx_PLLSAI2_Config>
 80035ca:	4603      	mov	r3, r0
 80035cc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035ce:	e003      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	74fb      	strb	r3, [r7, #19]
      break;
 80035d4:	e000      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80035d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035d8:	7cfb      	ldrb	r3, [r7, #19]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10b      	bne.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035de:	4b79      	ldr	r3, [pc, #484]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80035e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035e4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035ec:	4975      	ldr	r1, [pc, #468]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80035f4:	e001      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035f6:	7cfb      	ldrb	r3, [r7, #19]
 80035f8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d047      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800360e:	d030      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003610:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003614:	d82a      	bhi.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003616:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800361a:	d02a      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800361c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003620:	d824      	bhi.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003622:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003626:	d008      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003628:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800362c:	d81e      	bhi.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x110>
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00a      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003632:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003636:	d010      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003638:	e018      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800363a:	4b62      	ldr	r3, [pc, #392]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	4a61      	ldr	r2, [pc, #388]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003644:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003646:	e015      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	3304      	adds	r3, #4
 800364c:	2100      	movs	r1, #0
 800364e:	4618      	mov	r0, r3
 8003650:	f001 fa34 	bl	8004abc <RCCEx_PLLSAI1_Config>
 8003654:	4603      	mov	r3, r0
 8003656:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003658:	e00c      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	3320      	adds	r3, #32
 800365e:	2100      	movs	r1, #0
 8003660:	4618      	mov	r0, r3
 8003662:	f001 fb1f 	bl	8004ca4 <RCCEx_PLLSAI2_Config>
 8003666:	4603      	mov	r3, r0
 8003668:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800366a:	e003      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	74fb      	strb	r3, [r7, #19]
      break;
 8003670:	e000      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003672:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003674:	7cfb      	ldrb	r3, [r7, #19]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10b      	bne.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800367a:	4b52      	ldr	r3, [pc, #328]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800367c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003680:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003688:	494e      	ldr	r1, [pc, #312]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800368a:	4313      	orrs	r3, r2
 800368c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003690:	e001      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003692:	7cfb      	ldrb	r3, [r7, #19]
 8003694:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f000 809f 	beq.w	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036a4:	2300      	movs	r3, #0
 80036a6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036a8:	4b46      	ldr	r3, [pc, #280]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80036aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80036b4:	2301      	movs	r3, #1
 80036b6:	e000      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80036b8:	2300      	movs	r3, #0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00d      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036be:	4b41      	ldr	r3, [pc, #260]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80036c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c2:	4a40      	ldr	r2, [pc, #256]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80036c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036c8:	6593      	str	r3, [r2, #88]	; 0x58
 80036ca:	4b3e      	ldr	r3, [pc, #248]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80036cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d2:	60bb      	str	r3, [r7, #8]
 80036d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036d6:	2301      	movs	r3, #1
 80036d8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036da:	4b3b      	ldr	r3, [pc, #236]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a3a      	ldr	r2, [pc, #232]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80036e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036e6:	f7fe f955 	bl	8001994 <HAL_GetTick>
 80036ea:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036ec:	e009      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ee:	f7fe f951 	bl	8001994 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d902      	bls.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	74fb      	strb	r3, [r7, #19]
        break;
 8003700:	e005      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003702:	4b31      	ldr	r3, [pc, #196]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800370a:	2b00      	cmp	r3, #0
 800370c:	d0ef      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800370e:	7cfb      	ldrb	r3, [r7, #19]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d15b      	bne.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003714:	4b2b      	ldr	r3, [pc, #172]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800371a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800371e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d01f      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800372c:	697a      	ldr	r2, [r7, #20]
 800372e:	429a      	cmp	r2, r3
 8003730:	d019      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003732:	4b24      	ldr	r3, [pc, #144]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003738:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800373c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800373e:	4b21      	ldr	r3, [pc, #132]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003744:	4a1f      	ldr	r2, [pc, #124]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003746:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800374a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800374e:	4b1d      	ldr	r3, [pc, #116]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003754:	4a1b      	ldr	r2, [pc, #108]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003756:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800375a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800375e:	4a19      	ldr	r2, [pc, #100]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	2b00      	cmp	r3, #0
 800376e:	d016      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003770:	f7fe f910 	bl	8001994 <HAL_GetTick>
 8003774:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003776:	e00b      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003778:	f7fe f90c 	bl	8001994 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	f241 3288 	movw	r2, #5000	; 0x1388
 8003786:	4293      	cmp	r3, r2
 8003788:	d902      	bls.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	74fb      	strb	r3, [r7, #19]
            break;
 800378e:	e006      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003790:	4b0c      	ldr	r3, [pc, #48]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d0ec      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800379e:	7cfb      	ldrb	r3, [r7, #19]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d10c      	bne.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037a4:	4b07      	ldr	r3, [pc, #28]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80037a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037b4:	4903      	ldr	r1, [pc, #12]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80037bc:	e008      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037be:	7cfb      	ldrb	r3, [r7, #19]
 80037c0:	74bb      	strb	r3, [r7, #18]
 80037c2:	e005      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80037c4:	40021000 	.word	0x40021000
 80037c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037cc:	7cfb      	ldrb	r3, [r7, #19]
 80037ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037d0:	7c7b      	ldrb	r3, [r7, #17]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d105      	bne.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037d6:	4ba0      	ldr	r3, [pc, #640]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037da:	4a9f      	ldr	r2, [pc, #636]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037e0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00a      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037ee:	4b9a      	ldr	r3, [pc, #616]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f4:	f023 0203 	bic.w	r2, r3, #3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fc:	4996      	ldr	r1, [pc, #600]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00a      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003810:	4b91      	ldr	r3, [pc, #580]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003816:	f023 020c 	bic.w	r2, r3, #12
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381e:	498e      	ldr	r1, [pc, #568]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003820:	4313      	orrs	r3, r2
 8003822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0304 	and.w	r3, r3, #4
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00a      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003832:	4b89      	ldr	r3, [pc, #548]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003838:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003840:	4985      	ldr	r1, [pc, #532]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003842:	4313      	orrs	r3, r2
 8003844:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0308 	and.w	r3, r3, #8
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00a      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003854:	4b80      	ldr	r3, [pc, #512]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800385a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003862:	497d      	ldr	r1, [pc, #500]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003864:	4313      	orrs	r3, r2
 8003866:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0310 	and.w	r3, r3, #16
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00a      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003876:	4b78      	ldr	r3, [pc, #480]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800387c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003884:	4974      	ldr	r1, [pc, #464]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003886:	4313      	orrs	r3, r2
 8003888:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0320 	and.w	r3, r3, #32
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00a      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003898:	4b6f      	ldr	r3, [pc, #444]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800389a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800389e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038a6:	496c      	ldr	r1, [pc, #432]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00a      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038ba:	4b67      	ldr	r3, [pc, #412]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038c8:	4963      	ldr	r1, [pc, #396]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00a      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80038dc:	4b5e      	ldr	r3, [pc, #376]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038ea:	495b      	ldr	r1, [pc, #364]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00a      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038fe:	4b56      	ldr	r3, [pc, #344]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003904:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800390c:	4952      	ldr	r1, [pc, #328]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800390e:	4313      	orrs	r3, r2
 8003910:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00a      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003920:	4b4d      	ldr	r3, [pc, #308]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003926:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800392e:	494a      	ldr	r1, [pc, #296]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003930:	4313      	orrs	r3, r2
 8003932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00a      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003942:	4b45      	ldr	r3, [pc, #276]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003948:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003950:	4941      	ldr	r1, [pc, #260]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003952:	4313      	orrs	r3, r2
 8003954:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00a      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003964:	4b3c      	ldr	r3, [pc, #240]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003966:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800396a:	f023 0203 	bic.w	r2, r3, #3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003972:	4939      	ldr	r1, [pc, #228]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003974:	4313      	orrs	r3, r2
 8003976:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d028      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003986:	4b34      	ldr	r3, [pc, #208]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800398c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003994:	4930      	ldr	r1, [pc, #192]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003996:	4313      	orrs	r3, r2
 8003998:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039a4:	d106      	bne.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039a6:	4b2c      	ldr	r3, [pc, #176]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	4a2b      	ldr	r2, [pc, #172]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039b0:	60d3      	str	r3, [r2, #12]
 80039b2:	e011      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039bc:	d10c      	bne.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	3304      	adds	r3, #4
 80039c2:	2101      	movs	r1, #1
 80039c4:	4618      	mov	r0, r3
 80039c6:	f001 f879 	bl	8004abc <RCCEx_PLLSAI1_Config>
 80039ca:	4603      	mov	r3, r0
 80039cc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80039ce:	7cfb      	ldrb	r3, [r7, #19]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80039d4:	7cfb      	ldrb	r3, [r7, #19]
 80039d6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d04d      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039ec:	d108      	bne.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80039ee:	4b1a      	ldr	r3, [pc, #104]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039f4:	4a18      	ldr	r2, [pc, #96]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039fa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80039fe:	e012      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003a00:	4b15      	ldr	r3, [pc, #84]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a06:	4a14      	ldr	r2, [pc, #80]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a0c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003a10:	4b11      	ldr	r3, [pc, #68]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a1e:	490e      	ldr	r1, [pc, #56]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a2e:	d106      	bne.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a30:	4b09      	ldr	r3, [pc, #36]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	4a08      	ldr	r2, [pc, #32]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a3a:	60d3      	str	r3, [r2, #12]
 8003a3c:	e020      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a46:	d109      	bne.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a48:	4b03      	ldr	r3, [pc, #12]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	4a02      	ldr	r2, [pc, #8]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a52:	60d3      	str	r3, [r2, #12]
 8003a54:	e014      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003a56:	bf00      	nop
 8003a58:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a64:	d10c      	bne.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	3304      	adds	r3, #4
 8003a6a:	2101      	movs	r1, #1
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f001 f825 	bl	8004abc <RCCEx_PLLSAI1_Config>
 8003a72:	4603      	mov	r3, r0
 8003a74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a76:	7cfb      	ldrb	r3, [r7, #19]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d001      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003a7c:	7cfb      	ldrb	r3, [r7, #19]
 8003a7e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d028      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a8c:	4b7a      	ldr	r3, [pc, #488]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a9a:	4977      	ldr	r1, [pc, #476]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003aa6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003aaa:	d106      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003aac:	4b72      	ldr	r3, [pc, #456]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	4a71      	ldr	r2, [pc, #452]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003ab2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ab6:	60d3      	str	r3, [r2, #12]
 8003ab8:	e011      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003abe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ac2:	d10c      	bne.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	3304      	adds	r3, #4
 8003ac8:	2101      	movs	r1, #1
 8003aca:	4618      	mov	r0, r3
 8003acc:	f000 fff6 	bl	8004abc <RCCEx_PLLSAI1_Config>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ad4:	7cfb      	ldrb	r3, [r7, #19]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003ada:	7cfb      	ldrb	r3, [r7, #19]
 8003adc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d01e      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003aea:	4b63      	ldr	r3, [pc, #396]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003afa:	495f      	ldr	r1, [pc, #380]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b0c:	d10c      	bne.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	3304      	adds	r3, #4
 8003b12:	2102      	movs	r1, #2
 8003b14:	4618      	mov	r0, r3
 8003b16:	f000 ffd1 	bl	8004abc <RCCEx_PLLSAI1_Config>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b1e:	7cfb      	ldrb	r3, [r7, #19]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003b24:	7cfb      	ldrb	r3, [r7, #19]
 8003b26:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00b      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b34:	4b50      	ldr	r3, [pc, #320]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003b36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b3a:	f023 0204 	bic.w	r2, r3, #4
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b44:	494c      	ldr	r1, [pc, #304]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00b      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003b58:	4b47      	ldr	r3, [pc, #284]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003b5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b5e:	f023 0218 	bic.w	r2, r3, #24
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b68:	4943      	ldr	r1, [pc, #268]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d035      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003b7c:	4b3e      	ldr	r3, [pc, #248]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a3d      	ldr	r2, [pc, #244]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003b82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b88:	f7fd ff04 	bl	8001994 <HAL_GetTick>
 8003b8c:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b8e:	e009      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b90:	f7fd ff00 	bl	8001994 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d902      	bls.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	74fb      	strb	r3, [r7, #19]
        break;
 8003ba2:	e005      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ba4:	4b34      	ldr	r3, [pc, #208]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1ef      	bne.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8003bb0:	7cfb      	ldrb	r3, [r7, #19]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d113      	bne.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8003bb6:	4b30      	ldr	r3, [pc, #192]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003bb8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003bbc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bc6:	492c      	ldr	r1, [pc, #176]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	3320      	adds	r3, #32
 8003bd2:	2102      	movs	r1, #2
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f001 f865 	bl	8004ca4 <RCCEx_PLLSAI2_Config>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8003bde:	7cfb      	ldrb	r3, [r7, #19]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8003be4:	7cfb      	ldrb	r3, [r7, #19]
 8003be6:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d01e      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8003bf4:	4b20      	ldr	r3, [pc, #128]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003bf6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003bfa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c04:	491c      	ldr	r1, [pc, #112]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c16:	d10c      	bne.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	3320      	adds	r3, #32
 8003c1c:	2101      	movs	r1, #1
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f001 f840 	bl	8004ca4 <RCCEx_PLLSAI2_Config>
 8003c24:	4603      	mov	r3, r0
 8003c26:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c28:	7cfb      	ldrb	r3, [r7, #19]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 8003c2e:	7cfb      	ldrb	r3, [r7, #19]
 8003c30:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d017      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003c3e:	4b0e      	ldr	r3, [pc, #56]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003c40:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c4e:	490a      	ldr	r1, [pc, #40]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c60:	d105      	bne.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c62:	4b05      	ldr	r3, [pc, #20]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	4a04      	ldr	r2, [pc, #16]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003c68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c6c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003c6e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3718      	adds	r7, #24
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	40021000 	.word	0x40021000

08003c7c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b088      	sub	sp, #32
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8003c84:	2300      	movs	r3, #0
 8003c86:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c8e:	d13e      	bne.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003c90:	4bb6      	ldr	r3, [pc, #728]	; (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c9a:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ca2:	d028      	beq.n	8003cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003caa:	f200 86f2 	bhi.w	8004a92 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cb4:	d005      	beq.n	8003cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cbc:	d00e      	beq.n	8003cdc <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8003cbe:	f000 bee8 	b.w	8004a92 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003cc2:	4baa      	ldr	r3, [pc, #680]	; (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc8:	f003 0302 	and.w	r3, r3, #2
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	f040 86e2 	bne.w	8004a96 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
        frequency = LSE_VALUE;
 8003cd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cd6:	61fb      	str	r3, [r7, #28]
      break;
 8003cd8:	f000 bedd 	b.w	8004a96 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003cdc:	4ba3      	ldr	r3, [pc, #652]	; (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003cde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	f040 86d7 	bne.w	8004a9a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = LSI_VALUE;
 8003cec:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8003cf0:	61fb      	str	r3, [r7, #28]
      break;
 8003cf2:	f000 bed2 	b.w	8004a9a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003cf6:	4b9d      	ldr	r3, [pc, #628]	; (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cfe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d02:	f040 86cc 	bne.w	8004a9e <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
        frequency = HSE_VALUE / 32U;
 8003d06:	4b9a      	ldr	r3, [pc, #616]	; (8003f70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003d08:	61fb      	str	r3, [r7, #28]
      break;
 8003d0a:	f000 bec8 	b.w	8004a9e <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d0e:	4b97      	ldr	r3, [pc, #604]	; (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	f003 0303 	and.w	r3, r3, #3
 8003d16:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	2b03      	cmp	r3, #3
 8003d1c:	d036      	beq.n	8003d8c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	2b03      	cmp	r3, #3
 8003d22:	d840      	bhi.n	8003da6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d003      	beq.n	8003d32 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d020      	beq.n	8003d72 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8003d30:	e039      	b.n	8003da6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003d32:	4b8e      	ldr	r3, [pc, #568]	; (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d116      	bne.n	8003d6c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003d3e:	4b8b      	ldr	r3, [pc, #556]	; (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0308 	and.w	r3, r3, #8
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d005      	beq.n	8003d56 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8003d4a:	4b88      	ldr	r3, [pc, #544]	; (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	091b      	lsrs	r3, r3, #4
 8003d50:	f003 030f 	and.w	r3, r3, #15
 8003d54:	e005      	b.n	8003d62 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8003d56:	4b85      	ldr	r3, [pc, #532]	; (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003d58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d5c:	0a1b      	lsrs	r3, r3, #8
 8003d5e:	f003 030f 	and.w	r3, r3, #15
 8003d62:	4a84      	ldr	r2, [pc, #528]	; (8003f74 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d68:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003d6a:	e01f      	b.n	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	61bb      	str	r3, [r7, #24]
      break;
 8003d70:	e01c      	b.n	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003d72:	4b7e      	ldr	r3, [pc, #504]	; (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d7e:	d102      	bne.n	8003d86 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8003d80:	4b7d      	ldr	r3, [pc, #500]	; (8003f78 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003d82:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003d84:	e012      	b.n	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003d86:	2300      	movs	r3, #0
 8003d88:	61bb      	str	r3, [r7, #24]
      break;
 8003d8a:	e00f      	b.n	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003d8c:	4b77      	ldr	r3, [pc, #476]	; (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d98:	d102      	bne.n	8003da0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8003d9a:	4b77      	ldr	r3, [pc, #476]	; (8003f78 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003d9c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003d9e:	e005      	b.n	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003da0:	2300      	movs	r3, #0
 8003da2:	61bb      	str	r3, [r7, #24]
      break;
 8003da4:	e002      	b.n	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8003da6:	2300      	movs	r3, #0
 8003da8:	61bb      	str	r3, [r7, #24]
      break;
 8003daa:	bf00      	nop
    }

    switch(PeriphClk)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003db2:	f000 8604 	beq.w	80049be <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003dbc:	f200 8671 	bhi.w	8004aa2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003dc6:	f000 8467 	beq.w	8004698 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003dd0:	f200 8667 	bhi.w	8004aa2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dda:	f000 852f 	beq.w	800483c <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003de4:	f200 865d 	bhi.w	8004aa2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003dee:	f000 8185 	beq.w	80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x480>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003df8:	f200 8653 	bhi.w	8004aa2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e02:	f000 80cb 	beq.w	8003f9c <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e0c:	f200 8649 	bhi.w	8004aa2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e16:	f000 842e 	beq.w	8004676 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e20:	f200 863f 	bhi.w	8004aa2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e2a:	f000 83e2 	beq.w	80045f2 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e34:	f200 8635 	bhi.w	8004aa2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e3e:	f000 80ad 	beq.w	8003f9c <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e48:	f200 862b 	bhi.w	8004aa2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e52:	f000 809b 	beq.w	8003f8c <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e5c:	f200 8621 	bhi.w	8004aa2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e66:	f000 8089 	beq.w	8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e70:	f200 8617 	bhi.w	8004aa2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e7a:	f000 8552 	beq.w	8004922 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e84:	f200 860d 	bhi.w	8004aa2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e8e:	f000 84fe 	beq.w	800488e <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e98:	f200 8603 	bhi.w	8004aa2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ea2:	f000 849f 	beq.w	80047e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eac:	f200 85f9 	bhi.w	8004aa2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b80      	cmp	r3, #128	; 0x80
 8003eb4:	f000 846a 	beq.w	800478c <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b80      	cmp	r3, #128	; 0x80
 8003ebc:	f200 85f1 	bhi.w	8004aa2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b20      	cmp	r3, #32
 8003ec4:	d84c      	bhi.n	8003f60 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f000 85ea 	beq.w	8004aa2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	2b1f      	cmp	r3, #31
 8003ed4:	f200 85e5 	bhi.w	8004aa2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003ed8:	a201      	add	r2, pc, #4	; (adr r2, 8003ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8003eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ede:	bf00      	nop
 8003ee0:	080042f1 	.word	0x080042f1
 8003ee4:	0800435f 	.word	0x0800435f
 8003ee8:	08004aa3 	.word	0x08004aa3
 8003eec:	080043f3 	.word	0x080043f3
 8003ef0:	08004aa3 	.word	0x08004aa3
 8003ef4:	08004aa3 	.word	0x08004aa3
 8003ef8:	08004aa3 	.word	0x08004aa3
 8003efc:	0800446b 	.word	0x0800446b
 8003f00:	08004aa3 	.word	0x08004aa3
 8003f04:	08004aa3 	.word	0x08004aa3
 8003f08:	08004aa3 	.word	0x08004aa3
 8003f0c:	08004aa3 	.word	0x08004aa3
 8003f10:	08004aa3 	.word	0x08004aa3
 8003f14:	08004aa3 	.word	0x08004aa3
 8003f18:	08004aa3 	.word	0x08004aa3
 8003f1c:	080044ef 	.word	0x080044ef
 8003f20:	08004aa3 	.word	0x08004aa3
 8003f24:	08004aa3 	.word	0x08004aa3
 8003f28:	08004aa3 	.word	0x08004aa3
 8003f2c:	08004aa3 	.word	0x08004aa3
 8003f30:	08004aa3 	.word	0x08004aa3
 8003f34:	08004aa3 	.word	0x08004aa3
 8003f38:	08004aa3 	.word	0x08004aa3
 8003f3c:	08004aa3 	.word	0x08004aa3
 8003f40:	08004aa3 	.word	0x08004aa3
 8003f44:	08004aa3 	.word	0x08004aa3
 8003f48:	08004aa3 	.word	0x08004aa3
 8003f4c:	08004aa3 	.word	0x08004aa3
 8003f50:	08004aa3 	.word	0x08004aa3
 8003f54:	08004aa3 	.word	0x08004aa3
 8003f58:	08004aa3 	.word	0x08004aa3
 8003f5c:	08004571 	.word	0x08004571
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b40      	cmp	r3, #64	; 0x40
 8003f64:	f000 83e6 	beq.w	8004734 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8003f68:	f000 bd9b 	b.w	8004aa2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003f6c:	40021000 	.word	0x40021000
 8003f70:	0007a120 	.word	0x0007a120
 8003f74:	0800c938 	.word	0x0800c938
 8003f78:	00f42400 	.word	0x00f42400
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8003f7c:	69b9      	ldr	r1, [r7, #24]
 8003f7e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003f82:	f000 ff83 	bl	8004e8c <RCCEx_GetSAIxPeriphCLKFreq>
 8003f86:	61f8      	str	r0, [r7, #28]
      break;
 8003f88:	f000 bd8e 	b.w	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8003f8c:	69b9      	ldr	r1, [r7, #24]
 8003f8e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003f92:	f000 ff7b 	bl	8004e8c <RCCEx_GetSAIxPeriphCLKFreq>
 8003f96:	61f8      	str	r0, [r7, #28]
      break;
 8003f98:	f000 bd86 	b.w	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8003f9c:	4b9a      	ldr	r3, [pc, #616]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa2:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8003fa6:	60fb      	str	r3, [r7, #12]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003fae:	d015      	beq.n	8003fdc <HAL_RCCEx_GetPeriphCLKFreq+0x360>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003fb6:	f200 8092 	bhi.w	80040de <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fc0:	d029      	beq.n	8004016 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fc8:	f200 8089 	bhi.w	80040de <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d07b      	beq.n	80040ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fd8:	d04a      	beq.n	8004070 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
          break;
 8003fda:	e080      	b.n	80040de <HAL_RCCEx_GetPeriphCLKFreq+0x462>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003fdc:	4b8a      	ldr	r3, [pc, #552]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d17d      	bne.n	80040e4 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003fe8:	4b87      	ldr	r3, [pc, #540]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0308 	and.w	r3, r3, #8
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d005      	beq.n	8004000 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
 8003ff4:	4b84      	ldr	r3, [pc, #528]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	091b      	lsrs	r3, r3, #4
 8003ffa:	f003 030f 	and.w	r3, r3, #15
 8003ffe:	e005      	b.n	800400c <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 8004000:	4b81      	ldr	r3, [pc, #516]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004002:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004006:	0a1b      	lsrs	r3, r3, #8
 8004008:	f003 030f 	and.w	r3, r3, #15
 800400c:	4a7f      	ldr	r2, [pc, #508]	; (800420c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800400e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004012:	61fb      	str	r3, [r7, #28]
          break;
 8004014:	e066      	b.n	80040e4 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004016:	4b7c      	ldr	r3, [pc, #496]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800401e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004022:	d162      	bne.n	80040ea <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004024:	4b78      	ldr	r3, [pc, #480]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800402c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004030:	d15b      	bne.n	80040ea <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004032:	4b75      	ldr	r3, [pc, #468]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	0a1b      	lsrs	r3, r3, #8
 8004038:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800403c:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	68ba      	ldr	r2, [r7, #8]
 8004042:	fb03 f202 	mul.w	r2, r3, r2
 8004046:	4b70      	ldr	r3, [pc, #448]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	091b      	lsrs	r3, r3, #4
 800404c:	f003 030f 	and.w	r3, r3, #15
 8004050:	3301      	adds	r3, #1
 8004052:	fbb2 f3f3 	udiv	r3, r2, r3
 8004056:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004058:	4b6b      	ldr	r3, [pc, #428]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	0d5b      	lsrs	r3, r3, #21
 800405e:	f003 0303 	and.w	r3, r3, #3
 8004062:	3301      	adds	r3, #1
 8004064:	005b      	lsls	r3, r3, #1
 8004066:	69ba      	ldr	r2, [r7, #24]
 8004068:	fbb2 f3f3 	udiv	r3, r2, r3
 800406c:	61fb      	str	r3, [r7, #28]
          break;
 800406e:	e03c      	b.n	80040ea <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8004070:	4b65      	ldr	r3, [pc, #404]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004078:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800407c:	d138      	bne.n	80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800407e:	4b62      	ldr	r3, [pc, #392]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004086:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800408a:	d131      	bne.n	80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800408c:	4b5e      	ldr	r3, [pc, #376]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	0a1b      	lsrs	r3, r3, #8
 8004092:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004096:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	68ba      	ldr	r2, [r7, #8]
 800409c:	fb03 f202 	mul.w	r2, r3, r2
 80040a0:	4b59      	ldr	r3, [pc, #356]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	091b      	lsrs	r3, r3, #4
 80040a6:	f003 030f 	and.w	r3, r3, #15
 80040aa:	3301      	adds	r3, #1
 80040ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b0:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80040b2:	4b55      	ldr	r3, [pc, #340]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	0d5b      	lsrs	r3, r3, #21
 80040b8:	f003 0303 	and.w	r3, r3, #3
 80040bc:	3301      	adds	r3, #1
 80040be:	005b      	lsls	r3, r3, #1
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c6:	61fb      	str	r3, [r7, #28]
          break;
 80040c8:	e012      	b.n	80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80040ca:	4b4f      	ldr	r3, [pc, #316]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80040cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040d0:	f003 0302 	and.w	r3, r3, #2
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d10e      	bne.n	80040f6 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI48_VALUE;
 80040d8:	4b4d      	ldr	r3, [pc, #308]	; (8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80040da:	61fb      	str	r3, [r7, #28]
          break;
 80040dc:	e00b      	b.n	80040f6 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          break;
 80040de:	bf00      	nop
 80040e0:	f000 bce2 	b.w	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80040e4:	bf00      	nop
 80040e6:	f000 bcdf 	b.w	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80040ea:	bf00      	nop
 80040ec:	f000 bcdc 	b.w	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80040f0:	bf00      	nop
 80040f2:	f000 bcd9 	b.w	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80040f6:	bf00      	nop
        break;
 80040f8:	f000 bcd6 	b.w	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 80040fc:	4b42      	ldr	r3, [pc, #264]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80040fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004102:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004106:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800410a:	d13d      	bne.n	8004188 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800410c:	4b3e      	ldr	r3, [pc, #248]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004114:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004118:	f040 84c5 	bne.w	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 800411c:	4b3a      	ldr	r3, [pc, #232]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004128:	f040 84bd 	bne.w	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800412c:	4b36      	ldr	r3, [pc, #216]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	0a1b      	lsrs	r3, r3, #8
 8004132:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004136:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	68ba      	ldr	r2, [r7, #8]
 800413c:	fb03 f202 	mul.w	r2, r3, r2
 8004140:	4b31      	ldr	r3, [pc, #196]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	091b      	lsrs	r3, r3, #4
 8004146:	f003 030f 	and.w	r3, r3, #15
 800414a:	3301      	adds	r3, #1
 800414c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004150:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8004152:	4b2d      	ldr	r3, [pc, #180]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	0edb      	lsrs	r3, r3, #27
 8004158:	f003 031f 	and.w	r3, r3, #31
 800415c:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d10a      	bne.n	800417a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004164:	4b28      	ldr	r3, [pc, #160]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d002      	beq.n	8004176 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
                pllp = 17U;
 8004170:	2311      	movs	r3, #17
 8004172:	617b      	str	r3, [r7, #20]
 8004174:	e001      	b.n	800417a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 7U;
 8004176:	2307      	movs	r3, #7
 8004178:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 800417a:	69ba      	ldr	r2, [r7, #24]
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004182:	61fb      	str	r3, [r7, #28]
      break;
 8004184:	f000 bc8f 	b.w	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8004188:	4b1f      	ldr	r3, [pc, #124]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800418a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418e:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004192:	60fb      	str	r3, [r7, #12]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800419a:	d016      	beq.n	80041ca <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80041a2:	f200 809b 	bhi.w	80042dc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041ac:	d032      	beq.n	8004214 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041b4:	f200 8092 	bhi.w	80042dc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f000 8084 	beq.w	80042c8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041c6:	d052      	beq.n	800426e <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
          break;
 80041c8:	e088      	b.n	80042dc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80041ca:	4b0f      	ldr	r3, [pc, #60]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	f040 8084 	bne.w	80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80041d8:	4b0b      	ldr	r3, [pc, #44]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0308 	and.w	r3, r3, #8
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d005      	beq.n	80041f0 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 80041e4:	4b08      	ldr	r3, [pc, #32]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	091b      	lsrs	r3, r3, #4
 80041ea:	f003 030f 	and.w	r3, r3, #15
 80041ee:	e005      	b.n	80041fc <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 80041f0:	4b05      	ldr	r3, [pc, #20]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80041f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041f6:	0a1b      	lsrs	r3, r3, #8
 80041f8:	f003 030f 	and.w	r3, r3, #15
 80041fc:	4a03      	ldr	r2, [pc, #12]	; (800420c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80041fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004202:	61fb      	str	r3, [r7, #28]
          break;
 8004204:	e06c      	b.n	80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8004206:	bf00      	nop
 8004208:	40021000 	.word	0x40021000
 800420c:	0800c938 	.word	0x0800c938
 8004210:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004214:	4ba5      	ldr	r3, [pc, #660]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800421c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004220:	d160      	bne.n	80042e4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004222:	4ba2      	ldr	r3, [pc, #648]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800422a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800422e:	d159      	bne.n	80042e4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004230:	4b9e      	ldr	r3, [pc, #632]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	0a1b      	lsrs	r3, r3, #8
 8004236:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800423a:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	68ba      	ldr	r2, [r7, #8]
 8004240:	fb03 f202 	mul.w	r2, r3, r2
 8004244:	4b99      	ldr	r3, [pc, #612]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	091b      	lsrs	r3, r3, #4
 800424a:	f003 030f 	and.w	r3, r3, #15
 800424e:	3301      	adds	r3, #1
 8004250:	fbb2 f3f3 	udiv	r3, r2, r3
 8004254:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004256:	4b95      	ldr	r3, [pc, #596]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	0d5b      	lsrs	r3, r3, #21
 800425c:	f003 0303 	and.w	r3, r3, #3
 8004260:	3301      	adds	r3, #1
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	69ba      	ldr	r2, [r7, #24]
 8004266:	fbb2 f3f3 	udiv	r3, r2, r3
 800426a:	61fb      	str	r3, [r7, #28]
          break;
 800426c:	e03a      	b.n	80042e4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800426e:	4b8f      	ldr	r3, [pc, #572]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004276:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800427a:	d135      	bne.n	80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800427c:	4b8b      	ldr	r3, [pc, #556]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004284:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004288:	d12e      	bne.n	80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800428a:	4b88      	ldr	r3, [pc, #544]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	0a1b      	lsrs	r3, r3, #8
 8004290:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004294:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	68ba      	ldr	r2, [r7, #8]
 800429a:	fb03 f202 	mul.w	r2, r3, r2
 800429e:	4b83      	ldr	r3, [pc, #524]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	091b      	lsrs	r3, r3, #4
 80042a4:	f003 030f 	and.w	r3, r3, #15
 80042a8:	3301      	adds	r3, #1
 80042aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ae:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80042b0:	4b7e      	ldr	r3, [pc, #504]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	0d5b      	lsrs	r3, r3, #21
 80042b6:	f003 0303 	and.w	r3, r3, #3
 80042ba:	3301      	adds	r3, #1
 80042bc:	005b      	lsls	r3, r3, #1
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c4:	61fb      	str	r3, [r7, #28]
          break;
 80042c6:	e00f      	b.n	80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80042c8:	4b78      	ldr	r3, [pc, #480]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80042ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d10a      	bne.n	80042ec <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            frequency = HSI48_VALUE;
 80042d6:	4b76      	ldr	r3, [pc, #472]	; (80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80042d8:	61fb      	str	r3, [r7, #28]
          break;
 80042da:	e007      	b.n	80042ec <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          break;
 80042dc:	bf00      	nop
 80042de:	e3e2      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 80042e0:	bf00      	nop
 80042e2:	e3e0      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 80042e4:	bf00      	nop
 80042e6:	e3de      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 80042e8:	bf00      	nop
 80042ea:	e3dc      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 80042ec:	bf00      	nop
      break;
 80042ee:	e3da      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80042f0:	4b6e      	ldr	r3, [pc, #440]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80042f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f6:	f003 0303 	and.w	r3, r3, #3
 80042fa:	60fb      	str	r3, [r7, #12]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2b03      	cmp	r3, #3
 8004300:	d827      	bhi.n	8004352 <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
 8004302:	a201      	add	r2, pc, #4	; (adr r2, 8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 8004304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004308:	08004319 	.word	0x08004319
 800430c:	08004321 	.word	0x08004321
 8004310:	08004329 	.word	0x08004329
 8004314:	0800433d 	.word	0x0800433d
          frequency = HAL_RCC_GetPCLK2Freq();
 8004318:	f7ff f84c 	bl	80033b4 <HAL_RCC_GetPCLK2Freq>
 800431c:	61f8      	str	r0, [r7, #28]
          break;
 800431e:	e01d      	b.n	800435c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004320:	f7fe ff9c 	bl	800325c <HAL_RCC_GetSysClockFreq>
 8004324:	61f8      	str	r0, [r7, #28]
          break;
 8004326:	e019      	b.n	800435c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004328:	4b60      	ldr	r3, [pc, #384]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004330:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004334:	d10f      	bne.n	8004356 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
            frequency = HSI_VALUE;
 8004336:	4b5f      	ldr	r3, [pc, #380]	; (80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004338:	61fb      	str	r3, [r7, #28]
          break;
 800433a:	e00c      	b.n	8004356 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800433c:	4b5b      	ldr	r3, [pc, #364]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800433e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b02      	cmp	r3, #2
 8004348:	d107      	bne.n	800435a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = LSE_VALUE;
 800434a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800434e:	61fb      	str	r3, [r7, #28]
          break;
 8004350:	e003      	b.n	800435a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          break;
 8004352:	bf00      	nop
 8004354:	e3a8      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004356:	bf00      	nop
 8004358:	e3a6      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800435a:	bf00      	nop
        break;
 800435c:	e3a4      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800435e:	4b53      	ldr	r3, [pc, #332]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004364:	f003 030c 	and.w	r3, r3, #12
 8004368:	60fb      	str	r3, [r7, #12]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2b0c      	cmp	r3, #12
 800436e:	d83a      	bhi.n	80043e6 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 8004370:	a201      	add	r2, pc, #4	; (adr r2, 8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>)
 8004372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004376:	bf00      	nop
 8004378:	080043ad 	.word	0x080043ad
 800437c:	080043e7 	.word	0x080043e7
 8004380:	080043e7 	.word	0x080043e7
 8004384:	080043e7 	.word	0x080043e7
 8004388:	080043b5 	.word	0x080043b5
 800438c:	080043e7 	.word	0x080043e7
 8004390:	080043e7 	.word	0x080043e7
 8004394:	080043e7 	.word	0x080043e7
 8004398:	080043bd 	.word	0x080043bd
 800439c:	080043e7 	.word	0x080043e7
 80043a0:	080043e7 	.word	0x080043e7
 80043a4:	080043e7 	.word	0x080043e7
 80043a8:	080043d1 	.word	0x080043d1
          frequency = HAL_RCC_GetPCLK1Freq();
 80043ac:	f7fe ffec 	bl	8003388 <HAL_RCC_GetPCLK1Freq>
 80043b0:	61f8      	str	r0, [r7, #28]
          break;
 80043b2:	e01d      	b.n	80043f0 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          frequency = HAL_RCC_GetSysClockFreq();
 80043b4:	f7fe ff52 	bl	800325c <HAL_RCC_GetSysClockFreq>
 80043b8:	61f8      	str	r0, [r7, #28]
          break;
 80043ba:	e019      	b.n	80043f0 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80043bc:	4b3b      	ldr	r3, [pc, #236]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043c8:	d10f      	bne.n	80043ea <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
            frequency = HSI_VALUE;
 80043ca:	4b3a      	ldr	r3, [pc, #232]	; (80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80043cc:	61fb      	str	r3, [r7, #28]
          break;
 80043ce:	e00c      	b.n	80043ea <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80043d0:	4b36      	ldr	r3, [pc, #216]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80043d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d107      	bne.n	80043ee <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = LSE_VALUE;
 80043de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043e2:	61fb      	str	r3, [r7, #28]
          break;
 80043e4:	e003      	b.n	80043ee <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          break;
 80043e6:	bf00      	nop
 80043e8:	e35e      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80043ea:	bf00      	nop
 80043ec:	e35c      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80043ee:	bf00      	nop
        break;
 80043f0:	e35a      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80043f2:	4b2e      	ldr	r3, [pc, #184]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80043f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80043fc:	60fb      	str	r3, [r7, #12]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2b30      	cmp	r3, #48	; 0x30
 8004402:	d021      	beq.n	8004448 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2b30      	cmp	r3, #48	; 0x30
 8004408:	d829      	bhi.n	800445e <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2b20      	cmp	r3, #32
 800440e:	d011      	beq.n	8004434 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2b20      	cmp	r3, #32
 8004414:	d823      	bhi.n	800445e <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d003      	beq.n	8004424 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2b10      	cmp	r3, #16
 8004420:	d004      	beq.n	800442c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
          break;
 8004422:	e01c      	b.n	800445e <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004424:	f7fe ffb0 	bl	8003388 <HAL_RCC_GetPCLK1Freq>
 8004428:	61f8      	str	r0, [r7, #28]
          break;
 800442a:	e01d      	b.n	8004468 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          frequency = HAL_RCC_GetSysClockFreq();
 800442c:	f7fe ff16 	bl	800325c <HAL_RCC_GetSysClockFreq>
 8004430:	61f8      	str	r0, [r7, #28]
          break;
 8004432:	e019      	b.n	8004468 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004434:	4b1d      	ldr	r3, [pc, #116]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800443c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004440:	d10f      	bne.n	8004462 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
            frequency = HSI_VALUE;
 8004442:	4b1c      	ldr	r3, [pc, #112]	; (80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004444:	61fb      	str	r3, [r7, #28]
          break;
 8004446:	e00c      	b.n	8004462 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004448:	4b18      	ldr	r3, [pc, #96]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800444a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b02      	cmp	r3, #2
 8004454:	d107      	bne.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = LSE_VALUE;
 8004456:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800445a:	61fb      	str	r3, [r7, #28]
          break;
 800445c:	e003      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          break;
 800445e:	bf00      	nop
 8004460:	e322      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004462:	bf00      	nop
 8004464:	e320      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004466:	bf00      	nop
        break;
 8004468:	e31e      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800446a:	4b10      	ldr	r3, [pc, #64]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800446c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004470:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004474:	60fb      	str	r3, [r7, #12]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2bc0      	cmp	r3, #192	; 0xc0
 800447a:	d027      	beq.n	80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2bc0      	cmp	r3, #192	; 0xc0
 8004480:	d82f      	bhi.n	80044e2 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2b80      	cmp	r3, #128	; 0x80
 8004486:	d017      	beq.n	80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2b80      	cmp	r3, #128	; 0x80
 800448c:	d829      	bhi.n	80044e2 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d003      	beq.n	800449c <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2b40      	cmp	r3, #64	; 0x40
 8004498:	d004      	beq.n	80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
          break;
 800449a:	e022      	b.n	80044e2 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
          frequency = HAL_RCC_GetPCLK1Freq();
 800449c:	f7fe ff74 	bl	8003388 <HAL_RCC_GetPCLK1Freq>
 80044a0:	61f8      	str	r0, [r7, #28]
          break;
 80044a2:	e023      	b.n	80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          frequency = HAL_RCC_GetSysClockFreq();
 80044a4:	f7fe feda 	bl	800325c <HAL_RCC_GetSysClockFreq>
 80044a8:	61f8      	str	r0, [r7, #28]
          break;
 80044aa:	e01f      	b.n	80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 80044ac:	40021000 	.word	0x40021000
 80044b0:	02dc6c00 	.word	0x02dc6c00
 80044b4:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80044b8:	4b9b      	ldr	r3, [pc, #620]	; (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044c4:	d10f      	bne.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
            frequency = HSI_VALUE;
 80044c6:	4b99      	ldr	r3, [pc, #612]	; (800472c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80044c8:	61fb      	str	r3, [r7, #28]
          break;
 80044ca:	e00c      	b.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80044cc:	4b96      	ldr	r3, [pc, #600]	; (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80044ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d107      	bne.n	80044ea <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = LSE_VALUE;
 80044da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044de:	61fb      	str	r3, [r7, #28]
          break;
 80044e0:	e003      	b.n	80044ea <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 80044e2:	bf00      	nop
 80044e4:	e2e0      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80044e6:	bf00      	nop
 80044e8:	e2de      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80044ea:	bf00      	nop
        break;
 80044ec:	e2dc      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80044ee:	4b8e      	ldr	r3, [pc, #568]	; (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80044f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044f8:	60fb      	str	r3, [r7, #12]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004500:	d025      	beq.n	800454e <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004508:	d82c      	bhi.n	8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004510:	d013      	beq.n	800453a <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004518:	d824      	bhi.n	8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d004      	beq.n	800452a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004526:	d004      	beq.n	8004532 <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
          break;
 8004528:	e01c      	b.n	8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 800452a:	f7fe ff2d 	bl	8003388 <HAL_RCC_GetPCLK1Freq>
 800452e:	61f8      	str	r0, [r7, #28]
          break;
 8004530:	e01d      	b.n	800456e <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 8004532:	f7fe fe93 	bl	800325c <HAL_RCC_GetSysClockFreq>
 8004536:	61f8      	str	r0, [r7, #28]
          break;
 8004538:	e019      	b.n	800456e <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800453a:	4b7b      	ldr	r3, [pc, #492]	; (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004542:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004546:	d10f      	bne.n	8004568 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
            frequency = HSI_VALUE;
 8004548:	4b78      	ldr	r3, [pc, #480]	; (800472c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800454a:	61fb      	str	r3, [r7, #28]
          break;
 800454c:	e00c      	b.n	8004568 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800454e:	4b76      	ldr	r3, [pc, #472]	; (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004554:	f003 0302 	and.w	r3, r3, #2
 8004558:	2b02      	cmp	r3, #2
 800455a:	d107      	bne.n	800456c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = LSE_VALUE;
 800455c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004560:	61fb      	str	r3, [r7, #28]
          break;
 8004562:	e003      	b.n	800456c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 8004564:	bf00      	nop
 8004566:	e29f      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004568:	bf00      	nop
 800456a:	e29d      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800456c:	bf00      	nop
        break;
 800456e:	e29b      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004570:	4b6d      	ldr	r3, [pc, #436]	; (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004576:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800457a:	60fb      	str	r3, [r7, #12]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004582:	d025      	beq.n	80045d0 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800458a:	d82c      	bhi.n	80045e6 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004592:	d013      	beq.n	80045bc <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800459a:	d824      	bhi.n	80045e6 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d004      	beq.n	80045ac <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045a8:	d004      	beq.n	80045b4 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
          break;
 80045aa:	e01c      	b.n	80045e6 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80045ac:	f7fe feec 	bl	8003388 <HAL_RCC_GetPCLK1Freq>
 80045b0:	61f8      	str	r0, [r7, #28]
          break;
 80045b2:	e01d      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = HAL_RCC_GetSysClockFreq();
 80045b4:	f7fe fe52 	bl	800325c <HAL_RCC_GetSysClockFreq>
 80045b8:	61f8      	str	r0, [r7, #28]
          break;
 80045ba:	e019      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80045bc:	4b5a      	ldr	r3, [pc, #360]	; (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045c8:	d10f      	bne.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
            frequency = HSI_VALUE;
 80045ca:	4b58      	ldr	r3, [pc, #352]	; (800472c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80045cc:	61fb      	str	r3, [r7, #28]
          break;
 80045ce:	e00c      	b.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80045d0:	4b55      	ldr	r3, [pc, #340]	; (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80045d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d107      	bne.n	80045ee <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = LSE_VALUE;
 80045de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045e2:	61fb      	str	r3, [r7, #28]
          break;
 80045e4:	e003      	b.n	80045ee <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          break;
 80045e6:	bf00      	nop
 80045e8:	e25e      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80045ea:	bf00      	nop
 80045ec:	e25c      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80045ee:	bf00      	nop
        break;
 80045f0:	e25a      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80045f2:	4b4d      	ldr	r3, [pc, #308]	; (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80045f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80045fc:	60fb      	str	r3, [r7, #12]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004604:	d007      	beq.n	8004616 <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800460c:	d12f      	bne.n	800466e <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          frequency = HAL_RCC_GetSysClockFreq();
 800460e:	f7fe fe25 	bl	800325c <HAL_RCC_GetSysClockFreq>
 8004612:	61f8      	str	r0, [r7, #28]
          break;
 8004614:	e02e      	b.n	8004674 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8004616:	4b44      	ldr	r3, [pc, #272]	; (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800461e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004622:	d126      	bne.n	8004672 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
 8004624:	4b40      	ldr	r3, [pc, #256]	; (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d020      	beq.n	8004672 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004630:	4b3d      	ldr	r3, [pc, #244]	; (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	0a1b      	lsrs	r3, r3, #8
 8004636:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800463a:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	fb03 f202 	mul.w	r2, r3, r2
 8004644:	4b38      	ldr	r3, [pc, #224]	; (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	091b      	lsrs	r3, r3, #4
 800464a:	f003 030f 	and.w	r3, r3, #15
 800464e:	3301      	adds	r3, #1
 8004650:	fbb2 f3f3 	udiv	r3, r2, r3
 8004654:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8004656:	4b34      	ldr	r3, [pc, #208]	; (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	0e5b      	lsrs	r3, r3, #25
 800465c:	f003 0303 	and.w	r3, r3, #3
 8004660:	3301      	adds	r3, #1
 8004662:	005b      	lsls	r3, r3, #1
 8004664:	69ba      	ldr	r2, [r7, #24]
 8004666:	fbb2 f3f3 	udiv	r3, r2, r3
 800466a:	61fb      	str	r3, [r7, #28]
          break;
 800466c:	e001      	b.n	8004672 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          break;
 800466e:	bf00      	nop
 8004670:	e21a      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004672:	bf00      	nop
        break;
 8004674:	e218      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8004676:	4b2c      	ldr	r3, [pc, #176]	; (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004678:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800467c:	f003 0304 	and.w	r3, r3, #4
 8004680:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d103      	bne.n	8004690 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>
          frequency = HAL_RCC_GetPCLK2Freq();
 8004688:	f7fe fe94 	bl	80033b4 <HAL_RCC_GetPCLK2Freq>
 800468c:	61f8      	str	r0, [r7, #28]
        break;
 800468e:	e20b      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          frequency = HAL_RCC_GetSysClockFreq();
 8004690:	f7fe fde4 	bl	800325c <HAL_RCC_GetSysClockFreq>
 8004694:	61f8      	str	r0, [r7, #28]
        break;
 8004696:	e207      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8004698:	4b23      	ldr	r3, [pc, #140]	; (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800469a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800469e:	f003 0318 	and.w	r3, r3, #24
 80046a2:	60fb      	str	r3, [r7, #12]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2b10      	cmp	r3, #16
 80046a8:	d010      	beq.n	80046cc <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2b10      	cmp	r3, #16
 80046ae:	d834      	bhi.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d003      	beq.n	80046be <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2b08      	cmp	r3, #8
 80046ba:	d024      	beq.n	8004706 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          break;
 80046bc:	e02d      	b.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80046be:	69b9      	ldr	r1, [r7, #24]
 80046c0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80046c4:	f000 fbe2 	bl	8004e8c <RCCEx_GetSAIxPeriphCLKFreq>
 80046c8:	61f8      	str	r0, [r7, #28]
          break;
 80046ca:	e02b      	b.n	8004724 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80046cc:	4b16      	ldr	r3, [pc, #88]	; (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0302 	and.w	r3, r3, #2
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d122      	bne.n	800471e <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80046d8:	4b13      	ldr	r3, [pc, #76]	; (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0308 	and.w	r3, r3, #8
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d005      	beq.n	80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 80046e4:	4b10      	ldr	r3, [pc, #64]	; (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	091b      	lsrs	r3, r3, #4
 80046ea:	f003 030f 	and.w	r3, r3, #15
 80046ee:	e005      	b.n	80046fc <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80046f0:	4b0d      	ldr	r3, [pc, #52]	; (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80046f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046f6:	0a1b      	lsrs	r3, r3, #8
 80046f8:	f003 030f 	and.w	r3, r3, #15
 80046fc:	4a0c      	ldr	r2, [pc, #48]	; (8004730 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80046fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004702:	61fb      	str	r3, [r7, #28]
          break;
 8004704:	e00b      	b.n	800471e <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004706:	4b08      	ldr	r3, [pc, #32]	; (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800470e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004712:	d106      	bne.n	8004722 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = HSI_VALUE;
 8004714:	4b05      	ldr	r3, [pc, #20]	; (800472c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004716:	61fb      	str	r3, [r7, #28]
          break;
 8004718:	e003      	b.n	8004722 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          break;
 800471a:	bf00      	nop
 800471c:	e1c4      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800471e:	bf00      	nop
 8004720:	e1c2      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004722:	bf00      	nop
        break;
 8004724:	e1c0      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 8004726:	bf00      	nop
 8004728:	40021000 	.word	0x40021000
 800472c:	00f42400 	.word	0x00f42400
 8004730:	0800c938 	.word	0x0800c938
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004734:	4b96      	ldr	r3, [pc, #600]	; (8004990 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800473a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800473e:	60fb      	str	r3, [r7, #12]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004746:	d013      	beq.n	8004770 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800474e:	d819      	bhi.n	8004784 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d004      	beq.n	8004760 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800475c:	d004      	beq.n	8004768 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
          break;
 800475e:	e011      	b.n	8004784 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004760:	f7fe fe12 	bl	8003388 <HAL_RCC_GetPCLK1Freq>
 8004764:	61f8      	str	r0, [r7, #28]
          break;
 8004766:	e010      	b.n	800478a <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8004768:	f7fe fd78 	bl	800325c <HAL_RCC_GetSysClockFreq>
 800476c:	61f8      	str	r0, [r7, #28]
          break;
 800476e:	e00c      	b.n	800478a <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004770:	4b87      	ldr	r3, [pc, #540]	; (8004990 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004778:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800477c:	d104      	bne.n	8004788 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = HSI_VALUE;
 800477e:	4b85      	ldr	r3, [pc, #532]	; (8004994 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004780:	61fb      	str	r3, [r7, #28]
          break;
 8004782:	e001      	b.n	8004788 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 8004784:	bf00      	nop
 8004786:	e18f      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004788:	bf00      	nop
        break;
 800478a:	e18d      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800478c:	4b80      	ldr	r3, [pc, #512]	; (8004990 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800478e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004792:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004796:	60fb      	str	r3, [r7, #12]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800479e:	d013      	beq.n	80047c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047a6:	d819      	bhi.n	80047dc <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d004      	beq.n	80047b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047b4:	d004      	beq.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>
          break;
 80047b6:	e011      	b.n	80047dc <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          frequency = HAL_RCC_GetPCLK1Freq();
 80047b8:	f7fe fde6 	bl	8003388 <HAL_RCC_GetPCLK1Freq>
 80047bc:	61f8      	str	r0, [r7, #28]
          break;
 80047be:	e010      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          frequency = HAL_RCC_GetSysClockFreq();
 80047c0:	f7fe fd4c 	bl	800325c <HAL_RCC_GetSysClockFreq>
 80047c4:	61f8      	str	r0, [r7, #28]
          break;
 80047c6:	e00c      	b.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80047c8:	4b71      	ldr	r3, [pc, #452]	; (8004990 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047d4:	d104      	bne.n	80047e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
            frequency = HSI_VALUE;
 80047d6:	4b6f      	ldr	r3, [pc, #444]	; (8004994 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80047d8:	61fb      	str	r3, [r7, #28]
          break;
 80047da:	e001      	b.n	80047e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          break;
 80047dc:	bf00      	nop
 80047de:	e163      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80047e0:	bf00      	nop
        break;
 80047e2:	e161      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80047e4:	4b6a      	ldr	r3, [pc, #424]	; (8004990 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80047e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047ee:	60fb      	str	r3, [r7, #12]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047f6:	d013      	beq.n	8004820 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047fe:	d819      	bhi.n	8004834 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d004      	beq.n	8004810 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800480c:	d004      	beq.n	8004818 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
          break;
 800480e:	e011      	b.n	8004834 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004810:	f7fe fdba 	bl	8003388 <HAL_RCC_GetPCLK1Freq>
 8004814:	61f8      	str	r0, [r7, #28]
          break;
 8004816:	e010      	b.n	800483a <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          frequency = HAL_RCC_GetSysClockFreq();
 8004818:	f7fe fd20 	bl	800325c <HAL_RCC_GetSysClockFreq>
 800481c:	61f8      	str	r0, [r7, #28]
          break;
 800481e:	e00c      	b.n	800483a <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004820:	4b5b      	ldr	r3, [pc, #364]	; (8004990 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004828:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800482c:	d104      	bne.n	8004838 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
            frequency = HSI_VALUE;
 800482e:	4b59      	ldr	r3, [pc, #356]	; (8004994 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004830:	61fb      	str	r3, [r7, #28]
          break;
 8004832:	e001      	b.n	8004838 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          break;
 8004834:	bf00      	nop
 8004836:	e137      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004838:	bf00      	nop
        break;
 800483a:	e135      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800483c:	4b54      	ldr	r3, [pc, #336]	; (8004990 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800483e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004842:	f003 0303 	and.w	r3, r3, #3
 8004846:	60fb      	str	r3, [r7, #12]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2b02      	cmp	r3, #2
 800484c:	d011      	beq.n	8004872 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2b02      	cmp	r3, #2
 8004852:	d818      	bhi.n	8004886 <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d003      	beq.n	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d004      	beq.n	800486a <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
          break;
 8004860:	e011      	b.n	8004886 <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004862:	f7fe fd91 	bl	8003388 <HAL_RCC_GetPCLK1Freq>
 8004866:	61f8      	str	r0, [r7, #28]
          break;
 8004868:	e010      	b.n	800488c <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          frequency = HAL_RCC_GetSysClockFreq();
 800486a:	f7fe fcf7 	bl	800325c <HAL_RCC_GetSysClockFreq>
 800486e:	61f8      	str	r0, [r7, #28]
          break;
 8004870:	e00c      	b.n	800488c <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004872:	4b47      	ldr	r3, [pc, #284]	; (8004990 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800487a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800487e:	d104      	bne.n	800488a <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
            frequency = HSI_VALUE;
 8004880:	4b44      	ldr	r3, [pc, #272]	; (8004994 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004882:	61fb      	str	r3, [r7, #28]
          break;
 8004884:	e001      	b.n	800488a <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          break;
 8004886:	bf00      	nop
 8004888:	e10e      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800488a:	bf00      	nop
        break;
 800488c:	e10c      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800488e:	4b40      	ldr	r3, [pc, #256]	; (8004990 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004894:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004898:	60fb      	str	r3, [r7, #12]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80048a0:	d02c      	beq.n	80048fc <HAL_RCCEx_GetPeriphCLKFreq+0xc80>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80048a8:	d833      	bhi.n	8004912 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80048b0:	d01a      	beq.n	80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0xc6c>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80048b8:	d82b      	bhi.n	8004912 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d004      	beq.n	80048ca <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80048c6:	d004      	beq.n	80048d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc56>
          break;
 80048c8:	e023      	b.n	8004912 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
          frequency = HAL_RCC_GetPCLK1Freq();
 80048ca:	f7fe fd5d 	bl	8003388 <HAL_RCC_GetPCLK1Freq>
 80048ce:	61f8      	str	r0, [r7, #28]
          break;
 80048d0:	e026      	b.n	8004920 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80048d2:	4b2f      	ldr	r3, [pc, #188]	; (8004990 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80048d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048d8:	f003 0302 	and.w	r3, r3, #2
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d11a      	bne.n	8004916 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
              frequency = LSI_VALUE;
 80048e0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80048e4:	61fb      	str	r3, [r7, #28]
          break;
 80048e6:	e016      	b.n	8004916 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80048e8:	4b29      	ldr	r3, [pc, #164]	; (8004990 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048f4:	d111      	bne.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
            frequency = HSI_VALUE;
 80048f6:	4b27      	ldr	r3, [pc, #156]	; (8004994 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80048f8:	61fb      	str	r3, [r7, #28]
          break;
 80048fa:	e00e      	b.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80048fc:	4b24      	ldr	r3, [pc, #144]	; (8004990 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80048fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004902:	f003 0302 	and.w	r3, r3, #2
 8004906:	2b02      	cmp	r3, #2
 8004908:	d109      	bne.n	800491e <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = LSE_VALUE;
 800490a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800490e:	61fb      	str	r3, [r7, #28]
          break;
 8004910:	e005      	b.n	800491e <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          break;
 8004912:	bf00      	nop
 8004914:	e0c8      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004916:	bf00      	nop
 8004918:	e0c6      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800491a:	bf00      	nop
 800491c:	e0c4      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800491e:	bf00      	nop
        break;
 8004920:	e0c2      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004922:	4b1b      	ldr	r3, [pc, #108]	; (8004990 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004928:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800492c:	60fb      	str	r3, [r7, #12]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004934:	d030      	beq.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800493c:	d837      	bhi.n	80049ae <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004944:	d01a      	beq.n	800497c <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800494c:	d82f      	bhi.n	80049ae <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d004      	beq.n	800495e <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800495a:	d004      	beq.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          break;
 800495c:	e027      	b.n	80049ae <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = HAL_RCC_GetPCLK1Freq();
 800495e:	f7fe fd13 	bl	8003388 <HAL_RCC_GetPCLK1Freq>
 8004962:	61f8      	str	r0, [r7, #28]
          break;
 8004964:	e02a      	b.n	80049bc <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004966:	4b0a      	ldr	r3, [pc, #40]	; (8004990 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004968:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b02      	cmp	r3, #2
 8004972:	d11e      	bne.n	80049b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
              frequency = LSI_VALUE;
 8004974:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004978:	61fb      	str	r3, [r7, #28]
          break;
 800497a:	e01a      	b.n	80049b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800497c:	4b04      	ldr	r3, [pc, #16]	; (8004990 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004988:	d115      	bne.n	80049b6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
            frequency = HSI_VALUE;
 800498a:	4b02      	ldr	r3, [pc, #8]	; (8004994 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800498c:	61fb      	str	r3, [r7, #28]
          break;
 800498e:	e012      	b.n	80049b6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8004990:	40021000 	.word	0x40021000
 8004994:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004998:	4b46      	ldr	r3, [pc, #280]	; (8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800499a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d109      	bne.n	80049ba <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = LSE_VALUE;
 80049a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049aa:	61fb      	str	r3, [r7, #28]
          break;
 80049ac:	e005      	b.n	80049ba <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
          break;
 80049ae:	bf00      	nop
 80049b0:	e07a      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80049b2:	bf00      	nop
 80049b4:	e078      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80049b6:	bf00      	nop
 80049b8:	e076      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80049ba:	bf00      	nop
        break;
 80049bc:	e074      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80049be:	4b3d      	ldr	r3, [pc, #244]	; (8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80049c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049c4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80049c8:	60fb      	str	r3, [r7, #12]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049d0:	d02c      	beq.n	8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049d8:	d855      	bhi.n	8004a86 <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d004      	beq.n	80049ea <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049e6:	d004      	beq.n	80049f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
          break;
 80049e8:	e04d      	b.n	8004a86 <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
          frequency = HAL_RCC_GetSysClockFreq();
 80049ea:	f7fe fc37 	bl	800325c <HAL_RCC_GetSysClockFreq>
 80049ee:	61f8      	str	r0, [r7, #28]
          break;
 80049f0:	e04e      	b.n	8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80049f2:	4b30      	ldr	r3, [pc, #192]	; (8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0302 	and.w	r3, r3, #2
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d145      	bne.n	8004a8a <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80049fe:	4b2d      	ldr	r3, [pc, #180]	; (8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0308 	and.w	r3, r3, #8
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d005      	beq.n	8004a16 <HAL_RCCEx_GetPeriphCLKFreq+0xd9a>
 8004a0a:	4b2a      	ldr	r3, [pc, #168]	; (8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	091b      	lsrs	r3, r3, #4
 8004a10:	f003 030f 	and.w	r3, r3, #15
 8004a14:	e005      	b.n	8004a22 <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
 8004a16:	4b27      	ldr	r3, [pc, #156]	; (8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004a18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a1c:	0a1b      	lsrs	r3, r3, #8
 8004a1e:	f003 030f 	and.w	r3, r3, #15
 8004a22:	4a25      	ldr	r2, [pc, #148]	; (8004ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8004a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a28:	61fb      	str	r3, [r7, #28]
          break;
 8004a2a:	e02e      	b.n	8004a8a <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004a2c:	4b21      	ldr	r3, [pc, #132]	; (8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a38:	d129      	bne.n	8004a8e <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004a3a:	4b1e      	ldr	r3, [pc, #120]	; (8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a46:	d122      	bne.n	8004a8e <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004a48:	4b1a      	ldr	r3, [pc, #104]	; (8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	0a1b      	lsrs	r3, r3, #8
 8004a4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a52:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	68ba      	ldr	r2, [r7, #8]
 8004a58:	fb03 f202 	mul.w	r2, r3, r2
 8004a5c:	4b15      	ldr	r3, [pc, #84]	; (8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	091b      	lsrs	r3, r3, #4
 8004a62:	f003 030f 	and.w	r3, r3, #15
 8004a66:	3301      	adds	r3, #1
 8004a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a6c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004a6e:	4b11      	ldr	r3, [pc, #68]	; (8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	0d5b      	lsrs	r3, r3, #21
 8004a74:	f003 0303 	and.w	r3, r3, #3
 8004a78:	3301      	adds	r3, #1
 8004a7a:	005b      	lsls	r3, r3, #1
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a82:	61fb      	str	r3, [r7, #28]
          break;
 8004a84:	e003      	b.n	8004a8e <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          break;
 8004a86:	bf00      	nop
 8004a88:	e00e      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004a8a:	bf00      	nop
 8004a8c:	e00c      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004a8e:	bf00      	nop
        break;
 8004a90:	e00a      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8004a92:	bf00      	nop
 8004a94:	e008      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8004a96:	bf00      	nop
 8004a98:	e006      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8004a9a:	bf00      	nop
 8004a9c:	e004      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8004a9e:	bf00      	nop
 8004aa0:	e002      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8004aa2:	bf00      	nop
 8004aa4:	e000      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8004aa6:	bf00      	nop
    }
  }

  return(frequency);
 8004aa8:	69fb      	ldr	r3, [r7, #28]
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3720      	adds	r7, #32
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	40021000 	.word	0x40021000
 8004ab8:	0800c938 	.word	0x0800c938

08004abc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004aca:	4b72      	ldr	r3, [pc, #456]	; (8004c94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	f003 0303 	and.w	r3, r3, #3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00e      	beq.n	8004af4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004ad6:	4b6f      	ldr	r3, [pc, #444]	; (8004c94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	f003 0203 	and.w	r2, r3, #3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d103      	bne.n	8004aee <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
       ||
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d142      	bne.n	8004b74 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	73fb      	strb	r3, [r7, #15]
 8004af2:	e03f      	b.n	8004b74 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2b03      	cmp	r3, #3
 8004afa:	d018      	beq.n	8004b2e <RCCEx_PLLSAI1_Config+0x72>
 8004afc:	2b03      	cmp	r3, #3
 8004afe:	d825      	bhi.n	8004b4c <RCCEx_PLLSAI1_Config+0x90>
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d002      	beq.n	8004b0a <RCCEx_PLLSAI1_Config+0x4e>
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d009      	beq.n	8004b1c <RCCEx_PLLSAI1_Config+0x60>
 8004b08:	e020      	b.n	8004b4c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b0a:	4b62      	ldr	r3, [pc, #392]	; (8004c94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d11d      	bne.n	8004b52 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b1a:	e01a      	b.n	8004b52 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b1c:	4b5d      	ldr	r3, [pc, #372]	; (8004c94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d116      	bne.n	8004b56 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b2c:	e013      	b.n	8004b56 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b2e:	4b59      	ldr	r3, [pc, #356]	; (8004c94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10f      	bne.n	8004b5a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b3a:	4b56      	ldr	r3, [pc, #344]	; (8004c94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d109      	bne.n	8004b5a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b4a:	e006      	b.n	8004b5a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b50:	e004      	b.n	8004b5c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004b52:	bf00      	nop
 8004b54:	e002      	b.n	8004b5c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004b56:	bf00      	nop
 8004b58:	e000      	b.n	8004b5c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004b5a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b5c:	7bfb      	ldrb	r3, [r7, #15]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d108      	bne.n	8004b74 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004b62:	4b4c      	ldr	r3, [pc, #304]	; (8004c94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	f023 0203 	bic.w	r2, r3, #3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4949      	ldr	r1, [pc, #292]	; (8004c94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004b74:	7bfb      	ldrb	r3, [r7, #15]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	f040 8086 	bne.w	8004c88 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004b7c:	4b45      	ldr	r3, [pc, #276]	; (8004c94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a44      	ldr	r2, [pc, #272]	; (8004c94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b82:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b88:	f7fc ff04 	bl	8001994 <HAL_GetTick>
 8004b8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b8e:	e009      	b.n	8004ba4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b90:	f7fc ff00 	bl	8001994 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d902      	bls.n	8004ba4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	73fb      	strb	r3, [r7, #15]
        break;
 8004ba2:	e005      	b.n	8004bb0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ba4:	4b3b      	ldr	r3, [pc, #236]	; (8004c94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1ef      	bne.n	8004b90 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004bb0:	7bfb      	ldrb	r3, [r7, #15]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d168      	bne.n	8004c88 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d113      	bne.n	8004be4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bbc:	4b35      	ldr	r3, [pc, #212]	; (8004c94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004bbe:	691a      	ldr	r2, [r3, #16]
 8004bc0:	4b35      	ldr	r3, [pc, #212]	; (8004c98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	6892      	ldr	r2, [r2, #8]
 8004bc8:	0211      	lsls	r1, r2, #8
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	68d2      	ldr	r2, [r2, #12]
 8004bce:	06d2      	lsls	r2, r2, #27
 8004bd0:	4311      	orrs	r1, r2
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	6852      	ldr	r2, [r2, #4]
 8004bd6:	3a01      	subs	r2, #1
 8004bd8:	0112      	lsls	r2, r2, #4
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	492d      	ldr	r1, [pc, #180]	; (8004c94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	610b      	str	r3, [r1, #16]
 8004be2:	e02d      	b.n	8004c40 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d115      	bne.n	8004c16 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bea:	4b2a      	ldr	r3, [pc, #168]	; (8004c94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004bec:	691a      	ldr	r2, [r3, #16]
 8004bee:	4b2b      	ldr	r3, [pc, #172]	; (8004c9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	6892      	ldr	r2, [r2, #8]
 8004bf6:	0211      	lsls	r1, r2, #8
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	6912      	ldr	r2, [r2, #16]
 8004bfc:	0852      	lsrs	r2, r2, #1
 8004bfe:	3a01      	subs	r2, #1
 8004c00:	0552      	lsls	r2, r2, #21
 8004c02:	4311      	orrs	r1, r2
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	6852      	ldr	r2, [r2, #4]
 8004c08:	3a01      	subs	r2, #1
 8004c0a:	0112      	lsls	r2, r2, #4
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	4921      	ldr	r1, [pc, #132]	; (8004c94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	610b      	str	r3, [r1, #16]
 8004c14:	e014      	b.n	8004c40 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c16:	4b1f      	ldr	r3, [pc, #124]	; (8004c94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c18:	691a      	ldr	r2, [r3, #16]
 8004c1a:	4b21      	ldr	r3, [pc, #132]	; (8004ca0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	6892      	ldr	r2, [r2, #8]
 8004c22:	0211      	lsls	r1, r2, #8
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	6952      	ldr	r2, [r2, #20]
 8004c28:	0852      	lsrs	r2, r2, #1
 8004c2a:	3a01      	subs	r2, #1
 8004c2c:	0652      	lsls	r2, r2, #25
 8004c2e:	4311      	orrs	r1, r2
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	6852      	ldr	r2, [r2, #4]
 8004c34:	3a01      	subs	r2, #1
 8004c36:	0112      	lsls	r2, r2, #4
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	4916      	ldr	r1, [pc, #88]	; (8004c94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004c40:	4b14      	ldr	r3, [pc, #80]	; (8004c94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a13      	ldr	r2, [pc, #76]	; (8004c94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c4a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c4c:	f7fc fea2 	bl	8001994 <HAL_GetTick>
 8004c50:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c52:	e009      	b.n	8004c68 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c54:	f7fc fe9e 	bl	8001994 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d902      	bls.n	8004c68 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	73fb      	strb	r3, [r7, #15]
          break;
 8004c66:	e005      	b.n	8004c74 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c68:	4b0a      	ldr	r3, [pc, #40]	; (8004c94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d0ef      	beq.n	8004c54 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004c74:	7bfb      	ldrb	r3, [r7, #15]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d106      	bne.n	8004c88 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004c7a:	4b06      	ldr	r3, [pc, #24]	; (8004c94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c7c:	691a      	ldr	r2, [r3, #16]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	4904      	ldr	r1, [pc, #16]	; (8004c94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	40021000 	.word	0x40021000
 8004c98:	07ff800f 	.word	0x07ff800f
 8004c9c:	ff9f800f 	.word	0xff9f800f
 8004ca0:	f9ff800f 	.word	0xf9ff800f

08004ca4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004cb2:	4b72      	ldr	r3, [pc, #456]	; (8004e7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	f003 0303 	and.w	r3, r3, #3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00e      	beq.n	8004cdc <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004cbe:	4b6f      	ldr	r3, [pc, #444]	; (8004e7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	f003 0203 	and.w	r2, r3, #3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d103      	bne.n	8004cd6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
       ||
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d142      	bne.n	8004d5c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	73fb      	strb	r3, [r7, #15]
 8004cda:	e03f      	b.n	8004d5c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2b03      	cmp	r3, #3
 8004ce2:	d018      	beq.n	8004d16 <RCCEx_PLLSAI2_Config+0x72>
 8004ce4:	2b03      	cmp	r3, #3
 8004ce6:	d825      	bhi.n	8004d34 <RCCEx_PLLSAI2_Config+0x90>
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d002      	beq.n	8004cf2 <RCCEx_PLLSAI2_Config+0x4e>
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d009      	beq.n	8004d04 <RCCEx_PLLSAI2_Config+0x60>
 8004cf0:	e020      	b.n	8004d34 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004cf2:	4b62      	ldr	r3, [pc, #392]	; (8004e7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d11d      	bne.n	8004d3a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d02:	e01a      	b.n	8004d3a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d04:	4b5d      	ldr	r3, [pc, #372]	; (8004e7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d116      	bne.n	8004d3e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d14:	e013      	b.n	8004d3e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d16:	4b59      	ldr	r3, [pc, #356]	; (8004e7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d10f      	bne.n	8004d42 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d22:	4b56      	ldr	r3, [pc, #344]	; (8004e7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d109      	bne.n	8004d42 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d32:	e006      	b.n	8004d42 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	73fb      	strb	r3, [r7, #15]
      break;
 8004d38:	e004      	b.n	8004d44 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004d3a:	bf00      	nop
 8004d3c:	e002      	b.n	8004d44 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004d3e:	bf00      	nop
 8004d40:	e000      	b.n	8004d44 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004d42:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d44:	7bfb      	ldrb	r3, [r7, #15]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d108      	bne.n	8004d5c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004d4a:	4b4c      	ldr	r3, [pc, #304]	; (8004e7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	f023 0203 	bic.w	r2, r3, #3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4949      	ldr	r1, [pc, #292]	; (8004e7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004d5c:	7bfb      	ldrb	r3, [r7, #15]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	f040 8086 	bne.w	8004e70 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004d64:	4b45      	ldr	r3, [pc, #276]	; (8004e7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a44      	ldr	r2, [pc, #272]	; (8004e7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d70:	f7fc fe10 	bl	8001994 <HAL_GetTick>
 8004d74:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d76:	e009      	b.n	8004d8c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d78:	f7fc fe0c 	bl	8001994 <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d902      	bls.n	8004d8c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	73fb      	strb	r3, [r7, #15]
        break;
 8004d8a:	e005      	b.n	8004d98 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d8c:	4b3b      	ldr	r3, [pc, #236]	; (8004e7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d1ef      	bne.n	8004d78 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004d98:	7bfb      	ldrb	r3, [r7, #15]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d168      	bne.n	8004e70 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d113      	bne.n	8004dcc <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004da4:	4b35      	ldr	r3, [pc, #212]	; (8004e7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004da6:	695a      	ldr	r2, [r3, #20]
 8004da8:	4b35      	ldr	r3, [pc, #212]	; (8004e80 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004daa:	4013      	ands	r3, r2
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	6892      	ldr	r2, [r2, #8]
 8004db0:	0211      	lsls	r1, r2, #8
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	68d2      	ldr	r2, [r2, #12]
 8004db6:	06d2      	lsls	r2, r2, #27
 8004db8:	4311      	orrs	r1, r2
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	6852      	ldr	r2, [r2, #4]
 8004dbe:	3a01      	subs	r2, #1
 8004dc0:	0112      	lsls	r2, r2, #4
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	492d      	ldr	r1, [pc, #180]	; (8004e7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	614b      	str	r3, [r1, #20]
 8004dca:	e02d      	b.n	8004e28 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d115      	bne.n	8004dfe <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004dd2:	4b2a      	ldr	r3, [pc, #168]	; (8004e7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004dd4:	695a      	ldr	r2, [r3, #20]
 8004dd6:	4b2b      	ldr	r3, [pc, #172]	; (8004e84 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004dd8:	4013      	ands	r3, r2
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	6892      	ldr	r2, [r2, #8]
 8004dde:	0211      	lsls	r1, r2, #8
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	6912      	ldr	r2, [r2, #16]
 8004de4:	0852      	lsrs	r2, r2, #1
 8004de6:	3a01      	subs	r2, #1
 8004de8:	0552      	lsls	r2, r2, #21
 8004dea:	4311      	orrs	r1, r2
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	6852      	ldr	r2, [r2, #4]
 8004df0:	3a01      	subs	r2, #1
 8004df2:	0112      	lsls	r2, r2, #4
 8004df4:	430a      	orrs	r2, r1
 8004df6:	4921      	ldr	r1, [pc, #132]	; (8004e7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	614b      	str	r3, [r1, #20]
 8004dfc:	e014      	b.n	8004e28 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004dfe:	4b1f      	ldr	r3, [pc, #124]	; (8004e7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e00:	695a      	ldr	r2, [r3, #20]
 8004e02:	4b21      	ldr	r3, [pc, #132]	; (8004e88 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004e04:	4013      	ands	r3, r2
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	6892      	ldr	r2, [r2, #8]
 8004e0a:	0211      	lsls	r1, r2, #8
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	6952      	ldr	r2, [r2, #20]
 8004e10:	0852      	lsrs	r2, r2, #1
 8004e12:	3a01      	subs	r2, #1
 8004e14:	0652      	lsls	r2, r2, #25
 8004e16:	4311      	orrs	r1, r2
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	6852      	ldr	r2, [r2, #4]
 8004e1c:	3a01      	subs	r2, #1
 8004e1e:	0112      	lsls	r2, r2, #4
 8004e20:	430a      	orrs	r2, r1
 8004e22:	4916      	ldr	r1, [pc, #88]	; (8004e7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004e28:	4b14      	ldr	r3, [pc, #80]	; (8004e7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a13      	ldr	r2, [pc, #76]	; (8004e7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e32:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e34:	f7fc fdae 	bl	8001994 <HAL_GetTick>
 8004e38:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e3a:	e009      	b.n	8004e50 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e3c:	f7fc fdaa 	bl	8001994 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d902      	bls.n	8004e50 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	73fb      	strb	r3, [r7, #15]
          break;
 8004e4e:	e005      	b.n	8004e5c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e50:	4b0a      	ldr	r3, [pc, #40]	; (8004e7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d0ef      	beq.n	8004e3c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004e5c:	7bfb      	ldrb	r3, [r7, #15]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d106      	bne.n	8004e70 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004e62:	4b06      	ldr	r3, [pc, #24]	; (8004e7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e64:	695a      	ldr	r2, [r3, #20]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	4904      	ldr	r1, [pc, #16]	; (8004e7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	40021000 	.word	0x40021000
 8004e80:	07ff800f 	.word	0x07ff800f
 8004e84:	ff9f800f 	.word	0xff9f800f
 8004e88:	f9ff800f 	.word	0xf9ff800f

08004e8c <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b089      	sub	sp, #36	; 0x24
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8004e96:	2300      	movs	r3, #0
 8004e98:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ea8:	d10b      	bne.n	8004ec2 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004eaa:	4b7e      	ldr	r3, [pc, #504]	; (80050a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004eac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004eb0:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8004eb4:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	2b60      	cmp	r3, #96	; 0x60
 8004eba:	d112      	bne.n	8004ee2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004ebc:	4b7a      	ldr	r3, [pc, #488]	; (80050a8 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8004ebe:	61fb      	str	r3, [r7, #28]
 8004ec0:	e00f      	b.n	8004ee2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ec8:	d10b      	bne.n	8004ee2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8004eca:	4b76      	ldr	r3, [pc, #472]	; (80050a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004ecc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ed0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ed4:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004edc:	d101      	bne.n	8004ee2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8004ede:	4b72      	ldr	r3, [pc, #456]	; (80050a8 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8004ee0:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	f040 80d6 	bne.w	8005096 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	2b40      	cmp	r3, #64	; 0x40
 8004ef2:	d003      	beq.n	8004efc <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004efa:	d13b      	bne.n	8004f74 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004efc:	4b69      	ldr	r3, [pc, #420]	; (80050a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f08:	f040 80c4 	bne.w	8005094 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8004f0c:	4b65      	ldr	r3, [pc, #404]	; (80050a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f000 80bd 	beq.w	8005094 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004f1a:	4b62      	ldr	r3, [pc, #392]	; (80050a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	091b      	lsrs	r3, r3, #4
 8004f20:	f003 030f 	and.w	r3, r3, #15
 8004f24:	3301      	adds	r3, #1
 8004f26:	693a      	ldr	r2, [r7, #16]
 8004f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f2c:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004f2e:	4b5d      	ldr	r3, [pc, #372]	; (80050a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	0a1b      	lsrs	r3, r3, #8
 8004f34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f38:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8004f3a:	4b5a      	ldr	r3, [pc, #360]	; (80050a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	0edb      	lsrs	r3, r3, #27
 8004f40:	f003 031f 	and.w	r3, r3, #31
 8004f44:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d10a      	bne.n	8004f62 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004f4c:	4b55      	ldr	r3, [pc, #340]	; (80050a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d002      	beq.n	8004f5e <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8004f58:	2311      	movs	r3, #17
 8004f5a:	617b      	str	r3, [r7, #20]
 8004f5c:	e001      	b.n	8004f62 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8004f5e:	2307      	movs	r3, #7
 8004f60:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	fb03 f202 	mul.w	r2, r3, r2
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f70:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004f72:	e08f      	b.n	8005094 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d13a      	bne.n	8004ff0 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8004f7a:	4b4a      	ldr	r3, [pc, #296]	; (80050a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f86:	f040 8086 	bne.w	8005096 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8004f8a:	4b46      	ldr	r3, [pc, #280]	; (80050a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d07f      	beq.n	8005096 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004f96:	4b43      	ldr	r3, [pc, #268]	; (80050a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	091b      	lsrs	r3, r3, #4
 8004f9c:	f003 030f 	and.w	r3, r3, #15
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	693a      	ldr	r2, [r7, #16]
 8004fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa8:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004faa:	4b3e      	ldr	r3, [pc, #248]	; (80050a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	0a1b      	lsrs	r3, r3, #8
 8004fb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fb4:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8004fb6:	4b3b      	ldr	r3, [pc, #236]	; (80050a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	0edb      	lsrs	r3, r3, #27
 8004fbc:	f003 031f 	and.w	r3, r3, #31
 8004fc0:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d10a      	bne.n	8004fde <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8004fc8:	4b36      	ldr	r3, [pc, #216]	; (80050a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d002      	beq.n	8004fda <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8004fd4:	2311      	movs	r3, #17
 8004fd6:	617b      	str	r3, [r7, #20]
 8004fd8:	e001      	b.n	8004fde <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8004fda:	2307      	movs	r3, #7
 8004fdc:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	fb03 f202 	mul.w	r2, r3, r2
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fec:	61fb      	str	r3, [r7, #28]
 8004fee:	e052      	b.n	8005096 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	2b80      	cmp	r3, #128	; 0x80
 8004ff4:	d003      	beq.n	8004ffe <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ffc:	d109      	bne.n	8005012 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004ffe:	4b29      	ldr	r3, [pc, #164]	; (80050a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005006:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800500a:	d144      	bne.n	8005096 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 800500c:	4b27      	ldr	r3, [pc, #156]	; (80050ac <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 800500e:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005010:	e041      	b.n	8005096 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	2b20      	cmp	r3, #32
 8005016:	d003      	beq.n	8005020 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800501e:	d13a      	bne.n	8005096 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8005020:	4b20      	ldr	r3, [pc, #128]	; (80050a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005028:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800502c:	d133      	bne.n	8005096 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800502e:	4b1d      	ldr	r3, [pc, #116]	; (80050a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d02d      	beq.n	8005096 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800503a:	4b1a      	ldr	r3, [pc, #104]	; (80050a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	091b      	lsrs	r3, r3, #4
 8005040:	f003 030f 	and.w	r3, r3, #15
 8005044:	3301      	adds	r3, #1
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	fbb2 f3f3 	udiv	r3, r2, r3
 800504c:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800504e:	4b15      	ldr	r3, [pc, #84]	; (80050a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	0a1b      	lsrs	r3, r3, #8
 8005054:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005058:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800505a:	4b12      	ldr	r3, [pc, #72]	; (80050a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	0edb      	lsrs	r3, r3, #27
 8005060:	f003 031f 	and.w	r3, r3, #31
 8005064:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d10a      	bne.n	8005082 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800506c:	4b0d      	ldr	r3, [pc, #52]	; (80050a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005074:	2b00      	cmp	r3, #0
 8005076:	d002      	beq.n	800507e <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8005078:	2311      	movs	r3, #17
 800507a:	617b      	str	r3, [r7, #20]
 800507c:	e001      	b.n	8005082 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 800507e:	2307      	movs	r3, #7
 8005080:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	fb03 f202 	mul.w	r2, r3, r2
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005090:	61fb      	str	r3, [r7, #28]
 8005092:	e000      	b.n	8005096 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005094:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8005096:	69fb      	ldr	r3, [r7, #28]
}
 8005098:	4618      	mov	r0, r3
 800509a:	3724      	adds	r7, #36	; 0x24
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr
 80050a4:	40021000 	.word	0x40021000
 80050a8:	001fff68 	.word	0x001fff68
 80050ac:	00f42400 	.word	0x00f42400

080050b0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b08a      	sub	sp, #40	; 0x28
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d101      	bne.n	80050c2 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e1c7      	b.n	8005452 <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d10e      	bne.n	80050ea <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a81      	ldr	r2, [pc, #516]	; (80052d8 <HAL_SAI_Init+0x228>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d107      	bne.n	80050e6 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d103      	bne.n	80050e6 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d001      	beq.n	80050ea <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e1b3      	b.n	8005452 <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d106      	bne.n	8005104 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f7fc fac8 	bl	8001694 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 f9b1 	bl	800546c <SAI_Disable>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d001      	beq.n	8005114 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e19e      	b.n	8005452 <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2202      	movs	r2, #2
 8005118:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	2b02      	cmp	r3, #2
 8005122:	d00c      	beq.n	800513e <HAL_SAI_Init+0x8e>
 8005124:	2b02      	cmp	r3, #2
 8005126:	d80d      	bhi.n	8005144 <HAL_SAI_Init+0x94>
 8005128:	2b00      	cmp	r3, #0
 800512a:	d002      	beq.n	8005132 <HAL_SAI_Init+0x82>
 800512c:	2b01      	cmp	r3, #1
 800512e:	d003      	beq.n	8005138 <HAL_SAI_Init+0x88>
 8005130:	e008      	b.n	8005144 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8005132:	2300      	movs	r3, #0
 8005134:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8005136:	e008      	b.n	800514a <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8005138:	2310      	movs	r3, #16
 800513a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800513c:	e005      	b.n	800514a <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800513e:	2320      	movs	r3, #32
 8005140:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8005142:	e002      	b.n	800514a <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8005144:	2300      	movs	r3, #0
 8005146:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8005148:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	2b03      	cmp	r3, #3
 8005150:	d81d      	bhi.n	800518e <HAL_SAI_Init+0xde>
 8005152:	a201      	add	r2, pc, #4	; (adr r2, 8005158 <HAL_SAI_Init+0xa8>)
 8005154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005158:	08005169 	.word	0x08005169
 800515c:	0800516f 	.word	0x0800516f
 8005160:	08005177 	.word	0x08005177
 8005164:	0800517f 	.word	0x0800517f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8005168:	2300      	movs	r3, #0
 800516a:	61fb      	str	r3, [r7, #28]
      break;
 800516c:	e012      	b.n	8005194 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800516e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005172:	61fb      	str	r3, [r7, #28]
      break;
 8005174:	e00e      	b.n	8005194 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005176:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800517a:	61fb      	str	r3, [r7, #28]
      break;
 800517c:	e00a      	b.n	8005194 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800517e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005182:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005186:	f043 0301 	orr.w	r3, r3, #1
 800518a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800518c:	e002      	b.n	8005194 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800518e:	2300      	movs	r3, #0
 8005190:	61fb      	str	r3, [r7, #28]
      break;
 8005192:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a4f      	ldr	r2, [pc, #316]	; (80052d8 <HAL_SAI_Init+0x228>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d004      	beq.n	80051a8 <HAL_SAI_Init+0xf8>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a4e      	ldr	r2, [pc, #312]	; (80052dc <HAL_SAI_Init+0x22c>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d103      	bne.n	80051b0 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 80051a8:	4a4d      	ldr	r2, [pc, #308]	; (80052e0 <HAL_SAI_Init+0x230>)
 80051aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ac:	6013      	str	r3, [r2, #0]
 80051ae:	e002      	b.n	80051b6 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80051b0:	4a4c      	ldr	r2, [pc, #304]	; (80052e4 <HAL_SAI_Init+0x234>)
 80051b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b4:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	69db      	ldr	r3, [r3, #28]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d073      	beq.n	80052a6 <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a45      	ldr	r2, [pc, #276]	; (80052d8 <HAL_SAI_Init+0x228>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d004      	beq.n	80051d2 <HAL_SAI_Init+0x122>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a43      	ldr	r2, [pc, #268]	; (80052dc <HAL_SAI_Init+0x22c>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d105      	bne.n	80051de <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80051d2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80051d6:	f7fe fd51 	bl	8003c7c <HAL_RCCEx_GetPeriphCLKFreq>
 80051da:	61b8      	str	r0, [r7, #24]
 80051dc:	e004      	b.n	80051e8 <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80051de:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80051e2:	f7fe fd4b 	bl	8003c7c <HAL_RCCEx_GetPeriphCLKFreq>
 80051e6:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	695b      	ldr	r3, [r3, #20]
 80051ec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80051f0:	d120      	bne.n	8005234 <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f6:	2b04      	cmp	r3, #4
 80051f8:	d102      	bne.n	8005200 <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 80051fa:	2340      	movs	r3, #64	; 0x40
 80051fc:	613b      	str	r3, [r7, #16]
 80051fe:	e00a      	b.n	8005216 <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005204:	2b08      	cmp	r3, #8
 8005206:	d103      	bne.n	8005210 <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8005208:	f44f 7380 	mov.w	r3, #256	; 0x100
 800520c:	613b      	str	r3, [r7, #16]
 800520e:	e002      	b.n	8005216 <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005214:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8005216:	69ba      	ldr	r2, [r7, #24]
 8005218:	4613      	mov	r3, r2
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	4413      	add	r3, r2
 800521e:	005b      	lsls	r3, r3, #1
 8005220:	4619      	mov	r1, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	69db      	ldr	r3, [r3, #28]
 8005226:	693a      	ldr	r2, [r7, #16]
 8005228:	fb02 f303 	mul.w	r3, r2, r3
 800522c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005230:	617b      	str	r3, [r7, #20]
 8005232:	e017      	b.n	8005264 <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005238:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800523c:	d101      	bne.n	8005242 <HAL_SAI_Init+0x192>
 800523e:	2302      	movs	r3, #2
 8005240:	e000      	b.n	8005244 <HAL_SAI_Init+0x194>
 8005242:	2301      	movs	r3, #1
 8005244:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8005246:	69ba      	ldr	r2, [r7, #24]
 8005248:	4613      	mov	r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	4413      	add	r3, r2
 800524e:	005b      	lsls	r3, r3, #1
 8005250:	4619      	mov	r1, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	69db      	ldr	r3, [r3, #28]
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	fb02 f303 	mul.w	r3, r2, r3
 800525c:	021b      	lsls	r3, r3, #8
 800525e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005262:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	4a20      	ldr	r2, [pc, #128]	; (80052e8 <HAL_SAI_Init+0x238>)
 8005268:	fba2 2303 	umull	r2, r3, r2, r3
 800526c:	08da      	lsrs	r2, r3, #3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8005272:	6979      	ldr	r1, [r7, #20]
 8005274:	4b1c      	ldr	r3, [pc, #112]	; (80052e8 <HAL_SAI_Init+0x238>)
 8005276:	fba3 2301 	umull	r2, r3, r3, r1
 800527a:	08da      	lsrs	r2, r3, #3
 800527c:	4613      	mov	r3, r2
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	4413      	add	r3, r2
 8005282:	005b      	lsls	r3, r3, #1
 8005284:	1aca      	subs	r2, r1, r3
 8005286:	2a08      	cmp	r2, #8
 8005288:	d904      	bls.n	8005294 <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a1b      	ldr	r3, [r3, #32]
 800528e:	1c5a      	adds	r2, r3, #1
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005298:	2b04      	cmp	r3, #4
 800529a:	d104      	bne.n	80052a6 <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a1b      	ldr	r3, [r3, #32]
 80052a0:	085a      	lsrs	r2, r3, #1
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d003      	beq.n	80052b6 <HAL_SAI_Init+0x206>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d109      	bne.n	80052ca <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d101      	bne.n	80052c2 <HAL_SAI_Init+0x212>
 80052be:	2300      	movs	r3, #0
 80052c0:	e001      	b.n	80052c6 <HAL_SAI_Init+0x216>
 80052c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052c6:	623b      	str	r3, [r7, #32]
 80052c8:	e012      	b.n	80052f0 <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d10c      	bne.n	80052ec <HAL_SAI_Init+0x23c>
 80052d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052d6:	e00a      	b.n	80052ee <HAL_SAI_Init+0x23e>
 80052d8:	40015404 	.word	0x40015404
 80052dc:	40015424 	.word	0x40015424
 80052e0:	40015400 	.word	0x40015400
 80052e4:	40015800 	.word	0x40015800
 80052e8:	cccccccd 	.word	0xcccccccd
 80052ec:	2300      	movs	r3, #0
 80052ee:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	6819      	ldr	r1, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	4b58      	ldr	r3, [pc, #352]	; (800545c <HAL_SAI_Init+0x3ac>)
 80052fc:	400b      	ands	r3, r1
 80052fe:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	6819      	ldr	r1, [r3, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005314:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800531a:	431a      	orrs	r2, r3
 800531c:	6a3b      	ldr	r3, [r7, #32]
 800531e:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 8005328:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005334:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	051b      	lsls	r3, r3, #20
 800533c:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8005342:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	430a      	orrs	r2, r1
 800534a:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	6812      	ldr	r2, [r2, #0]
 8005356:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800535a:	f023 030f 	bic.w	r3, r3, #15
 800535e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	6859      	ldr	r1, [r3, #4]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	699a      	ldr	r2, [r3, #24]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536e:	431a      	orrs	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005374:	431a      	orrs	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	430a      	orrs	r2, r1
 800537c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	6899      	ldr	r1, [r3, #8]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	4b35      	ldr	r3, [pc, #212]	; (8005460 <HAL_SAI_Init+0x3b0>)
 800538a:	400b      	ands	r3, r1
 800538c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	6899      	ldr	r1, [r3, #8]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005398:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800539e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
                           hsai->FrameInit.FSOffset |
 80053a4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSDefinition |
 80053aa:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053b0:	3b01      	subs	r3, #1
 80053b2:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80053b4:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	430a      	orrs	r2, r1
 80053bc:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68d9      	ldr	r1, [r3, #12]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	f24f 0320 	movw	r3, #61472	; 0xf020
 80053cc:	400b      	ands	r3, r1
 80053ce:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68d9      	ldr	r1, [r3, #12]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053de:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e4:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80053e6:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053ec:	3b01      	subs	r3, #1
 80053ee:	021b      	lsls	r3, r3, #8
 80053f0:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	430a      	orrs	r2, r1
 80053f8:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a19      	ldr	r2, [pc, #100]	; (8005464 <HAL_SAI_Init+0x3b4>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d119      	bne.n	8005438 <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8005404:	4b18      	ldr	r3, [pc, #96]	; (8005468 <HAL_SAI_Init+0x3b8>)
 8005406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005408:	4a17      	ldr	r2, [pc, #92]	; (8005468 <HAL_SAI_Init+0x3b8>)
 800540a:	f023 0301 	bic.w	r3, r3, #1
 800540e:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005416:	2b01      	cmp	r3, #1
 8005418:	d10e      	bne.n	8005438 <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005422:	3b01      	subs	r3, #1
 8005424:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8005426:	4910      	ldr	r1, [pc, #64]	; (8005468 <HAL_SAI_Init+0x3b8>)
 8005428:	4313      	orrs	r3, r2
 800542a:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 800542c:	4b0e      	ldr	r3, [pc, #56]	; (8005468 <HAL_SAI_Init+0x3b8>)
 800542e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005430:	4a0d      	ldr	r2, [pc, #52]	; (8005468 <HAL_SAI_Init+0x3b8>)
 8005432:	f043 0301 	orr.w	r3, r3, #1
 8005436:	6453      	str	r3, [r2, #68]	; 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3728      	adds	r7, #40	; 0x28
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	f805c010 	.word	0xf805c010
 8005460:	fff88000 	.word	0xfff88000
 8005464:	40015404 	.word	0x40015404
 8005468:	40015400 	.word	0x40015400

0800546c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005474:	4b18      	ldr	r3, [pc, #96]	; (80054d8 <SAI_Disable+0x6c>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a18      	ldr	r2, [pc, #96]	; (80054dc <SAI_Disable+0x70>)
 800547a:	fba2 2303 	umull	r2, r3, r2, r3
 800547e:	0b1b      	lsrs	r3, r3, #12
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005484:	2300      	movs	r3, #0
 8005486:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005496:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d10a      	bne.n	80054b4 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      status = HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	72fb      	strb	r3, [r7, #11]
      break;
 80054b2:	e009      	b.n	80054c8 <SAI_Disable+0x5c>
    }
    count--;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	3b01      	subs	r3, #1
 80054b8:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1e7      	bne.n	8005498 <SAI_Disable+0x2c>

  return status;
 80054c8:	7afb      	ldrb	r3, [r7, #11]
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3714      	adds	r7, #20
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	20000000 	.word	0x20000000
 80054dc:	95cbec1b 	.word	0x95cbec1b

080054e0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b08a      	sub	sp, #40	; 0x28
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d101      	bne.n	80054f2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e078      	b.n	80055e4 <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d105      	bne.n	800550a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f7fb fe05 	bl	8001114 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2203      	movs	r2, #3
 800550e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 f86a 	bl	80055ec <HAL_SD_InitCard>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d001      	beq.n	8005522 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e060      	b.n	80055e4 <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8005522:	f107 0308 	add.w	r3, r7, #8
 8005526:	4619      	mov	r1, r3
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 faa5 	bl	8005a78 <HAL_SD_GetCardStatus>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d001      	beq.n	8005538 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e055      	b.n	80055e4 <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8005538:	7e3b      	ldrb	r3, [r7, #24]
 800553a:	b2db      	uxtb	r3, r3
 800553c:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800553e:	7e7b      	ldrb	r3, [r7, #25]
 8005540:	b2db      	uxtb	r3, r3
 8005542:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005548:	2b01      	cmp	r3, #1
 800554a:	d10a      	bne.n	8005562 <HAL_SD_Init+0x82>
 800554c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554e:	2b00      	cmp	r3, #0
 8005550:	d102      	bne.n	8005558 <HAL_SD_Init+0x78>
 8005552:	6a3b      	ldr	r3, [r7, #32]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d004      	beq.n	8005562 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800555e:	65da      	str	r2, [r3, #92]	; 0x5c
 8005560:	e00b      	b.n	800557a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005566:	2b01      	cmp	r3, #1
 8005568:	d104      	bne.n	8005574 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005570:	65da      	str	r2, [r3, #92]	; 0x5c
 8005572:	e002      	b.n	800557a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	4619      	mov	r1, r3
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 fb2f 	bl	8005be4 <HAL_SD_ConfigWideBusOperation>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d001      	beq.n	8005590 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e029      	b.n	80055e4 <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8005590:	f7fc fa00 	bl	8001994 <HAL_GetTick>
 8005594:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005596:	e014      	b.n	80055c2 <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8005598:	f7fc f9fc 	bl	8001994 <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a6:	d10c      	bne.n	80055c2 <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80055ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e010      	b.n	80055e4 <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 fc22 	bl	8005e0c <HAL_SD_GetCardState>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b04      	cmp	r3, #4
 80055cc:	d1e4      	bne.n	8005598 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2201      	movs	r2, #1
 80055de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3728      	adds	r7, #40	; 0x28
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80055ec:	b5b0      	push	{r4, r5, r7, lr}
 80055ee:	b08e      	sub	sp, #56	; 0x38
 80055f0:	af04      	add	r7, sp, #16
 80055f2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80055f4:	2300      	movs	r3, #0
 80055f6:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80055f8:	2300      	movs	r3, #0
 80055fa:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80055fc:	2300      	movs	r3, #0
 80055fe:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005600:	2300      	movs	r3, #0
 8005602:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8005604:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005608:	f7fe fb38 	bl	8003c7c <HAL_RCCEx_GetPeriphCLKFreq>
 800560c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800560e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005610:	2b00      	cmp	r3, #0
 8005612:	d109      	bne.n	8005628 <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005622:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e079      	b.n	800571c <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8005628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562a:	0a1b      	lsrs	r3, r3, #8
 800562c:	4a3d      	ldr	r2, [pc, #244]	; (8005724 <HAL_SD_InitCard+0x138>)
 800562e:	fba2 2303 	umull	r2, r3, r2, r3
 8005632:	091b      	lsrs	r3, r3, #4
 8005634:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	2b01      	cmp	r3, #1
 8005642:	d107      	bne.n	8005654 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f042 0210 	orr.w	r2, r2, #16
 8005652:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681d      	ldr	r5, [r3, #0]
 8005658:	466c      	mov	r4, sp
 800565a:	f107 0314 	add.w	r3, r7, #20
 800565e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005662:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005666:	f107 0308 	add.w	r3, r7, #8
 800566a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800566c:	4628      	mov	r0, r5
 800566e:	f002 f9f3 	bl	8007a58 <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4618      	mov	r0, r3
 8005678:	f002 fa25 	bl	8007ac6 <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	005b      	lsls	r3, r3, #1
 8005680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005682:	fbb2 f3f3 	udiv	r3, r2, r3
 8005686:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8005688:	4a27      	ldr	r2, [pc, #156]	; (8005728 <HAL_SD_InitCard+0x13c>)
 800568a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005690:	3301      	adds	r3, #1
 8005692:	4618      	mov	r0, r3
 8005694:	f7fc f98a 	bl	80019ac <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 fc97 	bl	8005fcc <SD_PowerON>
 800569e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80056a0:	6a3b      	ldr	r3, [r7, #32]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d00b      	beq.n	80056be <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056b2:	6a3b      	ldr	r3, [r7, #32]
 80056b4:	431a      	orrs	r2, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e02e      	b.n	800571c <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 fbc4 	bl	8005e4c <SD_InitCard>
 80056c4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80056c6:	6a3b      	ldr	r3, [r7, #32]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00b      	beq.n	80056e4 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056d8:	6a3b      	ldr	r3, [r7, #32]
 80056da:	431a      	orrs	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e01b      	b.n	800571c <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80056ec:	4618      	mov	r0, r3
 80056ee:	f002 fa81 	bl	8007bf4 <SDMMC_CmdBlockLength>
 80056f2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80056f4:	6a3b      	ldr	r3, [r7, #32]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00f      	beq.n	800571a <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a0b      	ldr	r2, [pc, #44]	; (800572c <HAL_SD_InitCard+0x140>)
 8005700:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005706:	6a3b      	ldr	r3, [r7, #32]
 8005708:	431a      	orrs	r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e000      	b.n	800571c <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	3728      	adds	r7, #40	; 0x28
 8005720:	46bd      	mov	sp, r7
 8005722:	bdb0      	pop	{r4, r5, r7, pc}
 8005724:	014f8b59 	.word	0x014f8b59
 8005728:	00012110 	.word	0x00012110
 800572c:	1fe00fff 	.word	0x1fe00fff

08005730 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800573e:	0f9b      	lsrs	r3, r3, #30
 8005740:	b2da      	uxtb	r2, r3
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800574a:	0e9b      	lsrs	r3, r3, #26
 800574c:	b2db      	uxtb	r3, r3
 800574e:	f003 030f 	and.w	r3, r3, #15
 8005752:	b2da      	uxtb	r2, r3
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800575c:	0e1b      	lsrs	r3, r3, #24
 800575e:	b2db      	uxtb	r3, r3
 8005760:	f003 0303 	and.w	r3, r3, #3
 8005764:	b2da      	uxtb	r2, r3
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800576e:	0c1b      	lsrs	r3, r3, #16
 8005770:	b2da      	uxtb	r2, r3
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800577a:	0a1b      	lsrs	r3, r3, #8
 800577c:	b2da      	uxtb	r2, r3
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005786:	b2da      	uxtb	r2, r3
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005790:	0d1b      	lsrs	r3, r3, #20
 8005792:	b29a      	uxth	r2, r3
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800579c:	0c1b      	lsrs	r3, r3, #16
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	f003 030f 	and.w	r3, r3, #15
 80057a4:	b2da      	uxtb	r2, r3
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057ae:	0bdb      	lsrs	r3, r3, #15
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	f003 0301 	and.w	r3, r3, #1
 80057b6:	b2da      	uxtb	r2, r3
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057c0:	0b9b      	lsrs	r3, r3, #14
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	f003 0301 	and.w	r3, r3, #1
 80057c8:	b2da      	uxtb	r2, r3
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057d2:	0b5b      	lsrs	r3, r3, #13
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	f003 0301 	and.w	r3, r3, #1
 80057da:	b2da      	uxtb	r2, r3
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057e4:	0b1b      	lsrs	r3, r3, #12
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	f003 0301 	and.w	r3, r3, #1
 80057ec:	b2da      	uxtb	r2, r3
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	2200      	movs	r2, #0
 80057f6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d163      	bne.n	80058c8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005804:	009a      	lsls	r2, r3, #2
 8005806:	f640 73fc 	movw	r3, #4092	; 0xffc
 800580a:	4013      	ands	r3, r2
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005810:	0f92      	lsrs	r2, r2, #30
 8005812:	431a      	orrs	r2, r3
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800581c:	0edb      	lsrs	r3, r3, #27
 800581e:	b2db      	uxtb	r3, r3
 8005820:	f003 0307 	and.w	r3, r3, #7
 8005824:	b2da      	uxtb	r2, r3
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800582e:	0e1b      	lsrs	r3, r3, #24
 8005830:	b2db      	uxtb	r3, r3
 8005832:	f003 0307 	and.w	r3, r3, #7
 8005836:	b2da      	uxtb	r2, r3
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005840:	0d5b      	lsrs	r3, r3, #21
 8005842:	b2db      	uxtb	r3, r3
 8005844:	f003 0307 	and.w	r3, r3, #7
 8005848:	b2da      	uxtb	r2, r3
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005852:	0c9b      	lsrs	r3, r3, #18
 8005854:	b2db      	uxtb	r3, r3
 8005856:	f003 0307 	and.w	r3, r3, #7
 800585a:	b2da      	uxtb	r2, r3
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005864:	0bdb      	lsrs	r3, r3, #15
 8005866:	b2db      	uxtb	r3, r3
 8005868:	f003 0307 	and.w	r3, r3, #7
 800586c:	b2da      	uxtb	r2, r3
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	1c5a      	adds	r2, r3, #1
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	7e1b      	ldrb	r3, [r3, #24]
 8005880:	b2db      	uxtb	r3, r3
 8005882:	f003 0307 	and.w	r3, r3, #7
 8005886:	3302      	adds	r3, #2
 8005888:	2201      	movs	r2, #1
 800588a:	fa02 f303 	lsl.w	r3, r2, r3
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005892:	fb03 f202 	mul.w	r2, r3, r2
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	7a1b      	ldrb	r3, [r3, #8]
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	f003 030f 	and.w	r3, r3, #15
 80058a4:	2201      	movs	r2, #1
 80058a6:	409a      	lsls	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80058b4:	0a52      	lsrs	r2, r2, #9
 80058b6:	fb03 f202 	mul.w	r2, r3, r2
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058c4:	659a      	str	r2, [r3, #88]	; 0x58
 80058c6:	e031      	b.n	800592c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d11d      	bne.n	800590c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058d4:	041b      	lsls	r3, r3, #16
 80058d6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058de:	0c1b      	lsrs	r3, r3, #16
 80058e0:	431a      	orrs	r2, r3
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	3301      	adds	r3, #1
 80058ec:	029a      	lsls	r2, r3, #10
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005900:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	659a      	str	r2, [r3, #88]	; 0x58
 800590a:	e00f      	b.n	800592c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a58      	ldr	r2, [pc, #352]	; (8005a74 <HAL_SD_GetCardCSD+0x344>)
 8005912:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005918:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e09d      	b.n	8005a68 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005930:	0b9b      	lsrs	r3, r3, #14
 8005932:	b2db      	uxtb	r3, r3
 8005934:	f003 0301 	and.w	r3, r3, #1
 8005938:	b2da      	uxtb	r2, r3
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005942:	09db      	lsrs	r3, r3, #7
 8005944:	b2db      	uxtb	r3, r3
 8005946:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800594a:	b2da      	uxtb	r2, r3
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005954:	b2db      	uxtb	r3, r3
 8005956:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800595a:	b2da      	uxtb	r2, r3
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005964:	0fdb      	lsrs	r3, r3, #31
 8005966:	b2da      	uxtb	r2, r3
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005970:	0f5b      	lsrs	r3, r3, #29
 8005972:	b2db      	uxtb	r3, r3
 8005974:	f003 0303 	and.w	r3, r3, #3
 8005978:	b2da      	uxtb	r2, r3
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005982:	0e9b      	lsrs	r3, r3, #26
 8005984:	b2db      	uxtb	r3, r3
 8005986:	f003 0307 	and.w	r3, r3, #7
 800598a:	b2da      	uxtb	r2, r3
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005994:	0d9b      	lsrs	r3, r3, #22
 8005996:	b2db      	uxtb	r3, r3
 8005998:	f003 030f 	and.w	r3, r3, #15
 800599c:	b2da      	uxtb	r2, r3
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059a6:	0d5b      	lsrs	r3, r3, #21
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	b2da      	uxtb	r2, r3
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059c2:	0c1b      	lsrs	r3, r3, #16
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	f003 0301 	and.w	r3, r3, #1
 80059ca:	b2da      	uxtb	r2, r3
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059d6:	0bdb      	lsrs	r3, r3, #15
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	f003 0301 	and.w	r3, r3, #1
 80059de:	b2da      	uxtb	r2, r3
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059ea:	0b9b      	lsrs	r3, r3, #14
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	f003 0301 	and.w	r3, r3, #1
 80059f2:	b2da      	uxtb	r2, r3
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059fe:	0b5b      	lsrs	r3, r3, #13
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	f003 0301 	and.w	r3, r3, #1
 8005a06:	b2da      	uxtb	r2, r3
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a12:	0b1b      	lsrs	r3, r3, #12
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	f003 0301 	and.w	r3, r3, #1
 8005a1a:	b2da      	uxtb	r2, r3
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a26:	0a9b      	lsrs	r3, r3, #10
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	f003 0303 	and.w	r3, r3, #3
 8005a2e:	b2da      	uxtb	r2, r3
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a3a:	0a1b      	lsrs	r3, r3, #8
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	f003 0303 	and.w	r3, r3, #3
 8005a42:	b2da      	uxtb	r2, r3
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a4e:	085b      	lsrs	r3, r3, #1
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a56:	b2da      	uxtb	r2, r3
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	2201      	movs	r2, #1
 8005a62:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr
 8005a74:	1fe00fff 	.word	0x1fe00fff

08005a78 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b094      	sub	sp, #80	; 0x50
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005a82:	2300      	movs	r3, #0
 8005a84:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8005a88:	f107 0308 	add.w	r3, r7, #8
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 fba8 	bl	80061e4 <SD_SendSDStatus>
 8005a94:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d011      	beq.n	8005ac0 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a4f      	ldr	r2, [pc, #316]	; (8005be0 <HAL_SD_GetCardStatus+0x168>)
 8005aa2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005aa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005aaa:	431a      	orrs	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005abe:	e070      	b.n	8005ba2 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	099b      	lsrs	r3, r3, #6
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	f003 0303 	and.w	r3, r3, #3
 8005aca:	b2da      	uxtb	r2, r3
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	095b      	lsrs	r3, r3, #5
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	f003 0301 	and.w	r3, r3, #1
 8005ada:	b2da      	uxtb	r2, r3
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	0a1b      	lsrs	r3, r3, #8
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005aea:	b29a      	uxth	r2, r3
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	0e1b      	lsrs	r3, r3, #24
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	4313      	orrs	r3, r2
 8005af4:	b29a      	uxth	r2, r3
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	061a      	lsls	r2, r3, #24
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	021b      	lsls	r3, r3, #8
 8005b02:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b06:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	0a1b      	lsrs	r3, r3, #8
 8005b0c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005b10:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	0e1b      	lsrs	r3, r3, #24
 8005b16:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	b2da      	uxtb	r2, r3
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	0a1b      	lsrs	r3, r3, #8
 8005b28:	b2da      	uxtb	r2, r3
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	0d1b      	lsrs	r3, r3, #20
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	f003 030f 	and.w	r3, r3, #15
 8005b38:	b2da      	uxtb	r2, r3
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	0c1b      	lsrs	r3, r3, #16
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005b48:	b29a      	uxth	r2, r3
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	4313      	orrs	r3, r2
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	0a9b      	lsrs	r3, r3, #10
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b64:	b2da      	uxtb	r2, r3
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	0a1b      	lsrs	r3, r3, #8
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	f003 0303 	and.w	r3, r3, #3
 8005b74:	b2da      	uxtb	r2, r3
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	091b      	lsrs	r3, r3, #4
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	f003 030f 	and.w	r3, r3, #15
 8005b84:	b2da      	uxtb	r2, r3
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	f003 030f 	and.w	r3, r3, #15
 8005b92:	b2da      	uxtb	r2, r3
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	0e1b      	lsrs	r3, r3, #24
 8005b9c:	b2da      	uxtb	r2, r3
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005baa:	4618      	mov	r0, r3
 8005bac:	f002 f822 	bl	8007bf4 <SDMMC_CmdBlockLength>
 8005bb0:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8005bb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d00d      	beq.n	8005bd4 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a08      	ldr	r2, [pc, #32]	; (8005be0 <HAL_SD_GetCardStatus+0x168>)
 8005bbe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bc4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8005bd4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3750      	adds	r7, #80	; 0x50
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	1fe00fff 	.word	0x1fe00fff

08005be4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005be4:	b5b0      	push	{r4, r5, r7, lr}
 8005be6:	b090      	sub	sp, #64	; 0x40
 8005be8:	af04      	add	r7, sp, #16
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2203      	movs	r2, #3
 8005bf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c00:	2b03      	cmp	r3, #3
 8005c02:	d02e      	beq.n	8005c62 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c0a:	d106      	bne.n	8005c1a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c10:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	639a      	str	r2, [r3, #56]	; 0x38
 8005c18:	e029      	b.n	8005c6e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c20:	d10a      	bne.n	8005c38 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 fbd6 	bl	80063d4 <SD_WideBus_Enable>
 8005c28:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c30:	431a      	orrs	r2, r3
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	639a      	str	r2, [r3, #56]	; 0x38
 8005c36:	e01a      	b.n	8005c6e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d10a      	bne.n	8005c54 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 fc13 	bl	800646a <SD_WideBus_Disable>
 8005c44:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4c:	431a      	orrs	r2, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	639a      	str	r2, [r3, #56]	; 0x38
 8005c52:	e00c      	b.n	8005c6e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c58:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	639a      	str	r2, [r3, #56]	; 0x38
 8005c60:	e005      	b.n	8005c6e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c66:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d007      	beq.n	8005c86 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a60      	ldr	r2, [pc, #384]	; (8005dfc <HAL_SD_ConfigWideBusOperation+0x218>)
 8005c7c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005c84:	e097      	b.n	8005db6 <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8005c86:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005c8a:	f7fd fff7 	bl	8003c7c <HAL_RCCEx_GetPeriphCLKFreq>
 8005c8e:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8005c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	f000 8086 	beq.w	8005da4 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	695a      	ldr	r2, [r3, #20]
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb4:	4952      	ldr	r1, [pc, #328]	; (8005e00 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005cb6:	fba1 1303 	umull	r1, r3, r1, r3
 8005cba:	0e1b      	lsrs	r3, r3, #24
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d303      	bcc.n	8005cc8 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	695b      	ldr	r3, [r3, #20]
 8005cc4:	61fb      	str	r3, [r7, #28]
 8005cc6:	e05a      	b.n	8005d7e <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cd0:	d103      	bne.n	8005cda <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	695b      	ldr	r3, [r3, #20]
 8005cd6:	61fb      	str	r3, [r7, #28]
 8005cd8:	e051      	b.n	8005d7e <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ce2:	d126      	bne.n	8005d32 <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	695b      	ldr	r3, [r3, #20]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d10e      	bne.n	8005d0a <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8005cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cee:	4a45      	ldr	r2, [pc, #276]	; (8005e04 <HAL_SD_ConfigWideBusOperation+0x220>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d906      	bls.n	8005d02 <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf6:	4a42      	ldr	r2, [pc, #264]	; (8005e00 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8005cfc:	0e5b      	lsrs	r3, r3, #25
 8005cfe:	61fb      	str	r3, [r7, #28]
 8005d00:	e03d      	b.n	8005d7e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	695b      	ldr	r3, [r3, #20]
 8005d06:	61fb      	str	r3, [r7, #28]
 8005d08:	e039      	b.n	8005d7e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	005b      	lsls	r3, r3, #1
 8005d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d16:	4a3b      	ldr	r2, [pc, #236]	; (8005e04 <HAL_SD_ConfigWideBusOperation+0x220>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d906      	bls.n	8005d2a <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1e:	4a38      	ldr	r2, [pc, #224]	; (8005e00 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005d20:	fba2 2303 	umull	r2, r3, r2, r3
 8005d24:	0e5b      	lsrs	r3, r3, #25
 8005d26:	61fb      	str	r3, [r7, #28]
 8005d28:	e029      	b.n	8005d7e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	61fb      	str	r3, [r7, #28]
 8005d30:	e025      	b.n	8005d7e <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	695b      	ldr	r3, [r3, #20]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d10e      	bne.n	8005d58 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3c:	4a32      	ldr	r2, [pc, #200]	; (8005e08 <HAL_SD_ConfigWideBusOperation+0x224>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d906      	bls.n	8005d50 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8005d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d44:	4a2e      	ldr	r2, [pc, #184]	; (8005e00 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005d46:	fba2 2303 	umull	r2, r3, r2, r3
 8005d4a:	0e1b      	lsrs	r3, r3, #24
 8005d4c:	61fb      	str	r3, [r7, #28]
 8005d4e:	e016      	b.n	8005d7e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	695b      	ldr	r3, [r3, #20]
 8005d54:	61fb      	str	r3, [r7, #28]
 8005d56:	e012      	b.n	8005d7e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	695b      	ldr	r3, [r3, #20]
 8005d5c:	005b      	lsls	r3, r3, #1
 8005d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d64:	4a28      	ldr	r2, [pc, #160]	; (8005e08 <HAL_SD_ConfigWideBusOperation+0x224>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d906      	bls.n	8005d78 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6c:	4a24      	ldr	r2, [pc, #144]	; (8005e00 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d72:	0e1b      	lsrs	r3, r3, #24
 8005d74:	61fb      	str	r3, [r7, #28]
 8005d76:	e002      	b.n	8005d7e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	695b      	ldr	r3, [r3, #20]
 8005d7c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681d      	ldr	r5, [r3, #0]
 8005d88:	466c      	mov	r4, sp
 8005d8a:	f107 0318 	add.w	r3, r7, #24
 8005d8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005d92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005d96:	f107 030c 	add.w	r3, r7, #12
 8005d9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d9c:	4628      	mov	r0, r5
 8005d9e:	f001 fe5b 	bl	8007a58 <SDMMC_Init>
 8005da2:	e008      	b.n	8005db6 <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f001 ff18 	bl	8007bf4 <SDMMC_CmdBlockLength>
 8005dc4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d00c      	beq.n	8005de6 <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a0a      	ldr	r2, [pc, #40]	; (8005dfc <HAL_SD_ConfigWideBusOperation+0x218>)
 8005dd2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dda:	431a      	orrs	r2, r3
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8005dee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3730      	adds	r7, #48	; 0x30
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bdb0      	pop	{r4, r5, r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	1fe00fff 	.word	0x1fe00fff
 8005e00:	55e63b89 	.word	0x55e63b89
 8005e04:	02faf080 	.word	0x02faf080
 8005e08:	017d7840 	.word	0x017d7840

08005e0c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b086      	sub	sp, #24
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005e14:	2300      	movs	r3, #0
 8005e16:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005e18:	f107 030c 	add.w	r3, r7, #12
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 fab0 	bl	8006384 <SD_SendStatus>
 8005e24:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d005      	beq.n	8005e38 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	431a      	orrs	r2, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	0a5b      	lsrs	r3, r3, #9
 8005e3c:	f003 030f 	and.w	r3, r3, #15
 8005e40:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005e42:	693b      	ldr	r3, [r7, #16]
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3718      	adds	r7, #24
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005e4c:	b5b0      	push	{r4, r5, r7, lr}
 8005e4e:	b090      	sub	sp, #64	; 0x40
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005e54:	2301      	movs	r3, #1
 8005e56:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f001 fe44 	bl	8007aea <SDMMC_GetPowerState>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d102      	bne.n	8005e6e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005e68:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005e6c:	e0a9      	b.n	8005fc2 <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e72:	2b03      	cmp	r3, #3
 8005e74:	d02e      	beq.n	8005ed4 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f001 ffc7 	bl	8007e0e <SDMMC_CmdSendCID>
 8005e80:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d001      	beq.n	8005e8c <SD_InitCard+0x40>
    {
      return errorstate;
 8005e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e8a:	e09a      	b.n	8005fc2 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2100      	movs	r1, #0
 8005e92:	4618      	mov	r0, r3
 8005e94:	f001 fe6f 	bl	8007b76 <SDMMC_GetResponse>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2104      	movs	r1, #4
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f001 fe66 	bl	8007b76 <SDMMC_GetResponse>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2108      	movs	r1, #8
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f001 fe5d 	bl	8007b76 <SDMMC_GetResponse>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	210c      	movs	r1, #12
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f001 fe54 	bl	8007b76 <SDMMC_GetResponse>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ed8:	2b03      	cmp	r3, #3
 8005eda:	d00d      	beq.n	8005ef8 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f107 020e 	add.w	r2, r7, #14
 8005ee4:	4611      	mov	r1, r2
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f001 ffd0 	bl	8007e8c <SDMMC_CmdSetRelAdd>
 8005eec:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005eee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d001      	beq.n	8005ef8 <SD_InitCard+0xac>
    {
      return errorstate;
 8005ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ef6:	e064      	b.n	8005fc2 <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005efc:	2b03      	cmp	r3, #3
 8005efe:	d036      	beq.n	8005f6e <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005f00:	89fb      	ldrh	r3, [r7, #14]
 8005f02:	461a      	mov	r2, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f10:	041b      	lsls	r3, r3, #16
 8005f12:	4619      	mov	r1, r3
 8005f14:	4610      	mov	r0, r2
 8005f16:	f001 ff99 	bl	8007e4c <SDMMC_CmdSendCSD>
 8005f1a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d001      	beq.n	8005f26 <SD_InitCard+0xda>
    {
      return errorstate;
 8005f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f24:	e04d      	b.n	8005fc2 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2100      	movs	r1, #0
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f001 fe22 	bl	8007b76 <SDMMC_GetResponse>
 8005f32:	4602      	mov	r2, r0
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2104      	movs	r1, #4
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f001 fe19 	bl	8007b76 <SDMMC_GetResponse>
 8005f44:	4602      	mov	r2, r0
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2108      	movs	r1, #8
 8005f50:	4618      	mov	r0, r3
 8005f52:	f001 fe10 	bl	8007b76 <SDMMC_GetResponse>
 8005f56:	4602      	mov	r2, r0
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	210c      	movs	r1, #12
 8005f62:	4618      	mov	r0, r3
 8005f64:	f001 fe07 	bl	8007b76 <SDMMC_GetResponse>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2104      	movs	r1, #4
 8005f74:	4618      	mov	r0, r3
 8005f76:	f001 fdfe 	bl	8007b76 <SDMMC_GetResponse>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	0d1a      	lsrs	r2, r3, #20
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005f82:	f107 0310 	add.w	r3, r7, #16
 8005f86:	4619      	mov	r1, r3
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f7ff fbd1 	bl	8005730 <HAL_SD_GetCardCSD>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d002      	beq.n	8005f9a <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005f94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005f98:	e013      	b.n	8005fc2 <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6819      	ldr	r1, [r3, #0]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fa2:	041b      	lsls	r3, r3, #16
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	461c      	mov	r4, r3
 8005fa8:	4615      	mov	r5, r2
 8005faa:	4622      	mov	r2, r4
 8005fac:	462b      	mov	r3, r5
 8005fae:	4608      	mov	r0, r1
 8005fb0:	f001 fe43 	bl	8007c3a <SDMMC_CmdSelDesel>
 8005fb4:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d001      	beq.n	8005fc0 <SD_InitCard+0x174>
  {
    return errorstate;
 8005fbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fbe:	e000      	b.n	8005fc2 <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3740      	adds	r7, #64	; 0x40
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005fcc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b088      	sub	sp, #32
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	61fb      	str	r3, [r7, #28]
 8005fdc:	2300      	movs	r3, #0
 8005fde:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 8005fe0:	f7fb fcd8 	bl	8001994 <HAL_GetTick>
 8005fe4:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4618      	mov	r0, r3
 8005fec:	f001 fe49 	bl	8007c82 <SDMMC_CmdGoIdleState>
 8005ff0:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d001      	beq.n	8005ffc <SD_PowerON+0x30>
  {
    return errorstate;
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	e0ed      	b.n	80061d8 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4618      	mov	r0, r3
 8006002:	f001 fe5c 	bl	8007cbe <SDMMC_CmdOperCond>
 8006006:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00d      	beq.n	800602a <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4618      	mov	r0, r3
 800601a:	f001 fe32 	bl	8007c82 <SDMMC_CmdGoIdleState>
 800601e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d004      	beq.n	8006030 <SD_PowerON+0x64>
    {
      return errorstate;
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	e0d6      	b.n	80061d8 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2201      	movs	r2, #1
 800602e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006034:	2b01      	cmp	r3, #1
 8006036:	d137      	bne.n	80060a8 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2100      	movs	r1, #0
 800603e:	4618      	mov	r0, r3
 8006040:	f001 fe5d 	bl	8007cfe <SDMMC_CmdAppCommand>
 8006044:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d02d      	beq.n	80060a8 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800604c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006050:	e0c2      	b.n	80061d8 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2100      	movs	r1, #0
 8006058:	4618      	mov	r0, r3
 800605a:	f001 fe50 	bl	8007cfe <SDMMC_CmdAppCommand>
 800605e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d001      	beq.n	800606a <SD_PowerON+0x9e>
    {
      return errorstate;
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	e0b6      	b.n	80061d8 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	495c      	ldr	r1, [pc, #368]	; (80061e0 <SD_PowerON+0x214>)
 8006070:	4618      	mov	r0, r3
 8006072:	f001 fe67 	bl	8007d44 <SDMMC_CmdAppOperCommand>
 8006076:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d002      	beq.n	8006084 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800607e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006082:	e0a9      	b.n	80061d8 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2100      	movs	r1, #0
 800608a:	4618      	mov	r0, r3
 800608c:	f001 fd73 	bl	8007b76 <SDMMC_GetResponse>
 8006090:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	0fdb      	lsrs	r3, r3, #31
 8006096:	2b01      	cmp	r3, #1
 8006098:	d101      	bne.n	800609e <SD_PowerON+0xd2>
 800609a:	2301      	movs	r3, #1
 800609c:	e000      	b.n	80060a0 <SD_PowerON+0xd4>
 800609e:	2300      	movs	r3, #0
 80060a0:	61bb      	str	r3, [r7, #24]

    count++;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	3301      	adds	r3, #1
 80060a6:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d802      	bhi.n	80060b8 <SD_PowerON+0xec>
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d0cc      	beq.n	8006052 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80060be:	4293      	cmp	r3, r2
 80060c0:	d902      	bls.n	80060c8 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80060c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80060c6:	e087      	b.n	80061d8 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d07e      	beq.n	80061d0 <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2201      	movs	r2, #1
 80060d6:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	699b      	ldr	r3, [r3, #24]
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d17a      	bne.n	80061d6 <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d075      	beq.n	80061d6 <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060f0:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f042 0208 	orr.w	r2, r2, #8
 8006100:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4618      	mov	r0, r3
 8006108:	f001 ff27 	bl	8007f5a <SDMMC_CmdVoltageSwitch>
 800610c:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00c      	beq.n	800612e <SD_PowerON+0x162>
        {
          return errorstate;
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	e05f      	b.n	80061d8 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006118:	f7fb fc3c 	bl	8001994 <HAL_GetTick>
 800611c:	4602      	mov	r2, r0
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006126:	d102      	bne.n	800612e <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8006128:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800612c:	e054      	b.n	80061d8 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006134:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006138:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800613c:	d1ec      	bne.n	8006118 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006146:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800614e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006152:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006156:	d002      	beq.n	800615e <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8006158:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800615c:	e03c      	b.n	80061d8 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 800615e:	2001      	movs	r0, #1
 8006160:	f000 fa9e 	bl	80066a0 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f042 0204 	orr.w	r2, r2, #4
 8006172:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8006174:	e00a      	b.n	800618c <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006176:	f7fb fc0d 	bl	8001994 <HAL_GetTick>
 800617a:	4602      	mov	r2, r0
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006184:	d102      	bne.n	800618c <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8006186:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800618a:	e025      	b.n	80061d8 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006196:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800619a:	d1ec      	bne.n	8006176 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80061a4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061b4:	d102      	bne.n	80061bc <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80061b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80061ba:	e00d      	b.n	80061d8 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2213      	movs	r2, #19
 80061c2:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f04f 32ff 	mov.w	r2, #4294967295
 80061cc:	639a      	str	r2, [r3, #56]	; 0x38
 80061ce:	e002      	b.n	80061d6 <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3720      	adds	r7, #32
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	c1100000 	.word	0xc1100000

080061e4 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b08c      	sub	sp, #48	; 0x30
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80061ee:	f7fb fbd1 	bl	8001994 <HAL_GetTick>
 80061f2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2100      	movs	r1, #0
 80061fe:	4618      	mov	r0, r3
 8006200:	f001 fcb9 	bl	8007b76 <SDMMC_GetResponse>
 8006204:	4603      	mov	r3, r0
 8006206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800620a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800620e:	d102      	bne.n	8006216 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006210:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006214:	e0b0      	b.n	8006378 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2140      	movs	r1, #64	; 0x40
 800621c:	4618      	mov	r0, r3
 800621e:	f001 fce9 	bl	8007bf4 <SDMMC_CmdBlockLength>
 8006222:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006224:	6a3b      	ldr	r3, [r7, #32]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d005      	beq.n	8006236 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8006232:	6a3b      	ldr	r3, [r7, #32]
 8006234:	e0a0      	b.n	8006378 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800623e:	041b      	lsls	r3, r3, #16
 8006240:	4619      	mov	r1, r3
 8006242:	4610      	mov	r0, r2
 8006244:	f001 fd5b 	bl	8007cfe <SDMMC_CmdAppCommand>
 8006248:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800624a:	6a3b      	ldr	r3, [r7, #32]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d005      	beq.n	800625c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8006258:	6a3b      	ldr	r3, [r7, #32]
 800625a:	e08d      	b.n	8006378 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800625c:	f04f 33ff 	mov.w	r3, #4294967295
 8006260:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8006262:	2340      	movs	r3, #64	; 0x40
 8006264:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8006266:	2360      	movs	r3, #96	; 0x60
 8006268:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800626a:	2302      	movs	r3, #2
 800626c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800626e:	2300      	movs	r3, #0
 8006270:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006272:	2301      	movs	r3, #1
 8006274:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f107 0208 	add.w	r2, r7, #8
 800627e:	4611      	mov	r1, r2
 8006280:	4618      	mov	r0, r3
 8006282:	f001 fc8b 	bl	8007b9c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4618      	mov	r0, r3
 800628c:	f001 fe43 	bl	8007f16 <SDMMC_CmdStatusRegister>
 8006290:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006292:	6a3b      	ldr	r3, [r7, #32]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d02b      	beq.n	80062f0 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80062a0:	6a3b      	ldr	r3, [r7, #32]
 80062a2:	e069      	b.n	8006378 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d013      	beq.n	80062da <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 80062b2:	2300      	movs	r3, #0
 80062b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062b6:	e00d      	b.n	80062d4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4618      	mov	r0, r3
 80062be:	f001 fbf5 	bl	8007aac <SDMMC_ReadFIFO>
 80062c2:	4602      	mov	r2, r0
 80062c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c6:	601a      	str	r2, [r3, #0]
        pData++;
 80062c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ca:	3304      	adds	r3, #4
 80062cc:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 80062ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d0:	3301      	adds	r3, #1
 80062d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d6:	2b07      	cmp	r3, #7
 80062d8:	d9ee      	bls.n	80062b8 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80062da:	f7fb fb5b 	bl	8001994 <HAL_GetTick>
 80062de:	4602      	mov	r2, r0
 80062e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e8:	d102      	bne.n	80062f0 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80062ea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80062ee:	e043      	b.n	8006378 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062f6:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d0d2      	beq.n	80062a4 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006304:	f003 0308 	and.w	r3, r3, #8
 8006308:	2b00      	cmp	r3, #0
 800630a:	d001      	beq.n	8006310 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800630c:	2308      	movs	r3, #8
 800630e:	e033      	b.n	8006378 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006316:	f003 0302 	and.w	r3, r3, #2
 800631a:	2b00      	cmp	r3, #0
 800631c:	d001      	beq.n	8006322 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800631e:	2302      	movs	r3, #2
 8006320:	e02a      	b.n	8006378 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006328:	f003 0320 	and.w	r3, r3, #32
 800632c:	2b00      	cmp	r3, #0
 800632e:	d017      	beq.n	8006360 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8006330:	2320      	movs	r3, #32
 8006332:	e021      	b.n	8006378 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4618      	mov	r0, r3
 800633a:	f001 fbb7 	bl	8007aac <SDMMC_ReadFIFO>
 800633e:	4602      	mov	r2, r0
 8006340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006342:	601a      	str	r2, [r3, #0]
    pData++;
 8006344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006346:	3304      	adds	r3, #4
 8006348:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800634a:	f7fb fb23 	bl	8001994 <HAL_GetTick>
 800634e:	4602      	mov	r2, r0
 8006350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006352:	1ad3      	subs	r3, r2, r3
 8006354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006358:	d102      	bne.n	8006360 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800635a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800635e:	e00b      	b.n	8006378 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006366:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1e2      	bne.n	8006334 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a03      	ldr	r2, [pc, #12]	; (8006380 <SD_SendSDStatus+0x19c>)
 8006374:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	3730      	adds	r7, #48	; 0x30
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}
 8006380:	18000f3a 	.word	0x18000f3a

08006384 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d102      	bne.n	800639a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006394:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006398:	e018      	b.n	80063cc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063a2:	041b      	lsls	r3, r3, #16
 80063a4:	4619      	mov	r1, r3
 80063a6:	4610      	mov	r0, r2
 80063a8:	f001 fd92 	bl	8007ed0 <SDMMC_CmdSendStatus>
 80063ac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d001      	beq.n	80063b8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	e009      	b.n	80063cc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2100      	movs	r1, #0
 80063be:	4618      	mov	r0, r3
 80063c0:	f001 fbd9 	bl	8007b76 <SDMMC_GetResponse>
 80063c4:	4602      	mov	r2, r0
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3710      	adds	r7, #16
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b086      	sub	sp, #24
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80063dc:	2300      	movs	r3, #0
 80063de:	60fb      	str	r3, [r7, #12]
 80063e0:	2300      	movs	r3, #0
 80063e2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	2100      	movs	r1, #0
 80063ea:	4618      	mov	r0, r3
 80063ec:	f001 fbc3 	bl	8007b76 <SDMMC_GetResponse>
 80063f0:	4603      	mov	r3, r0
 80063f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063fa:	d102      	bne.n	8006402 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80063fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006400:	e02f      	b.n	8006462 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006402:	f107 030c 	add.w	r3, r7, #12
 8006406:	4619      	mov	r1, r3
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 f879 	bl	8006500 <SD_FindSCR>
 800640e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d001      	beq.n	800641a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	e023      	b.n	8006462 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006420:	2b00      	cmp	r3, #0
 8006422:	d01c      	beq.n	800645e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800642c:	041b      	lsls	r3, r3, #16
 800642e:	4619      	mov	r1, r3
 8006430:	4610      	mov	r0, r2
 8006432:	f001 fc64 	bl	8007cfe <SDMMC_CmdAppCommand>
 8006436:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d001      	beq.n	8006442 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	e00f      	b.n	8006462 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2102      	movs	r1, #2
 8006448:	4618      	mov	r0, r3
 800644a:	f001 fc9b 	bl	8007d84 <SDMMC_CmdBusWidth>
 800644e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d001      	beq.n	800645a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	e003      	b.n	8006462 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800645a:	2300      	movs	r3, #0
 800645c:	e001      	b.n	8006462 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800645e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006462:	4618      	mov	r0, r3
 8006464:	3718      	adds	r7, #24
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}

0800646a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800646a:	b580      	push	{r7, lr}
 800646c:	b086      	sub	sp, #24
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006472:	2300      	movs	r3, #0
 8006474:	60fb      	str	r3, [r7, #12]
 8006476:	2300      	movs	r3, #0
 8006478:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2100      	movs	r1, #0
 8006480:	4618      	mov	r0, r3
 8006482:	f001 fb78 	bl	8007b76 <SDMMC_GetResponse>
 8006486:	4603      	mov	r3, r0
 8006488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800648c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006490:	d102      	bne.n	8006498 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006492:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006496:	e02f      	b.n	80064f8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006498:	f107 030c 	add.w	r3, r7, #12
 800649c:	4619      	mov	r1, r3
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 f82e 	bl	8006500 <SD_FindSCR>
 80064a4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d001      	beq.n	80064b0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	e023      	b.n	80064f8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d01c      	beq.n	80064f4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064c2:	041b      	lsls	r3, r3, #16
 80064c4:	4619      	mov	r1, r3
 80064c6:	4610      	mov	r0, r2
 80064c8:	f001 fc19 	bl	8007cfe <SDMMC_CmdAppCommand>
 80064cc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d001      	beq.n	80064d8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	e00f      	b.n	80064f8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2100      	movs	r1, #0
 80064de:	4618      	mov	r0, r3
 80064e0:	f001 fc50 	bl	8007d84 <SDMMC_CmdBusWidth>
 80064e4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d001      	beq.n	80064f0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	e003      	b.n	80064f8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80064f0:	2300      	movs	r3, #0
 80064f2:	e001      	b.n	80064f8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80064f4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3718      	adds	r7, #24
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b08e      	sub	sp, #56	; 0x38
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800650a:	f7fb fa43 	bl	8001994 <HAL_GetTick>
 800650e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006510:	2300      	movs	r3, #0
 8006512:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8006514:	2300      	movs	r3, #0
 8006516:	60bb      	str	r3, [r7, #8]
 8006518:	2300      	movs	r3, #0
 800651a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2108      	movs	r1, #8
 8006526:	4618      	mov	r0, r3
 8006528:	f001 fb64 	bl	8007bf4 <SDMMC_CmdBlockLength>
 800652c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800652e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006530:	2b00      	cmp	r3, #0
 8006532:	d001      	beq.n	8006538 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006536:	e0ad      	b.n	8006694 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006540:	041b      	lsls	r3, r3, #16
 8006542:	4619      	mov	r1, r3
 8006544:	4610      	mov	r0, r2
 8006546:	f001 fbda 	bl	8007cfe <SDMMC_CmdAppCommand>
 800654a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800654c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800654e:	2b00      	cmp	r3, #0
 8006550:	d001      	beq.n	8006556 <SD_FindSCR+0x56>
  {
    return errorstate;
 8006552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006554:	e09e      	b.n	8006694 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006556:	f04f 33ff 	mov.w	r3, #4294967295
 800655a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800655c:	2308      	movs	r3, #8
 800655e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8006560:	2330      	movs	r3, #48	; 0x30
 8006562:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006564:	2302      	movs	r3, #2
 8006566:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006568:	2300      	movs	r3, #0
 800656a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800656c:	2301      	movs	r3, #1
 800656e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f107 0210 	add.w	r2, r7, #16
 8006578:	4611      	mov	r1, r2
 800657a:	4618      	mov	r0, r3
 800657c:	f001 fb0e 	bl	8007b9c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4618      	mov	r0, r3
 8006586:	f001 fc20 	bl	8007dca <SDMMC_CmdSendSCR>
 800658a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800658c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658e:	2b00      	cmp	r3, #0
 8006590:	d027      	beq.n	80065e2 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8006592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006594:	e07e      	b.n	8006694 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800659c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d113      	bne.n	80065cc <SD_FindSCR+0xcc>
 80065a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d110      	bne.n	80065cc <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4618      	mov	r0, r3
 80065b0:	f001 fa7c 	bl	8007aac <SDMMC_ReadFIFO>
 80065b4:	4603      	mov	r3, r0
 80065b6:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4618      	mov	r0, r3
 80065be:	f001 fa75 	bl	8007aac <SDMMC_ReadFIFO>
 80065c2:	4603      	mov	r3, r0
 80065c4:	60fb      	str	r3, [r7, #12]
      index++;
 80065c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065c8:	3301      	adds	r3, #1
 80065ca:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80065cc:	f7fb f9e2 	bl	8001994 <HAL_GetTick>
 80065d0:	4602      	mov	r2, r0
 80065d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065da:	d102      	bne.n	80065e2 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80065dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80065e0:	e058      	b.n	8006694 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065e8:	f240 532a 	movw	r3, #1322	; 0x52a
 80065ec:	4013      	ands	r3, r2
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d0d1      	beq.n	8006596 <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065f8:	f003 0308 	and.w	r3, r3, #8
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d005      	beq.n	800660c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	2208      	movs	r2, #8
 8006606:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006608:	2308      	movs	r3, #8
 800660a:	e043      	b.n	8006694 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006612:	f003 0302 	and.w	r3, r3, #2
 8006616:	2b00      	cmp	r3, #0
 8006618:	d005      	beq.n	8006626 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2202      	movs	r2, #2
 8006620:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006622:	2302      	movs	r3, #2
 8006624:	e036      	b.n	8006694 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800662c:	f003 0320 	and.w	r3, r3, #32
 8006630:	2b00      	cmp	r3, #0
 8006632:	d005      	beq.n	8006640 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2220      	movs	r2, #32
 800663a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800663c:	2320      	movs	r3, #32
 800663e:	e029      	b.n	8006694 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a15      	ldr	r2, [pc, #84]	; (800669c <SD_FindSCR+0x19c>)
 8006646:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	061a      	lsls	r2, r3, #24
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	021b      	lsls	r3, r3, #8
 8006650:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006654:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	0a1b      	lsrs	r3, r3, #8
 800665a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800665e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	0e1b      	lsrs	r3, r3, #24
 8006664:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006668:	601a      	str	r2, [r3, #0]
    scr++;
 800666a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800666c:	3304      	adds	r3, #4
 800666e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	061a      	lsls	r2, r3, #24
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	021b      	lsls	r3, r3, #8
 8006678:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800667c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	0a1b      	lsrs	r3, r3, #8
 8006682:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006686:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	0e1b      	lsrs	r3, r3, #24
 800668c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800668e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006690:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	3738      	adds	r7, #56	; 0x38
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}
 800669c:	18000f3a 	.word	0x18000f3a

080066a0 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	4603      	mov	r3, r0
 80066a8:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 80066aa:	bf00      	nop
 80066ac:	370c      	adds	r7, #12
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr

080066b6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80066b6:	b580      	push	{r7, lr}
 80066b8:	b084      	sub	sp, #16
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d101      	bne.n	80066c8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e095      	b.n	80067f4 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d108      	bne.n	80066e2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066d8:	d009      	beq.n	80066ee <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	61da      	str	r2, [r3, #28]
 80066e0:	e005      	b.n	80066ee <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d106      	bne.n	800670e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f7fa fd87 	bl	800121c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2202      	movs	r2, #2
 8006712:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006724:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800672e:	d902      	bls.n	8006736 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006730:	2300      	movs	r3, #0
 8006732:	60fb      	str	r3, [r7, #12]
 8006734:	e002      	b.n	800673c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006736:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800673a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006744:	d007      	beq.n	8006756 <HAL_SPI_Init+0xa0>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800674e:	d002      	beq.n	8006756 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006766:	431a      	orrs	r2, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	f003 0302 	and.w	r3, r3, #2
 8006770:	431a      	orrs	r2, r3
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	695b      	ldr	r3, [r3, #20]
 8006776:	f003 0301 	and.w	r3, r3, #1
 800677a:	431a      	orrs	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	699b      	ldr	r3, [r3, #24]
 8006780:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006784:	431a      	orrs	r2, r3
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	69db      	ldr	r3, [r3, #28]
 800678a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800678e:	431a      	orrs	r2, r3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a1b      	ldr	r3, [r3, #32]
 8006794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006798:	ea42 0103 	orr.w	r1, r2, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	430a      	orrs	r2, r1
 80067aa:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	699b      	ldr	r3, [r3, #24]
 80067b0:	0c1b      	lsrs	r3, r3, #16
 80067b2:	f003 0204 	and.w	r2, r3, #4
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ba:	f003 0310 	and.w	r3, r3, #16
 80067be:	431a      	orrs	r2, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067c4:	f003 0308 	and.w	r3, r3, #8
 80067c8:	431a      	orrs	r2, r3
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80067d2:	ea42 0103 	orr.w	r1, r2, r3
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	430a      	orrs	r2, r1
 80067e2:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2201      	movs	r2, #1
 80067ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80067f2:	2300      	movs	r3, #0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3710      	adds	r7, #16
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	60b9      	str	r1, [r7, #8]
 8006806:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d101      	bne.n	8006812 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e038      	b.n	8006884 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8006818:	b2db      	uxtb	r3, r3
 800681a:	2b00      	cmp	r3, #0
 800681c:	d106      	bne.n	800682c <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006826:	68f8      	ldr	r0, [r7, #12]
 8006828:	f7fa ff2a 	bl	8001680 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	3308      	adds	r3, #8
 8006834:	4619      	mov	r1, r3
 8006836:	4610      	mov	r0, r2
 8006838:	f000 ffe8 	bl	800780c <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6818      	ldr	r0, [r3, #0]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	461a      	mov	r2, r3
 8006846:	68b9      	ldr	r1, [r7, #8]
 8006848:	f001 f87a 	bl	8007940 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6858      	ldr	r0, [r3, #4]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	689a      	ldr	r2, [r3, #8]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006858:	6879      	ldr	r1, [r7, #4]
 800685a:	f001 f8c3 	bl	80079e4 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	6892      	ldr	r2, [r2, #8]
 8006866:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	6892      	ldr	r2, [r2, #8]
 8006872:	f041 0101 	orr.w	r1, r1, #1
 8006876:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2201      	movs	r2, #1
 800687e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	3710      	adds	r7, #16
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b082      	sub	sp, #8
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d101      	bne.n	800689e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e042      	b.n	8006924 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d106      	bne.n	80068b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f7fa fd15 	bl	80012e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2224      	movs	r2, #36	; 0x24
 80068ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f022 0201 	bic.w	r2, r2, #1
 80068cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d002      	beq.n	80068dc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 fc7c 	bl	80071d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 f97d 	bl	8006bdc <UART_SetConfig>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d101      	bne.n	80068ec <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	e01b      	b.n	8006924 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	685a      	ldr	r2, [r3, #4]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	689a      	ldr	r2, [r3, #8]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800690a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f042 0201 	orr.w	r2, r2, #1
 800691a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 fcfb 	bl	8007318 <UART_CheckIdleState>
 8006922:	4603      	mov	r3, r0
}
 8006924:	4618      	mov	r0, r3
 8006926:	3708      	adds	r7, #8
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b08a      	sub	sp, #40	; 0x28
 8006930:	af02      	add	r7, sp, #8
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	603b      	str	r3, [r7, #0]
 8006938:	4613      	mov	r3, r2
 800693a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006942:	2b20      	cmp	r3, #32
 8006944:	d17c      	bne.n	8006a40 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d002      	beq.n	8006952 <HAL_UART_Transmit+0x26>
 800694c:	88fb      	ldrh	r3, [r7, #6]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d101      	bne.n	8006956 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e075      	b.n	8006a42 <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2200      	movs	r2, #0
 800695a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2221      	movs	r2, #33	; 0x21
 8006962:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006966:	f7fb f815 	bl	8001994 <HAL_GetTick>
 800696a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	88fa      	ldrh	r2, [r7, #6]
 8006970:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	88fa      	ldrh	r2, [r7, #6]
 8006978:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006984:	d108      	bne.n	8006998 <HAL_UART_Transmit+0x6c>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d104      	bne.n	8006998 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800698e:	2300      	movs	r3, #0
 8006990:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	61bb      	str	r3, [r7, #24]
 8006996:	e003      	b.n	80069a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800699c:	2300      	movs	r3, #0
 800699e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80069a0:	e031      	b.n	8006a06 <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	9300      	str	r3, [sp, #0]
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	2200      	movs	r2, #0
 80069aa:	2180      	movs	r1, #128	; 0x80
 80069ac:	68f8      	ldr	r0, [r7, #12]
 80069ae:	f000 fd5d 	bl	800746c <UART_WaitOnFlagUntilTimeout>
 80069b2:	4603      	mov	r3, r0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d005      	beq.n	80069c4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2220      	movs	r2, #32
 80069bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80069c0:	2303      	movs	r3, #3
 80069c2:	e03e      	b.n	8006a42 <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d10b      	bne.n	80069e2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	881a      	ldrh	r2, [r3, #0]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069d6:	b292      	uxth	r2, r2
 80069d8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	3302      	adds	r3, #2
 80069de:	61bb      	str	r3, [r7, #24]
 80069e0:	e008      	b.n	80069f4 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	781a      	ldrb	r2, [r3, #0]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	b292      	uxth	r2, r2
 80069ec:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80069ee:	69fb      	ldr	r3, [r7, #28]
 80069f0:	3301      	adds	r3, #1
 80069f2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	3b01      	subs	r3, #1
 80069fe:	b29a      	uxth	r2, r3
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1c7      	bne.n	80069a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	9300      	str	r3, [sp, #0]
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	2140      	movs	r1, #64	; 0x40
 8006a1c:	68f8      	ldr	r0, [r7, #12]
 8006a1e:	f000 fd25 	bl	800746c <UART_WaitOnFlagUntilTimeout>
 8006a22:	4603      	mov	r3, r0
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d005      	beq.n	8006a34 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2220      	movs	r2, #32
 8006a2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006a30:	2303      	movs	r3, #3
 8006a32:	e006      	b.n	8006a42 <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2220      	movs	r2, #32
 8006a38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	e000      	b.n	8006a42 <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 8006a40:	2302      	movs	r3, #2
  }
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3720      	adds	r7, #32
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}

08006a4a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a4a:	b580      	push	{r7, lr}
 8006a4c:	b08a      	sub	sp, #40	; 0x28
 8006a4e:	af02      	add	r7, sp, #8
 8006a50:	60f8      	str	r0, [r7, #12]
 8006a52:	60b9      	str	r1, [r7, #8]
 8006a54:	603b      	str	r3, [r7, #0]
 8006a56:	4613      	mov	r3, r2
 8006a58:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a60:	2b20      	cmp	r3, #32
 8006a62:	f040 80b6 	bne.w	8006bd2 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d002      	beq.n	8006a72 <HAL_UART_Receive+0x28>
 8006a6c:	88fb      	ldrh	r3, [r7, #6]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d101      	bne.n	8006a76 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e0ae      	b.n	8006bd4 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2222      	movs	r2, #34	; 0x22
 8006a82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a8c:	f7fa ff82 	bl	8001994 <HAL_GetTick>
 8006a90:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	88fa      	ldrh	r2, [r7, #6]
 8006a96:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	88fa      	ldrh	r2, [r7, #6]
 8006a9e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aaa:	d10e      	bne.n	8006aca <HAL_UART_Receive+0x80>
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	691b      	ldr	r3, [r3, #16]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d105      	bne.n	8006ac0 <HAL_UART_Receive+0x76>
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006aba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006abe:	e02d      	b.n	8006b1c <HAL_UART_Receive+0xd2>
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	22ff      	movs	r2, #255	; 0xff
 8006ac4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006ac8:	e028      	b.n	8006b1c <HAL_UART_Receive+0xd2>
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d10d      	bne.n	8006aee <HAL_UART_Receive+0xa4>
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d104      	bne.n	8006ae4 <HAL_UART_Receive+0x9a>
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	22ff      	movs	r2, #255	; 0xff
 8006ade:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006ae2:	e01b      	b.n	8006b1c <HAL_UART_Receive+0xd2>
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	227f      	movs	r2, #127	; 0x7f
 8006ae8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006aec:	e016      	b.n	8006b1c <HAL_UART_Receive+0xd2>
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006af6:	d10d      	bne.n	8006b14 <HAL_UART_Receive+0xca>
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	691b      	ldr	r3, [r3, #16]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d104      	bne.n	8006b0a <HAL_UART_Receive+0xc0>
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	227f      	movs	r2, #127	; 0x7f
 8006b04:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006b08:	e008      	b.n	8006b1c <HAL_UART_Receive+0xd2>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	223f      	movs	r2, #63	; 0x3f
 8006b0e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006b12:	e003      	b.n	8006b1c <HAL_UART_Receive+0xd2>
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006b22:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b2c:	d108      	bne.n	8006b40 <HAL_UART_Receive+0xf6>
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d104      	bne.n	8006b40 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006b36:	2300      	movs	r3, #0
 8006b38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	61bb      	str	r3, [r7, #24]
 8006b3e:	e003      	b.n	8006b48 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b44:	2300      	movs	r3, #0
 8006b46:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006b48:	e037      	b.n	8006bba <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	9300      	str	r3, [sp, #0]
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	2200      	movs	r2, #0
 8006b52:	2120      	movs	r1, #32
 8006b54:	68f8      	ldr	r0, [r7, #12]
 8006b56:	f000 fc89 	bl	800746c <UART_WaitOnFlagUntilTimeout>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d005      	beq.n	8006b6c <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2220      	movs	r2, #32
 8006b64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8006b68:	2303      	movs	r3, #3
 8006b6a:	e033      	b.n	8006bd4 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d10c      	bne.n	8006b8c <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006b78:	b29a      	uxth	r2, r3
 8006b7a:	8a7b      	ldrh	r3, [r7, #18]
 8006b7c:	4013      	ands	r3, r2
 8006b7e:	b29a      	uxth	r2, r3
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	3302      	adds	r3, #2
 8006b88:	61bb      	str	r3, [r7, #24]
 8006b8a:	e00d      	b.n	8006ba8 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	b2da      	uxtb	r2, r3
 8006b96:	8a7b      	ldrh	r3, [r7, #18]
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	4013      	ands	r3, r2
 8006b9c:	b2da      	uxtb	r2, r3
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006ba2:	69fb      	ldr	r3, [r7, #28]
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	3b01      	subs	r3, #1
 8006bb2:	b29a      	uxth	r2, r3
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d1c1      	bne.n	8006b4a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2220      	movs	r2, #32
 8006bca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	e000      	b.n	8006bd4 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8006bd2:	2302      	movs	r3, #2
  }
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3720      	adds	r7, #32
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006be0:	b08c      	sub	sp, #48	; 0x30
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006be6:	2300      	movs	r3, #0
 8006be8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	689a      	ldr	r2, [r3, #8]
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	431a      	orrs	r2, r3
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	695b      	ldr	r3, [r3, #20]
 8006bfa:	431a      	orrs	r2, r3
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	69db      	ldr	r3, [r3, #28]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	4baa      	ldr	r3, [pc, #680]	; (8006eb4 <UART_SetConfig+0x2d8>)
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	697a      	ldr	r2, [r7, #20]
 8006c10:	6812      	ldr	r2, [r2, #0]
 8006c12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c14:	430b      	orrs	r3, r1
 8006c16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	68da      	ldr	r2, [r3, #12]
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	430a      	orrs	r2, r1
 8006c2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	699b      	ldr	r3, [r3, #24]
 8006c32:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a9f      	ldr	r2, [pc, #636]	; (8006eb8 <UART_SetConfig+0x2dc>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d004      	beq.n	8006c48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	6a1b      	ldr	r3, [r3, #32]
 8006c42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c44:	4313      	orrs	r3, r2
 8006c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006c52:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006c56:	697a      	ldr	r2, [r7, #20]
 8006c58:	6812      	ldr	r2, [r2, #0]
 8006c5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c5c:	430b      	orrs	r3, r1
 8006c5e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c66:	f023 010f 	bic.w	r1, r3, #15
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	430a      	orrs	r2, r1
 8006c74:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a90      	ldr	r2, [pc, #576]	; (8006ebc <UART_SetConfig+0x2e0>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d125      	bne.n	8006ccc <UART_SetConfig+0xf0>
 8006c80:	4b8f      	ldr	r3, [pc, #572]	; (8006ec0 <UART_SetConfig+0x2e4>)
 8006c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c86:	f003 0303 	and.w	r3, r3, #3
 8006c8a:	2b03      	cmp	r3, #3
 8006c8c:	d81a      	bhi.n	8006cc4 <UART_SetConfig+0xe8>
 8006c8e:	a201      	add	r2, pc, #4	; (adr r2, 8006c94 <UART_SetConfig+0xb8>)
 8006c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c94:	08006ca5 	.word	0x08006ca5
 8006c98:	08006cb5 	.word	0x08006cb5
 8006c9c:	08006cad 	.word	0x08006cad
 8006ca0:	08006cbd 	.word	0x08006cbd
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006caa:	e116      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006cac:	2302      	movs	r3, #2
 8006cae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cb2:	e112      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006cb4:	2304      	movs	r3, #4
 8006cb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cba:	e10e      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006cbc:	2308      	movs	r3, #8
 8006cbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cc2:	e10a      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006cc4:	2310      	movs	r3, #16
 8006cc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cca:	e106      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a7c      	ldr	r2, [pc, #496]	; (8006ec4 <UART_SetConfig+0x2e8>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d138      	bne.n	8006d48 <UART_SetConfig+0x16c>
 8006cd6:	4b7a      	ldr	r3, [pc, #488]	; (8006ec0 <UART_SetConfig+0x2e4>)
 8006cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cdc:	f003 030c 	and.w	r3, r3, #12
 8006ce0:	2b0c      	cmp	r3, #12
 8006ce2:	d82d      	bhi.n	8006d40 <UART_SetConfig+0x164>
 8006ce4:	a201      	add	r2, pc, #4	; (adr r2, 8006cec <UART_SetConfig+0x110>)
 8006ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cea:	bf00      	nop
 8006cec:	08006d21 	.word	0x08006d21
 8006cf0:	08006d41 	.word	0x08006d41
 8006cf4:	08006d41 	.word	0x08006d41
 8006cf8:	08006d41 	.word	0x08006d41
 8006cfc:	08006d31 	.word	0x08006d31
 8006d00:	08006d41 	.word	0x08006d41
 8006d04:	08006d41 	.word	0x08006d41
 8006d08:	08006d41 	.word	0x08006d41
 8006d0c:	08006d29 	.word	0x08006d29
 8006d10:	08006d41 	.word	0x08006d41
 8006d14:	08006d41 	.word	0x08006d41
 8006d18:	08006d41 	.word	0x08006d41
 8006d1c:	08006d39 	.word	0x08006d39
 8006d20:	2300      	movs	r3, #0
 8006d22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d26:	e0d8      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006d28:	2302      	movs	r3, #2
 8006d2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d2e:	e0d4      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006d30:	2304      	movs	r3, #4
 8006d32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d36:	e0d0      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006d38:	2308      	movs	r3, #8
 8006d3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d3e:	e0cc      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006d40:	2310      	movs	r3, #16
 8006d42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d46:	e0c8      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a5e      	ldr	r2, [pc, #376]	; (8006ec8 <UART_SetConfig+0x2ec>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d125      	bne.n	8006d9e <UART_SetConfig+0x1c2>
 8006d52:	4b5b      	ldr	r3, [pc, #364]	; (8006ec0 <UART_SetConfig+0x2e4>)
 8006d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d58:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006d5c:	2b30      	cmp	r3, #48	; 0x30
 8006d5e:	d016      	beq.n	8006d8e <UART_SetConfig+0x1b2>
 8006d60:	2b30      	cmp	r3, #48	; 0x30
 8006d62:	d818      	bhi.n	8006d96 <UART_SetConfig+0x1ba>
 8006d64:	2b20      	cmp	r3, #32
 8006d66:	d00a      	beq.n	8006d7e <UART_SetConfig+0x1a2>
 8006d68:	2b20      	cmp	r3, #32
 8006d6a:	d814      	bhi.n	8006d96 <UART_SetConfig+0x1ba>
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d002      	beq.n	8006d76 <UART_SetConfig+0x19a>
 8006d70:	2b10      	cmp	r3, #16
 8006d72:	d008      	beq.n	8006d86 <UART_SetConfig+0x1aa>
 8006d74:	e00f      	b.n	8006d96 <UART_SetConfig+0x1ba>
 8006d76:	2300      	movs	r3, #0
 8006d78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d7c:	e0ad      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006d7e:	2302      	movs	r3, #2
 8006d80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d84:	e0a9      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006d86:	2304      	movs	r3, #4
 8006d88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d8c:	e0a5      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006d8e:	2308      	movs	r3, #8
 8006d90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d94:	e0a1      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006d96:	2310      	movs	r3, #16
 8006d98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d9c:	e09d      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a4a      	ldr	r2, [pc, #296]	; (8006ecc <UART_SetConfig+0x2f0>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d125      	bne.n	8006df4 <UART_SetConfig+0x218>
 8006da8:	4b45      	ldr	r3, [pc, #276]	; (8006ec0 <UART_SetConfig+0x2e4>)
 8006daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006db2:	2bc0      	cmp	r3, #192	; 0xc0
 8006db4:	d016      	beq.n	8006de4 <UART_SetConfig+0x208>
 8006db6:	2bc0      	cmp	r3, #192	; 0xc0
 8006db8:	d818      	bhi.n	8006dec <UART_SetConfig+0x210>
 8006dba:	2b80      	cmp	r3, #128	; 0x80
 8006dbc:	d00a      	beq.n	8006dd4 <UART_SetConfig+0x1f8>
 8006dbe:	2b80      	cmp	r3, #128	; 0x80
 8006dc0:	d814      	bhi.n	8006dec <UART_SetConfig+0x210>
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d002      	beq.n	8006dcc <UART_SetConfig+0x1f0>
 8006dc6:	2b40      	cmp	r3, #64	; 0x40
 8006dc8:	d008      	beq.n	8006ddc <UART_SetConfig+0x200>
 8006dca:	e00f      	b.n	8006dec <UART_SetConfig+0x210>
 8006dcc:	2300      	movs	r3, #0
 8006dce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dd2:	e082      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006dd4:	2302      	movs	r3, #2
 8006dd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dda:	e07e      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006ddc:	2304      	movs	r3, #4
 8006dde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006de2:	e07a      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006de4:	2308      	movs	r3, #8
 8006de6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dea:	e076      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006dec:	2310      	movs	r3, #16
 8006dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006df2:	e072      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a35      	ldr	r2, [pc, #212]	; (8006ed0 <UART_SetConfig+0x2f4>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d12a      	bne.n	8006e54 <UART_SetConfig+0x278>
 8006dfe:	4b30      	ldr	r3, [pc, #192]	; (8006ec0 <UART_SetConfig+0x2e4>)
 8006e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e0c:	d01a      	beq.n	8006e44 <UART_SetConfig+0x268>
 8006e0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e12:	d81b      	bhi.n	8006e4c <UART_SetConfig+0x270>
 8006e14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e18:	d00c      	beq.n	8006e34 <UART_SetConfig+0x258>
 8006e1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e1e:	d815      	bhi.n	8006e4c <UART_SetConfig+0x270>
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d003      	beq.n	8006e2c <UART_SetConfig+0x250>
 8006e24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e28:	d008      	beq.n	8006e3c <UART_SetConfig+0x260>
 8006e2a:	e00f      	b.n	8006e4c <UART_SetConfig+0x270>
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e32:	e052      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006e34:	2302      	movs	r3, #2
 8006e36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e3a:	e04e      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006e3c:	2304      	movs	r3, #4
 8006e3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e42:	e04a      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006e44:	2308      	movs	r3, #8
 8006e46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e4a:	e046      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006e4c:	2310      	movs	r3, #16
 8006e4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e52:	e042      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a17      	ldr	r2, [pc, #92]	; (8006eb8 <UART_SetConfig+0x2dc>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d13a      	bne.n	8006ed4 <UART_SetConfig+0x2f8>
 8006e5e:	4b18      	ldr	r3, [pc, #96]	; (8006ec0 <UART_SetConfig+0x2e4>)
 8006e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e64:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e6c:	d01a      	beq.n	8006ea4 <UART_SetConfig+0x2c8>
 8006e6e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e72:	d81b      	bhi.n	8006eac <UART_SetConfig+0x2d0>
 8006e74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e78:	d00c      	beq.n	8006e94 <UART_SetConfig+0x2b8>
 8006e7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e7e:	d815      	bhi.n	8006eac <UART_SetConfig+0x2d0>
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d003      	beq.n	8006e8c <UART_SetConfig+0x2b0>
 8006e84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e88:	d008      	beq.n	8006e9c <UART_SetConfig+0x2c0>
 8006e8a:	e00f      	b.n	8006eac <UART_SetConfig+0x2d0>
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e92:	e022      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006e94:	2302      	movs	r3, #2
 8006e96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e9a:	e01e      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006e9c:	2304      	movs	r3, #4
 8006e9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ea2:	e01a      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006ea4:	2308      	movs	r3, #8
 8006ea6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006eaa:	e016      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006eac:	2310      	movs	r3, #16
 8006eae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006eb2:	e012      	b.n	8006eda <UART_SetConfig+0x2fe>
 8006eb4:	cfff69f3 	.word	0xcfff69f3
 8006eb8:	40008000 	.word	0x40008000
 8006ebc:	40013800 	.word	0x40013800
 8006ec0:	40021000 	.word	0x40021000
 8006ec4:	40004400 	.word	0x40004400
 8006ec8:	40004800 	.word	0x40004800
 8006ecc:	40004c00 	.word	0x40004c00
 8006ed0:	40005000 	.word	0x40005000
 8006ed4:	2310      	movs	r3, #16
 8006ed6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4aae      	ldr	r2, [pc, #696]	; (8007198 <UART_SetConfig+0x5bc>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	f040 8097 	bne.w	8007014 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ee6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006eea:	2b08      	cmp	r3, #8
 8006eec:	d823      	bhi.n	8006f36 <UART_SetConfig+0x35a>
 8006eee:	a201      	add	r2, pc, #4	; (adr r2, 8006ef4 <UART_SetConfig+0x318>)
 8006ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef4:	08006f19 	.word	0x08006f19
 8006ef8:	08006f37 	.word	0x08006f37
 8006efc:	08006f21 	.word	0x08006f21
 8006f00:	08006f37 	.word	0x08006f37
 8006f04:	08006f27 	.word	0x08006f27
 8006f08:	08006f37 	.word	0x08006f37
 8006f0c:	08006f37 	.word	0x08006f37
 8006f10:	08006f37 	.word	0x08006f37
 8006f14:	08006f2f 	.word	0x08006f2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f18:	f7fc fa36 	bl	8003388 <HAL_RCC_GetPCLK1Freq>
 8006f1c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f1e:	e010      	b.n	8006f42 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f20:	4b9e      	ldr	r3, [pc, #632]	; (800719c <UART_SetConfig+0x5c0>)
 8006f22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f24:	e00d      	b.n	8006f42 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f26:	f7fc f999 	bl	800325c <HAL_RCC_GetSysClockFreq>
 8006f2a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f2c:	e009      	b.n	8006f42 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f34:	e005      	b.n	8006f42 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006f36:	2300      	movs	r3, #0
 8006f38:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006f40:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	f000 8130 	beq.w	80071aa <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f4e:	4a94      	ldr	r2, [pc, #592]	; (80071a0 <UART_SetConfig+0x5c4>)
 8006f50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f54:	461a      	mov	r2, r3
 8006f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f58:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f5c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	685a      	ldr	r2, [r3, #4]
 8006f62:	4613      	mov	r3, r2
 8006f64:	005b      	lsls	r3, r3, #1
 8006f66:	4413      	add	r3, r2
 8006f68:	69ba      	ldr	r2, [r7, #24]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d305      	bcc.n	8006f7a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f74:	69ba      	ldr	r2, [r7, #24]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d903      	bls.n	8006f82 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006f80:	e113      	b.n	80071aa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f84:	2200      	movs	r2, #0
 8006f86:	60bb      	str	r3, [r7, #8]
 8006f88:	60fa      	str	r2, [r7, #12]
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f8e:	4a84      	ldr	r2, [pc, #528]	; (80071a0 <UART_SetConfig+0x5c4>)
 8006f90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	2200      	movs	r2, #0
 8006f98:	603b      	str	r3, [r7, #0]
 8006f9a:	607a      	str	r2, [r7, #4]
 8006f9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fa0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006fa4:	f7f9 f97c 	bl	80002a0 <__aeabi_uldivmod>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	460b      	mov	r3, r1
 8006fac:	4610      	mov	r0, r2
 8006fae:	4619      	mov	r1, r3
 8006fb0:	f04f 0200 	mov.w	r2, #0
 8006fb4:	f04f 0300 	mov.w	r3, #0
 8006fb8:	020b      	lsls	r3, r1, #8
 8006fba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006fbe:	0202      	lsls	r2, r0, #8
 8006fc0:	6979      	ldr	r1, [r7, #20]
 8006fc2:	6849      	ldr	r1, [r1, #4]
 8006fc4:	0849      	lsrs	r1, r1, #1
 8006fc6:	2000      	movs	r0, #0
 8006fc8:	460c      	mov	r4, r1
 8006fca:	4605      	mov	r5, r0
 8006fcc:	eb12 0804 	adds.w	r8, r2, r4
 8006fd0:	eb43 0905 	adc.w	r9, r3, r5
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	469a      	mov	sl, r3
 8006fdc:	4693      	mov	fp, r2
 8006fde:	4652      	mov	r2, sl
 8006fe0:	465b      	mov	r3, fp
 8006fe2:	4640      	mov	r0, r8
 8006fe4:	4649      	mov	r1, r9
 8006fe6:	f7f9 f95b 	bl	80002a0 <__aeabi_uldivmod>
 8006fea:	4602      	mov	r2, r0
 8006fec:	460b      	mov	r3, r1
 8006fee:	4613      	mov	r3, r2
 8006ff0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ff2:	6a3b      	ldr	r3, [r7, #32]
 8006ff4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ff8:	d308      	bcc.n	800700c <UART_SetConfig+0x430>
 8006ffa:	6a3b      	ldr	r3, [r7, #32]
 8006ffc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007000:	d204      	bcs.n	800700c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	6a3a      	ldr	r2, [r7, #32]
 8007008:	60da      	str	r2, [r3, #12]
 800700a:	e0ce      	b.n	80071aa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007012:	e0ca      	b.n	80071aa <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	69db      	ldr	r3, [r3, #28]
 8007018:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800701c:	d166      	bne.n	80070ec <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800701e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007022:	2b08      	cmp	r3, #8
 8007024:	d827      	bhi.n	8007076 <UART_SetConfig+0x49a>
 8007026:	a201      	add	r2, pc, #4	; (adr r2, 800702c <UART_SetConfig+0x450>)
 8007028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800702c:	08007051 	.word	0x08007051
 8007030:	08007059 	.word	0x08007059
 8007034:	08007061 	.word	0x08007061
 8007038:	08007077 	.word	0x08007077
 800703c:	08007067 	.word	0x08007067
 8007040:	08007077 	.word	0x08007077
 8007044:	08007077 	.word	0x08007077
 8007048:	08007077 	.word	0x08007077
 800704c:	0800706f 	.word	0x0800706f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007050:	f7fc f99a 	bl	8003388 <HAL_RCC_GetPCLK1Freq>
 8007054:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007056:	e014      	b.n	8007082 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007058:	f7fc f9ac 	bl	80033b4 <HAL_RCC_GetPCLK2Freq>
 800705c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800705e:	e010      	b.n	8007082 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007060:	4b4e      	ldr	r3, [pc, #312]	; (800719c <UART_SetConfig+0x5c0>)
 8007062:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007064:	e00d      	b.n	8007082 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007066:	f7fc f8f9 	bl	800325c <HAL_RCC_GetSysClockFreq>
 800706a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800706c:	e009      	b.n	8007082 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800706e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007072:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007074:	e005      	b.n	8007082 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007076:	2300      	movs	r3, #0
 8007078:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007080:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007084:	2b00      	cmp	r3, #0
 8007086:	f000 8090 	beq.w	80071aa <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708e:	4a44      	ldr	r2, [pc, #272]	; (80071a0 <UART_SetConfig+0x5c4>)
 8007090:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007094:	461a      	mov	r2, r3
 8007096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007098:	fbb3 f3f2 	udiv	r3, r3, r2
 800709c:	005a      	lsls	r2, r3, #1
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	085b      	lsrs	r3, r3, #1
 80070a4:	441a      	add	r2, r3
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ae:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070b0:	6a3b      	ldr	r3, [r7, #32]
 80070b2:	2b0f      	cmp	r3, #15
 80070b4:	d916      	bls.n	80070e4 <UART_SetConfig+0x508>
 80070b6:	6a3b      	ldr	r3, [r7, #32]
 80070b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070bc:	d212      	bcs.n	80070e4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80070be:	6a3b      	ldr	r3, [r7, #32]
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	f023 030f 	bic.w	r3, r3, #15
 80070c6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80070c8:	6a3b      	ldr	r3, [r7, #32]
 80070ca:	085b      	lsrs	r3, r3, #1
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	f003 0307 	and.w	r3, r3, #7
 80070d2:	b29a      	uxth	r2, r3
 80070d4:	8bfb      	ldrh	r3, [r7, #30]
 80070d6:	4313      	orrs	r3, r2
 80070d8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	8bfa      	ldrh	r2, [r7, #30]
 80070e0:	60da      	str	r2, [r3, #12]
 80070e2:	e062      	b.n	80071aa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80070ea:	e05e      	b.n	80071aa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80070ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80070f0:	2b08      	cmp	r3, #8
 80070f2:	d828      	bhi.n	8007146 <UART_SetConfig+0x56a>
 80070f4:	a201      	add	r2, pc, #4	; (adr r2, 80070fc <UART_SetConfig+0x520>)
 80070f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070fa:	bf00      	nop
 80070fc:	08007121 	.word	0x08007121
 8007100:	08007129 	.word	0x08007129
 8007104:	08007131 	.word	0x08007131
 8007108:	08007147 	.word	0x08007147
 800710c:	08007137 	.word	0x08007137
 8007110:	08007147 	.word	0x08007147
 8007114:	08007147 	.word	0x08007147
 8007118:	08007147 	.word	0x08007147
 800711c:	0800713f 	.word	0x0800713f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007120:	f7fc f932 	bl	8003388 <HAL_RCC_GetPCLK1Freq>
 8007124:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007126:	e014      	b.n	8007152 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007128:	f7fc f944 	bl	80033b4 <HAL_RCC_GetPCLK2Freq>
 800712c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800712e:	e010      	b.n	8007152 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007130:	4b1a      	ldr	r3, [pc, #104]	; (800719c <UART_SetConfig+0x5c0>)
 8007132:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007134:	e00d      	b.n	8007152 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007136:	f7fc f891 	bl	800325c <HAL_RCC_GetSysClockFreq>
 800713a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800713c:	e009      	b.n	8007152 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800713e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007142:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007144:	e005      	b.n	8007152 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007146:	2300      	movs	r3, #0
 8007148:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007150:	bf00      	nop
    }

    if (pclk != 0U)
 8007152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007154:	2b00      	cmp	r3, #0
 8007156:	d028      	beq.n	80071aa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715c:	4a10      	ldr	r2, [pc, #64]	; (80071a0 <UART_SetConfig+0x5c4>)
 800715e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007162:	461a      	mov	r2, r3
 8007164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007166:	fbb3 f2f2 	udiv	r2, r3, r2
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	085b      	lsrs	r3, r3, #1
 8007170:	441a      	add	r2, r3
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	fbb2 f3f3 	udiv	r3, r2, r3
 800717a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800717c:	6a3b      	ldr	r3, [r7, #32]
 800717e:	2b0f      	cmp	r3, #15
 8007180:	d910      	bls.n	80071a4 <UART_SetConfig+0x5c8>
 8007182:	6a3b      	ldr	r3, [r7, #32]
 8007184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007188:	d20c      	bcs.n	80071a4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800718a:	6a3b      	ldr	r3, [r7, #32]
 800718c:	b29a      	uxth	r2, r3
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	60da      	str	r2, [r3, #12]
 8007194:	e009      	b.n	80071aa <UART_SetConfig+0x5ce>
 8007196:	bf00      	nop
 8007198:	40008000 	.word	0x40008000
 800719c:	00f42400 	.word	0x00f42400
 80071a0:	0800c968 	.word	0x0800c968
      }
      else
      {
        ret = HAL_ERROR;
 80071a4:	2301      	movs	r3, #1
 80071a6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	2201      	movs	r2, #1
 80071ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	2201      	movs	r2, #1
 80071b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	2200      	movs	r2, #0
 80071be:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	2200      	movs	r2, #0
 80071c4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80071c6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3730      	adds	r7, #48	; 0x30
 80071ce:	46bd      	mov	sp, r7
 80071d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080071d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b083      	sub	sp, #12
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e0:	f003 0308 	and.w	r3, r3, #8
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d00a      	beq.n	80071fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	430a      	orrs	r2, r1
 80071fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007202:	f003 0301 	and.w	r3, r3, #1
 8007206:	2b00      	cmp	r3, #0
 8007208:	d00a      	beq.n	8007220 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	430a      	orrs	r2, r1
 800721e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007224:	f003 0302 	and.w	r3, r3, #2
 8007228:	2b00      	cmp	r3, #0
 800722a:	d00a      	beq.n	8007242 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	430a      	orrs	r2, r1
 8007240:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007246:	f003 0304 	and.w	r3, r3, #4
 800724a:	2b00      	cmp	r3, #0
 800724c:	d00a      	beq.n	8007264 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	430a      	orrs	r2, r1
 8007262:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007268:	f003 0310 	and.w	r3, r3, #16
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00a      	beq.n	8007286 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	430a      	orrs	r2, r1
 8007284:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800728a:	f003 0320 	and.w	r3, r3, #32
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00a      	beq.n	80072a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	430a      	orrs	r2, r1
 80072a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d01a      	beq.n	80072ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	430a      	orrs	r2, r1
 80072c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072d2:	d10a      	bne.n	80072ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	430a      	orrs	r2, r1
 80072e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00a      	beq.n	800730c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	430a      	orrs	r2, r1
 800730a:	605a      	str	r2, [r3, #4]
  }
}
 800730c:	bf00      	nop
 800730e:	370c      	adds	r7, #12
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b098      	sub	sp, #96	; 0x60
 800731c:	af02      	add	r7, sp, #8
 800731e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007328:	f7fa fb34 	bl	8001994 <HAL_GetTick>
 800732c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f003 0308 	and.w	r3, r3, #8
 8007338:	2b08      	cmp	r3, #8
 800733a:	d12f      	bne.n	800739c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800733c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007340:	9300      	str	r3, [sp, #0]
 8007342:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007344:	2200      	movs	r2, #0
 8007346:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 f88e 	bl	800746c <UART_WaitOnFlagUntilTimeout>
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	d022      	beq.n	800739c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800735e:	e853 3f00 	ldrex	r3, [r3]
 8007362:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007366:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800736a:	653b      	str	r3, [r7, #80]	; 0x50
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	461a      	mov	r2, r3
 8007372:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007374:	647b      	str	r3, [r7, #68]	; 0x44
 8007376:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007378:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800737a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800737c:	e841 2300 	strex	r3, r2, [r1]
 8007380:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007384:	2b00      	cmp	r3, #0
 8007386:	d1e6      	bne.n	8007356 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2220      	movs	r2, #32
 800738c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007398:	2303      	movs	r3, #3
 800739a:	e063      	b.n	8007464 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f003 0304 	and.w	r3, r3, #4
 80073a6:	2b04      	cmp	r3, #4
 80073a8:	d149      	bne.n	800743e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073aa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80073ae:	9300      	str	r3, [sp, #0]
 80073b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073b2:	2200      	movs	r2, #0
 80073b4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 f857 	bl	800746c <UART_WaitOnFlagUntilTimeout>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d03c      	beq.n	800743e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073cc:	e853 3f00 	ldrex	r3, [r3]
 80073d0:	623b      	str	r3, [r7, #32]
   return(result);
 80073d2:	6a3b      	ldr	r3, [r7, #32]
 80073d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	461a      	mov	r2, r3
 80073e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073e2:	633b      	str	r3, [r7, #48]	; 0x30
 80073e4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80073e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073ea:	e841 2300 	strex	r3, r2, [r1]
 80073ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80073f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d1e6      	bne.n	80073c4 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	3308      	adds	r3, #8
 80073fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	e853 3f00 	ldrex	r3, [r3]
 8007404:	60fb      	str	r3, [r7, #12]
   return(result);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f023 0301 	bic.w	r3, r3, #1
 800740c:	64bb      	str	r3, [r7, #72]	; 0x48
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	3308      	adds	r3, #8
 8007414:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007416:	61fa      	str	r2, [r7, #28]
 8007418:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800741a:	69b9      	ldr	r1, [r7, #24]
 800741c:	69fa      	ldr	r2, [r7, #28]
 800741e:	e841 2300 	strex	r3, r2, [r1]
 8007422:	617b      	str	r3, [r7, #20]
   return(result);
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d1e5      	bne.n	80073f6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2220      	movs	r2, #32
 800742e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800743a:	2303      	movs	r3, #3
 800743c:	e012      	b.n	8007464 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2220      	movs	r2, #32
 8007442:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2220      	movs	r2, #32
 800744a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2200      	movs	r2, #0
 8007452:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3758      	adds	r7, #88	; 0x58
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	603b      	str	r3, [r7, #0]
 8007478:	4613      	mov	r3, r2
 800747a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800747c:	e049      	b.n	8007512 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007484:	d045      	beq.n	8007512 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007486:	f7fa fa85 	bl	8001994 <HAL_GetTick>
 800748a:	4602      	mov	r2, r0
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	1ad3      	subs	r3, r2, r3
 8007490:	69ba      	ldr	r2, [r7, #24]
 8007492:	429a      	cmp	r2, r3
 8007494:	d302      	bcc.n	800749c <UART_WaitOnFlagUntilTimeout+0x30>
 8007496:	69bb      	ldr	r3, [r7, #24]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d101      	bne.n	80074a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800749c:	2303      	movs	r3, #3
 800749e:	e048      	b.n	8007532 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f003 0304 	and.w	r3, r3, #4
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d031      	beq.n	8007512 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	69db      	ldr	r3, [r3, #28]
 80074b4:	f003 0308 	and.w	r3, r3, #8
 80074b8:	2b08      	cmp	r3, #8
 80074ba:	d110      	bne.n	80074de <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	2208      	movs	r2, #8
 80074c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80074c4:	68f8      	ldr	r0, [r7, #12]
 80074c6:	f000 f838 	bl	800753a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2208      	movs	r2, #8
 80074ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2200      	movs	r2, #0
 80074d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	e029      	b.n	8007532 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	69db      	ldr	r3, [r3, #28]
 80074e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074ec:	d111      	bne.n	8007512 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80074f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80074f8:	68f8      	ldr	r0, [r7, #12]
 80074fa:	f000 f81e 	bl	800753a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2220      	movs	r2, #32
 8007502:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2200      	movs	r2, #0
 800750a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800750e:	2303      	movs	r3, #3
 8007510:	e00f      	b.n	8007532 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	69da      	ldr	r2, [r3, #28]
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	4013      	ands	r3, r2
 800751c:	68ba      	ldr	r2, [r7, #8]
 800751e:	429a      	cmp	r2, r3
 8007520:	bf0c      	ite	eq
 8007522:	2301      	moveq	r3, #1
 8007524:	2300      	movne	r3, #0
 8007526:	b2db      	uxtb	r3, r3
 8007528:	461a      	mov	r2, r3
 800752a:	79fb      	ldrb	r3, [r7, #7]
 800752c:	429a      	cmp	r2, r3
 800752e:	d0a6      	beq.n	800747e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	3710      	adds	r7, #16
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800753a:	b480      	push	{r7}
 800753c:	b095      	sub	sp, #84	; 0x54
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800754a:	e853 3f00 	ldrex	r3, [r3]
 800754e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007552:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007556:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	461a      	mov	r2, r3
 800755e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007560:	643b      	str	r3, [r7, #64]	; 0x40
 8007562:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007564:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007566:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007568:	e841 2300 	strex	r3, r2, [r1]
 800756c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800756e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007570:	2b00      	cmp	r3, #0
 8007572:	d1e6      	bne.n	8007542 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	3308      	adds	r3, #8
 800757a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800757c:	6a3b      	ldr	r3, [r7, #32]
 800757e:	e853 3f00 	ldrex	r3, [r3]
 8007582:	61fb      	str	r3, [r7, #28]
   return(result);
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800758a:	f023 0301 	bic.w	r3, r3, #1
 800758e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	3308      	adds	r3, #8
 8007596:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007598:	62fa      	str	r2, [r7, #44]	; 0x2c
 800759a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800759c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800759e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075a0:	e841 2300 	strex	r3, r2, [r1]
 80075a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80075a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d1e3      	bne.n	8007574 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d118      	bne.n	80075e6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	e853 3f00 	ldrex	r3, [r3]
 80075c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	f023 0310 	bic.w	r3, r3, #16
 80075c8:	647b      	str	r3, [r7, #68]	; 0x44
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	461a      	mov	r2, r3
 80075d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075d2:	61bb      	str	r3, [r7, #24]
 80075d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d6:	6979      	ldr	r1, [r7, #20]
 80075d8:	69ba      	ldr	r2, [r7, #24]
 80075da:	e841 2300 	strex	r3, r2, [r1]
 80075de:	613b      	str	r3, [r7, #16]
   return(result);
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d1e6      	bne.n	80075b4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2220      	movs	r2, #32
 80075ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2200      	movs	r2, #0
 80075f8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80075fa:	bf00      	nop
 80075fc:	3754      	adds	r7, #84	; 0x54
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr

08007606 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007606:	b480      	push	{r7}
 8007608:	b085      	sub	sp, #20
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007614:	2b01      	cmp	r3, #1
 8007616:	d101      	bne.n	800761c <HAL_UARTEx_DisableFifoMode+0x16>
 8007618:	2302      	movs	r3, #2
 800761a:	e027      	b.n	800766c <HAL_UARTEx_DisableFifoMode+0x66>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2201      	movs	r2, #1
 8007620:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2224      	movs	r2, #36	; 0x24
 8007628:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f022 0201 	bic.w	r2, r2, #1
 8007642:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800764a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	68fa      	ldr	r2, [r7, #12]
 8007658:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2220      	movs	r2, #32
 800765e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800766a:	2300      	movs	r3, #0
}
 800766c:	4618      	mov	r0, r3
 800766e:	3714      	adds	r7, #20
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr

08007678 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007688:	2b01      	cmp	r3, #1
 800768a:	d101      	bne.n	8007690 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800768c:	2302      	movs	r3, #2
 800768e:	e02d      	b.n	80076ec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2201      	movs	r2, #1
 8007694:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2224      	movs	r2, #36	; 0x24
 800769c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f022 0201 	bic.w	r2, r2, #1
 80076b6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	683a      	ldr	r2, [r7, #0]
 80076c8:	430a      	orrs	r2, r1
 80076ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f000 f84f 	bl	8007770 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	68fa      	ldr	r2, [r7, #12]
 80076d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2220      	movs	r2, #32
 80076de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80076ea:	2300      	movs	r3, #0
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3710      	adds	r7, #16
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b084      	sub	sp, #16
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007704:	2b01      	cmp	r3, #1
 8007706:	d101      	bne.n	800770c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007708:	2302      	movs	r3, #2
 800770a:	e02d      	b.n	8007768 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2224      	movs	r2, #36	; 0x24
 8007718:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f022 0201 	bic.w	r2, r2, #1
 8007732:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	683a      	ldr	r2, [r7, #0]
 8007744:	430a      	orrs	r2, r1
 8007746:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 f811 	bl	8007770 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	68fa      	ldr	r2, [r7, #12]
 8007754:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2220      	movs	r2, #32
 800775a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007766:	2300      	movs	r3, #0
}
 8007768:	4618      	mov	r0, r3
 800776a:	3710      	adds	r7, #16
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007770:	b480      	push	{r7}
 8007772:	b085      	sub	sp, #20
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800777c:	2b00      	cmp	r3, #0
 800777e:	d108      	bne.n	8007792 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2201      	movs	r2, #1
 800778c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007790:	e031      	b.n	80077f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007792:	2308      	movs	r3, #8
 8007794:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007796:	2308      	movs	r3, #8
 8007798:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	0e5b      	lsrs	r3, r3, #25
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	f003 0307 	and.w	r3, r3, #7
 80077a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	0f5b      	lsrs	r3, r3, #29
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	f003 0307 	and.w	r3, r3, #7
 80077b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80077ba:	7bbb      	ldrb	r3, [r7, #14]
 80077bc:	7b3a      	ldrb	r2, [r7, #12]
 80077be:	4911      	ldr	r1, [pc, #68]	; (8007804 <UARTEx_SetNbDataToProcess+0x94>)
 80077c0:	5c8a      	ldrb	r2, [r1, r2]
 80077c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80077c6:	7b3a      	ldrb	r2, [r7, #12]
 80077c8:	490f      	ldr	r1, [pc, #60]	; (8007808 <UARTEx_SetNbDataToProcess+0x98>)
 80077ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80077cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80077d0:	b29a      	uxth	r2, r3
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077d8:	7bfb      	ldrb	r3, [r7, #15]
 80077da:	7b7a      	ldrb	r2, [r7, #13]
 80077dc:	4909      	ldr	r1, [pc, #36]	; (8007804 <UARTEx_SetNbDataToProcess+0x94>)
 80077de:	5c8a      	ldrb	r2, [r1, r2]
 80077e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80077e4:	7b7a      	ldrb	r2, [r7, #13]
 80077e6:	4908      	ldr	r1, [pc, #32]	; (8007808 <UARTEx_SetNbDataToProcess+0x98>)
 80077e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80077ee:	b29a      	uxth	r2, r3
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80077f6:	bf00      	nop
 80077f8:	3714      	adds	r7, #20
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop
 8007804:	0800c980 	.word	0x0800c980
 8007808:	0800c988 	.word	0x0800c988

0800780c <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800780c:	b480      	push	{r7}
 800780e:	b087      	sub	sp, #28
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	681a      	ldr	r2, [r3, #0]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007820:	683a      	ldr	r2, [r7, #0]
 8007822:	6812      	ldr	r2, [r2, #0]
 8007824:	f023 0101 	bic.w	r1, r3, #1
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	2b08      	cmp	r3, #8
 8007834:	d102      	bne.n	800783c <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007836:	2340      	movs	r3, #64	; 0x40
 8007838:	617b      	str	r3, [r7, #20]
 800783a:	e001      	b.n	8007840 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800783c:	2300      	movs	r3, #0
 800783e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800784c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8007852:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8007858:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800785e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8007864:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800786a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8007870:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8007876:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800787c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8007882:	4313      	orrs	r3, r2
 8007884:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800788a:	693a      	ldr	r2, [r7, #16]
 800788c:	4313      	orrs	r3, r2
 800788e:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007894:	693a      	ldr	r2, [r7, #16]
 8007896:	4313      	orrs	r3, r2
 8007898:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800789e:	693a      	ldr	r2, [r7, #16]
 80078a0:	4313      	orrs	r3, r2
 80078a2:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a8:	693a      	ldr	r2, [r7, #16]
 80078aa:	4313      	orrs	r3, r2
 80078ac:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 80078ae:	4b23      	ldr	r3, [pc, #140]	; (800793c <FMC_NORSRAM_Init+0x130>)
 80078b0:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80078b8:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80078c0:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 80078c8:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80078d0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	43db      	mvns	r3, r3
 80078e0:	ea02 0103 	and.w	r1, r2, r3
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	4319      	orrs	r1, r3
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078fa:	d10c      	bne.n	8007916 <FMC_NORSRAM_Init+0x10a>
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d008      	beq.n	8007916 <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007910:	431a      	orrs	r2, r3
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d006      	beq.n	800792c <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007926:	431a      	orrs	r2, r3
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 800792c:	2300      	movs	r3, #0
}
 800792e:	4618      	mov	r0, r3
 8007930:	371c      	adds	r7, #28
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr
 800793a:	bf00      	nop
 800793c:	0008fb7f 	.word	0x0008fb7f

08007940 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007940:	b480      	push	{r7}
 8007942:	b087      	sub	sp, #28
 8007944:	af00      	add	r7, sp, #0
 8007946:	60f8      	str	r0, [r7, #12]
 8007948:	60b9      	str	r1, [r7, #8]
 800794a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
#if defined(FMC_BTRx_DATAHLD)
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	1c5a      	adds	r2, r3, #1
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	011b      	lsls	r3, r3, #4
 8007960:	431a      	orrs	r2, r3
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	021b      	lsls	r3, r3, #8
 8007968:	431a      	orrs	r2, r3
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	68db      	ldr	r3, [r3, #12]
 800796e:	079b      	lsls	r3, r3, #30
 8007970:	431a      	orrs	r2, r3
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	691b      	ldr	r3, [r3, #16]
 8007976:	041b      	lsls	r3, r3, #16
 8007978:	431a      	orrs	r2, r3
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	695b      	ldr	r3, [r3, #20]
 800797e:	3b01      	subs	r3, #1
 8007980:	051b      	lsls	r3, r3, #20
 8007982:	431a      	orrs	r2, r3
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	699b      	ldr	r3, [r3, #24]
 8007988:	3b02      	subs	r3, #2
 800798a:	061b      	lsls	r3, r3, #24
 800798c:	ea42 0103 	orr.w	r1, r2, r3
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	69db      	ldr	r3, [r3, #28]
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	3201      	adds	r2, #1
 8007998:	4319      	orrs	r1, r3
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80079a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079ac:	d113      	bne.n	80079d6 <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80079b6:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	695b      	ldr	r3, [r3, #20]
 80079bc:	3b01      	subs	r3, #1
 80079be:	051b      	lsls	r3, r3, #20
 80079c0:	697a      	ldr	r2, [r7, #20]
 80079c2:	4313      	orrs	r3, r2
 80079c4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	431a      	orrs	r2, r3
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	371c      	adds	r7, #28
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr

080079e4 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b085      	sub	sp, #20
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	60f8      	str	r0, [r7, #12]
 80079ec:	60b9      	str	r1, [r7, #8]
 80079ee:	607a      	str	r2, [r7, #4]
 80079f0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80079f8:	d121      	bne.n	8007a3e <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FMC_BTRx_DATAHLD)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a02:	f003 627f 	and.w	r2, r3, #267386880	; 0xff00000
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	6819      	ldr	r1, [r3, #0]
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	011b      	lsls	r3, r3, #4
 8007a10:	4319      	orrs	r1, r3
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	021b      	lsls	r3, r3, #8
 8007a18:	4319      	orrs	r1, r3
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	68db      	ldr	r3, [r3, #12]
 8007a1e:	079b      	lsls	r3, r3, #30
 8007a20:	4319      	orrs	r1, r3
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	69db      	ldr	r3, [r3, #28]
 8007a26:	4319      	orrs	r1, r3
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	691b      	ldr	r3, [r3, #16]
 8007a2c:	041b      	lsls	r3, r3, #16
 8007a2e:	430b      	orrs	r3, r1
 8007a30:	ea42 0103 	orr.w	r1, r2, r3
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007a3c:	e005      	b.n	8007a4a <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8007a46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8007a4a:	2300      	movs	r3, #0
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3714      	adds	r7, #20
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8007a58:	b084      	sub	sp, #16
 8007a5a:	b480      	push	{r7}
 8007a5c:	b085      	sub	sp, #20
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
 8007a62:	f107 001c 	add.w	r0, r7, #28
 8007a66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 8007a6e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8007a70:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007a72:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 8007a76:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 8007a7a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 8007a7e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007a80:	68fa      	ldr	r2, [r7, #12]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	685a      	ldr	r2, [r3, #4]
 8007a8a:	4b07      	ldr	r3, [pc, #28]	; (8007aa8 <SDMMC_Init+0x50>)
 8007a8c:	4013      	ands	r3, r2
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	431a      	orrs	r2, r3
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007a96:	2300      	movs	r3, #0
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3714      	adds	r7, #20
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	b004      	add	sp, #16
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	ffc02c00 	.word	0xffc02c00

08007aac <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b083      	sub	sp, #12
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	370c      	adds	r7, #12
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr

08007ac6 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b082      	sub	sp, #8
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f043 0203 	orr.w	r2, r3, #3
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8007ada:	2002      	movs	r0, #2
 8007adc:	f7f9 ff66 	bl	80019ac <HAL_Delay>

  return HAL_OK;
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3708      	adds	r7, #8
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}

08007aea <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8007aea:	b480      	push	{r7}
 8007aec:	b083      	sub	sp, #12
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f003 0303 	and.w	r3, r3, #3
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	370c      	adds	r7, #12
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr
	...

08007b08 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b085      	sub	sp, #20
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007b12:	2300      	movs	r3, #0
 8007b14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007b26:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007b2c:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007b32:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007b34:	68fa      	ldr	r2, [r7, #12]
 8007b36:	4313      	orrs	r3, r2
 8007b38:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	68da      	ldr	r2, [r3, #12]
 8007b3e:	4b06      	ldr	r3, [pc, #24]	; (8007b58 <SDMMC_SendCommand+0x50>)
 8007b40:	4013      	ands	r3, r2
 8007b42:	68fa      	ldr	r2, [r7, #12]
 8007b44:	431a      	orrs	r2, r3
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007b4a:	2300      	movs	r3, #0
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3714      	adds	r7, #20
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr
 8007b58:	fffee0c0 	.word	0xfffee0c0

08007b5c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	b2db      	uxtb	r3, r3
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	370c      	adds	r7, #12
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr

08007b76 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8007b76:	b480      	push	{r7}
 8007b78:	b085      	sub	sp, #20
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
 8007b7e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	3314      	adds	r3, #20
 8007b84:	461a      	mov	r2, r3
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	4413      	add	r3, r2
 8007b8a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3714      	adds	r7, #20
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr

08007b9c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b085      	sub	sp, #20
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	685a      	ldr	r2, [r3, #4]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007bc2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007bc8:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007bce:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007bd0:	68fa      	ldr	r2, [r7, #12]
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bda:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	431a      	orrs	r2, r3
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007be6:	2300      	movs	r3, #0

}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3714      	adds	r7, #20
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr

08007bf4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b088      	sub	sp, #32
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007c02:	2310      	movs	r3, #16
 8007c04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007c06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007c10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c14:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007c16:	f107 0308 	add.w	r3, r7, #8
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f7ff ff73 	bl	8007b08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8007c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c26:	2110      	movs	r1, #16
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 f9b9 	bl	8007fa0 <SDMMC_GetCmdResp1>
 8007c2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c30:	69fb      	ldr	r3, [r7, #28]
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3720      	adds	r7, #32
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	b08a      	sub	sp, #40	; 0x28
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	60f8      	str	r0, [r7, #12]
 8007c42:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007c4a:	2307      	movs	r3, #7
 8007c4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007c4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c52:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007c54:	2300      	movs	r3, #0
 8007c56:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007c58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c5c:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007c5e:	f107 0310 	add.w	r3, r7, #16
 8007c62:	4619      	mov	r1, r3
 8007c64:	68f8      	ldr	r0, [r7, #12]
 8007c66:	f7ff ff4f 	bl	8007b08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8007c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c6e:	2107      	movs	r1, #7
 8007c70:	68f8      	ldr	r0, [r7, #12]
 8007c72:	f000 f995 	bl	8007fa0 <SDMMC_GetCmdResp1>
 8007c76:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8007c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3728      	adds	r7, #40	; 0x28
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}

08007c82 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8007c82:	b580      	push	{r7, lr}
 8007c84:	b088      	sub	sp, #32
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8007c92:	2300      	movs	r3, #0
 8007c94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007c96:	2300      	movs	r3, #0
 8007c98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007c9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c9e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007ca0:	f107 0308 	add.w	r3, r7, #8
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f7ff ff2e 	bl	8007b08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 fbb9 	bl	8008424 <SDMMC_GetCmdError>
 8007cb2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007cb4:	69fb      	ldr	r3, [r7, #28]
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3720      	adds	r7, #32
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}

08007cbe <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8007cbe:	b580      	push	{r7, lr}
 8007cc0:	b088      	sub	sp, #32
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007cc6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007cca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007ccc:	2308      	movs	r3, #8
 8007cce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007cd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007cd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007cda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007cde:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007ce0:	f107 0308 	add.w	r3, r7, #8
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f7ff ff0e 	bl	8007b08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 fb4b 	bl	8008388 <SDMMC_GetCmdResp7>
 8007cf2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007cf4:	69fb      	ldr	r3, [r7, #28]
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3720      	adds	r7, #32
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}

08007cfe <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007cfe:	b580      	push	{r7, lr}
 8007d00:	b088      	sub	sp, #32
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
 8007d06:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007d0c:	2337      	movs	r3, #55	; 0x37
 8007d0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007d10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007d16:	2300      	movs	r3, #0
 8007d18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007d1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007d1e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007d20:	f107 0308 	add.w	r3, r7, #8
 8007d24:	4619      	mov	r1, r3
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f7ff feee 	bl	8007b08 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8007d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d30:	2137      	movs	r1, #55	; 0x37
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 f934 	bl	8007fa0 <SDMMC_GetCmdResp1>
 8007d38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007d3a:	69fb      	ldr	r3, [r7, #28]
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3720      	adds	r7, #32
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b088      	sub	sp, #32
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007d52:	2329      	movs	r3, #41	; 0x29
 8007d54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007d56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007d60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007d64:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007d66:	f107 0308 	add.w	r3, r7, #8
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f7ff fecb 	bl	8007b08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 fa50 	bl	8008218 <SDMMC_GetCmdResp3>
 8007d78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007d7a:	69fb      	ldr	r3, [r7, #28]
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3720      	adds	r7, #32
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b088      	sub	sp, #32
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007d92:	2306      	movs	r3, #6
 8007d94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007d96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007da0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007da4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007da6:	f107 0308 	add.w	r3, r7, #8
 8007daa:	4619      	mov	r1, r3
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f7ff feab 	bl	8007b08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8007db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007db6:	2106      	movs	r1, #6
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 f8f1 	bl	8007fa0 <SDMMC_GetCmdResp1>
 8007dbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007dc0:	69fb      	ldr	r3, [r7, #28]
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3720      	adds	r7, #32
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}

08007dca <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8007dca:	b580      	push	{r7, lr}
 8007dcc:	b088      	sub	sp, #32
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007dd6:	2333      	movs	r3, #51	; 0x33
 8007dd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007dda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007dde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007de0:	2300      	movs	r3, #0
 8007de2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007de4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007de8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007dea:	f107 0308 	add.w	r3, r7, #8
 8007dee:	4619      	mov	r1, r3
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f7ff fe89 	bl	8007b08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8007df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dfa:	2133      	movs	r1, #51	; 0x33
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 f8cf 	bl	8007fa0 <SDMMC_GetCmdResp1>
 8007e02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007e04:	69fb      	ldr	r3, [r7, #28]
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3720      	adds	r7, #32
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}

08007e0e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b088      	sub	sp, #32
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007e16:	2300      	movs	r3, #0
 8007e18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007e1a:	2302      	movs	r3, #2
 8007e1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007e1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007e22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007e24:	2300      	movs	r3, #0
 8007e26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007e28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e2c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007e2e:	f107 0308 	add.w	r3, r7, #8
 8007e32:	4619      	mov	r1, r3
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f7ff fe67 	bl	8007b08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 f9a2 	bl	8008184 <SDMMC_GetCmdResp2>
 8007e40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007e42:	69fb      	ldr	r3, [r7, #28]
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3720      	adds	r7, #32
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b088      	sub	sp, #32
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007e5a:	2309      	movs	r3, #9
 8007e5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007e5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007e62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007e64:	2300      	movs	r3, #0
 8007e66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007e68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e6c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007e6e:	f107 0308 	add.w	r3, r7, #8
 8007e72:	4619      	mov	r1, r3
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f7ff fe47 	bl	8007b08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 f982 	bl	8008184 <SDMMC_GetCmdResp2>
 8007e80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007e82:	69fb      	ldr	r3, [r7, #28]
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3720      	adds	r7, #32
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b088      	sub	sp, #32
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007e96:	2300      	movs	r3, #0
 8007e98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007e9a:	2303      	movs	r3, #3
 8007e9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007e9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ea2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007ea8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007eac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007eae:	f107 0308 	add.w	r3, r7, #8
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f7ff fe27 	bl	8007b08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007eba:	683a      	ldr	r2, [r7, #0]
 8007ebc:	2103      	movs	r1, #3
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 f9ea 	bl	8008298 <SDMMC_GetCmdResp6>
 8007ec4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ec6:	69fb      	ldr	r3, [r7, #28]
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3720      	adds	r7, #32
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b088      	sub	sp, #32
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007ede:	230d      	movs	r3, #13
 8007ee0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007ee2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ee6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007eec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007ef0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007ef2:	f107 0308 	add.w	r3, r7, #8
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f7ff fe05 	bl	8007b08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8007efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f02:	210d      	movs	r1, #13
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 f84b 	bl	8007fa0 <SDMMC_GetCmdResp1>
 8007f0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f0c:	69fb      	ldr	r3, [r7, #28]
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3720      	adds	r7, #32
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}

08007f16 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8007f16:	b580      	push	{r7, lr}
 8007f18:	b088      	sub	sp, #32
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8007f22:	230d      	movs	r3, #13
 8007f24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007f26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007f30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f34:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007f36:	f107 0308 	add.w	r3, r7, #8
 8007f3a:	4619      	mov	r1, r3
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f7ff fde3 	bl	8007b08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8007f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f46:	210d      	movs	r1, #13
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 f829 	bl	8007fa0 <SDMMC_GetCmdResp1>
 8007f4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f50:	69fb      	ldr	r3, [r7, #28]
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3720      	adds	r7, #32
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}

08007f5a <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8007f5a:	b580      	push	{r7, lr}
 8007f5c:	b088      	sub	sp, #32
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8007f62:	2300      	movs	r3, #0
 8007f64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8007f66:	230b      	movs	r3, #11
 8007f68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007f6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007f70:	2300      	movs	r3, #0
 8007f72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007f74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f78:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007f7a:	f107 0308 	add.w	r3, r7, #8
 8007f7e:	4619      	mov	r1, r3
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f7ff fdc1 	bl	8007b08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8007f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f8a:	210b      	movs	r1, #11
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 f807 	bl	8007fa0 <SDMMC_GetCmdResp1>
 8007f92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f94:	69fb      	ldr	r3, [r7, #28]
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3720      	adds	r7, #32
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}
	...

08007fa0 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b088      	sub	sp, #32
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	460b      	mov	r3, r1
 8007faa:	607a      	str	r2, [r7, #4]
 8007fac:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007fae:	4b70      	ldr	r3, [pc, #448]	; (8008170 <SDMMC_GetCmdResp1+0x1d0>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a70      	ldr	r2, [pc, #448]	; (8008174 <SDMMC_GetCmdResp1+0x1d4>)
 8007fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8007fb8:	0a5a      	lsrs	r2, r3, #9
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	fb02 f303 	mul.w	r3, r2, r3
 8007fc0:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8007fc2:	69fb      	ldr	r3, [r7, #28]
 8007fc4:	1e5a      	subs	r2, r3, #1
 8007fc6:	61fa      	str	r2, [r7, #28]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d102      	bne.n	8007fd2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007fcc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007fd0:	e0c9      	b.n	8008166 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fd6:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8007fd8:	69ba      	ldr	r2, [r7, #24]
 8007fda:	4b67      	ldr	r3, [pc, #412]	; (8008178 <SDMMC_GetCmdResp1+0x1d8>)
 8007fdc:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d0ef      	beq.n	8007fc2 <SDMMC_GetCmdResp1+0x22>
 8007fe2:	69bb      	ldr	r3, [r7, #24]
 8007fe4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d1ea      	bne.n	8007fc2 <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ff0:	f003 0304 	and.w	r3, r3, #4
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d004      	beq.n	8008002 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2204      	movs	r2, #4
 8007ffc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007ffe:	2304      	movs	r3, #4
 8008000:	e0b1      	b.n	8008166 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008006:	f003 0301 	and.w	r3, r3, #1
 800800a:	2b00      	cmp	r3, #0
 800800c:	d004      	beq.n	8008018 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2201      	movs	r2, #1
 8008012:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008014:	2301      	movs	r3, #1
 8008016:	e0a6      	b.n	8008166 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	4a58      	ldr	r2, [pc, #352]	; (800817c <SDMMC_GetCmdResp1+0x1dc>)
 800801c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800801e:	68f8      	ldr	r0, [r7, #12]
 8008020:	f7ff fd9c 	bl	8007b5c <SDMMC_GetCommandResponse>
 8008024:	4603      	mov	r3, r0
 8008026:	461a      	mov	r2, r3
 8008028:	7afb      	ldrb	r3, [r7, #11]
 800802a:	4293      	cmp	r3, r2
 800802c:	d001      	beq.n	8008032 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800802e:	2301      	movs	r3, #1
 8008030:	e099      	b.n	8008166 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008032:	2100      	movs	r1, #0
 8008034:	68f8      	ldr	r0, [r7, #12]
 8008036:	f7ff fd9e 	bl	8007b76 <SDMMC_GetResponse>
 800803a:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800803c:	697a      	ldr	r2, [r7, #20]
 800803e:	4b50      	ldr	r3, [pc, #320]	; (8008180 <SDMMC_GetCmdResp1+0x1e0>)
 8008040:	4013      	ands	r3, r2
 8008042:	2b00      	cmp	r3, #0
 8008044:	d101      	bne.n	800804a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008046:	2300      	movs	r3, #0
 8008048:	e08d      	b.n	8008166 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	2b00      	cmp	r3, #0
 800804e:	da02      	bge.n	8008056 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008050:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008054:	e087      	b.n	8008166 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800805c:	2b00      	cmp	r3, #0
 800805e:	d001      	beq.n	8008064 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008060:	2340      	movs	r3, #64	; 0x40
 8008062:	e080      	b.n	8008166 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800806a:	2b00      	cmp	r3, #0
 800806c:	d001      	beq.n	8008072 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800806e:	2380      	movs	r3, #128	; 0x80
 8008070:	e079      	b.n	8008166 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008078:	2b00      	cmp	r3, #0
 800807a:	d002      	beq.n	8008082 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800807c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008080:	e071      	b.n	8008166 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008088:	2b00      	cmp	r3, #0
 800808a:	d002      	beq.n	8008092 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800808c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008090:	e069      	b.n	8008166 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008098:	2b00      	cmp	r3, #0
 800809a:	d002      	beq.n	80080a2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800809c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080a0:	e061      	b.n	8008166 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d002      	beq.n	80080b2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80080ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80080b0:	e059      	b.n	8008166 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d002      	beq.n	80080c2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80080bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080c0:	e051      	b.n	8008166 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d002      	beq.n	80080d2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80080cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80080d0:	e049      	b.n	8008166 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d002      	beq.n	80080e2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80080dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80080e0:	e041      	b.n	8008166 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d002      	beq.n	80080f2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80080ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080f0:	e039      	b.n	8008166 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d002      	beq.n	8008102 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80080fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008100:	e031      	b.n	8008166 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008108:	2b00      	cmp	r3, #0
 800810a:	d002      	beq.n	8008112 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800810c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008110:	e029      	b.n	8008166 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008118:	2b00      	cmp	r3, #0
 800811a:	d002      	beq.n	8008122 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800811c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008120:	e021      	b.n	8008166 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008128:	2b00      	cmp	r3, #0
 800812a:	d002      	beq.n	8008132 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800812c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008130:	e019      	b.n	8008166 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008138:	2b00      	cmp	r3, #0
 800813a:	d002      	beq.n	8008142 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800813c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008140:	e011      	b.n	8008166 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008148:	2b00      	cmp	r3, #0
 800814a:	d002      	beq.n	8008152 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800814c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008150:	e009      	b.n	8008166 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	f003 0308 	and.w	r3, r3, #8
 8008158:	2b00      	cmp	r3, #0
 800815a:	d002      	beq.n	8008162 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800815c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008160:	e001      	b.n	8008166 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008162:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008166:	4618      	mov	r0, r3
 8008168:	3720      	adds	r7, #32
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	20000000 	.word	0x20000000
 8008174:	10624dd3 	.word	0x10624dd3
 8008178:	00200045 	.word	0x00200045
 800817c:	002000c5 	.word	0x002000c5
 8008180:	fdffe008 	.word	0xfdffe008

08008184 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8008184:	b480      	push	{r7}
 8008186:	b085      	sub	sp, #20
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800818c:	4b1f      	ldr	r3, [pc, #124]	; (800820c <SDMMC_GetCmdResp2+0x88>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a1f      	ldr	r2, [pc, #124]	; (8008210 <SDMMC_GetCmdResp2+0x8c>)
 8008192:	fba2 2303 	umull	r2, r3, r2, r3
 8008196:	0a5b      	lsrs	r3, r3, #9
 8008198:	f241 3288 	movw	r2, #5000	; 0x1388
 800819c:	fb02 f303 	mul.w	r3, r2, r3
 80081a0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	1e5a      	subs	r2, r3, #1
 80081a6:	60fa      	str	r2, [r7, #12]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d102      	bne.n	80081b2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80081ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80081b0:	e026      	b.n	8008200 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081b6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d0ef      	beq.n	80081a2 <SDMMC_GetCmdResp2+0x1e>
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d1ea      	bne.n	80081a2 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081d0:	f003 0304 	and.w	r3, r3, #4
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d004      	beq.n	80081e2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2204      	movs	r2, #4
 80081dc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80081de:	2304      	movs	r3, #4
 80081e0:	e00e      	b.n	8008200 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081e6:	f003 0301 	and.w	r3, r3, #1
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d004      	beq.n	80081f8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2201      	movs	r2, #1
 80081f2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80081f4:	2301      	movs	r3, #1
 80081f6:	e003      	b.n	8008200 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	4a06      	ldr	r2, [pc, #24]	; (8008214 <SDMMC_GetCmdResp2+0x90>)
 80081fc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80081fe:	2300      	movs	r3, #0
}
 8008200:	4618      	mov	r0, r3
 8008202:	3714      	adds	r7, #20
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr
 800820c:	20000000 	.word	0x20000000
 8008210:	10624dd3 	.word	0x10624dd3
 8008214:	002000c5 	.word	0x002000c5

08008218 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8008218:	b480      	push	{r7}
 800821a:	b085      	sub	sp, #20
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008220:	4b1a      	ldr	r3, [pc, #104]	; (800828c <SDMMC_GetCmdResp3+0x74>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a1a      	ldr	r2, [pc, #104]	; (8008290 <SDMMC_GetCmdResp3+0x78>)
 8008226:	fba2 2303 	umull	r2, r3, r2, r3
 800822a:	0a5b      	lsrs	r3, r3, #9
 800822c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008230:	fb02 f303 	mul.w	r3, r2, r3
 8008234:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	1e5a      	subs	r2, r3, #1
 800823a:	60fa      	str	r2, [r7, #12]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d102      	bne.n	8008246 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008240:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008244:	e01b      	b.n	800827e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800824a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008252:	2b00      	cmp	r3, #0
 8008254:	d0ef      	beq.n	8008236 <SDMMC_GetCmdResp3+0x1e>
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800825c:	2b00      	cmp	r3, #0
 800825e:	d1ea      	bne.n	8008236 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008264:	f003 0304 	and.w	r3, r3, #4
 8008268:	2b00      	cmp	r3, #0
 800826a:	d004      	beq.n	8008276 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2204      	movs	r2, #4
 8008270:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008272:	2304      	movs	r3, #4
 8008274:	e003      	b.n	800827e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	4a06      	ldr	r2, [pc, #24]	; (8008294 <SDMMC_GetCmdResp3+0x7c>)
 800827a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800827c:	2300      	movs	r3, #0
}
 800827e:	4618      	mov	r0, r3
 8008280:	3714      	adds	r7, #20
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr
 800828a:	bf00      	nop
 800828c:	20000000 	.word	0x20000000
 8008290:	10624dd3 	.word	0x10624dd3
 8008294:	002000c5 	.word	0x002000c5

08008298 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b088      	sub	sp, #32
 800829c:	af00      	add	r7, sp, #0
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	460b      	mov	r3, r1
 80082a2:	607a      	str	r2, [r7, #4]
 80082a4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80082a6:	4b35      	ldr	r3, [pc, #212]	; (800837c <SDMMC_GetCmdResp6+0xe4>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a35      	ldr	r2, [pc, #212]	; (8008380 <SDMMC_GetCmdResp6+0xe8>)
 80082ac:	fba2 2303 	umull	r2, r3, r2, r3
 80082b0:	0a5b      	lsrs	r3, r3, #9
 80082b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80082b6:	fb02 f303 	mul.w	r3, r2, r3
 80082ba:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80082bc:	69fb      	ldr	r3, [r7, #28]
 80082be:	1e5a      	subs	r2, r3, #1
 80082c0:	61fa      	str	r2, [r7, #28]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d102      	bne.n	80082cc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80082c6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80082ca:	e052      	b.n	8008372 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082d0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80082d2:	69bb      	ldr	r3, [r7, #24]
 80082d4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d0ef      	beq.n	80082bc <SDMMC_GetCmdResp6+0x24>
 80082dc:	69bb      	ldr	r3, [r7, #24]
 80082de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d1ea      	bne.n	80082bc <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082ea:	f003 0304 	and.w	r3, r3, #4
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d004      	beq.n	80082fc <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2204      	movs	r2, #4
 80082f6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80082f8:	2304      	movs	r3, #4
 80082fa:	e03a      	b.n	8008372 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008300:	f003 0301 	and.w	r3, r3, #1
 8008304:	2b00      	cmp	r3, #0
 8008306:	d004      	beq.n	8008312 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2201      	movs	r2, #1
 800830c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800830e:	2301      	movs	r3, #1
 8008310:	e02f      	b.n	8008372 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008312:	68f8      	ldr	r0, [r7, #12]
 8008314:	f7ff fc22 	bl	8007b5c <SDMMC_GetCommandResponse>
 8008318:	4603      	mov	r3, r0
 800831a:	461a      	mov	r2, r3
 800831c:	7afb      	ldrb	r3, [r7, #11]
 800831e:	4293      	cmp	r3, r2
 8008320:	d001      	beq.n	8008326 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008322:	2301      	movs	r3, #1
 8008324:	e025      	b.n	8008372 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	4a16      	ldr	r2, [pc, #88]	; (8008384 <SDMMC_GetCmdResp6+0xec>)
 800832a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800832c:	2100      	movs	r1, #0
 800832e:	68f8      	ldr	r0, [r7, #12]
 8008330:	f7ff fc21 	bl	8007b76 <SDMMC_GetResponse>
 8008334:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800833c:	2b00      	cmp	r3, #0
 800833e:	d106      	bne.n	800834e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	0c1b      	lsrs	r3, r3, #16
 8008344:	b29a      	uxth	r2, r3
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800834a:	2300      	movs	r3, #0
 800834c:	e011      	b.n	8008372 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008354:	2b00      	cmp	r3, #0
 8008356:	d002      	beq.n	800835e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008358:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800835c:	e009      	b.n	8008372 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008364:	2b00      	cmp	r3, #0
 8008366:	d002      	beq.n	800836e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008368:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800836c:	e001      	b.n	8008372 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800836e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008372:	4618      	mov	r0, r3
 8008374:	3720      	adds	r7, #32
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	20000000 	.word	0x20000000
 8008380:	10624dd3 	.word	0x10624dd3
 8008384:	002000c5 	.word	0x002000c5

08008388 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8008388:	b480      	push	{r7}
 800838a:	b085      	sub	sp, #20
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008390:	4b22      	ldr	r3, [pc, #136]	; (800841c <SDMMC_GetCmdResp7+0x94>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a22      	ldr	r2, [pc, #136]	; (8008420 <SDMMC_GetCmdResp7+0x98>)
 8008396:	fba2 2303 	umull	r2, r3, r2, r3
 800839a:	0a5b      	lsrs	r3, r3, #9
 800839c:	f241 3288 	movw	r2, #5000	; 0x1388
 80083a0:	fb02 f303 	mul.w	r3, r2, r3
 80083a4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	1e5a      	subs	r2, r3, #1
 80083aa:	60fa      	str	r2, [r7, #12]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d102      	bne.n	80083b6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80083b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80083b4:	e02c      	b.n	8008410 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083ba:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d0ef      	beq.n	80083a6 <SDMMC_GetCmdResp7+0x1e>
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d1ea      	bne.n	80083a6 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083d4:	f003 0304 	and.w	r3, r3, #4
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d004      	beq.n	80083e6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2204      	movs	r2, #4
 80083e0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80083e2:	2304      	movs	r3, #4
 80083e4:	e014      	b.n	8008410 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083ea:	f003 0301 	and.w	r3, r3, #1
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d004      	beq.n	80083fc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2201      	movs	r2, #1
 80083f6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80083f8:	2301      	movs	r3, #1
 80083fa:	e009      	b.n	8008410 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008404:	2b00      	cmp	r3, #0
 8008406:	d002      	beq.n	800840e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2240      	movs	r2, #64	; 0x40
 800840c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800840e:	2300      	movs	r3, #0

}
 8008410:	4618      	mov	r0, r3
 8008412:	3714      	adds	r7, #20
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr
 800841c:	20000000 	.word	0x20000000
 8008420:	10624dd3 	.word	0x10624dd3

08008424 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8008424:	b480      	push	{r7}
 8008426:	b085      	sub	sp, #20
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800842c:	4b11      	ldr	r3, [pc, #68]	; (8008474 <SDMMC_GetCmdError+0x50>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a11      	ldr	r2, [pc, #68]	; (8008478 <SDMMC_GetCmdError+0x54>)
 8008432:	fba2 2303 	umull	r2, r3, r2, r3
 8008436:	0a5b      	lsrs	r3, r3, #9
 8008438:	f241 3288 	movw	r2, #5000	; 0x1388
 800843c:	fb02 f303 	mul.w	r3, r2, r3
 8008440:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	1e5a      	subs	r2, r3, #1
 8008446:	60fa      	str	r2, [r7, #12]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d102      	bne.n	8008452 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800844c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008450:	e009      	b.n	8008466 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800845a:	2b00      	cmp	r3, #0
 800845c:	d0f1      	beq.n	8008442 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	4a06      	ldr	r2, [pc, #24]	; (800847c <SDMMC_GetCmdError+0x58>)
 8008462:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8008464:	2300      	movs	r3, #0
}
 8008466:	4618      	mov	r0, r3
 8008468:	3714      	adds	r7, #20
 800846a:	46bd      	mov	sp, r7
 800846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008470:	4770      	bx	lr
 8008472:	bf00      	nop
 8008474:	20000000 	.word	0x20000000
 8008478:	10624dd3 	.word	0x10624dd3
 800847c:	002000c5 	.word	0x002000c5

08008480 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008480:	b084      	sub	sp, #16
 8008482:	b580      	push	{r7, lr}
 8008484:	b084      	sub	sp, #16
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
 800848a:	f107 001c 	add.w	r0, r7, #28
 800848e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	68db      	ldr	r3, [r3, #12]
 8008496:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 fa66 	bl	8008970 <USB_CoreReset>
 80084a4:	4603      	mov	r3, r0
 80084a6:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80084a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d106      	bne.n	80084bc <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	639a      	str	r2, [r3, #56]	; 0x38
 80084ba:	e005      	b.n	80084c8 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80084c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3710      	adds	r7, #16
 80084ce:	46bd      	mov	sp, r7
 80084d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80084d4:	b004      	add	sp, #16
 80084d6:	4770      	bx	lr

080084d8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80084d8:	b480      	push	{r7}
 80084da:	b083      	sub	sp, #12
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	689b      	ldr	r3, [r3, #8]
 80084e4:	f023 0201 	bic.w	r2, r3, #1
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80084ec:	2300      	movs	r3, #0
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	370c      	adds	r7, #12
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr

080084fa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80084fa:	b580      	push	{r7, lr}
 80084fc:	b084      	sub	sp, #16
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
 8008502:	460b      	mov	r3, r1
 8008504:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008506:	2300      	movs	r3, #0
 8008508:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	68db      	ldr	r3, [r3, #12]
 800850e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008516:	78fb      	ldrb	r3, [r7, #3]
 8008518:	2b01      	cmp	r3, #1
 800851a:	d115      	bne.n	8008548 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	68db      	ldr	r3, [r3, #12]
 8008520:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008528:	2001      	movs	r0, #1
 800852a:	f7f9 fa3f 	bl	80019ac <HAL_Delay>
      ms++;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	3301      	adds	r3, #1
 8008532:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 fa0d 	bl	8008954 <USB_GetMode>
 800853a:	4603      	mov	r3, r0
 800853c:	2b01      	cmp	r3, #1
 800853e:	d01e      	beq.n	800857e <USB_SetCurrentMode+0x84>
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2b31      	cmp	r3, #49	; 0x31
 8008544:	d9f0      	bls.n	8008528 <USB_SetCurrentMode+0x2e>
 8008546:	e01a      	b.n	800857e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008548:	78fb      	ldrb	r3, [r7, #3]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d115      	bne.n	800857a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	68db      	ldr	r3, [r3, #12]
 8008552:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800855a:	2001      	movs	r0, #1
 800855c:	f7f9 fa26 	bl	80019ac <HAL_Delay>
      ms++;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	3301      	adds	r3, #1
 8008564:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 f9f4 	bl	8008954 <USB_GetMode>
 800856c:	4603      	mov	r3, r0
 800856e:	2b00      	cmp	r3, #0
 8008570:	d005      	beq.n	800857e <USB_SetCurrentMode+0x84>
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2b31      	cmp	r3, #49	; 0x31
 8008576:	d9f0      	bls.n	800855a <USB_SetCurrentMode+0x60>
 8008578:	e001      	b.n	800857e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800857a:	2301      	movs	r3, #1
 800857c:	e005      	b.n	800858a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2b32      	cmp	r3, #50	; 0x32
 8008582:	d101      	bne.n	8008588 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008584:	2301      	movs	r3, #1
 8008586:	e000      	b.n	800858a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008588:	2300      	movs	r3, #0
}
 800858a:	4618      	mov	r0, r3
 800858c:	3710      	adds	r7, #16
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
	...

08008594 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008594:	b084      	sub	sp, #16
 8008596:	b580      	push	{r7, lr}
 8008598:	b086      	sub	sp, #24
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
 800859e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80085a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80085a6:	2300      	movs	r3, #0
 80085a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80085ae:	2300      	movs	r3, #0
 80085b0:	613b      	str	r3, [r7, #16]
 80085b2:	e009      	b.n	80085c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	3340      	adds	r3, #64	; 0x40
 80085ba:	009b      	lsls	r3, r3, #2
 80085bc:	4413      	add	r3, r2
 80085be:	2200      	movs	r2, #0
 80085c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	3301      	adds	r3, #1
 80085c6:	613b      	str	r3, [r7, #16]
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	2b0e      	cmp	r3, #14
 80085cc:	d9f2      	bls.n	80085b4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80085ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d11c      	bne.n	800860e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	68fa      	ldr	r2, [r7, #12]
 80085de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085e2:	f043 0302 	orr.w	r3, r3, #2
 80085e6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ec:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	601a      	str	r2, [r3, #0]
 800860c:	e005      	b.n	800861a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008612:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008620:	461a      	mov	r2, r3
 8008622:	2300      	movs	r3, #0
 8008624:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008626:	2103      	movs	r1, #3
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 f959 	bl	80088e0 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800862e:	2110      	movs	r1, #16
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f000 f8f1 	bl	8008818 <USB_FlushTxFifo>
 8008636:	4603      	mov	r3, r0
 8008638:	2b00      	cmp	r3, #0
 800863a:	d001      	beq.n	8008640 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 800863c:	2301      	movs	r3, #1
 800863e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 f91d 	bl	8008880 <USB_FlushRxFifo>
 8008646:	4603      	mov	r3, r0
 8008648:	2b00      	cmp	r3, #0
 800864a:	d001      	beq.n	8008650 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 800864c:	2301      	movs	r3, #1
 800864e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008656:	461a      	mov	r2, r3
 8008658:	2300      	movs	r3, #0
 800865a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008662:	461a      	mov	r2, r3
 8008664:	2300      	movs	r3, #0
 8008666:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800866e:	461a      	mov	r2, r3
 8008670:	2300      	movs	r3, #0
 8008672:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008674:	2300      	movs	r3, #0
 8008676:	613b      	str	r3, [r7, #16]
 8008678:	e043      	b.n	8008702 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	015a      	lsls	r2, r3, #5
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	4413      	add	r3, r2
 8008682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800868c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008690:	d118      	bne.n	80086c4 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d10a      	bne.n	80086ae <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	015a      	lsls	r2, r3, #5
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	4413      	add	r3, r2
 80086a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086a4:	461a      	mov	r2, r3
 80086a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80086aa:	6013      	str	r3, [r2, #0]
 80086ac:	e013      	b.n	80086d6 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	015a      	lsls	r2, r3, #5
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	4413      	add	r3, r2
 80086b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ba:	461a      	mov	r2, r3
 80086bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80086c0:	6013      	str	r3, [r2, #0]
 80086c2:	e008      	b.n	80086d6 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	015a      	lsls	r2, r3, #5
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	4413      	add	r3, r2
 80086cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086d0:	461a      	mov	r2, r3
 80086d2:	2300      	movs	r3, #0
 80086d4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	015a      	lsls	r2, r3, #5
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	4413      	add	r3, r2
 80086de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086e2:	461a      	mov	r2, r3
 80086e4:	2300      	movs	r3, #0
 80086e6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	015a      	lsls	r2, r3, #5
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	4413      	add	r3, r2
 80086f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086f4:	461a      	mov	r2, r3
 80086f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80086fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	3301      	adds	r3, #1
 8008700:	613b      	str	r3, [r7, #16]
 8008702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008704:	693a      	ldr	r2, [r7, #16]
 8008706:	429a      	cmp	r2, r3
 8008708:	d3b7      	bcc.n	800867a <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800870a:	2300      	movs	r3, #0
 800870c:	613b      	str	r3, [r7, #16]
 800870e:	e043      	b.n	8008798 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	015a      	lsls	r2, r3, #5
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	4413      	add	r3, r2
 8008718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008722:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008726:	d118      	bne.n	800875a <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d10a      	bne.n	8008744 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	015a      	lsls	r2, r3, #5
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	4413      	add	r3, r2
 8008736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800873a:	461a      	mov	r2, r3
 800873c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008740:	6013      	str	r3, [r2, #0]
 8008742:	e013      	b.n	800876c <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	015a      	lsls	r2, r3, #5
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	4413      	add	r3, r2
 800874c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008750:	461a      	mov	r2, r3
 8008752:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008756:	6013      	str	r3, [r2, #0]
 8008758:	e008      	b.n	800876c <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	015a      	lsls	r2, r3, #5
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	4413      	add	r3, r2
 8008762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008766:	461a      	mov	r2, r3
 8008768:	2300      	movs	r3, #0
 800876a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	015a      	lsls	r2, r3, #5
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	4413      	add	r3, r2
 8008774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008778:	461a      	mov	r2, r3
 800877a:	2300      	movs	r3, #0
 800877c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	015a      	lsls	r2, r3, #5
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	4413      	add	r3, r2
 8008786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800878a:	461a      	mov	r2, r3
 800878c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008790:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	3301      	adds	r3, #1
 8008796:	613b      	str	r3, [r7, #16]
 8008798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879a:	693a      	ldr	r2, [r7, #16]
 800879c:	429a      	cmp	r2, r3
 800879e:	d3b7      	bcc.n	8008710 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087a6:	691b      	ldr	r3, [r3, #16]
 80087a8:	68fa      	ldr	r2, [r7, #12]
 80087aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087b2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2200      	movs	r2, #0
 80087b8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80087c0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	699b      	ldr	r3, [r3, #24]
 80087c6:	f043 0210 	orr.w	r2, r3, #16
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	699a      	ldr	r2, [r3, #24]
 80087d2:	4b10      	ldr	r3, [pc, #64]	; (8008814 <USB_DevInit+0x280>)
 80087d4:	4313      	orrs	r3, r2
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80087da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d005      	beq.n	80087ec <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	699b      	ldr	r3, [r3, #24]
 80087e4:	f043 0208 	orr.w	r2, r3, #8
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80087ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	d107      	bne.n	8008802 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	699b      	ldr	r3, [r3, #24]
 80087f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80087fa:	f043 0304 	orr.w	r3, r3, #4
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008802:	7dfb      	ldrb	r3, [r7, #23]
}
 8008804:	4618      	mov	r0, r3
 8008806:	3718      	adds	r7, #24
 8008808:	46bd      	mov	sp, r7
 800880a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800880e:	b004      	add	sp, #16
 8008810:	4770      	bx	lr
 8008812:	bf00      	nop
 8008814:	803c3800 	.word	0x803c3800

08008818 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008818:	b480      	push	{r7}
 800881a:	b085      	sub	sp, #20
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008822:	2300      	movs	r3, #0
 8008824:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	3301      	adds	r3, #1
 800882a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	4a13      	ldr	r2, [pc, #76]	; (800887c <USB_FlushTxFifo+0x64>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d901      	bls.n	8008838 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008834:	2303      	movs	r3, #3
 8008836:	e01b      	b.n	8008870 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	691b      	ldr	r3, [r3, #16]
 800883c:	2b00      	cmp	r3, #0
 800883e:	daf2      	bge.n	8008826 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008840:	2300      	movs	r3, #0
 8008842:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	019b      	lsls	r3, r3, #6
 8008848:	f043 0220 	orr.w	r2, r3, #32
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	3301      	adds	r3, #1
 8008854:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	4a08      	ldr	r2, [pc, #32]	; (800887c <USB_FlushTxFifo+0x64>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d901      	bls.n	8008862 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800885e:	2303      	movs	r3, #3
 8008860:	e006      	b.n	8008870 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	691b      	ldr	r3, [r3, #16]
 8008866:	f003 0320 	and.w	r3, r3, #32
 800886a:	2b20      	cmp	r3, #32
 800886c:	d0f0      	beq.n	8008850 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800886e:	2300      	movs	r3, #0
}
 8008870:	4618      	mov	r0, r3
 8008872:	3714      	adds	r7, #20
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr
 800887c:	00030d40 	.word	0x00030d40

08008880 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008880:	b480      	push	{r7}
 8008882:	b085      	sub	sp, #20
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008888:	2300      	movs	r3, #0
 800888a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	3301      	adds	r3, #1
 8008890:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	4a11      	ldr	r2, [pc, #68]	; (80088dc <USB_FlushRxFifo+0x5c>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d901      	bls.n	800889e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800889a:	2303      	movs	r3, #3
 800889c:	e018      	b.n	80088d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	691b      	ldr	r3, [r3, #16]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	daf2      	bge.n	800888c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80088a6:	2300      	movs	r3, #0
 80088a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2210      	movs	r2, #16
 80088ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	3301      	adds	r3, #1
 80088b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	4a08      	ldr	r2, [pc, #32]	; (80088dc <USB_FlushRxFifo+0x5c>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d901      	bls.n	80088c2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80088be:	2303      	movs	r3, #3
 80088c0:	e006      	b.n	80088d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	691b      	ldr	r3, [r3, #16]
 80088c6:	f003 0310 	and.w	r3, r3, #16
 80088ca:	2b10      	cmp	r3, #16
 80088cc:	d0f0      	beq.n	80088b0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80088ce:	2300      	movs	r3, #0
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3714      	adds	r7, #20
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr
 80088dc:	00030d40 	.word	0x00030d40

080088e0 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b085      	sub	sp, #20
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	460b      	mov	r3, r1
 80088ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	78fb      	ldrb	r3, [r7, #3]
 80088fa:	68f9      	ldr	r1, [r7, #12]
 80088fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008900:	4313      	orrs	r3, r2
 8008902:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008904:	2300      	movs	r3, #0
}
 8008906:	4618      	mov	r0, r3
 8008908:	3714      	adds	r7, #20
 800890a:	46bd      	mov	sp, r7
 800890c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008910:	4770      	bx	lr

08008912 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008912:	b480      	push	{r7}
 8008914:	b085      	sub	sp, #20
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	68fa      	ldr	r2, [r7, #12]
 8008928:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800892c:	f023 0303 	bic.w	r3, r3, #3
 8008930:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	68fa      	ldr	r2, [r7, #12]
 800893c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008940:	f043 0302 	orr.w	r3, r3, #2
 8008944:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008946:	2300      	movs	r3, #0
}
 8008948:	4618      	mov	r0, r3
 800894a:	3714      	adds	r7, #20
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr

08008954 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008954:	b480      	push	{r7}
 8008956:	b083      	sub	sp, #12
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	695b      	ldr	r3, [r3, #20]
 8008960:	f003 0301 	and.w	r3, r3, #1
}
 8008964:	4618      	mov	r0, r3
 8008966:	370c      	adds	r7, #12
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008970:	b480      	push	{r7}
 8008972:	b085      	sub	sp, #20
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008978:	2300      	movs	r3, #0
 800897a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	3301      	adds	r3, #1
 8008980:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	4a13      	ldr	r2, [pc, #76]	; (80089d4 <USB_CoreReset+0x64>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d901      	bls.n	800898e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800898a:	2303      	movs	r3, #3
 800898c:	e01b      	b.n	80089c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	691b      	ldr	r3, [r3, #16]
 8008992:	2b00      	cmp	r3, #0
 8008994:	daf2      	bge.n	800897c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008996:	2300      	movs	r3, #0
 8008998:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	691b      	ldr	r3, [r3, #16]
 800899e:	f043 0201 	orr.w	r2, r3, #1
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	3301      	adds	r3, #1
 80089aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	4a09      	ldr	r2, [pc, #36]	; (80089d4 <USB_CoreReset+0x64>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d901      	bls.n	80089b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80089b4:	2303      	movs	r3, #3
 80089b6:	e006      	b.n	80089c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	691b      	ldr	r3, [r3, #16]
 80089bc:	f003 0301 	and.w	r3, r3, #1
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d0f0      	beq.n	80089a6 <USB_CoreReset+0x36>

  return HAL_OK;
 80089c4:	2300      	movs	r3, #0
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3714      	adds	r7, #20
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr
 80089d2:	bf00      	nop
 80089d4:	00030d40 	.word	0x00030d40

080089d8 <ai_log_err>:

static ai_buffer* ai_input;
static ai_buffer* ai_output;

static void ai_log_err(const ai_error err, const char *fct)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d009      	beq.n	80089fc <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 80089e8:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80089ea:	461a      	mov	r2, r3
        err.type, err.code);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80089f2:	6839      	ldr	r1, [r7, #0]
 80089f4:	4806      	ldr	r0, [pc, #24]	; (8008a10 <ai_log_err+0x38>)
 80089f6:	f002 fcf9 	bl	800b3ec <iprintf>
 80089fa:	e008      	b.n	8008a0e <ai_log_err+0x36>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 80089fc:	793b      	ldrb	r3, [r7, #4]
 80089fe:	4619      	mov	r1, r3
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8008a06:	461a      	mov	r2, r3
 8008a08:	4802      	ldr	r0, [pc, #8]	; (8008a14 <ai_log_err+0x3c>)
 8008a0a:	f002 fcef 	bl	800b3ec <iprintf>

  do {} while (1);
 8008a0e:	e7fe      	b.n	8008a0e <ai_log_err+0x36>
 8008a10:	0800c800 	.word	0x0800c800
 8008a14:	0800c834 	.word	0x0800c834

08008a18 <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle *act_addr)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b086      	sub	sp, #24
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* Create and initialize an instance of the model */
  err = ai_wine_quality_create_and_init(&wine_quality, act_addr, NULL);
 8008a20:	2200      	movs	r2, #0
 8008a22:	6879      	ldr	r1, [r7, #4]
 8008a24:	4828      	ldr	r0, [pc, #160]	; (8008ac8 <ai_boostrap+0xb0>)
 8008a26:	f000 faef 	bl	8009008 <ai_wine_quality_create_and_init>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 8008a2e:	7b3b      	ldrb	r3, [r7, #12]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d006      	beq.n	8008a42 <ai_boostrap+0x2a>
    ai_log_err(err, "ai_wine_quality_create_and_init");
 8008a34:	4925      	ldr	r1, [pc, #148]	; (8008acc <ai_boostrap+0xb4>)
 8008a36:	68f8      	ldr	r0, [r7, #12]
 8008a38:	f7ff ffce 	bl	80089d8 <ai_log_err>
    return -1;
 8008a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8008a40:	e03e      	b.n	8008ac0 <ai_boostrap+0xa8>
  }

  ai_input = ai_wine_quality_inputs_get(wine_quality, NULL);
 8008a42:	4b21      	ldr	r3, [pc, #132]	; (8008ac8 <ai_boostrap+0xb0>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	2100      	movs	r1, #0
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f000 fb51 	bl	80090f0 <ai_wine_quality_inputs_get>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	4a1f      	ldr	r2, [pc, #124]	; (8008ad0 <ai_boostrap+0xb8>)
 8008a52:	6013      	str	r3, [r2, #0]
  ai_output = ai_wine_quality_outputs_get(wine_quality, NULL);
 8008a54:	4b1c      	ldr	r3, [pc, #112]	; (8008ac8 <ai_boostrap+0xb0>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	2100      	movs	r1, #0
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f000 fb62 	bl	8009124 <ai_wine_quality_outputs_get>
 8008a60:	4603      	mov	r3, r0
 8008a62:	4a1c      	ldr	r2, [pc, #112]	; (8008ad4 <ai_boostrap+0xbc>)
 8008a64:	6013      	str	r3, [r2, #0]

#if defined(AI_WINE_QUALITY_INPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-inputs" option is used, memory buffer can be
   *  used from the activations buffer. This is not mandatory.
   */
  for (int idx=0; idx < AI_WINE_QUALITY_IN_NUM; idx++) {
 8008a66:	2300      	movs	r3, #0
 8008a68:	617b      	str	r3, [r7, #20]
 8008a6a:	e00f      	b.n	8008a8c <ai_boostrap+0x74>
	data_ins[idx] = ai_input[idx].data;
 8008a6c:	4b18      	ldr	r3, [pc, #96]	; (8008ad0 <ai_boostrap+0xb8>)
 8008a6e:	6819      	ldr	r1, [r3, #0]
 8008a70:	697a      	ldr	r2, [r7, #20]
 8008a72:	4613      	mov	r3, r2
 8008a74:	00db      	lsls	r3, r3, #3
 8008a76:	1a9b      	subs	r3, r3, r2
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	440b      	add	r3, r1
 8008a7c:	685a      	ldr	r2, [r3, #4]
 8008a7e:	4916      	ldr	r1, [pc, #88]	; (8008ad8 <ai_boostrap+0xc0>)
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_WINE_QUALITY_IN_NUM; idx++) {
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	3301      	adds	r3, #1
 8008a8a:	617b      	str	r3, [r7, #20]
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	ddec      	ble.n	8008a6c <ai_boostrap+0x54>

#if defined(AI_WINE_QUALITY_OUTPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-outputs" option is used, memory buffer can be
   *  used from the activations buffer. This is no mandatory.
   */
  for (int idx=0; idx < AI_WINE_QUALITY_OUT_NUM; idx++) {
 8008a92:	2300      	movs	r3, #0
 8008a94:	613b      	str	r3, [r7, #16]
 8008a96:	e00f      	b.n	8008ab8 <ai_boostrap+0xa0>
	data_outs[idx] = ai_output[idx].data;
 8008a98:	4b0e      	ldr	r3, [pc, #56]	; (8008ad4 <ai_boostrap+0xbc>)
 8008a9a:	6819      	ldr	r1, [r3, #0]
 8008a9c:	693a      	ldr	r2, [r7, #16]
 8008a9e:	4613      	mov	r3, r2
 8008aa0:	00db      	lsls	r3, r3, #3
 8008aa2:	1a9b      	subs	r3, r3, r2
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	440b      	add	r3, r1
 8008aa8:	685a      	ldr	r2, [r3, #4]
 8008aaa:	490c      	ldr	r1, [pc, #48]	; (8008adc <ai_boostrap+0xc4>)
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_WINE_QUALITY_OUT_NUM; idx++) {
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	3301      	adds	r3, #1
 8008ab6:	613b      	str	r3, [r7, #16]
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	ddec      	ble.n	8008a98 <ai_boostrap+0x80>
  for (int idx=0; idx < AI_WINE_QUALITY_OUT_NUM; idx++) {
	ai_output[idx].data = data_outs[idx];
  }
#endif

  return 0;
 8008abe:	2300      	movs	r3, #0
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3718      	adds	r7, #24
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}
 8008ac8:	200014b8 	.word	0x200014b8
 8008acc:	0800c864 	.word	0x0800c864
 8008ad0:	200014bc 	.word	0x200014bc
 8008ad4:	200014c0 	.word	0x200014c0
 8008ad8:	20001240 	.word	0x20001240
 8008adc:	20001244 	.word	0x20001244

08008ae0 <ai_run>:

static int ai_run(void)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
  ai_i32 batch;

  batch = ai_wine_quality_run(wine_quality, ai_input, ai_output);
 8008ae6:	4b0f      	ldr	r3, [pc, #60]	; (8008b24 <ai_run+0x44>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a0f      	ldr	r2, [pc, #60]	; (8008b28 <ai_run+0x48>)
 8008aec:	6811      	ldr	r1, [r2, #0]
 8008aee:	4a0f      	ldr	r2, [pc, #60]	; (8008b2c <ai_run+0x4c>)
 8008af0:	6812      	ldr	r2, [r2, #0]
 8008af2:	4618      	mov	r0, r3
 8008af4:	f000 fb6c 	bl	80091d0 <ai_wine_quality_run>
 8008af8:	6078      	str	r0, [r7, #4]
  if (batch != 1) {
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d00c      	beq.n	8008b1a <ai_run+0x3a>
    ai_log_err(ai_wine_quality_get_error(wine_quality),
 8008b00:	4b08      	ldr	r3, [pc, #32]	; (8008b24 <ai_run+0x44>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4618      	mov	r0, r3
 8008b06:	f000 fa5d 	bl	8008fc4 <ai_wine_quality_get_error>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	4908      	ldr	r1, [pc, #32]	; (8008b30 <ai_run+0x50>)
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7ff ff62 	bl	80089d8 <ai_log_err>
        "ai_wine_quality_run");
    return -1;
 8008b14:	f04f 33ff 	mov.w	r3, #4294967295
 8008b18:	e000      	b.n	8008b1c <ai_run+0x3c>
  }

  return 0;
 8008b1a:	2300      	movs	r3, #0
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3708      	adds	r7, #8
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}
 8008b24:	200014b8 	.word	0x200014b8
 8008b28:	200014bc 	.word	0x200014bc
 8008b2c:	200014c0 	.word	0x200014c0
 8008b30:	0800c884 	.word	0x0800c884

08008b34 <acquire_and_process_data>:

/* USER CODE BEGIN 2 */
int acquire_and_process_data(ai_i8* data[])
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b086      	sub	sp, #24
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 /* fill the inputs of the c-model */
	uint8_t tmp[4] = {0};
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	60fb      	str	r3, [r7, #12]
	#if _DEBUG
	float input[8] = {0};
	#endif

	  int i,k;
	  for (i = 0; i < 8; i++){
 8008b40:	2300      	movs	r3, #0
 8008b42:	617b      	str	r3, [r7, #20]
 8008b44:	e01f      	b.n	8008b86 <acquire_and_process_data+0x52>
		  HAL_UART_Receive(&huart2, (uint8_t *) tmp, sizeof(tmp), 100);
 8008b46:	f107 010c 	add.w	r1, r7, #12
 8008b4a:	2364      	movs	r3, #100	; 0x64
 8008b4c:	2204      	movs	r2, #4
 8008b4e:	4812      	ldr	r0, [pc, #72]	; (8008b98 <acquire_and_process_data+0x64>)
 8008b50:	f7fd ff7b 	bl	8006a4a <HAL_UART_Receive>

	#if _DEBUG
	input[i] = *(float*) &tmp;
	#endif
		  for ( k = 0; k < 4; k++){
 8008b54:	2300      	movs	r3, #0
 8008b56:	613b      	str	r3, [r7, #16]
 8008b58:	e00f      	b.n	8008b7a <acquire_and_process_data+0x46>
			((uint8_t *) data)[((i*8)*4)+k] = tmp[k];
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	015a      	lsls	r2, r3, #5
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	4413      	add	r3, r2
 8008b62:	461a      	mov	r2, r3
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	4413      	add	r3, r2
 8008b68:	f107 010c 	add.w	r1, r7, #12
 8008b6c:	693a      	ldr	r2, [r7, #16]
 8008b6e:	440a      	add	r2, r1
 8008b70:	7812      	ldrb	r2, [r2, #0]
 8008b72:	701a      	strb	r2, [r3, #0]
		  for ( k = 0; k < 4; k++){
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	3301      	adds	r3, #1
 8008b78:	613b      	str	r3, [r7, #16]
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	2b03      	cmp	r3, #3
 8008b7e:	ddec      	ble.n	8008b5a <acquire_and_process_data+0x26>
	  for (i = 0; i < 8; i++){
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	3301      	adds	r3, #1
 8008b84:	617b      	str	r3, [r7, #20]
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	2b07      	cmp	r3, #7
 8008b8a:	dddc      	ble.n	8008b46 <acquire_and_process_data+0x12>
		HAL_UART_Transmit(&huart2, (uint8_t *) tmp, sizeof(tmp), 100);
	}

	#endif

	  return 0;
 8008b8c:	2300      	movs	r3, #0
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3718      	adds	r7, #24
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
 8008b96:	bf00      	nop
 8008b98:	20000bac 	.word	0x20000bac

08008b9c <post_process>:

int post_process(ai_i8* data[])
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b088      	sub	sp, #32
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
/* process the predictions */
	  unsigned char output_to_be_tx[3] = "101";
 8008ba4:	4a1f      	ldr	r2, [pc, #124]	; (8008c24 <post_process+0x88>)
 8008ba6:	f107 0310 	add.w	r3, r7, #16
 8008baa:	6812      	ldr	r2, [r2, #0]
 8008bac:	4611      	mov	r1, r2
 8008bae:	8019      	strh	r1, [r3, #0]
 8008bb0:	3302      	adds	r3, #2
 8008bb2:	0c12      	lsrs	r2, r2, #16
 8008bb4:	701a      	strb	r2, [r3, #0]
	  uint8_t *output = data; // don't care about the signed value of ai_i8...
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	617b      	str	r3, [r7, #20]
	  }
	  prob_classes[i] = *(float*) &tmp;
	}
	#endif

	  HAL_UART_Transmit(&huart2, (uint8_t *) output_to_be_tx, sizeof(output_to_be_tx),100);
 8008bba:	f107 0110 	add.w	r1, r7, #16
 8008bbe:	2364      	movs	r3, #100	; 0x64
 8008bc0:	2203      	movs	r2, #3
 8008bc2:	4819      	ldr	r0, [pc, #100]	; (8008c28 <post_process+0x8c>)
 8008bc4:	f7fd feb2 	bl	800692c <HAL_UART_Transmit>

	  for(i = 0; i < 7; i++){
 8008bc8:	2300      	movs	r3, #0
 8008bca:	61fb      	str	r3, [r7, #28]
 8008bcc:	e022      	b.n	8008c14 <post_process+0x78>
		uint8_t tmp[4] = {0};
 8008bce:	2300      	movs	r3, #0
 8008bd0:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < 4; j++){
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	61bb      	str	r3, [r7, #24]
 8008bd6:	e010      	b.n	8008bfa <post_process+0x5e>
		  tmp[j] = output[i*4+j];
 8008bd8:	69fb      	ldr	r3, [r7, #28]
 8008bda:	009a      	lsls	r2, r3, #2
 8008bdc:	69bb      	ldr	r3, [r7, #24]
 8008bde:	4413      	add	r3, r2
 8008be0:	461a      	mov	r2, r3
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	4413      	add	r3, r2
 8008be6:	7819      	ldrb	r1, [r3, #0]
 8008be8:	f107 020c 	add.w	r2, r7, #12
 8008bec:	69bb      	ldr	r3, [r7, #24]
 8008bee:	4413      	add	r3, r2
 8008bf0:	460a      	mov	r2, r1
 8008bf2:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < 4; j++){
 8008bf4:	69bb      	ldr	r3, [r7, #24]
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	61bb      	str	r3, [r7, #24]
 8008bfa:	69bb      	ldr	r3, [r7, #24]
 8008bfc:	2b03      	cmp	r3, #3
 8008bfe:	ddeb      	ble.n	8008bd8 <post_process+0x3c>
		}
		HAL_UART_Transmit(&huart2, (uint8_t *) tmp, sizeof(tmp), 100);
 8008c00:	f107 010c 	add.w	r1, r7, #12
 8008c04:	2364      	movs	r3, #100	; 0x64
 8008c06:	2204      	movs	r2, #4
 8008c08:	4807      	ldr	r0, [pc, #28]	; (8008c28 <post_process+0x8c>)
 8008c0a:	f7fd fe8f 	bl	800692c <HAL_UART_Transmit>
	  for(i = 0; i < 7; i++){
 8008c0e:	69fb      	ldr	r3, [r7, #28]
 8008c10:	3301      	adds	r3, #1
 8008c12:	61fb      	str	r3, [r7, #28]
 8008c14:	69fb      	ldr	r3, [r7, #28]
 8008c16:	2b06      	cmp	r3, #6
 8008c18:	ddd9      	ble.n	8008bce <post_process+0x32>
	  }
	  return 0;
 8008c1a:	2300      	movs	r3, #0
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3720      	adds	r7, #32
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}
 8008c24:	0800c898 	.word	0x0800c898
 8008c28:	20000bac 	.word	0x20000bac

08008c2c <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 8008c30:	4803      	ldr	r0, [pc, #12]	; (8008c40 <MX_X_CUBE_AI_Init+0x14>)
 8008c32:	f002 fc61 	bl	800b4f8 <puts>

  ai_boostrap(data_activations0);
 8008c36:	4803      	ldr	r0, [pc, #12]	; (8008c44 <MX_X_CUBE_AI_Init+0x18>)
 8008c38:	f7ff feee 	bl	8008a18 <ai_boostrap>
    /* USER CODE END 5 */
}
 8008c3c:	bf00      	nop
 8008c3e:	bd80      	pop	{r7, pc}
 8008c40:	0800c89c 	.word	0x0800c89c
 8008c44:	2000000c 	.word	0x2000000c

08008c48 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b088      	sub	sp, #32
 8008c4c:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 6 */
  int res = -1;
 8008c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8008c52:	61fb      	str	r3, [r7, #28]
  uint8_t *in_data = NULL;
 8008c54:	2300      	movs	r3, #0
 8008c56:	617b      	str	r3, [r7, #20]
  uint8_t *out_data = NULL;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	613b      	str	r3, [r7, #16]
  printf("TEMPLATE - run - main loop\r\n");
 8008c5c:	4832      	ldr	r0, [pc, #200]	; (8008d28 <MX_X_CUBE_AI_Process+0xe0>)
 8008c5e:	f002 fc4b 	bl	800b4f8 <puts>

  if (wine_quality) {
 8008c62:	4b32      	ldr	r3, [pc, #200]	; (8008d2c <MX_X_CUBE_AI_Process+0xe4>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d04b      	beq.n	8008d02 <MX_X_CUBE_AI_Process+0xba>
	  out_data = ai_output[0].data;

	#endif

	  /* TO MODIFY -> 0 - Synchronisation with Python Script */
	unsigned char ack[4] = "0000";
 8008c6a:	f04f 3330 	mov.w	r3, #808464432	; 0x30303030
 8008c6e:	60fb      	str	r3, [r7, #12]
	unsigned char return_ack[3] = "111";
 8008c70:	4a2f      	ldr	r2, [pc, #188]	; (8008d30 <MX_X_CUBE_AI_Process+0xe8>)
 8008c72:	f107 0308 	add.w	r3, r7, #8
 8008c76:	6812      	ldr	r2, [r2, #0]
 8008c78:	4611      	mov	r1, r2
 8008c7a:	8019      	strh	r1, [r3, #0]
 8008c7c:	3302      	adds	r3, #2
 8008c7e:	0c12      	lsrs	r2, r2, #16
 8008c80:	701a      	strb	r2, [r3, #0]
	uint8_t sync = 0;
 8008c82:	2300      	movs	r3, #0
 8008c84:	76fb      	strb	r3, [r7, #27]
	uint8_t ack_received = 0;
 8008c86:	2300      	movs	r3, #0
 8008c88:	76bb      	strb	r3, [r7, #26]

// Synchronisation loop
	while(sync == 0){
 8008c8a:	e020      	b.n	8008cce <MX_X_CUBE_AI_Process+0x86>
	  while(ack_received != 1){
		  HAL_UART_Receive(&huart2, (uint8_t *) ack, sizeof(ack), 100);
 8008c8c:	f107 010c 	add.w	r1, r7, #12
 8008c90:	2364      	movs	r3, #100	; 0x64
 8008c92:	2204      	movs	r2, #4
 8008c94:	4827      	ldr	r0, [pc, #156]	; (8008d34 <MX_X_CUBE_AI_Process+0xec>)
 8008c96:	f7fd fed8 	bl	8006a4a <HAL_UART_Receive>
		  if ((ack[0] == 's') && (ack[1] == 'y') && (ack[2] == 'n') && (ack[3] == 'c')){
 8008c9a:	7b3b      	ldrb	r3, [r7, #12]
 8008c9c:	2b73      	cmp	r3, #115	; 0x73
 8008c9e:	d10a      	bne.n	8008cb6 <MX_X_CUBE_AI_Process+0x6e>
 8008ca0:	7b7b      	ldrb	r3, [r7, #13]
 8008ca2:	2b79      	cmp	r3, #121	; 0x79
 8008ca4:	d107      	bne.n	8008cb6 <MX_X_CUBE_AI_Process+0x6e>
 8008ca6:	7bbb      	ldrb	r3, [r7, #14]
 8008ca8:	2b6e      	cmp	r3, #110	; 0x6e
 8008caa:	d104      	bne.n	8008cb6 <MX_X_CUBE_AI_Process+0x6e>
 8008cac:	7bfb      	ldrb	r3, [r7, #15]
 8008cae:	2b63      	cmp	r3, #99	; 0x63
 8008cb0:	d101      	bne.n	8008cb6 <MX_X_CUBE_AI_Process+0x6e>
			  ack_received = 1;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	76bb      	strb	r3, [r7, #26]
		  }
		  HAL_UART_Transmit(&huart2, (uint8_t *) return_ack, sizeof(return_ack), 100);
 8008cb6:	f107 0108 	add.w	r1, r7, #8
 8008cba:	2364      	movs	r3, #100	; 0x64
 8008cbc:	2203      	movs	r2, #3
 8008cbe:	481d      	ldr	r0, [pc, #116]	; (8008d34 <MX_X_CUBE_AI_Process+0xec>)
 8008cc0:	f7fd fe34 	bl	800692c <HAL_UART_Transmit>
		  sync = 1;
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	76fb      	strb	r3, [r7, #27]
	  while(ack_received != 1){
 8008cc8:	7ebb      	ldrb	r3, [r7, #26]
 8008cca:	2b01      	cmp	r3, #1
 8008ccc:	d1de      	bne.n	8008c8c <MX_X_CUBE_AI_Process+0x44>
	while(sync == 0){
 8008cce:	7efb      	ldrb	r3, [r7, #27]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d0f9      	beq.n	8008cc8 <MX_X_CUBE_AI_Process+0x80>
	  }
	}

	data_ins[0] = 0x7;
 8008cd4:	4b18      	ldr	r3, [pc, #96]	; (8008d38 <MX_X_CUBE_AI_Process+0xf0>)
 8008cd6:	2207      	movs	r2, #7
 8008cd8:	601a      	str	r2, [r3, #0]

    do {
      /* 1 - acquire and pre-process input data */
      res = acquire_and_process_data(data_ins);
 8008cda:	4817      	ldr	r0, [pc, #92]	; (8008d38 <MX_X_CUBE_AI_Process+0xf0>)
 8008cdc:	f7ff ff2a 	bl	8008b34 <acquire_and_process_data>
 8008ce0:	61f8      	str	r0, [r7, #28]
      /* 2 - process the data - call inference engine */
      if (res == 0)
 8008ce2:	69fb      	ldr	r3, [r7, #28]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d102      	bne.n	8008cee <MX_X_CUBE_AI_Process+0xa6>
        res = ai_run();
 8008ce8:	f7ff fefa 	bl	8008ae0 <ai_run>
 8008cec:	61f8      	str	r0, [r7, #28]
      /* 3- post-process the predictions */
      if (res == 0)
 8008cee:	69fb      	ldr	r3, [r7, #28]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d103      	bne.n	8008cfc <MX_X_CUBE_AI_Process+0xb4>
        res = post_process(data_outs);
 8008cf4:	4811      	ldr	r0, [pc, #68]	; (8008d3c <MX_X_CUBE_AI_Process+0xf4>)
 8008cf6:	f7ff ff51 	bl	8008b9c <post_process>
 8008cfa:	61f8      	str	r0, [r7, #28]
    } while (res==0);
 8008cfc:	69fb      	ldr	r3, [r7, #28]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d0eb      	beq.n	8008cda <MX_X_CUBE_AI_Process+0x92>
  }

  if (res) {
 8008d02:	69fb      	ldr	r3, [r7, #28]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d00a      	beq.n	8008d1e <MX_X_CUBE_AI_Process+0xd6>
    ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
 8008d08:	2311      	movs	r3, #17
 8008d0a:	713b      	strb	r3, [r7, #4]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2210      	movs	r2, #16
 8008d10:	f362 231f 	bfi	r3, r2, #8, #24
 8008d14:	607b      	str	r3, [r7, #4]
    ai_log_err(err, "Process has FAILED");
 8008d16:	490a      	ldr	r1, [pc, #40]	; (8008d40 <MX_X_CUBE_AI_Process+0xf8>)
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f7ff fe5d 	bl	80089d8 <ai_log_err>
  }
    /* USER CODE END 6 */
}
 8008d1e:	bf00      	nop
 8008d20:	3720      	adds	r7, #32
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
 8008d26:	bf00      	nop
 8008d28:	0800c8bc 	.word	0x0800c8bc
 8008d2c:	200014b8 	.word	0x200014b8
 8008d30:	0800c8ec 	.word	0x0800c8ec
 8008d34:	20000bac 	.word	0x20000bac
 8008d38:	20001240 	.word	0x20001240
 8008d3c:	20001244 	.word	0x20001244
 8008d40:	0800c8d8 	.word	0x0800c8d8

08008d44 <wine_quality_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool wine_quality_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b082      	sub	sp, #8
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_wine_quality_activations_map, 1, params)) {
 8008d4e:	683a      	ldr	r2, [r7, #0]
 8008d50:	2101      	movs	r1, #1
 8008d52:	4833      	ldr	r0, [pc, #204]	; (8008e20 <wine_quality_configure_activations+0xdc>)
 8008d54:	f000 fb1a 	bl	800938c <ai_platform_get_activations_map>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d055      	beq.n	8008e0a <wine_quality_configure_activations+0xc6>
    /* Updating activations (byte) offsets */
    
    input_0_output_array.data = AI_PTR(g_wine_quality_activations_map[0] + 152);
 8008d5e:	4b30      	ldr	r3, [pc, #192]	; (8008e20 <wine_quality_configure_activations+0xdc>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	3398      	adds	r3, #152	; 0x98
 8008d64:	4a2f      	ldr	r2, [pc, #188]	; (8008e24 <wine_quality_configure_activations+0xe0>)
 8008d66:	6093      	str	r3, [r2, #8]
    input_0_output_array.data_start = AI_PTR(g_wine_quality_activations_map[0] + 152);
 8008d68:	4b2d      	ldr	r3, [pc, #180]	; (8008e20 <wine_quality_configure_activations+0xdc>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	3398      	adds	r3, #152	; 0x98
 8008d6e:	4a2d      	ldr	r2, [pc, #180]	; (8008e24 <wine_quality_configure_activations+0xe0>)
 8008d70:	60d3      	str	r3, [r2, #12]
    
    dense_4_dense_output_array.data = AI_PTR(g_wine_quality_activations_map[0] + 200);
 8008d72:	4b2b      	ldr	r3, [pc, #172]	; (8008e20 <wine_quality_configure_activations+0xdc>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	33c8      	adds	r3, #200	; 0xc8
 8008d78:	4a2b      	ldr	r2, [pc, #172]	; (8008e28 <wine_quality_configure_activations+0xe4>)
 8008d7a:	6093      	str	r3, [r2, #8]
    dense_4_dense_output_array.data_start = AI_PTR(g_wine_quality_activations_map[0] + 200);
 8008d7c:	4b28      	ldr	r3, [pc, #160]	; (8008e20 <wine_quality_configure_activations+0xdc>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	33c8      	adds	r3, #200	; 0xc8
 8008d82:	4a29      	ldr	r2, [pc, #164]	; (8008e28 <wine_quality_configure_activations+0xe4>)
 8008d84:	60d3      	str	r3, [r2, #12]
    
    dense_4_output_array.data = AI_PTR(g_wine_quality_activations_map[0] + 200);
 8008d86:	4b26      	ldr	r3, [pc, #152]	; (8008e20 <wine_quality_configure_activations+0xdc>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	33c8      	adds	r3, #200	; 0xc8
 8008d8c:	4a27      	ldr	r2, [pc, #156]	; (8008e2c <wine_quality_configure_activations+0xe8>)
 8008d8e:	6093      	str	r3, [r2, #8]
    dense_4_output_array.data_start = AI_PTR(g_wine_quality_activations_map[0] + 200);
 8008d90:	4b23      	ldr	r3, [pc, #140]	; (8008e20 <wine_quality_configure_activations+0xdc>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	33c8      	adds	r3, #200	; 0xc8
 8008d96:	4a25      	ldr	r2, [pc, #148]	; (8008e2c <wine_quality_configure_activations+0xe8>)
 8008d98:	60d3      	str	r3, [r2, #12]
    
    dense_5_dense_output_array.data = AI_PTR(g_wine_quality_activations_map[0] + 0);
 8008d9a:	4b21      	ldr	r3, [pc, #132]	; (8008e20 <wine_quality_configure_activations+0xdc>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a24      	ldr	r2, [pc, #144]	; (8008e30 <wine_quality_configure_activations+0xec>)
 8008da0:	6093      	str	r3, [r2, #8]
    dense_5_dense_output_array.data_start = AI_PTR(g_wine_quality_activations_map[0] + 0);
 8008da2:	4b1f      	ldr	r3, [pc, #124]	; (8008e20 <wine_quality_configure_activations+0xdc>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a22      	ldr	r2, [pc, #136]	; (8008e30 <wine_quality_configure_activations+0xec>)
 8008da8:	60d3      	str	r3, [r2, #12]
    
    dense_5_output_array.data = AI_PTR(g_wine_quality_activations_map[0] + 200);
 8008daa:	4b1d      	ldr	r3, [pc, #116]	; (8008e20 <wine_quality_configure_activations+0xdc>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	33c8      	adds	r3, #200	; 0xc8
 8008db0:	4a20      	ldr	r2, [pc, #128]	; (8008e34 <wine_quality_configure_activations+0xf0>)
 8008db2:	6093      	str	r3, [r2, #8]
    dense_5_output_array.data_start = AI_PTR(g_wine_quality_activations_map[0] + 200);
 8008db4:	4b1a      	ldr	r3, [pc, #104]	; (8008e20 <wine_quality_configure_activations+0xdc>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	33c8      	adds	r3, #200	; 0xc8
 8008dba:	4a1e      	ldr	r2, [pc, #120]	; (8008e34 <wine_quality_configure_activations+0xf0>)
 8008dbc:	60d3      	str	r3, [r2, #12]
    
    dense_6_dense_output_array.data = AI_PTR(g_wine_quality_activations_map[0] + 0);
 8008dbe:	4b18      	ldr	r3, [pc, #96]	; (8008e20 <wine_quality_configure_activations+0xdc>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4a1d      	ldr	r2, [pc, #116]	; (8008e38 <wine_quality_configure_activations+0xf4>)
 8008dc4:	6093      	str	r3, [r2, #8]
    dense_6_dense_output_array.data_start = AI_PTR(g_wine_quality_activations_map[0] + 0);
 8008dc6:	4b16      	ldr	r3, [pc, #88]	; (8008e20 <wine_quality_configure_activations+0xdc>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4a1b      	ldr	r2, [pc, #108]	; (8008e38 <wine_quality_configure_activations+0xf4>)
 8008dcc:	60d3      	str	r3, [r2, #12]
    
    dense_6_output_array.data = AI_PTR(g_wine_quality_activations_map[0] + 100);
 8008dce:	4b14      	ldr	r3, [pc, #80]	; (8008e20 <wine_quality_configure_activations+0xdc>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	3364      	adds	r3, #100	; 0x64
 8008dd4:	4a19      	ldr	r2, [pc, #100]	; (8008e3c <wine_quality_configure_activations+0xf8>)
 8008dd6:	6093      	str	r3, [r2, #8]
    dense_6_output_array.data_start = AI_PTR(g_wine_quality_activations_map[0] + 100);
 8008dd8:	4b11      	ldr	r3, [pc, #68]	; (8008e20 <wine_quality_configure_activations+0xdc>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	3364      	adds	r3, #100	; 0x64
 8008dde:	4a17      	ldr	r2, [pc, #92]	; (8008e3c <wine_quality_configure_activations+0xf8>)
 8008de0:	60d3      	str	r3, [r2, #12]
    
    dense_7_dense_output_array.data = AI_PTR(g_wine_quality_activations_map[0] + 0);
 8008de2:	4b0f      	ldr	r3, [pc, #60]	; (8008e20 <wine_quality_configure_activations+0xdc>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a16      	ldr	r2, [pc, #88]	; (8008e40 <wine_quality_configure_activations+0xfc>)
 8008de8:	6093      	str	r3, [r2, #8]
    dense_7_dense_output_array.data_start = AI_PTR(g_wine_quality_activations_map[0] + 0);
 8008dea:	4b0d      	ldr	r3, [pc, #52]	; (8008e20 <wine_quality_configure_activations+0xdc>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4a14      	ldr	r2, [pc, #80]	; (8008e40 <wine_quality_configure_activations+0xfc>)
 8008df0:	60d3      	str	r3, [r2, #12]
    
    dense_7_output_array.data = AI_PTR(g_wine_quality_activations_map[0] + 28);
 8008df2:	4b0b      	ldr	r3, [pc, #44]	; (8008e20 <wine_quality_configure_activations+0xdc>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	331c      	adds	r3, #28
 8008df8:	4a12      	ldr	r2, [pc, #72]	; (8008e44 <wine_quality_configure_activations+0x100>)
 8008dfa:	6093      	str	r3, [r2, #8]
    dense_7_output_array.data_start = AI_PTR(g_wine_quality_activations_map[0] + 28);
 8008dfc:	4b08      	ldr	r3, [pc, #32]	; (8008e20 <wine_quality_configure_activations+0xdc>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	331c      	adds	r3, #28
 8008e02:	4a10      	ldr	r2, [pc, #64]	; (8008e44 <wine_quality_configure_activations+0x100>)
 8008e04:	60d3      	str	r3, [r2, #12]
    
    return true;
 8008e06:	2301      	movs	r3, #1
 8008e08:	e005      	b.n	8008e16 <wine_quality_configure_activations+0xd2>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8008e0a:	2213      	movs	r2, #19
 8008e0c:	2130      	movs	r1, #48	; 0x30
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 fba0 	bl	8009554 <ai_platform_network_set_error>
  return false;
 8008e14:	2300      	movs	r3, #0
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3708      	adds	r7, #8
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}
 8008e1e:	bf00      	nop
 8008e20:	200014c4 	.word	0x200014c4
 8008e24:	20000010 	.word	0x20000010
 8008e28:	20000030 	.word	0x20000030
 8008e2c:	20000040 	.word	0x20000040
 8008e30:	20000060 	.word	0x20000060
 8008e34:	20000080 	.word	0x20000080
 8008e38:	20000090 	.word	0x20000090
 8008e3c:	200000a0 	.word	0x200000a0
 8008e40:	200000b0 	.word	0x200000b0
 8008e44:	200000c0 	.word	0x200000c0

08008e48 <wine_quality_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool wine_quality_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b082      	sub	sp, #8
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_wine_quality_weights_map, 1, params)) {
 8008e52:	683a      	ldr	r2, [r7, #0]
 8008e54:	2101      	movs	r1, #1
 8008e56:	4852      	ldr	r0, [pc, #328]	; (8008fa0 <wine_quality_configure_weights+0x158>)
 8008e58:	f000 fa44 	bl	80092e4 <ai_platform_get_weights_map>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	f000 8094 	beq.w	8008f8c <wine_quality_configure_weights+0x144>
    /* Updating weights (byte) offsets */
    
    dense_6_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8008e64:	4b4f      	ldr	r3, [pc, #316]	; (8008fa4 <wine_quality_configure_weights+0x15c>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e6c:	4a4d      	ldr	r2, [pc, #308]	; (8008fa4 <wine_quality_configure_weights+0x15c>)
 8008e6e:	6013      	str	r3, [r2, #0]
    dense_6_dense_bias_array.data = AI_PTR(g_wine_quality_weights_map[0] + 0);
 8008e70:	4b4b      	ldr	r3, [pc, #300]	; (8008fa0 <wine_quality_configure_weights+0x158>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a4b      	ldr	r2, [pc, #300]	; (8008fa4 <wine_quality_configure_weights+0x15c>)
 8008e76:	6093      	str	r3, [r2, #8]
    dense_6_dense_bias_array.data_start = AI_PTR(g_wine_quality_weights_map[0] + 0);
 8008e78:	4b49      	ldr	r3, [pc, #292]	; (8008fa0 <wine_quality_configure_weights+0x158>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4a49      	ldr	r2, [pc, #292]	; (8008fa4 <wine_quality_configure_weights+0x15c>)
 8008e7e:	60d3      	str	r3, [r2, #12]
    
    dense_7_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8008e80:	4b49      	ldr	r3, [pc, #292]	; (8008fa8 <wine_quality_configure_weights+0x160>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e88:	4a47      	ldr	r2, [pc, #284]	; (8008fa8 <wine_quality_configure_weights+0x160>)
 8008e8a:	6013      	str	r3, [r2, #0]
    dense_7_dense_weights_array.data = AI_PTR(g_wine_quality_weights_map[0] + 100);
 8008e8c:	4b44      	ldr	r3, [pc, #272]	; (8008fa0 <wine_quality_configure_weights+0x158>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	3364      	adds	r3, #100	; 0x64
 8008e92:	4a45      	ldr	r2, [pc, #276]	; (8008fa8 <wine_quality_configure_weights+0x160>)
 8008e94:	6093      	str	r3, [r2, #8]
    dense_7_dense_weights_array.data_start = AI_PTR(g_wine_quality_weights_map[0] + 100);
 8008e96:	4b42      	ldr	r3, [pc, #264]	; (8008fa0 <wine_quality_configure_weights+0x158>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	3364      	adds	r3, #100	; 0x64
 8008e9c:	4a42      	ldr	r2, [pc, #264]	; (8008fa8 <wine_quality_configure_weights+0x160>)
 8008e9e:	60d3      	str	r3, [r2, #12]
    
    dense_7_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8008ea0:	4b42      	ldr	r3, [pc, #264]	; (8008fac <wine_quality_configure_weights+0x164>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ea8:	4a40      	ldr	r2, [pc, #256]	; (8008fac <wine_quality_configure_weights+0x164>)
 8008eaa:	6013      	str	r3, [r2, #0]
    dense_7_dense_bias_array.data = AI_PTR(g_wine_quality_weights_map[0] + 800);
 8008eac:	4b3c      	ldr	r3, [pc, #240]	; (8008fa0 <wine_quality_configure_weights+0x158>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8008eb4:	4a3d      	ldr	r2, [pc, #244]	; (8008fac <wine_quality_configure_weights+0x164>)
 8008eb6:	6093      	str	r3, [r2, #8]
    dense_7_dense_bias_array.data_start = AI_PTR(g_wine_quality_weights_map[0] + 800);
 8008eb8:	4b39      	ldr	r3, [pc, #228]	; (8008fa0 <wine_quality_configure_weights+0x158>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8008ec0:	4a3a      	ldr	r2, [pc, #232]	; (8008fac <wine_quality_configure_weights+0x164>)
 8008ec2:	60d3      	str	r3, [r2, #12]
    
    dense_4_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8008ec4:	4b3a      	ldr	r3, [pc, #232]	; (8008fb0 <wine_quality_configure_weights+0x168>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ecc:	4a38      	ldr	r2, [pc, #224]	; (8008fb0 <wine_quality_configure_weights+0x168>)
 8008ece:	6013      	str	r3, [r2, #0]
    dense_4_dense_weights_array.data = AI_PTR(g_wine_quality_weights_map[0] + 828);
 8008ed0:	4b33      	ldr	r3, [pc, #204]	; (8008fa0 <wine_quality_configure_weights+0x158>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8008ed8:	4a35      	ldr	r2, [pc, #212]	; (8008fb0 <wine_quality_configure_weights+0x168>)
 8008eda:	6093      	str	r3, [r2, #8]
    dense_4_dense_weights_array.data_start = AI_PTR(g_wine_quality_weights_map[0] + 828);
 8008edc:	4b30      	ldr	r3, [pc, #192]	; (8008fa0 <wine_quality_configure_weights+0x158>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8008ee4:	4a32      	ldr	r2, [pc, #200]	; (8008fb0 <wine_quality_configure_weights+0x168>)
 8008ee6:	60d3      	str	r3, [r2, #12]
    
    dense_4_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8008ee8:	4b32      	ldr	r3, [pc, #200]	; (8008fb4 <wine_quality_configure_weights+0x16c>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ef0:	4a30      	ldr	r2, [pc, #192]	; (8008fb4 <wine_quality_configure_weights+0x16c>)
 8008ef2:	6013      	str	r3, [r2, #0]
    dense_4_dense_bias_array.data = AI_PTR(g_wine_quality_weights_map[0] + 5628);
 8008ef4:	4b2a      	ldr	r3, [pc, #168]	; (8008fa0 <wine_quality_configure_weights+0x158>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f503 53af 	add.w	r3, r3, #5600	; 0x15e0
 8008efc:	331c      	adds	r3, #28
 8008efe:	4a2d      	ldr	r2, [pc, #180]	; (8008fb4 <wine_quality_configure_weights+0x16c>)
 8008f00:	6093      	str	r3, [r2, #8]
    dense_4_dense_bias_array.data_start = AI_PTR(g_wine_quality_weights_map[0] + 5628);
 8008f02:	4b27      	ldr	r3, [pc, #156]	; (8008fa0 <wine_quality_configure_weights+0x158>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f503 53af 	add.w	r3, r3, #5600	; 0x15e0
 8008f0a:	331c      	adds	r3, #28
 8008f0c:	4a29      	ldr	r2, [pc, #164]	; (8008fb4 <wine_quality_configure_weights+0x16c>)
 8008f0e:	60d3      	str	r3, [r2, #12]
    
    dense_5_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8008f10:	4b29      	ldr	r3, [pc, #164]	; (8008fb8 <wine_quality_configure_weights+0x170>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f18:	4a27      	ldr	r2, [pc, #156]	; (8008fb8 <wine_quality_configure_weights+0x170>)
 8008f1a:	6013      	str	r3, [r2, #0]
    dense_5_dense_weights_array.data = AI_PTR(g_wine_quality_weights_map[0] + 6028);
 8008f1c:	4b20      	ldr	r3, [pc, #128]	; (8008fa0 <wine_quality_configure_weights+0x158>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8008f24:	330c      	adds	r3, #12
 8008f26:	4a24      	ldr	r2, [pc, #144]	; (8008fb8 <wine_quality_configure_weights+0x170>)
 8008f28:	6093      	str	r3, [r2, #8]
    dense_5_dense_weights_array.data_start = AI_PTR(g_wine_quality_weights_map[0] + 6028);
 8008f2a:	4b1d      	ldr	r3, [pc, #116]	; (8008fa0 <wine_quality_configure_weights+0x158>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8008f32:	330c      	adds	r3, #12
 8008f34:	4a20      	ldr	r2, [pc, #128]	; (8008fb8 <wine_quality_configure_weights+0x170>)
 8008f36:	60d3      	str	r3, [r2, #12]
    
    dense_5_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8008f38:	4b20      	ldr	r3, [pc, #128]	; (8008fbc <wine_quality_configure_weights+0x174>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f40:	4a1e      	ldr	r2, [pc, #120]	; (8008fbc <wine_quality_configure_weights+0x174>)
 8008f42:	6013      	str	r3, [r2, #0]
    dense_5_dense_bias_array.data = AI_PTR(g_wine_quality_weights_map[0] + 26028);
 8008f44:	4b16      	ldr	r3, [pc, #88]	; (8008fa0 <wine_quality_configure_weights+0x158>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f503 43cb 	add.w	r3, r3, #25984	; 0x6580
 8008f4c:	332c      	adds	r3, #44	; 0x2c
 8008f4e:	4a1b      	ldr	r2, [pc, #108]	; (8008fbc <wine_quality_configure_weights+0x174>)
 8008f50:	6093      	str	r3, [r2, #8]
    dense_5_dense_bias_array.data_start = AI_PTR(g_wine_quality_weights_map[0] + 26028);
 8008f52:	4b13      	ldr	r3, [pc, #76]	; (8008fa0 <wine_quality_configure_weights+0x158>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f503 43cb 	add.w	r3, r3, #25984	; 0x6580
 8008f5a:	332c      	adds	r3, #44	; 0x2c
 8008f5c:	4a17      	ldr	r2, [pc, #92]	; (8008fbc <wine_quality_configure_weights+0x174>)
 8008f5e:	60d3      	str	r3, [r2, #12]
    
    dense_6_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8008f60:	4b17      	ldr	r3, [pc, #92]	; (8008fc0 <wine_quality_configure_weights+0x178>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f68:	4a15      	ldr	r2, [pc, #84]	; (8008fc0 <wine_quality_configure_weights+0x178>)
 8008f6a:	6013      	str	r3, [r2, #0]
    dense_6_dense_weights_array.data = AI_PTR(g_wine_quality_weights_map[0] + 26228);
 8008f6c:	4b0c      	ldr	r3, [pc, #48]	; (8008fa0 <wine_quality_configure_weights+0x158>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f503 43cc 	add.w	r3, r3, #26112	; 0x6600
 8008f74:	3374      	adds	r3, #116	; 0x74
 8008f76:	4a12      	ldr	r2, [pc, #72]	; (8008fc0 <wine_quality_configure_weights+0x178>)
 8008f78:	6093      	str	r3, [r2, #8]
    dense_6_dense_weights_array.data_start = AI_PTR(g_wine_quality_weights_map[0] + 26228);
 8008f7a:	4b09      	ldr	r3, [pc, #36]	; (8008fa0 <wine_quality_configure_weights+0x158>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f503 43cc 	add.w	r3, r3, #26112	; 0x6600
 8008f82:	3374      	adds	r3, #116	; 0x74
 8008f84:	4a0e      	ldr	r2, [pc, #56]	; (8008fc0 <wine_quality_configure_weights+0x178>)
 8008f86:	60d3      	str	r3, [r2, #12]
    
    return true;
 8008f88:	2301      	movs	r3, #1
 8008f8a:	e005      	b.n	8008f98 <wine_quality_configure_weights+0x150>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8008f8c:	2212      	movs	r2, #18
 8008f8e:	2130      	movs	r1, #48	; 0x30
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f000 fadf 	bl	8009554 <ai_platform_network_set_error>
  return false;
 8008f96:	2300      	movs	r3, #0
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3708      	adds	r7, #8
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}
 8008fa0:	200014c8 	.word	0x200014c8
 8008fa4:	20000020 	.word	0x20000020
 8008fa8:	20000050 	.word	0x20000050
 8008fac:	20000070 	.word	0x20000070
 8008fb0:	200000d0 	.word	0x200000d0
 8008fb4:	200000e0 	.word	0x200000e0
 8008fb8:	200000f0 	.word	0x200000f0
 8008fbc:	20000100 	.word	0x20000100
 8008fc0:	20000110 	.word	0x20000110

08008fc4 <ai_wine_quality_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_wine_quality_get_error(ai_handle network)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b082      	sub	sp, #8
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f000 fa53 	bl	8009478 <ai_platform_network_get_error>
 8008fd2:	4603      	mov	r3, r0
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3708      	adds	r7, #8
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <ai_wine_quality_create>:

AI_API_ENTRY
ai_error ai_wine_quality_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b084      	sub	sp, #16
 8008fe0:	af02      	add	r7, sp, #8
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	9301      	str	r3, [sp, #4]
 8008fea:	2305      	movs	r3, #5
 8008fec:	9300      	str	r3, [sp, #0]
 8008fee:	2301      	movs	r3, #1
 8008ff0:	4a04      	ldr	r2, [pc, #16]	; (8009004 <ai_wine_quality_create+0x28>)
 8008ff2:	6839      	ldr	r1, [r7, #0]
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f000 fc59 	bl	80098ac <ai_platform_network_create>
 8008ffa:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3708      	adds	r7, #8
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}
 8009004:	2000087c 	.word	0x2000087c

08009008 <ai_wine_quality_create_and_init>:

AI_API_ENTRY
ai_error ai_wine_quality_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b096      	sub	sp, #88	; 0x58
 800900c:	af00      	add	r7, sp, #0
 800900e:	60f8      	str	r0, [r7, #12]
 8009010:	60b9      	str	r1, [r7, #8]
 8009012:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_wine_quality_create(network, AI_WINE_QUALITY_DATA_CONFIG);
 8009014:	2100      	movs	r1, #0
 8009016:	68f8      	ldr	r0, [r7, #12]
 8009018:	f7ff ffe0 	bl	8008fdc <ai_wine_quality_create>
 800901c:	4603      	mov	r3, r0
 800901e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 8009020:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8009024:	2b00      	cmp	r3, #0
 8009026:	d001      	beq.n	800902c <ai_wine_quality_create_and_init+0x24>
        return err;
 8009028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800902a:	e05d      	b.n	80090e8 <ai_wine_quality_create_and_init+0xe0>
    if (ai_wine_quality_data_params_get(&params) != true) {
 800902c:	f107 0314 	add.w	r3, r7, #20
 8009030:	4618      	mov	r0, r3
 8009032:	f000 f8dd 	bl	80091f0 <ai_wine_quality_data_params_get>
 8009036:	4603      	mov	r3, r0
 8009038:	f083 0301 	eor.w	r3, r3, #1
 800903c:	b2db      	uxtb	r3, r3
 800903e:	2b00      	cmp	r3, #0
 8009040:	d008      	beq.n	8009054 <ai_wine_quality_create_and_init+0x4c>
        err = ai_wine_quality_get_error(*network);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4618      	mov	r0, r3
 8009048:	f7ff ffbc 	bl	8008fc4 <ai_wine_quality_get_error>
 800904c:	4603      	mov	r3, r0
 800904e:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 8009050:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009052:	e049      	b.n	80090e8 <ai_wine_quality_create_and_init+0xe0>
    }
#if defined(AI_WINE_QUALITY_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d016      	beq.n	8009088 <ai_wine_quality_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 800905a:	2300      	movs	r3, #0
 800905c:	657b      	str	r3, [r7, #84]	; 0x54
 800905e:	e00e      	b.n	800907e <ai_wine_quality_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8009060:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009062:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009064:	009b      	lsls	r3, r3, #2
 8009066:	68ba      	ldr	r2, [r7, #8]
 8009068:	4413      	add	r3, r2
 800906a:	681a      	ldr	r2, [r3, #0]
 800906c:	f107 0314 	add.w	r3, r7, #20
 8009070:	330c      	adds	r3, #12
 8009072:	4618      	mov	r0, r3
 8009074:	f000 f922 	bl	80092bc <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8009078:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800907a:	3301      	adds	r3, #1
 800907c:	657b      	str	r3, [r7, #84]	; 0x54
 800907e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009080:	461a      	mov	r2, r3
 8009082:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009084:	4293      	cmp	r3, r2
 8009086:	dbeb      	blt.n	8009060 <ai_wine_quality_create_and_init+0x58>
    }
#endif
#if defined(AI_WINE_QUALITY_DATA_WEIGHTS_COUNT)
    if (weights) {
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d016      	beq.n	80090bc <ai_wine_quality_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 800908e:	2300      	movs	r3, #0
 8009090:	653b      	str	r3, [r7, #80]	; 0x50
 8009092:	e00e      	b.n	80090b2 <ai_wine_quality_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8009094:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009096:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009098:	009b      	lsls	r3, r3, #2
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	4413      	add	r3, r2
 800909e:	681a      	ldr	r2, [r3, #0]
 80090a0:	f107 0314 	add.w	r3, r7, #20
 80090a4:	3304      	adds	r3, #4
 80090a6:	4618      	mov	r0, r3
 80090a8:	f000 f908 	bl	80092bc <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 80090ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090ae:	3301      	adds	r3, #1
 80090b0:	653b      	str	r3, [r7, #80]	; 0x50
 80090b2:	8b7b      	ldrh	r3, [r7, #26]
 80090b4:	461a      	mov	r2, r3
 80090b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090b8:	4293      	cmp	r3, r2
 80090ba:	dbeb      	blt.n	8009094 <ai_wine_quality_create_and_init+0x8c>
    }
#endif
    if (ai_wine_quality_init(*network, &params) != true) {
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f107 0214 	add.w	r2, r7, #20
 80090c4:	4611      	mov	r1, r2
 80090c6:	4618      	mov	r0, r3
 80090c8:	f000 f846 	bl	8009158 <ai_wine_quality_init>
 80090cc:	4603      	mov	r3, r0
 80090ce:	f083 0301 	eor.w	r3, r3, #1
 80090d2:	b2db      	uxtb	r3, r3
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d006      	beq.n	80090e6 <ai_wine_quality_create_and_init+0xde>
        err = ai_wine_quality_get_error(*network);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4618      	mov	r0, r3
 80090de:	f7ff ff71 	bl	8008fc4 <ai_wine_quality_get_error>
 80090e2:	4603      	mov	r3, r0
 80090e4:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 80090e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3758      	adds	r7, #88	; 0x58
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}

080090f0 <ai_wine_quality_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_wine_quality_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b082      	sub	sp, #8
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d104      	bne.n	800910a <ai_wine_quality_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8009100:	4b06      	ldr	r3, [pc, #24]	; (800911c <ai_wine_quality_inputs_get+0x2c>)
 8009102:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	4a06      	ldr	r2, [pc, #24]	; (8009120 <ai_wine_quality_inputs_get+0x30>)
 8009108:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800910a:	6839      	ldr	r1, [r7, #0]
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 fa27 	bl	8009560 <ai_platform_inputs_get>
 8009112:	4603      	mov	r3, r0
}
 8009114:	4618      	mov	r0, r3
 8009116:	3708      	adds	r7, #8
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}
 800911c:	2000087c 	.word	0x2000087c
 8009120:	a1c00100 	.word	0xa1c00100

08009124 <ai_wine_quality_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_wine_quality_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b082      	sub	sp, #8
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d104      	bne.n	800913e <ai_wine_quality_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8009134:	4b06      	ldr	r3, [pc, #24]	; (8009150 <ai_wine_quality_outputs_get+0x2c>)
 8009136:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	4a06      	ldr	r2, [pc, #24]	; (8009154 <ai_wine_quality_outputs_get+0x30>)
 800913c:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800913e:	6839      	ldr	r1, [r7, #0]
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f000 fae3 	bl	800970c <ai_platform_outputs_get>
 8009146:	4603      	mov	r3, r0
}
 8009148:	4618      	mov	r0, r3
 800914a:	3708      	adds	r7, #8
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}
 8009150:	2000087c 	.word	0x2000087c
 8009154:	a1c00100 	.word	0xa1c00100

08009158 <ai_wine_quality_init>:
}

AI_API_ENTRY
ai_bool ai_wine_quality_init(
  ai_handle network, const ai_network_params* params)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b084      	sub	sp, #16
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
 8009160:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8009162:	6839      	ldr	r1, [r7, #0]
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 fc77 	bl	8009a58 <ai_platform_network_init>
 800916a:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d101      	bne.n	8009176 <ai_wine_quality_init+0x1e>
 8009172:	2300      	movs	r3, #0
 8009174:	e028      	b.n	80091c8 <ai_wine_quality_init+0x70>

  ai_bool ok = true;
 8009176:	2301      	movs	r3, #1
 8009178:	72fb      	strb	r3, [r7, #11]
  ok &= wine_quality_configure_weights(net_ctx, params);
 800917a:	6839      	ldr	r1, [r7, #0]
 800917c:	68f8      	ldr	r0, [r7, #12]
 800917e:	f7ff fe63 	bl	8008e48 <wine_quality_configure_weights>
 8009182:	4603      	mov	r3, r0
 8009184:	461a      	mov	r2, r3
 8009186:	7afb      	ldrb	r3, [r7, #11]
 8009188:	4013      	ands	r3, r2
 800918a:	2b00      	cmp	r3, #0
 800918c:	bf14      	ite	ne
 800918e:	2301      	movne	r3, #1
 8009190:	2300      	moveq	r3, #0
 8009192:	72fb      	strb	r3, [r7, #11]
  ok &= wine_quality_configure_activations(net_ctx, params);
 8009194:	6839      	ldr	r1, [r7, #0]
 8009196:	68f8      	ldr	r0, [r7, #12]
 8009198:	f7ff fdd4 	bl	8008d44 <wine_quality_configure_activations>
 800919c:	4603      	mov	r3, r0
 800919e:	461a      	mov	r2, r3
 80091a0:	7afb      	ldrb	r3, [r7, #11]
 80091a2:	4013      	ands	r3, r2
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	bf14      	ite	ne
 80091a8:	2301      	movne	r3, #1
 80091aa:	2300      	moveq	r3, #0
 80091ac:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 fd40 	bl	8009c34 <ai_platform_network_post_init>
 80091b4:	4603      	mov	r3, r0
 80091b6:	461a      	mov	r2, r3
 80091b8:	7afb      	ldrb	r3, [r7, #11]
 80091ba:	4013      	ands	r3, r2
 80091bc:	2b00      	cmp	r3, #0
 80091be:	bf14      	ite	ne
 80091c0:	2301      	movne	r3, #1
 80091c2:	2300      	moveq	r3, #0
 80091c4:	72fb      	strb	r3, [r7, #11]

  return ok;
 80091c6:	7afb      	ldrb	r3, [r7, #11]
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3710      	adds	r7, #16
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <ai_wine_quality_run>:


AI_API_ENTRY
ai_i32 ai_wine_quality_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b084      	sub	sp, #16
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	60f8      	str	r0, [r7, #12]
 80091d8:	60b9      	str	r1, [r7, #8]
 80091da:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	68b9      	ldr	r1, [r7, #8]
 80091e0:	68f8      	ldr	r0, [r7, #12]
 80091e2:	f000 fdaf 	bl	8009d44 <ai_platform_network_process>
 80091e6:	4603      	mov	r3, r0
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3710      	adds	r7, #16
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <ai_wine_quality_data_params_get>:
 * @ingroup wine_quality_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_wine_quality_data_params_get(ai_network_params* params)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b086      	sub	sp, #24
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d101      	bne.n	8009202 <ai_wine_quality_data_params_get+0x12>
 80091fe:	2300      	movs	r3, #0
 8009200:	e016      	b.n	8009230 <ai_wine_quality_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8009202:	4a0d      	ldr	r2, [pc, #52]	; (8009238 <ai_wine_quality_data_params_get+0x48>)
 8009204:	f107 0310 	add.w	r3, r7, #16
 8009208:	e892 0003 	ldmia.w	r2, {r0, r1}
 800920c:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_WINE_QUALITY_DATA_ACTIVATIONS_COUNT, g_wine_quality_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8009210:	4a0a      	ldr	r2, [pc, #40]	; (800923c <ai_wine_quality_data_params_get+0x4c>)
 8009212:	f107 0308 	add.w	r3, r7, #8
 8009216:	e892 0003 	ldmia.w	r2, {r0, r1}
 800921a:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_WINE_QUALITY_DATA_WEIGHTS_COUNT, g_wine_quality_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800921e:	f107 0210 	add.w	r2, r7, #16
 8009222:	f107 0308 	add.w	r3, r7, #8
 8009226:	4619      	mov	r1, r3
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f000 f903 	bl	8009434 <ai_platform_bind_network_params>
 800922e:	4603      	mov	r3, r0
}
 8009230:	4618      	mov	r0, r3
 8009232:	3718      	adds	r7, #24
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}
 8009238:	0800c910 	.word	0x0800c910
 800923c:	0800c918 	.word	0x0800c918

08009240 <ai_buffer_get_size>:
 8009240:	b378      	cbz	r0, 80092a2 <ai_buffer_get_size+0x62>
 8009242:	b410      	push	{r4}
 8009244:	6803      	ldr	r3, [r0, #0]
 8009246:	4a17      	ldr	r2, [pc, #92]	; (80092a4 <ai_buffer_get_size+0x64>)
 8009248:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800924c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009250:	4293      	cmp	r3, r2
 8009252:	d01e      	beq.n	8009292 <ai_buffer_get_size+0x52>
 8009254:	6984      	ldr	r4, [r0, #24]
 8009256:	6862      	ldr	r2, [r4, #4]
 8009258:	7d03      	ldrb	r3, [r0, #20]
 800925a:	6941      	ldr	r1, [r0, #20]
 800925c:	f1a3 0301 	sub.w	r3, r3, #1
 8009260:	fab3 f383 	clz	r3, r3
 8009264:	095b      	lsrs	r3, r3, #5
 8009266:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800926a:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800926e:	da0b      	bge.n	8009288 <ai_buffer_get_size+0x48>
 8009270:	2b01      	cmp	r3, #1
 8009272:	d102      	bne.n	800927a <ai_buffer_get_size+0x3a>
 8009274:	2802      	cmp	r0, #2
 8009276:	d007      	beq.n	8009288 <ai_buffer_get_size+0x48>
 8009278:	2302      	movs	r3, #2
 800927a:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800927e:	3301      	adds	r3, #1
 8009280:	4298      	cmp	r0, r3
 8009282:	fb01 f202 	mul.w	r2, r1, r2
 8009286:	d1f3      	bne.n	8009270 <ai_buffer_get_size+0x30>
 8009288:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800928c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009290:	4770      	bx	lr
 8009292:	2900      	cmp	r1, #0
 8009294:	d0de      	beq.n	8009254 <ai_buffer_get_size+0x14>
 8009296:	6984      	ldr	r4, [r0, #24]
 8009298:	6863      	ldr	r3, [r4, #4]
 800929a:	331f      	adds	r3, #31
 800929c:	f023 021f 	bic.w	r2, r3, #31
 80092a0:	e7da      	b.n	8009258 <ai_buffer_get_size+0x18>
 80092a2:	4770      	bx	lr
 80092a4:	000400c0 	.word	0x000400c0

080092a8 <ai_buffer_array_sane>:
 80092a8:	b138      	cbz	r0, 80092ba <ai_buffer_array_sane+0x12>
 80092aa:	6843      	ldr	r3, [r0, #4]
 80092ac:	b123      	cbz	r3, 80092b8 <ai_buffer_array_sane+0x10>
 80092ae:	8840      	ldrh	r0, [r0, #2]
 80092b0:	3800      	subs	r0, #0
 80092b2:	bf18      	it	ne
 80092b4:	2001      	movne	r0, #1
 80092b6:	4770      	bx	lr
 80092b8:	4618      	mov	r0, r3
 80092ba:	4770      	bx	lr

080092bc <ai_buffer_array_item_set_address>:
 80092bc:	b150      	cbz	r0, 80092d4 <ai_buffer_array_item_set_address+0x18>
 80092be:	6843      	ldr	r3, [r0, #4]
 80092c0:	b14b      	cbz	r3, 80092d6 <ai_buffer_array_item_set_address+0x1a>
 80092c2:	8840      	ldrh	r0, [r0, #2]
 80092c4:	b900      	cbnz	r0, 80092c8 <ai_buffer_array_item_set_address+0xc>
 80092c6:	4770      	bx	lr
 80092c8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80092cc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80092d0:	2001      	movs	r0, #1
 80092d2:	604a      	str	r2, [r1, #4]
 80092d4:	4770      	bx	lr
 80092d6:	4618      	mov	r0, r3
 80092d8:	4770      	bx	lr
 80092da:	bf00      	nop

080092dc <_ai_platform_acquire_crc>:
 80092dc:	2001      	movs	r0, #1
 80092de:	4770      	bx	lr

080092e0 <_ai_platform_release_crc>:
 80092e0:	4770      	bx	lr
 80092e2:	bf00      	nop

080092e4 <ai_platform_get_weights_map>:
 80092e4:	2a00      	cmp	r2, #0
 80092e6:	d037      	beq.n	8009358 <ai_platform_get_weights_map+0x74>
 80092e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ea:	4604      	mov	r4, r0
 80092ec:	b1a0      	cbz	r0, 8009318 <ai_platform_get_weights_map+0x34>
 80092ee:	460f      	mov	r7, r1
 80092f0:	b191      	cbz	r1, 8009318 <ai_platform_get_weights_map+0x34>
 80092f2:	4b25      	ldr	r3, [pc, #148]	; (8009388 <ai_platform_get_weights_map+0xa4>)
 80092f4:	6810      	ldr	r0, [r2, #0]
 80092f6:	4298      	cmp	r0, r3
 80092f8:	4615      	mov	r5, r2
 80092fa:	d00f      	beq.n	800931c <ai_platform_get_weights_map+0x38>
 80092fc:	6855      	ldr	r5, [r2, #4]
 80092fe:	b15d      	cbz	r5, 8009318 <ai_platform_get_weights_map+0x34>
 8009300:	682e      	ldr	r6, [r5, #0]
 8009302:	429e      	cmp	r6, r3
 8009304:	d02a      	beq.n	800935c <ai_platform_get_weights_map+0x78>
 8009306:	f1a1 0001 	sub.w	r0, r1, #1
 800930a:	6025      	str	r5, [r4, #0]
 800930c:	fab0 f080 	clz	r0, r0
 8009310:	0940      	lsrs	r0, r0, #5
 8009312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009314:	42a7      	cmp	r7, r4
 8009316:	d034      	beq.n	8009382 <ai_platform_get_weights_map+0x9e>
 8009318:	2000      	movs	r0, #0
 800931a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800931c:	1d10      	adds	r0, r2, #4
 800931e:	f7ff ffc3 	bl	80092a8 <ai_buffer_array_sane>
 8009322:	2800      	cmp	r0, #0
 8009324:	d0f8      	beq.n	8009318 <ai_platform_get_weights_map+0x34>
 8009326:	88eb      	ldrh	r3, [r5, #6]
 8009328:	429f      	cmp	r7, r3
 800932a:	d1f5      	bne.n	8009318 <ai_platform_get_weights_map+0x34>
 800932c:	f04f 0e00 	mov.w	lr, #0
 8009330:	1f23      	subs	r3, r4, #4
 8009332:	4670      	mov	r0, lr
 8009334:	68aa      	ldr	r2, [r5, #8]
 8009336:	eb02 0c0e 	add.w	ip, r2, lr
 800933a:	f10e 0e1c 	add.w	lr, lr, #28
 800933e:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8009342:	b124      	cbz	r4, 800934e <ai_platform_get_weights_map+0x6a>
 8009344:	3001      	adds	r0, #1
 8009346:	4287      	cmp	r7, r0
 8009348:	f843 4f04 	str.w	r4, [r3, #4]!
 800934c:	d1f2      	bne.n	8009334 <ai_platform_get_weights_map+0x50>
 800934e:	1a38      	subs	r0, r7, r0
 8009350:	fab0 f080 	clz	r0, r0
 8009354:	0940      	lsrs	r0, r0, #5
 8009356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009358:	2000      	movs	r0, #0
 800935a:	4770      	bx	lr
 800935c:	1f23      	subs	r3, r4, #4
 800935e:	4628      	mov	r0, r5
 8009360:	2400      	movs	r4, #0
 8009362:	e000      	b.n	8009366 <ai_platform_get_weights_map+0x82>
 8009364:	4614      	mov	r4, r2
 8009366:	f850 2f04 	ldr.w	r2, [r0, #4]!
 800936a:	42b2      	cmp	r2, r6
 800936c:	d0d2      	beq.n	8009314 <ai_platform_get_weights_map+0x30>
 800936e:	f843 2f04 	str.w	r2, [r3, #4]!
 8009372:	1c62      	adds	r2, r4, #1
 8009374:	4297      	cmp	r7, r2
 8009376:	d1f5      	bne.n	8009364 <ai_platform_get_weights_map+0x80>
 8009378:	3402      	adds	r4, #2
 800937a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800937e:	42b3      	cmp	r3, r6
 8009380:	d1ca      	bne.n	8009318 <ai_platform_get_weights_map+0x34>
 8009382:	2001      	movs	r0, #1
 8009384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009386:	bf00      	nop
 8009388:	a1facade 	.word	0xa1facade

0800938c <ai_platform_get_activations_map>:
 800938c:	2a00      	cmp	r2, #0
 800938e:	d038      	beq.n	8009402 <ai_platform_get_activations_map+0x76>
 8009390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009392:	4604      	mov	r4, r0
 8009394:	b1a0      	cbz	r0, 80093c0 <ai_platform_get_activations_map+0x34>
 8009396:	460f      	mov	r7, r1
 8009398:	b191      	cbz	r1, 80093c0 <ai_platform_get_activations_map+0x34>
 800939a:	4b25      	ldr	r3, [pc, #148]	; (8009430 <ai_platform_get_activations_map+0xa4>)
 800939c:	6810      	ldr	r0, [r2, #0]
 800939e:	4298      	cmp	r0, r3
 80093a0:	4615      	mov	r5, r2
 80093a2:	d00f      	beq.n	80093c4 <ai_platform_get_activations_map+0x38>
 80093a4:	6a15      	ldr	r5, [r2, #32]
 80093a6:	b15d      	cbz	r5, 80093c0 <ai_platform_get_activations_map+0x34>
 80093a8:	682e      	ldr	r6, [r5, #0]
 80093aa:	429e      	cmp	r6, r3
 80093ac:	d02b      	beq.n	8009406 <ai_platform_get_activations_map+0x7a>
 80093ae:	f1a1 0001 	sub.w	r0, r1, #1
 80093b2:	6025      	str	r5, [r4, #0]
 80093b4:	fab0 f080 	clz	r0, r0
 80093b8:	0940      	lsrs	r0, r0, #5
 80093ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093bc:	42a7      	cmp	r7, r4
 80093be:	d035      	beq.n	800942c <ai_platform_get_activations_map+0xa0>
 80093c0:	2000      	movs	r0, #0
 80093c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093c4:	f102 000c 	add.w	r0, r2, #12
 80093c8:	f7ff ff6e 	bl	80092a8 <ai_buffer_array_sane>
 80093cc:	2800      	cmp	r0, #0
 80093ce:	d0f7      	beq.n	80093c0 <ai_platform_get_activations_map+0x34>
 80093d0:	89eb      	ldrh	r3, [r5, #14]
 80093d2:	429f      	cmp	r7, r3
 80093d4:	d1f4      	bne.n	80093c0 <ai_platform_get_activations_map+0x34>
 80093d6:	f04f 0e00 	mov.w	lr, #0
 80093da:	1f23      	subs	r3, r4, #4
 80093dc:	4670      	mov	r0, lr
 80093de:	692a      	ldr	r2, [r5, #16]
 80093e0:	eb02 0c0e 	add.w	ip, r2, lr
 80093e4:	f10e 0e1c 	add.w	lr, lr, #28
 80093e8:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80093ec:	b124      	cbz	r4, 80093f8 <ai_platform_get_activations_map+0x6c>
 80093ee:	3001      	adds	r0, #1
 80093f0:	4287      	cmp	r7, r0
 80093f2:	f843 4f04 	str.w	r4, [r3, #4]!
 80093f6:	d1f2      	bne.n	80093de <ai_platform_get_activations_map+0x52>
 80093f8:	1a38      	subs	r0, r7, r0
 80093fa:	fab0 f080 	clz	r0, r0
 80093fe:	0940      	lsrs	r0, r0, #5
 8009400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009402:	2000      	movs	r0, #0
 8009404:	4770      	bx	lr
 8009406:	1f23      	subs	r3, r4, #4
 8009408:	4628      	mov	r0, r5
 800940a:	2400      	movs	r4, #0
 800940c:	e000      	b.n	8009410 <ai_platform_get_activations_map+0x84>
 800940e:	4614      	mov	r4, r2
 8009410:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8009414:	42b2      	cmp	r2, r6
 8009416:	d0d1      	beq.n	80093bc <ai_platform_get_activations_map+0x30>
 8009418:	f843 2f04 	str.w	r2, [r3, #4]!
 800941c:	1c62      	adds	r2, r4, #1
 800941e:	4297      	cmp	r7, r2
 8009420:	d1f5      	bne.n	800940e <ai_platform_get_activations_map+0x82>
 8009422:	3402      	adds	r4, #2
 8009424:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8009428:	42b3      	cmp	r3, r6
 800942a:	d1c9      	bne.n	80093c0 <ai_platform_get_activations_map+0x34>
 800942c:	2001      	movs	r0, #1
 800942e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009430:	a1facade 	.word	0xa1facade

08009434 <ai_platform_bind_network_params>:
 8009434:	b1a0      	cbz	r0, 8009460 <ai_platform_bind_network_params+0x2c>
 8009436:	b1b1      	cbz	r1, 8009466 <ai_platform_bind_network_params+0x32>
 8009438:	b1c2      	cbz	r2, 800946c <ai_platform_bind_network_params+0x38>
 800943a:	b410      	push	{r4}
 800943c:	4603      	mov	r3, r0
 800943e:	4c0d      	ldr	r4, [pc, #52]	; (8009474 <ai_platform_bind_network_params+0x40>)
 8009440:	f843 4b04 	str.w	r4, [r3], #4
 8009444:	f100 0c0c 	add.w	ip, r0, #12
 8009448:	c903      	ldmia	r1, {r0, r1}
 800944a:	e883 0003 	stmia.w	r3, {r0, r1}
 800944e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009452:	e88c 0003 	stmia.w	ip, {r0, r1}
 8009456:	2301      	movs	r3, #1
 8009458:	4618      	mov	r0, r3
 800945a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800945e:	4770      	bx	lr
 8009460:	4603      	mov	r3, r0
 8009462:	4618      	mov	r0, r3
 8009464:	4770      	bx	lr
 8009466:	460b      	mov	r3, r1
 8009468:	4618      	mov	r0, r3
 800946a:	4770      	bx	lr
 800946c:	4613      	mov	r3, r2
 800946e:	4618      	mov	r0, r3
 8009470:	4770      	bx	lr
 8009472:	bf00      	nop
 8009474:	a1facade 	.word	0xa1facade

08009478 <ai_platform_network_get_error>:
 8009478:	b510      	push	{r4, lr}
 800947a:	b1f0      	cbz	r0, 80094ba <ai_platform_network_get_error+0x42>
 800947c:	4b2f      	ldr	r3, [pc, #188]	; (800953c <ai_platform_network_get_error+0xc4>)
 800947e:	6802      	ldr	r2, [r0, #0]
 8009480:	429a      	cmp	r2, r3
 8009482:	4604      	mov	r4, r0
 8009484:	d119      	bne.n	80094ba <ai_platform_network_get_error+0x42>
 8009486:	f7ff ff29 	bl	80092dc <_ai_platform_acquire_crc>
 800948a:	4b2d      	ldr	r3, [pc, #180]	; (8009540 <ai_platform_network_get_error+0xc8>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009492:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009496:	d03c      	beq.n	8009512 <ai_platform_network_get_error+0x9a>
 8009498:	4a2a      	ldr	r2, [pc, #168]	; (8009544 <ai_platform_network_get_error+0xcc>)
 800949a:	2301      	movs	r3, #1
 800949c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80094a0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d1fb      	bne.n	80094a0 <ai_platform_network_get_error+0x28>
 80094a8:	4b27      	ldr	r3, [pc, #156]	; (8009548 <ai_platform_network_get_error+0xd0>)
 80094aa:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80094ae:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80094b2:	4b26      	ldr	r3, [pc, #152]	; (800954c <ai_platform_network_get_error+0xd4>)
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d038      	beq.n	800952a <ai_platform_network_get_error+0xb2>
 80094b8:	e7fe      	b.n	80094b8 <ai_platform_network_get_error+0x40>
 80094ba:	f7ff ff0f 	bl	80092dc <_ai_platform_acquire_crc>
 80094be:	4b20      	ldr	r3, [pc, #128]	; (8009540 <ai_platform_network_get_error+0xc8>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80094c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094ca:	d010      	beq.n	80094ee <ai_platform_network_get_error+0x76>
 80094cc:	4a1d      	ldr	r2, [pc, #116]	; (8009544 <ai_platform_network_get_error+0xcc>)
 80094ce:	2301      	movs	r3, #1
 80094d0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80094d4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d1fb      	bne.n	80094d4 <ai_platform_network_get_error+0x5c>
 80094dc:	4b1a      	ldr	r3, [pc, #104]	; (8009548 <ai_platform_network_get_error+0xd0>)
 80094de:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80094e2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80094e6:	4b19      	ldr	r3, [pc, #100]	; (800954c <ai_platform_network_get_error+0xd4>)
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d00d      	beq.n	8009508 <ai_platform_network_get_error+0x90>
 80094ec:	e7fe      	b.n	80094ec <ai_platform_network_get_error+0x74>
 80094ee:	4a18      	ldr	r2, [pc, #96]	; (8009550 <ai_platform_network_get_error+0xd8>)
 80094f0:	2301      	movs	r3, #1
 80094f2:	6093      	str	r3, [r2, #8]
 80094f4:	6893      	ldr	r3, [r2, #8]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d1fc      	bne.n	80094f4 <ai_platform_network_get_error+0x7c>
 80094fa:	4b13      	ldr	r3, [pc, #76]	; (8009548 <ai_platform_network_get_error+0xd0>)
 80094fc:	6013      	str	r3, [r2, #0]
 80094fe:	6812      	ldr	r2, [r2, #0]
 8009500:	4b12      	ldr	r3, [pc, #72]	; (800954c <ai_platform_network_get_error+0xd4>)
 8009502:	429a      	cmp	r2, r3
 8009504:	d000      	beq.n	8009508 <ai_platform_network_get_error+0x90>
 8009506:	e7fe      	b.n	8009506 <ai_platform_network_get_error+0x8e>
 8009508:	f7ff feea 	bl	80092e0 <_ai_platform_release_crc>
 800950c:	f241 0010 	movw	r0, #4112	; 0x1010
 8009510:	bd10      	pop	{r4, pc}
 8009512:	4a0f      	ldr	r2, [pc, #60]	; (8009550 <ai_platform_network_get_error+0xd8>)
 8009514:	2301      	movs	r3, #1
 8009516:	6093      	str	r3, [r2, #8]
 8009518:	6893      	ldr	r3, [r2, #8]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d1fc      	bne.n	8009518 <ai_platform_network_get_error+0xa0>
 800951e:	4b0a      	ldr	r3, [pc, #40]	; (8009548 <ai_platform_network_get_error+0xd0>)
 8009520:	6013      	str	r3, [r2, #0]
 8009522:	6812      	ldr	r2, [r2, #0]
 8009524:	4b09      	ldr	r3, [pc, #36]	; (800954c <ai_platform_network_get_error+0xd4>)
 8009526:	429a      	cmp	r2, r3
 8009528:	d107      	bne.n	800953a <ai_platform_network_get_error+0xc2>
 800952a:	f7ff fed9 	bl	80092e0 <_ai_platform_release_crc>
 800952e:	f104 0010 	add.w	r0, r4, #16
 8009532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009536:	f000 be8b 	b.w	800a250 <core_get_error>
 800953a:	e7fe      	b.n	800953a <ai_platform_network_get_error+0xc2>
 800953c:	a1c00100 	.word	0xa1c00100
 8009540:	e0042000 	.word	0xe0042000
 8009544:	58024000 	.word	0x58024000
 8009548:	f407a5c2 	.word	0xf407a5c2
 800954c:	b5e8b5cd 	.word	0xb5e8b5cd
 8009550:	40023000 	.word	0x40023000

08009554 <ai_platform_network_set_error>:
 8009554:	b110      	cbz	r0, 800955c <ai_platform_network_set_error+0x8>
 8009556:	3010      	adds	r0, #16
 8009558:	f000 be80 	b.w	800a25c <core_set_error>
 800955c:	4770      	bx	lr
 800955e:	bf00      	nop

08009560 <ai_platform_inputs_get>:
 8009560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009564:	b085      	sub	sp, #20
 8009566:	9102      	str	r1, [sp, #8]
 8009568:	b1f0      	cbz	r0, 80095a8 <ai_platform_inputs_get+0x48>
 800956a:	4b62      	ldr	r3, [pc, #392]	; (80096f4 <ai_platform_inputs_get+0x194>)
 800956c:	6802      	ldr	r2, [r0, #0]
 800956e:	429a      	cmp	r2, r3
 8009570:	4607      	mov	r7, r0
 8009572:	d119      	bne.n	80095a8 <ai_platform_inputs_get+0x48>
 8009574:	f7ff feb2 	bl	80092dc <_ai_platform_acquire_crc>
 8009578:	4b5f      	ldr	r3, [pc, #380]	; (80096f8 <ai_platform_inputs_get+0x198>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009580:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009584:	d03d      	beq.n	8009602 <ai_platform_inputs_get+0xa2>
 8009586:	4a5d      	ldr	r2, [pc, #372]	; (80096fc <ai_platform_inputs_get+0x19c>)
 8009588:	2301      	movs	r3, #1
 800958a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800958e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009592:	2b00      	cmp	r3, #0
 8009594:	d1fb      	bne.n	800958e <ai_platform_inputs_get+0x2e>
 8009596:	4b5a      	ldr	r3, [pc, #360]	; (8009700 <ai_platform_inputs_get+0x1a0>)
 8009598:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800959c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80095a0:	4b58      	ldr	r3, [pc, #352]	; (8009704 <ai_platform_inputs_get+0x1a4>)
 80095a2:	429a      	cmp	r2, r3
 80095a4:	d039      	beq.n	800961a <ai_platform_inputs_get+0xba>
 80095a6:	e7fe      	b.n	80095a6 <ai_platform_inputs_get+0x46>
 80095a8:	f7ff fe98 	bl	80092dc <_ai_platform_acquire_crc>
 80095ac:	4b52      	ldr	r3, [pc, #328]	; (80096f8 <ai_platform_inputs_get+0x198>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80095b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095b8:	d010      	beq.n	80095dc <ai_platform_inputs_get+0x7c>
 80095ba:	4a50      	ldr	r2, [pc, #320]	; (80096fc <ai_platform_inputs_get+0x19c>)
 80095bc:	2301      	movs	r3, #1
 80095be:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80095c2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d1fb      	bne.n	80095c2 <ai_platform_inputs_get+0x62>
 80095ca:	4b4d      	ldr	r3, [pc, #308]	; (8009700 <ai_platform_inputs_get+0x1a0>)
 80095cc:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80095d0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80095d4:	4b4b      	ldr	r3, [pc, #300]	; (8009704 <ai_platform_inputs_get+0x1a4>)
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d00d      	beq.n	80095f6 <ai_platform_inputs_get+0x96>
 80095da:	e7fe      	b.n	80095da <ai_platform_inputs_get+0x7a>
 80095dc:	4a4a      	ldr	r2, [pc, #296]	; (8009708 <ai_platform_inputs_get+0x1a8>)
 80095de:	2301      	movs	r3, #1
 80095e0:	6093      	str	r3, [r2, #8]
 80095e2:	6893      	ldr	r3, [r2, #8]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d1fc      	bne.n	80095e2 <ai_platform_inputs_get+0x82>
 80095e8:	4b45      	ldr	r3, [pc, #276]	; (8009700 <ai_platform_inputs_get+0x1a0>)
 80095ea:	6013      	str	r3, [r2, #0]
 80095ec:	6812      	ldr	r2, [r2, #0]
 80095ee:	4b45      	ldr	r3, [pc, #276]	; (8009704 <ai_platform_inputs_get+0x1a4>)
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d000      	beq.n	80095f6 <ai_platform_inputs_get+0x96>
 80095f4:	e7fe      	b.n	80095f4 <ai_platform_inputs_get+0x94>
 80095f6:	f7ff fe73 	bl	80092e0 <_ai_platform_release_crc>
 80095fa:	2000      	movs	r0, #0
 80095fc:	b005      	add	sp, #20
 80095fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009602:	4a41      	ldr	r2, [pc, #260]	; (8009708 <ai_platform_inputs_get+0x1a8>)
 8009604:	2301      	movs	r3, #1
 8009606:	6093      	str	r3, [r2, #8]
 8009608:	6893      	ldr	r3, [r2, #8]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d1fc      	bne.n	8009608 <ai_platform_inputs_get+0xa8>
 800960e:	4b3c      	ldr	r3, [pc, #240]	; (8009700 <ai_platform_inputs_get+0x1a0>)
 8009610:	6013      	str	r3, [r2, #0]
 8009612:	6812      	ldr	r2, [r2, #0]
 8009614:	4b3b      	ldr	r3, [pc, #236]	; (8009704 <ai_platform_inputs_get+0x1a4>)
 8009616:	429a      	cmp	r2, r3
 8009618:	d155      	bne.n	80096c6 <ai_platform_inputs_get+0x166>
 800961a:	f7ff fe61 	bl	80092e0 <_ai_platform_release_crc>
 800961e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009620:	2b00      	cmp	r3, #0
 8009622:	d051      	beq.n	80096c8 <ai_platform_inputs_get+0x168>
 8009624:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8009628:	f1ba 0f00 	cmp.w	sl, #0
 800962c:	d04c      	beq.n	80096c8 <ai_platform_inputs_get+0x168>
 800962e:	f04f 0b00 	mov.w	fp, #0
 8009632:	465d      	mov	r5, fp
 8009634:	9703      	str	r7, [sp, #12]
 8009636:	e016      	b.n	8009666 <ai_platform_inputs_get+0x106>
 8009638:	9901      	ldr	r1, [sp, #4]
 800963a:	2301      	movs	r3, #1
 800963c:	507b      	str	r3, [r7, r1]
 800963e:	69b1      	ldr	r1, [r6, #24]
 8009640:	6849      	ldr	r1, [r1, #4]
 8009642:	6121      	str	r1, [r4, #16]
 8009644:	f04f 0301 	mov.w	r3, #1
 8009648:	7523      	strb	r3, [r4, #20]
 800964a:	e9c4 c200 	strd	ip, r2, [r4]
 800964e:	6962      	ldr	r2, [r4, #20]
 8009650:	60a0      	str	r0, [r4, #8]
 8009652:	2300      	movs	r3, #0
 8009654:	f369 221f 	bfi	r2, r9, #8, #24
 8009658:	f8c4 8018 	str.w	r8, [r4, #24]
 800965c:	60e3      	str	r3, [r4, #12]
 800965e:	3501      	adds	r5, #1
 8009660:	f10b 0b1c 	add.w	fp, fp, #28
 8009664:	6162      	str	r2, [r4, #20]
 8009666:	f8ba 3000 	ldrh.w	r3, [sl]
 800966a:	42ab      	cmp	r3, r5
 800966c:	b2aa      	uxth	r2, r5
 800966e:	d93a      	bls.n	80096e6 <ai_platform_inputs_get+0x186>
 8009670:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009674:	00e9      	lsls	r1, r5, #3
 8009676:	9101      	str	r1, [sp, #4]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d034      	beq.n	80096e6 <ai_platform_inputs_get+0x186>
 800967c:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8009680:	2e00      	cmp	r6, #0
 8009682:	d030      	beq.n	80096e6 <ai_platform_inputs_get+0x186>
 8009684:	f8da 3008 	ldr.w	r3, [sl, #8]
 8009688:	69b2      	ldr	r2, [r6, #24]
 800968a:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800968e:	6810      	ldr	r0, [r2, #0]
 8009690:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8009694:	68b3      	ldr	r3, [r6, #8]
 8009696:	f3c3 2917 	ubfx	r9, r3, #8, #24
 800969a:	f001 fcd1 	bl	800b040 <ai_array_to_buffer_fmt>
 800969e:	69b1      	ldr	r1, [r6, #24]
 80096a0:	4684      	mov	ip, r0
 80096a2:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 80096a6:	688a      	ldr	r2, [r1, #8]
 80096a8:	445c      	add	r4, fp
 80096aa:	2800      	cmp	r0, #0
 80096ac:	d0c8      	beq.n	8009640 <ai_platform_inputs_get+0xe0>
 80096ae:	2100      	movs	r1, #0
 80096b0:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 80096b4:	6831      	ldr	r1, [r6, #0]
 80096b6:	6041      	str	r1, [r0, #4]
 80096b8:	b111      	cbz	r1, 80096c0 <ai_platform_inputs_get+0x160>
 80096ba:	8849      	ldrh	r1, [r1, #2]
 80096bc:	2900      	cmp	r1, #0
 80096be:	d1bb      	bne.n	8009638 <ai_platform_inputs_get+0xd8>
 80096c0:	69b1      	ldr	r1, [r6, #24]
 80096c2:	2000      	movs	r0, #0
 80096c4:	e7bc      	b.n	8009640 <ai_platform_inputs_get+0xe0>
 80096c6:	e7fe      	b.n	80096c6 <ai_platform_inputs_get+0x166>
 80096c8:	2218      	movs	r2, #24
 80096ca:	2111      	movs	r1, #17
 80096cc:	f107 0010 	add.w	r0, r7, #16
 80096d0:	f000 fdc4 	bl	800a25c <core_set_error>
 80096d4:	2200      	movs	r2, #0
 80096d6:	4610      	mov	r0, r2
 80096d8:	9b02      	ldr	r3, [sp, #8]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d08e      	beq.n	80095fc <ai_platform_inputs_get+0x9c>
 80096de:	801a      	strh	r2, [r3, #0]
 80096e0:	b005      	add	sp, #20
 80096e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096e6:	9f03      	ldr	r7, [sp, #12]
 80096e8:	2a00      	cmp	r2, #0
 80096ea:	d0ed      	beq.n	80096c8 <ai_platform_inputs_get+0x168>
 80096ec:	f8da 3008 	ldr.w	r3, [sl, #8]
 80096f0:	6858      	ldr	r0, [r3, #4]
 80096f2:	e7f1      	b.n	80096d8 <ai_platform_inputs_get+0x178>
 80096f4:	a1c00100 	.word	0xa1c00100
 80096f8:	e0042000 	.word	0xe0042000
 80096fc:	58024000 	.word	0x58024000
 8009700:	f407a5c2 	.word	0xf407a5c2
 8009704:	b5e8b5cd 	.word	0xb5e8b5cd
 8009708:	40023000 	.word	0x40023000

0800970c <ai_platform_outputs_get>:
 800970c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009710:	b085      	sub	sp, #20
 8009712:	9102      	str	r1, [sp, #8]
 8009714:	b1f0      	cbz	r0, 8009754 <ai_platform_outputs_get+0x48>
 8009716:	4b5f      	ldr	r3, [pc, #380]	; (8009894 <ai_platform_outputs_get+0x188>)
 8009718:	6802      	ldr	r2, [r0, #0]
 800971a:	429a      	cmp	r2, r3
 800971c:	4607      	mov	r7, r0
 800971e:	d119      	bne.n	8009754 <ai_platform_outputs_get+0x48>
 8009720:	f7ff fddc 	bl	80092dc <_ai_platform_acquire_crc>
 8009724:	4b5c      	ldr	r3, [pc, #368]	; (8009898 <ai_platform_outputs_get+0x18c>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800972c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009730:	d03d      	beq.n	80097ae <ai_platform_outputs_get+0xa2>
 8009732:	4a5a      	ldr	r2, [pc, #360]	; (800989c <ai_platform_outputs_get+0x190>)
 8009734:	2301      	movs	r3, #1
 8009736:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800973a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800973e:	2b00      	cmp	r3, #0
 8009740:	d1fb      	bne.n	800973a <ai_platform_outputs_get+0x2e>
 8009742:	4b57      	ldr	r3, [pc, #348]	; (80098a0 <ai_platform_outputs_get+0x194>)
 8009744:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8009748:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800974c:	4b55      	ldr	r3, [pc, #340]	; (80098a4 <ai_platform_outputs_get+0x198>)
 800974e:	429a      	cmp	r2, r3
 8009750:	d039      	beq.n	80097c6 <ai_platform_outputs_get+0xba>
 8009752:	e7fe      	b.n	8009752 <ai_platform_outputs_get+0x46>
 8009754:	f7ff fdc2 	bl	80092dc <_ai_platform_acquire_crc>
 8009758:	4b4f      	ldr	r3, [pc, #316]	; (8009898 <ai_platform_outputs_get+0x18c>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009764:	d010      	beq.n	8009788 <ai_platform_outputs_get+0x7c>
 8009766:	4a4d      	ldr	r2, [pc, #308]	; (800989c <ai_platform_outputs_get+0x190>)
 8009768:	2301      	movs	r3, #1
 800976a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800976e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009772:	2b00      	cmp	r3, #0
 8009774:	d1fb      	bne.n	800976e <ai_platform_outputs_get+0x62>
 8009776:	4b4a      	ldr	r3, [pc, #296]	; (80098a0 <ai_platform_outputs_get+0x194>)
 8009778:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800977c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009780:	4b48      	ldr	r3, [pc, #288]	; (80098a4 <ai_platform_outputs_get+0x198>)
 8009782:	429a      	cmp	r2, r3
 8009784:	d00d      	beq.n	80097a2 <ai_platform_outputs_get+0x96>
 8009786:	e7fe      	b.n	8009786 <ai_platform_outputs_get+0x7a>
 8009788:	4a47      	ldr	r2, [pc, #284]	; (80098a8 <ai_platform_outputs_get+0x19c>)
 800978a:	2301      	movs	r3, #1
 800978c:	6093      	str	r3, [r2, #8]
 800978e:	6893      	ldr	r3, [r2, #8]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d1fc      	bne.n	800978e <ai_platform_outputs_get+0x82>
 8009794:	4b42      	ldr	r3, [pc, #264]	; (80098a0 <ai_platform_outputs_get+0x194>)
 8009796:	6013      	str	r3, [r2, #0]
 8009798:	6812      	ldr	r2, [r2, #0]
 800979a:	4b42      	ldr	r3, [pc, #264]	; (80098a4 <ai_platform_outputs_get+0x198>)
 800979c:	429a      	cmp	r2, r3
 800979e:	d000      	beq.n	80097a2 <ai_platform_outputs_get+0x96>
 80097a0:	e7fe      	b.n	80097a0 <ai_platform_outputs_get+0x94>
 80097a2:	f7ff fd9d 	bl	80092e0 <_ai_platform_release_crc>
 80097a6:	2000      	movs	r0, #0
 80097a8:	b005      	add	sp, #20
 80097aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ae:	4a3e      	ldr	r2, [pc, #248]	; (80098a8 <ai_platform_outputs_get+0x19c>)
 80097b0:	2301      	movs	r3, #1
 80097b2:	6093      	str	r3, [r2, #8]
 80097b4:	6893      	ldr	r3, [r2, #8]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d1fc      	bne.n	80097b4 <ai_platform_outputs_get+0xa8>
 80097ba:	4b39      	ldr	r3, [pc, #228]	; (80098a0 <ai_platform_outputs_get+0x194>)
 80097bc:	6013      	str	r3, [r2, #0]
 80097be:	6812      	ldr	r2, [r2, #0]
 80097c0:	4b38      	ldr	r3, [pc, #224]	; (80098a4 <ai_platform_outputs_get+0x198>)
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d150      	bne.n	8009868 <ai_platform_outputs_get+0x15c>
 80097c6:	f7ff fd8b 	bl	80092e0 <_ai_platform_release_crc>
 80097ca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80097cc:	2b01      	cmp	r3, #1
 80097ce:	d958      	bls.n	8009882 <ai_platform_outputs_get+0x176>
 80097d0:	f04f 0b00 	mov.w	fp, #0
 80097d4:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 80097d8:	9703      	str	r7, [sp, #12]
 80097da:	465d      	mov	r5, fp
 80097dc:	e016      	b.n	800980c <ai_platform_outputs_get+0x100>
 80097de:	9901      	ldr	r1, [sp, #4]
 80097e0:	2301      	movs	r3, #1
 80097e2:	507b      	str	r3, [r7, r1]
 80097e4:	69b1      	ldr	r1, [r6, #24]
 80097e6:	6849      	ldr	r1, [r1, #4]
 80097e8:	6121      	str	r1, [r4, #16]
 80097ea:	f04f 0301 	mov.w	r3, #1
 80097ee:	7523      	strb	r3, [r4, #20]
 80097f0:	e9c4 c200 	strd	ip, r2, [r4]
 80097f4:	6962      	ldr	r2, [r4, #20]
 80097f6:	60a0      	str	r0, [r4, #8]
 80097f8:	2300      	movs	r3, #0
 80097fa:	f369 221f 	bfi	r2, r9, #8, #24
 80097fe:	f8c4 8018 	str.w	r8, [r4, #24]
 8009802:	60e3      	str	r3, [r4, #12]
 8009804:	3501      	adds	r5, #1
 8009806:	f10b 0b1c 	add.w	fp, fp, #28
 800980a:	6162      	str	r2, [r4, #20]
 800980c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8009810:	42ab      	cmp	r3, r5
 8009812:	b2aa      	uxth	r2, r5
 8009814:	d929      	bls.n	800986a <ai_platform_outputs_get+0x15e>
 8009816:	f8da 3010 	ldr.w	r3, [sl, #16]
 800981a:	00e9      	lsls	r1, r5, #3
 800981c:	9101      	str	r1, [sp, #4]
 800981e:	b323      	cbz	r3, 800986a <ai_platform_outputs_get+0x15e>
 8009820:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8009824:	b30e      	cbz	r6, 800986a <ai_platform_outputs_get+0x15e>
 8009826:	f8da 3014 	ldr.w	r3, [sl, #20]
 800982a:	69b2      	ldr	r2, [r6, #24]
 800982c:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8009830:	6810      	ldr	r0, [r2, #0]
 8009832:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8009836:	68b3      	ldr	r3, [r6, #8]
 8009838:	f3c3 2917 	ubfx	r9, r3, #8, #24
 800983c:	f001 fc00 	bl	800b040 <ai_array_to_buffer_fmt>
 8009840:	69b1      	ldr	r1, [r6, #24]
 8009842:	4684      	mov	ip, r0
 8009844:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8009848:	688a      	ldr	r2, [r1, #8]
 800984a:	445c      	add	r4, fp
 800984c:	2800      	cmp	r0, #0
 800984e:	d0ca      	beq.n	80097e6 <ai_platform_outputs_get+0xda>
 8009850:	2100      	movs	r1, #0
 8009852:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8009856:	6831      	ldr	r1, [r6, #0]
 8009858:	6041      	str	r1, [r0, #4]
 800985a:	b111      	cbz	r1, 8009862 <ai_platform_outputs_get+0x156>
 800985c:	8849      	ldrh	r1, [r1, #2]
 800985e:	2900      	cmp	r1, #0
 8009860:	d1bd      	bne.n	80097de <ai_platform_outputs_get+0xd2>
 8009862:	69b1      	ldr	r1, [r6, #24]
 8009864:	2000      	movs	r0, #0
 8009866:	e7be      	b.n	80097e6 <ai_platform_outputs_get+0xda>
 8009868:	e7fe      	b.n	8009868 <ai_platform_outputs_get+0x15c>
 800986a:	9f03      	ldr	r7, [sp, #12]
 800986c:	b14a      	cbz	r2, 8009882 <ai_platform_outputs_get+0x176>
 800986e:	f8da 3014 	ldr.w	r3, [sl, #20]
 8009872:	6858      	ldr	r0, [r3, #4]
 8009874:	9b02      	ldr	r3, [sp, #8]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d096      	beq.n	80097a8 <ai_platform_outputs_get+0x9c>
 800987a:	801a      	strh	r2, [r3, #0]
 800987c:	b005      	add	sp, #20
 800987e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009882:	2218      	movs	r2, #24
 8009884:	2111      	movs	r1, #17
 8009886:	f107 0010 	add.w	r0, r7, #16
 800988a:	f000 fce7 	bl	800a25c <core_set_error>
 800988e:	2200      	movs	r2, #0
 8009890:	4610      	mov	r0, r2
 8009892:	e7ef      	b.n	8009874 <ai_platform_outputs_get+0x168>
 8009894:	a1c00100 	.word	0xa1c00100
 8009898:	e0042000 	.word	0xe0042000
 800989c:	58024000 	.word	0x58024000
 80098a0:	f407a5c2 	.word	0xf407a5c2
 80098a4:	b5e8b5cd 	.word	0xb5e8b5cd
 80098a8:	40023000 	.word	0x40023000

080098ac <ai_platform_network_create>:
 80098ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80098b0:	b083      	sub	sp, #12
 80098b2:	4606      	mov	r6, r0
 80098b4:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 80098b8:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 80098bc:	4615      	mov	r5, r2
 80098be:	461f      	mov	r7, r3
 80098c0:	f7ff fd0c 	bl	80092dc <_ai_platform_acquire_crc>
 80098c4:	b188      	cbz	r0, 80098ea <ai_platform_network_create+0x3e>
 80098c6:	4a5d      	ldr	r2, [pc, #372]	; (8009a3c <ai_platform_network_create+0x190>)
 80098c8:	6812      	ldr	r2, [r2, #0]
 80098ca:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80098ce:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80098d2:	4603      	mov	r3, r0
 80098d4:	d00e      	beq.n	80098f4 <ai_platform_network_create+0x48>
 80098d6:	4a5a      	ldr	r2, [pc, #360]	; (8009a40 <ai_platform_network_create+0x194>)
 80098d8:	2118      	movs	r1, #24
 80098da:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 80098de:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 80098e2:	2918      	cmp	r1, #24
 80098e4:	d018      	beq.n	8009918 <ai_platform_network_create+0x6c>
 80098e6:	f7ff fcfb 	bl	80092e0 <_ai_platform_release_crc>
 80098ea:	f244 1033 	movw	r0, #16691	; 0x4133
 80098ee:	b003      	add	sp, #12
 80098f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80098f4:	4a53      	ldr	r2, [pc, #332]	; (8009a44 <ai_platform_network_create+0x198>)
 80098f6:	2101      	movs	r1, #1
 80098f8:	6091      	str	r1, [r2, #8]
 80098fa:	2114      	movs	r1, #20
 80098fc:	e001      	b.n	8009902 <ai_platform_network_create+0x56>
 80098fe:	3901      	subs	r1, #1
 8009900:	d002      	beq.n	8009908 <ai_platform_network_create+0x5c>
 8009902:	6894      	ldr	r4, [r2, #8]
 8009904:	2c00      	cmp	r4, #0
 8009906:	d1fa      	bne.n	80098fe <ai_platform_network_create+0x52>
 8009908:	4a4e      	ldr	r2, [pc, #312]	; (8009a44 <ai_platform_network_create+0x198>)
 800990a:	6891      	ldr	r1, [r2, #8]
 800990c:	b911      	cbnz	r1, 8009914 <ai_platform_network_create+0x68>
 800990e:	6812      	ldr	r2, [r2, #0]
 8009910:	3201      	adds	r2, #1
 8009912:	d008      	beq.n	8009926 <ai_platform_network_create+0x7a>
 8009914:	4618      	mov	r0, r3
 8009916:	e7e6      	b.n	80098e6 <ai_platform_network_create+0x3a>
 8009918:	2101      	movs	r1, #1
 800991a:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 800991e:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8009922:	2900      	cmp	r1, #0
 8009924:	d1fb      	bne.n	800991e <ai_platform_network_create+0x72>
 8009926:	4618      	mov	r0, r3
 8009928:	f7ff fcda 	bl	80092e0 <_ai_platform_release_crc>
 800992c:	f7ff fcd6 	bl	80092dc <_ai_platform_acquire_crc>
 8009930:	4b42      	ldr	r3, [pc, #264]	; (8009a3c <ai_platform_network_create+0x190>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009938:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800993c:	d010      	beq.n	8009960 <ai_platform_network_create+0xb4>
 800993e:	4b40      	ldr	r3, [pc, #256]	; (8009a40 <ai_platform_network_create+0x194>)
 8009940:	2201      	movs	r2, #1
 8009942:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8009946:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 800994a:	2900      	cmp	r1, #0
 800994c:	d1fb      	bne.n	8009946 <ai_platform_network_create+0x9a>
 800994e:	4a3e      	ldr	r2, [pc, #248]	; (8009a48 <ai_platform_network_create+0x19c>)
 8009950:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8009954:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8009958:	4b3c      	ldr	r3, [pc, #240]	; (8009a4c <ai_platform_network_create+0x1a0>)
 800995a:	429a      	cmp	r2, r3
 800995c:	d00c      	beq.n	8009978 <ai_platform_network_create+0xcc>
 800995e:	e7fe      	b.n	800995e <ai_platform_network_create+0xb2>
 8009960:	4a38      	ldr	r2, [pc, #224]	; (8009a44 <ai_platform_network_create+0x198>)
 8009962:	2301      	movs	r3, #1
 8009964:	6093      	str	r3, [r2, #8]
 8009966:	6893      	ldr	r3, [r2, #8]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d1fc      	bne.n	8009966 <ai_platform_network_create+0xba>
 800996c:	4b36      	ldr	r3, [pc, #216]	; (8009a48 <ai_platform_network_create+0x19c>)
 800996e:	6013      	str	r3, [r2, #0]
 8009970:	6812      	ldr	r2, [r2, #0]
 8009972:	4b36      	ldr	r3, [pc, #216]	; (8009a4c <ai_platform_network_create+0x1a0>)
 8009974:	429a      	cmp	r2, r3
 8009976:	d122      	bne.n	80099be <ai_platform_network_create+0x112>
 8009978:	f7ff fcb2 	bl	80092e0 <_ai_platform_release_crc>
 800997c:	b38e      	cbz	r6, 80099e2 <ai_platform_network_create+0x136>
 800997e:	4b34      	ldr	r3, [pc, #208]	; (8009a50 <ai_platform_network_create+0x1a4>)
 8009980:	602b      	str	r3, [r5, #0]
 8009982:	6035      	str	r5, [r6, #0]
 8009984:	f000 fc62 	bl	800a24c <core_init>
 8009988:	b1d0      	cbz	r0, 80099c0 <ai_platform_network_create+0x114>
 800998a:	f7ff fca7 	bl	80092dc <_ai_platform_acquire_crc>
 800998e:	4b2b      	ldr	r3, [pc, #172]	; (8009a3c <ai_platform_network_create+0x190>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009996:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800999a:	d025      	beq.n	80099e8 <ai_platform_network_create+0x13c>
 800999c:	4a28      	ldr	r2, [pc, #160]	; (8009a40 <ai_platform_network_create+0x194>)
 800999e:	2301      	movs	r3, #1
 80099a0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80099a4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d1fb      	bne.n	80099a4 <ai_platform_network_create+0xf8>
 80099ac:	4b26      	ldr	r3, [pc, #152]	; (8009a48 <ai_platform_network_create+0x19c>)
 80099ae:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80099b2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80099b6:	4b25      	ldr	r3, [pc, #148]	; (8009a4c <ai_platform_network_create+0x1a0>)
 80099b8:	429a      	cmp	r2, r3
 80099ba:	d022      	beq.n	8009a02 <ai_platform_network_create+0x156>
 80099bc:	e7fe      	b.n	80099bc <ai_platform_network_create+0x110>
 80099be:	e7fe      	b.n	80099be <ai_platform_network_create+0x112>
 80099c0:	2430      	movs	r4, #48	; 0x30
 80099c2:	2300      	movs	r3, #0
 80099c4:	6033      	str	r3, [r6, #0]
 80099c6:	2610      	movs	r6, #16
 80099c8:	464a      	mov	r2, r9
 80099ca:	4641      	mov	r1, r8
 80099cc:	4638      	mov	r0, r7
 80099ce:	f001 fbdd 	bl	800b18c <ai_version_get>
 80099d2:	4603      	mov	r3, r0
 80099d4:	2000      	movs	r0, #0
 80099d6:	f364 0007 	bfi	r0, r4, #0, #8
 80099da:	64ab      	str	r3, [r5, #72]	; 0x48
 80099dc:	f366 201f 	bfi	r0, r6, #8, #24
 80099e0:	e785      	b.n	80098ee <ai_platform_network_create+0x42>
 80099e2:	f241 0010 	movw	r0, #4112	; 0x1010
 80099e6:	e782      	b.n	80098ee <ai_platform_network_create+0x42>
 80099e8:	4a16      	ldr	r2, [pc, #88]	; (8009a44 <ai_platform_network_create+0x198>)
 80099ea:	2301      	movs	r3, #1
 80099ec:	6093      	str	r3, [r2, #8]
 80099ee:	6893      	ldr	r3, [r2, #8]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d1fc      	bne.n	80099ee <ai_platform_network_create+0x142>
 80099f4:	4b14      	ldr	r3, [pc, #80]	; (8009a48 <ai_platform_network_create+0x19c>)
 80099f6:	6013      	str	r3, [r2, #0]
 80099f8:	6812      	ldr	r2, [r2, #0]
 80099fa:	4b14      	ldr	r3, [pc, #80]	; (8009a4c <ai_platform_network_create+0x1a0>)
 80099fc:	429a      	cmp	r2, r3
 80099fe:	d000      	beq.n	8009a02 <ai_platform_network_create+0x156>
 8009a00:	e7fe      	b.n	8009a00 <ai_platform_network_create+0x154>
 8009a02:	f7ff fc6d 	bl	80092e0 <_ai_platform_release_crc>
 8009a06:	2200      	movs	r2, #0
 8009a08:	4641      	mov	r1, r8
 8009a0a:	4638      	mov	r0, r7
 8009a0c:	f001 fbbe 	bl	800b18c <ai_version_get>
 8009a10:	2200      	movs	r2, #0
 8009a12:	4604      	mov	r4, r0
 8009a14:	2105      	movs	r1, #5
 8009a16:	2001      	movs	r0, #1
 8009a18:	f001 fbb8 	bl	800b18c <ai_version_get>
 8009a1c:	4284      	cmp	r4, r0
 8009a1e:	d001      	beq.n	8009a24 <ai_platform_network_create+0x178>
 8009a20:	2401      	movs	r4, #1
 8009a22:	e7ce      	b.n	80099c2 <ai_platform_network_create+0x116>
 8009a24:	4b0b      	ldr	r3, [pc, #44]	; (8009a54 <ai_platform_network_create+0x1a8>)
 8009a26:	9301      	str	r3, [sp, #4]
 8009a28:	a801      	add	r0, sp, #4
 8009a2a:	f000 fc23 	bl	800a274 <ai_check_custom_types>
 8009a2e:	b110      	cbz	r0, 8009a36 <ai_platform_network_create+0x18a>
 8009a30:	2600      	movs	r6, #0
 8009a32:	4634      	mov	r4, r6
 8009a34:	e7c8      	b.n	80099c8 <ai_platform_network_create+0x11c>
 8009a36:	2402      	movs	r4, #2
 8009a38:	e7c3      	b.n	80099c2 <ai_platform_network_create+0x116>
 8009a3a:	bf00      	nop
 8009a3c:	e0042000 	.word	0xe0042000
 8009a40:	58024000 	.word	0x58024000
 8009a44:	40023000 	.word	0x40023000
 8009a48:	f407a5c2 	.word	0xf407a5c2
 8009a4c:	b5e8b5cd 	.word	0xb5e8b5cd
 8009a50:	a1c00100 	.word	0xa1c00100
 8009a54:	84048403 	.word	0x84048403

08009a58 <ai_platform_network_init>:
 8009a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a5c:	b1f8      	cbz	r0, 8009a9e <ai_platform_network_init+0x46>
 8009a5e:	4b6e      	ldr	r3, [pc, #440]	; (8009c18 <ai_platform_network_init+0x1c0>)
 8009a60:	6802      	ldr	r2, [r0, #0]
 8009a62:	429a      	cmp	r2, r3
 8009a64:	4604      	mov	r4, r0
 8009a66:	d11a      	bne.n	8009a9e <ai_platform_network_init+0x46>
 8009a68:	460e      	mov	r6, r1
 8009a6a:	f7ff fc37 	bl	80092dc <_ai_platform_acquire_crc>
 8009a6e:	4b6b      	ldr	r3, [pc, #428]	; (8009c1c <ai_platform_network_init+0x1c4>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009a76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a7a:	d03d      	beq.n	8009af8 <ai_platform_network_init+0xa0>
 8009a7c:	4a68      	ldr	r2, [pc, #416]	; (8009c20 <ai_platform_network_init+0x1c8>)
 8009a7e:	2301      	movs	r3, #1
 8009a80:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009a84:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d1fb      	bne.n	8009a84 <ai_platform_network_init+0x2c>
 8009a8c:	4b65      	ldr	r3, [pc, #404]	; (8009c24 <ai_platform_network_init+0x1cc>)
 8009a8e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8009a92:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009a96:	4b64      	ldr	r3, [pc, #400]	; (8009c28 <ai_platform_network_init+0x1d0>)
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	d039      	beq.n	8009b10 <ai_platform_network_init+0xb8>
 8009a9c:	e7fe      	b.n	8009a9c <ai_platform_network_init+0x44>
 8009a9e:	f7ff fc1d 	bl	80092dc <_ai_platform_acquire_crc>
 8009aa2:	4b5e      	ldr	r3, [pc, #376]	; (8009c1c <ai_platform_network_init+0x1c4>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009aae:	d010      	beq.n	8009ad2 <ai_platform_network_init+0x7a>
 8009ab0:	4a5b      	ldr	r2, [pc, #364]	; (8009c20 <ai_platform_network_init+0x1c8>)
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009ab8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d1fb      	bne.n	8009ab8 <ai_platform_network_init+0x60>
 8009ac0:	4b58      	ldr	r3, [pc, #352]	; (8009c24 <ai_platform_network_init+0x1cc>)
 8009ac2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8009ac6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009aca:	4b57      	ldr	r3, [pc, #348]	; (8009c28 <ai_platform_network_init+0x1d0>)
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d00d      	beq.n	8009aec <ai_platform_network_init+0x94>
 8009ad0:	e7fe      	b.n	8009ad0 <ai_platform_network_init+0x78>
 8009ad2:	4a56      	ldr	r2, [pc, #344]	; (8009c2c <ai_platform_network_init+0x1d4>)
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	6093      	str	r3, [r2, #8]
 8009ad8:	6893      	ldr	r3, [r2, #8]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d1fc      	bne.n	8009ad8 <ai_platform_network_init+0x80>
 8009ade:	4b51      	ldr	r3, [pc, #324]	; (8009c24 <ai_platform_network_init+0x1cc>)
 8009ae0:	6013      	str	r3, [r2, #0]
 8009ae2:	6812      	ldr	r2, [r2, #0]
 8009ae4:	4b50      	ldr	r3, [pc, #320]	; (8009c28 <ai_platform_network_init+0x1d0>)
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	d000      	beq.n	8009aec <ai_platform_network_init+0x94>
 8009aea:	e7fe      	b.n	8009aea <ai_platform_network_init+0x92>
 8009aec:	f7ff fbf8 	bl	80092e0 <_ai_platform_release_crc>
 8009af0:	2600      	movs	r6, #0
 8009af2:	4630      	mov	r0, r6
 8009af4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009af8:	4a4c      	ldr	r2, [pc, #304]	; (8009c2c <ai_platform_network_init+0x1d4>)
 8009afa:	2301      	movs	r3, #1
 8009afc:	6093      	str	r3, [r2, #8]
 8009afe:	6893      	ldr	r3, [r2, #8]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d1fc      	bne.n	8009afe <ai_platform_network_init+0xa6>
 8009b04:	4b47      	ldr	r3, [pc, #284]	; (8009c24 <ai_platform_network_init+0x1cc>)
 8009b06:	6013      	str	r3, [r2, #0]
 8009b08:	6812      	ldr	r2, [r2, #0]
 8009b0a:	4b47      	ldr	r3, [pc, #284]	; (8009c28 <ai_platform_network_init+0x1d0>)
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	d11c      	bne.n	8009b4a <ai_platform_network_init+0xf2>
 8009b10:	f7ff fbe6 	bl	80092e0 <_ai_platform_release_crc>
 8009b14:	2e00      	cmp	r6, #0
 8009b16:	d06f      	beq.n	8009bf8 <ai_platform_network_init+0x1a0>
 8009b18:	4b45      	ldr	r3, [pc, #276]	; (8009c30 <ai_platform_network_init+0x1d8>)
 8009b1a:	6832      	ldr	r2, [r6, #0]
 8009b1c:	429a      	cmp	r2, r3
 8009b1e:	d115      	bne.n	8009b4c <ai_platform_network_init+0xf4>
 8009b20:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8009b24:	6933      	ldr	r3, [r6, #16]
 8009b26:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 8009b2a:	89f7      	ldrh	r7, [r6, #14]
 8009b2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b2e:	e9c4 2107 	strd	r2, r1, [r4, #28]
 8009b32:	2303      	movs	r3, #3
 8009b34:	84e7      	strh	r7, [r4, #38]	; 0x26
 8009b36:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 8009b3a:	60e3      	str	r3, [r4, #12]
 8009b3c:	4620      	mov	r0, r4
 8009b3e:	4626      	mov	r6, r4
 8009b40:	f000 fbc2 	bl	800a2c8 <ai_layers_init_all>
 8009b44:	4630      	mov	r0, r6
 8009b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b4a:	e7fe      	b.n	8009b4a <ai_platform_network_init+0xf2>
 8009b4c:	2101      	movs	r1, #1
 8009b4e:	4630      	mov	r0, r6
 8009b50:	4635      	mov	r5, r6
 8009b52:	6876      	ldr	r6, [r6, #4]
 8009b54:	f7ff fb74 	bl	8009240 <ai_buffer_get_size>
 8009b58:	f105 081c 	add.w	r8, r5, #28
 8009b5c:	4681      	mov	r9, r0
 8009b5e:	2101      	movs	r1, #1
 8009b60:	4640      	mov	r0, r8
 8009b62:	6a2f      	ldr	r7, [r5, #32]
 8009b64:	f7ff fb6c 	bl	8009240 <ai_buffer_get_size>
 8009b68:	f1b9 0f00 	cmp.w	r9, #0
 8009b6c:	d025      	beq.n	8009bba <ai_platform_network_init+0x162>
 8009b6e:	2201      	movs	r2, #1
 8009b70:	4696      	mov	lr, r2
 8009b72:	bb30      	cbnz	r0, 8009bc2 <ai_platform_network_init+0x16a>
 8009b74:	4680      	mov	r8, r0
 8009b76:	4607      	mov	r7, r0
 8009b78:	b376      	cbz	r6, 8009bd8 <ai_platform_network_init+0x180>
 8009b7a:	8be3      	ldrh	r3, [r4, #30]
 8009b7c:	4573      	cmp	r3, lr
 8009b7e:	d323      	bcc.n	8009bc8 <ai_platform_network_init+0x170>
 8009b80:	b142      	cbz	r2, 8009b94 <ai_platform_network_init+0x13c>
 8009b82:	46ac      	mov	ip, r5
 8009b84:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009b88:	6a25      	ldr	r5, [r4, #32]
 8009b8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009b8c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8009b90:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8009b94:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8009b96:	f8a4 e01e 	strh.w	lr, [r4, #30]
 8009b9a:	2600      	movs	r6, #0
 8009b9c:	42bb      	cmp	r3, r7
 8009b9e:	83a6      	strh	r6, [r4, #28]
 8009ba0:	d323      	bcc.n	8009bea <ai_platform_network_init+0x192>
 8009ba2:	b37f      	cbz	r7, 8009c04 <ai_platform_network_init+0x1ac>
 8009ba4:	46c4      	mov	ip, r8
 8009ba6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009baa:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8009bac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009bae:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8009bb2:	46b6      	mov	lr, r6
 8009bb4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8009bb8:	e7bb      	b.n	8009b32 <ai_platform_network_init+0xda>
 8009bba:	464a      	mov	r2, r9
 8009bbc:	46ce      	mov	lr, r9
 8009bbe:	464d      	mov	r5, r9
 8009bc0:	e7d7      	b.n	8009b72 <ai_platform_network_init+0x11a>
 8009bc2:	b30f      	cbz	r7, 8009c08 <ai_platform_network_init+0x1b0>
 8009bc4:	2701      	movs	r7, #1
 8009bc6:	e7d7      	b.n	8009b78 <ai_platform_network_init+0x120>
 8009bc8:	2212      	movs	r2, #18
 8009bca:	2116      	movs	r1, #22
 8009bcc:	f104 0010 	add.w	r0, r4, #16
 8009bd0:	f000 fb44 	bl	800a25c <core_set_error>
 8009bd4:	2600      	movs	r6, #0
 8009bd6:	e78c      	b.n	8009af2 <ai_platform_network_init+0x9a>
 8009bd8:	f1b9 0f00 	cmp.w	r9, #0
 8009bdc:	d0cd      	beq.n	8009b7a <ai_platform_network_init+0x122>
 8009bde:	2110      	movs	r1, #16
 8009be0:	2212      	movs	r2, #18
 8009be2:	1860      	adds	r0, r4, r1
 8009be4:	f000 fb3a 	bl	800a25c <core_set_error>
 8009be8:	e783      	b.n	8009af2 <ai_platform_network_init+0x9a>
 8009bea:	2213      	movs	r2, #19
 8009bec:	2116      	movs	r1, #22
 8009bee:	f104 0010 	add.w	r0, r4, #16
 8009bf2:	f000 fb33 	bl	800a25c <core_set_error>
 8009bf6:	e77c      	b.n	8009af2 <ai_platform_network_init+0x9a>
 8009bf8:	2110      	movs	r1, #16
 8009bfa:	2211      	movs	r2, #17
 8009bfc:	1860      	adds	r0, r4, r1
 8009bfe:	f000 fb2d 	bl	800a25c <core_set_error>
 8009c02:	e776      	b.n	8009af2 <ai_platform_network_init+0x9a>
 8009c04:	46be      	mov	lr, r7
 8009c06:	e794      	b.n	8009b32 <ai_platform_network_init+0xda>
 8009c08:	2110      	movs	r1, #16
 8009c0a:	2213      	movs	r2, #19
 8009c0c:	1860      	adds	r0, r4, r1
 8009c0e:	f000 fb25 	bl	800a25c <core_set_error>
 8009c12:	463e      	mov	r6, r7
 8009c14:	e76d      	b.n	8009af2 <ai_platform_network_init+0x9a>
 8009c16:	bf00      	nop
 8009c18:	a1c00100 	.word	0xa1c00100
 8009c1c:	e0042000 	.word	0xe0042000
 8009c20:	58024000 	.word	0x58024000
 8009c24:	f407a5c2 	.word	0xf407a5c2
 8009c28:	b5e8b5cd 	.word	0xb5e8b5cd
 8009c2c:	40023000 	.word	0x40023000
 8009c30:	a1facade 	.word	0xa1facade

08009c34 <ai_platform_network_post_init>:
 8009c34:	b538      	push	{r3, r4, r5, lr}
 8009c36:	b1f0      	cbz	r0, 8009c76 <ai_platform_network_post_init+0x42>
 8009c38:	4b3c      	ldr	r3, [pc, #240]	; (8009d2c <ai_platform_network_post_init+0xf8>)
 8009c3a:	6802      	ldr	r2, [r0, #0]
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	4604      	mov	r4, r0
 8009c40:	d119      	bne.n	8009c76 <ai_platform_network_post_init+0x42>
 8009c42:	f7ff fb4b 	bl	80092dc <_ai_platform_acquire_crc>
 8009c46:	4b3a      	ldr	r3, [pc, #232]	; (8009d30 <ai_platform_network_post_init+0xfc>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c52:	d03b      	beq.n	8009ccc <ai_platform_network_post_init+0x98>
 8009c54:	4a37      	ldr	r2, [pc, #220]	; (8009d34 <ai_platform_network_post_init+0x100>)
 8009c56:	2301      	movs	r3, #1
 8009c58:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009c5c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d1fb      	bne.n	8009c5c <ai_platform_network_post_init+0x28>
 8009c64:	4b34      	ldr	r3, [pc, #208]	; (8009d38 <ai_platform_network_post_init+0x104>)
 8009c66:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8009c6a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009c6e:	4b33      	ldr	r3, [pc, #204]	; (8009d3c <ai_platform_network_post_init+0x108>)
 8009c70:	429a      	cmp	r2, r3
 8009c72:	d037      	beq.n	8009ce4 <ai_platform_network_post_init+0xb0>
 8009c74:	e7fe      	b.n	8009c74 <ai_platform_network_post_init+0x40>
 8009c76:	f7ff fb31 	bl	80092dc <_ai_platform_acquire_crc>
 8009c7a:	4b2d      	ldr	r3, [pc, #180]	; (8009d30 <ai_platform_network_post_init+0xfc>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009c82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c86:	d010      	beq.n	8009caa <ai_platform_network_post_init+0x76>
 8009c88:	4a2a      	ldr	r2, [pc, #168]	; (8009d34 <ai_platform_network_post_init+0x100>)
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009c90:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d1fb      	bne.n	8009c90 <ai_platform_network_post_init+0x5c>
 8009c98:	4b27      	ldr	r3, [pc, #156]	; (8009d38 <ai_platform_network_post_init+0x104>)
 8009c9a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8009c9e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009ca2:	4b26      	ldr	r3, [pc, #152]	; (8009d3c <ai_platform_network_post_init+0x108>)
 8009ca4:	429a      	cmp	r2, r3
 8009ca6:	d00d      	beq.n	8009cc4 <ai_platform_network_post_init+0x90>
 8009ca8:	e7fe      	b.n	8009ca8 <ai_platform_network_post_init+0x74>
 8009caa:	4a25      	ldr	r2, [pc, #148]	; (8009d40 <ai_platform_network_post_init+0x10c>)
 8009cac:	2301      	movs	r3, #1
 8009cae:	6093      	str	r3, [r2, #8]
 8009cb0:	6893      	ldr	r3, [r2, #8]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d1fc      	bne.n	8009cb0 <ai_platform_network_post_init+0x7c>
 8009cb6:	4b20      	ldr	r3, [pc, #128]	; (8009d38 <ai_platform_network_post_init+0x104>)
 8009cb8:	6013      	str	r3, [r2, #0]
 8009cba:	6812      	ldr	r2, [r2, #0]
 8009cbc:	4b1f      	ldr	r3, [pc, #124]	; (8009d3c <ai_platform_network_post_init+0x108>)
 8009cbe:	429a      	cmp	r2, r3
 8009cc0:	d000      	beq.n	8009cc4 <ai_platform_network_post_init+0x90>
 8009cc2:	e7fe      	b.n	8009cc2 <ai_platform_network_post_init+0x8e>
 8009cc4:	f7ff fb0c 	bl	80092e0 <_ai_platform_release_crc>
 8009cc8:	2000      	movs	r0, #0
 8009cca:	bd38      	pop	{r3, r4, r5, pc}
 8009ccc:	4a1c      	ldr	r2, [pc, #112]	; (8009d40 <ai_platform_network_post_init+0x10c>)
 8009cce:	2301      	movs	r3, #1
 8009cd0:	6093      	str	r3, [r2, #8]
 8009cd2:	6893      	ldr	r3, [r2, #8]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d1fc      	bne.n	8009cd2 <ai_platform_network_post_init+0x9e>
 8009cd8:	4b17      	ldr	r3, [pc, #92]	; (8009d38 <ai_platform_network_post_init+0x104>)
 8009cda:	6013      	str	r3, [r2, #0]
 8009cdc:	6812      	ldr	r2, [r2, #0]
 8009cde:	4b17      	ldr	r3, [pc, #92]	; (8009d3c <ai_platform_network_post_init+0x108>)
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	d11a      	bne.n	8009d1a <ai_platform_network_post_init+0xe6>
 8009ce4:	f7ff fafc 	bl	80092e0 <_ai_platform_release_crc>
 8009ce8:	68e3      	ldr	r3, [r4, #12]
 8009cea:	f013 0502 	ands.w	r5, r3, #2
 8009cee:	d015      	beq.n	8009d1c <ai_platform_network_post_init+0xe8>
 8009cf0:	4620      	mov	r0, r4
 8009cf2:	f000 faf7 	bl	800a2e4 <ai_layers_post_init_all>
 8009cf6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009cf8:	b16b      	cbz	r3, 8009d16 <ai_platform_network_post_init+0xe2>
 8009cfa:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8009cfc:	e007      	b.n	8009d0e <ai_platform_network_post_init+0xda>
 8009cfe:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8009d02:	4798      	blx	r3
 8009d04:	692b      	ldr	r3, [r5, #16]
 8009d06:	42ab      	cmp	r3, r5
 8009d08:	d005      	beq.n	8009d16 <ai_platform_network_post_init+0xe2>
 8009d0a:	b123      	cbz	r3, 8009d16 <ai_platform_network_post_init+0xe2>
 8009d0c:	461d      	mov	r5, r3
 8009d0e:	4629      	mov	r1, r5
 8009d10:	2000      	movs	r0, #0
 8009d12:	2d00      	cmp	r5, #0
 8009d14:	d1f3      	bne.n	8009cfe <ai_platform_network_post_init+0xca>
 8009d16:	2001      	movs	r0, #1
 8009d18:	bd38      	pop	{r3, r4, r5, pc}
 8009d1a:	e7fe      	b.n	8009d1a <ai_platform_network_post_init+0xe6>
 8009d1c:	2210      	movs	r2, #16
 8009d1e:	2111      	movs	r1, #17
 8009d20:	18a0      	adds	r0, r4, r2
 8009d22:	f000 fa9b 	bl	800a25c <core_set_error>
 8009d26:	4628      	mov	r0, r5
 8009d28:	bd38      	pop	{r3, r4, r5, pc}
 8009d2a:	bf00      	nop
 8009d2c:	a1c00100 	.word	0xa1c00100
 8009d30:	e0042000 	.word	0xe0042000
 8009d34:	58024000 	.word	0x58024000
 8009d38:	f407a5c2 	.word	0xf407a5c2
 8009d3c:	b5e8b5cd 	.word	0xb5e8b5cd
 8009d40:	40023000 	.word	0x40023000

08009d44 <ai_platform_network_process>:
 8009d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d48:	460e      	mov	r6, r1
 8009d4a:	b085      	sub	sp, #20
 8009d4c:	4693      	mov	fp, r2
 8009d4e:	4605      	mov	r5, r0
 8009d50:	b120      	cbz	r0, 8009d5c <ai_platform_network_process+0x18>
 8009d52:	4bb8      	ldr	r3, [pc, #736]	; (800a034 <ai_platform_network_process+0x2f0>)
 8009d54:	6802      	ldr	r2, [r0, #0]
 8009d56:	429a      	cmp	r2, r3
 8009d58:	bf18      	it	ne
 8009d5a:	2500      	movne	r5, #0
 8009d5c:	f7ff fabe 	bl	80092dc <_ai_platform_acquire_crc>
 8009d60:	4bb5      	ldr	r3, [pc, #724]	; (800a038 <ai_platform_network_process+0x2f4>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009d68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d6c:	d010      	beq.n	8009d90 <ai_platform_network_process+0x4c>
 8009d6e:	4ab3      	ldr	r2, [pc, #716]	; (800a03c <ai_platform_network_process+0x2f8>)
 8009d70:	2301      	movs	r3, #1
 8009d72:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009d76:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d1fb      	bne.n	8009d76 <ai_platform_network_process+0x32>
 8009d7e:	4bb0      	ldr	r3, [pc, #704]	; (800a040 <ai_platform_network_process+0x2fc>)
 8009d80:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8009d84:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009d88:	4bae      	ldr	r3, [pc, #696]	; (800a044 <ai_platform_network_process+0x300>)
 8009d8a:	429a      	cmp	r2, r3
 8009d8c:	d00d      	beq.n	8009daa <ai_platform_network_process+0x66>
 8009d8e:	e7fe      	b.n	8009d8e <ai_platform_network_process+0x4a>
 8009d90:	4aad      	ldr	r2, [pc, #692]	; (800a048 <ai_platform_network_process+0x304>)
 8009d92:	2301      	movs	r3, #1
 8009d94:	6093      	str	r3, [r2, #8]
 8009d96:	6893      	ldr	r3, [r2, #8]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d1fc      	bne.n	8009d96 <ai_platform_network_process+0x52>
 8009d9c:	4ba8      	ldr	r3, [pc, #672]	; (800a040 <ai_platform_network_process+0x2fc>)
 8009d9e:	6013      	str	r3, [r2, #0]
 8009da0:	6812      	ldr	r2, [r2, #0]
 8009da2:	4ba8      	ldr	r3, [pc, #672]	; (800a044 <ai_platform_network_process+0x300>)
 8009da4:	429a      	cmp	r2, r3
 8009da6:	f040 812c 	bne.w	800a002 <ai_platform_network_process+0x2be>
 8009daa:	f7ff fa99 	bl	80092e0 <_ai_platform_release_crc>
 8009dae:	2d00      	cmp	r5, #0
 8009db0:	f000 8154 	beq.w	800a05c <ai_platform_network_process+0x318>
 8009db4:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	f000 8124 	beq.w	800a004 <ai_platform_network_process+0x2c0>
 8009dbc:	68eb      	ldr	r3, [r5, #12]
 8009dbe:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8009dc2:	f003 0303 	and.w	r3, r3, #3
 8009dc6:	2700      	movs	r7, #0
 8009dc8:	2b03      	cmp	r3, #3
 8009dca:	616f      	str	r7, [r5, #20]
 8009dcc:	f040 813e 	bne.w	800a04c <ai_platform_network_process+0x308>
 8009dd0:	2e00      	cmp	r6, #0
 8009dd2:	f000 811d 	beq.w	800a010 <ai_platform_network_process+0x2cc>
 8009dd6:	f1ba 0f00 	cmp.w	sl, #0
 8009dda:	f000 8119 	beq.w	800a010 <ai_platform_network_process+0x2cc>
 8009dde:	f8ba 3000 	ldrh.w	r3, [sl]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	f000 8114 	beq.w	800a010 <ai_platform_network_process+0x2cc>
 8009de8:	69b3      	ldr	r3, [r6, #24]
 8009dea:	f8cd b00c 	str.w	fp, [sp, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	e9cd 3501 	strd	r3, r5, [sp, #4]
 8009df4:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d072      	beq.n	8009ee2 <ai_platform_network_process+0x19e>
 8009dfc:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8009e00:	2c00      	cmp	r4, #0
 8009e02:	d06e      	beq.n	8009ee2 <ai_platform_network_process+0x19e>
 8009e04:	f8da 3008 	ldr.w	r3, [sl, #8]
 8009e08:	f8d3 9000 	ldr.w	r9, [r3]
 8009e0c:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8009e10:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8009e14:	f000 81de 	beq.w	800a1d4 <ai_platform_network_process+0x490>
 8009e18:	69a3      	ldr	r3, [r4, #24]
 8009e1a:	2101      	movs	r1, #1
 8009e1c:	4630      	mov	r0, r6
 8009e1e:	685d      	ldr	r5, [r3, #4]
 8009e20:	f7ff fa0e 	bl	8009240 <ai_buffer_get_size>
 8009e24:	4285      	cmp	r5, r0
 8009e26:	f0c0 811b 	bcc.w	800a060 <ai_platform_network_process+0x31c>
 8009e2a:	68e0      	ldr	r0, [r4, #12]
 8009e2c:	69b1      	ldr	r1, [r6, #24]
 8009e2e:	68c2      	ldr	r2, [r0, #12]
 8009e30:	68cb      	ldr	r3, [r1, #12]
 8009e32:	429a      	cmp	r2, r3
 8009e34:	f040 8114 	bne.w	800a060 <ai_platform_network_process+0x31c>
 8009e38:	6882      	ldr	r2, [r0, #8]
 8009e3a:	688b      	ldr	r3, [r1, #8]
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	f040 810f 	bne.w	800a060 <ai_platform_network_process+0x31c>
 8009e42:	6842      	ldr	r2, [r0, #4]
 8009e44:	684b      	ldr	r3, [r1, #4]
 8009e46:	429a      	cmp	r2, r3
 8009e48:	f040 810a 	bne.w	800a060 <ai_platform_network_process+0x31c>
 8009e4c:	69a3      	ldr	r3, [r4, #24]
 8009e4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009e52:	f001 f989 	bl	800b168 <ai_array_get_data_byte_size>
 8009e56:	4605      	mov	r5, r0
 8009e58:	4620      	mov	r0, r4
 8009e5a:	f001 f99d 	bl	800b198 <get_tensor_byte_size>
 8009e5e:	4285      	cmp	r5, r0
 8009e60:	f0c0 80fe 	bcc.w	800a060 <ai_platform_network_process+0x31c>
 8009e64:	69a3      	ldr	r3, [r4, #24]
 8009e66:	6818      	ldr	r0, [r3, #0]
 8009e68:	f001 f8ea 	bl	800b040 <ai_array_to_buffer_fmt>
 8009e6c:	6833      	ldr	r3, [r6, #0]
 8009e6e:	4058      	eors	r0, r3
 8009e70:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8009e74:	f040 81b9 	bne.w	800a1ea <ai_platform_network_process+0x4a6>
 8009e78:	6873      	ldr	r3, [r6, #4]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	f000 81ac 	beq.w	800a1d8 <ai_platform_network_process+0x494>
 8009e80:	69b3      	ldr	r3, [r6, #24]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	f000 819c 	beq.w	800a1c2 <ai_platform_network_process+0x47e>
 8009e8a:	9a01      	ldr	r2, [sp, #4]
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	bf38      	it	cc
 8009e90:	461a      	movcc	r2, r3
 8009e92:	4620      	mov	r0, r4
 8009e94:	9201      	str	r2, [sp, #4]
 8009e96:	f001 f97f 	bl	800b198 <get_tensor_byte_size>
 8009e9a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009e9e:	69b3      	ldr	r3, [r6, #24]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	fb00 f303 	mul.w	r3, r0, r3
 8009ea6:	f8c8 300c 	str.w	r3, [r8, #12]
 8009eaa:	6871      	ldr	r1, [r6, #4]
 8009eac:	f8c8 1004 	str.w	r1, [r8, #4]
 8009eb0:	440b      	add	r3, r1
 8009eb2:	f849 300b 	str.w	r3, [r9, fp]
 8009eb6:	69a0      	ldr	r0, [r4, #24]
 8009eb8:	6803      	ldr	r3, [r0, #0]
 8009eba:	009a      	lsls	r2, r3, #2
 8009ebc:	f107 0701 	add.w	r7, r7, #1
 8009ec0:	f106 061c 	add.w	r6, r6, #28
 8009ec4:	f100 80af 	bmi.w	800a026 <ai_platform_network_process+0x2e2>
 8009ec8:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8009ecc:	1a9b      	subs	r3, r3, r2
 8009ece:	4419      	add	r1, r3
 8009ed0:	6081      	str	r1, [r0, #8]
 8009ed2:	69a3      	ldr	r3, [r4, #24]
 8009ed4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8009ed8:	60da      	str	r2, [r3, #12]
 8009eda:	f8ba 3000 	ldrh.w	r3, [sl]
 8009ede:	42bb      	cmp	r3, r7
 8009ee0:	d888      	bhi.n	8009df4 <ai_platform_network_process+0xb0>
 8009ee2:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 8009ee6:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8009ee8:	f1bb 0f00 	cmp.w	fp, #0
 8009eec:	f000 8186 	beq.w	800a1fc <ai_platform_network_process+0x4b8>
 8009ef0:	2a01      	cmp	r2, #1
 8009ef2:	f240 815e 	bls.w	800a1b2 <ai_platform_network_process+0x46e>
 8009ef6:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 8009efa:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	f000 8157 	beq.w	800a1b2 <ai_platform_network_process+0x46e>
 8009f04:	465e      	mov	r6, fp
 8009f06:	2700      	movs	r7, #0
 8009f08:	462c      	mov	r4, r5
 8009f0a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	f000 80b4 	beq.w	800a07c <ai_platform_network_process+0x338>
 8009f14:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 8009f18:	2d00      	cmp	r5, #0
 8009f1a:	f000 80af 	beq.w	800a07c <ai_platform_network_process+0x338>
 8009f1e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8009f22:	f8d3 8000 	ldr.w	r8, [r3]
 8009f26:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 8009f2a:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8009f2e:	f000 8171 	beq.w	800a214 <ai_platform_network_process+0x4d0>
 8009f32:	69ab      	ldr	r3, [r5, #24]
 8009f34:	2101      	movs	r1, #1
 8009f36:	685b      	ldr	r3, [r3, #4]
 8009f38:	9302      	str	r3, [sp, #8]
 8009f3a:	4630      	mov	r0, r6
 8009f3c:	f7ff f980 	bl	8009240 <ai_buffer_get_size>
 8009f40:	9b02      	ldr	r3, [sp, #8]
 8009f42:	4283      	cmp	r3, r0
 8009f44:	f0c0 8134 	bcc.w	800a1b0 <ai_platform_network_process+0x46c>
 8009f48:	68e8      	ldr	r0, [r5, #12]
 8009f4a:	69b1      	ldr	r1, [r6, #24]
 8009f4c:	68c2      	ldr	r2, [r0, #12]
 8009f4e:	68cb      	ldr	r3, [r1, #12]
 8009f50:	429a      	cmp	r2, r3
 8009f52:	f040 812d 	bne.w	800a1b0 <ai_platform_network_process+0x46c>
 8009f56:	6882      	ldr	r2, [r0, #8]
 8009f58:	688b      	ldr	r3, [r1, #8]
 8009f5a:	429a      	cmp	r2, r3
 8009f5c:	f040 8128 	bne.w	800a1b0 <ai_platform_network_process+0x46c>
 8009f60:	6842      	ldr	r2, [r0, #4]
 8009f62:	684b      	ldr	r3, [r1, #4]
 8009f64:	429a      	cmp	r2, r3
 8009f66:	f040 8123 	bne.w	800a1b0 <ai_platform_network_process+0x46c>
 8009f6a:	69ab      	ldr	r3, [r5, #24]
 8009f6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009f70:	f001 f8fa 	bl	800b168 <ai_array_get_data_byte_size>
 8009f74:	9002      	str	r0, [sp, #8]
 8009f76:	4628      	mov	r0, r5
 8009f78:	f001 f90e 	bl	800b198 <get_tensor_byte_size>
 8009f7c:	9b02      	ldr	r3, [sp, #8]
 8009f7e:	4283      	cmp	r3, r0
 8009f80:	f0c0 8116 	bcc.w	800a1b0 <ai_platform_network_process+0x46c>
 8009f84:	69ab      	ldr	r3, [r5, #24]
 8009f86:	6818      	ldr	r0, [r3, #0]
 8009f88:	f001 f85a 	bl	800b040 <ai_array_to_buffer_fmt>
 8009f8c:	6833      	ldr	r3, [r6, #0]
 8009f8e:	4058      	eors	r0, r3
 8009f90:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8009f94:	f040 8136 	bne.w	800a204 <ai_platform_network_process+0x4c0>
 8009f98:	6873      	ldr	r3, [r6, #4]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	f000 814d 	beq.w	800a23a <ai_platform_network_process+0x4f6>
 8009fa0:	69b3      	ldr	r3, [r6, #24]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	f000 813f 	beq.w	800a228 <ai_platform_network_process+0x4e4>
 8009faa:	9a01      	ldr	r2, [sp, #4]
 8009fac:	429a      	cmp	r2, r3
 8009fae:	bf38      	it	cc
 8009fb0:	461a      	movcc	r2, r3
 8009fb2:	4628      	mov	r0, r5
 8009fb4:	9201      	str	r2, [sp, #4]
 8009fb6:	f001 f8ef 	bl	800b198 <get_tensor_byte_size>
 8009fba:	f8ca 0008 	str.w	r0, [sl, #8]
 8009fbe:	69b3      	ldr	r3, [r6, #24]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	fb00 f303 	mul.w	r3, r0, r3
 8009fc6:	f8ca 300c 	str.w	r3, [sl, #12]
 8009fca:	6871      	ldr	r1, [r6, #4]
 8009fcc:	f8ca 1004 	str.w	r1, [sl, #4]
 8009fd0:	440b      	add	r3, r1
 8009fd2:	f848 300b 	str.w	r3, [r8, fp]
 8009fd6:	69a8      	ldr	r0, [r5, #24]
 8009fd8:	6803      	ldr	r3, [r0, #0]
 8009fda:	009b      	lsls	r3, r3, #2
 8009fdc:	f107 0701 	add.w	r7, r7, #1
 8009fe0:	f106 061c 	add.w	r6, r6, #28
 8009fe4:	d445      	bmi.n	800a072 <ai_platform_network_process+0x32e>
 8009fe6:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8009fea:	1a9b      	subs	r3, r3, r2
 8009fec:	4419      	add	r1, r3
 8009fee:	6081      	str	r1, [r0, #8]
 8009ff0:	69ab      	ldr	r3, [r5, #24]
 8009ff2:	f8da 2004 	ldr.w	r2, [sl, #4]
 8009ff6:	60da      	str	r2, [r3, #12]
 8009ff8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8009ffc:	429f      	cmp	r7, r3
 8009ffe:	d384      	bcc.n	8009f0a <ai_platform_network_process+0x1c6>
 800a000:	e03c      	b.n	800a07c <ai_platform_network_process+0x338>
 800a002:	e7fe      	b.n	800a002 <ai_platform_network_process+0x2be>
 800a004:	68ea      	ldr	r2, [r5, #12]
 800a006:	616b      	str	r3, [r5, #20]
 800a008:	f002 0203 	and.w	r2, r2, #3
 800a00c:	2a03      	cmp	r2, #3
 800a00e:	d11d      	bne.n	800a04c <ai_platform_network_process+0x308>
 800a010:	2217      	movs	r2, #23
 800a012:	2112      	movs	r1, #18
 800a014:	f105 0010 	add.w	r0, r5, #16
 800a018:	f000 f920 	bl	800a25c <core_set_error>
 800a01c:	2400      	movs	r4, #0
 800a01e:	4620      	mov	r0, r4
 800a020:	b005      	add	sp, #20
 800a022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a026:	f8ba 3000 	ldrh.w	r3, [sl]
 800a02a:	429f      	cmp	r7, r3
 800a02c:	f4ff aee2 	bcc.w	8009df4 <ai_platform_network_process+0xb0>
 800a030:	e757      	b.n	8009ee2 <ai_platform_network_process+0x19e>
 800a032:	bf00      	nop
 800a034:	a1c00100 	.word	0xa1c00100
 800a038:	e0042000 	.word	0xe0042000
 800a03c:	58024000 	.word	0x58024000
 800a040:	f407a5c2 	.word	0xf407a5c2
 800a044:	b5e8b5cd 	.word	0xb5e8b5cd
 800a048:	40023000 	.word	0x40023000
 800a04c:	2230      	movs	r2, #48	; 0x30
 800a04e:	2111      	movs	r1, #17
 800a050:	f105 0010 	add.w	r0, r5, #16
 800a054:	f000 f902 	bl	800a25c <core_set_error>
 800a058:	2400      	movs	r4, #0
 800a05a:	e7e0      	b.n	800a01e <ai_platform_network_process+0x2da>
 800a05c:	462c      	mov	r4, r5
 800a05e:	e7de      	b.n	800a01e <ai_platform_network_process+0x2da>
 800a060:	9d02      	ldr	r5, [sp, #8]
 800a062:	2218      	movs	r2, #24
 800a064:	2112      	movs	r1, #18
 800a066:	f105 0010 	add.w	r0, r5, #16
 800a06a:	f000 f8f7 	bl	800a25c <core_set_error>
 800a06e:	2400      	movs	r4, #0
 800a070:	e7d5      	b.n	800a01e <ai_platform_network_process+0x2da>
 800a072:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800a076:	429f      	cmp	r7, r3
 800a078:	f4ff af47 	bcc.w	8009f0a <ai_platform_network_process+0x1c6>
 800a07c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800a080:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800a082:	82a3      	strh	r3, [r4, #20]
 800a084:	4625      	mov	r5, r4
 800a086:	2a00      	cmp	r2, #0
 800a088:	f040 808c 	bne.w	800a1a4 <ai_platform_network_process+0x460>
 800a08c:	4616      	mov	r6, r2
 800a08e:	4617      	mov	r7, r2
 800a090:	8aec      	ldrh	r4, [r5, #22]
 800a092:	429c      	cmp	r4, r3
 800a094:	bf38      	it	cc
 800a096:	46ab      	movcc	fp, r5
 800a098:	d2c1      	bcs.n	800a01e <ai_platform_network_process+0x2da>
 800a09a:	2e00      	cmp	r6, #0
 800a09c:	d030      	beq.n	800a100 <ai_platform_network_process+0x3bc>
 800a09e:	f04f 0800 	mov.w	r8, #0
 800a0a2:	e014      	b.n	800a0ce <ai_platform_network_process+0x38a>
 800a0a4:	6882      	ldr	r2, [r0, #8]
 800a0a6:	68c5      	ldr	r5, [r0, #12]
 800a0a8:	6863      	ldr	r3, [r4, #4]
 800a0aa:	1b52      	subs	r2, r2, r5
 800a0ac:	4413      	add	r3, r2
 800a0ae:	6083      	str	r3, [r0, #8]
 800a0b0:	698b      	ldr	r3, [r1, #24]
 800a0b2:	6862      	ldr	r2, [r4, #4]
 800a0b4:	60da      	str	r2, [r3, #12]
 800a0b6:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800a0ba:	f859 200a 	ldr.w	r2, [r9, sl]
 800a0be:	440b      	add	r3, r1
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	bf24      	itt	cs
 800a0c4:	68e3      	ldrcs	r3, [r4, #12]
 800a0c6:	1ad3      	subcs	r3, r2, r3
 800a0c8:	6063      	str	r3, [r4, #4]
 800a0ca:	f108 0801 	add.w	r8, r8, #1
 800a0ce:	8833      	ldrh	r3, [r6, #0]
 800a0d0:	4543      	cmp	r3, r8
 800a0d2:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 800a0d6:	d913      	bls.n	800a100 <ai_platform_network_process+0x3bc>
 800a0d8:	6873      	ldr	r3, [r6, #4]
 800a0da:	b18b      	cbz	r3, 800a100 <ai_platform_network_process+0x3bc>
 800a0dc:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 800a0e0:	b171      	cbz	r1, 800a100 <ai_platform_network_process+0x3bc>
 800a0e2:	6988      	ldr	r0, [r1, #24]
 800a0e4:	68b2      	ldr	r2, [r6, #8]
 800a0e6:	6803      	ldr	r3, [r0, #0]
 800a0e8:	f8d2 9000 	ldr.w	r9, [r2]
 800a0ec:	009d      	lsls	r5, r3, #2
 800a0ee:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800a0f2:	d5d7      	bpl.n	800a0a4 <ai_platform_network_process+0x360>
 800a0f4:	6881      	ldr	r1, [r0, #8]
 800a0f6:	68a2      	ldr	r2, [r4, #8]
 800a0f8:	6860      	ldr	r0, [r4, #4]
 800a0fa:	f000 ff1b 	bl	800af34 <st_int8_copy>
 800a0fe:	e7da      	b.n	800a0b6 <ai_platform_network_process+0x372>
 800a100:	4658      	mov	r0, fp
 800a102:	f000 f903 	bl	800a30c <ai_layers_forward_all>
 800a106:	2f00      	cmp	r7, #0
 800a108:	d03d      	beq.n	800a186 <ai_platform_network_process+0x442>
 800a10a:	2400      	movs	r4, #0
 800a10c:	e016      	b.n	800a13c <ai_platform_network_process+0x3f8>
 800a10e:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 800a112:	f859 100a 	ldr.w	r1, [r9, sl]
 800a116:	4413      	add	r3, r2
 800a118:	428b      	cmp	r3, r1
 800a11a:	bf24      	itt	cs
 800a11c:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 800a120:	1acb      	subcs	r3, r1, r3
 800a122:	f8c8 3004 	str.w	r3, [r8, #4]
 800a126:	6981      	ldr	r1, [r0, #24]
 800a128:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800a12c:	1b52      	subs	r2, r2, r5
 800a12e:	4413      	add	r3, r2
 800a130:	608b      	str	r3, [r1, #8]
 800a132:	6983      	ldr	r3, [r0, #24]
 800a134:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800a138:	60da      	str	r2, [r3, #12]
 800a13a:	3401      	adds	r4, #1
 800a13c:	883b      	ldrh	r3, [r7, #0]
 800a13e:	42a3      	cmp	r3, r4
 800a140:	d921      	bls.n	800a186 <ai_platform_network_process+0x442>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	b1fb      	cbz	r3, 800a186 <ai_platform_network_process+0x442>
 800a146:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800a14a:	b1e0      	cbz	r0, 800a186 <ai_platform_network_process+0x442>
 800a14c:	68ba      	ldr	r2, [r7, #8]
 800a14e:	6983      	ldr	r3, [r0, #24]
 800a150:	f8d2 9000 	ldr.w	r9, [r2]
 800a154:	681a      	ldr	r2, [r3, #0]
 800a156:	0092      	lsls	r2, r2, #2
 800a158:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800a15c:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 800a160:	d5d5      	bpl.n	800a10e <ai_platform_network_process+0x3ca>
 800a162:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 800a166:	6898      	ldr	r0, [r3, #8]
 800a168:	f000 fee4 	bl	800af34 <st_int8_copy>
 800a16c:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 800a170:	f859 200a 	ldr.w	r2, [r9, sl]
 800a174:	440b      	add	r3, r1
 800a176:	4293      	cmp	r3, r2
 800a178:	bf24      	itt	cs
 800a17a:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 800a17e:	1ad3      	subcs	r3, r2, r3
 800a180:	f8c8 3004 	str.w	r3, [r8, #4]
 800a184:	e7d9      	b.n	800a13a <ai_platform_network_process+0x3f6>
 800a186:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 800a18a:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800a18e:	3401      	adds	r4, #1
 800a190:	b2a4      	uxth	r4, r4
 800a192:	42a3      	cmp	r3, r4
 800a194:	f8ab 4016 	strh.w	r4, [fp, #22]
 800a198:	f63f af7f 	bhi.w	800a09a <ai_platform_network_process+0x356>
 800a19c:	4620      	mov	r0, r4
 800a19e:	b005      	add	sp, #20
 800a1a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1a4:	2a01      	cmp	r2, #1
 800a1a6:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 800a1a8:	d03c      	beq.n	800a224 <ai_platform_network_process+0x4e0>
 800a1aa:	f106 070c 	add.w	r7, r6, #12
 800a1ae:	e76f      	b.n	800a090 <ai_platform_network_process+0x34c>
 800a1b0:	4625      	mov	r5, r4
 800a1b2:	2218      	movs	r2, #24
 800a1b4:	2113      	movs	r1, #19
 800a1b6:	f105 0010 	add.w	r0, r5, #16
 800a1ba:	f000 f84f 	bl	800a25c <core_set_error>
 800a1be:	2400      	movs	r4, #0
 800a1c0:	e72d      	b.n	800a01e <ai_platform_network_process+0x2da>
 800a1c2:	9d02      	ldr	r5, [sp, #8]
 800a1c4:	4604      	mov	r4, r0
 800a1c6:	2221      	movs	r2, #33	; 0x21
 800a1c8:	2112      	movs	r1, #18
 800a1ca:	f105 0010 	add.w	r0, r5, #16
 800a1ce:	f000 f845 	bl	800a25c <core_set_error>
 800a1d2:	e724      	b.n	800a01e <ai_platform_network_process+0x2da>
 800a1d4:	9d02      	ldr	r5, [sp, #8]
 800a1d6:	e71b      	b.n	800a010 <ai_platform_network_process+0x2cc>
 800a1d8:	9d02      	ldr	r5, [sp, #8]
 800a1da:	4604      	mov	r4, r0
 800a1dc:	2217      	movs	r2, #23
 800a1de:	2112      	movs	r1, #18
 800a1e0:	f105 0010 	add.w	r0, r5, #16
 800a1e4:	f000 f83a 	bl	800a25c <core_set_error>
 800a1e8:	e719      	b.n	800a01e <ai_platform_network_process+0x2da>
 800a1ea:	9d02      	ldr	r5, [sp, #8]
 800a1ec:	2219      	movs	r2, #25
 800a1ee:	2112      	movs	r1, #18
 800a1f0:	f105 0010 	add.w	r0, r5, #16
 800a1f4:	f000 f832 	bl	800a25c <core_set_error>
 800a1f8:	2400      	movs	r4, #0
 800a1fa:	e710      	b.n	800a01e <ai_platform_network_process+0x2da>
 800a1fc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800a200:	82ab      	strh	r3, [r5, #20]
 800a202:	e740      	b.n	800a086 <ai_platform_network_process+0x342>
 800a204:	f104 0010 	add.w	r0, r4, #16
 800a208:	2219      	movs	r2, #25
 800a20a:	2113      	movs	r1, #19
 800a20c:	f000 f826 	bl	800a25c <core_set_error>
 800a210:	2400      	movs	r4, #0
 800a212:	e704      	b.n	800a01e <ai_platform_network_process+0x2da>
 800a214:	f104 0010 	add.w	r0, r4, #16
 800a218:	2217      	movs	r2, #23
 800a21a:	2113      	movs	r1, #19
 800a21c:	f000 f81e 	bl	800a25c <core_set_error>
 800a220:	4654      	mov	r4, sl
 800a222:	e6fc      	b.n	800a01e <ai_platform_network_process+0x2da>
 800a224:	2700      	movs	r7, #0
 800a226:	e733      	b.n	800a090 <ai_platform_network_process+0x34c>
 800a228:	4625      	mov	r5, r4
 800a22a:	2221      	movs	r2, #33	; 0x21
 800a22c:	4604      	mov	r4, r0
 800a22e:	2113      	movs	r1, #19
 800a230:	f105 0010 	add.w	r0, r5, #16
 800a234:	f000 f812 	bl	800a25c <core_set_error>
 800a238:	e6f1      	b.n	800a01e <ai_platform_network_process+0x2da>
 800a23a:	4625      	mov	r5, r4
 800a23c:	2217      	movs	r2, #23
 800a23e:	4604      	mov	r4, r0
 800a240:	2113      	movs	r1, #19
 800a242:	f105 0010 	add.w	r0, r5, #16
 800a246:	f000 f809 	bl	800a25c <core_set_error>
 800a24a:	e6e8      	b.n	800a01e <ai_platform_network_process+0x2da>

0800a24c <core_init>:
 800a24c:	2001      	movs	r0, #1
 800a24e:	4770      	bx	lr

0800a250 <core_get_error>:
 800a250:	4603      	mov	r3, r0
 800a252:	2200      	movs	r2, #0
 800a254:	6800      	ldr	r0, [r0, #0]
 800a256:	601a      	str	r2, [r3, #0]
 800a258:	4770      	bx	lr
 800a25a:	bf00      	nop

0800a25c <core_set_error>:
 800a25c:	4603      	mov	r3, r0
 800a25e:	7800      	ldrb	r0, [r0, #0]
 800a260:	b108      	cbz	r0, 800a266 <core_set_error+0xa>
 800a262:	2000      	movs	r0, #0
 800a264:	4770      	bx	lr
 800a266:	7019      	strb	r1, [r3, #0]
 800a268:	6819      	ldr	r1, [r3, #0]
 800a26a:	f362 211f 	bfi	r1, r2, #8, #24
 800a26e:	2001      	movs	r0, #1
 800a270:	6019      	str	r1, [r3, #0]
 800a272:	4770      	bx	lr

0800a274 <ai_check_custom_types>:
 800a274:	b082      	sub	sp, #8
 800a276:	4b13      	ldr	r3, [pc, #76]	; (800a2c4 <ai_check_custom_types+0x50>)
 800a278:	9301      	str	r3, [sp, #4]
 800a27a:	b118      	cbz	r0, 800a284 <ai_check_custom_types+0x10>
 800a27c:	7803      	ldrb	r3, [r0, #0]
 800a27e:	2b03      	cmp	r3, #3
 800a280:	d002      	beq.n	800a288 <ai_check_custom_types+0x14>
 800a282:	2000      	movs	r0, #0
 800a284:	b002      	add	sp, #8
 800a286:	4770      	bx	lr
 800a288:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a28c:	4293      	cmp	r3, r2
 800a28e:	d004      	beq.n	800a29a <ai_check_custom_types+0x26>
 800a290:	2001      	movs	r0, #1
 800a292:	f080 0001 	eor.w	r0, r0, #1
 800a296:	b002      	add	sp, #8
 800a298:	4770      	bx	lr
 800a29a:	7842      	ldrb	r2, [r0, #1]
 800a29c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	f100 0001 	add.w	r0, r0, #1
 800a2a6:	d1f3      	bne.n	800a290 <ai_check_custom_types+0x1c>
 800a2a8:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800a2ac:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	d1ed      	bne.n	800a290 <ai_check_custom_types+0x1c>
 800a2b4:	7842      	ldrb	r2, [r0, #1]
 800a2b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	d1e8      	bne.n	800a290 <ai_check_custom_types+0x1c>
 800a2be:	2000      	movs	r0, #0
 800a2c0:	e7e7      	b.n	800a292 <ai_check_custom_types+0x1e>
 800a2c2:	bf00      	nop
 800a2c4:	84048403 	.word	0x84048403

0800a2c8 <ai_layers_init_all>:
 800a2c8:	4601      	mov	r1, r0
 800a2ca:	2000      	movs	r0, #0
 800a2cc:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800a2ce:	b143      	cbz	r3, 800a2e2 <ai_layers_init_all+0x1a>
 800a2d0:	691a      	ldr	r2, [r3, #16]
 800a2d2:	60d9      	str	r1, [r3, #12]
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	f100 0001 	add.w	r0, r0, #1
 800a2da:	d002      	beq.n	800a2e2 <ai_layers_init_all+0x1a>
 800a2dc:	b10a      	cbz	r2, 800a2e2 <ai_layers_init_all+0x1a>
 800a2de:	4613      	mov	r3, r2
 800a2e0:	e7f5      	b.n	800a2ce <ai_layers_init_all+0x6>
 800a2e2:	4770      	bx	lr

0800a2e4 <ai_layers_post_init_all>:
 800a2e4:	b538      	push	{r3, r4, r5, lr}
 800a2e6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800a2e8:	2500      	movs	r5, #0
 800a2ea:	b16c      	cbz	r4, 800a308 <ai_layers_post_init_all+0x24>
 800a2ec:	6863      	ldr	r3, [r4, #4]
 800a2ee:	07db      	lsls	r3, r3, #31
 800a2f0:	d504      	bpl.n	800a2fc <ai_layers_post_init_all+0x18>
 800a2f2:	6a23      	ldr	r3, [r4, #32]
 800a2f4:	4620      	mov	r0, r4
 800a2f6:	b10b      	cbz	r3, 800a2fc <ai_layers_post_init_all+0x18>
 800a2f8:	4798      	blx	r3
 800a2fa:	3501      	adds	r5, #1
 800a2fc:	6923      	ldr	r3, [r4, #16]
 800a2fe:	42a3      	cmp	r3, r4
 800a300:	d002      	beq.n	800a308 <ai_layers_post_init_all+0x24>
 800a302:	b10b      	cbz	r3, 800a308 <ai_layers_post_init_all+0x24>
 800a304:	461c      	mov	r4, r3
 800a306:	e7f0      	b.n	800a2ea <ai_layers_post_init_all+0x6>
 800a308:	4628      	mov	r0, r5
 800a30a:	bd38      	pop	{r3, r4, r5, pc}

0800a30c <ai_layers_forward_all>:
 800a30c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a310:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 800a314:	4604      	mov	r4, r0
 800a316:	f1b8 0f00 	cmp.w	r8, #0
 800a31a:	d02b      	beq.n	800a374 <ai_layers_forward_all+0x68>
 800a31c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800a31e:	6381      	str	r1, [r0, #56]	; 0x38
 800a320:	b321      	cbz	r1, 800a36c <ai_layers_forward_all+0x60>
 800a322:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800a324:	2001      	movs	r0, #1
 800a326:	47c0      	blx	r8
 800a328:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a32a:	b1fe      	cbz	r6, 800a36c <ai_layers_forward_all+0x60>
 800a32c:	2700      	movs	r7, #0
 800a32e:	4631      	mov	r1, r6
 800a330:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a332:	2002      	movs	r0, #2
 800a334:	47c0      	blx	r8
 800a336:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800a338:	4628      	mov	r0, r5
 800a33a:	696b      	ldr	r3, [r5, #20]
 800a33c:	4798      	blx	r3
 800a33e:	692e      	ldr	r6, [r5, #16]
 800a340:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a342:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a344:	42b5      	cmp	r5, r6
 800a346:	f04f 0003 	mov.w	r0, #3
 800a34a:	d007      	beq.n	800a35c <ai_layers_forward_all+0x50>
 800a34c:	47c0      	blx	r8
 800a34e:	3701      	adds	r7, #1
 800a350:	63a6      	str	r6, [r4, #56]	; 0x38
 800a352:	2e00      	cmp	r6, #0
 800a354:	d1eb      	bne.n	800a32e <ai_layers_forward_all+0x22>
 800a356:	4638      	mov	r0, r7
 800a358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a35c:	2003      	movs	r0, #3
 800a35e:	47c0      	blx	r8
 800a360:	2300      	movs	r3, #0
 800a362:	3701      	adds	r7, #1
 800a364:	63a3      	str	r3, [r4, #56]	; 0x38
 800a366:	4638      	mov	r0, r7
 800a368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a36c:	2700      	movs	r7, #0
 800a36e:	4638      	mov	r0, r7
 800a370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a374:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800a376:	6385      	str	r5, [r0, #56]	; 0x38
 800a378:	2d00      	cmp	r5, #0
 800a37a:	d0f7      	beq.n	800a36c <ai_layers_forward_all+0x60>
 800a37c:	4647      	mov	r7, r8
 800a37e:	696b      	ldr	r3, [r5, #20]
 800a380:	4628      	mov	r0, r5
 800a382:	4798      	blx	r3
 800a384:	462b      	mov	r3, r5
 800a386:	692d      	ldr	r5, [r5, #16]
 800a388:	429d      	cmp	r5, r3
 800a38a:	d004      	beq.n	800a396 <ai_layers_forward_all+0x8a>
 800a38c:	63a5      	str	r5, [r4, #56]	; 0x38
 800a38e:	3701      	adds	r7, #1
 800a390:	2d00      	cmp	r5, #0
 800a392:	d1f4      	bne.n	800a37e <ai_layers_forward_all+0x72>
 800a394:	e7df      	b.n	800a356 <ai_layers_forward_all+0x4a>
 800a396:	2300      	movs	r3, #0
 800a398:	63a3      	str	r3, [r4, #56]	; 0x38
 800a39a:	3701      	adds	r7, #1
 800a39c:	e7db      	b.n	800a356 <ai_layers_forward_all+0x4a>
 800a39e:	bf00      	nop

0800a3a0 <forward_dense>:
 800a3a0:	6983      	ldr	r3, [r0, #24]
 800a3a2:	881a      	ldrh	r2, [r3, #0]
 800a3a4:	2a00      	cmp	r2, #0
 800a3a6:	f000 8181 	beq.w	800a6ac <forward_dense+0x30c>
 800a3aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3ae:	ed2d 8b02 	vpush	{d8}
 800a3b2:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800a3b6:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800a3ba:	b095      	sub	sp, #84	; 0x54
 800a3bc:	b105      	cbz	r5, 800a3c0 <forward_dense+0x20>
 800a3be:	682d      	ldr	r5, [r5, #0]
 800a3c0:	2a01      	cmp	r2, #1
 800a3c2:	f000 828f 	beq.w	800a8e4 <forward_dense+0x544>
 800a3c6:	f8dc 6010 	ldr.w	r6, [ip, #16]
 800a3ca:	b106      	cbz	r6, 800a3ce <forward_dense+0x2e>
 800a3cc:	6836      	ldr	r6, [r6, #0]
 800a3ce:	2a02      	cmp	r2, #2
 800a3d0:	f000 816e 	beq.w	800a6b0 <forward_dense+0x310>
 800a3d4:	f8dc 301c 	ldr.w	r3, [ip, #28]
 800a3d8:	930b      	str	r3, [sp, #44]	; 0x2c
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	f000 8274 	beq.w	800a8c8 <forward_dense+0x528>
 800a3e0:	4619      	mov	r1, r3
 800a3e2:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 800a3e6:	6809      	ldr	r1, [r1, #0]
 800a3e8:	910d      	str	r1, [sp, #52]	; 0x34
 800a3ea:	2b01      	cmp	r3, #1
 800a3ec:	f240 826e 	bls.w	800a8cc <forward_dense+0x52c>
 800a3f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	930b      	str	r3, [sp, #44]	; 0x2c
 800a3f6:	460b      	mov	r3, r1
 800a3f8:	68e8      	ldr	r0, [r5, #12]
 800a3fa:	68f7      	ldr	r7, [r6, #12]
 800a3fc:	6840      	ldr	r0, [r0, #4]
 800a3fe:	6999      	ldr	r1, [r3, #24]
 800a400:	9013      	str	r0, [sp, #76]	; 0x4c
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	680b      	ldr	r3, [r1, #0]
 800a406:	9012      	str	r0, [sp, #72]	; 0x48
 800a408:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 800a40c:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 800a410:	fb00 f404 	mul.w	r4, r0, r4
 800a414:	f3c3 5041 	ubfx	r0, r3, #21, #2
 800a418:	fa4e f000 	asr.w	r0, lr, r0
 800a41c:	2a03      	cmp	r2, #3
 800a41e:	9010      	str	r0, [sp, #64]	; 0x40
 800a420:	f000 825d 	beq.w	800a8de <forward_dense+0x53e>
 800a424:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 800a428:	f3c3 4343 	ubfx	r3, r3, #17, #4
 800a42c:	2a00      	cmp	r2, #0
 800a42e:	f000 8246 	beq.w	800a8be <forward_dense+0x51e>
 800a432:	6812      	ldr	r2, [r2, #0]
 800a434:	2a00      	cmp	r2, #0
 800a436:	f000 8242 	beq.w	800a8be <forward_dense+0x51e>
 800a43a:	2b04      	cmp	r3, #4
 800a43c:	f8d2 9018 	ldr.w	r9, [r2, #24]
 800a440:	f000 822c 	beq.w	800a89c <forward_dense+0x4fc>
 800a444:	2b08      	cmp	r3, #8
 800a446:	f000 8229 	beq.w	800a89c <forward_dense+0x4fc>
 800a44a:	f04f 0b00 	mov.w	fp, #0
 800a44e:	69b2      	ldr	r2, [r6, #24]
 800a450:	69ab      	ldr	r3, [r5, #24]
 800a452:	6891      	ldr	r1, [r2, #8]
 800a454:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a456:	689b      	ldr	r3, [r3, #8]
 800a458:	6952      	ldr	r2, [r2, #20]
 800a45a:	9106      	str	r1, [sp, #24]
 800a45c:	fb07 f404 	mul.w	r4, r7, r4
 800a460:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800a464:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a466:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800a46a:	4281      	cmp	r1, r0
 800a46c:	ea4f 0482 	mov.w	r4, r2, lsl #2
 800a470:	900e      	str	r0, [sp, #56]	; 0x38
 800a472:	940c      	str	r4, [sp, #48]	; 0x30
 800a474:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 800a478:	f080 8113 	bcs.w	800a6a2 <forward_dense+0x302>
 800a47c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a47e:	ed9f 8a93 	vldr	s16, [pc, #588]	; 800a6cc <forward_dense+0x32c>
 800a482:	f021 0201 	bic.w	r2, r1, #1
 800a486:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800a48a:	9204      	str	r2, [sp, #16]
 800a48c:	f001 0201 	and.w	r2, r1, #1
 800a490:	08c8      	lsrs	r0, r1, #3
 800a492:	9208      	str	r2, [sp, #32]
 800a494:	008a      	lsls	r2, r1, #2
 800a496:	f001 0a07 	and.w	sl, r1, #7
 800a49a:	920f      	str	r2, [sp, #60]	; 0x3c
 800a49c:	eb03 1240 	add.w	r2, r3, r0, lsl #5
 800a4a0:	3320      	adds	r3, #32
 800a4a2:	465c      	mov	r4, fp
 800a4a4:	9007      	str	r0, [sp, #28]
 800a4a6:	46cb      	mov	fp, r9
 800a4a8:	9205      	str	r2, [sp, #20]
 800a4aa:	9302      	str	r3, [sp, #8]
 800a4ac:	46c1      	mov	r9, r8
 800a4ae:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800a4b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a4b4:	699b      	ldr	r3, [r3, #24]
 800a4b6:	689a      	ldr	r2, [r3, #8]
 800a4b8:	9b02      	ldr	r3, [sp, #8]
 800a4ba:	3b20      	subs	r3, #32
 800a4bc:	930a      	str	r3, [sp, #40]	; 0x28
 800a4be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4c0:	b10b      	cbz	r3, 800a4c6 <forward_dense+0x126>
 800a4c2:	699b      	ldr	r3, [r3, #24]
 800a4c4:	689b      	ldr	r3, [r3, #8]
 800a4c6:	2c00      	cmp	r4, #0
 800a4c8:	f000 81da 	beq.w	800a880 <forward_dense+0x4e0>
 800a4cc:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a4ce:	2904      	cmp	r1, #4
 800a4d0:	9906      	ldr	r1, [sp, #24]
 800a4d2:	f000 80fd 	beq.w	800a6d0 <forward_dense+0x330>
 800a4d6:	4549      	cmp	r1, r9
 800a4d8:	f080 80d2 	bcs.w	800a680 <forward_dense+0x2e0>
 800a4dc:	460f      	mov	r7, r1
 800a4de:	9907      	ldr	r1, [sp, #28]
 800a4e0:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800a4e4:	f8dd a014 	ldr.w	sl, [sp, #20]
 800a4e8:	1c4e      	adds	r6, r1, #1
 800a4ea:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800a4ee:	4694      	mov	ip, r2
 800a4f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a4f2:	468e      	mov	lr, r1
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	f000 80de 	beq.w	800a6b6 <forward_dense+0x316>
 800a4fa:	ecf3 2a01 	vldmia	r3!, {s5}
 800a4fe:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800a6cc <forward_dense+0x32c>
 800a502:	f1be 0f00 	cmp.w	lr, #0
 800a506:	f000 80de 	beq.w	800a6c6 <forward_dense+0x326>
 800a50a:	f10c 0108 	add.w	r1, ip, #8
 800a50e:	4640      	mov	r0, r8
 800a510:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 800a514:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 800a518:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 800a51c:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 800a520:	ed50 4a05 	vldr	s9, [r0, #-20]	; 0xffffffec
 800a524:	ed10 5a04 	vldr	s10, [r0, #-16]
 800a528:	ed50 5a03 	vldr	s11, [r0, #-12]
 800a52c:	ed10 6a02 	vldr	s12, [r0, #-8]
 800a530:	ed50 6a01 	vldr	s13, [r0, #-4]
 800a534:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a538:	edd5 7a00 	vldr	s15, [r5]
 800a53c:	f811 5c08 	ldrb.w	r5, [r1, #-8]
 800a540:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a544:	ee67 7a83 	vmul.f32	s15, s15, s6
 800a548:	ed95 3a00 	vldr	s6, [r5]
 800a54c:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 800a550:	eee3 7a23 	vfma.f32	s15, s6, s7
 800a554:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a558:	3108      	adds	r1, #8
 800a55a:	edd5 3a00 	vldr	s7, [r5]
 800a55e:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 800a562:	eee3 7a84 	vfma.f32	s15, s7, s8
 800a566:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a56a:	3020      	adds	r0, #32
 800a56c:	ed95 4a00 	vldr	s8, [r5]
 800a570:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 800a574:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a578:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a57c:	edd5 4a00 	vldr	s9, [r5]
 800a580:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 800a584:	eee4 7a85 	vfma.f32	s15, s9, s10
 800a588:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a58c:	ed95 5a00 	vldr	s10, [r5]
 800a590:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 800a594:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a598:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a59c:	edd5 5a00 	vldr	s11, [r5]
 800a5a0:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 800a5a4:	eee5 7a86 	vfma.f32	s15, s11, s12
 800a5a8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a5ac:	428e      	cmp	r6, r1
 800a5ae:	ed95 6a00 	vldr	s12, [r5]
 800a5b2:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a5b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a5ba:	d1a9      	bne.n	800a510 <forward_dense+0x170>
 800a5bc:	f1a6 0108 	sub.w	r1, r6, #8
 800a5c0:	4650      	mov	r0, sl
 800a5c2:	2a00      	cmp	r2, #0
 800a5c4:	d04a      	beq.n	800a65c <forward_dense+0x2bc>
 800a5c6:	780d      	ldrb	r5, [r1, #0]
 800a5c8:	edd0 6a00 	vldr	s13, [r0]
 800a5cc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a5d0:	edd5 7a00 	vldr	s15, [r5]
 800a5d4:	2a01      	cmp	r2, #1
 800a5d6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a5da:	d03f      	beq.n	800a65c <forward_dense+0x2bc>
 800a5dc:	784d      	ldrb	r5, [r1, #1]
 800a5de:	edd0 6a01 	vldr	s13, [r0, #4]
 800a5e2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a5e6:	edd5 7a00 	vldr	s15, [r5]
 800a5ea:	2a02      	cmp	r2, #2
 800a5ec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a5f0:	d034      	beq.n	800a65c <forward_dense+0x2bc>
 800a5f2:	788d      	ldrb	r5, [r1, #2]
 800a5f4:	edd0 6a02 	vldr	s13, [r0, #8]
 800a5f8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a5fc:	edd5 7a00 	vldr	s15, [r5]
 800a600:	2a03      	cmp	r2, #3
 800a602:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a606:	d029      	beq.n	800a65c <forward_dense+0x2bc>
 800a608:	78cd      	ldrb	r5, [r1, #3]
 800a60a:	edd0 6a03 	vldr	s13, [r0, #12]
 800a60e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a612:	edd5 7a00 	vldr	s15, [r5]
 800a616:	2a04      	cmp	r2, #4
 800a618:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a61c:	d01e      	beq.n	800a65c <forward_dense+0x2bc>
 800a61e:	790d      	ldrb	r5, [r1, #4]
 800a620:	edd0 6a04 	vldr	s13, [r0, #16]
 800a624:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a628:	edd5 7a00 	vldr	s15, [r5]
 800a62c:	2a05      	cmp	r2, #5
 800a62e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a632:	d013      	beq.n	800a65c <forward_dense+0x2bc>
 800a634:	794d      	ldrb	r5, [r1, #5]
 800a636:	edd0 6a05 	vldr	s13, [r0, #20]
 800a63a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a63e:	edd5 7a00 	vldr	s15, [r5]
 800a642:	2a06      	cmp	r2, #6
 800a644:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a648:	d008      	beq.n	800a65c <forward_dense+0x2bc>
 800a64a:	7989      	ldrb	r1, [r1, #6]
 800a64c:	edd0 7a06 	vldr	s15, [r0, #24]
 800a650:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800a654:	edd1 6a00 	vldr	s13, [r1]
 800a658:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a65c:	44dc      	add	ip, fp
 800a65e:	445e      	add	r6, fp
 800a660:	ee32 7a87 	vadd.f32	s14, s5, s14
 800a664:	eca7 7a01 	vstmia	r7!, {s14}
 800a668:	454f      	cmp	r7, r9
 800a66a:	f4ff af43 	bcc.w	800a4f4 <forward_dense+0x154>
 800a66e:	9a06      	ldr	r2, [sp, #24]
 800a670:	eba9 0302 	sub.w	r3, r9, r2
 800a674:	3b01      	subs	r3, #1
 800a676:	f023 0303 	bic.w	r3, r3, #3
 800a67a:	3304      	adds	r3, #4
 800a67c:	18d3      	adds	r3, r2, r3
 800a67e:	9306      	str	r3, [sp, #24]
 800a680:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a682:	9a05      	ldr	r2, [sp, #20]
 800a684:	4499      	add	r9, r3
 800a686:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a688:	441a      	add	r2, r3
 800a68a:	9205      	str	r2, [sp, #20]
 800a68c:	9a02      	ldr	r2, [sp, #8]
 800a68e:	441a      	add	r2, r3
 800a690:	9202      	str	r2, [sp, #8]
 800a692:	9a04      	ldr	r2, [sp, #16]
 800a694:	441a      	add	r2, r3
 800a696:	9204      	str	r2, [sp, #16]
 800a698:	9b06      	ldr	r3, [sp, #24]
 800a69a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a69c:	4293      	cmp	r3, r2
 800a69e:	f4ff af08 	bcc.w	800a4b2 <forward_dense+0x112>
 800a6a2:	b015      	add	sp, #84	; 0x54
 800a6a4:	ecbd 8b02 	vpop	{d8}
 800a6a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6ac:	6853      	ldr	r3, [r2, #4]
 800a6ae:	deff      	udf	#255	; 0xff
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	685b      	ldr	r3, [r3, #4]
 800a6b4:	deff      	udf	#255	; 0xff
 800a6b6:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800a6cc <forward_dense+0x32c>
 800a6ba:	eef0 2a48 	vmov.f32	s5, s16
 800a6be:	f1be 0f00 	cmp.w	lr, #0
 800a6c2:	f47f af22 	bne.w	800a50a <forward_dense+0x16a>
 800a6c6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a6c8:	4661      	mov	r1, ip
 800a6ca:	e77a      	b.n	800a5c2 <forward_dense+0x222>
 800a6cc:	00000000 	.word	0x00000000
 800a6d0:	4549      	cmp	r1, r9
 800a6d2:	d2d5      	bcs.n	800a680 <forward_dense+0x2e0>
 800a6d4:	9807      	ldr	r0, [sp, #28]
 800a6d6:	9103      	str	r1, [sp, #12]
 800a6d8:	9904      	ldr	r1, [sp, #16]
 800a6da:	f100 0c01 	add.w	ip, r0, #1
 800a6de:	3901      	subs	r1, #1
 800a6e0:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800a6e4:	9109      	str	r1, [sp, #36]	; 0x24
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	f000 80b2 	beq.w	800a850 <forward_dense+0x4b0>
 800a6ec:	9907      	ldr	r1, [sp, #28]
 800a6ee:	ecf3 2a01 	vldmia	r3!, {s5}
 800a6f2:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 800a6cc <forward_dense+0x32c>
 800a6f6:	2900      	cmp	r1, #0
 800a6f8:	f000 80b2 	beq.w	800a860 <forward_dense+0x4c0>
 800a6fc:	9902      	ldr	r1, [sp, #8]
 800a6fe:	1d10      	adds	r0, r2, #4
 800a700:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 800a704:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 800a708:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 800a70c:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 800a710:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 800a714:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
 800a718:	ed11 5a04 	vldr	s10, [r1, #-16]
 800a71c:	ed51 5a03 	vldr	s11, [r1, #-12]
 800a720:	ed11 6a02 	vldr	s12, [r1, #-8]
 800a724:	ed51 6a01 	vldr	s13, [r1, #-4]
 800a728:	f006 070f 	and.w	r7, r6, #15
 800a72c:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800a730:	edd7 7a00 	vldr	s15, [r7]
 800a734:	0936      	lsrs	r6, r6, #4
 800a736:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800a73a:	ed96 3a00 	vldr	s6, [r6]
 800a73e:	ee67 7a82 	vmul.f32	s15, s15, s4
 800a742:	092e      	lsrs	r6, r5, #4
 800a744:	eee3 7a23 	vfma.f32	s15, s6, s7
 800a748:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800a74c:	f005 050f 	and.w	r5, r5, #15
 800a750:	edd6 3a00 	vldr	s7, [r6]
 800a754:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 800a758:	eee3 7a84 	vfma.f32	s15, s7, s8
 800a75c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a760:	0937      	lsrs	r7, r6, #4
 800a762:	ed95 4a00 	vldr	s8, [r5]
 800a766:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 800a76a:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a76e:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800a772:	f006 060f 	and.w	r6, r6, #15
 800a776:	edd7 4a00 	vldr	s9, [r7]
 800a77a:	eee4 7a85 	vfma.f32	s15, s9, s10
 800a77e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800a782:	3004      	adds	r0, #4
 800a784:	ed96 5a00 	vldr	s10, [r6]
 800a788:	092e      	lsrs	r6, r5, #4
 800a78a:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a78e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800a792:	f005 050f 	and.w	r5, r5, #15
 800a796:	edd6 5a00 	vldr	s11, [r6]
 800a79a:	eee5 7a86 	vfma.f32	s15, s11, s12
 800a79e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a7a2:	4584      	cmp	ip, r0
 800a7a4:	ed95 6a00 	vldr	s12, [r5]
 800a7a8:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a7ac:	f101 0120 	add.w	r1, r1, #32
 800a7b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a7b4:	d1a4      	bne.n	800a700 <forward_dense+0x360>
 800a7b6:	f8dd e014 	ldr.w	lr, [sp, #20]
 800a7ba:	f1ac 0804 	sub.w	r8, ip, #4
 800a7be:	9904      	ldr	r1, [sp, #16]
 800a7c0:	458e      	cmp	lr, r1
 800a7c2:	d22a      	bcs.n	800a81a <forward_dense+0x47a>
 800a7c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a7c6:	eba1 070e 	sub.w	r7, r1, lr
 800a7ca:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
 800a7ce:	f10e 0008 	add.w	r0, lr, #8
 800a7d2:	f108 36ff 	add.w	r6, r8, #4294967295
 800a7d6:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 800a7da:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a7de:	ed50 5a01 	vldr	s11, [r0, #-4]
 800a7e2:	ed50 6a02 	vldr	s13, [r0, #-8]
 800a7e6:	f001 050f 	and.w	r5, r1, #15
 800a7ea:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a7ee:	edd5 7a00 	vldr	s15, [r5]
 800a7f2:	0909      	lsrs	r1, r1, #4
 800a7f4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800a7f8:	ed91 6a00 	vldr	s12, [r1]
 800a7fc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a800:	42b7      	cmp	r7, r6
 800a802:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a806:	f100 0008 	add.w	r0, r0, #8
 800a80a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a80e:	d1e4      	bne.n	800a7da <forward_dense+0x43a>
 800a810:	f10a 0a01 	add.w	sl, sl, #1
 800a814:	44d0      	add	r8, sl
 800a816:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 800a81a:	9908      	ldr	r1, [sp, #32]
 800a81c:	b321      	cbz	r1, 800a868 <forward_dense+0x4c8>
 800a81e:	f898 1000 	ldrb.w	r1, [r8]
 800a822:	edde 7a00 	vldr	s15, [lr]
 800a826:	0909      	lsrs	r1, r1, #4
 800a828:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800a82c:	edd1 6a00 	vldr	s13, [r1]
 800a830:	9903      	ldr	r1, [sp, #12]
 800a832:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a836:	445a      	add	r2, fp
 800a838:	44dc      	add	ip, fp
 800a83a:	ee72 2a87 	vadd.f32	s5, s5, s14
 800a83e:	ece1 2a01 	vstmia	r1!, {s5}
 800a842:	4589      	cmp	r9, r1
 800a844:	9103      	str	r1, [sp, #12]
 800a846:	f67f af12 	bls.w	800a66e <forward_dense+0x2ce>
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	f47f af4e 	bne.w	800a6ec <forward_dense+0x34c>
 800a850:	9907      	ldr	r1, [sp, #28]
 800a852:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 800a6cc <forward_dense+0x32c>
 800a856:	eef0 2a48 	vmov.f32	s5, s16
 800a85a:	2900      	cmp	r1, #0
 800a85c:	f47f af4e 	bne.w	800a6fc <forward_dense+0x35c>
 800a860:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 800a864:	4690      	mov	r8, r2
 800a866:	e7aa      	b.n	800a7be <forward_dense+0x41e>
 800a868:	9903      	ldr	r1, [sp, #12]
 800a86a:	ee32 7a87 	vadd.f32	s14, s5, s14
 800a86e:	445a      	add	r2, fp
 800a870:	eca1 7a01 	vstmia	r1!, {s14}
 800a874:	4549      	cmp	r1, r9
 800a876:	9103      	str	r1, [sp, #12]
 800a878:	44dc      	add	ip, fp
 800a87a:	f4ff af34 	bcc.w	800a6e6 <forward_dense+0x346>
 800a87e:	e6f6      	b.n	800a66e <forward_dense+0x2ce>
 800a880:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a882:	9d06      	ldr	r5, [sp, #24]
 800a884:	9101      	str	r1, [sp, #4]
 800a886:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a888:	9100      	str	r1, [sp, #0]
 800a88a:	4628      	mov	r0, r5
 800a88c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a88e:	f000 fa2d 	bl	800acec <forward_lite_dense_if32of32wf32>
 800a892:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a894:	462b      	mov	r3, r5
 800a896:	4413      	add	r3, r2
 800a898:	9306      	str	r3, [sp, #24]
 800a89a:	e6f1      	b.n	800a680 <forward_dense+0x2e0>
 800a89c:	f8d1 800c 	ldr.w	r8, [r1, #12]
 800a8a0:	f1b9 0f00 	cmp.w	r9, #0
 800a8a4:	d016      	beq.n	800a8d4 <forward_dense+0x534>
 800a8a6:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a8aa:	f000 fc35 	bl	800b118 <ai_array_get_byte_size>
 800a8ae:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 800a8b2:	4602      	mov	r2, r0
 800a8b4:	4659      	mov	r1, fp
 800a8b6:	4640      	mov	r0, r8
 800a8b8:	f000 fb3c 	bl	800af34 <st_int8_copy>
 800a8bc:	e5c7      	b.n	800a44e <forward_dense+0xae>
 800a8be:	2b04      	cmp	r3, #4
 800a8c0:	d00a      	beq.n	800a8d8 <forward_dense+0x538>
 800a8c2:	f04f 0900 	mov.w	r9, #0
 800a8c6:	e5bd      	b.n	800a444 <forward_dense+0xa4>
 800a8c8:	930d      	str	r3, [sp, #52]	; 0x34
 800a8ca:	e595      	b.n	800a3f8 <forward_dense+0x58>
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8d0:	460b      	mov	r3, r1
 800a8d2:	e591      	b.n	800a3f8 <forward_dense+0x58>
 800a8d4:	46c3      	mov	fp, r8
 800a8d6:	e5ba      	b.n	800a44e <forward_dense+0xae>
 800a8d8:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 800a8dc:	e5b7      	b.n	800a44e <forward_dense+0xae>
 800a8de:	2300      	movs	r3, #0
 800a8e0:	685b      	ldr	r3, [r3, #4]
 800a8e2:	deff      	udf	#255	; 0xff
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	685b      	ldr	r3, [r3, #4]
 800a8e8:	deff      	udf	#255	; 0xff
 800a8ea:	bf00      	nop

0800a8ec <forward_tanh>:
 800a8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ee:	6982      	ldr	r2, [r0, #24]
 800a8f0:	8813      	ldrh	r3, [r2, #0]
 800a8f2:	b38b      	cbz	r3, 800a958 <forward_tanh+0x6c>
 800a8f4:	6852      	ldr	r2, [r2, #4]
 800a8f6:	6854      	ldr	r4, [r2, #4]
 800a8f8:	b104      	cbz	r4, 800a8fc <forward_tanh+0x10>
 800a8fa:	6824      	ldr	r4, [r4, #0]
 800a8fc:	2b01      	cmp	r3, #1
 800a8fe:	d02a      	beq.n	800a956 <forward_tanh+0x6a>
 800a900:	6915      	ldr	r5, [r2, #16]
 800a902:	b105      	cbz	r5, 800a906 <forward_tanh+0x1a>
 800a904:	682d      	ldr	r5, [r5, #0]
 800a906:	68a3      	ldr	r3, [r4, #8]
 800a908:	0a1b      	lsrs	r3, r3, #8
 800a90a:	d027      	beq.n	800a95c <forward_tanh+0x70>
 800a90c:	68e0      	ldr	r0, [r4, #12]
 800a90e:	2201      	movs	r2, #1
 800a910:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800a914:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a918:	4298      	cmp	r0, r3
 800a91a:	fb01 f202 	mul.w	r2, r1, r2
 800a91e:	d1f9      	bne.n	800a914 <forward_tanh+0x28>
 800a920:	69a7      	ldr	r7, [r4, #24]
 800a922:	69a9      	ldr	r1, [r5, #24]
 800a924:	68bb      	ldr	r3, [r7, #8]
 800a926:	688e      	ldr	r6, [r1, #8]
 800a928:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800a92c:	3a01      	subs	r2, #1
 800a92e:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 800a932:	42ab      	cmp	r3, r5
 800a934:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 800a938:	d80c      	bhi.n	800a954 <forward_tanh+0x68>
 800a93a:	3504      	adds	r5, #4
 800a93c:	3604      	adds	r6, #4
 800a93e:	462c      	mov	r4, r5
 800a940:	ed35 0a01 	vldmdb	r5!, {s0}
 800a944:	f001 fc7e 	bl	800c244 <tanhf>
 800a948:	ed26 0a01 	vstmdb	r6!, {s0}
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	3c08      	subs	r4, #8
 800a950:	42a3      	cmp	r3, r4
 800a952:	d9f4      	bls.n	800a93e <forward_tanh+0x52>
 800a954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a956:	2300      	movs	r3, #0
 800a958:	685b      	ldr	r3, [r3, #4]
 800a95a:	deff      	udf	#255	; 0xff
 800a95c:	69ab      	ldr	r3, [r5, #24]
 800a95e:	69a7      	ldr	r7, [r4, #24]
 800a960:	689e      	ldr	r6, [r3, #8]
 800a962:	68bd      	ldr	r5, [r7, #8]
 800a964:	e7e9      	b.n	800a93a <forward_tanh+0x4e>
 800a966:	bf00      	nop

0800a968 <forward_relu>:
 800a968:	6982      	ldr	r2, [r0, #24]
 800a96a:	8813      	ldrh	r3, [r2, #0]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d05b      	beq.n	800aa28 <forward_relu+0xc0>
 800a970:	6851      	ldr	r1, [r2, #4]
 800a972:	684a      	ldr	r2, [r1, #4]
 800a974:	b102      	cbz	r2, 800a978 <forward_relu+0x10>
 800a976:	6812      	ldr	r2, [r2, #0]
 800a978:	2b01      	cmp	r3, #1
 800a97a:	f000 8123 	beq.w	800abc4 <forward_relu+0x25c>
 800a97e:	b470      	push	{r4, r5, r6}
 800a980:	6909      	ldr	r1, [r1, #16]
 800a982:	b101      	cbz	r1, 800a986 <forward_relu+0x1e>
 800a984:	6809      	ldr	r1, [r1, #0]
 800a986:	69c6      	ldr	r6, [r0, #28]
 800a988:	2e00      	cmp	r6, #0
 800a98a:	f000 8097 	beq.w	800aabc <forward_relu+0x154>
 800a98e:	6873      	ldr	r3, [r6, #4]
 800a990:	6988      	ldr	r0, [r1, #24]
 800a992:	6991      	ldr	r1, [r2, #24]
 800a994:	2b01      	cmp	r3, #1
 800a996:	f000 80c1 	beq.w	800ab1c <forward_relu+0x1b4>
 800a99a:	6893      	ldr	r3, [r2, #8]
 800a99c:	6880      	ldr	r0, [r0, #8]
 800a99e:	688c      	ldr	r4, [r1, #8]
 800a9a0:	0a1b      	lsrs	r3, r3, #8
 800a9a2:	f000 80f2 	beq.w	800ab8a <forward_relu+0x222>
 800a9a6:	68d5      	ldr	r5, [r2, #12]
 800a9a8:	2201      	movs	r2, #1
 800a9aa:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800a9ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a9b2:	42ab      	cmp	r3, r5
 800a9b4:	fb01 f202 	mul.w	r2, r1, r2
 800a9b8:	d1f9      	bne.n	800a9ae <forward_relu+0x46>
 800a9ba:	68b3      	ldr	r3, [r6, #8]
 800a9bc:	ed93 7a02 	vldr	s14, [r3, #8]
 800a9c0:	edd3 6a00 	vldr	s13, [r3]
 800a9c4:	ed93 6a01 	vldr	s12, [r3, #4]
 800a9c8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800a9cc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800a9d0:	3a01      	subs	r2, #1
 800a9d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9d6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a9da:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800a9de:	d425      	bmi.n	800aa2c <forward_relu+0xc4>
 800a9e0:	429c      	cmp	r4, r3
 800a9e2:	d81f      	bhi.n	800aa24 <forward_relu+0xbc>
 800a9e4:	1d1a      	adds	r2, r3, #4
 800a9e6:	1d01      	adds	r1, r0, #4
 800a9e8:	e00d      	b.n	800aa06 <forward_relu+0x9e>
 800a9ea:	eef4 6ae7 	vcmpe.f32	s13, s15
 800a9ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9f2:	db03      	blt.n	800a9fc <forward_relu+0x94>
 800a9f4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a9f8:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a9fc:	3b08      	subs	r3, #8
 800a9fe:	429c      	cmp	r4, r3
 800aa00:	ed61 7a01 	vstmdb	r1!, {s15}
 800aa04:	d80e      	bhi.n	800aa24 <forward_relu+0xbc>
 800aa06:	4613      	mov	r3, r2
 800aa08:	ed72 7a01 	vldmdb	r2!, {s15}
 800aa0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aa10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa14:	d9e9      	bls.n	800a9ea <forward_relu+0x82>
 800aa16:	3b08      	subs	r3, #8
 800aa18:	eef0 7a47 	vmov.f32	s15, s14
 800aa1c:	429c      	cmp	r4, r3
 800aa1e:	ed61 7a01 	vstmdb	r1!, {s15}
 800aa22:	d9f0      	bls.n	800aa06 <forward_relu+0x9e>
 800aa24:	bc70      	pop	{r4, r5, r6}
 800aa26:	4770      	bx	lr
 800aa28:	685b      	ldr	r3, [r3, #4]
 800aa2a:	deff      	udf	#255	; 0xff
 800aa2c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800aa30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa34:	d11f      	bne.n	800aa76 <forward_relu+0x10e>
 800aa36:	429c      	cmp	r4, r3
 800aa38:	d8f4      	bhi.n	800aa24 <forward_relu+0xbc>
 800aa3a:	1b1c      	subs	r4, r3, r4
 800aa3c:	f024 0403 	bic.w	r4, r4, #3
 800aa40:	1d1a      	adds	r2, r3, #4
 800aa42:	2500      	movs	r5, #0
 800aa44:	1b1b      	subs	r3, r3, r4
 800aa46:	1d01      	adds	r1, r0, #4
 800aa48:	ed72 7a01 	vldmdb	r2!, {s15}
 800aa4c:	eef4 7ae6 	vcmpe.f32	s15, s13
 800aa50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa54:	dc0a      	bgt.n	800aa6c <forward_relu+0x104>
 800aa56:	429a      	cmp	r2, r3
 800aa58:	f841 5d04 	str.w	r5, [r1, #-4]!
 800aa5c:	d0e2      	beq.n	800aa24 <forward_relu+0xbc>
 800aa5e:	ed72 7a01 	vldmdb	r2!, {s15}
 800aa62:	eef4 7ae6 	vcmpe.f32	s15, s13
 800aa66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa6a:	ddf4      	ble.n	800aa56 <forward_relu+0xee>
 800aa6c:	429a      	cmp	r2, r3
 800aa6e:	ed61 7a01 	vstmdb	r1!, {s15}
 800aa72:	d1e9      	bne.n	800aa48 <forward_relu+0xe0>
 800aa74:	e7d6      	b.n	800aa24 <forward_relu+0xbc>
 800aa76:	429c      	cmp	r4, r3
 800aa78:	d8d4      	bhi.n	800aa24 <forward_relu+0xbc>
 800aa7a:	1b1c      	subs	r4, r3, r4
 800aa7c:	f024 0403 	bic.w	r4, r4, #3
 800aa80:	1d1a      	adds	r2, r3, #4
 800aa82:	1d01      	adds	r1, r0, #4
 800aa84:	1b1b      	subs	r3, r3, r4
 800aa86:	ed72 7a01 	vldmdb	r2!, {s15}
 800aa8a:	eef4 6ae7 	vcmpe.f32	s13, s15
 800aa8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa92:	db0e      	blt.n	800aab2 <forward_relu+0x14a>
 800aa94:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800aa9e:	ed61 7a01 	vstmdb	r1!, {s15}
 800aaa2:	d0bf      	beq.n	800aa24 <forward_relu+0xbc>
 800aaa4:	ed72 7a01 	vldmdb	r2!, {s15}
 800aaa8:	eef4 6ae7 	vcmpe.f32	s13, s15
 800aaac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aab0:	daf0      	bge.n	800aa94 <forward_relu+0x12c>
 800aab2:	4293      	cmp	r3, r2
 800aab4:	ed61 7a01 	vstmdb	r1!, {s15}
 800aab8:	d1e5      	bne.n	800aa86 <forward_relu+0x11e>
 800aaba:	e7b3      	b.n	800aa24 <forward_relu+0xbc>
 800aabc:	6893      	ldr	r3, [r2, #8]
 800aabe:	6989      	ldr	r1, [r1, #24]
 800aac0:	6990      	ldr	r0, [r2, #24]
 800aac2:	6889      	ldr	r1, [r1, #8]
 800aac4:	6884      	ldr	r4, [r0, #8]
 800aac6:	0a1b      	lsrs	r3, r3, #8
 800aac8:	d075      	beq.n	800abb6 <forward_relu+0x24e>
 800aaca:	68d5      	ldr	r5, [r2, #12]
 800aacc:	2201      	movs	r2, #1
 800aace:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800aad2:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 800aad6:	429d      	cmp	r5, r3
 800aad8:	fb00 f202 	mul.w	r2, r0, r2
 800aadc:	d1f9      	bne.n	800aad2 <forward_relu+0x16a>
 800aade:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 800aae2:	3b01      	subs	r3, #1
 800aae4:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800aae8:	4294      	cmp	r4, r2
 800aaea:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800aaee:	d899      	bhi.n	800aa24 <forward_relu+0xbc>
 800aaf0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800abcc <forward_relu+0x264>
 800aaf4:	3204      	adds	r2, #4
 800aaf6:	3104      	adds	r1, #4
 800aaf8:	4613      	mov	r3, r2
 800aafa:	ed72 7a01 	vldmdb	r2!, {s15}
 800aafe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ab02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab06:	f1a3 0308 	sub.w	r3, r3, #8
 800ab0a:	bfb8      	it	lt
 800ab0c:	eef0 7a47 	vmovlt.f32	s15, s14
 800ab10:	429c      	cmp	r4, r3
 800ab12:	ed61 7a01 	vstmdb	r1!, {s15}
 800ab16:	d9ef      	bls.n	800aaf8 <forward_relu+0x190>
 800ab18:	bc70      	pop	{r4, r5, r6}
 800ab1a:	4770      	bx	lr
 800ab1c:	688c      	ldr	r4, [r1, #8]
 800ab1e:	6891      	ldr	r1, [r2, #8]
 800ab20:	6880      	ldr	r0, [r0, #8]
 800ab22:	0a09      	lsrs	r1, r1, #8
 800ab24:	d049      	beq.n	800abba <forward_relu+0x252>
 800ab26:	68d5      	ldr	r5, [r2, #12]
 800ab28:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 800ab2c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800ab30:	42aa      	cmp	r2, r5
 800ab32:	fb01 f303 	mul.w	r3, r1, r3
 800ab36:	d1f9      	bne.n	800ab2c <forward_relu+0x1c4>
 800ab38:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 800ab3c:	3a01      	subs	r2, #1
 800ab3e:	68b1      	ldr	r1, [r6, #8]
 800ab40:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ab44:	429c      	cmp	r4, r3
 800ab46:	ed91 7a00 	vldr	s14, [r1]
 800ab4a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800ab4e:	f63f af69 	bhi.w	800aa24 <forward_relu+0xbc>
 800ab52:	2500      	movs	r5, #0
 800ab54:	3304      	adds	r3, #4
 800ab56:	1d02      	adds	r2, r0, #4
 800ab58:	ed53 7a01 	vldr	s15, [r3, #-4]
 800ab5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ab60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab64:	f1a3 0104 	sub.w	r1, r3, #4
 800ab68:	f1a3 0308 	sub.w	r3, r3, #8
 800ab6c:	d406      	bmi.n	800ab7c <forward_relu+0x214>
 800ab6e:	429c      	cmp	r4, r3
 800ab70:	f842 5d04 	str.w	r5, [r2, #-4]!
 800ab74:	f63f af56 	bhi.w	800aa24 <forward_relu+0xbc>
 800ab78:	460b      	mov	r3, r1
 800ab7a:	e7ed      	b.n	800ab58 <forward_relu+0x1f0>
 800ab7c:	429c      	cmp	r4, r3
 800ab7e:	ed62 7a01 	vstmdb	r2!, {s15}
 800ab82:	f63f af4f 	bhi.w	800aa24 <forward_relu+0xbc>
 800ab86:	460b      	mov	r3, r1
 800ab88:	e7e6      	b.n	800ab58 <forward_relu+0x1f0>
 800ab8a:	68b3      	ldr	r3, [r6, #8]
 800ab8c:	ed93 7a02 	vldr	s14, [r3, #8]
 800ab90:	edd3 6a00 	vldr	s13, [r3]
 800ab94:	ed93 6a01 	vldr	s12, [r3, #4]
 800ab98:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800ab9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aba0:	d401      	bmi.n	800aba6 <forward_relu+0x23e>
 800aba2:	4623      	mov	r3, r4
 800aba4:	e71e      	b.n	800a9e4 <forward_relu+0x7c>
 800aba6:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800abaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abae:	4623      	mov	r3, r4
 800abb0:	f47f af63 	bne.w	800aa7a <forward_relu+0x112>
 800abb4:	e741      	b.n	800aa3a <forward_relu+0xd2>
 800abb6:	4622      	mov	r2, r4
 800abb8:	e79a      	b.n	800aaf0 <forward_relu+0x188>
 800abba:	68b2      	ldr	r2, [r6, #8]
 800abbc:	4623      	mov	r3, r4
 800abbe:	ed92 7a00 	vldr	s14, [r2]
 800abc2:	e7c6      	b.n	800ab52 <forward_relu+0x1ea>
 800abc4:	2300      	movs	r3, #0
 800abc6:	685b      	ldr	r3, [r3, #4]
 800abc8:	deff      	udf	#255	; 0xff
 800abca:	bf00      	nop
 800abcc:	00000000 	.word	0x00000000

0800abd0 <forward_sm>:
 800abd0:	6982      	ldr	r2, [r0, #24]
 800abd2:	8813      	ldrh	r3, [r2, #0]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d07c      	beq.n	800acd2 <forward_sm+0x102>
 800abd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abdc:	ed2d 8b04 	vpush	{d8-d9}
 800abe0:	6852      	ldr	r2, [r2, #4]
 800abe2:	6854      	ldr	r4, [r2, #4]
 800abe4:	b085      	sub	sp, #20
 800abe6:	b104      	cbz	r4, 800abea <forward_sm+0x1a>
 800abe8:	6824      	ldr	r4, [r4, #0]
 800abea:	2b01      	cmp	r3, #1
 800abec:	d076      	beq.n	800acdc <forward_sm+0x10c>
 800abee:	6913      	ldr	r3, [r2, #16]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d076      	beq.n	800ace2 <forward_sm+0x112>
 800abf4:	681e      	ldr	r6, [r3, #0]
 800abf6:	68a3      	ldr	r3, [r4, #8]
 800abf8:	68e0      	ldr	r0, [r4, #12]
 800abfa:	68f2      	ldr	r2, [r6, #12]
 800abfc:	6845      	ldr	r5, [r0, #4]
 800abfe:	6857      	ldr	r7, [r2, #4]
 800ac00:	0a1b      	lsrs	r3, r3, #8
 800ac02:	d068      	beq.n	800acd6 <forward_sm+0x106>
 800ac04:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800ac08:	2201      	movs	r2, #1
 800ac0a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ac0e:	4298      	cmp	r0, r3
 800ac10:	fb01 f202 	mul.w	r2, r1, r2
 800ac14:	d1f9      	bne.n	800ac0a <forward_sm+0x3a>
 800ac16:	ea4f 0982 	mov.w	r9, r2, lsl #2
 800ac1a:	69a2      	ldr	r2, [r4, #24]
 800ac1c:	69b3      	ldr	r3, [r6, #24]
 800ac1e:	6892      	ldr	r2, [r2, #8]
 800ac20:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800ac24:	eb02 0309 	add.w	r3, r2, r9
 800ac28:	429a      	cmp	r2, r3
 800ac2a:	9301      	str	r3, [sp, #4]
 800ac2c:	d24c      	bcs.n	800acc8 <forward_sm+0xf8>
 800ac2e:	00bb      	lsls	r3, r7, #2
 800ac30:	9303      	str	r3, [sp, #12]
 800ac32:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 800ac36:	00ab      	lsls	r3, r5, #2
 800ac38:	2d01      	cmp	r5, #1
 800ac3a:	ed92 8a00 	vldr	s16, [r2]
 800ac3e:	9302      	str	r3, [sp, #8]
 800ac40:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800ac44:	463e      	mov	r6, r7
 800ac46:	d93c      	bls.n	800acc2 <forward_sm+0xf2>
 800ac48:	1d13      	adds	r3, r2, #4
 800ac4a:	ecf3 7a01 	vldmia	r3!, {s15}
 800ac4e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800ac52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac56:	bfb8      	it	lt
 800ac58:	eeb0 8a67 	vmovlt.f32	s16, s15
 800ac5c:	429e      	cmp	r6, r3
 800ac5e:	d1f4      	bne.n	800ac4a <forward_sm+0x7a>
 800ac60:	eddf 8a21 	vldr	s17, [pc, #132]	; 800ace8 <forward_sm+0x118>
 800ac64:	4692      	mov	sl, r2
 800ac66:	46c3      	mov	fp, r8
 800ac68:	46c1      	mov	r9, r8
 800ac6a:	2400      	movs	r4, #0
 800ac6c:	ecba 0a01 	vldmia	sl!, {s0}
 800ac70:	ee30 0a48 	vsub.f32	s0, s0, s16
 800ac74:	f001 fb38 	bl	800c2e8 <expf>
 800ac78:	3401      	adds	r4, #1
 800ac7a:	42a5      	cmp	r5, r4
 800ac7c:	ee78 8a80 	vadd.f32	s17, s17, s0
 800ac80:	eca9 0a01 	vstmia	r9!, {s0}
 800ac84:	d8f2      	bhi.n	800ac6c <forward_sm+0x9c>
 800ac86:	eef5 8a40 	vcmp.f32	s17, #0.0
 800ac8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac8e:	d00b      	beq.n	800aca8 <forward_sm+0xd8>
 800ac90:	ee89 7a28 	vdiv.f32	s14, s18, s17
 800ac94:	2300      	movs	r3, #0
 800ac96:	3301      	adds	r3, #1
 800ac98:	429d      	cmp	r5, r3
 800ac9a:	eddb 7a00 	vldr	s15, [fp]
 800ac9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aca2:	eceb 7a01 	vstmia	fp!, {s15}
 800aca6:	d8f6      	bhi.n	800ac96 <forward_sm+0xc6>
 800aca8:	9b03      	ldr	r3, [sp, #12]
 800acaa:	9901      	ldr	r1, [sp, #4]
 800acac:	4498      	add	r8, r3
 800acae:	9b02      	ldr	r3, [sp, #8]
 800acb0:	42b9      	cmp	r1, r7
 800acb2:	463a      	mov	r2, r7
 800acb4:	441e      	add	r6, r3
 800acb6:	d907      	bls.n	800acc8 <forward_sm+0xf8>
 800acb8:	2d01      	cmp	r5, #1
 800acba:	ed92 8a00 	vldr	s16, [r2]
 800acbe:	441f      	add	r7, r3
 800acc0:	d8c2      	bhi.n	800ac48 <forward_sm+0x78>
 800acc2:	2d00      	cmp	r5, #0
 800acc4:	d0f0      	beq.n	800aca8 <forward_sm+0xd8>
 800acc6:	e7cb      	b.n	800ac60 <forward_sm+0x90>
 800acc8:	b005      	add	sp, #20
 800acca:	ecbd 8b04 	vpop	{d8-d9}
 800acce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acd2:	685b      	ldr	r3, [r3, #4]
 800acd4:	deff      	udf	#255	; 0xff
 800acd6:	f04f 0904 	mov.w	r9, #4
 800acda:	e79e      	b.n	800ac1a <forward_sm+0x4a>
 800acdc:	2300      	movs	r3, #0
 800acde:	685b      	ldr	r3, [r3, #4]
 800ace0:	deff      	udf	#255	; 0xff
 800ace2:	68db      	ldr	r3, [r3, #12]
 800ace4:	deff      	udf	#255	; 0xff
 800ace6:	bf00      	nop
 800ace8:	00000000 	.word	0x00000000

0800acec <forward_lite_dense_if32of32wf32>:
 800acec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acf0:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
 800acf4:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 800acf8:	4287      	cmp	r7, r0
 800acfa:	f240 8106 	bls.w	800af0a <forward_lite_dense_if32of32wf32+0x21e>
 800acfe:	f1a6 0810 	sub.w	r8, r6, #16
 800ad02:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800ad06:	f108 0801 	add.w	r8, r8, #1
 800ad0a:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800ad0e:	ea4f 0986 	mov.w	r9, r6, lsl #2
 800ad12:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 800ad16:	4605      	mov	r5, r0
 800ad18:	f006 0a0f 	and.w	sl, r6, #15
 800ad1c:	2e0f      	cmp	r6, #15
 800ad1e:	ed9f 7a84 	vldr	s14, [pc, #528]	; 800af30 <forward_lite_dense_if32of32wf32+0x244>
 800ad22:	f240 8101 	bls.w	800af28 <forward_lite_dense_if32of32wf32+0x23c>
 800ad26:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 800ad2a:	f102 0440 	add.w	r4, r2, #64	; 0x40
 800ad2e:	46b6      	mov	lr, r6
 800ad30:	ed54 5a0f 	vldr	s11, [r4, #-60]	; 0xffffffc4
 800ad34:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 800ad38:	ed1c 6a10 	vldr	s12, [ip, #-64]	; 0xffffffc0
 800ad3c:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 800ad40:	ed5c 4a0d 	vldr	s9, [ip, #-52]	; 0xffffffcc
 800ad44:	ed1c 5a0c 	vldr	s10, [ip, #-48]	; 0xffffffd0
 800ad48:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
 800ad4c:	ed54 3a0a 	vldr	s7, [r4, #-40]	; 0xffffffd8
 800ad50:	ed1c 4a09 	vldr	s8, [ip, #-36]	; 0xffffffdc
 800ad54:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
 800ad58:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 800ad5c:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 800ad60:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 800ad64:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ad68:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 800ad6c:	eee6 7a26 	vfma.f32	s15, s12, s13
 800ad70:	f1ae 0e10 	sub.w	lr, lr, #16
 800ad74:	f1be 0f0f 	cmp.w	lr, #15
 800ad78:	ed14 6a0e 	vldr	s12, [r4, #-56]	; 0xffffffc8
 800ad7c:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 800ad80:	eee5 7a86 	vfma.f32	s15, s11, s12
 800ad84:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 800ad88:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800ad8c:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
 800ad90:	ed1c 6a1b 	vldr	s12, [ip, #-108]	; 0xffffff94
 800ad94:	eee4 7aa6 	vfma.f32	s15, s9, s13
 800ad98:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
 800ad9c:	ed54 4a19 	vldr	s9, [r4, #-100]	; 0xffffff9c
 800ada0:	eee5 7a25 	vfma.f32	s15, s10, s11
 800ada4:	ed1c 5a18 	vldr	s10, [ip, #-96]	; 0xffffffa0
 800ada8:	ed54 5a18 	vldr	s11, [r4, #-96]	; 0xffffffa0
 800adac:	eee6 7a26 	vfma.f32	s15, s12, s13
 800adb0:	ed1c 6a17 	vldr	s12, [ip, #-92]	; 0xffffffa4
 800adb4:	ed54 6a17 	vldr	s13, [r4, #-92]	; 0xffffffa4
 800adb8:	eee3 7a23 	vfma.f32	s15, s6, s7
 800adbc:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 800adc0:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 800adc4:	eee4 7a24 	vfma.f32	s15, s8, s9
 800adc8:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 800adcc:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 800add0:	eee5 7a25 	vfma.f32	s15, s10, s11
 800add4:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 800add8:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 800addc:	eee6 7a26 	vfma.f32	s15, s12, s13
 800ade0:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 800ade4:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 800ade8:	eee1 7a21 	vfma.f32	s15, s2, s3
 800adec:	eee2 7a22 	vfma.f32	s15, s4, s5
 800adf0:	eee3 7a23 	vfma.f32	s15, s6, s7
 800adf4:	eee4 7a24 	vfma.f32	s15, s8, s9
 800adf8:	eee5 7a25 	vfma.f32	s15, s10, s11
 800adfc:	eee6 7a26 	vfma.f32	s15, s12, s13
 800ae00:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ae04:	d894      	bhi.n	800ad30 <forward_lite_dense_if32of32wf32+0x44>
 800ae06:	eb02 0e0b 	add.w	lr, r2, fp
 800ae0a:	4654      	mov	r4, sl
 800ae0c:	46c4      	mov	ip, r8
 800ae0e:	2c00      	cmp	r4, #0
 800ae10:	d075      	beq.n	800aefe <forward_lite_dense_if32of32wf32+0x212>
 800ae12:	eddc 6a00 	vldr	s13, [ip]
 800ae16:	edde 7a00 	vldr	s15, [lr]
 800ae1a:	2c01      	cmp	r4, #1
 800ae1c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ae20:	d06d      	beq.n	800aefe <forward_lite_dense_if32of32wf32+0x212>
 800ae22:	eddc 6a01 	vldr	s13, [ip, #4]
 800ae26:	edde 7a01 	vldr	s15, [lr, #4]
 800ae2a:	2c02      	cmp	r4, #2
 800ae2c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ae30:	d065      	beq.n	800aefe <forward_lite_dense_if32of32wf32+0x212>
 800ae32:	eddc 6a02 	vldr	s13, [ip, #8]
 800ae36:	edde 7a02 	vldr	s15, [lr, #8]
 800ae3a:	2c03      	cmp	r4, #3
 800ae3c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ae40:	d05d      	beq.n	800aefe <forward_lite_dense_if32of32wf32+0x212>
 800ae42:	eddc 6a03 	vldr	s13, [ip, #12]
 800ae46:	edde 7a03 	vldr	s15, [lr, #12]
 800ae4a:	2c04      	cmp	r4, #4
 800ae4c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ae50:	d055      	beq.n	800aefe <forward_lite_dense_if32of32wf32+0x212>
 800ae52:	eddc 6a04 	vldr	s13, [ip, #16]
 800ae56:	edde 7a04 	vldr	s15, [lr, #16]
 800ae5a:	2c05      	cmp	r4, #5
 800ae5c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ae60:	d04d      	beq.n	800aefe <forward_lite_dense_if32of32wf32+0x212>
 800ae62:	eddc 6a05 	vldr	s13, [ip, #20]
 800ae66:	edde 7a05 	vldr	s15, [lr, #20]
 800ae6a:	2c06      	cmp	r4, #6
 800ae6c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ae70:	d045      	beq.n	800aefe <forward_lite_dense_if32of32wf32+0x212>
 800ae72:	eddc 6a06 	vldr	s13, [ip, #24]
 800ae76:	edde 7a06 	vldr	s15, [lr, #24]
 800ae7a:	2c07      	cmp	r4, #7
 800ae7c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ae80:	d03d      	beq.n	800aefe <forward_lite_dense_if32of32wf32+0x212>
 800ae82:	eddc 6a07 	vldr	s13, [ip, #28]
 800ae86:	edde 7a07 	vldr	s15, [lr, #28]
 800ae8a:	2c08      	cmp	r4, #8
 800ae8c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ae90:	d035      	beq.n	800aefe <forward_lite_dense_if32of32wf32+0x212>
 800ae92:	eddc 6a08 	vldr	s13, [ip, #32]
 800ae96:	edde 7a08 	vldr	s15, [lr, #32]
 800ae9a:	2c09      	cmp	r4, #9
 800ae9c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800aea0:	d02d      	beq.n	800aefe <forward_lite_dense_if32of32wf32+0x212>
 800aea2:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 800aea6:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 800aeaa:	2c0a      	cmp	r4, #10
 800aeac:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800aeb0:	d025      	beq.n	800aefe <forward_lite_dense_if32of32wf32+0x212>
 800aeb2:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 800aeb6:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 800aeba:	2c0b      	cmp	r4, #11
 800aebc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800aec0:	d01d      	beq.n	800aefe <forward_lite_dense_if32of32wf32+0x212>
 800aec2:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 800aec6:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 800aeca:	2c0c      	cmp	r4, #12
 800aecc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800aed0:	d015      	beq.n	800aefe <forward_lite_dense_if32of32wf32+0x212>
 800aed2:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 800aed6:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 800aeda:	3c0d      	subs	r4, #13
 800aedc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800aee0:	d00d      	beq.n	800aefe <forward_lite_dense_if32of32wf32+0x212>
 800aee2:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 800aee6:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 800aeea:	2c01      	cmp	r4, #1
 800aeec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800aef0:	d005      	beq.n	800aefe <forward_lite_dense_if32of32wf32+0x212>
 800aef2:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 800aef6:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 800aefa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800aefe:	444a      	add	r2, r9
 800af00:	eca5 7a01 	vstmia	r5!, {s14}
 800af04:	42af      	cmp	r7, r5
 800af06:	f63f af09 	bhi.w	800ad1c <forward_lite_dense_if32of32wf32+0x30>
 800af0a:	b15b      	cbz	r3, 800af24 <forward_lite_dense_if32of32wf32+0x238>
 800af0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af0e:	b14a      	cbz	r2, 800af24 <forward_lite_dense_if32of32wf32+0x238>
 800af10:	edd0 7a00 	vldr	s15, [r0]
 800af14:	ecb3 7a01 	vldmia	r3!, {s14}
 800af18:	ee77 7a87 	vadd.f32	s15, s15, s14
 800af1c:	ece0 7a01 	vstmia	r0!, {s15}
 800af20:	4287      	cmp	r7, r0
 800af22:	d1f5      	bne.n	800af10 <forward_lite_dense_if32of32wf32+0x224>
 800af24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af28:	4634      	mov	r4, r6
 800af2a:	4696      	mov	lr, r2
 800af2c:	468c      	mov	ip, r1
 800af2e:	e76e      	b.n	800ae0e <forward_lite_dense_if32of32wf32+0x122>
 800af30:	00000000 	.word	0x00000000

0800af34 <st_int8_copy>:
 800af34:	4288      	cmp	r0, r1
 800af36:	d057      	beq.n	800afe8 <st_int8_copy+0xb4>
 800af38:	2a00      	cmp	r2, #0
 800af3a:	d055      	beq.n	800afe8 <st_int8_copy+0xb4>
 800af3c:	4288      	cmp	r0, r1
 800af3e:	d354      	bcc.n	800afea <st_int8_copy+0xb6>
 800af40:	078b      	lsls	r3, r1, #30
 800af42:	d102      	bne.n	800af4a <st_int8_copy+0x16>
 800af44:	e009      	b.n	800af5a <st_int8_copy+0x26>
 800af46:	2a00      	cmp	r2, #0
 800af48:	d05c      	beq.n	800b004 <st_int8_copy+0xd0>
 800af4a:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800af4e:	f801 3b01 	strb.w	r3, [r1], #1
 800af52:	078b      	lsls	r3, r1, #30
 800af54:	f102 32ff 	add.w	r2, r2, #4294967295
 800af58:	d1f5      	bne.n	800af46 <st_int8_copy+0x12>
 800af5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af5e:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 800af62:	d069      	beq.n	800b038 <st_int8_copy+0x104>
 800af64:	ea41 0300 	orr.w	r3, r1, r0
 800af68:	075b      	lsls	r3, r3, #29
 800af6a:	d14c      	bne.n	800b006 <st_int8_copy+0xd2>
 800af6c:	f10e 33ff 	add.w	r3, lr, #4294967295
 800af70:	2b01      	cmp	r3, #1
 800af72:	d948      	bls.n	800b006 <st_int8_copy+0xd2>
 800af74:	f100 0310 	add.w	r3, r0, #16
 800af78:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800af7c:	f101 0c10 	add.w	ip, r1, #16
 800af80:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 800af84:	ed13 6b04 	vldr	d6, [r3, #-16]
 800af88:	ed13 7b02 	vldr	d7, [r3, #-8]
 800af8c:	3310      	adds	r3, #16
 800af8e:	4573      	cmp	r3, lr
 800af90:	ed0c 6b04 	vstr	d6, [ip, #-16]
 800af94:	ed0c 7b02 	vstr	d7, [ip, #-8]
 800af98:	f10c 0c10 	add.w	ip, ip, #16
 800af9c:	d1f2      	bne.n	800af84 <st_int8_copy+0x50>
 800af9e:	f3c2 0381 	ubfx	r3, r2, #2, #2
 800afa2:	4421      	add	r1, r4
 800afa4:	4420      	add	r0, r4
 800afa6:	f002 0203 	and.w	r2, r2, #3
 800afaa:	b16b      	cbz	r3, 800afc8 <st_int8_copy+0x94>
 800afac:	6804      	ldr	r4, [r0, #0]
 800afae:	600c      	str	r4, [r1, #0]
 800afb0:	1e5c      	subs	r4, r3, #1
 800afb2:	d005      	beq.n	800afc0 <st_int8_copy+0x8c>
 800afb4:	6845      	ldr	r5, [r0, #4]
 800afb6:	604d      	str	r5, [r1, #4]
 800afb8:	2c01      	cmp	r4, #1
 800afba:	bf1c      	itt	ne
 800afbc:	6884      	ldrne	r4, [r0, #8]
 800afbe:	608c      	strne	r4, [r1, #8]
 800afc0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800afc4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800afc8:	b162      	cbz	r2, 800afe4 <st_int8_copy+0xb0>
 800afca:	f990 3000 	ldrsb.w	r3, [r0]
 800afce:	700b      	strb	r3, [r1, #0]
 800afd0:	3a01      	subs	r2, #1
 800afd2:	d007      	beq.n	800afe4 <st_int8_copy+0xb0>
 800afd4:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800afd8:	704b      	strb	r3, [r1, #1]
 800afda:	2a01      	cmp	r2, #1
 800afdc:	bf1c      	itt	ne
 800afde:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 800afe2:	708b      	strbne	r3, [r1, #2]
 800afe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afe8:	4770      	bx	lr
 800afea:	1883      	adds	r3, r0, r2
 800afec:	428b      	cmp	r3, r1
 800afee:	d9a7      	bls.n	800af40 <st_int8_copy+0xc>
 800aff0:	4283      	cmp	r3, r0
 800aff2:	440a      	add	r2, r1
 800aff4:	d9f8      	bls.n	800afe8 <st_int8_copy+0xb4>
 800aff6:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 800affa:	f802 1d01 	strb.w	r1, [r2, #-1]!
 800affe:	4283      	cmp	r3, r0
 800b000:	d1f9      	bne.n	800aff6 <st_int8_copy+0xc2>
 800b002:	4770      	bx	lr
 800b004:	4770      	bx	lr
 800b006:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800b00a:	460b      	mov	r3, r1
 800b00c:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 800b010:	4684      	mov	ip, r0
 800b012:	f8dc 7000 	ldr.w	r7, [ip]
 800b016:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800b01a:	f8dc 5008 	ldr.w	r5, [ip, #8]
 800b01e:	f8dc 800c 	ldr.w	r8, [ip, #12]
 800b022:	f8c3 800c 	str.w	r8, [r3, #12]
 800b026:	601f      	str	r7, [r3, #0]
 800b028:	605e      	str	r6, [r3, #4]
 800b02a:	609d      	str	r5, [r3, #8]
 800b02c:	3310      	adds	r3, #16
 800b02e:	459e      	cmp	lr, r3
 800b030:	f10c 0c10 	add.w	ip, ip, #16
 800b034:	d1ed      	bne.n	800b012 <st_int8_copy+0xde>
 800b036:	e7b2      	b.n	800af9e <st_int8_copy+0x6a>
 800b038:	0893      	lsrs	r3, r2, #2
 800b03a:	f002 0203 	and.w	r2, r2, #3
 800b03e:	e7b4      	b.n	800afaa <st_int8_copy+0x76>

0800b040 <ai_array_to_buffer_fmt>:
 800b040:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800b044:	2b02      	cmp	r3, #2
 800b046:	d050      	beq.n	800b0ea <ai_array_to_buffer_fmt+0xaa>
 800b048:	4b2a      	ldr	r3, [pc, #168]	; (800b0f4 <ai_array_to_buffer_fmt+0xb4>)
 800b04a:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 800b04e:	429a      	cmp	r2, r3
 800b050:	d00b      	beq.n	800b06a <ai_array_to_buffer_fmt+0x2a>
 800b052:	dc1c      	bgt.n	800b08e <ai_array_to_buffer_fmt+0x4e>
 800b054:	4b28      	ldr	r3, [pc, #160]	; (800b0f8 <ai_array_to_buffer_fmt+0xb8>)
 800b056:	429a      	cmp	r2, r3
 800b058:	d007      	beq.n	800b06a <ai_array_to_buffer_fmt+0x2a>
 800b05a:	dd0b      	ble.n	800b074 <ai_array_to_buffer_fmt+0x34>
 800b05c:	4b27      	ldr	r3, [pc, #156]	; (800b0fc <ai_array_to_buffer_fmt+0xbc>)
 800b05e:	429a      	cmp	r2, r3
 800b060:	d003      	beq.n	800b06a <ai_array_to_buffer_fmt+0x2a>
 800b062:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800b066:	429a      	cmp	r2, r3
 800b068:	d131      	bne.n	800b0ce <ai_array_to_buffer_fmt+0x8e>
 800b06a:	4613      	mov	r3, r2
 800b06c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800b070:	4318      	orrs	r0, r3
 800b072:	4770      	bx	lr
 800b074:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800b078:	429a      	cmp	r2, r3
 800b07a:	d0f6      	beq.n	800b06a <ai_array_to_buffer_fmt+0x2a>
 800b07c:	dd2c      	ble.n	800b0d8 <ai_array_to_buffer_fmt+0x98>
 800b07e:	4b20      	ldr	r3, [pc, #128]	; (800b100 <ai_array_to_buffer_fmt+0xc0>)
 800b080:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800b084:	429a      	cmp	r2, r3
 800b086:	bf18      	it	ne
 800b088:	2340      	movne	r3, #64	; 0x40
 800b08a:	4318      	orrs	r0, r3
 800b08c:	4770      	bx	lr
 800b08e:	4b1d      	ldr	r3, [pc, #116]	; (800b104 <ai_array_to_buffer_fmt+0xc4>)
 800b090:	429a      	cmp	r2, r3
 800b092:	d0ea      	beq.n	800b06a <ai_array_to_buffer_fmt+0x2a>
 800b094:	dd0e      	ble.n	800b0b4 <ai_array_to_buffer_fmt+0x74>
 800b096:	4b1c      	ldr	r3, [pc, #112]	; (800b108 <ai_array_to_buffer_fmt+0xc8>)
 800b098:	429a      	cmp	r2, r3
 800b09a:	d0e6      	beq.n	800b06a <ai_array_to_buffer_fmt+0x2a>
 800b09c:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	d0e2      	beq.n	800b06a <ai_array_to_buffer_fmt+0x2a>
 800b0a4:	4b19      	ldr	r3, [pc, #100]	; (800b10c <ai_array_to_buffer_fmt+0xcc>)
 800b0a6:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800b0aa:	429a      	cmp	r2, r3
 800b0ac:	bf18      	it	ne
 800b0ae:	2340      	movne	r3, #64	; 0x40
 800b0b0:	4318      	orrs	r0, r3
 800b0b2:	4770      	bx	lr
 800b0b4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800b0b8:	429a      	cmp	r2, r3
 800b0ba:	d0d6      	beq.n	800b06a <ai_array_to_buffer_fmt+0x2a>
 800b0bc:	3307      	adds	r3, #7
 800b0be:	429a      	cmp	r2, r3
 800b0c0:	d0d3      	beq.n	800b06a <ai_array_to_buffer_fmt+0x2a>
 800b0c2:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 800b0c6:	429a      	cmp	r2, r3
 800b0c8:	bf18      	it	ne
 800b0ca:	2340      	movne	r3, #64	; 0x40
 800b0cc:	e7ce      	b.n	800b06c <ai_array_to_buffer_fmt+0x2c>
 800b0ce:	4b10      	ldr	r3, [pc, #64]	; (800b110 <ai_array_to_buffer_fmt+0xd0>)
 800b0d0:	429a      	cmp	r2, r3
 800b0d2:	bf18      	it	ne
 800b0d4:	2340      	movne	r3, #64	; 0x40
 800b0d6:	e7c9      	b.n	800b06c <ai_array_to_buffer_fmt+0x2c>
 800b0d8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800b0dc:	429a      	cmp	r2, r3
 800b0de:	d0c4      	beq.n	800b06a <ai_array_to_buffer_fmt+0x2a>
 800b0e0:	3380      	adds	r3, #128	; 0x80
 800b0e2:	429a      	cmp	r2, r3
 800b0e4:	bf18      	it	ne
 800b0e6:	2340      	movne	r3, #64	; 0x40
 800b0e8:	e7c0      	b.n	800b06c <ai_array_to_buffer_fmt+0x2c>
 800b0ea:	4b0a      	ldr	r3, [pc, #40]	; (800b114 <ai_array_to_buffer_fmt+0xd4>)
 800b0ec:	4003      	ands	r3, r0
 800b0ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b0f2:	e7bb      	b.n	800b06c <ai_array_to_buffer_fmt+0x2c>
 800b0f4:	00840040 	.word	0x00840040
 800b0f8:	00040840 	.word	0x00040840
 800b0fc:	00041040 	.word	0x00041040
 800b100:	00040447 	.word	0x00040447
 800b104:	00840840 	.word	0x00840840
 800b108:	00841040 	.word	0x00841040
 800b10c:	0084084f 	.word	0x0084084f
 800b110:	0004084f 	.word	0x0004084f
 800b114:	00803fff 	.word	0x00803fff

0800b118 <ai_array_get_byte_size>:
 800b118:	b319      	cbz	r1, 800b162 <ai_array_get_byte_size+0x4a>
 800b11a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800b11e:	fb03 f101 	mul.w	r1, r3, r1
 800b122:	3107      	adds	r1, #7
 800b124:	f3c0 4243 	ubfx	r2, r0, #17, #4
 800b128:	f021 0307 	bic.w	r3, r1, #7
 800b12c:	2a04      	cmp	r2, #4
 800b12e:	f3c0 5141 	ubfx	r1, r0, #21, #2
 800b132:	fa23 f101 	lsr.w	r1, r3, r1
 800b136:	ea4f 10e0 	mov.w	r0, r0, asr #7
 800b13a:	d00b      	beq.n	800b154 <ai_array_get_byte_size+0x3c>
 800b13c:	2a08      	cmp	r2, #8
 800b13e:	d002      	beq.n	800b146 <ai_array_get_byte_size+0x2e>
 800b140:	3107      	adds	r1, #7
 800b142:	08c8      	lsrs	r0, r1, #3
 800b144:	4770      	bx	lr
 800b146:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800b14a:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800b14e:	3107      	adds	r1, #7
 800b150:	08c8      	lsrs	r0, r1, #3
 800b152:	4770      	bx	lr
 800b154:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800b158:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 800b15c:	3107      	adds	r1, #7
 800b15e:	08c8      	lsrs	r0, r1, #3
 800b160:	4770      	bx	lr
 800b162:	4608      	mov	r0, r1
 800b164:	4770      	bx	lr
 800b166:	bf00      	nop

0800b168 <ai_array_get_data_byte_size>:
 800b168:	b169      	cbz	r1, 800b186 <ai_array_get_data_byte_size+0x1e>
 800b16a:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 800b16e:	fb02 f101 	mul.w	r1, r2, r1
 800b172:	1dcb      	adds	r3, r1, #7
 800b174:	f023 0307 	bic.w	r3, r3, #7
 800b178:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800b17c:	fa23 f000 	lsr.w	r0, r3, r0
 800b180:	3007      	adds	r0, #7
 800b182:	08c0      	lsrs	r0, r0, #3
 800b184:	4770      	bx	lr
 800b186:	4608      	mov	r0, r1
 800b188:	4770      	bx	lr
 800b18a:	bf00      	nop

0800b18c <ai_version_get>:
 800b18c:	0212      	lsls	r2, r2, #8
 800b18e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800b192:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800b196:	4770      	bx	lr

0800b198 <get_tensor_byte_size>:
 800b198:	b410      	push	{r4}
 800b19a:	6983      	ldr	r3, [r0, #24]
 800b19c:	68c4      	ldr	r4, [r0, #12]
 800b19e:	6941      	ldr	r1, [r0, #20]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	68e0      	ldr	r0, [r4, #12]
 800b1a4:	4a07      	ldr	r2, [pc, #28]	; (800b1c4 <get_tensor_byte_size+0x2c>)
 800b1a6:	68c9      	ldr	r1, [r1, #12]
 800b1a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1ac:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800b1b0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b1b4:	fb01 f000 	mul.w	r0, r1, r0
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	bf04      	itt	eq
 800b1bc:	3007      	addeq	r0, #7
 800b1be:	08c0      	lsreq	r0, r0, #3
 800b1c0:	4770      	bx	lr
 800b1c2:	bf00      	nop
 800b1c4:	000400c0 	.word	0x000400c0

0800b1c8 <__errno>:
 800b1c8:	4b01      	ldr	r3, [pc, #4]	; (800b1d0 <__errno+0x8>)
 800b1ca:	6818      	ldr	r0, [r3, #0]
 800b1cc:	4770      	bx	lr
 800b1ce:	bf00      	nop
 800b1d0:	20000920 	.word	0x20000920

0800b1d4 <__libc_init_array>:
 800b1d4:	b570      	push	{r4, r5, r6, lr}
 800b1d6:	4d0d      	ldr	r5, [pc, #52]	; (800b20c <__libc_init_array+0x38>)
 800b1d8:	4c0d      	ldr	r4, [pc, #52]	; (800b210 <__libc_init_array+0x3c>)
 800b1da:	1b64      	subs	r4, r4, r5
 800b1dc:	10a4      	asrs	r4, r4, #2
 800b1de:	2600      	movs	r6, #0
 800b1e0:	42a6      	cmp	r6, r4
 800b1e2:	d109      	bne.n	800b1f8 <__libc_init_array+0x24>
 800b1e4:	4d0b      	ldr	r5, [pc, #44]	; (800b214 <__libc_init_array+0x40>)
 800b1e6:	4c0c      	ldr	r4, [pc, #48]	; (800b218 <__libc_init_array+0x44>)
 800b1e8:	f001 fafe 	bl	800c7e8 <_init>
 800b1ec:	1b64      	subs	r4, r4, r5
 800b1ee:	10a4      	asrs	r4, r4, #2
 800b1f0:	2600      	movs	r6, #0
 800b1f2:	42a6      	cmp	r6, r4
 800b1f4:	d105      	bne.n	800b202 <__libc_init_array+0x2e>
 800b1f6:	bd70      	pop	{r4, r5, r6, pc}
 800b1f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1fc:	4798      	blx	r3
 800b1fe:	3601      	adds	r6, #1
 800b200:	e7ee      	b.n	800b1e0 <__libc_init_array+0xc>
 800b202:	f855 3b04 	ldr.w	r3, [r5], #4
 800b206:	4798      	blx	r3
 800b208:	3601      	adds	r6, #1
 800b20a:	e7f2      	b.n	800b1f2 <__libc_init_array+0x1e>
 800b20c:	08014498 	.word	0x08014498
 800b210:	08014498 	.word	0x08014498
 800b214:	08014498 	.word	0x08014498
 800b218:	0801449c 	.word	0x0801449c

0800b21c <memset>:
 800b21c:	4402      	add	r2, r0
 800b21e:	4603      	mov	r3, r0
 800b220:	4293      	cmp	r3, r2
 800b222:	d100      	bne.n	800b226 <memset+0xa>
 800b224:	4770      	bx	lr
 800b226:	f803 1b01 	strb.w	r1, [r3], #1
 800b22a:	e7f9      	b.n	800b220 <memset+0x4>

0800b22c <_free_r>:
 800b22c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b22e:	2900      	cmp	r1, #0
 800b230:	d044      	beq.n	800b2bc <_free_r+0x90>
 800b232:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b236:	9001      	str	r0, [sp, #4]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	f1a1 0404 	sub.w	r4, r1, #4
 800b23e:	bfb8      	it	lt
 800b240:	18e4      	addlt	r4, r4, r3
 800b242:	f000 fc51 	bl	800bae8 <__malloc_lock>
 800b246:	4a1e      	ldr	r2, [pc, #120]	; (800b2c0 <_free_r+0x94>)
 800b248:	9801      	ldr	r0, [sp, #4]
 800b24a:	6813      	ldr	r3, [r2, #0]
 800b24c:	b933      	cbnz	r3, 800b25c <_free_r+0x30>
 800b24e:	6063      	str	r3, [r4, #4]
 800b250:	6014      	str	r4, [r2, #0]
 800b252:	b003      	add	sp, #12
 800b254:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b258:	f000 bc4c 	b.w	800baf4 <__malloc_unlock>
 800b25c:	42a3      	cmp	r3, r4
 800b25e:	d908      	bls.n	800b272 <_free_r+0x46>
 800b260:	6825      	ldr	r5, [r4, #0]
 800b262:	1961      	adds	r1, r4, r5
 800b264:	428b      	cmp	r3, r1
 800b266:	bf01      	itttt	eq
 800b268:	6819      	ldreq	r1, [r3, #0]
 800b26a:	685b      	ldreq	r3, [r3, #4]
 800b26c:	1949      	addeq	r1, r1, r5
 800b26e:	6021      	streq	r1, [r4, #0]
 800b270:	e7ed      	b.n	800b24e <_free_r+0x22>
 800b272:	461a      	mov	r2, r3
 800b274:	685b      	ldr	r3, [r3, #4]
 800b276:	b10b      	cbz	r3, 800b27c <_free_r+0x50>
 800b278:	42a3      	cmp	r3, r4
 800b27a:	d9fa      	bls.n	800b272 <_free_r+0x46>
 800b27c:	6811      	ldr	r1, [r2, #0]
 800b27e:	1855      	adds	r5, r2, r1
 800b280:	42a5      	cmp	r5, r4
 800b282:	d10b      	bne.n	800b29c <_free_r+0x70>
 800b284:	6824      	ldr	r4, [r4, #0]
 800b286:	4421      	add	r1, r4
 800b288:	1854      	adds	r4, r2, r1
 800b28a:	42a3      	cmp	r3, r4
 800b28c:	6011      	str	r1, [r2, #0]
 800b28e:	d1e0      	bne.n	800b252 <_free_r+0x26>
 800b290:	681c      	ldr	r4, [r3, #0]
 800b292:	685b      	ldr	r3, [r3, #4]
 800b294:	6053      	str	r3, [r2, #4]
 800b296:	4421      	add	r1, r4
 800b298:	6011      	str	r1, [r2, #0]
 800b29a:	e7da      	b.n	800b252 <_free_r+0x26>
 800b29c:	d902      	bls.n	800b2a4 <_free_r+0x78>
 800b29e:	230c      	movs	r3, #12
 800b2a0:	6003      	str	r3, [r0, #0]
 800b2a2:	e7d6      	b.n	800b252 <_free_r+0x26>
 800b2a4:	6825      	ldr	r5, [r4, #0]
 800b2a6:	1961      	adds	r1, r4, r5
 800b2a8:	428b      	cmp	r3, r1
 800b2aa:	bf04      	itt	eq
 800b2ac:	6819      	ldreq	r1, [r3, #0]
 800b2ae:	685b      	ldreq	r3, [r3, #4]
 800b2b0:	6063      	str	r3, [r4, #4]
 800b2b2:	bf04      	itt	eq
 800b2b4:	1949      	addeq	r1, r1, r5
 800b2b6:	6021      	streq	r1, [r4, #0]
 800b2b8:	6054      	str	r4, [r2, #4]
 800b2ba:	e7ca      	b.n	800b252 <_free_r+0x26>
 800b2bc:	b003      	add	sp, #12
 800b2be:	bd30      	pop	{r4, r5, pc}
 800b2c0:	20001564 	.word	0x20001564

0800b2c4 <sbrk_aligned>:
 800b2c4:	b570      	push	{r4, r5, r6, lr}
 800b2c6:	4e0e      	ldr	r6, [pc, #56]	; (800b300 <sbrk_aligned+0x3c>)
 800b2c8:	460c      	mov	r4, r1
 800b2ca:	6831      	ldr	r1, [r6, #0]
 800b2cc:	4605      	mov	r5, r0
 800b2ce:	b911      	cbnz	r1, 800b2d6 <sbrk_aligned+0x12>
 800b2d0:	f000 f91a 	bl	800b508 <_sbrk_r>
 800b2d4:	6030      	str	r0, [r6, #0]
 800b2d6:	4621      	mov	r1, r4
 800b2d8:	4628      	mov	r0, r5
 800b2da:	f000 f915 	bl	800b508 <_sbrk_r>
 800b2de:	1c43      	adds	r3, r0, #1
 800b2e0:	d00a      	beq.n	800b2f8 <sbrk_aligned+0x34>
 800b2e2:	1cc4      	adds	r4, r0, #3
 800b2e4:	f024 0403 	bic.w	r4, r4, #3
 800b2e8:	42a0      	cmp	r0, r4
 800b2ea:	d007      	beq.n	800b2fc <sbrk_aligned+0x38>
 800b2ec:	1a21      	subs	r1, r4, r0
 800b2ee:	4628      	mov	r0, r5
 800b2f0:	f000 f90a 	bl	800b508 <_sbrk_r>
 800b2f4:	3001      	adds	r0, #1
 800b2f6:	d101      	bne.n	800b2fc <sbrk_aligned+0x38>
 800b2f8:	f04f 34ff 	mov.w	r4, #4294967295
 800b2fc:	4620      	mov	r0, r4
 800b2fe:	bd70      	pop	{r4, r5, r6, pc}
 800b300:	20001568 	.word	0x20001568

0800b304 <_malloc_r>:
 800b304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b308:	1ccd      	adds	r5, r1, #3
 800b30a:	f025 0503 	bic.w	r5, r5, #3
 800b30e:	3508      	adds	r5, #8
 800b310:	2d0c      	cmp	r5, #12
 800b312:	bf38      	it	cc
 800b314:	250c      	movcc	r5, #12
 800b316:	2d00      	cmp	r5, #0
 800b318:	4607      	mov	r7, r0
 800b31a:	db01      	blt.n	800b320 <_malloc_r+0x1c>
 800b31c:	42a9      	cmp	r1, r5
 800b31e:	d905      	bls.n	800b32c <_malloc_r+0x28>
 800b320:	230c      	movs	r3, #12
 800b322:	603b      	str	r3, [r7, #0]
 800b324:	2600      	movs	r6, #0
 800b326:	4630      	mov	r0, r6
 800b328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b32c:	4e2e      	ldr	r6, [pc, #184]	; (800b3e8 <_malloc_r+0xe4>)
 800b32e:	f000 fbdb 	bl	800bae8 <__malloc_lock>
 800b332:	6833      	ldr	r3, [r6, #0]
 800b334:	461c      	mov	r4, r3
 800b336:	bb34      	cbnz	r4, 800b386 <_malloc_r+0x82>
 800b338:	4629      	mov	r1, r5
 800b33a:	4638      	mov	r0, r7
 800b33c:	f7ff ffc2 	bl	800b2c4 <sbrk_aligned>
 800b340:	1c43      	adds	r3, r0, #1
 800b342:	4604      	mov	r4, r0
 800b344:	d14d      	bne.n	800b3e2 <_malloc_r+0xde>
 800b346:	6834      	ldr	r4, [r6, #0]
 800b348:	4626      	mov	r6, r4
 800b34a:	2e00      	cmp	r6, #0
 800b34c:	d140      	bne.n	800b3d0 <_malloc_r+0xcc>
 800b34e:	6823      	ldr	r3, [r4, #0]
 800b350:	4631      	mov	r1, r6
 800b352:	4638      	mov	r0, r7
 800b354:	eb04 0803 	add.w	r8, r4, r3
 800b358:	f000 f8d6 	bl	800b508 <_sbrk_r>
 800b35c:	4580      	cmp	r8, r0
 800b35e:	d13a      	bne.n	800b3d6 <_malloc_r+0xd2>
 800b360:	6821      	ldr	r1, [r4, #0]
 800b362:	3503      	adds	r5, #3
 800b364:	1a6d      	subs	r5, r5, r1
 800b366:	f025 0503 	bic.w	r5, r5, #3
 800b36a:	3508      	adds	r5, #8
 800b36c:	2d0c      	cmp	r5, #12
 800b36e:	bf38      	it	cc
 800b370:	250c      	movcc	r5, #12
 800b372:	4629      	mov	r1, r5
 800b374:	4638      	mov	r0, r7
 800b376:	f7ff ffa5 	bl	800b2c4 <sbrk_aligned>
 800b37a:	3001      	adds	r0, #1
 800b37c:	d02b      	beq.n	800b3d6 <_malloc_r+0xd2>
 800b37e:	6823      	ldr	r3, [r4, #0]
 800b380:	442b      	add	r3, r5
 800b382:	6023      	str	r3, [r4, #0]
 800b384:	e00e      	b.n	800b3a4 <_malloc_r+0xa0>
 800b386:	6822      	ldr	r2, [r4, #0]
 800b388:	1b52      	subs	r2, r2, r5
 800b38a:	d41e      	bmi.n	800b3ca <_malloc_r+0xc6>
 800b38c:	2a0b      	cmp	r2, #11
 800b38e:	d916      	bls.n	800b3be <_malloc_r+0xba>
 800b390:	1961      	adds	r1, r4, r5
 800b392:	42a3      	cmp	r3, r4
 800b394:	6025      	str	r5, [r4, #0]
 800b396:	bf18      	it	ne
 800b398:	6059      	strne	r1, [r3, #4]
 800b39a:	6863      	ldr	r3, [r4, #4]
 800b39c:	bf08      	it	eq
 800b39e:	6031      	streq	r1, [r6, #0]
 800b3a0:	5162      	str	r2, [r4, r5]
 800b3a2:	604b      	str	r3, [r1, #4]
 800b3a4:	4638      	mov	r0, r7
 800b3a6:	f104 060b 	add.w	r6, r4, #11
 800b3aa:	f000 fba3 	bl	800baf4 <__malloc_unlock>
 800b3ae:	f026 0607 	bic.w	r6, r6, #7
 800b3b2:	1d23      	adds	r3, r4, #4
 800b3b4:	1af2      	subs	r2, r6, r3
 800b3b6:	d0b6      	beq.n	800b326 <_malloc_r+0x22>
 800b3b8:	1b9b      	subs	r3, r3, r6
 800b3ba:	50a3      	str	r3, [r4, r2]
 800b3bc:	e7b3      	b.n	800b326 <_malloc_r+0x22>
 800b3be:	6862      	ldr	r2, [r4, #4]
 800b3c0:	42a3      	cmp	r3, r4
 800b3c2:	bf0c      	ite	eq
 800b3c4:	6032      	streq	r2, [r6, #0]
 800b3c6:	605a      	strne	r2, [r3, #4]
 800b3c8:	e7ec      	b.n	800b3a4 <_malloc_r+0xa0>
 800b3ca:	4623      	mov	r3, r4
 800b3cc:	6864      	ldr	r4, [r4, #4]
 800b3ce:	e7b2      	b.n	800b336 <_malloc_r+0x32>
 800b3d0:	4634      	mov	r4, r6
 800b3d2:	6876      	ldr	r6, [r6, #4]
 800b3d4:	e7b9      	b.n	800b34a <_malloc_r+0x46>
 800b3d6:	230c      	movs	r3, #12
 800b3d8:	603b      	str	r3, [r7, #0]
 800b3da:	4638      	mov	r0, r7
 800b3dc:	f000 fb8a 	bl	800baf4 <__malloc_unlock>
 800b3e0:	e7a1      	b.n	800b326 <_malloc_r+0x22>
 800b3e2:	6025      	str	r5, [r4, #0]
 800b3e4:	e7de      	b.n	800b3a4 <_malloc_r+0xa0>
 800b3e6:	bf00      	nop
 800b3e8:	20001564 	.word	0x20001564

0800b3ec <iprintf>:
 800b3ec:	b40f      	push	{r0, r1, r2, r3}
 800b3ee:	4b0a      	ldr	r3, [pc, #40]	; (800b418 <iprintf+0x2c>)
 800b3f0:	b513      	push	{r0, r1, r4, lr}
 800b3f2:	681c      	ldr	r4, [r3, #0]
 800b3f4:	b124      	cbz	r4, 800b400 <iprintf+0x14>
 800b3f6:	69a3      	ldr	r3, [r4, #24]
 800b3f8:	b913      	cbnz	r3, 800b400 <iprintf+0x14>
 800b3fa:	4620      	mov	r0, r4
 800b3fc:	f000 fa6e 	bl	800b8dc <__sinit>
 800b400:	ab05      	add	r3, sp, #20
 800b402:	9a04      	ldr	r2, [sp, #16]
 800b404:	68a1      	ldr	r1, [r4, #8]
 800b406:	9301      	str	r3, [sp, #4]
 800b408:	4620      	mov	r0, r4
 800b40a:	f000 fba3 	bl	800bb54 <_vfiprintf_r>
 800b40e:	b002      	add	sp, #8
 800b410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b414:	b004      	add	sp, #16
 800b416:	4770      	bx	lr
 800b418:	20000920 	.word	0x20000920

0800b41c <_puts_r>:
 800b41c:	b570      	push	{r4, r5, r6, lr}
 800b41e:	460e      	mov	r6, r1
 800b420:	4605      	mov	r5, r0
 800b422:	b118      	cbz	r0, 800b42c <_puts_r+0x10>
 800b424:	6983      	ldr	r3, [r0, #24]
 800b426:	b90b      	cbnz	r3, 800b42c <_puts_r+0x10>
 800b428:	f000 fa58 	bl	800b8dc <__sinit>
 800b42c:	69ab      	ldr	r3, [r5, #24]
 800b42e:	68ac      	ldr	r4, [r5, #8]
 800b430:	b913      	cbnz	r3, 800b438 <_puts_r+0x1c>
 800b432:	4628      	mov	r0, r5
 800b434:	f000 fa52 	bl	800b8dc <__sinit>
 800b438:	4b2c      	ldr	r3, [pc, #176]	; (800b4ec <_puts_r+0xd0>)
 800b43a:	429c      	cmp	r4, r3
 800b43c:	d120      	bne.n	800b480 <_puts_r+0x64>
 800b43e:	686c      	ldr	r4, [r5, #4]
 800b440:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b442:	07db      	lsls	r3, r3, #31
 800b444:	d405      	bmi.n	800b452 <_puts_r+0x36>
 800b446:	89a3      	ldrh	r3, [r4, #12]
 800b448:	0598      	lsls	r0, r3, #22
 800b44a:	d402      	bmi.n	800b452 <_puts_r+0x36>
 800b44c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b44e:	f000 fae3 	bl	800ba18 <__retarget_lock_acquire_recursive>
 800b452:	89a3      	ldrh	r3, [r4, #12]
 800b454:	0719      	lsls	r1, r3, #28
 800b456:	d51d      	bpl.n	800b494 <_puts_r+0x78>
 800b458:	6923      	ldr	r3, [r4, #16]
 800b45a:	b1db      	cbz	r3, 800b494 <_puts_r+0x78>
 800b45c:	3e01      	subs	r6, #1
 800b45e:	68a3      	ldr	r3, [r4, #8]
 800b460:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b464:	3b01      	subs	r3, #1
 800b466:	60a3      	str	r3, [r4, #8]
 800b468:	bb39      	cbnz	r1, 800b4ba <_puts_r+0x9e>
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	da38      	bge.n	800b4e0 <_puts_r+0xc4>
 800b46e:	4622      	mov	r2, r4
 800b470:	210a      	movs	r1, #10
 800b472:	4628      	mov	r0, r5
 800b474:	f000 f858 	bl	800b528 <__swbuf_r>
 800b478:	3001      	adds	r0, #1
 800b47a:	d011      	beq.n	800b4a0 <_puts_r+0x84>
 800b47c:	250a      	movs	r5, #10
 800b47e:	e011      	b.n	800b4a4 <_puts_r+0x88>
 800b480:	4b1b      	ldr	r3, [pc, #108]	; (800b4f0 <_puts_r+0xd4>)
 800b482:	429c      	cmp	r4, r3
 800b484:	d101      	bne.n	800b48a <_puts_r+0x6e>
 800b486:	68ac      	ldr	r4, [r5, #8]
 800b488:	e7da      	b.n	800b440 <_puts_r+0x24>
 800b48a:	4b1a      	ldr	r3, [pc, #104]	; (800b4f4 <_puts_r+0xd8>)
 800b48c:	429c      	cmp	r4, r3
 800b48e:	bf08      	it	eq
 800b490:	68ec      	ldreq	r4, [r5, #12]
 800b492:	e7d5      	b.n	800b440 <_puts_r+0x24>
 800b494:	4621      	mov	r1, r4
 800b496:	4628      	mov	r0, r5
 800b498:	f000 f898 	bl	800b5cc <__swsetup_r>
 800b49c:	2800      	cmp	r0, #0
 800b49e:	d0dd      	beq.n	800b45c <_puts_r+0x40>
 800b4a0:	f04f 35ff 	mov.w	r5, #4294967295
 800b4a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b4a6:	07da      	lsls	r2, r3, #31
 800b4a8:	d405      	bmi.n	800b4b6 <_puts_r+0x9a>
 800b4aa:	89a3      	ldrh	r3, [r4, #12]
 800b4ac:	059b      	lsls	r3, r3, #22
 800b4ae:	d402      	bmi.n	800b4b6 <_puts_r+0x9a>
 800b4b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b4b2:	f000 fab2 	bl	800ba1a <__retarget_lock_release_recursive>
 800b4b6:	4628      	mov	r0, r5
 800b4b8:	bd70      	pop	{r4, r5, r6, pc}
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	da04      	bge.n	800b4c8 <_puts_r+0xac>
 800b4be:	69a2      	ldr	r2, [r4, #24]
 800b4c0:	429a      	cmp	r2, r3
 800b4c2:	dc06      	bgt.n	800b4d2 <_puts_r+0xb6>
 800b4c4:	290a      	cmp	r1, #10
 800b4c6:	d004      	beq.n	800b4d2 <_puts_r+0xb6>
 800b4c8:	6823      	ldr	r3, [r4, #0]
 800b4ca:	1c5a      	adds	r2, r3, #1
 800b4cc:	6022      	str	r2, [r4, #0]
 800b4ce:	7019      	strb	r1, [r3, #0]
 800b4d0:	e7c5      	b.n	800b45e <_puts_r+0x42>
 800b4d2:	4622      	mov	r2, r4
 800b4d4:	4628      	mov	r0, r5
 800b4d6:	f000 f827 	bl	800b528 <__swbuf_r>
 800b4da:	3001      	adds	r0, #1
 800b4dc:	d1bf      	bne.n	800b45e <_puts_r+0x42>
 800b4de:	e7df      	b.n	800b4a0 <_puts_r+0x84>
 800b4e0:	6823      	ldr	r3, [r4, #0]
 800b4e2:	250a      	movs	r5, #10
 800b4e4:	1c5a      	adds	r2, r3, #1
 800b4e6:	6022      	str	r2, [r4, #0]
 800b4e8:	701d      	strb	r5, [r3, #0]
 800b4ea:	e7db      	b.n	800b4a4 <_puts_r+0x88>
 800b4ec:	08014404 	.word	0x08014404
 800b4f0:	08014424 	.word	0x08014424
 800b4f4:	080143e4 	.word	0x080143e4

0800b4f8 <puts>:
 800b4f8:	4b02      	ldr	r3, [pc, #8]	; (800b504 <puts+0xc>)
 800b4fa:	4601      	mov	r1, r0
 800b4fc:	6818      	ldr	r0, [r3, #0]
 800b4fe:	f7ff bf8d 	b.w	800b41c <_puts_r>
 800b502:	bf00      	nop
 800b504:	20000920 	.word	0x20000920

0800b508 <_sbrk_r>:
 800b508:	b538      	push	{r3, r4, r5, lr}
 800b50a:	4d06      	ldr	r5, [pc, #24]	; (800b524 <_sbrk_r+0x1c>)
 800b50c:	2300      	movs	r3, #0
 800b50e:	4604      	mov	r4, r0
 800b510:	4608      	mov	r0, r1
 800b512:	602b      	str	r3, [r5, #0]
 800b514:	f7f6 f964 	bl	80017e0 <_sbrk>
 800b518:	1c43      	adds	r3, r0, #1
 800b51a:	d102      	bne.n	800b522 <_sbrk_r+0x1a>
 800b51c:	682b      	ldr	r3, [r5, #0]
 800b51e:	b103      	cbz	r3, 800b522 <_sbrk_r+0x1a>
 800b520:	6023      	str	r3, [r4, #0]
 800b522:	bd38      	pop	{r3, r4, r5, pc}
 800b524:	20001570 	.word	0x20001570

0800b528 <__swbuf_r>:
 800b528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b52a:	460e      	mov	r6, r1
 800b52c:	4614      	mov	r4, r2
 800b52e:	4605      	mov	r5, r0
 800b530:	b118      	cbz	r0, 800b53a <__swbuf_r+0x12>
 800b532:	6983      	ldr	r3, [r0, #24]
 800b534:	b90b      	cbnz	r3, 800b53a <__swbuf_r+0x12>
 800b536:	f000 f9d1 	bl	800b8dc <__sinit>
 800b53a:	4b21      	ldr	r3, [pc, #132]	; (800b5c0 <__swbuf_r+0x98>)
 800b53c:	429c      	cmp	r4, r3
 800b53e:	d12b      	bne.n	800b598 <__swbuf_r+0x70>
 800b540:	686c      	ldr	r4, [r5, #4]
 800b542:	69a3      	ldr	r3, [r4, #24]
 800b544:	60a3      	str	r3, [r4, #8]
 800b546:	89a3      	ldrh	r3, [r4, #12]
 800b548:	071a      	lsls	r2, r3, #28
 800b54a:	d52f      	bpl.n	800b5ac <__swbuf_r+0x84>
 800b54c:	6923      	ldr	r3, [r4, #16]
 800b54e:	b36b      	cbz	r3, 800b5ac <__swbuf_r+0x84>
 800b550:	6923      	ldr	r3, [r4, #16]
 800b552:	6820      	ldr	r0, [r4, #0]
 800b554:	1ac0      	subs	r0, r0, r3
 800b556:	6963      	ldr	r3, [r4, #20]
 800b558:	b2f6      	uxtb	r6, r6
 800b55a:	4283      	cmp	r3, r0
 800b55c:	4637      	mov	r7, r6
 800b55e:	dc04      	bgt.n	800b56a <__swbuf_r+0x42>
 800b560:	4621      	mov	r1, r4
 800b562:	4628      	mov	r0, r5
 800b564:	f000 f926 	bl	800b7b4 <_fflush_r>
 800b568:	bb30      	cbnz	r0, 800b5b8 <__swbuf_r+0x90>
 800b56a:	68a3      	ldr	r3, [r4, #8]
 800b56c:	3b01      	subs	r3, #1
 800b56e:	60a3      	str	r3, [r4, #8]
 800b570:	6823      	ldr	r3, [r4, #0]
 800b572:	1c5a      	adds	r2, r3, #1
 800b574:	6022      	str	r2, [r4, #0]
 800b576:	701e      	strb	r6, [r3, #0]
 800b578:	6963      	ldr	r3, [r4, #20]
 800b57a:	3001      	adds	r0, #1
 800b57c:	4283      	cmp	r3, r0
 800b57e:	d004      	beq.n	800b58a <__swbuf_r+0x62>
 800b580:	89a3      	ldrh	r3, [r4, #12]
 800b582:	07db      	lsls	r3, r3, #31
 800b584:	d506      	bpl.n	800b594 <__swbuf_r+0x6c>
 800b586:	2e0a      	cmp	r6, #10
 800b588:	d104      	bne.n	800b594 <__swbuf_r+0x6c>
 800b58a:	4621      	mov	r1, r4
 800b58c:	4628      	mov	r0, r5
 800b58e:	f000 f911 	bl	800b7b4 <_fflush_r>
 800b592:	b988      	cbnz	r0, 800b5b8 <__swbuf_r+0x90>
 800b594:	4638      	mov	r0, r7
 800b596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b598:	4b0a      	ldr	r3, [pc, #40]	; (800b5c4 <__swbuf_r+0x9c>)
 800b59a:	429c      	cmp	r4, r3
 800b59c:	d101      	bne.n	800b5a2 <__swbuf_r+0x7a>
 800b59e:	68ac      	ldr	r4, [r5, #8]
 800b5a0:	e7cf      	b.n	800b542 <__swbuf_r+0x1a>
 800b5a2:	4b09      	ldr	r3, [pc, #36]	; (800b5c8 <__swbuf_r+0xa0>)
 800b5a4:	429c      	cmp	r4, r3
 800b5a6:	bf08      	it	eq
 800b5a8:	68ec      	ldreq	r4, [r5, #12]
 800b5aa:	e7ca      	b.n	800b542 <__swbuf_r+0x1a>
 800b5ac:	4621      	mov	r1, r4
 800b5ae:	4628      	mov	r0, r5
 800b5b0:	f000 f80c 	bl	800b5cc <__swsetup_r>
 800b5b4:	2800      	cmp	r0, #0
 800b5b6:	d0cb      	beq.n	800b550 <__swbuf_r+0x28>
 800b5b8:	f04f 37ff 	mov.w	r7, #4294967295
 800b5bc:	e7ea      	b.n	800b594 <__swbuf_r+0x6c>
 800b5be:	bf00      	nop
 800b5c0:	08014404 	.word	0x08014404
 800b5c4:	08014424 	.word	0x08014424
 800b5c8:	080143e4 	.word	0x080143e4

0800b5cc <__swsetup_r>:
 800b5cc:	4b32      	ldr	r3, [pc, #200]	; (800b698 <__swsetup_r+0xcc>)
 800b5ce:	b570      	push	{r4, r5, r6, lr}
 800b5d0:	681d      	ldr	r5, [r3, #0]
 800b5d2:	4606      	mov	r6, r0
 800b5d4:	460c      	mov	r4, r1
 800b5d6:	b125      	cbz	r5, 800b5e2 <__swsetup_r+0x16>
 800b5d8:	69ab      	ldr	r3, [r5, #24]
 800b5da:	b913      	cbnz	r3, 800b5e2 <__swsetup_r+0x16>
 800b5dc:	4628      	mov	r0, r5
 800b5de:	f000 f97d 	bl	800b8dc <__sinit>
 800b5e2:	4b2e      	ldr	r3, [pc, #184]	; (800b69c <__swsetup_r+0xd0>)
 800b5e4:	429c      	cmp	r4, r3
 800b5e6:	d10f      	bne.n	800b608 <__swsetup_r+0x3c>
 800b5e8:	686c      	ldr	r4, [r5, #4]
 800b5ea:	89a3      	ldrh	r3, [r4, #12]
 800b5ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b5f0:	0719      	lsls	r1, r3, #28
 800b5f2:	d42c      	bmi.n	800b64e <__swsetup_r+0x82>
 800b5f4:	06dd      	lsls	r5, r3, #27
 800b5f6:	d411      	bmi.n	800b61c <__swsetup_r+0x50>
 800b5f8:	2309      	movs	r3, #9
 800b5fa:	6033      	str	r3, [r6, #0]
 800b5fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b600:	81a3      	strh	r3, [r4, #12]
 800b602:	f04f 30ff 	mov.w	r0, #4294967295
 800b606:	e03e      	b.n	800b686 <__swsetup_r+0xba>
 800b608:	4b25      	ldr	r3, [pc, #148]	; (800b6a0 <__swsetup_r+0xd4>)
 800b60a:	429c      	cmp	r4, r3
 800b60c:	d101      	bne.n	800b612 <__swsetup_r+0x46>
 800b60e:	68ac      	ldr	r4, [r5, #8]
 800b610:	e7eb      	b.n	800b5ea <__swsetup_r+0x1e>
 800b612:	4b24      	ldr	r3, [pc, #144]	; (800b6a4 <__swsetup_r+0xd8>)
 800b614:	429c      	cmp	r4, r3
 800b616:	bf08      	it	eq
 800b618:	68ec      	ldreq	r4, [r5, #12]
 800b61a:	e7e6      	b.n	800b5ea <__swsetup_r+0x1e>
 800b61c:	0758      	lsls	r0, r3, #29
 800b61e:	d512      	bpl.n	800b646 <__swsetup_r+0x7a>
 800b620:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b622:	b141      	cbz	r1, 800b636 <__swsetup_r+0x6a>
 800b624:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b628:	4299      	cmp	r1, r3
 800b62a:	d002      	beq.n	800b632 <__swsetup_r+0x66>
 800b62c:	4630      	mov	r0, r6
 800b62e:	f7ff fdfd 	bl	800b22c <_free_r>
 800b632:	2300      	movs	r3, #0
 800b634:	6363      	str	r3, [r4, #52]	; 0x34
 800b636:	89a3      	ldrh	r3, [r4, #12]
 800b638:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b63c:	81a3      	strh	r3, [r4, #12]
 800b63e:	2300      	movs	r3, #0
 800b640:	6063      	str	r3, [r4, #4]
 800b642:	6923      	ldr	r3, [r4, #16]
 800b644:	6023      	str	r3, [r4, #0]
 800b646:	89a3      	ldrh	r3, [r4, #12]
 800b648:	f043 0308 	orr.w	r3, r3, #8
 800b64c:	81a3      	strh	r3, [r4, #12]
 800b64e:	6923      	ldr	r3, [r4, #16]
 800b650:	b94b      	cbnz	r3, 800b666 <__swsetup_r+0x9a>
 800b652:	89a3      	ldrh	r3, [r4, #12]
 800b654:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b65c:	d003      	beq.n	800b666 <__swsetup_r+0x9a>
 800b65e:	4621      	mov	r1, r4
 800b660:	4630      	mov	r0, r6
 800b662:	f000 fa01 	bl	800ba68 <__smakebuf_r>
 800b666:	89a0      	ldrh	r0, [r4, #12]
 800b668:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b66c:	f010 0301 	ands.w	r3, r0, #1
 800b670:	d00a      	beq.n	800b688 <__swsetup_r+0xbc>
 800b672:	2300      	movs	r3, #0
 800b674:	60a3      	str	r3, [r4, #8]
 800b676:	6963      	ldr	r3, [r4, #20]
 800b678:	425b      	negs	r3, r3
 800b67a:	61a3      	str	r3, [r4, #24]
 800b67c:	6923      	ldr	r3, [r4, #16]
 800b67e:	b943      	cbnz	r3, 800b692 <__swsetup_r+0xc6>
 800b680:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b684:	d1ba      	bne.n	800b5fc <__swsetup_r+0x30>
 800b686:	bd70      	pop	{r4, r5, r6, pc}
 800b688:	0781      	lsls	r1, r0, #30
 800b68a:	bf58      	it	pl
 800b68c:	6963      	ldrpl	r3, [r4, #20]
 800b68e:	60a3      	str	r3, [r4, #8]
 800b690:	e7f4      	b.n	800b67c <__swsetup_r+0xb0>
 800b692:	2000      	movs	r0, #0
 800b694:	e7f7      	b.n	800b686 <__swsetup_r+0xba>
 800b696:	bf00      	nop
 800b698:	20000920 	.word	0x20000920
 800b69c:	08014404 	.word	0x08014404
 800b6a0:	08014424 	.word	0x08014424
 800b6a4:	080143e4 	.word	0x080143e4

0800b6a8 <__sflush_r>:
 800b6a8:	898a      	ldrh	r2, [r1, #12]
 800b6aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6ae:	4605      	mov	r5, r0
 800b6b0:	0710      	lsls	r0, r2, #28
 800b6b2:	460c      	mov	r4, r1
 800b6b4:	d458      	bmi.n	800b768 <__sflush_r+0xc0>
 800b6b6:	684b      	ldr	r3, [r1, #4]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	dc05      	bgt.n	800b6c8 <__sflush_r+0x20>
 800b6bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	dc02      	bgt.n	800b6c8 <__sflush_r+0x20>
 800b6c2:	2000      	movs	r0, #0
 800b6c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b6ca:	2e00      	cmp	r6, #0
 800b6cc:	d0f9      	beq.n	800b6c2 <__sflush_r+0x1a>
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b6d4:	682f      	ldr	r7, [r5, #0]
 800b6d6:	602b      	str	r3, [r5, #0]
 800b6d8:	d032      	beq.n	800b740 <__sflush_r+0x98>
 800b6da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b6dc:	89a3      	ldrh	r3, [r4, #12]
 800b6de:	075a      	lsls	r2, r3, #29
 800b6e0:	d505      	bpl.n	800b6ee <__sflush_r+0x46>
 800b6e2:	6863      	ldr	r3, [r4, #4]
 800b6e4:	1ac0      	subs	r0, r0, r3
 800b6e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b6e8:	b10b      	cbz	r3, 800b6ee <__sflush_r+0x46>
 800b6ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b6ec:	1ac0      	subs	r0, r0, r3
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	4602      	mov	r2, r0
 800b6f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b6f4:	6a21      	ldr	r1, [r4, #32]
 800b6f6:	4628      	mov	r0, r5
 800b6f8:	47b0      	blx	r6
 800b6fa:	1c43      	adds	r3, r0, #1
 800b6fc:	89a3      	ldrh	r3, [r4, #12]
 800b6fe:	d106      	bne.n	800b70e <__sflush_r+0x66>
 800b700:	6829      	ldr	r1, [r5, #0]
 800b702:	291d      	cmp	r1, #29
 800b704:	d82c      	bhi.n	800b760 <__sflush_r+0xb8>
 800b706:	4a2a      	ldr	r2, [pc, #168]	; (800b7b0 <__sflush_r+0x108>)
 800b708:	40ca      	lsrs	r2, r1
 800b70a:	07d6      	lsls	r6, r2, #31
 800b70c:	d528      	bpl.n	800b760 <__sflush_r+0xb8>
 800b70e:	2200      	movs	r2, #0
 800b710:	6062      	str	r2, [r4, #4]
 800b712:	04d9      	lsls	r1, r3, #19
 800b714:	6922      	ldr	r2, [r4, #16]
 800b716:	6022      	str	r2, [r4, #0]
 800b718:	d504      	bpl.n	800b724 <__sflush_r+0x7c>
 800b71a:	1c42      	adds	r2, r0, #1
 800b71c:	d101      	bne.n	800b722 <__sflush_r+0x7a>
 800b71e:	682b      	ldr	r3, [r5, #0]
 800b720:	b903      	cbnz	r3, 800b724 <__sflush_r+0x7c>
 800b722:	6560      	str	r0, [r4, #84]	; 0x54
 800b724:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b726:	602f      	str	r7, [r5, #0]
 800b728:	2900      	cmp	r1, #0
 800b72a:	d0ca      	beq.n	800b6c2 <__sflush_r+0x1a>
 800b72c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b730:	4299      	cmp	r1, r3
 800b732:	d002      	beq.n	800b73a <__sflush_r+0x92>
 800b734:	4628      	mov	r0, r5
 800b736:	f7ff fd79 	bl	800b22c <_free_r>
 800b73a:	2000      	movs	r0, #0
 800b73c:	6360      	str	r0, [r4, #52]	; 0x34
 800b73e:	e7c1      	b.n	800b6c4 <__sflush_r+0x1c>
 800b740:	6a21      	ldr	r1, [r4, #32]
 800b742:	2301      	movs	r3, #1
 800b744:	4628      	mov	r0, r5
 800b746:	47b0      	blx	r6
 800b748:	1c41      	adds	r1, r0, #1
 800b74a:	d1c7      	bne.n	800b6dc <__sflush_r+0x34>
 800b74c:	682b      	ldr	r3, [r5, #0]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d0c4      	beq.n	800b6dc <__sflush_r+0x34>
 800b752:	2b1d      	cmp	r3, #29
 800b754:	d001      	beq.n	800b75a <__sflush_r+0xb2>
 800b756:	2b16      	cmp	r3, #22
 800b758:	d101      	bne.n	800b75e <__sflush_r+0xb6>
 800b75a:	602f      	str	r7, [r5, #0]
 800b75c:	e7b1      	b.n	800b6c2 <__sflush_r+0x1a>
 800b75e:	89a3      	ldrh	r3, [r4, #12]
 800b760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b764:	81a3      	strh	r3, [r4, #12]
 800b766:	e7ad      	b.n	800b6c4 <__sflush_r+0x1c>
 800b768:	690f      	ldr	r7, [r1, #16]
 800b76a:	2f00      	cmp	r7, #0
 800b76c:	d0a9      	beq.n	800b6c2 <__sflush_r+0x1a>
 800b76e:	0793      	lsls	r3, r2, #30
 800b770:	680e      	ldr	r6, [r1, #0]
 800b772:	bf08      	it	eq
 800b774:	694b      	ldreq	r3, [r1, #20]
 800b776:	600f      	str	r7, [r1, #0]
 800b778:	bf18      	it	ne
 800b77a:	2300      	movne	r3, #0
 800b77c:	eba6 0807 	sub.w	r8, r6, r7
 800b780:	608b      	str	r3, [r1, #8]
 800b782:	f1b8 0f00 	cmp.w	r8, #0
 800b786:	dd9c      	ble.n	800b6c2 <__sflush_r+0x1a>
 800b788:	6a21      	ldr	r1, [r4, #32]
 800b78a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b78c:	4643      	mov	r3, r8
 800b78e:	463a      	mov	r2, r7
 800b790:	4628      	mov	r0, r5
 800b792:	47b0      	blx	r6
 800b794:	2800      	cmp	r0, #0
 800b796:	dc06      	bgt.n	800b7a6 <__sflush_r+0xfe>
 800b798:	89a3      	ldrh	r3, [r4, #12]
 800b79a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b79e:	81a3      	strh	r3, [r4, #12]
 800b7a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b7a4:	e78e      	b.n	800b6c4 <__sflush_r+0x1c>
 800b7a6:	4407      	add	r7, r0
 800b7a8:	eba8 0800 	sub.w	r8, r8, r0
 800b7ac:	e7e9      	b.n	800b782 <__sflush_r+0xda>
 800b7ae:	bf00      	nop
 800b7b0:	20400001 	.word	0x20400001

0800b7b4 <_fflush_r>:
 800b7b4:	b538      	push	{r3, r4, r5, lr}
 800b7b6:	690b      	ldr	r3, [r1, #16]
 800b7b8:	4605      	mov	r5, r0
 800b7ba:	460c      	mov	r4, r1
 800b7bc:	b913      	cbnz	r3, 800b7c4 <_fflush_r+0x10>
 800b7be:	2500      	movs	r5, #0
 800b7c0:	4628      	mov	r0, r5
 800b7c2:	bd38      	pop	{r3, r4, r5, pc}
 800b7c4:	b118      	cbz	r0, 800b7ce <_fflush_r+0x1a>
 800b7c6:	6983      	ldr	r3, [r0, #24]
 800b7c8:	b90b      	cbnz	r3, 800b7ce <_fflush_r+0x1a>
 800b7ca:	f000 f887 	bl	800b8dc <__sinit>
 800b7ce:	4b14      	ldr	r3, [pc, #80]	; (800b820 <_fflush_r+0x6c>)
 800b7d0:	429c      	cmp	r4, r3
 800b7d2:	d11b      	bne.n	800b80c <_fflush_r+0x58>
 800b7d4:	686c      	ldr	r4, [r5, #4]
 800b7d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d0ef      	beq.n	800b7be <_fflush_r+0xa>
 800b7de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b7e0:	07d0      	lsls	r0, r2, #31
 800b7e2:	d404      	bmi.n	800b7ee <_fflush_r+0x3a>
 800b7e4:	0599      	lsls	r1, r3, #22
 800b7e6:	d402      	bmi.n	800b7ee <_fflush_r+0x3a>
 800b7e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b7ea:	f000 f915 	bl	800ba18 <__retarget_lock_acquire_recursive>
 800b7ee:	4628      	mov	r0, r5
 800b7f0:	4621      	mov	r1, r4
 800b7f2:	f7ff ff59 	bl	800b6a8 <__sflush_r>
 800b7f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b7f8:	07da      	lsls	r2, r3, #31
 800b7fa:	4605      	mov	r5, r0
 800b7fc:	d4e0      	bmi.n	800b7c0 <_fflush_r+0xc>
 800b7fe:	89a3      	ldrh	r3, [r4, #12]
 800b800:	059b      	lsls	r3, r3, #22
 800b802:	d4dd      	bmi.n	800b7c0 <_fflush_r+0xc>
 800b804:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b806:	f000 f908 	bl	800ba1a <__retarget_lock_release_recursive>
 800b80a:	e7d9      	b.n	800b7c0 <_fflush_r+0xc>
 800b80c:	4b05      	ldr	r3, [pc, #20]	; (800b824 <_fflush_r+0x70>)
 800b80e:	429c      	cmp	r4, r3
 800b810:	d101      	bne.n	800b816 <_fflush_r+0x62>
 800b812:	68ac      	ldr	r4, [r5, #8]
 800b814:	e7df      	b.n	800b7d6 <_fflush_r+0x22>
 800b816:	4b04      	ldr	r3, [pc, #16]	; (800b828 <_fflush_r+0x74>)
 800b818:	429c      	cmp	r4, r3
 800b81a:	bf08      	it	eq
 800b81c:	68ec      	ldreq	r4, [r5, #12]
 800b81e:	e7da      	b.n	800b7d6 <_fflush_r+0x22>
 800b820:	08014404 	.word	0x08014404
 800b824:	08014424 	.word	0x08014424
 800b828:	080143e4 	.word	0x080143e4

0800b82c <std>:
 800b82c:	2300      	movs	r3, #0
 800b82e:	b510      	push	{r4, lr}
 800b830:	4604      	mov	r4, r0
 800b832:	e9c0 3300 	strd	r3, r3, [r0]
 800b836:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b83a:	6083      	str	r3, [r0, #8]
 800b83c:	8181      	strh	r1, [r0, #12]
 800b83e:	6643      	str	r3, [r0, #100]	; 0x64
 800b840:	81c2      	strh	r2, [r0, #14]
 800b842:	6183      	str	r3, [r0, #24]
 800b844:	4619      	mov	r1, r3
 800b846:	2208      	movs	r2, #8
 800b848:	305c      	adds	r0, #92	; 0x5c
 800b84a:	f7ff fce7 	bl	800b21c <memset>
 800b84e:	4b05      	ldr	r3, [pc, #20]	; (800b864 <std+0x38>)
 800b850:	6263      	str	r3, [r4, #36]	; 0x24
 800b852:	4b05      	ldr	r3, [pc, #20]	; (800b868 <std+0x3c>)
 800b854:	62a3      	str	r3, [r4, #40]	; 0x28
 800b856:	4b05      	ldr	r3, [pc, #20]	; (800b86c <std+0x40>)
 800b858:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b85a:	4b05      	ldr	r3, [pc, #20]	; (800b870 <std+0x44>)
 800b85c:	6224      	str	r4, [r4, #32]
 800b85e:	6323      	str	r3, [r4, #48]	; 0x30
 800b860:	bd10      	pop	{r4, pc}
 800b862:	bf00      	nop
 800b864:	0800c0dd 	.word	0x0800c0dd
 800b868:	0800c0ff 	.word	0x0800c0ff
 800b86c:	0800c137 	.word	0x0800c137
 800b870:	0800c15b 	.word	0x0800c15b

0800b874 <_cleanup_r>:
 800b874:	4901      	ldr	r1, [pc, #4]	; (800b87c <_cleanup_r+0x8>)
 800b876:	f000 b8af 	b.w	800b9d8 <_fwalk_reent>
 800b87a:	bf00      	nop
 800b87c:	0800b7b5 	.word	0x0800b7b5

0800b880 <__sfmoreglue>:
 800b880:	b570      	push	{r4, r5, r6, lr}
 800b882:	2268      	movs	r2, #104	; 0x68
 800b884:	1e4d      	subs	r5, r1, #1
 800b886:	4355      	muls	r5, r2
 800b888:	460e      	mov	r6, r1
 800b88a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b88e:	f7ff fd39 	bl	800b304 <_malloc_r>
 800b892:	4604      	mov	r4, r0
 800b894:	b140      	cbz	r0, 800b8a8 <__sfmoreglue+0x28>
 800b896:	2100      	movs	r1, #0
 800b898:	e9c0 1600 	strd	r1, r6, [r0]
 800b89c:	300c      	adds	r0, #12
 800b89e:	60a0      	str	r0, [r4, #8]
 800b8a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b8a4:	f7ff fcba 	bl	800b21c <memset>
 800b8a8:	4620      	mov	r0, r4
 800b8aa:	bd70      	pop	{r4, r5, r6, pc}

0800b8ac <__sfp_lock_acquire>:
 800b8ac:	4801      	ldr	r0, [pc, #4]	; (800b8b4 <__sfp_lock_acquire+0x8>)
 800b8ae:	f000 b8b3 	b.w	800ba18 <__retarget_lock_acquire_recursive>
 800b8b2:	bf00      	nop
 800b8b4:	2000156d 	.word	0x2000156d

0800b8b8 <__sfp_lock_release>:
 800b8b8:	4801      	ldr	r0, [pc, #4]	; (800b8c0 <__sfp_lock_release+0x8>)
 800b8ba:	f000 b8ae 	b.w	800ba1a <__retarget_lock_release_recursive>
 800b8be:	bf00      	nop
 800b8c0:	2000156d 	.word	0x2000156d

0800b8c4 <__sinit_lock_acquire>:
 800b8c4:	4801      	ldr	r0, [pc, #4]	; (800b8cc <__sinit_lock_acquire+0x8>)
 800b8c6:	f000 b8a7 	b.w	800ba18 <__retarget_lock_acquire_recursive>
 800b8ca:	bf00      	nop
 800b8cc:	2000156e 	.word	0x2000156e

0800b8d0 <__sinit_lock_release>:
 800b8d0:	4801      	ldr	r0, [pc, #4]	; (800b8d8 <__sinit_lock_release+0x8>)
 800b8d2:	f000 b8a2 	b.w	800ba1a <__retarget_lock_release_recursive>
 800b8d6:	bf00      	nop
 800b8d8:	2000156e 	.word	0x2000156e

0800b8dc <__sinit>:
 800b8dc:	b510      	push	{r4, lr}
 800b8de:	4604      	mov	r4, r0
 800b8e0:	f7ff fff0 	bl	800b8c4 <__sinit_lock_acquire>
 800b8e4:	69a3      	ldr	r3, [r4, #24]
 800b8e6:	b11b      	cbz	r3, 800b8f0 <__sinit+0x14>
 800b8e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8ec:	f7ff bff0 	b.w	800b8d0 <__sinit_lock_release>
 800b8f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b8f4:	6523      	str	r3, [r4, #80]	; 0x50
 800b8f6:	4b13      	ldr	r3, [pc, #76]	; (800b944 <__sinit+0x68>)
 800b8f8:	4a13      	ldr	r2, [pc, #76]	; (800b948 <__sinit+0x6c>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	62a2      	str	r2, [r4, #40]	; 0x28
 800b8fe:	42a3      	cmp	r3, r4
 800b900:	bf04      	itt	eq
 800b902:	2301      	moveq	r3, #1
 800b904:	61a3      	streq	r3, [r4, #24]
 800b906:	4620      	mov	r0, r4
 800b908:	f000 f820 	bl	800b94c <__sfp>
 800b90c:	6060      	str	r0, [r4, #4]
 800b90e:	4620      	mov	r0, r4
 800b910:	f000 f81c 	bl	800b94c <__sfp>
 800b914:	60a0      	str	r0, [r4, #8]
 800b916:	4620      	mov	r0, r4
 800b918:	f000 f818 	bl	800b94c <__sfp>
 800b91c:	2200      	movs	r2, #0
 800b91e:	60e0      	str	r0, [r4, #12]
 800b920:	2104      	movs	r1, #4
 800b922:	6860      	ldr	r0, [r4, #4]
 800b924:	f7ff ff82 	bl	800b82c <std>
 800b928:	68a0      	ldr	r0, [r4, #8]
 800b92a:	2201      	movs	r2, #1
 800b92c:	2109      	movs	r1, #9
 800b92e:	f7ff ff7d 	bl	800b82c <std>
 800b932:	68e0      	ldr	r0, [r4, #12]
 800b934:	2202      	movs	r2, #2
 800b936:	2112      	movs	r1, #18
 800b938:	f7ff ff78 	bl	800b82c <std>
 800b93c:	2301      	movs	r3, #1
 800b93e:	61a3      	str	r3, [r4, #24]
 800b940:	e7d2      	b.n	800b8e8 <__sinit+0xc>
 800b942:	bf00      	nop
 800b944:	080143e0 	.word	0x080143e0
 800b948:	0800b875 	.word	0x0800b875

0800b94c <__sfp>:
 800b94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b94e:	4607      	mov	r7, r0
 800b950:	f7ff ffac 	bl	800b8ac <__sfp_lock_acquire>
 800b954:	4b1e      	ldr	r3, [pc, #120]	; (800b9d0 <__sfp+0x84>)
 800b956:	681e      	ldr	r6, [r3, #0]
 800b958:	69b3      	ldr	r3, [r6, #24]
 800b95a:	b913      	cbnz	r3, 800b962 <__sfp+0x16>
 800b95c:	4630      	mov	r0, r6
 800b95e:	f7ff ffbd 	bl	800b8dc <__sinit>
 800b962:	3648      	adds	r6, #72	; 0x48
 800b964:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b968:	3b01      	subs	r3, #1
 800b96a:	d503      	bpl.n	800b974 <__sfp+0x28>
 800b96c:	6833      	ldr	r3, [r6, #0]
 800b96e:	b30b      	cbz	r3, 800b9b4 <__sfp+0x68>
 800b970:	6836      	ldr	r6, [r6, #0]
 800b972:	e7f7      	b.n	800b964 <__sfp+0x18>
 800b974:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b978:	b9d5      	cbnz	r5, 800b9b0 <__sfp+0x64>
 800b97a:	4b16      	ldr	r3, [pc, #88]	; (800b9d4 <__sfp+0x88>)
 800b97c:	60e3      	str	r3, [r4, #12]
 800b97e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b982:	6665      	str	r5, [r4, #100]	; 0x64
 800b984:	f000 f847 	bl	800ba16 <__retarget_lock_init_recursive>
 800b988:	f7ff ff96 	bl	800b8b8 <__sfp_lock_release>
 800b98c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b990:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b994:	6025      	str	r5, [r4, #0]
 800b996:	61a5      	str	r5, [r4, #24]
 800b998:	2208      	movs	r2, #8
 800b99a:	4629      	mov	r1, r5
 800b99c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b9a0:	f7ff fc3c 	bl	800b21c <memset>
 800b9a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b9a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b9ac:	4620      	mov	r0, r4
 800b9ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9b0:	3468      	adds	r4, #104	; 0x68
 800b9b2:	e7d9      	b.n	800b968 <__sfp+0x1c>
 800b9b4:	2104      	movs	r1, #4
 800b9b6:	4638      	mov	r0, r7
 800b9b8:	f7ff ff62 	bl	800b880 <__sfmoreglue>
 800b9bc:	4604      	mov	r4, r0
 800b9be:	6030      	str	r0, [r6, #0]
 800b9c0:	2800      	cmp	r0, #0
 800b9c2:	d1d5      	bne.n	800b970 <__sfp+0x24>
 800b9c4:	f7ff ff78 	bl	800b8b8 <__sfp_lock_release>
 800b9c8:	230c      	movs	r3, #12
 800b9ca:	603b      	str	r3, [r7, #0]
 800b9cc:	e7ee      	b.n	800b9ac <__sfp+0x60>
 800b9ce:	bf00      	nop
 800b9d0:	080143e0 	.word	0x080143e0
 800b9d4:	ffff0001 	.word	0xffff0001

0800b9d8 <_fwalk_reent>:
 800b9d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9dc:	4606      	mov	r6, r0
 800b9de:	4688      	mov	r8, r1
 800b9e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b9e4:	2700      	movs	r7, #0
 800b9e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b9ea:	f1b9 0901 	subs.w	r9, r9, #1
 800b9ee:	d505      	bpl.n	800b9fc <_fwalk_reent+0x24>
 800b9f0:	6824      	ldr	r4, [r4, #0]
 800b9f2:	2c00      	cmp	r4, #0
 800b9f4:	d1f7      	bne.n	800b9e6 <_fwalk_reent+0xe>
 800b9f6:	4638      	mov	r0, r7
 800b9f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9fc:	89ab      	ldrh	r3, [r5, #12]
 800b9fe:	2b01      	cmp	r3, #1
 800ba00:	d907      	bls.n	800ba12 <_fwalk_reent+0x3a>
 800ba02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ba06:	3301      	adds	r3, #1
 800ba08:	d003      	beq.n	800ba12 <_fwalk_reent+0x3a>
 800ba0a:	4629      	mov	r1, r5
 800ba0c:	4630      	mov	r0, r6
 800ba0e:	47c0      	blx	r8
 800ba10:	4307      	orrs	r7, r0
 800ba12:	3568      	adds	r5, #104	; 0x68
 800ba14:	e7e9      	b.n	800b9ea <_fwalk_reent+0x12>

0800ba16 <__retarget_lock_init_recursive>:
 800ba16:	4770      	bx	lr

0800ba18 <__retarget_lock_acquire_recursive>:
 800ba18:	4770      	bx	lr

0800ba1a <__retarget_lock_release_recursive>:
 800ba1a:	4770      	bx	lr

0800ba1c <__swhatbuf_r>:
 800ba1c:	b570      	push	{r4, r5, r6, lr}
 800ba1e:	460e      	mov	r6, r1
 800ba20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba24:	2900      	cmp	r1, #0
 800ba26:	b096      	sub	sp, #88	; 0x58
 800ba28:	4614      	mov	r4, r2
 800ba2a:	461d      	mov	r5, r3
 800ba2c:	da08      	bge.n	800ba40 <__swhatbuf_r+0x24>
 800ba2e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ba32:	2200      	movs	r2, #0
 800ba34:	602a      	str	r2, [r5, #0]
 800ba36:	061a      	lsls	r2, r3, #24
 800ba38:	d410      	bmi.n	800ba5c <__swhatbuf_r+0x40>
 800ba3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba3e:	e00e      	b.n	800ba5e <__swhatbuf_r+0x42>
 800ba40:	466a      	mov	r2, sp
 800ba42:	f000 fbb1 	bl	800c1a8 <_fstat_r>
 800ba46:	2800      	cmp	r0, #0
 800ba48:	dbf1      	blt.n	800ba2e <__swhatbuf_r+0x12>
 800ba4a:	9a01      	ldr	r2, [sp, #4]
 800ba4c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ba50:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ba54:	425a      	negs	r2, r3
 800ba56:	415a      	adcs	r2, r3
 800ba58:	602a      	str	r2, [r5, #0]
 800ba5a:	e7ee      	b.n	800ba3a <__swhatbuf_r+0x1e>
 800ba5c:	2340      	movs	r3, #64	; 0x40
 800ba5e:	2000      	movs	r0, #0
 800ba60:	6023      	str	r3, [r4, #0]
 800ba62:	b016      	add	sp, #88	; 0x58
 800ba64:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ba68 <__smakebuf_r>:
 800ba68:	898b      	ldrh	r3, [r1, #12]
 800ba6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ba6c:	079d      	lsls	r5, r3, #30
 800ba6e:	4606      	mov	r6, r0
 800ba70:	460c      	mov	r4, r1
 800ba72:	d507      	bpl.n	800ba84 <__smakebuf_r+0x1c>
 800ba74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ba78:	6023      	str	r3, [r4, #0]
 800ba7a:	6123      	str	r3, [r4, #16]
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	6163      	str	r3, [r4, #20]
 800ba80:	b002      	add	sp, #8
 800ba82:	bd70      	pop	{r4, r5, r6, pc}
 800ba84:	ab01      	add	r3, sp, #4
 800ba86:	466a      	mov	r2, sp
 800ba88:	f7ff ffc8 	bl	800ba1c <__swhatbuf_r>
 800ba8c:	9900      	ldr	r1, [sp, #0]
 800ba8e:	4605      	mov	r5, r0
 800ba90:	4630      	mov	r0, r6
 800ba92:	f7ff fc37 	bl	800b304 <_malloc_r>
 800ba96:	b948      	cbnz	r0, 800baac <__smakebuf_r+0x44>
 800ba98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba9c:	059a      	lsls	r2, r3, #22
 800ba9e:	d4ef      	bmi.n	800ba80 <__smakebuf_r+0x18>
 800baa0:	f023 0303 	bic.w	r3, r3, #3
 800baa4:	f043 0302 	orr.w	r3, r3, #2
 800baa8:	81a3      	strh	r3, [r4, #12]
 800baaa:	e7e3      	b.n	800ba74 <__smakebuf_r+0xc>
 800baac:	4b0d      	ldr	r3, [pc, #52]	; (800bae4 <__smakebuf_r+0x7c>)
 800baae:	62b3      	str	r3, [r6, #40]	; 0x28
 800bab0:	89a3      	ldrh	r3, [r4, #12]
 800bab2:	6020      	str	r0, [r4, #0]
 800bab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bab8:	81a3      	strh	r3, [r4, #12]
 800baba:	9b00      	ldr	r3, [sp, #0]
 800babc:	6163      	str	r3, [r4, #20]
 800babe:	9b01      	ldr	r3, [sp, #4]
 800bac0:	6120      	str	r0, [r4, #16]
 800bac2:	b15b      	cbz	r3, 800badc <__smakebuf_r+0x74>
 800bac4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bac8:	4630      	mov	r0, r6
 800baca:	f000 fb7f 	bl	800c1cc <_isatty_r>
 800bace:	b128      	cbz	r0, 800badc <__smakebuf_r+0x74>
 800bad0:	89a3      	ldrh	r3, [r4, #12]
 800bad2:	f023 0303 	bic.w	r3, r3, #3
 800bad6:	f043 0301 	orr.w	r3, r3, #1
 800bada:	81a3      	strh	r3, [r4, #12]
 800badc:	89a0      	ldrh	r0, [r4, #12]
 800bade:	4305      	orrs	r5, r0
 800bae0:	81a5      	strh	r5, [r4, #12]
 800bae2:	e7cd      	b.n	800ba80 <__smakebuf_r+0x18>
 800bae4:	0800b875 	.word	0x0800b875

0800bae8 <__malloc_lock>:
 800bae8:	4801      	ldr	r0, [pc, #4]	; (800baf0 <__malloc_lock+0x8>)
 800baea:	f7ff bf95 	b.w	800ba18 <__retarget_lock_acquire_recursive>
 800baee:	bf00      	nop
 800baf0:	2000156c 	.word	0x2000156c

0800baf4 <__malloc_unlock>:
 800baf4:	4801      	ldr	r0, [pc, #4]	; (800bafc <__malloc_unlock+0x8>)
 800baf6:	f7ff bf90 	b.w	800ba1a <__retarget_lock_release_recursive>
 800bafa:	bf00      	nop
 800bafc:	2000156c 	.word	0x2000156c

0800bb00 <__sfputc_r>:
 800bb00:	6893      	ldr	r3, [r2, #8]
 800bb02:	3b01      	subs	r3, #1
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	b410      	push	{r4}
 800bb08:	6093      	str	r3, [r2, #8]
 800bb0a:	da08      	bge.n	800bb1e <__sfputc_r+0x1e>
 800bb0c:	6994      	ldr	r4, [r2, #24]
 800bb0e:	42a3      	cmp	r3, r4
 800bb10:	db01      	blt.n	800bb16 <__sfputc_r+0x16>
 800bb12:	290a      	cmp	r1, #10
 800bb14:	d103      	bne.n	800bb1e <__sfputc_r+0x1e>
 800bb16:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb1a:	f7ff bd05 	b.w	800b528 <__swbuf_r>
 800bb1e:	6813      	ldr	r3, [r2, #0]
 800bb20:	1c58      	adds	r0, r3, #1
 800bb22:	6010      	str	r0, [r2, #0]
 800bb24:	7019      	strb	r1, [r3, #0]
 800bb26:	4608      	mov	r0, r1
 800bb28:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb2c:	4770      	bx	lr

0800bb2e <__sfputs_r>:
 800bb2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb30:	4606      	mov	r6, r0
 800bb32:	460f      	mov	r7, r1
 800bb34:	4614      	mov	r4, r2
 800bb36:	18d5      	adds	r5, r2, r3
 800bb38:	42ac      	cmp	r4, r5
 800bb3a:	d101      	bne.n	800bb40 <__sfputs_r+0x12>
 800bb3c:	2000      	movs	r0, #0
 800bb3e:	e007      	b.n	800bb50 <__sfputs_r+0x22>
 800bb40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb44:	463a      	mov	r2, r7
 800bb46:	4630      	mov	r0, r6
 800bb48:	f7ff ffda 	bl	800bb00 <__sfputc_r>
 800bb4c:	1c43      	adds	r3, r0, #1
 800bb4e:	d1f3      	bne.n	800bb38 <__sfputs_r+0xa>
 800bb50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bb54 <_vfiprintf_r>:
 800bb54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb58:	460d      	mov	r5, r1
 800bb5a:	b09d      	sub	sp, #116	; 0x74
 800bb5c:	4614      	mov	r4, r2
 800bb5e:	4698      	mov	r8, r3
 800bb60:	4606      	mov	r6, r0
 800bb62:	b118      	cbz	r0, 800bb6c <_vfiprintf_r+0x18>
 800bb64:	6983      	ldr	r3, [r0, #24]
 800bb66:	b90b      	cbnz	r3, 800bb6c <_vfiprintf_r+0x18>
 800bb68:	f7ff feb8 	bl	800b8dc <__sinit>
 800bb6c:	4b89      	ldr	r3, [pc, #548]	; (800bd94 <_vfiprintf_r+0x240>)
 800bb6e:	429d      	cmp	r5, r3
 800bb70:	d11b      	bne.n	800bbaa <_vfiprintf_r+0x56>
 800bb72:	6875      	ldr	r5, [r6, #4]
 800bb74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb76:	07d9      	lsls	r1, r3, #31
 800bb78:	d405      	bmi.n	800bb86 <_vfiprintf_r+0x32>
 800bb7a:	89ab      	ldrh	r3, [r5, #12]
 800bb7c:	059a      	lsls	r2, r3, #22
 800bb7e:	d402      	bmi.n	800bb86 <_vfiprintf_r+0x32>
 800bb80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb82:	f7ff ff49 	bl	800ba18 <__retarget_lock_acquire_recursive>
 800bb86:	89ab      	ldrh	r3, [r5, #12]
 800bb88:	071b      	lsls	r3, r3, #28
 800bb8a:	d501      	bpl.n	800bb90 <_vfiprintf_r+0x3c>
 800bb8c:	692b      	ldr	r3, [r5, #16]
 800bb8e:	b9eb      	cbnz	r3, 800bbcc <_vfiprintf_r+0x78>
 800bb90:	4629      	mov	r1, r5
 800bb92:	4630      	mov	r0, r6
 800bb94:	f7ff fd1a 	bl	800b5cc <__swsetup_r>
 800bb98:	b1c0      	cbz	r0, 800bbcc <_vfiprintf_r+0x78>
 800bb9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb9c:	07dc      	lsls	r4, r3, #31
 800bb9e:	d50e      	bpl.n	800bbbe <_vfiprintf_r+0x6a>
 800bba0:	f04f 30ff 	mov.w	r0, #4294967295
 800bba4:	b01d      	add	sp, #116	; 0x74
 800bba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbaa:	4b7b      	ldr	r3, [pc, #492]	; (800bd98 <_vfiprintf_r+0x244>)
 800bbac:	429d      	cmp	r5, r3
 800bbae:	d101      	bne.n	800bbb4 <_vfiprintf_r+0x60>
 800bbb0:	68b5      	ldr	r5, [r6, #8]
 800bbb2:	e7df      	b.n	800bb74 <_vfiprintf_r+0x20>
 800bbb4:	4b79      	ldr	r3, [pc, #484]	; (800bd9c <_vfiprintf_r+0x248>)
 800bbb6:	429d      	cmp	r5, r3
 800bbb8:	bf08      	it	eq
 800bbba:	68f5      	ldreq	r5, [r6, #12]
 800bbbc:	e7da      	b.n	800bb74 <_vfiprintf_r+0x20>
 800bbbe:	89ab      	ldrh	r3, [r5, #12]
 800bbc0:	0598      	lsls	r0, r3, #22
 800bbc2:	d4ed      	bmi.n	800bba0 <_vfiprintf_r+0x4c>
 800bbc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bbc6:	f7ff ff28 	bl	800ba1a <__retarget_lock_release_recursive>
 800bbca:	e7e9      	b.n	800bba0 <_vfiprintf_r+0x4c>
 800bbcc:	2300      	movs	r3, #0
 800bbce:	9309      	str	r3, [sp, #36]	; 0x24
 800bbd0:	2320      	movs	r3, #32
 800bbd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bbd6:	f8cd 800c 	str.w	r8, [sp, #12]
 800bbda:	2330      	movs	r3, #48	; 0x30
 800bbdc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bda0 <_vfiprintf_r+0x24c>
 800bbe0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bbe4:	f04f 0901 	mov.w	r9, #1
 800bbe8:	4623      	mov	r3, r4
 800bbea:	469a      	mov	sl, r3
 800bbec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbf0:	b10a      	cbz	r2, 800bbf6 <_vfiprintf_r+0xa2>
 800bbf2:	2a25      	cmp	r2, #37	; 0x25
 800bbf4:	d1f9      	bne.n	800bbea <_vfiprintf_r+0x96>
 800bbf6:	ebba 0b04 	subs.w	fp, sl, r4
 800bbfa:	d00b      	beq.n	800bc14 <_vfiprintf_r+0xc0>
 800bbfc:	465b      	mov	r3, fp
 800bbfe:	4622      	mov	r2, r4
 800bc00:	4629      	mov	r1, r5
 800bc02:	4630      	mov	r0, r6
 800bc04:	f7ff ff93 	bl	800bb2e <__sfputs_r>
 800bc08:	3001      	adds	r0, #1
 800bc0a:	f000 80aa 	beq.w	800bd62 <_vfiprintf_r+0x20e>
 800bc0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc10:	445a      	add	r2, fp
 800bc12:	9209      	str	r2, [sp, #36]	; 0x24
 800bc14:	f89a 3000 	ldrb.w	r3, [sl]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	f000 80a2 	beq.w	800bd62 <_vfiprintf_r+0x20e>
 800bc1e:	2300      	movs	r3, #0
 800bc20:	f04f 32ff 	mov.w	r2, #4294967295
 800bc24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc28:	f10a 0a01 	add.w	sl, sl, #1
 800bc2c:	9304      	str	r3, [sp, #16]
 800bc2e:	9307      	str	r3, [sp, #28]
 800bc30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc34:	931a      	str	r3, [sp, #104]	; 0x68
 800bc36:	4654      	mov	r4, sl
 800bc38:	2205      	movs	r2, #5
 800bc3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc3e:	4858      	ldr	r0, [pc, #352]	; (800bda0 <_vfiprintf_r+0x24c>)
 800bc40:	f7f4 fade 	bl	8000200 <memchr>
 800bc44:	9a04      	ldr	r2, [sp, #16]
 800bc46:	b9d8      	cbnz	r0, 800bc80 <_vfiprintf_r+0x12c>
 800bc48:	06d1      	lsls	r1, r2, #27
 800bc4a:	bf44      	itt	mi
 800bc4c:	2320      	movmi	r3, #32
 800bc4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc52:	0713      	lsls	r3, r2, #28
 800bc54:	bf44      	itt	mi
 800bc56:	232b      	movmi	r3, #43	; 0x2b
 800bc58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc5c:	f89a 3000 	ldrb.w	r3, [sl]
 800bc60:	2b2a      	cmp	r3, #42	; 0x2a
 800bc62:	d015      	beq.n	800bc90 <_vfiprintf_r+0x13c>
 800bc64:	9a07      	ldr	r2, [sp, #28]
 800bc66:	4654      	mov	r4, sl
 800bc68:	2000      	movs	r0, #0
 800bc6a:	f04f 0c0a 	mov.w	ip, #10
 800bc6e:	4621      	mov	r1, r4
 800bc70:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc74:	3b30      	subs	r3, #48	; 0x30
 800bc76:	2b09      	cmp	r3, #9
 800bc78:	d94e      	bls.n	800bd18 <_vfiprintf_r+0x1c4>
 800bc7a:	b1b0      	cbz	r0, 800bcaa <_vfiprintf_r+0x156>
 800bc7c:	9207      	str	r2, [sp, #28]
 800bc7e:	e014      	b.n	800bcaa <_vfiprintf_r+0x156>
 800bc80:	eba0 0308 	sub.w	r3, r0, r8
 800bc84:	fa09 f303 	lsl.w	r3, r9, r3
 800bc88:	4313      	orrs	r3, r2
 800bc8a:	9304      	str	r3, [sp, #16]
 800bc8c:	46a2      	mov	sl, r4
 800bc8e:	e7d2      	b.n	800bc36 <_vfiprintf_r+0xe2>
 800bc90:	9b03      	ldr	r3, [sp, #12]
 800bc92:	1d19      	adds	r1, r3, #4
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	9103      	str	r1, [sp, #12]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	bfbb      	ittet	lt
 800bc9c:	425b      	neglt	r3, r3
 800bc9e:	f042 0202 	orrlt.w	r2, r2, #2
 800bca2:	9307      	strge	r3, [sp, #28]
 800bca4:	9307      	strlt	r3, [sp, #28]
 800bca6:	bfb8      	it	lt
 800bca8:	9204      	strlt	r2, [sp, #16]
 800bcaa:	7823      	ldrb	r3, [r4, #0]
 800bcac:	2b2e      	cmp	r3, #46	; 0x2e
 800bcae:	d10c      	bne.n	800bcca <_vfiprintf_r+0x176>
 800bcb0:	7863      	ldrb	r3, [r4, #1]
 800bcb2:	2b2a      	cmp	r3, #42	; 0x2a
 800bcb4:	d135      	bne.n	800bd22 <_vfiprintf_r+0x1ce>
 800bcb6:	9b03      	ldr	r3, [sp, #12]
 800bcb8:	1d1a      	adds	r2, r3, #4
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	9203      	str	r2, [sp, #12]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	bfb8      	it	lt
 800bcc2:	f04f 33ff 	movlt.w	r3, #4294967295
 800bcc6:	3402      	adds	r4, #2
 800bcc8:	9305      	str	r3, [sp, #20]
 800bcca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bdb0 <_vfiprintf_r+0x25c>
 800bcce:	7821      	ldrb	r1, [r4, #0]
 800bcd0:	2203      	movs	r2, #3
 800bcd2:	4650      	mov	r0, sl
 800bcd4:	f7f4 fa94 	bl	8000200 <memchr>
 800bcd8:	b140      	cbz	r0, 800bcec <_vfiprintf_r+0x198>
 800bcda:	2340      	movs	r3, #64	; 0x40
 800bcdc:	eba0 000a 	sub.w	r0, r0, sl
 800bce0:	fa03 f000 	lsl.w	r0, r3, r0
 800bce4:	9b04      	ldr	r3, [sp, #16]
 800bce6:	4303      	orrs	r3, r0
 800bce8:	3401      	adds	r4, #1
 800bcea:	9304      	str	r3, [sp, #16]
 800bcec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcf0:	482c      	ldr	r0, [pc, #176]	; (800bda4 <_vfiprintf_r+0x250>)
 800bcf2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bcf6:	2206      	movs	r2, #6
 800bcf8:	f7f4 fa82 	bl	8000200 <memchr>
 800bcfc:	2800      	cmp	r0, #0
 800bcfe:	d03f      	beq.n	800bd80 <_vfiprintf_r+0x22c>
 800bd00:	4b29      	ldr	r3, [pc, #164]	; (800bda8 <_vfiprintf_r+0x254>)
 800bd02:	bb1b      	cbnz	r3, 800bd4c <_vfiprintf_r+0x1f8>
 800bd04:	9b03      	ldr	r3, [sp, #12]
 800bd06:	3307      	adds	r3, #7
 800bd08:	f023 0307 	bic.w	r3, r3, #7
 800bd0c:	3308      	adds	r3, #8
 800bd0e:	9303      	str	r3, [sp, #12]
 800bd10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd12:	443b      	add	r3, r7
 800bd14:	9309      	str	r3, [sp, #36]	; 0x24
 800bd16:	e767      	b.n	800bbe8 <_vfiprintf_r+0x94>
 800bd18:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd1c:	460c      	mov	r4, r1
 800bd1e:	2001      	movs	r0, #1
 800bd20:	e7a5      	b.n	800bc6e <_vfiprintf_r+0x11a>
 800bd22:	2300      	movs	r3, #0
 800bd24:	3401      	adds	r4, #1
 800bd26:	9305      	str	r3, [sp, #20]
 800bd28:	4619      	mov	r1, r3
 800bd2a:	f04f 0c0a 	mov.w	ip, #10
 800bd2e:	4620      	mov	r0, r4
 800bd30:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd34:	3a30      	subs	r2, #48	; 0x30
 800bd36:	2a09      	cmp	r2, #9
 800bd38:	d903      	bls.n	800bd42 <_vfiprintf_r+0x1ee>
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d0c5      	beq.n	800bcca <_vfiprintf_r+0x176>
 800bd3e:	9105      	str	r1, [sp, #20]
 800bd40:	e7c3      	b.n	800bcca <_vfiprintf_r+0x176>
 800bd42:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd46:	4604      	mov	r4, r0
 800bd48:	2301      	movs	r3, #1
 800bd4a:	e7f0      	b.n	800bd2e <_vfiprintf_r+0x1da>
 800bd4c:	ab03      	add	r3, sp, #12
 800bd4e:	9300      	str	r3, [sp, #0]
 800bd50:	462a      	mov	r2, r5
 800bd52:	4b16      	ldr	r3, [pc, #88]	; (800bdac <_vfiprintf_r+0x258>)
 800bd54:	a904      	add	r1, sp, #16
 800bd56:	4630      	mov	r0, r6
 800bd58:	f3af 8000 	nop.w
 800bd5c:	4607      	mov	r7, r0
 800bd5e:	1c78      	adds	r0, r7, #1
 800bd60:	d1d6      	bne.n	800bd10 <_vfiprintf_r+0x1bc>
 800bd62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd64:	07d9      	lsls	r1, r3, #31
 800bd66:	d405      	bmi.n	800bd74 <_vfiprintf_r+0x220>
 800bd68:	89ab      	ldrh	r3, [r5, #12]
 800bd6a:	059a      	lsls	r2, r3, #22
 800bd6c:	d402      	bmi.n	800bd74 <_vfiprintf_r+0x220>
 800bd6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd70:	f7ff fe53 	bl	800ba1a <__retarget_lock_release_recursive>
 800bd74:	89ab      	ldrh	r3, [r5, #12]
 800bd76:	065b      	lsls	r3, r3, #25
 800bd78:	f53f af12 	bmi.w	800bba0 <_vfiprintf_r+0x4c>
 800bd7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd7e:	e711      	b.n	800bba4 <_vfiprintf_r+0x50>
 800bd80:	ab03      	add	r3, sp, #12
 800bd82:	9300      	str	r3, [sp, #0]
 800bd84:	462a      	mov	r2, r5
 800bd86:	4b09      	ldr	r3, [pc, #36]	; (800bdac <_vfiprintf_r+0x258>)
 800bd88:	a904      	add	r1, sp, #16
 800bd8a:	4630      	mov	r0, r6
 800bd8c:	f000 f880 	bl	800be90 <_printf_i>
 800bd90:	e7e4      	b.n	800bd5c <_vfiprintf_r+0x208>
 800bd92:	bf00      	nop
 800bd94:	08014404 	.word	0x08014404
 800bd98:	08014424 	.word	0x08014424
 800bd9c:	080143e4 	.word	0x080143e4
 800bda0:	08014444 	.word	0x08014444
 800bda4:	0801444e 	.word	0x0801444e
 800bda8:	00000000 	.word	0x00000000
 800bdac:	0800bb2f 	.word	0x0800bb2f
 800bdb0:	0801444a 	.word	0x0801444a

0800bdb4 <_printf_common>:
 800bdb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdb8:	4616      	mov	r6, r2
 800bdba:	4699      	mov	r9, r3
 800bdbc:	688a      	ldr	r2, [r1, #8]
 800bdbe:	690b      	ldr	r3, [r1, #16]
 800bdc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bdc4:	4293      	cmp	r3, r2
 800bdc6:	bfb8      	it	lt
 800bdc8:	4613      	movlt	r3, r2
 800bdca:	6033      	str	r3, [r6, #0]
 800bdcc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bdd0:	4607      	mov	r7, r0
 800bdd2:	460c      	mov	r4, r1
 800bdd4:	b10a      	cbz	r2, 800bdda <_printf_common+0x26>
 800bdd6:	3301      	adds	r3, #1
 800bdd8:	6033      	str	r3, [r6, #0]
 800bdda:	6823      	ldr	r3, [r4, #0]
 800bddc:	0699      	lsls	r1, r3, #26
 800bdde:	bf42      	ittt	mi
 800bde0:	6833      	ldrmi	r3, [r6, #0]
 800bde2:	3302      	addmi	r3, #2
 800bde4:	6033      	strmi	r3, [r6, #0]
 800bde6:	6825      	ldr	r5, [r4, #0]
 800bde8:	f015 0506 	ands.w	r5, r5, #6
 800bdec:	d106      	bne.n	800bdfc <_printf_common+0x48>
 800bdee:	f104 0a19 	add.w	sl, r4, #25
 800bdf2:	68e3      	ldr	r3, [r4, #12]
 800bdf4:	6832      	ldr	r2, [r6, #0]
 800bdf6:	1a9b      	subs	r3, r3, r2
 800bdf8:	42ab      	cmp	r3, r5
 800bdfa:	dc26      	bgt.n	800be4a <_printf_common+0x96>
 800bdfc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800be00:	1e13      	subs	r3, r2, #0
 800be02:	6822      	ldr	r2, [r4, #0]
 800be04:	bf18      	it	ne
 800be06:	2301      	movne	r3, #1
 800be08:	0692      	lsls	r2, r2, #26
 800be0a:	d42b      	bmi.n	800be64 <_printf_common+0xb0>
 800be0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800be10:	4649      	mov	r1, r9
 800be12:	4638      	mov	r0, r7
 800be14:	47c0      	blx	r8
 800be16:	3001      	adds	r0, #1
 800be18:	d01e      	beq.n	800be58 <_printf_common+0xa4>
 800be1a:	6823      	ldr	r3, [r4, #0]
 800be1c:	68e5      	ldr	r5, [r4, #12]
 800be1e:	6832      	ldr	r2, [r6, #0]
 800be20:	f003 0306 	and.w	r3, r3, #6
 800be24:	2b04      	cmp	r3, #4
 800be26:	bf08      	it	eq
 800be28:	1aad      	subeq	r5, r5, r2
 800be2a:	68a3      	ldr	r3, [r4, #8]
 800be2c:	6922      	ldr	r2, [r4, #16]
 800be2e:	bf0c      	ite	eq
 800be30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800be34:	2500      	movne	r5, #0
 800be36:	4293      	cmp	r3, r2
 800be38:	bfc4      	itt	gt
 800be3a:	1a9b      	subgt	r3, r3, r2
 800be3c:	18ed      	addgt	r5, r5, r3
 800be3e:	2600      	movs	r6, #0
 800be40:	341a      	adds	r4, #26
 800be42:	42b5      	cmp	r5, r6
 800be44:	d11a      	bne.n	800be7c <_printf_common+0xc8>
 800be46:	2000      	movs	r0, #0
 800be48:	e008      	b.n	800be5c <_printf_common+0xa8>
 800be4a:	2301      	movs	r3, #1
 800be4c:	4652      	mov	r2, sl
 800be4e:	4649      	mov	r1, r9
 800be50:	4638      	mov	r0, r7
 800be52:	47c0      	blx	r8
 800be54:	3001      	adds	r0, #1
 800be56:	d103      	bne.n	800be60 <_printf_common+0xac>
 800be58:	f04f 30ff 	mov.w	r0, #4294967295
 800be5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be60:	3501      	adds	r5, #1
 800be62:	e7c6      	b.n	800bdf2 <_printf_common+0x3e>
 800be64:	18e1      	adds	r1, r4, r3
 800be66:	1c5a      	adds	r2, r3, #1
 800be68:	2030      	movs	r0, #48	; 0x30
 800be6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800be6e:	4422      	add	r2, r4
 800be70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800be74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800be78:	3302      	adds	r3, #2
 800be7a:	e7c7      	b.n	800be0c <_printf_common+0x58>
 800be7c:	2301      	movs	r3, #1
 800be7e:	4622      	mov	r2, r4
 800be80:	4649      	mov	r1, r9
 800be82:	4638      	mov	r0, r7
 800be84:	47c0      	blx	r8
 800be86:	3001      	adds	r0, #1
 800be88:	d0e6      	beq.n	800be58 <_printf_common+0xa4>
 800be8a:	3601      	adds	r6, #1
 800be8c:	e7d9      	b.n	800be42 <_printf_common+0x8e>
	...

0800be90 <_printf_i>:
 800be90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be94:	7e0f      	ldrb	r7, [r1, #24]
 800be96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800be98:	2f78      	cmp	r7, #120	; 0x78
 800be9a:	4691      	mov	r9, r2
 800be9c:	4680      	mov	r8, r0
 800be9e:	460c      	mov	r4, r1
 800bea0:	469a      	mov	sl, r3
 800bea2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bea6:	d807      	bhi.n	800beb8 <_printf_i+0x28>
 800bea8:	2f62      	cmp	r7, #98	; 0x62
 800beaa:	d80a      	bhi.n	800bec2 <_printf_i+0x32>
 800beac:	2f00      	cmp	r7, #0
 800beae:	f000 80d8 	beq.w	800c062 <_printf_i+0x1d2>
 800beb2:	2f58      	cmp	r7, #88	; 0x58
 800beb4:	f000 80a3 	beq.w	800bffe <_printf_i+0x16e>
 800beb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bebc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bec0:	e03a      	b.n	800bf38 <_printf_i+0xa8>
 800bec2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bec6:	2b15      	cmp	r3, #21
 800bec8:	d8f6      	bhi.n	800beb8 <_printf_i+0x28>
 800beca:	a101      	add	r1, pc, #4	; (adr r1, 800bed0 <_printf_i+0x40>)
 800becc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bed0:	0800bf29 	.word	0x0800bf29
 800bed4:	0800bf3d 	.word	0x0800bf3d
 800bed8:	0800beb9 	.word	0x0800beb9
 800bedc:	0800beb9 	.word	0x0800beb9
 800bee0:	0800beb9 	.word	0x0800beb9
 800bee4:	0800beb9 	.word	0x0800beb9
 800bee8:	0800bf3d 	.word	0x0800bf3d
 800beec:	0800beb9 	.word	0x0800beb9
 800bef0:	0800beb9 	.word	0x0800beb9
 800bef4:	0800beb9 	.word	0x0800beb9
 800bef8:	0800beb9 	.word	0x0800beb9
 800befc:	0800c049 	.word	0x0800c049
 800bf00:	0800bf6d 	.word	0x0800bf6d
 800bf04:	0800c02b 	.word	0x0800c02b
 800bf08:	0800beb9 	.word	0x0800beb9
 800bf0c:	0800beb9 	.word	0x0800beb9
 800bf10:	0800c06b 	.word	0x0800c06b
 800bf14:	0800beb9 	.word	0x0800beb9
 800bf18:	0800bf6d 	.word	0x0800bf6d
 800bf1c:	0800beb9 	.word	0x0800beb9
 800bf20:	0800beb9 	.word	0x0800beb9
 800bf24:	0800c033 	.word	0x0800c033
 800bf28:	682b      	ldr	r3, [r5, #0]
 800bf2a:	1d1a      	adds	r2, r3, #4
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	602a      	str	r2, [r5, #0]
 800bf30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bf34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bf38:	2301      	movs	r3, #1
 800bf3a:	e0a3      	b.n	800c084 <_printf_i+0x1f4>
 800bf3c:	6820      	ldr	r0, [r4, #0]
 800bf3e:	6829      	ldr	r1, [r5, #0]
 800bf40:	0606      	lsls	r6, r0, #24
 800bf42:	f101 0304 	add.w	r3, r1, #4
 800bf46:	d50a      	bpl.n	800bf5e <_printf_i+0xce>
 800bf48:	680e      	ldr	r6, [r1, #0]
 800bf4a:	602b      	str	r3, [r5, #0]
 800bf4c:	2e00      	cmp	r6, #0
 800bf4e:	da03      	bge.n	800bf58 <_printf_i+0xc8>
 800bf50:	232d      	movs	r3, #45	; 0x2d
 800bf52:	4276      	negs	r6, r6
 800bf54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf58:	485e      	ldr	r0, [pc, #376]	; (800c0d4 <_printf_i+0x244>)
 800bf5a:	230a      	movs	r3, #10
 800bf5c:	e019      	b.n	800bf92 <_printf_i+0x102>
 800bf5e:	680e      	ldr	r6, [r1, #0]
 800bf60:	602b      	str	r3, [r5, #0]
 800bf62:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bf66:	bf18      	it	ne
 800bf68:	b236      	sxthne	r6, r6
 800bf6a:	e7ef      	b.n	800bf4c <_printf_i+0xbc>
 800bf6c:	682b      	ldr	r3, [r5, #0]
 800bf6e:	6820      	ldr	r0, [r4, #0]
 800bf70:	1d19      	adds	r1, r3, #4
 800bf72:	6029      	str	r1, [r5, #0]
 800bf74:	0601      	lsls	r1, r0, #24
 800bf76:	d501      	bpl.n	800bf7c <_printf_i+0xec>
 800bf78:	681e      	ldr	r6, [r3, #0]
 800bf7a:	e002      	b.n	800bf82 <_printf_i+0xf2>
 800bf7c:	0646      	lsls	r6, r0, #25
 800bf7e:	d5fb      	bpl.n	800bf78 <_printf_i+0xe8>
 800bf80:	881e      	ldrh	r6, [r3, #0]
 800bf82:	4854      	ldr	r0, [pc, #336]	; (800c0d4 <_printf_i+0x244>)
 800bf84:	2f6f      	cmp	r7, #111	; 0x6f
 800bf86:	bf0c      	ite	eq
 800bf88:	2308      	moveq	r3, #8
 800bf8a:	230a      	movne	r3, #10
 800bf8c:	2100      	movs	r1, #0
 800bf8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bf92:	6865      	ldr	r5, [r4, #4]
 800bf94:	60a5      	str	r5, [r4, #8]
 800bf96:	2d00      	cmp	r5, #0
 800bf98:	bfa2      	ittt	ge
 800bf9a:	6821      	ldrge	r1, [r4, #0]
 800bf9c:	f021 0104 	bicge.w	r1, r1, #4
 800bfa0:	6021      	strge	r1, [r4, #0]
 800bfa2:	b90e      	cbnz	r6, 800bfa8 <_printf_i+0x118>
 800bfa4:	2d00      	cmp	r5, #0
 800bfa6:	d04d      	beq.n	800c044 <_printf_i+0x1b4>
 800bfa8:	4615      	mov	r5, r2
 800bfaa:	fbb6 f1f3 	udiv	r1, r6, r3
 800bfae:	fb03 6711 	mls	r7, r3, r1, r6
 800bfb2:	5dc7      	ldrb	r7, [r0, r7]
 800bfb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bfb8:	4637      	mov	r7, r6
 800bfba:	42bb      	cmp	r3, r7
 800bfbc:	460e      	mov	r6, r1
 800bfbe:	d9f4      	bls.n	800bfaa <_printf_i+0x11a>
 800bfc0:	2b08      	cmp	r3, #8
 800bfc2:	d10b      	bne.n	800bfdc <_printf_i+0x14c>
 800bfc4:	6823      	ldr	r3, [r4, #0]
 800bfc6:	07de      	lsls	r6, r3, #31
 800bfc8:	d508      	bpl.n	800bfdc <_printf_i+0x14c>
 800bfca:	6923      	ldr	r3, [r4, #16]
 800bfcc:	6861      	ldr	r1, [r4, #4]
 800bfce:	4299      	cmp	r1, r3
 800bfd0:	bfde      	ittt	le
 800bfd2:	2330      	movle	r3, #48	; 0x30
 800bfd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bfd8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bfdc:	1b52      	subs	r2, r2, r5
 800bfde:	6122      	str	r2, [r4, #16]
 800bfe0:	f8cd a000 	str.w	sl, [sp]
 800bfe4:	464b      	mov	r3, r9
 800bfe6:	aa03      	add	r2, sp, #12
 800bfe8:	4621      	mov	r1, r4
 800bfea:	4640      	mov	r0, r8
 800bfec:	f7ff fee2 	bl	800bdb4 <_printf_common>
 800bff0:	3001      	adds	r0, #1
 800bff2:	d14c      	bne.n	800c08e <_printf_i+0x1fe>
 800bff4:	f04f 30ff 	mov.w	r0, #4294967295
 800bff8:	b004      	add	sp, #16
 800bffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bffe:	4835      	ldr	r0, [pc, #212]	; (800c0d4 <_printf_i+0x244>)
 800c000:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c004:	6829      	ldr	r1, [r5, #0]
 800c006:	6823      	ldr	r3, [r4, #0]
 800c008:	f851 6b04 	ldr.w	r6, [r1], #4
 800c00c:	6029      	str	r1, [r5, #0]
 800c00e:	061d      	lsls	r5, r3, #24
 800c010:	d514      	bpl.n	800c03c <_printf_i+0x1ac>
 800c012:	07df      	lsls	r7, r3, #31
 800c014:	bf44      	itt	mi
 800c016:	f043 0320 	orrmi.w	r3, r3, #32
 800c01a:	6023      	strmi	r3, [r4, #0]
 800c01c:	b91e      	cbnz	r6, 800c026 <_printf_i+0x196>
 800c01e:	6823      	ldr	r3, [r4, #0]
 800c020:	f023 0320 	bic.w	r3, r3, #32
 800c024:	6023      	str	r3, [r4, #0]
 800c026:	2310      	movs	r3, #16
 800c028:	e7b0      	b.n	800bf8c <_printf_i+0xfc>
 800c02a:	6823      	ldr	r3, [r4, #0]
 800c02c:	f043 0320 	orr.w	r3, r3, #32
 800c030:	6023      	str	r3, [r4, #0]
 800c032:	2378      	movs	r3, #120	; 0x78
 800c034:	4828      	ldr	r0, [pc, #160]	; (800c0d8 <_printf_i+0x248>)
 800c036:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c03a:	e7e3      	b.n	800c004 <_printf_i+0x174>
 800c03c:	0659      	lsls	r1, r3, #25
 800c03e:	bf48      	it	mi
 800c040:	b2b6      	uxthmi	r6, r6
 800c042:	e7e6      	b.n	800c012 <_printf_i+0x182>
 800c044:	4615      	mov	r5, r2
 800c046:	e7bb      	b.n	800bfc0 <_printf_i+0x130>
 800c048:	682b      	ldr	r3, [r5, #0]
 800c04a:	6826      	ldr	r6, [r4, #0]
 800c04c:	6961      	ldr	r1, [r4, #20]
 800c04e:	1d18      	adds	r0, r3, #4
 800c050:	6028      	str	r0, [r5, #0]
 800c052:	0635      	lsls	r5, r6, #24
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	d501      	bpl.n	800c05c <_printf_i+0x1cc>
 800c058:	6019      	str	r1, [r3, #0]
 800c05a:	e002      	b.n	800c062 <_printf_i+0x1d2>
 800c05c:	0670      	lsls	r0, r6, #25
 800c05e:	d5fb      	bpl.n	800c058 <_printf_i+0x1c8>
 800c060:	8019      	strh	r1, [r3, #0]
 800c062:	2300      	movs	r3, #0
 800c064:	6123      	str	r3, [r4, #16]
 800c066:	4615      	mov	r5, r2
 800c068:	e7ba      	b.n	800bfe0 <_printf_i+0x150>
 800c06a:	682b      	ldr	r3, [r5, #0]
 800c06c:	1d1a      	adds	r2, r3, #4
 800c06e:	602a      	str	r2, [r5, #0]
 800c070:	681d      	ldr	r5, [r3, #0]
 800c072:	6862      	ldr	r2, [r4, #4]
 800c074:	2100      	movs	r1, #0
 800c076:	4628      	mov	r0, r5
 800c078:	f7f4 f8c2 	bl	8000200 <memchr>
 800c07c:	b108      	cbz	r0, 800c082 <_printf_i+0x1f2>
 800c07e:	1b40      	subs	r0, r0, r5
 800c080:	6060      	str	r0, [r4, #4]
 800c082:	6863      	ldr	r3, [r4, #4]
 800c084:	6123      	str	r3, [r4, #16]
 800c086:	2300      	movs	r3, #0
 800c088:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c08c:	e7a8      	b.n	800bfe0 <_printf_i+0x150>
 800c08e:	6923      	ldr	r3, [r4, #16]
 800c090:	462a      	mov	r2, r5
 800c092:	4649      	mov	r1, r9
 800c094:	4640      	mov	r0, r8
 800c096:	47d0      	blx	sl
 800c098:	3001      	adds	r0, #1
 800c09a:	d0ab      	beq.n	800bff4 <_printf_i+0x164>
 800c09c:	6823      	ldr	r3, [r4, #0]
 800c09e:	079b      	lsls	r3, r3, #30
 800c0a0:	d413      	bmi.n	800c0ca <_printf_i+0x23a>
 800c0a2:	68e0      	ldr	r0, [r4, #12]
 800c0a4:	9b03      	ldr	r3, [sp, #12]
 800c0a6:	4298      	cmp	r0, r3
 800c0a8:	bfb8      	it	lt
 800c0aa:	4618      	movlt	r0, r3
 800c0ac:	e7a4      	b.n	800bff8 <_printf_i+0x168>
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	4632      	mov	r2, r6
 800c0b2:	4649      	mov	r1, r9
 800c0b4:	4640      	mov	r0, r8
 800c0b6:	47d0      	blx	sl
 800c0b8:	3001      	adds	r0, #1
 800c0ba:	d09b      	beq.n	800bff4 <_printf_i+0x164>
 800c0bc:	3501      	adds	r5, #1
 800c0be:	68e3      	ldr	r3, [r4, #12]
 800c0c0:	9903      	ldr	r1, [sp, #12]
 800c0c2:	1a5b      	subs	r3, r3, r1
 800c0c4:	42ab      	cmp	r3, r5
 800c0c6:	dcf2      	bgt.n	800c0ae <_printf_i+0x21e>
 800c0c8:	e7eb      	b.n	800c0a2 <_printf_i+0x212>
 800c0ca:	2500      	movs	r5, #0
 800c0cc:	f104 0619 	add.w	r6, r4, #25
 800c0d0:	e7f5      	b.n	800c0be <_printf_i+0x22e>
 800c0d2:	bf00      	nop
 800c0d4:	08014455 	.word	0x08014455
 800c0d8:	08014466 	.word	0x08014466

0800c0dc <__sread>:
 800c0dc:	b510      	push	{r4, lr}
 800c0de:	460c      	mov	r4, r1
 800c0e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0e4:	f000 f894 	bl	800c210 <_read_r>
 800c0e8:	2800      	cmp	r0, #0
 800c0ea:	bfab      	itete	ge
 800c0ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c0ee:	89a3      	ldrhlt	r3, [r4, #12]
 800c0f0:	181b      	addge	r3, r3, r0
 800c0f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c0f6:	bfac      	ite	ge
 800c0f8:	6563      	strge	r3, [r4, #84]	; 0x54
 800c0fa:	81a3      	strhlt	r3, [r4, #12]
 800c0fc:	bd10      	pop	{r4, pc}

0800c0fe <__swrite>:
 800c0fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c102:	461f      	mov	r7, r3
 800c104:	898b      	ldrh	r3, [r1, #12]
 800c106:	05db      	lsls	r3, r3, #23
 800c108:	4605      	mov	r5, r0
 800c10a:	460c      	mov	r4, r1
 800c10c:	4616      	mov	r6, r2
 800c10e:	d505      	bpl.n	800c11c <__swrite+0x1e>
 800c110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c114:	2302      	movs	r3, #2
 800c116:	2200      	movs	r2, #0
 800c118:	f000 f868 	bl	800c1ec <_lseek_r>
 800c11c:	89a3      	ldrh	r3, [r4, #12]
 800c11e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c122:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c126:	81a3      	strh	r3, [r4, #12]
 800c128:	4632      	mov	r2, r6
 800c12a:	463b      	mov	r3, r7
 800c12c:	4628      	mov	r0, r5
 800c12e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c132:	f000 b817 	b.w	800c164 <_write_r>

0800c136 <__sseek>:
 800c136:	b510      	push	{r4, lr}
 800c138:	460c      	mov	r4, r1
 800c13a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c13e:	f000 f855 	bl	800c1ec <_lseek_r>
 800c142:	1c43      	adds	r3, r0, #1
 800c144:	89a3      	ldrh	r3, [r4, #12]
 800c146:	bf15      	itete	ne
 800c148:	6560      	strne	r0, [r4, #84]	; 0x54
 800c14a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c14e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c152:	81a3      	strheq	r3, [r4, #12]
 800c154:	bf18      	it	ne
 800c156:	81a3      	strhne	r3, [r4, #12]
 800c158:	bd10      	pop	{r4, pc}

0800c15a <__sclose>:
 800c15a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c15e:	f000 b813 	b.w	800c188 <_close_r>
	...

0800c164 <_write_r>:
 800c164:	b538      	push	{r3, r4, r5, lr}
 800c166:	4d07      	ldr	r5, [pc, #28]	; (800c184 <_write_r+0x20>)
 800c168:	4604      	mov	r4, r0
 800c16a:	4608      	mov	r0, r1
 800c16c:	4611      	mov	r1, r2
 800c16e:	2200      	movs	r2, #0
 800c170:	602a      	str	r2, [r5, #0]
 800c172:	461a      	mov	r2, r3
 800c174:	f000 fb30 	bl	800c7d8 <_write>
 800c178:	1c43      	adds	r3, r0, #1
 800c17a:	d102      	bne.n	800c182 <_write_r+0x1e>
 800c17c:	682b      	ldr	r3, [r5, #0]
 800c17e:	b103      	cbz	r3, 800c182 <_write_r+0x1e>
 800c180:	6023      	str	r3, [r4, #0]
 800c182:	bd38      	pop	{r3, r4, r5, pc}
 800c184:	20001570 	.word	0x20001570

0800c188 <_close_r>:
 800c188:	b538      	push	{r3, r4, r5, lr}
 800c18a:	4d06      	ldr	r5, [pc, #24]	; (800c1a4 <_close_r+0x1c>)
 800c18c:	2300      	movs	r3, #0
 800c18e:	4604      	mov	r4, r0
 800c190:	4608      	mov	r0, r1
 800c192:	602b      	str	r3, [r5, #0]
 800c194:	f000 faf8 	bl	800c788 <_close>
 800c198:	1c43      	adds	r3, r0, #1
 800c19a:	d102      	bne.n	800c1a2 <_close_r+0x1a>
 800c19c:	682b      	ldr	r3, [r5, #0]
 800c19e:	b103      	cbz	r3, 800c1a2 <_close_r+0x1a>
 800c1a0:	6023      	str	r3, [r4, #0]
 800c1a2:	bd38      	pop	{r3, r4, r5, pc}
 800c1a4:	20001570 	.word	0x20001570

0800c1a8 <_fstat_r>:
 800c1a8:	b538      	push	{r3, r4, r5, lr}
 800c1aa:	4d07      	ldr	r5, [pc, #28]	; (800c1c8 <_fstat_r+0x20>)
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	4604      	mov	r4, r0
 800c1b0:	4608      	mov	r0, r1
 800c1b2:	4611      	mov	r1, r2
 800c1b4:	602b      	str	r3, [r5, #0]
 800c1b6:	f000 faef 	bl	800c798 <_fstat>
 800c1ba:	1c43      	adds	r3, r0, #1
 800c1bc:	d102      	bne.n	800c1c4 <_fstat_r+0x1c>
 800c1be:	682b      	ldr	r3, [r5, #0]
 800c1c0:	b103      	cbz	r3, 800c1c4 <_fstat_r+0x1c>
 800c1c2:	6023      	str	r3, [r4, #0]
 800c1c4:	bd38      	pop	{r3, r4, r5, pc}
 800c1c6:	bf00      	nop
 800c1c8:	20001570 	.word	0x20001570

0800c1cc <_isatty_r>:
 800c1cc:	b538      	push	{r3, r4, r5, lr}
 800c1ce:	4d06      	ldr	r5, [pc, #24]	; (800c1e8 <_isatty_r+0x1c>)
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	4604      	mov	r4, r0
 800c1d4:	4608      	mov	r0, r1
 800c1d6:	602b      	str	r3, [r5, #0]
 800c1d8:	f000 fae6 	bl	800c7a8 <_isatty>
 800c1dc:	1c43      	adds	r3, r0, #1
 800c1de:	d102      	bne.n	800c1e6 <_isatty_r+0x1a>
 800c1e0:	682b      	ldr	r3, [r5, #0]
 800c1e2:	b103      	cbz	r3, 800c1e6 <_isatty_r+0x1a>
 800c1e4:	6023      	str	r3, [r4, #0]
 800c1e6:	bd38      	pop	{r3, r4, r5, pc}
 800c1e8:	20001570 	.word	0x20001570

0800c1ec <_lseek_r>:
 800c1ec:	b538      	push	{r3, r4, r5, lr}
 800c1ee:	4d07      	ldr	r5, [pc, #28]	; (800c20c <_lseek_r+0x20>)
 800c1f0:	4604      	mov	r4, r0
 800c1f2:	4608      	mov	r0, r1
 800c1f4:	4611      	mov	r1, r2
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	602a      	str	r2, [r5, #0]
 800c1fa:	461a      	mov	r2, r3
 800c1fc:	f000 fadc 	bl	800c7b8 <_lseek>
 800c200:	1c43      	adds	r3, r0, #1
 800c202:	d102      	bne.n	800c20a <_lseek_r+0x1e>
 800c204:	682b      	ldr	r3, [r5, #0]
 800c206:	b103      	cbz	r3, 800c20a <_lseek_r+0x1e>
 800c208:	6023      	str	r3, [r4, #0]
 800c20a:	bd38      	pop	{r3, r4, r5, pc}
 800c20c:	20001570 	.word	0x20001570

0800c210 <_read_r>:
 800c210:	b538      	push	{r3, r4, r5, lr}
 800c212:	4d07      	ldr	r5, [pc, #28]	; (800c230 <_read_r+0x20>)
 800c214:	4604      	mov	r4, r0
 800c216:	4608      	mov	r0, r1
 800c218:	4611      	mov	r1, r2
 800c21a:	2200      	movs	r2, #0
 800c21c:	602a      	str	r2, [r5, #0]
 800c21e:	461a      	mov	r2, r3
 800c220:	f000 fad2 	bl	800c7c8 <_read>
 800c224:	1c43      	adds	r3, r0, #1
 800c226:	d102      	bne.n	800c22e <_read_r+0x1e>
 800c228:	682b      	ldr	r3, [r5, #0]
 800c22a:	b103      	cbz	r3, 800c22e <_read_r+0x1e>
 800c22c:	6023      	str	r3, [r4, #0]
 800c22e:	bd38      	pop	{r3, r4, r5, pc}
 800c230:	20001570 	.word	0x20001570

0800c234 <fabsf>:
 800c234:	ee10 3a10 	vmov	r3, s0
 800c238:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c23c:	ee00 3a10 	vmov	s0, r3
 800c240:	4770      	bx	lr
	...

0800c244 <tanhf>:
 800c244:	b510      	push	{r4, lr}
 800c246:	ee10 4a10 	vmov	r4, s0
 800c24a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c24e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c252:	ed2d 8b02 	vpush	{d8}
 800c256:	eeb0 7a40 	vmov.f32	s14, s0
 800c25a:	db0c      	blt.n	800c276 <tanhf+0x32>
 800c25c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c260:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800c264:	2c00      	cmp	r4, #0
 800c266:	bfac      	ite	ge
 800c268:	ee37 0a80 	vaddge.f32	s0, s15, s0
 800c26c:	ee37 0ac0 	vsublt.f32	s0, s15, s0
 800c270:	ecbd 8b02 	vpop	{d8}
 800c274:	bd10      	pop	{r4, pc}
 800c276:	4a1b      	ldr	r2, [pc, #108]	; (800c2e4 <tanhf+0xa0>)
 800c278:	4293      	cmp	r3, r2
 800c27a:	dc30      	bgt.n	800c2de <tanhf+0x9a>
 800c27c:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 800c280:	da06      	bge.n	800c290 <tanhf+0x4c>
 800c282:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c286:	ee70 7a27 	vadd.f32	s15, s0, s15
 800c28a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c28e:	e7ef      	b.n	800c270 <tanhf+0x2c>
 800c290:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800c294:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 800c298:	db12      	blt.n	800c2c0 <tanhf+0x7c>
 800c29a:	f7ff ffcb 	bl	800c234 <fabsf>
 800c29e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c2a2:	f000 f947 	bl	800c534 <expm1f>
 800c2a6:	ee30 0a08 	vadd.f32	s0, s0, s16
 800c2aa:	eec8 7a00 	vdiv.f32	s15, s16, s0
 800c2ae:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c2b2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c2b6:	2c00      	cmp	r4, #0
 800c2b8:	bfb8      	it	lt
 800c2ba:	eeb1 0a40 	vneglt.f32	s0, s0
 800c2be:	e7d7      	b.n	800c270 <tanhf+0x2c>
 800c2c0:	f7ff ffb8 	bl	800c234 <fabsf>
 800c2c4:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 800c2c8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c2cc:	f000 f932 	bl	800c534 <expm1f>
 800c2d0:	ee70 7a08 	vadd.f32	s15, s0, s16
 800c2d4:	eeb1 7a40 	vneg.f32	s14, s0
 800c2d8:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800c2dc:	e7eb      	b.n	800c2b6 <tanhf+0x72>
 800c2de:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c2e2:	e7e8      	b.n	800c2b6 <tanhf+0x72>
 800c2e4:	41afffff 	.word	0x41afffff

0800c2e8 <expf>:
 800c2e8:	b508      	push	{r3, lr}
 800c2ea:	ed2d 8b02 	vpush	{d8}
 800c2ee:	eef0 8a40 	vmov.f32	s17, s0
 800c2f2:	f000 f82f 	bl	800c354 <__ieee754_expf>
 800c2f6:	eeb0 8a40 	vmov.f32	s16, s0
 800c2fa:	eeb0 0a68 	vmov.f32	s0, s17
 800c2fe:	f000 fa35 	bl	800c76c <finitef>
 800c302:	b160      	cbz	r0, 800c31e <expf+0x36>
 800c304:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800c344 <expf+0x5c>
 800c308:	eef4 8ae7 	vcmpe.f32	s17, s15
 800c30c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c310:	dd0a      	ble.n	800c328 <expf+0x40>
 800c312:	f7fe ff59 	bl	800b1c8 <__errno>
 800c316:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 800c348 <expf+0x60>
 800c31a:	2322      	movs	r3, #34	; 0x22
 800c31c:	6003      	str	r3, [r0, #0]
 800c31e:	eeb0 0a48 	vmov.f32	s0, s16
 800c322:	ecbd 8b02 	vpop	{d8}
 800c326:	bd08      	pop	{r3, pc}
 800c328:	eddf 7a08 	vldr	s15, [pc, #32]	; 800c34c <expf+0x64>
 800c32c:	eef4 8ae7 	vcmpe.f32	s17, s15
 800c330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c334:	d5f3      	bpl.n	800c31e <expf+0x36>
 800c336:	f7fe ff47 	bl	800b1c8 <__errno>
 800c33a:	2322      	movs	r3, #34	; 0x22
 800c33c:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800c350 <expf+0x68>
 800c340:	6003      	str	r3, [r0, #0]
 800c342:	e7ec      	b.n	800c31e <expf+0x36>
 800c344:	42b17180 	.word	0x42b17180
 800c348:	7f800000 	.word	0x7f800000
 800c34c:	c2cff1b5 	.word	0xc2cff1b5
 800c350:	00000000 	.word	0x00000000

0800c354 <__ieee754_expf>:
 800c354:	ee10 2a10 	vmov	r2, s0
 800c358:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800c35c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c360:	d902      	bls.n	800c368 <__ieee754_expf+0x14>
 800c362:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c366:	4770      	bx	lr
 800c368:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800c36c:	d106      	bne.n	800c37c <__ieee754_expf+0x28>
 800c36e:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800c4a8 <__ieee754_expf+0x154>
 800c372:	2b00      	cmp	r3, #0
 800c374:	bf18      	it	ne
 800c376:	eeb0 0a67 	vmovne.f32	s0, s15
 800c37a:	4770      	bx	lr
 800c37c:	484b      	ldr	r0, [pc, #300]	; (800c4ac <__ieee754_expf+0x158>)
 800c37e:	4282      	cmp	r2, r0
 800c380:	dd02      	ble.n	800c388 <__ieee754_expf+0x34>
 800c382:	2000      	movs	r0, #0
 800c384:	f000 b8d0 	b.w	800c528 <__math_oflowf>
 800c388:	2a00      	cmp	r2, #0
 800c38a:	da05      	bge.n	800c398 <__ieee754_expf+0x44>
 800c38c:	4a48      	ldr	r2, [pc, #288]	; (800c4b0 <__ieee754_expf+0x15c>)
 800c38e:	4291      	cmp	r1, r2
 800c390:	d902      	bls.n	800c398 <__ieee754_expf+0x44>
 800c392:	2000      	movs	r0, #0
 800c394:	f000 b8c2 	b.w	800c51c <__math_uflowf>
 800c398:	4a46      	ldr	r2, [pc, #280]	; (800c4b4 <__ieee754_expf+0x160>)
 800c39a:	4291      	cmp	r1, r2
 800c39c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800c3a0:	d952      	bls.n	800c448 <__ieee754_expf+0xf4>
 800c3a2:	4a45      	ldr	r2, [pc, #276]	; (800c4b8 <__ieee754_expf+0x164>)
 800c3a4:	4291      	cmp	r1, r2
 800c3a6:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800c3aa:	d834      	bhi.n	800c416 <__ieee754_expf+0xc2>
 800c3ac:	4943      	ldr	r1, [pc, #268]	; (800c4bc <__ieee754_expf+0x168>)
 800c3ae:	4411      	add	r1, r2
 800c3b0:	ed91 7a00 	vldr	s14, [r1]
 800c3b4:	4942      	ldr	r1, [pc, #264]	; (800c4c0 <__ieee754_expf+0x16c>)
 800c3b6:	440a      	add	r2, r1
 800c3b8:	edd2 7a00 	vldr	s15, [r2]
 800c3bc:	ee30 7a47 	vsub.f32	s14, s0, s14
 800c3c0:	f1c3 0201 	rsb	r2, r3, #1
 800c3c4:	1ad2      	subs	r2, r2, r3
 800c3c6:	ee37 0a67 	vsub.f32	s0, s14, s15
 800c3ca:	ee20 6a00 	vmul.f32	s12, s0, s0
 800c3ce:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800c4c4 <__ieee754_expf+0x170>
 800c3d2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c4c8 <__ieee754_expf+0x174>
 800c3d6:	eee6 6a05 	vfma.f32	s13, s12, s10
 800c3da:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800c4cc <__ieee754_expf+0x178>
 800c3de:	eea6 5a86 	vfma.f32	s10, s13, s12
 800c3e2:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800c4d0 <__ieee754_expf+0x17c>
 800c3e6:	eee5 6a06 	vfma.f32	s13, s10, s12
 800c3ea:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800c4d4 <__ieee754_expf+0x180>
 800c3ee:	eea6 5a86 	vfma.f32	s10, s13, s12
 800c3f2:	eef0 6a40 	vmov.f32	s13, s0
 800c3f6:	eee5 6a46 	vfms.f32	s13, s10, s12
 800c3fa:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800c3fe:	ee20 5a26 	vmul.f32	s10, s0, s13
 800c402:	bb92      	cbnz	r2, 800c46a <__ieee754_expf+0x116>
 800c404:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800c408:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800c40c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800c410:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800c414:	4770      	bx	lr
 800c416:	4b30      	ldr	r3, [pc, #192]	; (800c4d8 <__ieee754_expf+0x184>)
 800c418:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800c4dc <__ieee754_expf+0x188>
 800c41c:	eddf 6a30 	vldr	s13, [pc, #192]	; 800c4e0 <__ieee754_expf+0x18c>
 800c420:	4413      	add	r3, r2
 800c422:	edd3 7a00 	vldr	s15, [r3]
 800c426:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c42a:	eeb0 7a40 	vmov.f32	s14, s0
 800c42e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c432:	ee17 2a90 	vmov	r2, s15
 800c436:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c43a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800c43e:	eddf 6a29 	vldr	s13, [pc, #164]	; 800c4e4 <__ieee754_expf+0x190>
 800c442:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c446:	e7be      	b.n	800c3c6 <__ieee754_expf+0x72>
 800c448:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 800c44c:	d20b      	bcs.n	800c466 <__ieee754_expf+0x112>
 800c44e:	eddf 6a26 	vldr	s13, [pc, #152]	; 800c4e8 <__ieee754_expf+0x194>
 800c452:	ee70 6a26 	vadd.f32	s13, s0, s13
 800c456:	eef4 6ae5 	vcmpe.f32	s13, s11
 800c45a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c45e:	dd02      	ble.n	800c466 <__ieee754_expf+0x112>
 800c460:	ee30 0a25 	vadd.f32	s0, s0, s11
 800c464:	4770      	bx	lr
 800c466:	2200      	movs	r2, #0
 800c468:	e7af      	b.n	800c3ca <__ieee754_expf+0x76>
 800c46a:	ee76 6a66 	vsub.f32	s13, s12, s13
 800c46e:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800c472:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800c476:	bfb8      	it	lt
 800c478:	3264      	addlt	r2, #100	; 0x64
 800c47a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c47e:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800c482:	ee75 7ac0 	vsub.f32	s15, s11, s0
 800c486:	ee17 3a90 	vmov	r3, s15
 800c48a:	bfab      	itete	ge
 800c48c:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800c490:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800c494:	ee00 3a10 	vmovge	s0, r3
 800c498:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 800c4ec <__ieee754_expf+0x198>
 800c49c:	bfbc      	itt	lt
 800c49e:	ee00 3a10 	vmovlt	s0, r3
 800c4a2:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800c4a6:	4770      	bx	lr
 800c4a8:	00000000 	.word	0x00000000
 800c4ac:	42b17217 	.word	0x42b17217
 800c4b0:	42cff1b5 	.word	0x42cff1b5
 800c4b4:	3eb17218 	.word	0x3eb17218
 800c4b8:	3f851591 	.word	0x3f851591
 800c4bc:	08014480 	.word	0x08014480
 800c4c0:	08014488 	.word	0x08014488
 800c4c4:	3331bb4c 	.word	0x3331bb4c
 800c4c8:	b5ddea0e 	.word	0xb5ddea0e
 800c4cc:	388ab355 	.word	0x388ab355
 800c4d0:	bb360b61 	.word	0xbb360b61
 800c4d4:	3e2aaaab 	.word	0x3e2aaaab
 800c4d8:	08014478 	.word	0x08014478
 800c4dc:	3fb8aa3b 	.word	0x3fb8aa3b
 800c4e0:	3f317180 	.word	0x3f317180
 800c4e4:	3717f7d1 	.word	0x3717f7d1
 800c4e8:	7149f2ca 	.word	0x7149f2ca
 800c4ec:	0d800000 	.word	0x0d800000

0800c4f0 <with_errnof>:
 800c4f0:	b513      	push	{r0, r1, r4, lr}
 800c4f2:	4604      	mov	r4, r0
 800c4f4:	ed8d 0a01 	vstr	s0, [sp, #4]
 800c4f8:	f7fe fe66 	bl	800b1c8 <__errno>
 800c4fc:	ed9d 0a01 	vldr	s0, [sp, #4]
 800c500:	6004      	str	r4, [r0, #0]
 800c502:	b002      	add	sp, #8
 800c504:	bd10      	pop	{r4, pc}

0800c506 <xflowf>:
 800c506:	b130      	cbz	r0, 800c516 <xflowf+0x10>
 800c508:	eef1 7a40 	vneg.f32	s15, s0
 800c50c:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c510:	2022      	movs	r0, #34	; 0x22
 800c512:	f7ff bfed 	b.w	800c4f0 <with_errnof>
 800c516:	eef0 7a40 	vmov.f32	s15, s0
 800c51a:	e7f7      	b.n	800c50c <xflowf+0x6>

0800c51c <__math_uflowf>:
 800c51c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c524 <__math_uflowf+0x8>
 800c520:	f7ff bff1 	b.w	800c506 <xflowf>
 800c524:	10000000 	.word	0x10000000

0800c528 <__math_oflowf>:
 800c528:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c530 <__math_oflowf+0x8>
 800c52c:	f7ff bfeb 	b.w	800c506 <xflowf>
 800c530:	70000000 	.word	0x70000000

0800c534 <expm1f>:
 800c534:	ee10 2a10 	vmov	r2, s0
 800c538:	497d      	ldr	r1, [pc, #500]	; (800c730 <expm1f+0x1fc>)
 800c53a:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800c53e:	428b      	cmp	r3, r1
 800c540:	d921      	bls.n	800c586 <expm1f+0x52>
 800c542:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c546:	d902      	bls.n	800c54e <expm1f+0x1a>
 800c548:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c54c:	4770      	bx	lr
 800c54e:	d106      	bne.n	800c55e <expm1f+0x2a>
 800c550:	2a00      	cmp	r2, #0
 800c552:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800c556:	bfb8      	it	lt
 800c558:	eeb0 0a67 	vmovlt.f32	s0, s15
 800c55c:	4770      	bx	lr
 800c55e:	2a00      	cmp	r2, #0
 800c560:	db05      	blt.n	800c56e <expm1f+0x3a>
 800c562:	4974      	ldr	r1, [pc, #464]	; (800c734 <expm1f+0x200>)
 800c564:	428b      	cmp	r3, r1
 800c566:	d95c      	bls.n	800c622 <expm1f+0xee>
 800c568:	2000      	movs	r0, #0
 800c56a:	f7ff bfdd 	b.w	800c528 <__math_oflowf>
 800c56e:	eddf 7a72 	vldr	s15, [pc, #456]	; 800c738 <expm1f+0x204>
 800c572:	ee70 7a27 	vadd.f32	s15, s0, s15
 800c576:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c57a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c57e:	d550      	bpl.n	800c622 <expm1f+0xee>
 800c580:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800c584:	4770      	bx	lr
 800c586:	496d      	ldr	r1, [pc, #436]	; (800c73c <expm1f+0x208>)
 800c588:	428b      	cmp	r3, r1
 800c58a:	d967      	bls.n	800c65c <expm1f+0x128>
 800c58c:	496c      	ldr	r1, [pc, #432]	; (800c740 <expm1f+0x20c>)
 800c58e:	428b      	cmp	r3, r1
 800c590:	d847      	bhi.n	800c622 <expm1f+0xee>
 800c592:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 800c744 <expm1f+0x210>
 800c596:	2a00      	cmp	r2, #0
 800c598:	bfa7      	ittee	ge
 800c59a:	ee30 7a47 	vsubge.f32	s14, s0, s14
 800c59e:	eddf 7a6a 	vldrge	s15, [pc, #424]	; 800c748 <expm1f+0x214>
 800c5a2:	eddf 7a6a 	vldrlt	s15, [pc, #424]	; 800c74c <expm1f+0x218>
 800c5a6:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 800c5aa:	bfac      	ite	ge
 800c5ac:	2301      	movge	r3, #1
 800c5ae:	f04f 33ff 	movlt.w	r3, #4294967295
 800c5b2:	ee37 0a67 	vsub.f32	s0, s14, s15
 800c5b6:	ee37 7a40 	vsub.f32	s14, s14, s0
 800c5ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c5be:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800c5c2:	ee20 4a25 	vmul.f32	s8, s0, s11
 800c5c6:	ed9f 6a62 	vldr	s12, [pc, #392]	; 800c750 <expm1f+0x21c>
 800c5ca:	eddf 6a62 	vldr	s13, [pc, #392]	; 800c754 <expm1f+0x220>
 800c5ce:	ed9f 5a62 	vldr	s10, [pc, #392]	; 800c758 <expm1f+0x224>
 800c5d2:	ee20 7a04 	vmul.f32	s14, s0, s8
 800c5d6:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 800c5da:	eee7 6a06 	vfma.f32	s13, s14, s12
 800c5de:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 800c75c <expm1f+0x228>
 800c5e2:	eea6 6a87 	vfma.f32	s12, s13, s14
 800c5e6:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800c760 <expm1f+0x22c>
 800c5ea:	eee6 6a07 	vfma.f32	s13, s12, s14
 800c5ee:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c5f2:	eea6 5a87 	vfma.f32	s10, s13, s14
 800c5f6:	eef0 6a46 	vmov.f32	s13, s12
 800c5fa:	eee5 6a07 	vfma.f32	s13, s10, s14
 800c5fe:	eee4 4a66 	vfms.f32	s9, s8, s13
 800c602:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 800c606:	eea0 4a64 	vfms.f32	s8, s0, s9
 800c60a:	ee36 5ae4 	vsub.f32	s10, s13, s9
 800c60e:	eec5 6a04 	vdiv.f32	s13, s10, s8
 800c612:	ee66 6a87 	vmul.f32	s13, s13, s14
 800c616:	bb7b      	cbnz	r3, 800c678 <expm1f+0x144>
 800c618:	eef0 7a47 	vmov.f32	s15, s14
 800c61c:	eed0 7a26 	vfnms.f32	s15, s0, s13
 800c620:	e025      	b.n	800c66e <expm1f+0x13a>
 800c622:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800c626:	2a00      	cmp	r2, #0
 800c628:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c62c:	bfb8      	it	lt
 800c62e:	eef0 7a47 	vmovlt.f32	s15, s14
 800c632:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800c764 <expm1f+0x230>
 800c636:	eddf 6a43 	vldr	s13, [pc, #268]	; 800c744 <expm1f+0x210>
 800c63a:	ee40 7a07 	vmla.f32	s15, s0, s14
 800c63e:	eeb0 7a40 	vmov.f32	s14, s0
 800c642:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c646:	ee17 3a90 	vmov	r3, s15
 800c64a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c64e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800c652:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c748 <expm1f+0x214>
 800c656:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c65a:	e7aa      	b.n	800c5b2 <expm1f+0x7e>
 800c65c:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 800c660:	d208      	bcs.n	800c674 <expm1f+0x140>
 800c662:	eddf 7a41 	vldr	s15, [pc, #260]	; 800c768 <expm1f+0x234>
 800c666:	ee70 7a27 	vadd.f32	s15, s0, s15
 800c66a:	ee77 7ae7 	vsub.f32	s15, s15, s15
 800c66e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c672:	4770      	bx	lr
 800c674:	2300      	movs	r3, #0
 800c676:	e7a2      	b.n	800c5be <expm1f+0x8a>
 800c678:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800c67c:	1c5a      	adds	r2, r3, #1
 800c67e:	eed6 7a80 	vfnms.f32	s15, s13, s0
 800c682:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c686:	d106      	bne.n	800c696 <expm1f+0x162>
 800c688:	ee70 7a67 	vsub.f32	s15, s0, s15
 800c68c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 800c690:	eea7 0aa5 	vfma.f32	s0, s15, s11
 800c694:	4770      	bx	lr
 800c696:	2b01      	cmp	r3, #1
 800c698:	d118      	bne.n	800c6cc <expm1f+0x198>
 800c69a:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 800c69e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800c6a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6a6:	bf5b      	ittet	pl
 800c6a8:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 800c6ac:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
 800c6b0:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 800c6b4:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 800c6b8:	bf43      	ittte	mi
 800c6ba:	ee77 7ac0 	vsubmi.f32	s15, s15, s0
 800c6be:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
 800c6c2:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 800c6c6:	eeb0 0a46 	vmovpl.f32	s0, s12
 800c6ca:	4770      	bx	lr
 800c6cc:	1c5a      	adds	r2, r3, #1
 800c6ce:	2a39      	cmp	r2, #57	; 0x39
 800c6d0:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 800c6d4:	d90b      	bls.n	800c6ee <expm1f+0x1ba>
 800c6d6:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800c6da:	ee36 0a40 	vsub.f32	s0, s12, s0
 800c6de:	ee10 3a10 	vmov	r3, s0
 800c6e2:	440b      	add	r3, r1
 800c6e4:	ee00 3a10 	vmov	s0, r3
 800c6e8:	ee30 0a46 	vsub.f32	s0, s0, s12
 800c6ec:	4770      	bx	lr
 800c6ee:	2b16      	cmp	r3, #22
 800c6f0:	dc11      	bgt.n	800c716 <expm1f+0x1e2>
 800c6f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c6f6:	fa42 f303 	asr.w	r3, r2, r3
 800c6fa:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 800c6fe:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800c702:	ee07 3a90 	vmov	s15, r3
 800c706:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800c70a:	ee10 3a10 	vmov	r3, s0
 800c70e:	440b      	add	r3, r1
 800c710:	ee00 3a10 	vmov	s0, r3
 800c714:	4770      	bx	lr
 800c716:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800c71a:	05db      	lsls	r3, r3, #23
 800c71c:	ee07 3a10 	vmov	s14, r3
 800c720:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c724:	ee70 7a67 	vsub.f32	s15, s0, s15
 800c728:	ee37 0a86 	vadd.f32	s0, s15, s12
 800c72c:	e7ed      	b.n	800c70a <expm1f+0x1d6>
 800c72e:	bf00      	nop
 800c730:	4195b843 	.word	0x4195b843
 800c734:	42b17217 	.word	0x42b17217
 800c738:	0da24260 	.word	0x0da24260
 800c73c:	3eb17218 	.word	0x3eb17218
 800c740:	3f851591 	.word	0x3f851591
 800c744:	3f317180 	.word	0x3f317180
 800c748:	3717f7d1 	.word	0x3717f7d1
 800c74c:	b717f7d1 	.word	0xb717f7d1
 800c750:	b457edbb 	.word	0xb457edbb
 800c754:	36867e54 	.word	0x36867e54
 800c758:	bd088889 	.word	0xbd088889
 800c75c:	b8a670cd 	.word	0xb8a670cd
 800c760:	3ad00d01 	.word	0x3ad00d01
 800c764:	3fb8aa3b 	.word	0x3fb8aa3b
 800c768:	7149f2ca 	.word	0x7149f2ca

0800c76c <finitef>:
 800c76c:	b082      	sub	sp, #8
 800c76e:	ed8d 0a01 	vstr	s0, [sp, #4]
 800c772:	9801      	ldr	r0, [sp, #4]
 800c774:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c778:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800c77c:	bfac      	ite	ge
 800c77e:	2000      	movge	r0, #0
 800c780:	2001      	movlt	r0, #1
 800c782:	b002      	add	sp, #8
 800c784:	4770      	bx	lr
	...

0800c788 <_close>:
 800c788:	4b02      	ldr	r3, [pc, #8]	; (800c794 <_close+0xc>)
 800c78a:	2258      	movs	r2, #88	; 0x58
 800c78c:	601a      	str	r2, [r3, #0]
 800c78e:	f04f 30ff 	mov.w	r0, #4294967295
 800c792:	4770      	bx	lr
 800c794:	20001570 	.word	0x20001570

0800c798 <_fstat>:
 800c798:	4b02      	ldr	r3, [pc, #8]	; (800c7a4 <_fstat+0xc>)
 800c79a:	2258      	movs	r2, #88	; 0x58
 800c79c:	601a      	str	r2, [r3, #0]
 800c79e:	f04f 30ff 	mov.w	r0, #4294967295
 800c7a2:	4770      	bx	lr
 800c7a4:	20001570 	.word	0x20001570

0800c7a8 <_isatty>:
 800c7a8:	4b02      	ldr	r3, [pc, #8]	; (800c7b4 <_isatty+0xc>)
 800c7aa:	2258      	movs	r2, #88	; 0x58
 800c7ac:	601a      	str	r2, [r3, #0]
 800c7ae:	2000      	movs	r0, #0
 800c7b0:	4770      	bx	lr
 800c7b2:	bf00      	nop
 800c7b4:	20001570 	.word	0x20001570

0800c7b8 <_lseek>:
 800c7b8:	4b02      	ldr	r3, [pc, #8]	; (800c7c4 <_lseek+0xc>)
 800c7ba:	2258      	movs	r2, #88	; 0x58
 800c7bc:	601a      	str	r2, [r3, #0]
 800c7be:	f04f 30ff 	mov.w	r0, #4294967295
 800c7c2:	4770      	bx	lr
 800c7c4:	20001570 	.word	0x20001570

0800c7c8 <_read>:
 800c7c8:	4b02      	ldr	r3, [pc, #8]	; (800c7d4 <_read+0xc>)
 800c7ca:	2258      	movs	r2, #88	; 0x58
 800c7cc:	601a      	str	r2, [r3, #0]
 800c7ce:	f04f 30ff 	mov.w	r0, #4294967295
 800c7d2:	4770      	bx	lr
 800c7d4:	20001570 	.word	0x20001570

0800c7d8 <_write>:
 800c7d8:	4b02      	ldr	r3, [pc, #8]	; (800c7e4 <_write+0xc>)
 800c7da:	2258      	movs	r2, #88	; 0x58
 800c7dc:	601a      	str	r2, [r3, #0]
 800c7de:	f04f 30ff 	mov.w	r0, #4294967295
 800c7e2:	4770      	bx	lr
 800c7e4:	20001570 	.word	0x20001570

0800c7e8 <_init>:
 800c7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7ea:	bf00      	nop
 800c7ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7ee:	bc08      	pop	{r3}
 800c7f0:	469e      	mov	lr, r3
 800c7f2:	4770      	bx	lr

0800c7f4 <_fini>:
 800c7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7f6:	bf00      	nop
 800c7f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7fa:	bc08      	pop	{r3}
 800c7fc:	469e      	mov	lr, r3
 800c7fe:	4770      	bx	lr
