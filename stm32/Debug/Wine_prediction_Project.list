
Wine_prediction_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6e4  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000abfc  0800a8c0  0800a8c0  0001a8c0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080154bc  080154bc  00030988  2**0
                  CONTENTS
  4 .ARM          00000008  080154bc  080154bc  000254bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080154c4  080154c4  00030988  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080154c4  080154c4  000254c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080154c8  080154c8  000254c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000988  20000000  080154cc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007e8  200009a0  08015e54  000309a0  2**5
                  ALLOC
 10 ._user_heap_stack 00001000  20001188  08015e54  00031188  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030988  2**0
                  CONTENTS, READONLY
 12 .comment      00000093  00000000  00000000  000309b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b3f8  00000000  00000000  00030a4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038a8  00000000  00000000  0004be43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001460  00000000  00000000  0004f6f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fc5  00000000  00000000  00050b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00035d2d  00000000  00000000  00051b15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d0b2  00000000  00000000  00087842  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0013cc91  00000000  00000000  000a48f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005e2c  00000000  00000000  001e1588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008e  00000000  00000000  001e73b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200009a0 	.word	0x200009a0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800a88c 	.word	0x0800a88c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200009a4 	.word	0x200009a4
 80001fc:	0800a88c 	.word	0x0800a88c

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a0:	f001 f837 	bl	8001612 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a4:	f000 f817 	bl	80005d6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a8:	f000 fa6e 	bl	8000a88 <MX_GPIO_Init>
  MX_CRC_Init();
 80005ac:	f000 f866 	bl	800067c <MX_CRC_Init>
  MX_FMC_Init();
 80005b0:	f000 fa04 	bl	80009bc <MX_FMC_Init>
  MX_I2C1_Init();
 80005b4:	f000 f884 	bl	80006c0 <MX_I2C1_Init>
  MX_SAI1_Init();
 80005b8:	f000 f8c2 	bl	8000740 <MX_SAI1_Init>
  //MX_SDMMC1_SD_Init();
  MX_SPI2_Init();
 80005bc:	f000 f928 	bl	8000810 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80005c0:	f000 f964 	bl	800088c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80005c4:	f000 f9ae 	bl	8000924 <MX_USART3_UART_Init>
  //MX_USB_OTG_FS_PCD_Init();
  MX_X_CUBE_AI_Init();
 80005c8:	f006 fc3e 	bl	8006e48 <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_X_CUBE_AI_Process();
 80005cc:	f006 fc4a 	bl	8006e64 <MX_X_CUBE_AI_Process>
    /* USER CODE BEGIN 3 */
  MX_X_CUBE_AI_Process();
 80005d0:	f006 fc48 	bl	8006e64 <MX_X_CUBE_AI_Process>
  MX_X_CUBE_AI_Process();
 80005d4:	e7fa      	b.n	80005cc <main+0x30>

080005d6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d6:	b580      	push	{r7, lr}
 80005d8:	b096      	sub	sp, #88	; 0x58
 80005da:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005dc:	f107 0314 	add.w	r3, r7, #20
 80005e0:	2244      	movs	r2, #68	; 0x44
 80005e2:	2100      	movs	r1, #0
 80005e4:	4618      	mov	r0, r3
 80005e6:	f009 f981 	bl	80098ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ea:	463b      	mov	r3, r7
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80005f8:	2000      	movs	r0, #0
 80005fa:	f001 fe3b 	bl	8002274 <HAL_PWREx_ControlVoltageScaling>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000604:	f000 fc5e 	bl	8000ec4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
 8000608:	2330      	movs	r3, #48	; 0x30
 800060a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800060c:	2301      	movs	r3, #1
 800060e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000610:	2301      	movs	r3, #1
 8000612:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000614:	2300      	movs	r3, #0
 8000616:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000618:	2360      	movs	r3, #96	; 0x60
 800061a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061c:	2302      	movs	r3, #2
 800061e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000620:	2301      	movs	r3, #1
 8000622:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000624:	2301      	movs	r3, #1
 8000626:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000628:	233c      	movs	r3, #60	; 0x3c
 800062a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 800062c:	2305      	movs	r3, #5
 800062e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000630:	2302      	movs	r3, #2
 8000632:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000634:	2302      	movs	r3, #2
 8000636:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000638:	f107 0314 	add.w	r3, r7, #20
 800063c:	4618      	mov	r0, r3
 800063e:	f001 fecd 	bl	80023dc <HAL_RCC_OscConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000648:	f000 fc3c 	bl	8000ec4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064c:	230f      	movs	r3, #15
 800064e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000650:	2303      	movs	r3, #3
 8000652:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000660:	463b      	mov	r3, r7
 8000662:	2105      	movs	r1, #5
 8000664:	4618      	mov	r0, r3
 8000666:	f002 fad3 	bl	8002c10 <HAL_RCC_ClockConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000670:	f000 fc28 	bl	8000ec4 <Error_Handler>
  }
}
 8000674:	bf00      	nop
 8000676:	3758      	adds	r7, #88	; 0x58
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}

0800067c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000680:	4b0d      	ldr	r3, [pc, #52]	; (80006b8 <MX_CRC_Init+0x3c>)
 8000682:	4a0e      	ldr	r2, [pc, #56]	; (80006bc <MX_CRC_Init+0x40>)
 8000684:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000686:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <MX_CRC_Init+0x3c>)
 8000688:	2200      	movs	r2, #0
 800068a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800068c:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <MX_CRC_Init+0x3c>)
 800068e:	2200      	movs	r2, #0
 8000690:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000692:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <MX_CRC_Init+0x3c>)
 8000694:	2200      	movs	r2, #0
 8000696:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000698:	4b07      	ldr	r3, [pc, #28]	; (80006b8 <MX_CRC_Init+0x3c>)
 800069a:	2200      	movs	r2, #0
 800069c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800069e:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <MX_CRC_Init+0x3c>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006a4:	4804      	ldr	r0, [pc, #16]	; (80006b8 <MX_CRC_Init+0x3c>)
 80006a6:	f001 f93b 	bl	8001920 <HAL_CRC_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80006b0:	f000 fc08 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	200009bc 	.word	0x200009bc
 80006bc:	40023000 	.word	0x40023000

080006c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006c4:	4b1b      	ldr	r3, [pc, #108]	; (8000734 <MX_I2C1_Init+0x74>)
 80006c6:	4a1c      	ldr	r2, [pc, #112]	; (8000738 <MX_I2C1_Init+0x78>)
 80006c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80006ca:	4b1a      	ldr	r3, [pc, #104]	; (8000734 <MX_I2C1_Init+0x74>)
 80006cc:	4a1b      	ldr	r2, [pc, #108]	; (800073c <MX_I2C1_Init+0x7c>)
 80006ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006d0:	4b18      	ldr	r3, [pc, #96]	; (8000734 <MX_I2C1_Init+0x74>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d6:	4b17      	ldr	r3, [pc, #92]	; (8000734 <MX_I2C1_Init+0x74>)
 80006d8:	2201      	movs	r2, #1
 80006da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006dc:	4b15      	ldr	r3, [pc, #84]	; (8000734 <MX_I2C1_Init+0x74>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006e2:	4b14      	ldr	r3, [pc, #80]	; (8000734 <MX_I2C1_Init+0x74>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <MX_I2C1_Init+0x74>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <MX_I2C1_Init+0x74>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <MX_I2C1_Init+0x74>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006fa:	480e      	ldr	r0, [pc, #56]	; (8000734 <MX_I2C1_Init+0x74>)
 80006fc:	f001 fc68 	bl	8001fd0 <HAL_I2C_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000706:	f000 fbdd 	bl	8000ec4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800070a:	2100      	movs	r1, #0
 800070c:	4809      	ldr	r0, [pc, #36]	; (8000734 <MX_I2C1_Init+0x74>)
 800070e:	f001 fcfa 	bl	8002106 <HAL_I2CEx_ConfigAnalogFilter>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000718:	f000 fbd4 	bl	8000ec4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800071c:	2100      	movs	r1, #0
 800071e:	4805      	ldr	r0, [pc, #20]	; (8000734 <MX_I2C1_Init+0x74>)
 8000720:	f001 fd3c 	bl	800219c <HAL_I2CEx_ConfigDigitalFilter>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800072a:	f000 fbcb 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	200009e0 	.word	0x200009e0
 8000738:	40005400 	.word	0x40005400
 800073c:	307075b1 	.word	0x307075b1

08000740 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000744:	4b2f      	ldr	r3, [pc, #188]	; (8000804 <MX_SAI1_Init+0xc4>)
 8000746:	4a30      	ldr	r2, [pc, #192]	; (8000808 <MX_SAI1_Init+0xc8>)
 8000748:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 800074a:	4b2e      	ldr	r3, [pc, #184]	; (8000804 <MX_SAI1_Init+0xc4>)
 800074c:	2200      	movs	r2, #0
 800074e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000750:	4b2c      	ldr	r3, [pc, #176]	; (8000804 <MX_SAI1_Init+0xc4>)
 8000752:	2200      	movs	r2, #0
 8000754:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000756:	4b2b      	ldr	r3, [pc, #172]	; (8000804 <MX_SAI1_Init+0xc4>)
 8000758:	2240      	movs	r2, #64	; 0x40
 800075a:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800075c:	4b29      	ldr	r3, [pc, #164]	; (8000804 <MX_SAI1_Init+0xc4>)
 800075e:	2200      	movs	r2, #0
 8000760:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000762:	4b28      	ldr	r3, [pc, #160]	; (8000804 <MX_SAI1_Init+0xc4>)
 8000764:	2200      	movs	r2, #0
 8000766:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000768:	4b26      	ldr	r3, [pc, #152]	; (8000804 <MX_SAI1_Init+0xc4>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800076e:	4b25      	ldr	r3, [pc, #148]	; (8000804 <MX_SAI1_Init+0xc4>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000774:	4b23      	ldr	r3, [pc, #140]	; (8000804 <MX_SAI1_Init+0xc4>)
 8000776:	2200      	movs	r2, #0
 8000778:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 800077a:	4b22      	ldr	r3, [pc, #136]	; (8000804 <MX_SAI1_Init+0xc4>)
 800077c:	2200      	movs	r2, #0
 800077e:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000780:	4b20      	ldr	r3, [pc, #128]	; (8000804 <MX_SAI1_Init+0xc4>)
 8000782:	2200      	movs	r2, #0
 8000784:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000786:	4b1f      	ldr	r3, [pc, #124]	; (8000804 <MX_SAI1_Init+0xc4>)
 8000788:	4a20      	ldr	r2, [pc, #128]	; (800080c <MX_SAI1_Init+0xcc>)
 800078a:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800078c:	4b1d      	ldr	r3, [pc, #116]	; (8000804 <MX_SAI1_Init+0xc4>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000792:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <MX_SAI1_Init+0xc4>)
 8000794:	2200      	movs	r2, #0
 8000796:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000798:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <MX_SAI1_Init+0xc4>)
 800079a:	2200      	movs	r2, #0
 800079c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800079e:	4b19      	ldr	r3, [pc, #100]	; (8000804 <MX_SAI1_Init+0xc4>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 80007a4:	4b17      	ldr	r3, [pc, #92]	; (8000804 <MX_SAI1_Init+0xc4>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 0;
 80007ac:	4b15      	ldr	r3, [pc, #84]	; (8000804 <MX_SAI1_Init+0xc4>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80007b2:	4b14      	ldr	r3, [pc, #80]	; (8000804 <MX_SAI1_Init+0xc4>)
 80007b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007b8:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 80007ba:	4b12      	ldr	r3, [pc, #72]	; (8000804 <MX_SAI1_Init+0xc4>)
 80007bc:	2208      	movs	r2, #8
 80007be:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 80007c0:	4b10      	ldr	r3, [pc, #64]	; (8000804 <MX_SAI1_Init+0xc4>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80007c6:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_SAI1_Init+0xc4>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80007cc:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <MX_SAI1_Init+0xc4>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80007d2:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_SAI1_Init+0xc4>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 80007d8:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <MX_SAI1_Init+0xc4>)
 80007da:	2200      	movs	r2, #0
 80007dc:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_SAI1_Init+0xc4>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 80007e4:	4b07      	ldr	r3, [pc, #28]	; (8000804 <MX_SAI1_Init+0xc4>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_SAI1_Init+0xc4>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 80007f0:	4804      	ldr	r0, [pc, #16]	; (8000804 <MX_SAI1_Init+0xc4>)
 80007f2:	f004 fa71 	bl	8004cd8 <HAL_SAI_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 80007fc:	f000 fb62 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000a34 	.word	0x20000a34
 8000808:	40015404 	.word	0x40015404
 800080c:	0002ee00 	.word	0x0002ee00

08000810 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000814:	4b1b      	ldr	r3, [pc, #108]	; (8000884 <MX_SPI2_Init+0x74>)
 8000816:	4a1c      	ldr	r2, [pc, #112]	; (8000888 <MX_SPI2_Init+0x78>)
 8000818:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800081a:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <MX_SPI2_Init+0x74>)
 800081c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000820:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000822:	4b18      	ldr	r3, [pc, #96]	; (8000884 <MX_SPI2_Init+0x74>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000828:	4b16      	ldr	r3, [pc, #88]	; (8000884 <MX_SPI2_Init+0x74>)
 800082a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800082e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000830:	4b14      	ldr	r3, [pc, #80]	; (8000884 <MX_SPI2_Init+0x74>)
 8000832:	2200      	movs	r2, #0
 8000834:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000836:	4b13      	ldr	r3, [pc, #76]	; (8000884 <MX_SPI2_Init+0x74>)
 8000838:	2200      	movs	r2, #0
 800083a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800083c:	4b11      	ldr	r3, [pc, #68]	; (8000884 <MX_SPI2_Init+0x74>)
 800083e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000842:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000844:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <MX_SPI2_Init+0x74>)
 8000846:	2208      	movs	r2, #8
 8000848:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <MX_SPI2_Init+0x74>)
 800084c:	2200      	movs	r2, #0
 800084e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000850:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <MX_SPI2_Init+0x74>)
 8000852:	2200      	movs	r2, #0
 8000854:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000856:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <MX_SPI2_Init+0x74>)
 8000858:	2200      	movs	r2, #0
 800085a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800085c:	4b09      	ldr	r3, [pc, #36]	; (8000884 <MX_SPI2_Init+0x74>)
 800085e:	2207      	movs	r2, #7
 8000860:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000862:	4b08      	ldr	r3, [pc, #32]	; (8000884 <MX_SPI2_Init+0x74>)
 8000864:	2200      	movs	r2, #0
 8000866:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <MX_SPI2_Init+0x74>)
 800086a:	2208      	movs	r2, #8
 800086c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800086e:	4805      	ldr	r0, [pc, #20]	; (8000884 <MX_SPI2_Init+0x74>)
 8000870:	f004 fc4a 	bl	8005108 <HAL_SPI_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800087a:	f000 fb23 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000ac8 	.word	0x20000ac8
 8000888:	40003800 	.word	0x40003800

0800088c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000890:	4b22      	ldr	r3, [pc, #136]	; (800091c <MX_USART2_UART_Init+0x90>)
 8000892:	4a23      	ldr	r2, [pc, #140]	; (8000920 <MX_USART2_UART_Init+0x94>)
 8000894:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000896:	4b21      	ldr	r3, [pc, #132]	; (800091c <MX_USART2_UART_Init+0x90>)
 8000898:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800089c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800089e:	4b1f      	ldr	r3, [pc, #124]	; (800091c <MX_USART2_UART_Init+0x90>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008a4:	4b1d      	ldr	r3, [pc, #116]	; (800091c <MX_USART2_UART_Init+0x90>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008aa:	4b1c      	ldr	r3, [pc, #112]	; (800091c <MX_USART2_UART_Init+0x90>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008b0:	4b1a      	ldr	r3, [pc, #104]	; (800091c <MX_USART2_UART_Init+0x90>)
 80008b2:	220c      	movs	r2, #12
 80008b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b6:	4b19      	ldr	r3, [pc, #100]	; (800091c <MX_USART2_UART_Init+0x90>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008bc:	4b17      	ldr	r3, [pc, #92]	; (800091c <MX_USART2_UART_Init+0x90>)
 80008be:	2200      	movs	r2, #0
 80008c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008c2:	4b16      	ldr	r3, [pc, #88]	; (800091c <MX_USART2_UART_Init+0x90>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008c8:	4b14      	ldr	r3, [pc, #80]	; (800091c <MX_USART2_UART_Init+0x90>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ce:	4b13      	ldr	r3, [pc, #76]	; (800091c <MX_USART2_UART_Init+0x90>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008d4:	4811      	ldr	r0, [pc, #68]	; (800091c <MX_USART2_UART_Init+0x90>)
 80008d6:	f004 fd02 	bl	80052de <HAL_UART_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80008e0:	f000 faf0 	bl	8000ec4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008e4:	2100      	movs	r1, #0
 80008e6:	480d      	ldr	r0, [pc, #52]	; (800091c <MX_USART2_UART_Init+0x90>)
 80008e8:	f005 ff93 	bl	8006812 <HAL_UARTEx_SetTxFifoThreshold>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80008f2:	f000 fae7 	bl	8000ec4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008f6:	2100      	movs	r1, #0
 80008f8:	4808      	ldr	r0, [pc, #32]	; (800091c <MX_USART2_UART_Init+0x90>)
 80008fa:	f005 ffc8 	bl	800688e <HAL_UARTEx_SetRxFifoThreshold>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000904:	f000 fade 	bl	8000ec4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000908:	4804      	ldr	r0, [pc, #16]	; (800091c <MX_USART2_UART_Init+0x90>)
 800090a:	f005 ff49 	bl	80067a0 <HAL_UARTEx_DisableFifoMode>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000914:	f000 fad6 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20000b2c 	.word	0x20000b2c
 8000920:	40004400 	.word	0x40004400

08000924 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000928:	4b22      	ldr	r3, [pc, #136]	; (80009b4 <MX_USART3_UART_Init+0x90>)
 800092a:	4a23      	ldr	r2, [pc, #140]	; (80009b8 <MX_USART3_UART_Init+0x94>)
 800092c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800092e:	4b21      	ldr	r3, [pc, #132]	; (80009b4 <MX_USART3_UART_Init+0x90>)
 8000930:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000934:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000936:	4b1f      	ldr	r3, [pc, #124]	; (80009b4 <MX_USART3_UART_Init+0x90>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800093c:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <MX_USART3_UART_Init+0x90>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000942:	4b1c      	ldr	r3, [pc, #112]	; (80009b4 <MX_USART3_UART_Init+0x90>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000948:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <MX_USART3_UART_Init+0x90>)
 800094a:	220c      	movs	r2, #12
 800094c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094e:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <MX_USART3_UART_Init+0x90>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000954:	4b17      	ldr	r3, [pc, #92]	; (80009b4 <MX_USART3_UART_Init+0x90>)
 8000956:	2200      	movs	r2, #0
 8000958:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800095a:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <MX_USART3_UART_Init+0x90>)
 800095c:	2200      	movs	r2, #0
 800095e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000960:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <MX_USART3_UART_Init+0x90>)
 8000962:	2200      	movs	r2, #0
 8000964:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000966:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <MX_USART3_UART_Init+0x90>)
 8000968:	2200      	movs	r2, #0
 800096a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800096c:	4811      	ldr	r0, [pc, #68]	; (80009b4 <MX_USART3_UART_Init+0x90>)
 800096e:	f004 fcb6 	bl	80052de <HAL_UART_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000978:	f000 faa4 	bl	8000ec4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800097c:	2100      	movs	r1, #0
 800097e:	480d      	ldr	r0, [pc, #52]	; (80009b4 <MX_USART3_UART_Init+0x90>)
 8000980:	f005 ff47 	bl	8006812 <HAL_UARTEx_SetTxFifoThreshold>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800098a:	f000 fa9b 	bl	8000ec4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800098e:	2100      	movs	r1, #0
 8000990:	4808      	ldr	r0, [pc, #32]	; (80009b4 <MX_USART3_UART_Init+0x90>)
 8000992:	f005 ff7c 	bl	800688e <HAL_UARTEx_SetRxFifoThreshold>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800099c:	f000 fa92 	bl	8000ec4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009a0:	4804      	ldr	r0, [pc, #16]	; (80009b4 <MX_USART3_UART_Init+0x90>)
 80009a2:	f005 fefd 	bl	80067a0 <HAL_UARTEx_DisableFifoMode>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009ac:	f000 fa8a 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000bc0 	.word	0x20000bc0
 80009b8:	40004800 	.word	0x40004800

080009bc <MX_FMC_Init>:

}

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b088      	sub	sp, #32
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 80009c2:	463b      	mov	r3, r7
 80009c4:	2220      	movs	r2, #32
 80009c6:	2100      	movs	r1, #0
 80009c8:	4618      	mov	r0, r3
 80009ca:	f008 ff8f 	bl	80098ec <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 80009ce:	4b2c      	ldr	r3, [pc, #176]	; (8000a80 <MX_FMC_Init+0xc4>)
 80009d0:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80009d4:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80009d6:	4b2a      	ldr	r3, [pc, #168]	; (8000a80 <MX_FMC_Init+0xc4>)
 80009d8:	4a2a      	ldr	r2, [pc, #168]	; (8000a84 <MX_FMC_Init+0xc8>)
 80009da:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 80009dc:	4b28      	ldr	r3, [pc, #160]	; (8000a80 <MX_FMC_Init+0xc4>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80009e2:	4b27      	ldr	r3, [pc, #156]	; (8000a80 <MX_FMC_Init+0xc4>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_PSRAM;
 80009e8:	4b25      	ldr	r3, [pc, #148]	; (8000a80 <MX_FMC_Init+0xc4>)
 80009ea:	2204      	movs	r2, #4
 80009ec:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80009ee:	4b24      	ldr	r3, [pc, #144]	; (8000a80 <MX_FMC_Init+0xc4>)
 80009f0:	2210      	movs	r2, #16
 80009f2:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_ENABLE;
 80009f4:	4b22      	ldr	r3, [pc, #136]	; (8000a80 <MX_FMC_Init+0xc4>)
 80009f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009fa:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80009fc:	4b20      	ldr	r3, [pc, #128]	; (8000a80 <MX_FMC_Init+0xc4>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000a02:	4b1f      	ldr	r3, [pc, #124]	; (8000a80 <MX_FMC_Init+0xc4>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8000a08:	4b1d      	ldr	r3, [pc, #116]	; (8000a80 <MX_FMC_Init+0xc4>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_ENABLE;
 8000a0e:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <MX_FMC_Init+0xc4>)
 8000a10:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a14:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000a16:	4b1a      	ldr	r3, [pc, #104]	; (8000a80 <MX_FMC_Init+0xc4>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000a1c:	4b18      	ldr	r3, [pc, #96]	; (8000a80 <MX_FMC_Init+0xc4>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_ENABLE;
 8000a22:	4b17      	ldr	r3, [pc, #92]	; (8000a80 <MX_FMC_Init+0xc4>)
 8000a24:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000a28:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000a2a:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <MX_FMC_Init+0xc4>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000a30:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <MX_FMC_Init+0xc4>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 8000a36:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <MX_FMC_Init+0xc4>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	645a      	str	r2, [r3, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000a3c:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <MX_FMC_Init+0xc4>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000a42:	230f      	movs	r3, #15
 8000a44:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8000a46:	230f      	movs	r3, #15
 8000a48:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8000a4a:	23ff      	movs	r3, #255	; 0xff
 8000a4c:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000a52:	230f      	movs	r3, #15
 8000a54:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000a56:	2310      	movs	r3, #16
 8000a58:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 2;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000a62:	463b      	mov	r3, r7
 8000a64:	2200      	movs	r2, #0
 8000a66:	4619      	mov	r1, r3
 8000a68:	4805      	ldr	r0, [pc, #20]	; (8000a80 <MX_FMC_Init+0xc4>)
 8000a6a:	f004 fbf0 	bl	800524e <HAL_SRAM_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_FMC_Init+0xbc>
  {
    Error_Handler( );
 8000a74:	f000 fa26 	bl	8000ec4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000a78:	bf00      	nop
 8000a7a:	3720      	adds	r7, #32
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000c54 	.word	0x20000c54
 8000a84:	a0000104 	.word	0xa0000104

08000a88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08e      	sub	sp, #56	; 0x38
 8000a8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
 8000a9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a9e:	4bb2      	ldr	r3, [pc, #712]	; (8000d68 <MX_GPIO_Init+0x2e0>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa2:	4ab1      	ldr	r2, [pc, #708]	; (8000d68 <MX_GPIO_Init+0x2e0>)
 8000aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aaa:	4baf      	ldr	r3, [pc, #700]	; (8000d68 <MX_GPIO_Init+0x2e0>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ab2:	623b      	str	r3, [r7, #32]
 8000ab4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ab6:	4bac      	ldr	r3, [pc, #688]	; (8000d68 <MX_GPIO_Init+0x2e0>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aba:	4aab      	ldr	r2, [pc, #684]	; (8000d68 <MX_GPIO_Init+0x2e0>)
 8000abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ac0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac2:	4ba9      	ldr	r3, [pc, #676]	; (8000d68 <MX_GPIO_Init+0x2e0>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aca:	61fb      	str	r3, [r7, #28]
 8000acc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ace:	4ba6      	ldr	r3, [pc, #664]	; (8000d68 <MX_GPIO_Init+0x2e0>)
 8000ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad2:	4aa5      	ldr	r2, [pc, #660]	; (8000d68 <MX_GPIO_Init+0x2e0>)
 8000ad4:	f043 0310 	orr.w	r3, r3, #16
 8000ad8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ada:	4ba3      	ldr	r3, [pc, #652]	; (8000d68 <MX_GPIO_Init+0x2e0>)
 8000adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ade:	f003 0310 	and.w	r3, r3, #16
 8000ae2:	61bb      	str	r3, [r7, #24]
 8000ae4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae6:	4ba0      	ldr	r3, [pc, #640]	; (8000d68 <MX_GPIO_Init+0x2e0>)
 8000ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aea:	4a9f      	ldr	r2, [pc, #636]	; (8000d68 <MX_GPIO_Init+0x2e0>)
 8000aec:	f043 0302 	orr.w	r3, r3, #2
 8000af0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af2:	4b9d      	ldr	r3, [pc, #628]	; (8000d68 <MX_GPIO_Init+0x2e0>)
 8000af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af6:	f003 0302 	and.w	r3, r3, #2
 8000afa:	617b      	str	r3, [r7, #20]
 8000afc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afe:	4b9a      	ldr	r3, [pc, #616]	; (8000d68 <MX_GPIO_Init+0x2e0>)
 8000b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b02:	4a99      	ldr	r2, [pc, #612]	; (8000d68 <MX_GPIO_Init+0x2e0>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b0a:	4b97      	ldr	r3, [pc, #604]	; (8000d68 <MX_GPIO_Init+0x2e0>)
 8000b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b16:	4b94      	ldr	r3, [pc, #592]	; (8000d68 <MX_GPIO_Init+0x2e0>)
 8000b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1a:	4a93      	ldr	r2, [pc, #588]	; (8000d68 <MX_GPIO_Init+0x2e0>)
 8000b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b22:	4b91      	ldr	r3, [pc, #580]	; (8000d68 <MX_GPIO_Init+0x2e0>)
 8000b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 8000b2e:	f001 fc45 	bl	80023bc <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b32:	4b8d      	ldr	r3, [pc, #564]	; (8000d68 <MX_GPIO_Init+0x2e0>)
 8000b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b36:	4a8c      	ldr	r2, [pc, #560]	; (8000d68 <MX_GPIO_Init+0x2e0>)
 8000b38:	f043 0308 	orr.w	r3, r3, #8
 8000b3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b3e:	4b8a      	ldr	r3, [pc, #552]	; (8000d68 <MX_GPIO_Init+0x2e0>)
 8000b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b42:	f003 0308 	and.w	r3, r3, #8
 8000b46:	60bb      	str	r3, [r7, #8]
 8000b48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b4a:	4b87      	ldr	r3, [pc, #540]	; (8000d68 <MX_GPIO_Init+0x2e0>)
 8000b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4e:	4a86      	ldr	r2, [pc, #536]	; (8000d68 <MX_GPIO_Init+0x2e0>)
 8000b50:	f043 0304 	orr.w	r3, r3, #4
 8000b54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b56:	4b84      	ldr	r3, [pc, #528]	; (8000d68 <MX_GPIO_Init+0x2e0>)
 8000b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5a:	f003 0304 	and.w	r3, r3, #4
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b62:	4b81      	ldr	r3, [pc, #516]	; (8000d68 <MX_GPIO_Init+0x2e0>)
 8000b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b66:	4a80      	ldr	r2, [pc, #512]	; (8000d68 <MX_GPIO_Init+0x2e0>)
 8000b68:	f043 0320 	orr.w	r3, r3, #32
 8000b6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b6e:	4b7e      	ldr	r3, [pc, #504]	; (8000d68 <MX_GPIO_Init+0x2e0>)
 8000b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b72:	f003 0320 	and.w	r3, r3, #32
 8000b76:	603b      	str	r3, [r7, #0]
 8000b78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f244 0114 	movw	r1, #16404	; 0x4014
 8000b80:	487a      	ldr	r0, [pc, #488]	; (8000d6c <MX_GPIO_Init+0x2e4>)
 8000b82:	f001 fa0d 	bl	8001fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(JOY_SEL_GPIO_Port, JOY_SEL_Pin, GPIO_PIN_RESET);
 8000b86:	2200      	movs	r2, #0
 8000b88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b8c:	4878      	ldr	r0, [pc, #480]	; (8000d70 <MX_GPIO_Init+0x2e8>)
 8000b8e:	f001 fa07 	bl	8001fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2140      	movs	r1, #64	; 0x40
 8000b96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b9a:	f001 fa01 	bl	8001fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_Port, MFX_WAKEUP_Pin, GPIO_PIN_RESET);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2104      	movs	r1, #4
 8000ba2:	4874      	ldr	r0, [pc, #464]	; (8000d74 <MX_GPIO_Init+0x2ec>)
 8000ba4:	f001 f9fc 	bl	8001fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OCTOSPIM_P2_IO1_Pin OCTOSPIM_P2_IO2_Pin OCTOSPIM_P2_CLK_Pin OCTOSPIM_P2_IO0_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO1_Pin|OCTOSPIM_P2_IO2_Pin|OCTOSPIM_P2_CLK_Pin|OCTOSPIM_P2_IO0_Pin;
 8000ba8:	f44f 6364 	mov.w	r3, #3648	; 0xe40
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000bba:	2305      	movs	r3, #5
 8000bbc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000bbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	486c      	ldr	r0, [pc, #432]	; (8000d78 <MX_GPIO_Init+0x2f0>)
 8000bc6:	f001 f859 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : MIC_VDD_Pin DSI_SPI_USART_CS_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin;
 8000bca:	f244 0314 	movw	r3, #16404	; 0x4014
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000bdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be0:	4619      	mov	r1, r3
 8000be2:	4862      	ldr	r0, [pc, #392]	; (8000d6c <MX_GPIO_Init+0x2e4>)
 8000be4:	f001 f84a 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000be8:	2310      	movs	r3, #16
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bec:	2302      	movs	r3, #2
 8000bee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000bfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c00:	4619      	mov	r1, r3
 8000c02:	485c      	ldr	r0, [pc, #368]	; (8000d74 <MX_GPIO_Init+0x2ec>)
 8000c04:	f001 f83a 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D7_Pin DCMI_D5_Pin DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 8000c08:	23b0      	movs	r3, #176	; 0xb0
 8000c0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c14:	2300      	movs	r3, #0
 8000c16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000c18:	230a      	movs	r3, #10
 8000c1a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c20:	4619      	mov	r1, r3
 8000c22:	4855      	ldr	r0, [pc, #340]	; (8000d78 <MX_GPIO_Init+0x2f0>)
 8000c24:	f001 f82a 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOSPIM_P2_IO6_Pin OCTOSPIM_P2_DQS_Pin OCTOSPIM_P2_IO7_Pin OCTOSPIM_P2_CS_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO6_Pin|OCTOSPIM_P2_DQS_Pin|OCTOSPIM_P2_IO7_Pin|OCTOSPIM_P2_CS_Pin;
 8000c28:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c36:	2303      	movs	r3, #3
 8000c38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000c3a:	2305      	movs	r3, #5
 8000c3c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c42:	4619      	mov	r1, r3
 8000c44:	484d      	ldr	r0, [pc, #308]	; (8000d7c <MX_GPIO_Init+0x2f4>)
 8000c46:	f001 f819 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c4e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8000c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4846      	ldr	r0, [pc, #280]	; (8000d78 <MX_GPIO_Init+0x2f0>)
 8000c60:	f001 f80c 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D3_Pin DCMI_PIXCLK_Pin DCMI_D2_Pin */
  GPIO_InitStruct.Pin = DCMI_D3_Pin|DCMI_PIXCLK_Pin|DCMI_D2_Pin;
 8000c64:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c72:	2300      	movs	r3, #0
 8000c74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000c76:	230a      	movs	r3, #10
 8000c78:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7e:	4619      	mov	r1, r3
 8000c80:	483a      	ldr	r0, [pc, #232]	; (8000d6c <MX_GPIO_Init+0x2e4>)
 8000c82:	f000 fffb 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 8000c86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c94:	2300      	movs	r3, #0
 8000c96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8000c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4832      	ldr	r0, [pc, #200]	; (8000d6c <MX_GPIO_Init+0x2e4>)
 8000ca4:	f000 ffea 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOPSIM_P2_IO4_Pin OCTOSPIM_P2_IO5_Pin OCTOSPI_P2_IO3_Pin */
  GPIO_InitStruct.Pin = OCTOPSIM_P2_IO4_Pin|OCTOSPIM_P2_IO5_Pin|OCTOSPI_P2_IO3_Pin;
 8000ca8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000cba:	2305      	movs	r3, #5
 8000cbc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000cbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4829      	ldr	r0, [pc, #164]	; (8000d6c <MX_GPIO_Init+0x2e4>)
 8000cc6:	f000 ffd9 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_SEL_Pin;
 8000cca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 8000cdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4823      	ldr	r0, [pc, #140]	; (8000d70 <MX_GPIO_Init+0x2e8>)
 8000ce4:	f000 ffca 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_14_Pin ARD_15_Pin */
  GPIO_InitStruct.Pin = ARD_14_Pin|ARD_15_Pin;
 8000ce8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cee:	2312      	movs	r3, #18
 8000cf0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000cfa:	2304      	movs	r3, #4
 8000cfc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d02:	4619      	mov	r1, r3
 8000d04:	481d      	ldr	r0, [pc, #116]	; (8000d7c <MX_GPIO_Init+0x2f4>)
 8000d06:	f000 ffb9 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_INT_Pin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 8000d0a:	2340      	movs	r3, #64	; 0x40
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d0e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 8000d18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4814      	ldr	r0, [pc, #80]	; (8000d70 <MX_GPIO_Init+0x2e8>)
 8000d20:	f000 ffac 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : DFDATIN3_Pin DF_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFDATIN3_Pin|DF_CKOUT_Pin;
 8000d24:	2384      	movs	r3, #132	; 0x84
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d30:	2300      	movs	r3, #0
 8000d32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000d34:	2306      	movs	r3, #6
 8000d36:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	480c      	ldr	r0, [pc, #48]	; (8000d70 <MX_GPIO_Init+0x2e8>)
 8000d40:	f000 ff9c 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D0_Pin ARD_D1_Pin */
  GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8000d44:	2303      	movs	r3, #3
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d50:	2303      	movs	r3, #3
 8000d52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000d54:	2308      	movs	r3, #8
 8000d56:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4804      	ldr	r0, [pc, #16]	; (8000d70 <MX_GPIO_Init+0x2e8>)
 8000d60:	f000 ff8c 	bl	8001c7c <HAL_GPIO_Init>
 8000d64:	e00c      	b.n	8000d80 <MX_GPIO_Init+0x2f8>
 8000d66:	bf00      	nop
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	48001c00 	.word	0x48001c00
 8000d70:	48000800 	.word	0x48000800
 8000d74:	48000400 	.word	0x48000400
 8000d78:	48002000 	.word	0x48002000
 8000d7c:	48001800 	.word	0x48001800

  /*Configure GPIO pins : ARD_A2_Pin ARD_A1_Pin */
  GPIO_InitStruct.Pin = ARD_A2_Pin|ARD_A1_Pin;
 8000d80:	2318      	movs	r3, #24
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d84:	230b      	movs	r3, #11
 8000d86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d90:	4619      	mov	r1, r3
 8000d92:	4849      	ldr	r0, [pc, #292]	; (8000eb8 <MX_GPIO_Init+0x430>)
 8000d94:	f000 ff72 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A4_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A4_Pin|ARD_A0_Pin;
 8000d98:	2381      	movs	r3, #129	; 0x81
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d9c:	230b      	movs	r3, #11
 8000d9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da8:	4619      	mov	r1, r3
 8000daa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dae:	f000 ff65 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_PWM_Pin */
  GPIO_InitStruct.Pin = STMOD_PWM_Pin;
 8000db2:	2320      	movs	r3, #32
 8000db4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db6:	2302      	movs	r3, #2
 8000db8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(STMOD_PWM_GPIO_Port, &GPIO_InitStruct);
 8000dc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dca:	4619      	mov	r1, r3
 8000dcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd0:	f000 ff54 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8000dd4:	2340      	movs	r3, #64	; 0x40
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de0:	2300      	movs	r3, #0
 8000de2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8000de4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de8:	4619      	mov	r1, r3
 8000dea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dee:	f000 ff45 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8000df2:	2302      	movs	r3, #2
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df6:	2302      	movs	r3, #2
 8000df8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000e02:	2302      	movs	r3, #2
 8000e04:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8000e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e10:	f000 ff34 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_TE_Pin */
  GPIO_InitStruct.Pin = DSI_TE_Pin;
 8000e14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e22:	2300      	movs	r3, #0
 8000e24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_DSI;
 8000e26:	230b      	movs	r3, #11
 8000e28:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 8000e2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4822      	ldr	r0, [pc, #136]	; (8000ebc <MX_GPIO_Init+0x434>)
 8000e32:	f000 ff23 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_HSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin;
 8000e36:	2310      	movs	r3, #16
 8000e38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000e46:	230a      	movs	r3, #10
 8000e48:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8000e4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e4e:	4619      	mov	r1, r3
 8000e50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e54:	f000 ff12 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_A3_Pin */
  GPIO_InitStruct.Pin = ARD_A3_Pin;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e5c:	230b      	movs	r3, #11
 8000e5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 8000e64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4815      	ldr	r0, [pc, #84]	; (8000ec0 <MX_GPIO_Init+0x438>)
 8000e6c:	f000 ff06 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8000e70:	2304      	movs	r3, #4
 8000e72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e74:	2301      	movs	r3, #1
 8000e76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000e80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e84:	4619      	mov	r1, r3
 8000e86:	480e      	ldr	r0, [pc, #56]	; (8000ec0 <MX_GPIO_Init+0x438>)
 8000e88:	f000 fef8 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : DFDATIN1_Pin */
  GPIO_InitStruct.Pin = DFDATIN1_Pin;
 8000e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e92:	2302      	movs	r3, #2
 8000e94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000e9e:	2306      	movs	r3, #6
 8000ea0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 8000ea2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <MX_GPIO_Init+0x438>)
 8000eaa:	f000 fee7 	bl	8001c7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000eae:	bf00      	nop
 8000eb0:	3738      	adds	r7, #56	; 0x38
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	48000800 	.word	0x48000800
 8000ebc:	48001400 	.word	0x48001400
 8000ec0:	48000400 	.word	0x48000400

08000ec4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec8:	b672      	cpsid	i
}
 8000eca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <Error_Handler+0x8>
	...

08000ed0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed6:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <HAL_MspInit+0x44>)
 8000ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eda:	4a0e      	ldr	r2, [pc, #56]	; (8000f14 <HAL_MspInit+0x44>)
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	6613      	str	r3, [r2, #96]	; 0x60
 8000ee2:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <HAL_MspInit+0x44>)
 8000ee4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	607b      	str	r3, [r7, #4]
 8000eec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eee:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <HAL_MspInit+0x44>)
 8000ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef2:	4a08      	ldr	r2, [pc, #32]	; (8000f14 <HAL_MspInit+0x44>)
 8000ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef8:	6593      	str	r3, [r2, #88]	; 0x58
 8000efa:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HAL_MspInit+0x44>)
 8000efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f02:	603b      	str	r3, [r7, #0]
 8000f04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	40021000 	.word	0x40021000

08000f18 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a0a      	ldr	r2, [pc, #40]	; (8000f50 <HAL_CRC_MspInit+0x38>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d10b      	bne.n	8000f42 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <HAL_CRC_MspInit+0x3c>)
 8000f2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f2e:	4a09      	ldr	r2, [pc, #36]	; (8000f54 <HAL_CRC_MspInit+0x3c>)
 8000f30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f34:	6493      	str	r3, [r2, #72]	; 0x48
 8000f36:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <HAL_CRC_MspInit+0x3c>)
 8000f38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000f42:	bf00      	nop
 8000f44:	3714      	adds	r7, #20
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	40023000 	.word	0x40023000
 8000f54:	40021000 	.word	0x40021000

08000f58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b0b2      	sub	sp, #200	; 0xc8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f70:	f107 0318 	add.w	r3, r7, #24
 8000f74:	229c      	movs	r2, #156	; 0x9c
 8000f76:	2100      	movs	r1, #0
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f008 fcb7 	bl	80098ec <memset>
  if(hi2c->Instance==I2C1)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a33      	ldr	r2, [pc, #204]	; (8001050 <HAL_I2C_MspInit+0xf8>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d15e      	bne.n	8001046 <HAL_I2C_MspInit+0xee>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f88:	2340      	movs	r3, #64	; 0x40
 8000f8a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f90:	f107 0318 	add.w	r3, r7, #24
 8000f94:	4618      	mov	r0, r3
 8000f96:	f002 f8f5 	bl	8003184 <HAL_RCCEx_PeriphCLKConfig>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000fa0:	f7ff ff90 	bl	8000ec4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa4:	4b2b      	ldr	r3, [pc, #172]	; (8001054 <HAL_I2C_MspInit+0xfc>)
 8000fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa8:	4a2a      	ldr	r2, [pc, #168]	; (8001054 <HAL_I2C_MspInit+0xfc>)
 8000faa:	f043 0302 	orr.w	r3, r3, #2
 8000fae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb0:	4b28      	ldr	r3, [pc, #160]	; (8001054 <HAL_I2C_MspInit+0xfc>)
 8000fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb4:	f003 0302 	and.w	r3, r3, #2
 8000fb8:	617b      	str	r3, [r7, #20]
 8000fba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fbc:	4b25      	ldr	r3, [pc, #148]	; (8001054 <HAL_I2C_MspInit+0xfc>)
 8000fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc0:	4a24      	ldr	r2, [pc, #144]	; (8001054 <HAL_I2C_MspInit+0xfc>)
 8000fc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fc8:	4b22      	ldr	r3, [pc, #136]	; (8001054 <HAL_I2C_MspInit+0xfc>)
 8000fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fd0:	613b      	str	r3, [r7, #16]
 8000fd2:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8000fd4:	f001 f9f2 	bl	80023bc <HAL_PWREx_EnableVddIO2>
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PG13     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin;
 8000fd8:	2340      	movs	r3, #64	; 0x40
 8000fda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fde:	2312      	movs	r3, #18
 8000fe0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fea:	2303      	movs	r3, #3
 8000fec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ff0:	2304      	movs	r3, #4
 8000ff2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(I2C1_SCL_GPIO_Port, &GPIO_InitStruct);
 8000ff6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4816      	ldr	r0, [pc, #88]	; (8001058 <HAL_I2C_MspInit+0x100>)
 8000ffe:	f000 fe3d 	bl	8001c7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C1_SDA_Pin;
 8001002:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001006:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800100a:	2312      	movs	r3, #18
 800100c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001010:	2301      	movs	r3, #1
 8001012:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001016:	2303      	movs	r3, #3
 8001018:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800101c:	2304      	movs	r3, #4
 800101e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStruct);
 8001022:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001026:	4619      	mov	r1, r3
 8001028:	480c      	ldr	r0, [pc, #48]	; (800105c <HAL_I2C_MspInit+0x104>)
 800102a:	f000 fe27 	bl	8001c7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800102e:	4b09      	ldr	r3, [pc, #36]	; (8001054 <HAL_I2C_MspInit+0xfc>)
 8001030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001032:	4a08      	ldr	r2, [pc, #32]	; (8001054 <HAL_I2C_MspInit+0xfc>)
 8001034:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001038:	6593      	str	r3, [r2, #88]	; 0x58
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <HAL_I2C_MspInit+0xfc>)
 800103c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800103e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001046:	bf00      	nop
 8001048:	37c8      	adds	r7, #200	; 0xc8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40005400 	.word	0x40005400
 8001054:	40021000 	.word	0x40021000
 8001058:	48000400 	.word	0x48000400
 800105c:	48001800 	.word	0x48001800

08001060 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08a      	sub	sp, #40	; 0x28
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a25      	ldr	r2, [pc, #148]	; (8001114 <HAL_SPI_MspInit+0xb4>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d144      	bne.n	800110c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001082:	4b25      	ldr	r3, [pc, #148]	; (8001118 <HAL_SPI_MspInit+0xb8>)
 8001084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001086:	4a24      	ldr	r2, [pc, #144]	; (8001118 <HAL_SPI_MspInit+0xb8>)
 8001088:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800108c:	6593      	str	r3, [r2, #88]	; 0x58
 800108e:	4b22      	ldr	r3, [pc, #136]	; (8001118 <HAL_SPI_MspInit+0xb8>)
 8001090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001096:	613b      	str	r3, [r7, #16]
 8001098:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800109a:	4b1f      	ldr	r3, [pc, #124]	; (8001118 <HAL_SPI_MspInit+0xb8>)
 800109c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109e:	4a1e      	ldr	r2, [pc, #120]	; (8001118 <HAL_SPI_MspInit+0xb8>)
 80010a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010a6:	4b1c      	ldr	r3, [pc, #112]	; (8001118 <HAL_SPI_MspInit+0xb8>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b2:	4b19      	ldr	r3, [pc, #100]	; (8001118 <HAL_SPI_MspInit+0xb8>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b6:	4a18      	ldr	r2, [pc, #96]	; (8001118 <HAL_SPI_MspInit+0xb8>)
 80010b8:	f043 0302 	orr.w	r3, r3, #2
 80010bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010be:	4b16      	ldr	r3, [pc, #88]	; (8001118 <HAL_SPI_MspInit+0xb8>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	68bb      	ldr	r3, [r7, #8]
    PI0     ------> SPI2_NSS
    PB15     ------> SPI2_MOSI
    PB14     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = ARD_10_Pin;
 80010ca:	2301      	movs	r3, #1
 80010cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ce:	2302      	movs	r3, #2
 80010d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d6:	2303      	movs	r3, #3
 80010d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010da:	2305      	movs	r3, #5
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_10_GPIO_Port, &GPIO_InitStruct);
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	4619      	mov	r1, r3
 80010e4:	480d      	ldr	r0, [pc, #52]	; (800111c <HAL_SPI_MspInit+0xbc>)
 80010e6:	f000 fdc9 	bl	8001c7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_MOSI_Pin|SPI2_MISO_Pin|SPI2_CLK_Pin;
 80010ea:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80010ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f0:	2302      	movs	r3, #2
 80010f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f8:	2303      	movs	r3, #3
 80010fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010fc:	2305      	movs	r3, #5
 80010fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	4619      	mov	r1, r3
 8001106:	4806      	ldr	r0, [pc, #24]	; (8001120 <HAL_SPI_MspInit+0xc0>)
 8001108:	f000 fdb8 	bl	8001c7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800110c:	bf00      	nop
 800110e:	3728      	adds	r7, #40	; 0x28
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40003800 	.word	0x40003800
 8001118:	40021000 	.word	0x40021000
 800111c:	48002000 	.word	0x48002000
 8001120:	48000400 	.word	0x48000400

08001124 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b0b4      	sub	sp, #208	; 0xd0
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800113c:	f107 0320 	add.w	r3, r7, #32
 8001140:	229c      	movs	r2, #156	; 0x9c
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f008 fbd1 	bl	80098ec <memset>
  if(huart->Instance==USART2)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a58      	ldr	r2, [pc, #352]	; (80012b0 <HAL_UART_MspInit+0x18c>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d144      	bne.n	80011de <HAL_UART_MspInit+0xba>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001154:	2302      	movs	r3, #2
 8001156:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001158:	2300      	movs	r3, #0
 800115a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800115c:	f107 0320 	add.w	r3, r7, #32
 8001160:	4618      	mov	r0, r3
 8001162:	f002 f80f 	bl	8003184 <HAL_RCCEx_PeriphCLKConfig>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800116c:	f7ff feaa 	bl	8000ec4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001170:	4b50      	ldr	r3, [pc, #320]	; (80012b4 <HAL_UART_MspInit+0x190>)
 8001172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001174:	4a4f      	ldr	r2, [pc, #316]	; (80012b4 <HAL_UART_MspInit+0x190>)
 8001176:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800117a:	6593      	str	r3, [r2, #88]	; 0x58
 800117c:	4b4d      	ldr	r3, [pc, #308]	; (80012b4 <HAL_UART_MspInit+0x190>)
 800117e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001184:	61fb      	str	r3, [r7, #28]
 8001186:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001188:	4b4a      	ldr	r3, [pc, #296]	; (80012b4 <HAL_UART_MspInit+0x190>)
 800118a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118c:	4a49      	ldr	r2, [pc, #292]	; (80012b4 <HAL_UART_MspInit+0x190>)
 800118e:	f043 0301 	orr.w	r3, r3, #1
 8001192:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001194:	4b47      	ldr	r3, [pc, #284]	; (80012b4 <HAL_UART_MspInit+0x190>)
 8001196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	61bb      	str	r3, [r7, #24]
 800119e:	69bb      	ldr	r3, [r7, #24]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_TX_Pin;
 80011a0:	230c      	movs	r3, #12
 80011a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a6:	2302      	movs	r3, #2
 80011a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b2:	2303      	movs	r3, #3
 80011b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011b8:	2307      	movs	r3, #7
 80011ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011be:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80011c2:	4619      	mov	r1, r3
 80011c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c8:	f000 fd58 	bl	8001c7c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011cc:	2200      	movs	r2, #0
 80011ce:	2100      	movs	r1, #0
 80011d0:	2026      	movs	r0, #38	; 0x26
 80011d2:	f000 fb6e 	bl	80018b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011d6:	2026      	movs	r0, #38	; 0x26
 80011d8:	f000 fb87 	bl	80018ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011dc:	e063      	b.n	80012a6 <HAL_UART_MspInit+0x182>
  else if(huart->Instance==USART3)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a35      	ldr	r2, [pc, #212]	; (80012b8 <HAL_UART_MspInit+0x194>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d15e      	bne.n	80012a6 <HAL_UART_MspInit+0x182>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011e8:	2304      	movs	r3, #4
 80011ea:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80011ec:	2300      	movs	r3, #0
 80011ee:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011f0:	f107 0320 	add.w	r3, r7, #32
 80011f4:	4618      	mov	r0, r3
 80011f6:	f001 ffc5 	bl	8003184 <HAL_RCCEx_PeriphCLKConfig>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8001200:	f7ff fe60 	bl	8000ec4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001204:	4b2b      	ldr	r3, [pc, #172]	; (80012b4 <HAL_UART_MspInit+0x190>)
 8001206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001208:	4a2a      	ldr	r2, [pc, #168]	; (80012b4 <HAL_UART_MspInit+0x190>)
 800120a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800120e:	6593      	str	r3, [r2, #88]	; 0x58
 8001210:	4b28      	ldr	r3, [pc, #160]	; (80012b4 <HAL_UART_MspInit+0x190>)
 8001212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001214:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001218:	617b      	str	r3, [r7, #20]
 800121a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121c:	4b25      	ldr	r3, [pc, #148]	; (80012b4 <HAL_UART_MspInit+0x190>)
 800121e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001220:	4a24      	ldr	r2, [pc, #144]	; (80012b4 <HAL_UART_MspInit+0x190>)
 8001222:	f043 0301 	orr.w	r3, r3, #1
 8001226:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001228:	4b22      	ldr	r3, [pc, #136]	; (80012b4 <HAL_UART_MspInit+0x190>)
 800122a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122c:	f003 0301 	and.w	r3, r3, #1
 8001230:	613b      	str	r3, [r7, #16]
 8001232:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001234:	4b1f      	ldr	r3, [pc, #124]	; (80012b4 <HAL_UART_MspInit+0x190>)
 8001236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001238:	4a1e      	ldr	r2, [pc, #120]	; (80012b4 <HAL_UART_MspInit+0x190>)
 800123a:	f043 0302 	orr.w	r3, r3, #2
 800123e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001240:	4b1c      	ldr	r3, [pc, #112]	; (80012b4 <HAL_UART_MspInit+0x190>)
 8001242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001244:	f003 0302 	and.w	r3, r3, #2
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART3_RTS_Pin;
 800124c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001250:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2302      	movs	r3, #2
 8001256:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001260:	2303      	movs	r3, #3
 8001262:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001266:	2307      	movs	r3, #7
 8001268:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(USART3_RTS_GPIO_Port, &GPIO_InitStruct);
 800126c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001270:	4619      	mov	r1, r3
 8001272:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001276:	f000 fd01 	bl	8001c7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART3_RX_Pin|USART3_TX_Pin;
 800127a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800127e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001282:	2302      	movs	r3, #2
 8001284:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128e:	2303      	movs	r3, #3
 8001290:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001294:	2307      	movs	r3, #7
 8001296:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800129a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800129e:	4619      	mov	r1, r3
 80012a0:	4806      	ldr	r0, [pc, #24]	; (80012bc <HAL_UART_MspInit+0x198>)
 80012a2:	f000 fceb 	bl	8001c7c <HAL_GPIO_Init>
}
 80012a6:	bf00      	nop
 80012a8:	37d0      	adds	r7, #208	; 0xd0
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40004400 	.word	0x40004400
 80012b4:	40021000 	.word	0x40021000
 80012b8:	40004800 	.word	0x40004800
 80012bc:	48000400 	.word	0x48000400

080012c0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80012c6:	1d3b      	adds	r3, r7, #4
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80012d4:	4b32      	ldr	r3, [pc, #200]	; (80013a0 <HAL_FMC_MspInit+0xe0>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d15d      	bne.n	8001398 <HAL_FMC_MspInit+0xd8>
    return;
  }
  FMC_Initialized = 1;
 80012dc:	4b30      	ldr	r3, [pc, #192]	; (80013a0 <HAL_FMC_MspInit+0xe0>)
 80012de:	2201      	movs	r2, #1
 80012e0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80012e2:	4b30      	ldr	r3, [pc, #192]	; (80013a4 <HAL_FMC_MspInit+0xe4>)
 80012e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012e6:	4a2f      	ldr	r2, [pc, #188]	; (80013a4 <HAL_FMC_MspInit+0xe4>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	6513      	str	r3, [r2, #80]	; 0x50
 80012ee:	4b2d      	ldr	r3, [pc, #180]	; (80013a4 <HAL_FMC_MspInit+0xe4>)
 80012f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	603b      	str	r3, [r7, #0]
 80012f8:	683b      	ldr	r3, [r7, #0]
  PF13   ------> FMC_A7
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|PSRAM_A20_Pin|PSRAM_A19_Pin
 80012fa:	f64f 739b 	movw	r3, #65435	; 0xff9b
 80012fe:	607b      	str	r3, [r7, #4]
                          |D7_Pin|D6_Pin|D12_Pin|D5_Pin
                          |D11_Pin|D4_Pin|D10_Pin|D9_Pin
                          |D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001300:	2302      	movs	r3, #2
 8001302:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001308:	2303      	movs	r3, #3
 800130a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800130c:	230c      	movs	r3, #12
 800130e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001310:	1d3b      	adds	r3, r7, #4
 8001312:	4619      	mov	r1, r3
 8001314:	4824      	ldr	r0, [pc, #144]	; (80013a8 <HAL_FMC_MspInit+0xe8>)
 8001316:	f000 fcb1 	bl	8001c7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|PSRAM_OE_Pin|D3_Pin|PSRAM_WE_Pin
 800131a:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 800131e:	607b      	str	r3, [r7, #4]
                          |PSRAM_WAIT_Pin|PSRAM_CLK_Pin|PSRAM_NE1_Pin|PSRAM_A18_Pin
                          |D1_Pin|D0_Pin|PSRAM_A17_Pin|PSRAM_A16_Pin
                          |D15_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001320:	2302      	movs	r3, #2
 8001322:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001328:	2303      	movs	r3, #3
 800132a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800132c:	230c      	movs	r3, #12
 800132e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001330:	1d3b      	adds	r3, r7, #4
 8001332:	4619      	mov	r1, r3
 8001334:	481d      	ldr	r0, [pc, #116]	; (80013ac <HAL_FMC_MspInit+0xec>)
 8001336:	f000 fca1 	bl	8001c7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_ADV_Pin;
 800133a:	2380      	movs	r3, #128	; 0x80
 800133c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133e:	2302      	movs	r3, #2
 8001340:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001346:	2303      	movs	r3, #3
 8001348:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800134a:	230c      	movs	r3, #12
 800134c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PSRAM_ADV_GPIO_Port, &GPIO_InitStruct);
 800134e:	1d3b      	adds	r3, r7, #4
 8001350:	4619      	mov	r1, r3
 8001352:	4817      	ldr	r0, [pc, #92]	; (80013b0 <HAL_FMC_MspInit+0xf0>)
 8001354:	f000 fc92 	bl	8001c7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 8001358:	f24f 033f 	movw	r3, #61503	; 0xf03f
 800135c:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135e:	2302      	movs	r3, #2
 8001360:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001366:	2303      	movs	r3, #3
 8001368:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800136a:	230c      	movs	r3, #12
 800136c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	4619      	mov	r1, r3
 8001372:	4810      	ldr	r0, [pc, #64]	; (80013b4 <HAL_FMC_MspInit+0xf4>)
 8001374:	f000 fc82 	bl	8001c7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A15_Pin|PSRAM_A11_Pin
 8001378:	233f      	movs	r3, #63	; 0x3f
 800137a:	607b      	str	r3, [r7, #4]
                          |PSRAM_A12_Pin|PSRAM_A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137c:	2302      	movs	r3, #2
 800137e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001384:	2303      	movs	r3, #3
 8001386:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001388:	230c      	movs	r3, #12
 800138a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800138c:	1d3b      	adds	r3, r7, #4
 800138e:	4619      	mov	r1, r3
 8001390:	4809      	ldr	r0, [pc, #36]	; (80013b8 <HAL_FMC_MspInit+0xf8>)
 8001392:	f000 fc73 	bl	8001c7c <HAL_GPIO_Init>
 8001396:	e000      	b.n	800139a <HAL_FMC_MspInit+0xda>
    return;
 8001398:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800139a:	3718      	adds	r7, #24
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20000ca4 	.word	0x20000ca4
 80013a4:	40021000 	.word	0x40021000
 80013a8:	48001000 	.word	0x48001000
 80013ac:	48000c00 	.word	0x48000c00
 80013b0:	48000400 	.word	0x48000400
 80013b4:	48001400 	.word	0x48001400
 80013b8:	48001800 	.word	0x48001800

080013bc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80013c4:	f7ff ff7c 	bl	80012c0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b0b0      	sub	sp, #192	; 0xc0
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013d8:	f107 0310 	add.w	r3, r7, #16
 80013dc:	229c      	movs	r2, #156	; 0x9c
 80013de:	2100      	movs	r1, #0
 80013e0:	4618      	mov	r0, r3
 80013e2:	f008 fa83 	bl	80098ec <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a32      	ldr	r2, [pc, #200]	; (80014b4 <HAL_SAI_MspInit+0xe4>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d15d      	bne.n	80014ac <HAL_SAI_MspInit+0xdc>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80013f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013f4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80013f6:	2300      	movs	r3, #0
 80013f8:	67fb      	str	r3, [r7, #124]	; 0x7c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80013fa:	2301      	movs	r3, #1
 80013fc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80013fe:	2301      	movs	r3, #1
 8001400:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001402:	2310      	movs	r3, #16
 8001404:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001406:	2302      	movs	r3, #2
 8001408:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800140a:	2302      	movs	r3, #2
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800140e:	2302      	movs	r3, #2
 8001410:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8001412:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001416:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001418:	f107 0310 	add.w	r3, r7, #16
 800141c:	4618      	mov	r0, r3
 800141e:	f001 feb1 	bl	8003184 <HAL_RCCEx_PeriphCLKConfig>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <HAL_SAI_MspInit+0x5c>
    {
      Error_Handler();
 8001428:	f7ff fd4c 	bl	8000ec4 <Error_Handler>
    }

    if (SAI1_client == 0)
 800142c:	4b22      	ldr	r3, [pc, #136]	; (80014b8 <HAL_SAI_MspInit+0xe8>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d10b      	bne.n	800144c <HAL_SAI_MspInit+0x7c>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001434:	4b21      	ldr	r3, [pc, #132]	; (80014bc <HAL_SAI_MspInit+0xec>)
 8001436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001438:	4a20      	ldr	r2, [pc, #128]	; (80014bc <HAL_SAI_MspInit+0xec>)
 800143a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800143e:	6613      	str	r3, [r2, #96]	; 0x60
 8001440:	4b1e      	ldr	r3, [pc, #120]	; (80014bc <HAL_SAI_MspInit+0xec>)
 8001442:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001444:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 800144c:	4b1a      	ldr	r3, [pc, #104]	; (80014b8 <HAL_SAI_MspInit+0xe8>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	3301      	adds	r3, #1
 8001452:	4a19      	ldr	r2, [pc, #100]	; (80014b8 <HAL_SAI_MspInit+0xe8>)
 8001454:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PB9     ------> SAI1_FS_A
    PE6     ------> SAI1_SD_A
    PE5     ------> SAI1_SCK_A
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin|SAI1_FSA_Pin;
 8001456:	f44f 7308 	mov.w	r3, #544	; 0x220
 800145a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145e:	2302      	movs	r3, #2
 8001460:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146a:	2300      	movs	r3, #0
 800146c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001470:	230d      	movs	r3, #13
 8001472:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001476:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800147a:	4619      	mov	r1, r3
 800147c:	4810      	ldr	r0, [pc, #64]	; (80014c0 <HAL_SAI_MspInit+0xf0>)
 800147e:	f000 fbfd 	bl	8001c7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCKA_Pin|SAI1_SDA_Pin|SAI1_SCKA_Pin;
 8001482:	2364      	movs	r3, #100	; 0x64
 8001484:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001488:	2302      	movs	r3, #2
 800148a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001494:	2300      	movs	r3, #0
 8001496:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800149a:	230d      	movs	r3, #13
 800149c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014a0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80014a4:	4619      	mov	r1, r3
 80014a6:	4807      	ldr	r0, [pc, #28]	; (80014c4 <HAL_SAI_MspInit+0xf4>)
 80014a8:	f000 fbe8 	bl	8001c7c <HAL_GPIO_Init>

    }
}
 80014ac:	bf00      	nop
 80014ae:	37c0      	adds	r7, #192	; 0xc0
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40015404 	.word	0x40015404
 80014b8:	20000ca8 	.word	0x20000ca8
 80014bc:	40021000 	.word	0x40021000
 80014c0:	48000400 	.word	0x48000400
 80014c4:	48001000 	.word	0x48001000

080014c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014cc:	e7fe      	b.n	80014cc <NMI_Handler+0x4>

080014ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014d2:	e7fe      	b.n	80014d2 <HardFault_Handler+0x4>

080014d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d8:	e7fe      	b.n	80014d8 <MemManage_Handler+0x4>

080014da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014de:	e7fe      	b.n	80014de <BusFault_Handler+0x4>

080014e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e4:	e7fe      	b.n	80014e4 <UsageFault_Handler+0x4>

080014e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001514:	f000 f8d2 	bl	80016bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}

0800151c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001520:	4802      	ldr	r0, [pc, #8]	; (800152c <USART2_IRQHandler+0x10>)
 8001522:	f004 f885 	bl	8005630 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000b2c 	.word	0x20000b2c

08001530 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001538:	4a14      	ldr	r2, [pc, #80]	; (800158c <_sbrk+0x5c>)
 800153a:	4b15      	ldr	r3, [pc, #84]	; (8001590 <_sbrk+0x60>)
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001544:	4b13      	ldr	r3, [pc, #76]	; (8001594 <_sbrk+0x64>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d102      	bne.n	8001552 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800154c:	4b11      	ldr	r3, [pc, #68]	; (8001594 <_sbrk+0x64>)
 800154e:	4a12      	ldr	r2, [pc, #72]	; (8001598 <_sbrk+0x68>)
 8001550:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001552:	4b10      	ldr	r3, [pc, #64]	; (8001594 <_sbrk+0x64>)
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4413      	add	r3, r2
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	429a      	cmp	r2, r3
 800155e:	d207      	bcs.n	8001570 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001560:	f008 fa22 	bl	80099a8 <__errno>
 8001564:	4603      	mov	r3, r0
 8001566:	220c      	movs	r2, #12
 8001568:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800156a:	f04f 33ff 	mov.w	r3, #4294967295
 800156e:	e009      	b.n	8001584 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001570:	4b08      	ldr	r3, [pc, #32]	; (8001594 <_sbrk+0x64>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001576:	4b07      	ldr	r3, [pc, #28]	; (8001594 <_sbrk+0x64>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4413      	add	r3, r2
 800157e:	4a05      	ldr	r2, [pc, #20]	; (8001594 <_sbrk+0x64>)
 8001580:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001582:	68fb      	ldr	r3, [r7, #12]
}
 8001584:	4618      	mov	r0, r3
 8001586:	3718      	adds	r7, #24
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	200a0000 	.word	0x200a0000
 8001590:	00000800 	.word	0x00000800
 8001594:	20000cac 	.word	0x20000cac
 8001598:	20001188 	.word	0x20001188

0800159c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80015a0:	4b06      	ldr	r3, [pc, #24]	; (80015bc <SystemInit+0x20>)
 80015a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015a6:	4a05      	ldr	r2, [pc, #20]	; (80015bc <SystemInit+0x20>)
 80015a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80015c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015c4:	f7ff ffea 	bl	800159c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015c8:	480c      	ldr	r0, [pc, #48]	; (80015fc <LoopForever+0x6>)
  ldr r1, =_edata
 80015ca:	490d      	ldr	r1, [pc, #52]	; (8001600 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015cc:	4a0d      	ldr	r2, [pc, #52]	; (8001604 <LoopForever+0xe>)
  movs r3, #0
 80015ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d0:	e002      	b.n	80015d8 <LoopCopyDataInit>

080015d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015d6:	3304      	adds	r3, #4

080015d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015dc:	d3f9      	bcc.n	80015d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015de:	4a0a      	ldr	r2, [pc, #40]	; (8001608 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015e0:	4c0a      	ldr	r4, [pc, #40]	; (800160c <LoopForever+0x16>)
  movs r3, #0
 80015e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e4:	e001      	b.n	80015ea <LoopFillZerobss>

080015e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e8:	3204      	adds	r2, #4

080015ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015ec:	d3fb      	bcc.n	80015e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015ee:	f008 f9e1 	bl	80099b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015f2:	f7fe ffd3 	bl	800059c <main>

080015f6 <LoopForever>:

LoopForever:
    b LoopForever
 80015f6:	e7fe      	b.n	80015f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80015f8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80015fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001600:	20000988 	.word	0x20000988
  ldr r2, =_sidata
 8001604:	080154cc 	.word	0x080154cc
  ldr r2, =_sbss
 8001608:	200009a0 	.word	0x200009a0
  ldr r4, =_ebss
 800160c:	20001188 	.word	0x20001188

08001610 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001610:	e7fe      	b.n	8001610 <ADC1_IRQHandler>

08001612 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b082      	sub	sp, #8
 8001616:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001618:	2300      	movs	r3, #0
 800161a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800161c:	2003      	movs	r0, #3
 800161e:	f000 f93d 	bl	800189c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001622:	2000      	movs	r0, #0
 8001624:	f000 f80e 	bl	8001644 <HAL_InitTick>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d002      	beq.n	8001634 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	71fb      	strb	r3, [r7, #7]
 8001632:	e001      	b.n	8001638 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001634:	f7ff fc4c 	bl	8000ed0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001638:	79fb      	ldrb	r3, [r7, #7]
}
 800163a:	4618      	mov	r0, r3
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
	...

08001644 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800164c:	2300      	movs	r3, #0
 800164e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001650:	4b17      	ldr	r3, [pc, #92]	; (80016b0 <HAL_InitTick+0x6c>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d023      	beq.n	80016a0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001658:	4b16      	ldr	r3, [pc, #88]	; (80016b4 <HAL_InitTick+0x70>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <HAL_InitTick+0x6c>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	4619      	mov	r1, r3
 8001662:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001666:	fbb3 f3f1 	udiv	r3, r3, r1
 800166a:	fbb2 f3f3 	udiv	r3, r2, r3
 800166e:	4618      	mov	r0, r3
 8001670:	f000 f949 	bl	8001906 <HAL_SYSTICK_Config>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d10f      	bne.n	800169a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2b0f      	cmp	r3, #15
 800167e:	d809      	bhi.n	8001694 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001680:	2200      	movs	r2, #0
 8001682:	6879      	ldr	r1, [r7, #4]
 8001684:	f04f 30ff 	mov.w	r0, #4294967295
 8001688:	f000 f913 	bl	80018b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800168c:	4a0a      	ldr	r2, [pc, #40]	; (80016b8 <HAL_InitTick+0x74>)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6013      	str	r3, [r2, #0]
 8001692:	e007      	b.n	80016a4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	73fb      	strb	r3, [r7, #15]
 8001698:	e004      	b.n	80016a4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	73fb      	strb	r3, [r7, #15]
 800169e:	e001      	b.n	80016a4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000008 	.word	0x20000008
 80016b4:	20000000 	.word	0x20000000
 80016b8:	20000004 	.word	0x20000004

080016bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016c0:	4b06      	ldr	r3, [pc, #24]	; (80016dc <HAL_IncTick+0x20>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	461a      	mov	r2, r3
 80016c6:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <HAL_IncTick+0x24>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4413      	add	r3, r2
 80016cc:	4a04      	ldr	r2, [pc, #16]	; (80016e0 <HAL_IncTick+0x24>)
 80016ce:	6013      	str	r3, [r2, #0]
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	20000008 	.word	0x20000008
 80016e0:	20000cb0 	.word	0x20000cb0

080016e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  return uwTick;
 80016e8:	4b03      	ldr	r3, [pc, #12]	; (80016f8 <HAL_GetTick+0x14>)
 80016ea:	681b      	ldr	r3, [r3, #0]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	20000cb0 	.word	0x20000cb0

080016fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800170c:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <__NVIC_SetPriorityGrouping+0x44>)
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001712:	68ba      	ldr	r2, [r7, #8]
 8001714:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001718:	4013      	ands	r3, r2
 800171a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001724:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800172c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800172e:	4a04      	ldr	r2, [pc, #16]	; (8001740 <__NVIC_SetPriorityGrouping+0x44>)
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	60d3      	str	r3, [r2, #12]
}
 8001734:	bf00      	nop
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001748:	4b04      	ldr	r3, [pc, #16]	; (800175c <__NVIC_GetPriorityGrouping+0x18>)
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	0a1b      	lsrs	r3, r3, #8
 800174e:	f003 0307 	and.w	r3, r3, #7
}
 8001752:	4618      	mov	r0, r3
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800176a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176e:	2b00      	cmp	r3, #0
 8001770:	db0b      	blt.n	800178a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001772:	79fb      	ldrb	r3, [r7, #7]
 8001774:	f003 021f 	and.w	r2, r3, #31
 8001778:	4907      	ldr	r1, [pc, #28]	; (8001798 <__NVIC_EnableIRQ+0x38>)
 800177a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177e:	095b      	lsrs	r3, r3, #5
 8001780:	2001      	movs	r0, #1
 8001782:	fa00 f202 	lsl.w	r2, r0, r2
 8001786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800178a:	bf00      	nop
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	e000e100 	.word	0xe000e100

0800179c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	6039      	str	r1, [r7, #0]
 80017a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	db0a      	blt.n	80017c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	b2da      	uxtb	r2, r3
 80017b4:	490c      	ldr	r1, [pc, #48]	; (80017e8 <__NVIC_SetPriority+0x4c>)
 80017b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ba:	0112      	lsls	r2, r2, #4
 80017bc:	b2d2      	uxtb	r2, r2
 80017be:	440b      	add	r3, r1
 80017c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017c4:	e00a      	b.n	80017dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	4908      	ldr	r1, [pc, #32]	; (80017ec <__NVIC_SetPriority+0x50>)
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	f003 030f 	and.w	r3, r3, #15
 80017d2:	3b04      	subs	r3, #4
 80017d4:	0112      	lsls	r2, r2, #4
 80017d6:	b2d2      	uxtb	r2, r2
 80017d8:	440b      	add	r3, r1
 80017da:	761a      	strb	r2, [r3, #24]
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	e000e100 	.word	0xe000e100
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b089      	sub	sp, #36	; 0x24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	f1c3 0307 	rsb	r3, r3, #7
 800180a:	2b04      	cmp	r3, #4
 800180c:	bf28      	it	cs
 800180e:	2304      	movcs	r3, #4
 8001810:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	3304      	adds	r3, #4
 8001816:	2b06      	cmp	r3, #6
 8001818:	d902      	bls.n	8001820 <NVIC_EncodePriority+0x30>
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	3b03      	subs	r3, #3
 800181e:	e000      	b.n	8001822 <NVIC_EncodePriority+0x32>
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001824:	f04f 32ff 	mov.w	r2, #4294967295
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	43da      	mvns	r2, r3
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	401a      	ands	r2, r3
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001838:	f04f 31ff 	mov.w	r1, #4294967295
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	fa01 f303 	lsl.w	r3, r1, r3
 8001842:	43d9      	mvns	r1, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001848:	4313      	orrs	r3, r2
         );
}
 800184a:	4618      	mov	r0, r3
 800184c:	3724      	adds	r7, #36	; 0x24
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
	...

08001858 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3b01      	subs	r3, #1
 8001864:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001868:	d301      	bcc.n	800186e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800186a:	2301      	movs	r3, #1
 800186c:	e00f      	b.n	800188e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800186e:	4a0a      	ldr	r2, [pc, #40]	; (8001898 <SysTick_Config+0x40>)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3b01      	subs	r3, #1
 8001874:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001876:	210f      	movs	r1, #15
 8001878:	f04f 30ff 	mov.w	r0, #4294967295
 800187c:	f7ff ff8e 	bl	800179c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001880:	4b05      	ldr	r3, [pc, #20]	; (8001898 <SysTick_Config+0x40>)
 8001882:	2200      	movs	r2, #0
 8001884:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001886:	4b04      	ldr	r3, [pc, #16]	; (8001898 <SysTick_Config+0x40>)
 8001888:	2207      	movs	r2, #7
 800188a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	e000e010 	.word	0xe000e010

0800189c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff ff29 	bl	80016fc <__NVIC_SetPriorityGrouping>
}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b086      	sub	sp, #24
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	4603      	mov	r3, r0
 80018ba:	60b9      	str	r1, [r7, #8]
 80018bc:	607a      	str	r2, [r7, #4]
 80018be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018c4:	f7ff ff3e 	bl	8001744 <__NVIC_GetPriorityGrouping>
 80018c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	68b9      	ldr	r1, [r7, #8]
 80018ce:	6978      	ldr	r0, [r7, #20]
 80018d0:	f7ff ff8e 	bl	80017f0 <NVIC_EncodePriority>
 80018d4:	4602      	mov	r2, r0
 80018d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018da:	4611      	mov	r1, r2
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff ff5d 	bl	800179c <__NVIC_SetPriority>
}
 80018e2:	bf00      	nop
 80018e4:	3718      	adds	r7, #24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b082      	sub	sp, #8
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	4603      	mov	r3, r0
 80018f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff ff31 	bl	8001760 <__NVIC_EnableIRQ>
}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b082      	sub	sp, #8
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7ff ffa2 	bl	8001858 <SysTick_Config>
 8001914:	4603      	mov	r3, r0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
	...

08001920 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e054      	b.n	80019dc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	7f5b      	ldrb	r3, [r3, #29]
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b00      	cmp	r3, #0
 800193a:	d105      	bne.n	8001948 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7ff fae8 	bl	8000f18 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2202      	movs	r2, #2
 800194c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	791b      	ldrb	r3, [r3, #4]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d10c      	bne.n	8001970 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a22      	ldr	r2, [pc, #136]	; (80019e4 <HAL_CRC_Init+0xc4>)
 800195c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	689a      	ldr	r2, [r3, #8]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f022 0218 	bic.w	r2, r2, #24
 800196c:	609a      	str	r2, [r3, #8]
 800196e:	e00c      	b.n	800198a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6899      	ldr	r1, [r3, #8]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	461a      	mov	r2, r3
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f000 f834 	bl	80019e8 <HAL_CRCEx_Polynomial_Set>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e028      	b.n	80019dc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	795b      	ldrb	r3, [r3, #5]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d105      	bne.n	800199e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f04f 32ff 	mov.w	r2, #4294967295
 800199a:	611a      	str	r2, [r3, #16]
 800199c:	e004      	b.n	80019a8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	6912      	ldr	r2, [r2, #16]
 80019a6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	695a      	ldr	r2, [r3, #20]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	430a      	orrs	r2, r1
 80019bc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	699a      	ldr	r2, [r3, #24]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	430a      	orrs	r2, r1
 80019d2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2201      	movs	r2, #1
 80019d8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	04c11db7 	.word	0x04c11db7

080019e8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b087      	sub	sp, #28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019f4:	2300      	movs	r3, #0
 80019f6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80019f8:	231f      	movs	r3, #31
 80019fa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d102      	bne.n	8001a0c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	75fb      	strb	r3, [r7, #23]
 8001a0a:	e063      	b.n	8001ad4 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001a0c:	bf00      	nop
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1e5a      	subs	r2, r3, #1
 8001a12:	613a      	str	r2, [r7, #16]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d009      	beq.n	8001a2c <HAL_CRCEx_Polynomial_Set+0x44>
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	f003 031f 	and.w	r3, r3, #31
 8001a1e:	68ba      	ldr	r2, [r7, #8]
 8001a20:	fa22 f303 	lsr.w	r3, r2, r3
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d0f0      	beq.n	8001a0e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2b18      	cmp	r3, #24
 8001a30:	d846      	bhi.n	8001ac0 <HAL_CRCEx_Polynomial_Set+0xd8>
 8001a32:	a201      	add	r2, pc, #4	; (adr r2, 8001a38 <HAL_CRCEx_Polynomial_Set+0x50>)
 8001a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a38:	08001ac7 	.word	0x08001ac7
 8001a3c:	08001ac1 	.word	0x08001ac1
 8001a40:	08001ac1 	.word	0x08001ac1
 8001a44:	08001ac1 	.word	0x08001ac1
 8001a48:	08001ac1 	.word	0x08001ac1
 8001a4c:	08001ac1 	.word	0x08001ac1
 8001a50:	08001ac1 	.word	0x08001ac1
 8001a54:	08001ac1 	.word	0x08001ac1
 8001a58:	08001ab5 	.word	0x08001ab5
 8001a5c:	08001ac1 	.word	0x08001ac1
 8001a60:	08001ac1 	.word	0x08001ac1
 8001a64:	08001ac1 	.word	0x08001ac1
 8001a68:	08001ac1 	.word	0x08001ac1
 8001a6c:	08001ac1 	.word	0x08001ac1
 8001a70:	08001ac1 	.word	0x08001ac1
 8001a74:	08001ac1 	.word	0x08001ac1
 8001a78:	08001aa9 	.word	0x08001aa9
 8001a7c:	08001ac1 	.word	0x08001ac1
 8001a80:	08001ac1 	.word	0x08001ac1
 8001a84:	08001ac1 	.word	0x08001ac1
 8001a88:	08001ac1 	.word	0x08001ac1
 8001a8c:	08001ac1 	.word	0x08001ac1
 8001a90:	08001ac1 	.word	0x08001ac1
 8001a94:	08001ac1 	.word	0x08001ac1
 8001a98:	08001a9d 	.word	0x08001a9d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	2b06      	cmp	r3, #6
 8001aa0:	d913      	bls.n	8001aca <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001aa6:	e010      	b.n	8001aca <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	2b07      	cmp	r3, #7
 8001aac:	d90f      	bls.n	8001ace <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001ab2:	e00c      	b.n	8001ace <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	2b0f      	cmp	r3, #15
 8001ab8:	d90b      	bls.n	8001ad2 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001abe:	e008      	b.n	8001ad2 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	75fb      	strb	r3, [r7, #23]
        break;
 8001ac4:	e006      	b.n	8001ad4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001ac6:	bf00      	nop
 8001ac8:	e004      	b.n	8001ad4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001aca:	bf00      	nop
 8001acc:	e002      	b.n	8001ad4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001ace:	bf00      	nop
 8001ad0:	e000      	b.n	8001ad4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001ad2:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8001ad4:	7dfb      	ldrb	r3, [r7, #23]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d10d      	bne.n	8001af6 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68ba      	ldr	r2, [r7, #8]
 8001ae0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f023 0118 	bic.w	r1, r3, #24
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	430a      	orrs	r2, r1
 8001af4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001af6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	371c      	adds	r7, #28
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d008      	beq.n	8001b2e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2204      	movs	r2, #4
 8001b20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e040      	b.n	8001bb0 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 020e 	bic.w	r2, r2, #14
 8001b3c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b4c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f022 0201 	bic.w	r2, r2, #1
 8001b5c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b62:	f003 021c 	and.w	r2, r3, #28
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b70:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b7a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d00c      	beq.n	8001b9e <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b92:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001b9c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001bae:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3714      	adds	r7, #20
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d005      	beq.n	8001be0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2204      	movs	r2, #4
 8001bd8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	73fb      	strb	r3, [r7, #15]
 8001bde:	e047      	b.n	8001c70 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f022 020e 	bic.w	r2, r2, #14
 8001bee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f022 0201 	bic.w	r2, r2, #1
 8001bfe:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c0e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c14:	f003 021c 	and.w	r2, r3, #28
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c22:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001c2c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d00c      	beq.n	8001c50 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c44:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001c4e:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d003      	beq.n	8001c70 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	4798      	blx	r3
    }
  }
  return status;
 8001c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
	...

08001c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b087      	sub	sp, #28
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c8a:	e166      	b.n	8001f5a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	2101      	movs	r1, #1
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	fa01 f303 	lsl.w	r3, r1, r3
 8001c98:	4013      	ands	r3, r2
 8001c9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f000 8158 	beq.w	8001f54 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f003 0303 	and.w	r3, r3, #3
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d005      	beq.n	8001cbc <HAL_GPIO_Init+0x40>
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f003 0303 	and.w	r3, r3, #3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d130      	bne.n	8001d1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	2203      	movs	r2, #3
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	68da      	ldr	r2, [r3, #12]
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	091b      	lsrs	r3, r3, #4
 8001d08:	f003 0201 	and.w	r2, r3, #1
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f003 0303 	and.w	r3, r3, #3
 8001d26:	2b03      	cmp	r3, #3
 8001d28:	d017      	beq.n	8001d5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	2203      	movs	r2, #3
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	689a      	ldr	r2, [r3, #8]
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f003 0303 	and.w	r3, r3, #3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d123      	bne.n	8001dae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	08da      	lsrs	r2, r3, #3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	3208      	adds	r2, #8
 8001d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	220f      	movs	r2, #15
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43db      	mvns	r3, r3
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	4013      	ands	r3, r2
 8001d88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	691a      	ldr	r2, [r3, #16]
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	f003 0307 	and.w	r3, r3, #7
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	08da      	lsrs	r2, r3, #3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3208      	adds	r2, #8
 8001da8:	6939      	ldr	r1, [r7, #16]
 8001daa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	2203      	movs	r2, #3
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f003 0203 	and.w	r2, r3, #3
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f000 80b2 	beq.w	8001f54 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df0:	4b61      	ldr	r3, [pc, #388]	; (8001f78 <HAL_GPIO_Init+0x2fc>)
 8001df2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001df4:	4a60      	ldr	r2, [pc, #384]	; (8001f78 <HAL_GPIO_Init+0x2fc>)
 8001df6:	f043 0301 	orr.w	r3, r3, #1
 8001dfa:	6613      	str	r3, [r2, #96]	; 0x60
 8001dfc:	4b5e      	ldr	r3, [pc, #376]	; (8001f78 <HAL_GPIO_Init+0x2fc>)
 8001dfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e08:	4a5c      	ldr	r2, [pc, #368]	; (8001f7c <HAL_GPIO_Init+0x300>)
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	089b      	lsrs	r3, r3, #2
 8001e0e:	3302      	adds	r3, #2
 8001e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	f003 0303 	and.w	r3, r3, #3
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	220f      	movs	r2, #15
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	43db      	mvns	r3, r3
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e32:	d02b      	beq.n	8001e8c <HAL_GPIO_Init+0x210>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a52      	ldr	r2, [pc, #328]	; (8001f80 <HAL_GPIO_Init+0x304>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d025      	beq.n	8001e88 <HAL_GPIO_Init+0x20c>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a51      	ldr	r2, [pc, #324]	; (8001f84 <HAL_GPIO_Init+0x308>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d01f      	beq.n	8001e84 <HAL_GPIO_Init+0x208>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a50      	ldr	r2, [pc, #320]	; (8001f88 <HAL_GPIO_Init+0x30c>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d019      	beq.n	8001e80 <HAL_GPIO_Init+0x204>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a4f      	ldr	r2, [pc, #316]	; (8001f8c <HAL_GPIO_Init+0x310>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d013      	beq.n	8001e7c <HAL_GPIO_Init+0x200>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a4e      	ldr	r2, [pc, #312]	; (8001f90 <HAL_GPIO_Init+0x314>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d00d      	beq.n	8001e78 <HAL_GPIO_Init+0x1fc>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a4d      	ldr	r2, [pc, #308]	; (8001f94 <HAL_GPIO_Init+0x318>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d007      	beq.n	8001e74 <HAL_GPIO_Init+0x1f8>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a4c      	ldr	r2, [pc, #304]	; (8001f98 <HAL_GPIO_Init+0x31c>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d101      	bne.n	8001e70 <HAL_GPIO_Init+0x1f4>
 8001e6c:	2307      	movs	r3, #7
 8001e6e:	e00e      	b.n	8001e8e <HAL_GPIO_Init+0x212>
 8001e70:	2308      	movs	r3, #8
 8001e72:	e00c      	b.n	8001e8e <HAL_GPIO_Init+0x212>
 8001e74:	2306      	movs	r3, #6
 8001e76:	e00a      	b.n	8001e8e <HAL_GPIO_Init+0x212>
 8001e78:	2305      	movs	r3, #5
 8001e7a:	e008      	b.n	8001e8e <HAL_GPIO_Init+0x212>
 8001e7c:	2304      	movs	r3, #4
 8001e7e:	e006      	b.n	8001e8e <HAL_GPIO_Init+0x212>
 8001e80:	2303      	movs	r3, #3
 8001e82:	e004      	b.n	8001e8e <HAL_GPIO_Init+0x212>
 8001e84:	2302      	movs	r3, #2
 8001e86:	e002      	b.n	8001e8e <HAL_GPIO_Init+0x212>
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e000      	b.n	8001e8e <HAL_GPIO_Init+0x212>
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	f002 0203 	and.w	r2, r2, #3
 8001e94:	0092      	lsls	r2, r2, #2
 8001e96:	4093      	lsls	r3, r2
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e9e:	4937      	ldr	r1, [pc, #220]	; (8001f7c <HAL_GPIO_Init+0x300>)
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	089b      	lsrs	r3, r3, #2
 8001ea4:	3302      	adds	r3, #2
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001eac:	4b3b      	ldr	r3, [pc, #236]	; (8001f9c <HAL_GPIO_Init+0x320>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d003      	beq.n	8001ed0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ed0:	4a32      	ldr	r2, [pc, #200]	; (8001f9c <HAL_GPIO_Init+0x320>)
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ed6:	4b31      	ldr	r3, [pc, #196]	; (8001f9c <HAL_GPIO_Init+0x320>)
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001efa:	4a28      	ldr	r2, [pc, #160]	; (8001f9c <HAL_GPIO_Init+0x320>)
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f00:	4b26      	ldr	r3, [pc, #152]	; (8001f9c <HAL_GPIO_Init+0x320>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d003      	beq.n	8001f24 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f24:	4a1d      	ldr	r2, [pc, #116]	; (8001f9c <HAL_GPIO_Init+0x320>)
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f2a:	4b1c      	ldr	r3, [pc, #112]	; (8001f9c <HAL_GPIO_Init+0x320>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	43db      	mvns	r3, r3
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	4013      	ands	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f4e:	4a13      	ldr	r2, [pc, #76]	; (8001f9c <HAL_GPIO_Init+0x320>)
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	3301      	adds	r3, #1
 8001f58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	fa22 f303 	lsr.w	r3, r2, r3
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f47f ae91 	bne.w	8001c8c <HAL_GPIO_Init+0x10>
  }
}
 8001f6a:	bf00      	nop
 8001f6c:	bf00      	nop
 8001f6e:	371c      	adds	r7, #28
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	40010000 	.word	0x40010000
 8001f80:	48000400 	.word	0x48000400
 8001f84:	48000800 	.word	0x48000800
 8001f88:	48000c00 	.word	0x48000c00
 8001f8c:	48001000 	.word	0x48001000
 8001f90:	48001400 	.word	0x48001400
 8001f94:	48001800 	.word	0x48001800
 8001f98:	48001c00 	.word	0x48001c00
 8001f9c:	40010400 	.word	0x40010400

08001fa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	460b      	mov	r3, r1
 8001faa:	807b      	strh	r3, [r7, #2]
 8001fac:	4613      	mov	r3, r2
 8001fae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fb0:	787b      	ldrb	r3, [r7, #1]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fb6:	887a      	ldrh	r2, [r7, #2]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fbc:	e002      	b.n	8001fc4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fbe:	887a      	ldrh	r2, [r7, #2]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e08d      	b.n	80020fe <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d106      	bne.n	8001ffc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7fe ffae 	bl	8000f58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2224      	movs	r2, #36	; 0x24
 8002000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f022 0201 	bic.w	r2, r2, #1
 8002012:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002020:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002030:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d107      	bne.n	800204a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689a      	ldr	r2, [r3, #8]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	e006      	b.n	8002058 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689a      	ldr	r2, [r3, #8]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002056:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	2b02      	cmp	r3, #2
 800205e:	d108      	bne.n	8002072 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	685a      	ldr	r2, [r3, #4]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800206e:	605a      	str	r2, [r3, #4]
 8002070:	e007      	b.n	8002082 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	685a      	ldr	r2, [r3, #4]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002080:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	6812      	ldr	r2, [r2, #0]
 800208c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002090:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002094:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68da      	ldr	r2, [r3, #12]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	691a      	ldr	r2, [r3, #16]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	430a      	orrs	r2, r1
 80020be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	69d9      	ldr	r1, [r3, #28]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a1a      	ldr	r2, [r3, #32]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	430a      	orrs	r2, r1
 80020ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f042 0201 	orr.w	r2, r2, #1
 80020de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2220      	movs	r2, #32
 80020ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
 800210e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002116:	b2db      	uxtb	r3, r3
 8002118:	2b20      	cmp	r3, #32
 800211a:	d138      	bne.n	800218e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002122:	2b01      	cmp	r3, #1
 8002124:	d101      	bne.n	800212a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002126:	2302      	movs	r3, #2
 8002128:	e032      	b.n	8002190 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2201      	movs	r2, #1
 800212e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2224      	movs	r2, #36	; 0x24
 8002136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 0201 	bic.w	r2, r2, #1
 8002148:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002158:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6819      	ldr	r1, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f042 0201 	orr.w	r2, r2, #1
 8002178:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2220      	movs	r2, #32
 800217e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800218a:	2300      	movs	r3, #0
 800218c:	e000      	b.n	8002190 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800218e:	2302      	movs	r3, #2
  }
}
 8002190:	4618      	mov	r0, r3
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b20      	cmp	r3, #32
 80021b0:	d139      	bne.n	8002226 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d101      	bne.n	80021c0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80021bc:	2302      	movs	r3, #2
 80021be:	e033      	b.n	8002228 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2224      	movs	r2, #36	; 0x24
 80021cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f022 0201 	bic.w	r2, r2, #1
 80021de:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80021ee:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	021b      	lsls	r3, r3, #8
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f042 0201 	orr.w	r2, r2, #1
 8002210:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2220      	movs	r2, #32
 8002216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002222:	2300      	movs	r3, #0
 8002224:	e000      	b.n	8002228 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002226:	2302      	movs	r3, #2
  }
}
 8002228:	4618      	mov	r0, r3
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002238:	4b0d      	ldr	r3, [pc, #52]	; (8002270 <HAL_PWREx_GetVoltageRange+0x3c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002240:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002244:	d102      	bne.n	800224c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002246:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800224a:	e00b      	b.n	8002264 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800224c:	4b08      	ldr	r3, [pc, #32]	; (8002270 <HAL_PWREx_GetVoltageRange+0x3c>)
 800224e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800225a:	d102      	bne.n	8002262 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800225c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002260:	e000      	b.n	8002264 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002262:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002264:	4618      	mov	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	40007000 	.word	0x40007000

08002274 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d141      	bne.n	8002306 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002282:	4b4b      	ldr	r3, [pc, #300]	; (80023b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800228a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800228e:	d131      	bne.n	80022f4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002290:	4b47      	ldr	r3, [pc, #284]	; (80023b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002292:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002296:	4a46      	ldr	r2, [pc, #280]	; (80023b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002298:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800229c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022a0:	4b43      	ldr	r3, [pc, #268]	; (80023b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022a8:	4a41      	ldr	r2, [pc, #260]	; (80023b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80022b0:	4b40      	ldr	r3, [pc, #256]	; (80023b4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2232      	movs	r2, #50	; 0x32
 80022b6:	fb02 f303 	mul.w	r3, r2, r3
 80022ba:	4a3f      	ldr	r2, [pc, #252]	; (80023b8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80022bc:	fba2 2303 	umull	r2, r3, r2, r3
 80022c0:	0c9b      	lsrs	r3, r3, #18
 80022c2:	3301      	adds	r3, #1
 80022c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022c6:	e002      	b.n	80022ce <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	3b01      	subs	r3, #1
 80022cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022ce:	4b38      	ldr	r3, [pc, #224]	; (80023b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022da:	d102      	bne.n	80022e2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f2      	bne.n	80022c8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022e2:	4b33      	ldr	r3, [pc, #204]	; (80023b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022ee:	d158      	bne.n	80023a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e057      	b.n	80023a4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022f4:	4b2e      	ldr	r3, [pc, #184]	; (80023b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022fa:	4a2d      	ldr	r2, [pc, #180]	; (80023b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002300:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002304:	e04d      	b.n	80023a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800230c:	d141      	bne.n	8002392 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800230e:	4b28      	ldr	r3, [pc, #160]	; (80023b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002316:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800231a:	d131      	bne.n	8002380 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800231c:	4b24      	ldr	r3, [pc, #144]	; (80023b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800231e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002322:	4a23      	ldr	r2, [pc, #140]	; (80023b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002328:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800232c:	4b20      	ldr	r3, [pc, #128]	; (80023b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002334:	4a1e      	ldr	r2, [pc, #120]	; (80023b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002336:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800233a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800233c:	4b1d      	ldr	r3, [pc, #116]	; (80023b4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2232      	movs	r2, #50	; 0x32
 8002342:	fb02 f303 	mul.w	r3, r2, r3
 8002346:	4a1c      	ldr	r2, [pc, #112]	; (80023b8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002348:	fba2 2303 	umull	r2, r3, r2, r3
 800234c:	0c9b      	lsrs	r3, r3, #18
 800234e:	3301      	adds	r3, #1
 8002350:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002352:	e002      	b.n	800235a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	3b01      	subs	r3, #1
 8002358:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800235a:	4b15      	ldr	r3, [pc, #84]	; (80023b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002362:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002366:	d102      	bne.n	800236e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f2      	bne.n	8002354 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800236e:	4b10      	ldr	r3, [pc, #64]	; (80023b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800237a:	d112      	bne.n	80023a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e011      	b.n	80023a4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002380:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002382:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002386:	4a0a      	ldr	r2, [pc, #40]	; (80023b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800238c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002390:	e007      	b.n	80023a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002392:	4b07      	ldr	r3, [pc, #28]	; (80023b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800239a:	4a05      	ldr	r2, [pc, #20]	; (80023b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800239c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023a0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	40007000 	.word	0x40007000
 80023b4:	20000000 	.word	0x20000000
 80023b8:	431bde83 	.word	0x431bde83

080023bc <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80023c0:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	4a04      	ldr	r2, [pc, #16]	; (80023d8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80023c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023ca:	6053      	str	r3, [r2, #4]
}
 80023cc:	bf00      	nop
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	40007000 	.word	0x40007000

080023dc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b088      	sub	sp, #32
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d102      	bne.n	80023f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	f000 bc08 	b.w	8002c00 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023f0:	4b96      	ldr	r3, [pc, #600]	; (800264c <HAL_RCC_OscConfig+0x270>)
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f003 030c 	and.w	r3, r3, #12
 80023f8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023fa:	4b94      	ldr	r3, [pc, #592]	; (800264c <HAL_RCC_OscConfig+0x270>)
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	f003 0303 	and.w	r3, r3, #3
 8002402:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0310 	and.w	r3, r3, #16
 800240c:	2b00      	cmp	r3, #0
 800240e:	f000 80e4 	beq.w	80025da <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d007      	beq.n	8002428 <HAL_RCC_OscConfig+0x4c>
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	2b0c      	cmp	r3, #12
 800241c:	f040 808b 	bne.w	8002536 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	2b01      	cmp	r3, #1
 8002424:	f040 8087 	bne.w	8002536 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002428:	4b88      	ldr	r3, [pc, #544]	; (800264c <HAL_RCC_OscConfig+0x270>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d005      	beq.n	8002440 <HAL_RCC_OscConfig+0x64>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e3df      	b.n	8002c00 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a1a      	ldr	r2, [r3, #32]
 8002444:	4b81      	ldr	r3, [pc, #516]	; (800264c <HAL_RCC_OscConfig+0x270>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0308 	and.w	r3, r3, #8
 800244c:	2b00      	cmp	r3, #0
 800244e:	d004      	beq.n	800245a <HAL_RCC_OscConfig+0x7e>
 8002450:	4b7e      	ldr	r3, [pc, #504]	; (800264c <HAL_RCC_OscConfig+0x270>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002458:	e005      	b.n	8002466 <HAL_RCC_OscConfig+0x8a>
 800245a:	4b7c      	ldr	r3, [pc, #496]	; (800264c <HAL_RCC_OscConfig+0x270>)
 800245c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002460:	091b      	lsrs	r3, r3, #4
 8002462:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002466:	4293      	cmp	r3, r2
 8002468:	d223      	bcs.n	80024b2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a1b      	ldr	r3, [r3, #32]
 800246e:	4618      	mov	r0, r3
 8002470:	f000 fdca 	bl	8003008 <RCC_SetFlashLatencyFromMSIRange>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e3c0      	b.n	8002c00 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800247e:	4b73      	ldr	r3, [pc, #460]	; (800264c <HAL_RCC_OscConfig+0x270>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a72      	ldr	r2, [pc, #456]	; (800264c <HAL_RCC_OscConfig+0x270>)
 8002484:	f043 0308 	orr.w	r3, r3, #8
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	4b70      	ldr	r3, [pc, #448]	; (800264c <HAL_RCC_OscConfig+0x270>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	496d      	ldr	r1, [pc, #436]	; (800264c <HAL_RCC_OscConfig+0x270>)
 8002498:	4313      	orrs	r3, r2
 800249a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800249c:	4b6b      	ldr	r3, [pc, #428]	; (800264c <HAL_RCC_OscConfig+0x270>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	69db      	ldr	r3, [r3, #28]
 80024a8:	021b      	lsls	r3, r3, #8
 80024aa:	4968      	ldr	r1, [pc, #416]	; (800264c <HAL_RCC_OscConfig+0x270>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	604b      	str	r3, [r1, #4]
 80024b0:	e025      	b.n	80024fe <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024b2:	4b66      	ldr	r3, [pc, #408]	; (800264c <HAL_RCC_OscConfig+0x270>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a65      	ldr	r2, [pc, #404]	; (800264c <HAL_RCC_OscConfig+0x270>)
 80024b8:	f043 0308 	orr.w	r3, r3, #8
 80024bc:	6013      	str	r3, [r2, #0]
 80024be:	4b63      	ldr	r3, [pc, #396]	; (800264c <HAL_RCC_OscConfig+0x270>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	4960      	ldr	r1, [pc, #384]	; (800264c <HAL_RCC_OscConfig+0x270>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024d0:	4b5e      	ldr	r3, [pc, #376]	; (800264c <HAL_RCC_OscConfig+0x270>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	69db      	ldr	r3, [r3, #28]
 80024dc:	021b      	lsls	r3, r3, #8
 80024de:	495b      	ldr	r1, [pc, #364]	; (800264c <HAL_RCC_OscConfig+0x270>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d109      	bne.n	80024fe <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f000 fd8a 	bl	8003008 <RCC_SetFlashLatencyFromMSIRange>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e380      	b.n	8002c00 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024fe:	f000 fcc1 	bl	8002e84 <HAL_RCC_GetSysClockFreq>
 8002502:	4602      	mov	r2, r0
 8002504:	4b51      	ldr	r3, [pc, #324]	; (800264c <HAL_RCC_OscConfig+0x270>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	091b      	lsrs	r3, r3, #4
 800250a:	f003 030f 	and.w	r3, r3, #15
 800250e:	4950      	ldr	r1, [pc, #320]	; (8002650 <HAL_RCC_OscConfig+0x274>)
 8002510:	5ccb      	ldrb	r3, [r1, r3]
 8002512:	f003 031f 	and.w	r3, r3, #31
 8002516:	fa22 f303 	lsr.w	r3, r2, r3
 800251a:	4a4e      	ldr	r2, [pc, #312]	; (8002654 <HAL_RCC_OscConfig+0x278>)
 800251c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800251e:	4b4e      	ldr	r3, [pc, #312]	; (8002658 <HAL_RCC_OscConfig+0x27c>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff f88e 	bl	8001644 <HAL_InitTick>
 8002528:	4603      	mov	r3, r0
 800252a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800252c:	7bfb      	ldrb	r3, [r7, #15]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d052      	beq.n	80025d8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002532:	7bfb      	ldrb	r3, [r7, #15]
 8002534:	e364      	b.n	8002c00 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d032      	beq.n	80025a4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800253e:	4b43      	ldr	r3, [pc, #268]	; (800264c <HAL_RCC_OscConfig+0x270>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a42      	ldr	r2, [pc, #264]	; (800264c <HAL_RCC_OscConfig+0x270>)
 8002544:	f043 0301 	orr.w	r3, r3, #1
 8002548:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800254a:	f7ff f8cb 	bl	80016e4 <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002552:	f7ff f8c7 	bl	80016e4 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e34d      	b.n	8002c00 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002564:	4b39      	ldr	r3, [pc, #228]	; (800264c <HAL_RCC_OscConfig+0x270>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d0f0      	beq.n	8002552 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002570:	4b36      	ldr	r3, [pc, #216]	; (800264c <HAL_RCC_OscConfig+0x270>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a35      	ldr	r2, [pc, #212]	; (800264c <HAL_RCC_OscConfig+0x270>)
 8002576:	f043 0308 	orr.w	r3, r3, #8
 800257a:	6013      	str	r3, [r2, #0]
 800257c:	4b33      	ldr	r3, [pc, #204]	; (800264c <HAL_RCC_OscConfig+0x270>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	4930      	ldr	r1, [pc, #192]	; (800264c <HAL_RCC_OscConfig+0x270>)
 800258a:	4313      	orrs	r3, r2
 800258c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800258e:	4b2f      	ldr	r3, [pc, #188]	; (800264c <HAL_RCC_OscConfig+0x270>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	021b      	lsls	r3, r3, #8
 800259c:	492b      	ldr	r1, [pc, #172]	; (800264c <HAL_RCC_OscConfig+0x270>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	604b      	str	r3, [r1, #4]
 80025a2:	e01a      	b.n	80025da <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80025a4:	4b29      	ldr	r3, [pc, #164]	; (800264c <HAL_RCC_OscConfig+0x270>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a28      	ldr	r2, [pc, #160]	; (800264c <HAL_RCC_OscConfig+0x270>)
 80025aa:	f023 0301 	bic.w	r3, r3, #1
 80025ae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025b0:	f7ff f898 	bl	80016e4 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025b8:	f7ff f894 	bl	80016e4 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e31a      	b.n	8002c00 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025ca:	4b20      	ldr	r3, [pc, #128]	; (800264c <HAL_RCC_OscConfig+0x270>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1f0      	bne.n	80025b8 <HAL_RCC_OscConfig+0x1dc>
 80025d6:	e000      	b.n	80025da <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d073      	beq.n	80026ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	2b08      	cmp	r3, #8
 80025ea:	d005      	beq.n	80025f8 <HAL_RCC_OscConfig+0x21c>
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	2b0c      	cmp	r3, #12
 80025f0:	d10e      	bne.n	8002610 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	2b03      	cmp	r3, #3
 80025f6:	d10b      	bne.n	8002610 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025f8:	4b14      	ldr	r3, [pc, #80]	; (800264c <HAL_RCC_OscConfig+0x270>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d063      	beq.n	80026cc <HAL_RCC_OscConfig+0x2f0>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d15f      	bne.n	80026cc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e2f7      	b.n	8002c00 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002618:	d106      	bne.n	8002628 <HAL_RCC_OscConfig+0x24c>
 800261a:	4b0c      	ldr	r3, [pc, #48]	; (800264c <HAL_RCC_OscConfig+0x270>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a0b      	ldr	r2, [pc, #44]	; (800264c <HAL_RCC_OscConfig+0x270>)
 8002620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002624:	6013      	str	r3, [r2, #0]
 8002626:	e025      	b.n	8002674 <HAL_RCC_OscConfig+0x298>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002630:	d114      	bne.n	800265c <HAL_RCC_OscConfig+0x280>
 8002632:	4b06      	ldr	r3, [pc, #24]	; (800264c <HAL_RCC_OscConfig+0x270>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a05      	ldr	r2, [pc, #20]	; (800264c <HAL_RCC_OscConfig+0x270>)
 8002638:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800263c:	6013      	str	r3, [r2, #0]
 800263e:	4b03      	ldr	r3, [pc, #12]	; (800264c <HAL_RCC_OscConfig+0x270>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a02      	ldr	r2, [pc, #8]	; (800264c <HAL_RCC_OscConfig+0x270>)
 8002644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002648:	6013      	str	r3, [r2, #0]
 800264a:	e013      	b.n	8002674 <HAL_RCC_OscConfig+0x298>
 800264c:	40021000 	.word	0x40021000
 8002650:	0800a9dc 	.word	0x0800a9dc
 8002654:	20000000 	.word	0x20000000
 8002658:	20000004 	.word	0x20000004
 800265c:	4ba0      	ldr	r3, [pc, #640]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a9f      	ldr	r2, [pc, #636]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 8002662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002666:	6013      	str	r3, [r2, #0]
 8002668:	4b9d      	ldr	r3, [pc, #628]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a9c      	ldr	r2, [pc, #624]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 800266e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002672:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d013      	beq.n	80026a4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267c:	f7ff f832 	bl	80016e4 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002684:	f7ff f82e 	bl	80016e4 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b64      	cmp	r3, #100	; 0x64
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e2b4      	b.n	8002c00 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002696:	4b92      	ldr	r3, [pc, #584]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0f0      	beq.n	8002684 <HAL_RCC_OscConfig+0x2a8>
 80026a2:	e014      	b.n	80026ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a4:	f7ff f81e 	bl	80016e4 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026ac:	f7ff f81a 	bl	80016e4 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b64      	cmp	r3, #100	; 0x64
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e2a0      	b.n	8002c00 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026be:	4b88      	ldr	r3, [pc, #544]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1f0      	bne.n	80026ac <HAL_RCC_OscConfig+0x2d0>
 80026ca:	e000      	b.n	80026ce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d060      	beq.n	800279c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	2b04      	cmp	r3, #4
 80026de:	d005      	beq.n	80026ec <HAL_RCC_OscConfig+0x310>
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	2b0c      	cmp	r3, #12
 80026e4:	d119      	bne.n	800271a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d116      	bne.n	800271a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026ec:	4b7c      	ldr	r3, [pc, #496]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d005      	beq.n	8002704 <HAL_RCC_OscConfig+0x328>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d101      	bne.n	8002704 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e27d      	b.n	8002c00 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002704:	4b76      	ldr	r3, [pc, #472]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	061b      	lsls	r3, r3, #24
 8002712:	4973      	ldr	r1, [pc, #460]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 8002714:	4313      	orrs	r3, r2
 8002716:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002718:	e040      	b.n	800279c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d023      	beq.n	800276a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002722:	4b6f      	ldr	r3, [pc, #444]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a6e      	ldr	r2, [pc, #440]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 8002728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800272c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272e:	f7fe ffd9 	bl	80016e4 <HAL_GetTick>
 8002732:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002734:	e008      	b.n	8002748 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002736:	f7fe ffd5 	bl	80016e4 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e25b      	b.n	8002c00 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002748:	4b65      	ldr	r3, [pc, #404]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002750:	2b00      	cmp	r3, #0
 8002752:	d0f0      	beq.n	8002736 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002754:	4b62      	ldr	r3, [pc, #392]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	061b      	lsls	r3, r3, #24
 8002762:	495f      	ldr	r1, [pc, #380]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 8002764:	4313      	orrs	r3, r2
 8002766:	604b      	str	r3, [r1, #4]
 8002768:	e018      	b.n	800279c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800276a:	4b5d      	ldr	r3, [pc, #372]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a5c      	ldr	r2, [pc, #368]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 8002770:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002774:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002776:	f7fe ffb5 	bl	80016e4 <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800277c:	e008      	b.n	8002790 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800277e:	f7fe ffb1 	bl	80016e4 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e237      	b.n	8002c00 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002790:	4b53      	ldr	r3, [pc, #332]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1f0      	bne.n	800277e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0308 	and.w	r3, r3, #8
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d03c      	beq.n	8002822 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d01c      	beq.n	80027ea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027b0:	4b4b      	ldr	r3, [pc, #300]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 80027b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027b6:	4a4a      	ldr	r2, [pc, #296]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 80027b8:	f043 0301 	orr.w	r3, r3, #1
 80027bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c0:	f7fe ff90 	bl	80016e4 <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027c8:	f7fe ff8c 	bl	80016e4 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e212      	b.n	8002c00 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027da:	4b41      	ldr	r3, [pc, #260]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 80027dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d0ef      	beq.n	80027c8 <HAL_RCC_OscConfig+0x3ec>
 80027e8:	e01b      	b.n	8002822 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027ea:	4b3d      	ldr	r3, [pc, #244]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 80027ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027f0:	4a3b      	ldr	r2, [pc, #236]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 80027f2:	f023 0301 	bic.w	r3, r3, #1
 80027f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027fa:	f7fe ff73 	bl	80016e4 <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002800:	e008      	b.n	8002814 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002802:	f7fe ff6f 	bl	80016e4 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e1f5      	b.n	8002c00 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002814:	4b32      	ldr	r3, [pc, #200]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 8002816:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1ef      	bne.n	8002802 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0304 	and.w	r3, r3, #4
 800282a:	2b00      	cmp	r3, #0
 800282c:	f000 80a6 	beq.w	800297c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002830:	2300      	movs	r3, #0
 8002832:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002834:	4b2a      	ldr	r3, [pc, #168]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 8002836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d10d      	bne.n	800285c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002840:	4b27      	ldr	r3, [pc, #156]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 8002842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002844:	4a26      	ldr	r2, [pc, #152]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 8002846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800284a:	6593      	str	r3, [r2, #88]	; 0x58
 800284c:	4b24      	ldr	r3, [pc, #144]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 800284e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002854:	60bb      	str	r3, [r7, #8]
 8002856:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002858:	2301      	movs	r3, #1
 800285a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800285c:	4b21      	ldr	r3, [pc, #132]	; (80028e4 <HAL_RCC_OscConfig+0x508>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002864:	2b00      	cmp	r3, #0
 8002866:	d118      	bne.n	800289a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002868:	4b1e      	ldr	r3, [pc, #120]	; (80028e4 <HAL_RCC_OscConfig+0x508>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a1d      	ldr	r2, [pc, #116]	; (80028e4 <HAL_RCC_OscConfig+0x508>)
 800286e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002872:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002874:	f7fe ff36 	bl	80016e4 <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800287c:	f7fe ff32 	bl	80016e4 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e1b8      	b.n	8002c00 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800288e:	4b15      	ldr	r3, [pc, #84]	; (80028e4 <HAL_RCC_OscConfig+0x508>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002896:	2b00      	cmp	r3, #0
 8002898:	d0f0      	beq.n	800287c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d108      	bne.n	80028b4 <HAL_RCC_OscConfig+0x4d8>
 80028a2:	4b0f      	ldr	r3, [pc, #60]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 80028a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a8:	4a0d      	ldr	r2, [pc, #52]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 80028aa:	f043 0301 	orr.w	r3, r3, #1
 80028ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028b2:	e029      	b.n	8002908 <HAL_RCC_OscConfig+0x52c>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	2b05      	cmp	r3, #5
 80028ba:	d115      	bne.n	80028e8 <HAL_RCC_OscConfig+0x50c>
 80028bc:	4b08      	ldr	r3, [pc, #32]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 80028be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c2:	4a07      	ldr	r2, [pc, #28]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 80028c4:	f043 0304 	orr.w	r3, r3, #4
 80028c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028cc:	4b04      	ldr	r3, [pc, #16]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 80028ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d2:	4a03      	ldr	r2, [pc, #12]	; (80028e0 <HAL_RCC_OscConfig+0x504>)
 80028d4:	f043 0301 	orr.w	r3, r3, #1
 80028d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028dc:	e014      	b.n	8002908 <HAL_RCC_OscConfig+0x52c>
 80028de:	bf00      	nop
 80028e0:	40021000 	.word	0x40021000
 80028e4:	40007000 	.word	0x40007000
 80028e8:	4b9d      	ldr	r3, [pc, #628]	; (8002b60 <HAL_RCC_OscConfig+0x784>)
 80028ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ee:	4a9c      	ldr	r2, [pc, #624]	; (8002b60 <HAL_RCC_OscConfig+0x784>)
 80028f0:	f023 0301 	bic.w	r3, r3, #1
 80028f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028f8:	4b99      	ldr	r3, [pc, #612]	; (8002b60 <HAL_RCC_OscConfig+0x784>)
 80028fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028fe:	4a98      	ldr	r2, [pc, #608]	; (8002b60 <HAL_RCC_OscConfig+0x784>)
 8002900:	f023 0304 	bic.w	r3, r3, #4
 8002904:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d016      	beq.n	800293e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002910:	f7fe fee8 	bl	80016e4 <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002916:	e00a      	b.n	800292e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002918:	f7fe fee4 	bl	80016e4 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	f241 3288 	movw	r2, #5000	; 0x1388
 8002926:	4293      	cmp	r3, r2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e168      	b.n	8002c00 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800292e:	4b8c      	ldr	r3, [pc, #560]	; (8002b60 <HAL_RCC_OscConfig+0x784>)
 8002930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d0ed      	beq.n	8002918 <HAL_RCC_OscConfig+0x53c>
 800293c:	e015      	b.n	800296a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800293e:	f7fe fed1 	bl	80016e4 <HAL_GetTick>
 8002942:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002944:	e00a      	b.n	800295c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002946:	f7fe fecd 	bl	80016e4 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	f241 3288 	movw	r2, #5000	; 0x1388
 8002954:	4293      	cmp	r3, r2
 8002956:	d901      	bls.n	800295c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e151      	b.n	8002c00 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800295c:	4b80      	ldr	r3, [pc, #512]	; (8002b60 <HAL_RCC_OscConfig+0x784>)
 800295e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1ed      	bne.n	8002946 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800296a:	7ffb      	ldrb	r3, [r7, #31]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d105      	bne.n	800297c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002970:	4b7b      	ldr	r3, [pc, #492]	; (8002b60 <HAL_RCC_OscConfig+0x784>)
 8002972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002974:	4a7a      	ldr	r2, [pc, #488]	; (8002b60 <HAL_RCC_OscConfig+0x784>)
 8002976:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800297a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0320 	and.w	r3, r3, #32
 8002984:	2b00      	cmp	r3, #0
 8002986:	d03c      	beq.n	8002a02 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298c:	2b00      	cmp	r3, #0
 800298e:	d01c      	beq.n	80029ca <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002990:	4b73      	ldr	r3, [pc, #460]	; (8002b60 <HAL_RCC_OscConfig+0x784>)
 8002992:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002996:	4a72      	ldr	r2, [pc, #456]	; (8002b60 <HAL_RCC_OscConfig+0x784>)
 8002998:	f043 0301 	orr.w	r3, r3, #1
 800299c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a0:	f7fe fea0 	bl	80016e4 <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029a8:	f7fe fe9c 	bl	80016e4 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e122      	b.n	8002c00 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80029ba:	4b69      	ldr	r3, [pc, #420]	; (8002b60 <HAL_RCC_OscConfig+0x784>)
 80029bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d0ef      	beq.n	80029a8 <HAL_RCC_OscConfig+0x5cc>
 80029c8:	e01b      	b.n	8002a02 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80029ca:	4b65      	ldr	r3, [pc, #404]	; (8002b60 <HAL_RCC_OscConfig+0x784>)
 80029cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029d0:	4a63      	ldr	r2, [pc, #396]	; (8002b60 <HAL_RCC_OscConfig+0x784>)
 80029d2:	f023 0301 	bic.w	r3, r3, #1
 80029d6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029da:	f7fe fe83 	bl	80016e4 <HAL_GetTick>
 80029de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80029e0:	e008      	b.n	80029f4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029e2:	f7fe fe7f 	bl	80016e4 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d901      	bls.n	80029f4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e105      	b.n	8002c00 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80029f4:	4b5a      	ldr	r3, [pc, #360]	; (8002b60 <HAL_RCC_OscConfig+0x784>)
 80029f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1ef      	bne.n	80029e2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f000 80f9 	beq.w	8002bfe <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	f040 80cf 	bne.w	8002bb4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a16:	4b52      	ldr	r3, [pc, #328]	; (8002b60 <HAL_RCC_OscConfig+0x784>)
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	f003 0203 	and.w	r2, r3, #3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d12c      	bne.n	8002a84 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a34:	3b01      	subs	r3, #1
 8002a36:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d123      	bne.n	8002a84 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a46:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d11b      	bne.n	8002a84 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a56:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d113      	bne.n	8002a84 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a66:	085b      	lsrs	r3, r3, #1
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d109      	bne.n	8002a84 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	085b      	lsrs	r3, r3, #1
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d071      	beq.n	8002b68 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	2b0c      	cmp	r3, #12
 8002a88:	d068      	beq.n	8002b5c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a8a:	4b35      	ldr	r3, [pc, #212]	; (8002b60 <HAL_RCC_OscConfig+0x784>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d105      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a96:	4b32      	ldr	r3, [pc, #200]	; (8002b60 <HAL_RCC_OscConfig+0x784>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e0ac      	b.n	8002c00 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002aa6:	4b2e      	ldr	r3, [pc, #184]	; (8002b60 <HAL_RCC_OscConfig+0x784>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a2d      	ldr	r2, [pc, #180]	; (8002b60 <HAL_RCC_OscConfig+0x784>)
 8002aac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ab0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ab2:	f7fe fe17 	bl	80016e4 <HAL_GetTick>
 8002ab6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ab8:	e008      	b.n	8002acc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aba:	f7fe fe13 	bl	80016e4 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d901      	bls.n	8002acc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e099      	b.n	8002c00 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002acc:	4b24      	ldr	r3, [pc, #144]	; (8002b60 <HAL_RCC_OscConfig+0x784>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1f0      	bne.n	8002aba <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ad8:	4b21      	ldr	r3, [pc, #132]	; (8002b60 <HAL_RCC_OscConfig+0x784>)
 8002ada:	68da      	ldr	r2, [r3, #12]
 8002adc:	4b21      	ldr	r3, [pc, #132]	; (8002b64 <HAL_RCC_OscConfig+0x788>)
 8002ade:	4013      	ands	r3, r2
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002ae8:	3a01      	subs	r2, #1
 8002aea:	0112      	lsls	r2, r2, #4
 8002aec:	4311      	orrs	r1, r2
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002af2:	0212      	lsls	r2, r2, #8
 8002af4:	4311      	orrs	r1, r2
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002afa:	0852      	lsrs	r2, r2, #1
 8002afc:	3a01      	subs	r2, #1
 8002afe:	0552      	lsls	r2, r2, #21
 8002b00:	4311      	orrs	r1, r2
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b06:	0852      	lsrs	r2, r2, #1
 8002b08:	3a01      	subs	r2, #1
 8002b0a:	0652      	lsls	r2, r2, #25
 8002b0c:	4311      	orrs	r1, r2
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b12:	06d2      	lsls	r2, r2, #27
 8002b14:	430a      	orrs	r2, r1
 8002b16:	4912      	ldr	r1, [pc, #72]	; (8002b60 <HAL_RCC_OscConfig+0x784>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b1c:	4b10      	ldr	r3, [pc, #64]	; (8002b60 <HAL_RCC_OscConfig+0x784>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a0f      	ldr	r2, [pc, #60]	; (8002b60 <HAL_RCC_OscConfig+0x784>)
 8002b22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b26:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b28:	4b0d      	ldr	r3, [pc, #52]	; (8002b60 <HAL_RCC_OscConfig+0x784>)
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	4a0c      	ldr	r2, [pc, #48]	; (8002b60 <HAL_RCC_OscConfig+0x784>)
 8002b2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b32:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b34:	f7fe fdd6 	bl	80016e4 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b3c:	f7fe fdd2 	bl	80016e4 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e058      	b.n	8002c00 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b4e:	4b04      	ldr	r3, [pc, #16]	; (8002b60 <HAL_RCC_OscConfig+0x784>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d0f0      	beq.n	8002b3c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b5a:	e050      	b.n	8002bfe <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e04f      	b.n	8002c00 <HAL_RCC_OscConfig+0x824>
 8002b60:	40021000 	.word	0x40021000
 8002b64:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b68:	4b27      	ldr	r3, [pc, #156]	; (8002c08 <HAL_RCC_OscConfig+0x82c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d144      	bne.n	8002bfe <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b74:	4b24      	ldr	r3, [pc, #144]	; (8002c08 <HAL_RCC_OscConfig+0x82c>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a23      	ldr	r2, [pc, #140]	; (8002c08 <HAL_RCC_OscConfig+0x82c>)
 8002b7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b7e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b80:	4b21      	ldr	r3, [pc, #132]	; (8002c08 <HAL_RCC_OscConfig+0x82c>)
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	4a20      	ldr	r2, [pc, #128]	; (8002c08 <HAL_RCC_OscConfig+0x82c>)
 8002b86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b8a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b8c:	f7fe fdaa 	bl	80016e4 <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b94:	f7fe fda6 	bl	80016e4 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e02c      	b.n	8002c00 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ba6:	4b18      	ldr	r3, [pc, #96]	; (8002c08 <HAL_RCC_OscConfig+0x82c>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d0f0      	beq.n	8002b94 <HAL_RCC_OscConfig+0x7b8>
 8002bb2:	e024      	b.n	8002bfe <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	2b0c      	cmp	r3, #12
 8002bb8:	d01f      	beq.n	8002bfa <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bba:	4b13      	ldr	r3, [pc, #76]	; (8002c08 <HAL_RCC_OscConfig+0x82c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a12      	ldr	r2, [pc, #72]	; (8002c08 <HAL_RCC_OscConfig+0x82c>)
 8002bc0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc6:	f7fe fd8d 	bl	80016e4 <HAL_GetTick>
 8002bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bcc:	e008      	b.n	8002be0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bce:	f7fe fd89 	bl	80016e4 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e00f      	b.n	8002c00 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002be0:	4b09      	ldr	r3, [pc, #36]	; (8002c08 <HAL_RCC_OscConfig+0x82c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1f0      	bne.n	8002bce <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002bec:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <HAL_RCC_OscConfig+0x82c>)
 8002bee:	68da      	ldr	r2, [r3, #12]
 8002bf0:	4905      	ldr	r1, [pc, #20]	; (8002c08 <HAL_RCC_OscConfig+0x82c>)
 8002bf2:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <HAL_RCC_OscConfig+0x830>)
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	60cb      	str	r3, [r1, #12]
 8002bf8:	e001      	b.n	8002bfe <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e000      	b.n	8002c00 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3720      	adds	r7, #32
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	feeefffc 	.word	0xfeeefffc

08002c10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d101      	bne.n	8002c28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e11d      	b.n	8002e64 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c28:	4b90      	ldr	r3, [pc, #576]	; (8002e6c <HAL_RCC_ClockConfig+0x25c>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 030f 	and.w	r3, r3, #15
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d910      	bls.n	8002c58 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c36:	4b8d      	ldr	r3, [pc, #564]	; (8002e6c <HAL_RCC_ClockConfig+0x25c>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f023 020f 	bic.w	r2, r3, #15
 8002c3e:	498b      	ldr	r1, [pc, #556]	; (8002e6c <HAL_RCC_ClockConfig+0x25c>)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c46:	4b89      	ldr	r3, [pc, #548]	; (8002e6c <HAL_RCC_ClockConfig+0x25c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 030f 	and.w	r3, r3, #15
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d001      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e105      	b.n	8002e64 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d010      	beq.n	8002c86 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	4b81      	ldr	r3, [pc, #516]	; (8002e70 <HAL_RCC_ClockConfig+0x260>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d908      	bls.n	8002c86 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c74:	4b7e      	ldr	r3, [pc, #504]	; (8002e70 <HAL_RCC_ClockConfig+0x260>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	497b      	ldr	r1, [pc, #492]	; (8002e70 <HAL_RCC_ClockConfig+0x260>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d079      	beq.n	8002d86 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	2b03      	cmp	r3, #3
 8002c98:	d11e      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c9a:	4b75      	ldr	r3, [pc, #468]	; (8002e70 <HAL_RCC_ClockConfig+0x260>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e0dc      	b.n	8002e64 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002caa:	f000 fa07 	bl	80030bc <RCC_GetSysClockFreqFromPLLSource>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	4a70      	ldr	r2, [pc, #448]	; (8002e74 <HAL_RCC_ClockConfig+0x264>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d946      	bls.n	8002d44 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002cb6:	4b6e      	ldr	r3, [pc, #440]	; (8002e70 <HAL_RCC_ClockConfig+0x260>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d140      	bne.n	8002d44 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002cc2:	4b6b      	ldr	r3, [pc, #428]	; (8002e70 <HAL_RCC_ClockConfig+0x260>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cca:	4a69      	ldr	r2, [pc, #420]	; (8002e70 <HAL_RCC_ClockConfig+0x260>)
 8002ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cd0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002cd2:	2380      	movs	r3, #128	; 0x80
 8002cd4:	617b      	str	r3, [r7, #20]
 8002cd6:	e035      	b.n	8002d44 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d107      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ce0:	4b63      	ldr	r3, [pc, #396]	; (8002e70 <HAL_RCC_ClockConfig+0x260>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d115      	bne.n	8002d18 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e0b9      	b.n	8002e64 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d107      	bne.n	8002d08 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cf8:	4b5d      	ldr	r3, [pc, #372]	; (8002e70 <HAL_RCC_ClockConfig+0x260>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d109      	bne.n	8002d18 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e0ad      	b.n	8002e64 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d08:	4b59      	ldr	r3, [pc, #356]	; (8002e70 <HAL_RCC_ClockConfig+0x260>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e0a5      	b.n	8002e64 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002d18:	f000 f8b4 	bl	8002e84 <HAL_RCC_GetSysClockFreq>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	4a55      	ldr	r2, [pc, #340]	; (8002e74 <HAL_RCC_ClockConfig+0x264>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d90f      	bls.n	8002d44 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002d24:	4b52      	ldr	r3, [pc, #328]	; (8002e70 <HAL_RCC_ClockConfig+0x260>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d109      	bne.n	8002d44 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d30:	4b4f      	ldr	r3, [pc, #316]	; (8002e70 <HAL_RCC_ClockConfig+0x260>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d38:	4a4d      	ldr	r2, [pc, #308]	; (8002e70 <HAL_RCC_ClockConfig+0x260>)
 8002d3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d3e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002d40:	2380      	movs	r3, #128	; 0x80
 8002d42:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d44:	4b4a      	ldr	r3, [pc, #296]	; (8002e70 <HAL_RCC_ClockConfig+0x260>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f023 0203 	bic.w	r2, r3, #3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	4947      	ldr	r1, [pc, #284]	; (8002e70 <HAL_RCC_ClockConfig+0x260>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d56:	f7fe fcc5 	bl	80016e4 <HAL_GetTick>
 8002d5a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d5c:	e00a      	b.n	8002d74 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d5e:	f7fe fcc1 	bl	80016e4 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e077      	b.n	8002e64 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d74:	4b3e      	ldr	r3, [pc, #248]	; (8002e70 <HAL_RCC_ClockConfig+0x260>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f003 020c 	and.w	r2, r3, #12
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d1eb      	bne.n	8002d5e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	2b80      	cmp	r3, #128	; 0x80
 8002d8a:	d105      	bne.n	8002d98 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002d8c:	4b38      	ldr	r3, [pc, #224]	; (8002e70 <HAL_RCC_ClockConfig+0x260>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	4a37      	ldr	r2, [pc, #220]	; (8002e70 <HAL_RCC_ClockConfig+0x260>)
 8002d92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d96:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d010      	beq.n	8002dc6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	4b31      	ldr	r3, [pc, #196]	; (8002e70 <HAL_RCC_ClockConfig+0x260>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d208      	bcs.n	8002dc6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002db4:	4b2e      	ldr	r3, [pc, #184]	; (8002e70 <HAL_RCC_ClockConfig+0x260>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	492b      	ldr	r1, [pc, #172]	; (8002e70 <HAL_RCC_ClockConfig+0x260>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dc6:	4b29      	ldr	r3, [pc, #164]	; (8002e6c <HAL_RCC_ClockConfig+0x25c>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 030f 	and.w	r3, r3, #15
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d210      	bcs.n	8002df6 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dd4:	4b25      	ldr	r3, [pc, #148]	; (8002e6c <HAL_RCC_ClockConfig+0x25c>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f023 020f 	bic.w	r2, r3, #15
 8002ddc:	4923      	ldr	r1, [pc, #140]	; (8002e6c <HAL_RCC_ClockConfig+0x25c>)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de4:	4b21      	ldr	r3, [pc, #132]	; (8002e6c <HAL_RCC_ClockConfig+0x25c>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 030f 	and.w	r3, r3, #15
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d001      	beq.n	8002df6 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e036      	b.n	8002e64 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0304 	and.w	r3, r3, #4
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d008      	beq.n	8002e14 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e02:	4b1b      	ldr	r3, [pc, #108]	; (8002e70 <HAL_RCC_ClockConfig+0x260>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	4918      	ldr	r1, [pc, #96]	; (8002e70 <HAL_RCC_ClockConfig+0x260>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0308 	and.w	r3, r3, #8
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d009      	beq.n	8002e34 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e20:	4b13      	ldr	r3, [pc, #76]	; (8002e70 <HAL_RCC_ClockConfig+0x260>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	4910      	ldr	r1, [pc, #64]	; (8002e70 <HAL_RCC_ClockConfig+0x260>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e34:	f000 f826 	bl	8002e84 <HAL_RCC_GetSysClockFreq>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	4b0d      	ldr	r3, [pc, #52]	; (8002e70 <HAL_RCC_ClockConfig+0x260>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	091b      	lsrs	r3, r3, #4
 8002e40:	f003 030f 	and.w	r3, r3, #15
 8002e44:	490c      	ldr	r1, [pc, #48]	; (8002e78 <HAL_RCC_ClockConfig+0x268>)
 8002e46:	5ccb      	ldrb	r3, [r1, r3]
 8002e48:	f003 031f 	and.w	r3, r3, #31
 8002e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e50:	4a0a      	ldr	r2, [pc, #40]	; (8002e7c <HAL_RCC_ClockConfig+0x26c>)
 8002e52:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e54:	4b0a      	ldr	r3, [pc, #40]	; (8002e80 <HAL_RCC_ClockConfig+0x270>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7fe fbf3 	bl	8001644 <HAL_InitTick>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	73fb      	strb	r3, [r7, #15]

  return status;
 8002e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3718      	adds	r7, #24
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	40022000 	.word	0x40022000
 8002e70:	40021000 	.word	0x40021000
 8002e74:	04c4b400 	.word	0x04c4b400
 8002e78:	0800a9dc 	.word	0x0800a9dc
 8002e7c:	20000000 	.word	0x20000000
 8002e80:	20000004 	.word	0x20000004

08002e84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b089      	sub	sp, #36	; 0x24
 8002e88:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61fb      	str	r3, [r7, #28]
 8002e8e:	2300      	movs	r3, #0
 8002e90:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e92:	4b3e      	ldr	r3, [pc, #248]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 030c 	and.w	r3, r3, #12
 8002e9a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e9c:	4b3b      	ldr	r3, [pc, #236]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	f003 0303 	and.w	r3, r3, #3
 8002ea4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d005      	beq.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x34>
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	2b0c      	cmp	r3, #12
 8002eb0:	d121      	bne.n	8002ef6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d11e      	bne.n	8002ef6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002eb8:	4b34      	ldr	r3, [pc, #208]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0308 	and.w	r3, r3, #8
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d107      	bne.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ec4:	4b31      	ldr	r3, [pc, #196]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ec6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eca:	0a1b      	lsrs	r3, r3, #8
 8002ecc:	f003 030f 	and.w	r3, r3, #15
 8002ed0:	61fb      	str	r3, [r7, #28]
 8002ed2:	e005      	b.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ed4:	4b2d      	ldr	r3, [pc, #180]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	091b      	lsrs	r3, r3, #4
 8002eda:	f003 030f 	and.w	r3, r3, #15
 8002ede:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ee0:	4a2b      	ldr	r2, [pc, #172]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ee8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10d      	bne.n	8002f0c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ef4:	e00a      	b.n	8002f0c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	2b04      	cmp	r3, #4
 8002efa:	d102      	bne.n	8002f02 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002efc:	4b25      	ldr	r3, [pc, #148]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x110>)
 8002efe:	61bb      	str	r3, [r7, #24]
 8002f00:	e004      	b.n	8002f0c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	2b08      	cmp	r3, #8
 8002f06:	d101      	bne.n	8002f0c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f08:	4b22      	ldr	r3, [pc, #136]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f0a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	2b0c      	cmp	r3, #12
 8002f10:	d134      	bne.n	8002f7c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f12:	4b1e      	ldr	r3, [pc, #120]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	f003 0303 	and.w	r3, r3, #3
 8002f1a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d003      	beq.n	8002f2a <HAL_RCC_GetSysClockFreq+0xa6>
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	2b03      	cmp	r3, #3
 8002f26:	d003      	beq.n	8002f30 <HAL_RCC_GetSysClockFreq+0xac>
 8002f28:	e005      	b.n	8002f36 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f2a:	4b1a      	ldr	r3, [pc, #104]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f2c:	617b      	str	r3, [r7, #20]
      break;
 8002f2e:	e005      	b.n	8002f3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f30:	4b18      	ldr	r3, [pc, #96]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f32:	617b      	str	r3, [r7, #20]
      break;
 8002f34:	e002      	b.n	8002f3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	617b      	str	r3, [r7, #20]
      break;
 8002f3a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f3c:	4b13      	ldr	r3, [pc, #76]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	091b      	lsrs	r3, r3, #4
 8002f42:	f003 030f 	and.w	r3, r3, #15
 8002f46:	3301      	adds	r3, #1
 8002f48:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f4a:	4b10      	ldr	r3, [pc, #64]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	0a1b      	lsrs	r3, r3, #8
 8002f50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	fb03 f202 	mul.w	r2, r3, r2
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f60:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f62:	4b0a      	ldr	r3, [pc, #40]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	0e5b      	lsrs	r3, r3, #25
 8002f68:	f003 0303 	and.w	r3, r3, #3
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f7a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f7c:	69bb      	ldr	r3, [r7, #24]
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3724      	adds	r7, #36	; 0x24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	0800a9f4 	.word	0x0800a9f4
 8002f94:	00f42400 	.word	0x00f42400

08002f98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f9c:	4b03      	ldr	r3, [pc, #12]	; (8002fac <HAL_RCC_GetHCLKFreq+0x14>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	20000000 	.word	0x20000000

08002fb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002fb4:	f7ff fff0 	bl	8002f98 <HAL_RCC_GetHCLKFreq>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	4b06      	ldr	r3, [pc, #24]	; (8002fd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	0a1b      	lsrs	r3, r3, #8
 8002fc0:	f003 0307 	and.w	r3, r3, #7
 8002fc4:	4904      	ldr	r1, [pc, #16]	; (8002fd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002fc6:	5ccb      	ldrb	r3, [r1, r3]
 8002fc8:	f003 031f 	and.w	r3, r3, #31
 8002fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	0800a9ec 	.word	0x0800a9ec

08002fdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002fe0:	f7ff ffda 	bl	8002f98 <HAL_RCC_GetHCLKFreq>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	4b06      	ldr	r3, [pc, #24]	; (8003000 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	0adb      	lsrs	r3, r3, #11
 8002fec:	f003 0307 	and.w	r3, r3, #7
 8002ff0:	4904      	ldr	r1, [pc, #16]	; (8003004 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ff2:	5ccb      	ldrb	r3, [r1, r3]
 8002ff4:	f003 031f 	and.w	r3, r3, #31
 8002ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	40021000 	.word	0x40021000
 8003004:	0800a9ec 	.word	0x0800a9ec

08003008 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b086      	sub	sp, #24
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003010:	2300      	movs	r3, #0
 8003012:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003014:	4b27      	ldr	r3, [pc, #156]	; (80030b4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d003      	beq.n	8003028 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003020:	f7ff f908 	bl	8002234 <HAL_PWREx_GetVoltageRange>
 8003024:	6178      	str	r0, [r7, #20]
 8003026:	e014      	b.n	8003052 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003028:	4b22      	ldr	r3, [pc, #136]	; (80030b4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800302a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800302c:	4a21      	ldr	r2, [pc, #132]	; (80030b4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800302e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003032:	6593      	str	r3, [r2, #88]	; 0x58
 8003034:	4b1f      	ldr	r3, [pc, #124]	; (80030b4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800303c:	60fb      	str	r3, [r7, #12]
 800303e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003040:	f7ff f8f8 	bl	8002234 <HAL_PWREx_GetVoltageRange>
 8003044:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003046:	4b1b      	ldr	r3, [pc, #108]	; (80030b4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800304a:	4a1a      	ldr	r2, [pc, #104]	; (80030b4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800304c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003050:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003058:	d10b      	bne.n	8003072 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2b80      	cmp	r3, #128	; 0x80
 800305e:	d913      	bls.n	8003088 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2ba0      	cmp	r3, #160	; 0xa0
 8003064:	d902      	bls.n	800306c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003066:	2302      	movs	r3, #2
 8003068:	613b      	str	r3, [r7, #16]
 800306a:	e00d      	b.n	8003088 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800306c:	2301      	movs	r3, #1
 800306e:	613b      	str	r3, [r7, #16]
 8003070:	e00a      	b.n	8003088 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2b7f      	cmp	r3, #127	; 0x7f
 8003076:	d902      	bls.n	800307e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003078:	2302      	movs	r3, #2
 800307a:	613b      	str	r3, [r7, #16]
 800307c:	e004      	b.n	8003088 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2b70      	cmp	r3, #112	; 0x70
 8003082:	d101      	bne.n	8003088 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003084:	2301      	movs	r3, #1
 8003086:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003088:	4b0b      	ldr	r3, [pc, #44]	; (80030b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f023 020f 	bic.w	r2, r3, #15
 8003090:	4909      	ldr	r1, [pc, #36]	; (80030b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	4313      	orrs	r3, r2
 8003096:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003098:	4b07      	ldr	r3, [pc, #28]	; (80030b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 030f 	and.w	r3, r3, #15
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d001      	beq.n	80030aa <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e000      	b.n	80030ac <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3718      	adds	r7, #24
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	40021000 	.word	0x40021000
 80030b8:	40022000 	.word	0x40022000

080030bc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	b087      	sub	sp, #28
 80030c0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030c2:	4b2d      	ldr	r3, [pc, #180]	; (8003178 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	f003 0303 	and.w	r3, r3, #3
 80030ca:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2b03      	cmp	r3, #3
 80030d0:	d00b      	beq.n	80030ea <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2b03      	cmp	r3, #3
 80030d6:	d825      	bhi.n	8003124 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d008      	beq.n	80030f0 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d11f      	bne.n	8003124 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80030e4:	4b25      	ldr	r3, [pc, #148]	; (800317c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80030e6:	613b      	str	r3, [r7, #16]
    break;
 80030e8:	e01f      	b.n	800312a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80030ea:	4b24      	ldr	r3, [pc, #144]	; (800317c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80030ec:	613b      	str	r3, [r7, #16]
    break;
 80030ee:	e01c      	b.n	800312a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80030f0:	4b21      	ldr	r3, [pc, #132]	; (8003178 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0308 	and.w	r3, r3, #8
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d107      	bne.n	800310c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80030fc:	4b1e      	ldr	r3, [pc, #120]	; (8003178 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80030fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003102:	0a1b      	lsrs	r3, r3, #8
 8003104:	f003 030f 	and.w	r3, r3, #15
 8003108:	617b      	str	r3, [r7, #20]
 800310a:	e005      	b.n	8003118 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800310c:	4b1a      	ldr	r3, [pc, #104]	; (8003178 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	091b      	lsrs	r3, r3, #4
 8003112:	f003 030f 	and.w	r3, r3, #15
 8003116:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003118:	4a19      	ldr	r2, [pc, #100]	; (8003180 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003120:	613b      	str	r3, [r7, #16]
    break;
 8003122:	e002      	b.n	800312a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003124:	2300      	movs	r3, #0
 8003126:	613b      	str	r3, [r7, #16]
    break;
 8003128:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800312a:	4b13      	ldr	r3, [pc, #76]	; (8003178 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	091b      	lsrs	r3, r3, #4
 8003130:	f003 030f 	and.w	r3, r3, #15
 8003134:	3301      	adds	r3, #1
 8003136:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003138:	4b0f      	ldr	r3, [pc, #60]	; (8003178 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	0a1b      	lsrs	r3, r3, #8
 800313e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	fb03 f202 	mul.w	r2, r3, r2
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	fbb2 f3f3 	udiv	r3, r2, r3
 800314e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003150:	4b09      	ldr	r3, [pc, #36]	; (8003178 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	0e5b      	lsrs	r3, r3, #25
 8003156:	f003 0303 	and.w	r3, r3, #3
 800315a:	3301      	adds	r3, #1
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	fbb2 f3f3 	udiv	r3, r2, r3
 8003168:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800316a:	683b      	ldr	r3, [r7, #0]
}
 800316c:	4618      	mov	r0, r3
 800316e:	371c      	adds	r7, #28
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr
 8003178:	40021000 	.word	0x40021000
 800317c:	00f42400 	.word	0x00f42400
 8003180:	0800a9f4 	.word	0x0800a9f4

08003184 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800318c:	2300      	movs	r3, #0
 800318e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003190:	2300      	movs	r3, #0
 8003192:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800319c:	2b00      	cmp	r3, #0
 800319e:	d040      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031a4:	2b80      	cmp	r3, #128	; 0x80
 80031a6:	d02a      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80031a8:	2b80      	cmp	r3, #128	; 0x80
 80031aa:	d825      	bhi.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80031ac:	2b60      	cmp	r3, #96	; 0x60
 80031ae:	d026      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80031b0:	2b60      	cmp	r3, #96	; 0x60
 80031b2:	d821      	bhi.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80031b4:	2b40      	cmp	r3, #64	; 0x40
 80031b6:	d006      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80031b8:	2b40      	cmp	r3, #64	; 0x40
 80031ba:	d81d      	bhi.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d009      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80031c0:	2b20      	cmp	r3, #32
 80031c2:	d010      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80031c4:	e018      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80031c6:	4b89      	ldr	r3, [pc, #548]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	4a88      	ldr	r2, [pc, #544]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031d2:	e015      	b.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	3304      	adds	r3, #4
 80031d8:	2100      	movs	r1, #0
 80031da:	4618      	mov	r0, r3
 80031dc:	f001 fa82 	bl	80046e4 <RCCEx_PLLSAI1_Config>
 80031e0:	4603      	mov	r3, r0
 80031e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031e4:	e00c      	b.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	3320      	adds	r3, #32
 80031ea:	2100      	movs	r1, #0
 80031ec:	4618      	mov	r0, r3
 80031ee:	f001 fb6d 	bl	80048cc <RCCEx_PLLSAI2_Config>
 80031f2:	4603      	mov	r3, r0
 80031f4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031f6:	e003      	b.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	74fb      	strb	r3, [r7, #19]
      break;
 80031fc:	e000      	b.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80031fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003200:	7cfb      	ldrb	r3, [r7, #19]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10b      	bne.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003206:	4b79      	ldr	r3, [pc, #484]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003208:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800320c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003214:	4975      	ldr	r1, [pc, #468]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003216:	4313      	orrs	r3, r2
 8003218:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800321c:	e001      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800321e:	7cfb      	ldrb	r3, [r7, #19]
 8003220:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d047      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003232:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003236:	d030      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800323c:	d82a      	bhi.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800323e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003242:	d02a      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003244:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003248:	d824      	bhi.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800324a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800324e:	d008      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003250:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003254:	d81e      	bhi.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00a      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800325a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800325e:	d010      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003260:	e018      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003262:	4b62      	ldr	r3, [pc, #392]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	4a61      	ldr	r2, [pc, #388]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800326c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800326e:	e015      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3304      	adds	r3, #4
 8003274:	2100      	movs	r1, #0
 8003276:	4618      	mov	r0, r3
 8003278:	f001 fa34 	bl	80046e4 <RCCEx_PLLSAI1_Config>
 800327c:	4603      	mov	r3, r0
 800327e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003280:	e00c      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	3320      	adds	r3, #32
 8003286:	2100      	movs	r1, #0
 8003288:	4618      	mov	r0, r3
 800328a:	f001 fb1f 	bl	80048cc <RCCEx_PLLSAI2_Config>
 800328e:	4603      	mov	r3, r0
 8003290:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003292:	e003      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	74fb      	strb	r3, [r7, #19]
      break;
 8003298:	e000      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800329a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800329c:	7cfb      	ldrb	r3, [r7, #19]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10b      	bne.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80032a2:	4b52      	ldr	r3, [pc, #328]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b0:	494e      	ldr	r1, [pc, #312]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80032b8:	e001      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ba:	7cfb      	ldrb	r3, [r7, #19]
 80032bc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f000 809f 	beq.w	800340a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032cc:	2300      	movs	r3, #0
 80032ce:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80032d0:	4b46      	ldr	r3, [pc, #280]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d101      	bne.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80032dc:	2301      	movs	r3, #1
 80032de:	e000      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80032e0:	2300      	movs	r3, #0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00d      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032e6:	4b41      	ldr	r3, [pc, #260]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ea:	4a40      	ldr	r2, [pc, #256]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032f0:	6593      	str	r3, [r2, #88]	; 0x58
 80032f2:	4b3e      	ldr	r3, [pc, #248]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032fa:	60bb      	str	r3, [r7, #8]
 80032fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032fe:	2301      	movs	r3, #1
 8003300:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003302:	4b3b      	ldr	r3, [pc, #236]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a3a      	ldr	r2, [pc, #232]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800330c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800330e:	f7fe f9e9 	bl	80016e4 <HAL_GetTick>
 8003312:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003314:	e009      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003316:	f7fe f9e5 	bl	80016e4 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d902      	bls.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	74fb      	strb	r3, [r7, #19]
        break;
 8003328:	e005      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800332a:	4b31      	ldr	r3, [pc, #196]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003332:	2b00      	cmp	r3, #0
 8003334:	d0ef      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003336:	7cfb      	ldrb	r3, [r7, #19]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d15b      	bne.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800333c:	4b2b      	ldr	r3, [pc, #172]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800333e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003342:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003346:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d01f      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	429a      	cmp	r2, r3
 8003358:	d019      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800335a:	4b24      	ldr	r3, [pc, #144]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800335c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003360:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003364:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003366:	4b21      	ldr	r3, [pc, #132]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800336c:	4a1f      	ldr	r2, [pc, #124]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800336e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003372:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003376:	4b1d      	ldr	r3, [pc, #116]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800337c:	4a1b      	ldr	r2, [pc, #108]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800337e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003382:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003386:	4a19      	ldr	r2, [pc, #100]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	2b00      	cmp	r3, #0
 8003396:	d016      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003398:	f7fe f9a4 	bl	80016e4 <HAL_GetTick>
 800339c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800339e:	e00b      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033a0:	f7fe f9a0 	bl	80016e4 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d902      	bls.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	74fb      	strb	r3, [r7, #19]
            break;
 80033b6:	e006      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033b8:	4b0c      	ldr	r3, [pc, #48]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0ec      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80033c6:	7cfb      	ldrb	r3, [r7, #19]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d10c      	bne.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033cc:	4b07      	ldr	r3, [pc, #28]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033dc:	4903      	ldr	r1, [pc, #12]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80033e4:	e008      	b.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80033e6:	7cfb      	ldrb	r3, [r7, #19]
 80033e8:	74bb      	strb	r3, [r7, #18]
 80033ea:	e005      	b.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80033ec:	40021000 	.word	0x40021000
 80033f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033f4:	7cfb      	ldrb	r3, [r7, #19]
 80033f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033f8:	7c7b      	ldrb	r3, [r7, #17]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d105      	bne.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033fe:	4ba0      	ldr	r3, [pc, #640]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003402:	4a9f      	ldr	r2, [pc, #636]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003404:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003408:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00a      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003416:	4b9a      	ldr	r3, [pc, #616]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800341c:	f023 0203 	bic.w	r2, r3, #3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003424:	4996      	ldr	r1, [pc, #600]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003426:	4313      	orrs	r3, r2
 8003428:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00a      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003438:	4b91      	ldr	r3, [pc, #580]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800343a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800343e:	f023 020c 	bic.w	r2, r3, #12
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	498e      	ldr	r1, [pc, #568]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003448:	4313      	orrs	r3, r2
 800344a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0304 	and.w	r3, r3, #4
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00a      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800345a:	4b89      	ldr	r3, [pc, #548]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800345c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003460:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003468:	4985      	ldr	r1, [pc, #532]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800346a:	4313      	orrs	r3, r2
 800346c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0308 	and.w	r3, r3, #8
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00a      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800347c:	4b80      	ldr	r3, [pc, #512]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800347e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003482:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800348a:	497d      	ldr	r1, [pc, #500]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800348c:	4313      	orrs	r3, r2
 800348e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0310 	and.w	r3, r3, #16
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00a      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800349e:	4b78      	ldr	r3, [pc, #480]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ac:	4974      	ldr	r1, [pc, #464]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0320 	and.w	r3, r3, #32
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00a      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034c0:	4b6f      	ldr	r3, [pc, #444]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ce:	496c      	ldr	r1, [pc, #432]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00a      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034e2:	4b67      	ldr	r3, [pc, #412]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034f0:	4963      	ldr	r1, [pc, #396]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00a      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003504:	4b5e      	ldr	r3, [pc, #376]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003512:	495b      	ldr	r1, [pc, #364]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003514:	4313      	orrs	r3, r2
 8003516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00a      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003526:	4b56      	ldr	r3, [pc, #344]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800352c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003534:	4952      	ldr	r1, [pc, #328]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003536:	4313      	orrs	r3, r2
 8003538:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00a      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003548:	4b4d      	ldr	r3, [pc, #308]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800354a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800354e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003556:	494a      	ldr	r1, [pc, #296]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003558:	4313      	orrs	r3, r2
 800355a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00a      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800356a:	4b45      	ldr	r3, [pc, #276]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800356c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003570:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003578:	4941      	ldr	r1, [pc, #260]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800357a:	4313      	orrs	r3, r2
 800357c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00a      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800358c:	4b3c      	ldr	r3, [pc, #240]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800358e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003592:	f023 0203 	bic.w	r2, r3, #3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800359a:	4939      	ldr	r1, [pc, #228]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800359c:	4313      	orrs	r3, r2
 800359e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d028      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035ae:	4b34      	ldr	r3, [pc, #208]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035bc:	4930      	ldr	r1, [pc, #192]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035cc:	d106      	bne.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035ce:	4b2c      	ldr	r3, [pc, #176]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	4a2b      	ldr	r2, [pc, #172]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035d8:	60d3      	str	r3, [r2, #12]
 80035da:	e011      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035e4:	d10c      	bne.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	3304      	adds	r3, #4
 80035ea:	2101      	movs	r1, #1
 80035ec:	4618      	mov	r0, r3
 80035ee:	f001 f879 	bl	80046e4 <RCCEx_PLLSAI1_Config>
 80035f2:	4603      	mov	r3, r0
 80035f4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80035f6:	7cfb      	ldrb	r3, [r7, #19]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d001      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80035fc:	7cfb      	ldrb	r3, [r7, #19]
 80035fe:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d04d      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003610:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003614:	d108      	bne.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003616:	4b1a      	ldr	r3, [pc, #104]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003618:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800361c:	4a18      	ldr	r2, [pc, #96]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800361e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003622:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003626:	e012      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003628:	4b15      	ldr	r3, [pc, #84]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800362a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800362e:	4a14      	ldr	r2, [pc, #80]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003630:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003634:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003638:	4b11      	ldr	r3, [pc, #68]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800363a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800363e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003646:	490e      	ldr	r1, [pc, #56]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003648:	4313      	orrs	r3, r2
 800364a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003652:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003656:	d106      	bne.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003658:	4b09      	ldr	r3, [pc, #36]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	4a08      	ldr	r2, [pc, #32]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800365e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003662:	60d3      	str	r3, [r2, #12]
 8003664:	e020      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800366a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800366e:	d109      	bne.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003670:	4b03      	ldr	r3, [pc, #12]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	4a02      	ldr	r2, [pc, #8]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003676:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800367a:	60d3      	str	r3, [r2, #12]
 800367c:	e014      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800367e:	bf00      	nop
 8003680:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003688:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800368c:	d10c      	bne.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	3304      	adds	r3, #4
 8003692:	2101      	movs	r1, #1
 8003694:	4618      	mov	r0, r3
 8003696:	f001 f825 	bl	80046e4 <RCCEx_PLLSAI1_Config>
 800369a:	4603      	mov	r3, r0
 800369c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800369e:	7cfb      	ldrb	r3, [r7, #19]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d001      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80036a4:	7cfb      	ldrb	r3, [r7, #19]
 80036a6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d028      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036b4:	4b7a      	ldr	r3, [pc, #488]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80036b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036c2:	4977      	ldr	r1, [pc, #476]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036d2:	d106      	bne.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036d4:	4b72      	ldr	r3, [pc, #456]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	4a71      	ldr	r2, [pc, #452]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80036da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036de:	60d3      	str	r3, [r2, #12]
 80036e0:	e011      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036ea:	d10c      	bne.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	3304      	adds	r3, #4
 80036f0:	2101      	movs	r1, #1
 80036f2:	4618      	mov	r0, r3
 80036f4:	f000 fff6 	bl	80046e4 <RCCEx_PLLSAI1_Config>
 80036f8:	4603      	mov	r3, r0
 80036fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036fc:	7cfb      	ldrb	r3, [r7, #19]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003702:	7cfb      	ldrb	r3, [r7, #19]
 8003704:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d01e      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003712:	4b63      	ldr	r3, [pc, #396]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003718:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003722:	495f      	ldr	r1, [pc, #380]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003724:	4313      	orrs	r3, r2
 8003726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003730:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003734:	d10c      	bne.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	3304      	adds	r3, #4
 800373a:	2102      	movs	r1, #2
 800373c:	4618      	mov	r0, r3
 800373e:	f000 ffd1 	bl	80046e4 <RCCEx_PLLSAI1_Config>
 8003742:	4603      	mov	r3, r0
 8003744:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003746:	7cfb      	ldrb	r3, [r7, #19]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d001      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800374c:	7cfb      	ldrb	r3, [r7, #19]
 800374e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00b      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800375c:	4b50      	ldr	r3, [pc, #320]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800375e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003762:	f023 0204 	bic.w	r2, r3, #4
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800376c:	494c      	ldr	r1, [pc, #304]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800376e:	4313      	orrs	r3, r2
 8003770:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00b      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003780:	4b47      	ldr	r3, [pc, #284]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003782:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003786:	f023 0218 	bic.w	r2, r3, #24
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003790:	4943      	ldr	r1, [pc, #268]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003792:	4313      	orrs	r3, r2
 8003794:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d035      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80037a4:	4b3e      	ldr	r3, [pc, #248]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a3d      	ldr	r2, [pc, #244]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80037aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037b0:	f7fd ff98 	bl	80016e4 <HAL_GetTick>
 80037b4:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80037b6:	e009      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037b8:	f7fd ff94 	bl	80016e4 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d902      	bls.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	74fb      	strb	r3, [r7, #19]
        break;
 80037ca:	e005      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80037cc:	4b34      	ldr	r3, [pc, #208]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1ef      	bne.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 80037d8:	7cfb      	ldrb	r3, [r7, #19]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d113      	bne.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 80037de:	4b30      	ldr	r3, [pc, #192]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80037e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037ee:	492c      	ldr	r1, [pc, #176]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	3320      	adds	r3, #32
 80037fa:	2102      	movs	r1, #2
 80037fc:	4618      	mov	r0, r3
 80037fe:	f001 f865 	bl	80048cc <RCCEx_PLLSAI2_Config>
 8003802:	4603      	mov	r3, r0
 8003804:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8003806:	7cfb      	ldrb	r3, [r7, #19]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 800380c:	7cfb      	ldrb	r3, [r7, #19]
 800380e:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d01e      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800381c:	4b20      	ldr	r3, [pc, #128]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800381e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003822:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382c:	491c      	ldr	r1, [pc, #112]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800382e:	4313      	orrs	r3, r2
 8003830:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800383a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800383e:	d10c      	bne.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	3320      	adds	r3, #32
 8003844:	2101      	movs	r1, #1
 8003846:	4618      	mov	r0, r3
 8003848:	f001 f840 	bl	80048cc <RCCEx_PLLSAI2_Config>
 800384c:	4603      	mov	r3, r0
 800384e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003850:	7cfb      	ldrb	r3, [r7, #19]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 8003856:	7cfb      	ldrb	r3, [r7, #19]
 8003858:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d017      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003866:	4b0e      	ldr	r3, [pc, #56]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003868:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800386c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003876:	490a      	ldr	r1, [pc, #40]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003878:	4313      	orrs	r3, r2
 800387a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003884:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003888:	d105      	bne.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800388a:	4b05      	ldr	r3, [pc, #20]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	4a04      	ldr	r2, [pc, #16]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003890:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003894:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003896:	7cbb      	ldrb	r3, [r7, #18]
}
 8003898:	4618      	mov	r0, r3
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40021000 	.word	0x40021000

080038a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b088      	sub	sp, #32
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80038ac:	2300      	movs	r3, #0
 80038ae:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038b6:	d13e      	bne.n	8003936 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80038b8:	4bb6      	ldr	r3, [pc, #728]	; (8003b94 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80038ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038c2:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038ca:	d028      	beq.n	800391e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038d2:	f200 86f2 	bhi.w	80046ba <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038dc:	d005      	beq.n	80038ea <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038e4:	d00e      	beq.n	8003904 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80038e6:	f000 bee8 	b.w	80046ba <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80038ea:	4baa      	ldr	r3, [pc, #680]	; (8003b94 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80038ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f0:	f003 0302 	and.w	r3, r3, #2
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	f040 86e2 	bne.w	80046be <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
        frequency = LSE_VALUE;
 80038fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038fe:	61fb      	str	r3, [r7, #28]
      break;
 8003900:	f000 bedd 	b.w	80046be <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003904:	4ba3      	ldr	r3, [pc, #652]	; (8003b94 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b02      	cmp	r3, #2
 8003910:	f040 86d7 	bne.w	80046c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = LSI_VALUE;
 8003914:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8003918:	61fb      	str	r3, [r7, #28]
      break;
 800391a:	f000 bed2 	b.w	80046c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800391e:	4b9d      	ldr	r3, [pc, #628]	; (8003b94 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003926:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800392a:	f040 86cc 	bne.w	80046c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
        frequency = HSE_VALUE / 32U;
 800392e:	4b9a      	ldr	r3, [pc, #616]	; (8003b98 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003930:	61fb      	str	r3, [r7, #28]
      break;
 8003932:	f000 bec8 	b.w	80046c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003936:	4b97      	ldr	r3, [pc, #604]	; (8003b94 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	f003 0303 	and.w	r3, r3, #3
 800393e:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	2b03      	cmp	r3, #3
 8003944:	d036      	beq.n	80039b4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	2b03      	cmp	r3, #3
 800394a:	d840      	bhi.n	80039ce <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d003      	beq.n	800395a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	2b02      	cmp	r3, #2
 8003956:	d020      	beq.n	800399a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8003958:	e039      	b.n	80039ce <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800395a:	4b8e      	ldr	r3, [pc, #568]	; (8003b94 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b02      	cmp	r3, #2
 8003964:	d116      	bne.n	8003994 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003966:	4b8b      	ldr	r3, [pc, #556]	; (8003b94 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0308 	and.w	r3, r3, #8
 800396e:	2b00      	cmp	r3, #0
 8003970:	d005      	beq.n	800397e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8003972:	4b88      	ldr	r3, [pc, #544]	; (8003b94 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	091b      	lsrs	r3, r3, #4
 8003978:	f003 030f 	and.w	r3, r3, #15
 800397c:	e005      	b.n	800398a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800397e:	4b85      	ldr	r3, [pc, #532]	; (8003b94 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003980:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003984:	0a1b      	lsrs	r3, r3, #8
 8003986:	f003 030f 	and.w	r3, r3, #15
 800398a:	4a84      	ldr	r2, [pc, #528]	; (8003b9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800398c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003990:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003992:	e01f      	b.n	80039d4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003994:	2300      	movs	r3, #0
 8003996:	61bb      	str	r3, [r7, #24]
      break;
 8003998:	e01c      	b.n	80039d4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800399a:	4b7e      	ldr	r3, [pc, #504]	; (8003b94 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039a6:	d102      	bne.n	80039ae <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80039a8:	4b7d      	ldr	r3, [pc, #500]	; (8003ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80039aa:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80039ac:	e012      	b.n	80039d4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80039ae:	2300      	movs	r3, #0
 80039b0:	61bb      	str	r3, [r7, #24]
      break;
 80039b2:	e00f      	b.n	80039d4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80039b4:	4b77      	ldr	r3, [pc, #476]	; (8003b94 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039c0:	d102      	bne.n	80039c8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80039c2:	4b77      	ldr	r3, [pc, #476]	; (8003ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80039c4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80039c6:	e005      	b.n	80039d4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80039c8:	2300      	movs	r3, #0
 80039ca:	61bb      	str	r3, [r7, #24]
      break;
 80039cc:	e002      	b.n	80039d4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80039ce:	2300      	movs	r3, #0
 80039d0:	61bb      	str	r3, [r7, #24]
      break;
 80039d2:	bf00      	nop
    }

    switch(PeriphClk)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039da:	f000 8604 	beq.w	80045e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039e4:	f200 8671 	bhi.w	80046ca <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039ee:	f000 8467 	beq.w	80042c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039f8:	f200 8667 	bhi.w	80046ca <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a02:	f000 852f 	beq.w	8004464 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a0c:	f200 865d 	bhi.w	80046ca <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003a16:	f000 8185 	beq.w	8003d24 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003a20:	f200 8653 	bhi.w	80046ca <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a2a:	f000 80cb 	beq.w	8003bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a34:	f200 8649 	bhi.w	80046ca <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a3e:	f000 842e 	beq.w	800429e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a48:	f200 863f 	bhi.w	80046ca <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a52:	f000 83e2 	beq.w	800421a <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a5c:	f200 8635 	bhi.w	80046ca <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a66:	f000 80ad 	beq.w	8003bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a70:	f200 862b 	bhi.w	80046ca <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a7a:	f000 809b 	beq.w	8003bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a84:	f200 8621 	bhi.w	80046ca <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a8e:	f000 8089 	beq.w	8003ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a98:	f200 8617 	bhi.w	80046ca <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aa2:	f000 8552 	beq.w	800454a <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aac:	f200 860d 	bhi.w	80046ca <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ab6:	f000 84fe 	beq.w	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ac0:	f200 8603 	bhi.w	80046ca <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aca:	f000 849f 	beq.w	800440c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ad4:	f200 85f9 	bhi.w	80046ca <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b80      	cmp	r3, #128	; 0x80
 8003adc:	f000 846a 	beq.w	80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b80      	cmp	r3, #128	; 0x80
 8003ae4:	f200 85f1 	bhi.w	80046ca <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2b20      	cmp	r3, #32
 8003aec:	d84c      	bhi.n	8003b88 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f000 85ea 	beq.w	80046ca <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	3b01      	subs	r3, #1
 8003afa:	2b1f      	cmp	r3, #31
 8003afc:	f200 85e5 	bhi.w	80046ca <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003b00:	a201      	add	r2, pc, #4	; (adr r2, 8003b08 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8003b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b06:	bf00      	nop
 8003b08:	08003f19 	.word	0x08003f19
 8003b0c:	08003f87 	.word	0x08003f87
 8003b10:	080046cb 	.word	0x080046cb
 8003b14:	0800401b 	.word	0x0800401b
 8003b18:	080046cb 	.word	0x080046cb
 8003b1c:	080046cb 	.word	0x080046cb
 8003b20:	080046cb 	.word	0x080046cb
 8003b24:	08004093 	.word	0x08004093
 8003b28:	080046cb 	.word	0x080046cb
 8003b2c:	080046cb 	.word	0x080046cb
 8003b30:	080046cb 	.word	0x080046cb
 8003b34:	080046cb 	.word	0x080046cb
 8003b38:	080046cb 	.word	0x080046cb
 8003b3c:	080046cb 	.word	0x080046cb
 8003b40:	080046cb 	.word	0x080046cb
 8003b44:	08004117 	.word	0x08004117
 8003b48:	080046cb 	.word	0x080046cb
 8003b4c:	080046cb 	.word	0x080046cb
 8003b50:	080046cb 	.word	0x080046cb
 8003b54:	080046cb 	.word	0x080046cb
 8003b58:	080046cb 	.word	0x080046cb
 8003b5c:	080046cb 	.word	0x080046cb
 8003b60:	080046cb 	.word	0x080046cb
 8003b64:	080046cb 	.word	0x080046cb
 8003b68:	080046cb 	.word	0x080046cb
 8003b6c:	080046cb 	.word	0x080046cb
 8003b70:	080046cb 	.word	0x080046cb
 8003b74:	080046cb 	.word	0x080046cb
 8003b78:	080046cb 	.word	0x080046cb
 8003b7c:	080046cb 	.word	0x080046cb
 8003b80:	080046cb 	.word	0x080046cb
 8003b84:	08004199 	.word	0x08004199
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2b40      	cmp	r3, #64	; 0x40
 8003b8c:	f000 83e6 	beq.w	800435c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8003b90:	f000 bd9b 	b.w	80046ca <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003b94:	40021000 	.word	0x40021000
 8003b98:	0007a120 	.word	0x0007a120
 8003b9c:	0800a9f4 	.word	0x0800a9f4
 8003ba0:	00f42400 	.word	0x00f42400
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8003ba4:	69b9      	ldr	r1, [r7, #24]
 8003ba6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003baa:	f000 ff83 	bl	8004ab4 <RCCEx_GetSAIxPeriphCLKFreq>
 8003bae:	61f8      	str	r0, [r7, #28]
      break;
 8003bb0:	f000 bd8e 	b.w	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8003bb4:	69b9      	ldr	r1, [r7, #24]
 8003bb6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003bba:	f000 ff7b 	bl	8004ab4 <RCCEx_GetSAIxPeriphCLKFreq>
 8003bbe:	61f8      	str	r0, [r7, #28]
      break;
 8003bc0:	f000 bd86 	b.w	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8003bc4:	4b9a      	ldr	r3, [pc, #616]	; (8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bca:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8003bce:	60fb      	str	r3, [r7, #12]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003bd6:	d015      	beq.n	8003c04 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003bde:	f200 8092 	bhi.w	8003d06 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003be8:	d029      	beq.n	8003c3e <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bf0:	f200 8089 	bhi.w	8003d06 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d07b      	beq.n	8003cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c00:	d04a      	beq.n	8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
          break;
 8003c02:	e080      	b.n	8003d06 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003c04:	4b8a      	ldr	r3, [pc, #552]	; (8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d17d      	bne.n	8003d0c <HAL_RCCEx_GetPeriphCLKFreq+0x468>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003c10:	4b87      	ldr	r3, [pc, #540]	; (8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0308 	and.w	r3, r3, #8
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d005      	beq.n	8003c28 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
 8003c1c:	4b84      	ldr	r3, [pc, #528]	; (8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	091b      	lsrs	r3, r3, #4
 8003c22:	f003 030f 	and.w	r3, r3, #15
 8003c26:	e005      	b.n	8003c34 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 8003c28:	4b81      	ldr	r3, [pc, #516]	; (8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c2e:	0a1b      	lsrs	r3, r3, #8
 8003c30:	f003 030f 	and.w	r3, r3, #15
 8003c34:	4a7f      	ldr	r2, [pc, #508]	; (8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8003c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c3a:	61fb      	str	r3, [r7, #28]
          break;
 8003c3c:	e066      	b.n	8003d0c <HAL_RCCEx_GetPeriphCLKFreq+0x468>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003c3e:	4b7c      	ldr	r3, [pc, #496]	; (8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c4a:	d162      	bne.n	8003d12 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8003c4c:	4b78      	ldr	r3, [pc, #480]	; (8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c58:	d15b      	bne.n	8003d12 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003c5a:	4b75      	ldr	r3, [pc, #468]	; (8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	0a1b      	lsrs	r3, r3, #8
 8003c60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c64:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	68ba      	ldr	r2, [r7, #8]
 8003c6a:	fb03 f202 	mul.w	r2, r3, r2
 8003c6e:	4b70      	ldr	r3, [pc, #448]	; (8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	091b      	lsrs	r3, r3, #4
 8003c74:	f003 030f 	and.w	r3, r3, #15
 8003c78:	3301      	adds	r3, #1
 8003c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c7e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8003c80:	4b6b      	ldr	r3, [pc, #428]	; (8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	0d5b      	lsrs	r3, r3, #21
 8003c86:	f003 0303 	and.w	r3, r3, #3
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c94:	61fb      	str	r3, [r7, #28]
          break;
 8003c96:	e03c      	b.n	8003d12 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8003c98:	4b65      	ldr	r3, [pc, #404]	; (8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ca0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ca4:	d138      	bne.n	8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8003ca6:	4b62      	ldr	r3, [pc, #392]	; (8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cb2:	d131      	bne.n	8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003cb4:	4b5e      	ldr	r3, [pc, #376]	; (8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	0a1b      	lsrs	r3, r3, #8
 8003cba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cbe:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	68ba      	ldr	r2, [r7, #8]
 8003cc4:	fb03 f202 	mul.w	r2, r3, r2
 8003cc8:	4b59      	ldr	r3, [pc, #356]	; (8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	091b      	lsrs	r3, r3, #4
 8003cce:	f003 030f 	and.w	r3, r3, #15
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd8:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8003cda:	4b55      	ldr	r3, [pc, #340]	; (8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	0d5b      	lsrs	r3, r3, #21
 8003ce0:	f003 0303 	and.w	r3, r3, #3
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	005b      	lsls	r3, r3, #1
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cee:	61fb      	str	r3, [r7, #28]
          break;
 8003cf0:	e012      	b.n	8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8003cf2:	4b4f      	ldr	r3, [pc, #316]	; (8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003cf4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cf8:	f003 0302 	and.w	r3, r3, #2
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d10e      	bne.n	8003d1e <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI48_VALUE;
 8003d00:	4b4d      	ldr	r3, [pc, #308]	; (8003e38 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8003d02:	61fb      	str	r3, [r7, #28]
          break;
 8003d04:	e00b      	b.n	8003d1e <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          break;
 8003d06:	bf00      	nop
 8003d08:	f000 bce2 	b.w	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003d0c:	bf00      	nop
 8003d0e:	f000 bcdf 	b.w	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003d12:	bf00      	nop
 8003d14:	f000 bcdc 	b.w	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003d18:	bf00      	nop
 8003d1a:	f000 bcd9 	b.w	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003d1e:	bf00      	nop
        break;
 8003d20:	f000 bcd6 	b.w	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8003d24:	4b42      	ldr	r3, [pc, #264]	; (8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d32:	d13d      	bne.n	8003db0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003d34:	4b3e      	ldr	r3, [pc, #248]	; (8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d40:	f040 84c5 	bne.w	80046ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8003d44:	4b3a      	ldr	r3, [pc, #232]	; (8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d50:	f040 84bd 	bne.w	80046ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003d54:	4b36      	ldr	r3, [pc, #216]	; (8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	0a1b      	lsrs	r3, r3, #8
 8003d5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d5e:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	68ba      	ldr	r2, [r7, #8]
 8003d64:	fb03 f202 	mul.w	r2, r3, r2
 8003d68:	4b31      	ldr	r3, [pc, #196]	; (8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	091b      	lsrs	r3, r3, #4
 8003d6e:	f003 030f 	and.w	r3, r3, #15
 8003d72:	3301      	adds	r3, #1
 8003d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d78:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8003d7a:	4b2d      	ldr	r3, [pc, #180]	; (8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	0edb      	lsrs	r3, r3, #27
 8003d80:	f003 031f 	and.w	r3, r3, #31
 8003d84:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d10a      	bne.n	8003da2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8003d8c:	4b28      	ldr	r3, [pc, #160]	; (8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d002      	beq.n	8003d9e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
                pllp = 17U;
 8003d98:	2311      	movs	r3, #17
 8003d9a:	617b      	str	r3, [r7, #20]
 8003d9c:	e001      	b.n	8003da2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 7U;
 8003d9e:	2307      	movs	r3, #7
 8003da0:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003daa:	61fb      	str	r3, [r7, #28]
      break;
 8003dac:	f000 bc8f 	b.w	80046ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8003db0:	4b1f      	ldr	r3, [pc, #124]	; (8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db6:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8003dba:	60fb      	str	r3, [r7, #12]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003dc2:	d016      	beq.n	8003df2 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003dca:	f200 809b 	bhi.w	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dd4:	d032      	beq.n	8003e3c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ddc:	f200 8092 	bhi.w	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f000 8084 	beq.w	8003ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003dee:	d052      	beq.n	8003e96 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
          break;
 8003df0:	e088      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003df2:	4b0f      	ldr	r3, [pc, #60]	; (8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	f040 8084 	bne.w	8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003e00:	4b0b      	ldr	r3, [pc, #44]	; (8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0308 	and.w	r3, r3, #8
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d005      	beq.n	8003e18 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 8003e0c:	4b08      	ldr	r3, [pc, #32]	; (8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	091b      	lsrs	r3, r3, #4
 8003e12:	f003 030f 	and.w	r3, r3, #15
 8003e16:	e005      	b.n	8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8003e18:	4b05      	ldr	r3, [pc, #20]	; (8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003e1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e1e:	0a1b      	lsrs	r3, r3, #8
 8003e20:	f003 030f 	and.w	r3, r3, #15
 8003e24:	4a03      	ldr	r2, [pc, #12]	; (8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8003e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e2a:	61fb      	str	r3, [r7, #28]
          break;
 8003e2c:	e06c      	b.n	8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8003e2e:	bf00      	nop
 8003e30:	40021000 	.word	0x40021000
 8003e34:	0800a9f4 	.word	0x0800a9f4
 8003e38:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003e3c:	4ba5      	ldr	r3, [pc, #660]	; (80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e48:	d160      	bne.n	8003f0c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8003e4a:	4ba2      	ldr	r3, [pc, #648]	; (80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e56:	d159      	bne.n	8003f0c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003e58:	4b9e      	ldr	r3, [pc, #632]	; (80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	0a1b      	lsrs	r3, r3, #8
 8003e5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e62:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	68ba      	ldr	r2, [r7, #8]
 8003e68:	fb03 f202 	mul.w	r2, r3, r2
 8003e6c:	4b99      	ldr	r3, [pc, #612]	; (80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	091b      	lsrs	r3, r3, #4
 8003e72:	f003 030f 	and.w	r3, r3, #15
 8003e76:	3301      	adds	r3, #1
 8003e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e7c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8003e7e:	4b95      	ldr	r3, [pc, #596]	; (80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	0d5b      	lsrs	r3, r3, #21
 8003e84:	f003 0303 	and.w	r3, r3, #3
 8003e88:	3301      	adds	r3, #1
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e92:	61fb      	str	r3, [r7, #28]
          break;
 8003e94:	e03a      	b.n	8003f0c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8003e96:	4b8f      	ldr	r3, [pc, #572]	; (80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ea2:	d135      	bne.n	8003f10 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8003ea4:	4b8b      	ldr	r3, [pc, #556]	; (80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003eac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003eb0:	d12e      	bne.n	8003f10 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003eb2:	4b88      	ldr	r3, [pc, #544]	; (80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	0a1b      	lsrs	r3, r3, #8
 8003eb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ebc:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	68ba      	ldr	r2, [r7, #8]
 8003ec2:	fb03 f202 	mul.w	r2, r3, r2
 8003ec6:	4b83      	ldr	r3, [pc, #524]	; (80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	091b      	lsrs	r3, r3, #4
 8003ecc:	f003 030f 	and.w	r3, r3, #15
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed6:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8003ed8:	4b7e      	ldr	r3, [pc, #504]	; (80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	0d5b      	lsrs	r3, r3, #21
 8003ede:	f003 0303 	and.w	r3, r3, #3
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	005b      	lsls	r3, r3, #1
 8003ee6:	69ba      	ldr	r2, [r7, #24]
 8003ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eec:	61fb      	str	r3, [r7, #28]
          break;
 8003eee:	e00f      	b.n	8003f10 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8003ef0:	4b78      	ldr	r3, [pc, #480]	; (80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003ef2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d10a      	bne.n	8003f14 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            frequency = HSI48_VALUE;
 8003efe:	4b76      	ldr	r3, [pc, #472]	; (80040d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8003f00:	61fb      	str	r3, [r7, #28]
          break;
 8003f02:	e007      	b.n	8003f14 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          break;
 8003f04:	bf00      	nop
 8003f06:	e3e2      	b.n	80046ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8003f08:	bf00      	nop
 8003f0a:	e3e0      	b.n	80046ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8003f0c:	bf00      	nop
 8003f0e:	e3de      	b.n	80046ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8003f10:	bf00      	nop
 8003f12:	e3dc      	b.n	80046ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8003f14:	bf00      	nop
      break;
 8003f16:	e3da      	b.n	80046ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003f18:	4b6e      	ldr	r3, [pc, #440]	; (80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1e:	f003 0303 	and.w	r3, r3, #3
 8003f22:	60fb      	str	r3, [r7, #12]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2b03      	cmp	r3, #3
 8003f28:	d827      	bhi.n	8003f7a <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
 8003f2a:	a201      	add	r2, pc, #4	; (adr r2, 8003f30 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 8003f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f30:	08003f41 	.word	0x08003f41
 8003f34:	08003f49 	.word	0x08003f49
 8003f38:	08003f51 	.word	0x08003f51
 8003f3c:	08003f65 	.word	0x08003f65
          frequency = HAL_RCC_GetPCLK2Freq();
 8003f40:	f7ff f84c 	bl	8002fdc <HAL_RCC_GetPCLK2Freq>
 8003f44:	61f8      	str	r0, [r7, #28]
          break;
 8003f46:	e01d      	b.n	8003f84 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          frequency = HAL_RCC_GetSysClockFreq();
 8003f48:	f7fe ff9c 	bl	8002e84 <HAL_RCC_GetSysClockFreq>
 8003f4c:	61f8      	str	r0, [r7, #28]
          break;
 8003f4e:	e019      	b.n	8003f84 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003f50:	4b60      	ldr	r3, [pc, #384]	; (80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f5c:	d10f      	bne.n	8003f7e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
            frequency = HSI_VALUE;
 8003f5e:	4b5f      	ldr	r3, [pc, #380]	; (80040dc <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8003f60:	61fb      	str	r3, [r7, #28]
          break;
 8003f62:	e00c      	b.n	8003f7e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003f64:	4b5b      	ldr	r3, [pc, #364]	; (80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d107      	bne.n	8003f82 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = LSE_VALUE;
 8003f72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f76:	61fb      	str	r3, [r7, #28]
          break;
 8003f78:	e003      	b.n	8003f82 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          break;
 8003f7a:	bf00      	nop
 8003f7c:	e3a8      	b.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003f7e:	bf00      	nop
 8003f80:	e3a6      	b.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003f82:	bf00      	nop
        break;
 8003f84:	e3a4      	b.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8003f86:	4b53      	ldr	r3, [pc, #332]	; (80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f8c:	f003 030c 	and.w	r3, r3, #12
 8003f90:	60fb      	str	r3, [r7, #12]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2b0c      	cmp	r3, #12
 8003f96:	d83a      	bhi.n	800400e <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 8003f98:	a201      	add	r2, pc, #4	; (adr r2, 8003fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>)
 8003f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f9e:	bf00      	nop
 8003fa0:	08003fd5 	.word	0x08003fd5
 8003fa4:	0800400f 	.word	0x0800400f
 8003fa8:	0800400f 	.word	0x0800400f
 8003fac:	0800400f 	.word	0x0800400f
 8003fb0:	08003fdd 	.word	0x08003fdd
 8003fb4:	0800400f 	.word	0x0800400f
 8003fb8:	0800400f 	.word	0x0800400f
 8003fbc:	0800400f 	.word	0x0800400f
 8003fc0:	08003fe5 	.word	0x08003fe5
 8003fc4:	0800400f 	.word	0x0800400f
 8003fc8:	0800400f 	.word	0x0800400f
 8003fcc:	0800400f 	.word	0x0800400f
 8003fd0:	08003ff9 	.word	0x08003ff9
          frequency = HAL_RCC_GetPCLK1Freq();
 8003fd4:	f7fe ffec 	bl	8002fb0 <HAL_RCC_GetPCLK1Freq>
 8003fd8:	61f8      	str	r0, [r7, #28]
          break;
 8003fda:	e01d      	b.n	8004018 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          frequency = HAL_RCC_GetSysClockFreq();
 8003fdc:	f7fe ff52 	bl	8002e84 <HAL_RCC_GetSysClockFreq>
 8003fe0:	61f8      	str	r0, [r7, #28]
          break;
 8003fe2:	e019      	b.n	8004018 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003fe4:	4b3b      	ldr	r3, [pc, #236]	; (80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ff0:	d10f      	bne.n	8004012 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
            frequency = HSI_VALUE;
 8003ff2:	4b3a      	ldr	r3, [pc, #232]	; (80040dc <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8003ff4:	61fb      	str	r3, [r7, #28]
          break;
 8003ff6:	e00c      	b.n	8004012 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003ff8:	4b36      	ldr	r3, [pc, #216]	; (80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b02      	cmp	r3, #2
 8004004:	d107      	bne.n	8004016 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = LSE_VALUE;
 8004006:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800400a:	61fb      	str	r3, [r7, #28]
          break;
 800400c:	e003      	b.n	8004016 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          break;
 800400e:	bf00      	nop
 8004010:	e35e      	b.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004012:	bf00      	nop
 8004014:	e35c      	b.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004016:	bf00      	nop
        break;
 8004018:	e35a      	b.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800401a:	4b2e      	ldr	r3, [pc, #184]	; (80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800401c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004020:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004024:	60fb      	str	r3, [r7, #12]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2b30      	cmp	r3, #48	; 0x30
 800402a:	d021      	beq.n	8004070 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2b30      	cmp	r3, #48	; 0x30
 8004030:	d829      	bhi.n	8004086 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2b20      	cmp	r3, #32
 8004036:	d011      	beq.n	800405c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2b20      	cmp	r3, #32
 800403c:	d823      	bhi.n	8004086 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d003      	beq.n	800404c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2b10      	cmp	r3, #16
 8004048:	d004      	beq.n	8004054 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
          break;
 800404a:	e01c      	b.n	8004086 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 800404c:	f7fe ffb0 	bl	8002fb0 <HAL_RCC_GetPCLK1Freq>
 8004050:	61f8      	str	r0, [r7, #28]
          break;
 8004052:	e01d      	b.n	8004090 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          frequency = HAL_RCC_GetSysClockFreq();
 8004054:	f7fe ff16 	bl	8002e84 <HAL_RCC_GetSysClockFreq>
 8004058:	61f8      	str	r0, [r7, #28]
          break;
 800405a:	e019      	b.n	8004090 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800405c:	4b1d      	ldr	r3, [pc, #116]	; (80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004068:	d10f      	bne.n	800408a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
            frequency = HSI_VALUE;
 800406a:	4b1c      	ldr	r3, [pc, #112]	; (80040dc <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800406c:	61fb      	str	r3, [r7, #28]
          break;
 800406e:	e00c      	b.n	800408a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004070:	4b18      	ldr	r3, [pc, #96]	; (80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b02      	cmp	r3, #2
 800407c:	d107      	bne.n	800408e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = LSE_VALUE;
 800407e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004082:	61fb      	str	r3, [r7, #28]
          break;
 8004084:	e003      	b.n	800408e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          break;
 8004086:	bf00      	nop
 8004088:	e322      	b.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800408a:	bf00      	nop
 800408c:	e320      	b.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800408e:	bf00      	nop
        break;
 8004090:	e31e      	b.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004092:	4b10      	ldr	r3, [pc, #64]	; (80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004098:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800409c:	60fb      	str	r3, [r7, #12]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2bc0      	cmp	r3, #192	; 0xc0
 80040a2:	d027      	beq.n	80040f4 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2bc0      	cmp	r3, #192	; 0xc0
 80040a8:	d82f      	bhi.n	800410a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2b80      	cmp	r3, #128	; 0x80
 80040ae:	d017      	beq.n	80040e0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2b80      	cmp	r3, #128	; 0x80
 80040b4:	d829      	bhi.n	800410a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d003      	beq.n	80040c4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2b40      	cmp	r3, #64	; 0x40
 80040c0:	d004      	beq.n	80040cc <HAL_RCCEx_GetPeriphCLKFreq+0x828>
          break;
 80040c2:	e022      	b.n	800410a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
          frequency = HAL_RCC_GetPCLK1Freq();
 80040c4:	f7fe ff74 	bl	8002fb0 <HAL_RCC_GetPCLK1Freq>
 80040c8:	61f8      	str	r0, [r7, #28]
          break;
 80040ca:	e023      	b.n	8004114 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          frequency = HAL_RCC_GetSysClockFreq();
 80040cc:	f7fe feda 	bl	8002e84 <HAL_RCC_GetSysClockFreq>
 80040d0:	61f8      	str	r0, [r7, #28]
          break;
 80040d2:	e01f      	b.n	8004114 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 80040d4:	40021000 	.word	0x40021000
 80040d8:	02dc6c00 	.word	0x02dc6c00
 80040dc:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80040e0:	4b9b      	ldr	r3, [pc, #620]	; (8004350 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040ec:	d10f      	bne.n	800410e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
            frequency = HSI_VALUE;
 80040ee:	4b99      	ldr	r3, [pc, #612]	; (8004354 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80040f0:	61fb      	str	r3, [r7, #28]
          break;
 80040f2:	e00c      	b.n	800410e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80040f4:	4b96      	ldr	r3, [pc, #600]	; (8004350 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80040f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d107      	bne.n	8004112 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = LSE_VALUE;
 8004102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004106:	61fb      	str	r3, [r7, #28]
          break;
 8004108:	e003      	b.n	8004112 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 800410a:	bf00      	nop
 800410c:	e2e0      	b.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800410e:	bf00      	nop
 8004110:	e2de      	b.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004112:	bf00      	nop
        break;
 8004114:	e2dc      	b.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004116:	4b8e      	ldr	r3, [pc, #568]	; (8004350 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800411c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004120:	60fb      	str	r3, [r7, #12]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004128:	d025      	beq.n	8004176 <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004130:	d82c      	bhi.n	800418c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004138:	d013      	beq.n	8004162 <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004140:	d824      	bhi.n	800418c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d004      	beq.n	8004152 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800414e:	d004      	beq.n	800415a <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
          break;
 8004150:	e01c      	b.n	800418c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004152:	f7fe ff2d 	bl	8002fb0 <HAL_RCC_GetPCLK1Freq>
 8004156:	61f8      	str	r0, [r7, #28]
          break;
 8004158:	e01d      	b.n	8004196 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 800415a:	f7fe fe93 	bl	8002e84 <HAL_RCC_GetSysClockFreq>
 800415e:	61f8      	str	r0, [r7, #28]
          break;
 8004160:	e019      	b.n	8004196 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004162:	4b7b      	ldr	r3, [pc, #492]	; (8004350 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800416a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800416e:	d10f      	bne.n	8004190 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
            frequency = HSI_VALUE;
 8004170:	4b78      	ldr	r3, [pc, #480]	; (8004354 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004172:	61fb      	str	r3, [r7, #28]
          break;
 8004174:	e00c      	b.n	8004190 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004176:	4b76      	ldr	r3, [pc, #472]	; (8004350 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417c:	f003 0302 	and.w	r3, r3, #2
 8004180:	2b02      	cmp	r3, #2
 8004182:	d107      	bne.n	8004194 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = LSE_VALUE;
 8004184:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004188:	61fb      	str	r3, [r7, #28]
          break;
 800418a:	e003      	b.n	8004194 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 800418c:	bf00      	nop
 800418e:	e29f      	b.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004190:	bf00      	nop
 8004192:	e29d      	b.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004194:	bf00      	nop
        break;
 8004196:	e29b      	b.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004198:	4b6d      	ldr	r3, [pc, #436]	; (8004350 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800419a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80041a2:	60fb      	str	r3, [r7, #12]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041aa:	d025      	beq.n	80041f8 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041b2:	d82c      	bhi.n	800420e <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041ba:	d013      	beq.n	80041e4 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041c2:	d824      	bhi.n	800420e <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d004      	beq.n	80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041d0:	d004      	beq.n	80041dc <HAL_RCCEx_GetPeriphCLKFreq+0x938>
          break;
 80041d2:	e01c      	b.n	800420e <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80041d4:	f7fe feec 	bl	8002fb0 <HAL_RCC_GetPCLK1Freq>
 80041d8:	61f8      	str	r0, [r7, #28]
          break;
 80041da:	e01d      	b.n	8004218 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = HAL_RCC_GetSysClockFreq();
 80041dc:	f7fe fe52 	bl	8002e84 <HAL_RCC_GetSysClockFreq>
 80041e0:	61f8      	str	r0, [r7, #28]
          break;
 80041e2:	e019      	b.n	8004218 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80041e4:	4b5a      	ldr	r3, [pc, #360]	; (8004350 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041f0:	d10f      	bne.n	8004212 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
            frequency = HSI_VALUE;
 80041f2:	4b58      	ldr	r3, [pc, #352]	; (8004354 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80041f4:	61fb      	str	r3, [r7, #28]
          break;
 80041f6:	e00c      	b.n	8004212 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80041f8:	4b55      	ldr	r3, [pc, #340]	; (8004350 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80041fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b02      	cmp	r3, #2
 8004204:	d107      	bne.n	8004216 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = LSE_VALUE;
 8004206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800420a:	61fb      	str	r3, [r7, #28]
          break;
 800420c:	e003      	b.n	8004216 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          break;
 800420e:	bf00      	nop
 8004210:	e25e      	b.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004212:	bf00      	nop
 8004214:	e25c      	b.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004216:	bf00      	nop
        break;
 8004218:	e25a      	b.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800421a:	4b4d      	ldr	r3, [pc, #308]	; (8004350 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800421c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004220:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004224:	60fb      	str	r3, [r7, #12]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800422c:	d007      	beq.n	800423e <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004234:	d12f      	bne.n	8004296 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          frequency = HAL_RCC_GetSysClockFreq();
 8004236:	f7fe fe25 	bl	8002e84 <HAL_RCC_GetSysClockFreq>
 800423a:	61f8      	str	r0, [r7, #28]
          break;
 800423c:	e02e      	b.n	800429c <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800423e:	4b44      	ldr	r3, [pc, #272]	; (8004350 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004246:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800424a:	d126      	bne.n	800429a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
 800424c:	4b40      	ldr	r3, [pc, #256]	; (8004350 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d020      	beq.n	800429a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004258:	4b3d      	ldr	r3, [pc, #244]	; (8004350 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	0a1b      	lsrs	r3, r3, #8
 800425e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004262:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	68ba      	ldr	r2, [r7, #8]
 8004268:	fb03 f202 	mul.w	r2, r3, r2
 800426c:	4b38      	ldr	r3, [pc, #224]	; (8004350 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	091b      	lsrs	r3, r3, #4
 8004272:	f003 030f 	and.w	r3, r3, #15
 8004276:	3301      	adds	r3, #1
 8004278:	fbb2 f3f3 	udiv	r3, r2, r3
 800427c:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800427e:	4b34      	ldr	r3, [pc, #208]	; (8004350 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	0e5b      	lsrs	r3, r3, #25
 8004284:	f003 0303 	and.w	r3, r3, #3
 8004288:	3301      	adds	r3, #1
 800428a:	005b      	lsls	r3, r3, #1
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004292:	61fb      	str	r3, [r7, #28]
          break;
 8004294:	e001      	b.n	800429a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          break;
 8004296:	bf00      	nop
 8004298:	e21a      	b.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800429a:	bf00      	nop
        break;
 800429c:	e218      	b.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800429e:	4b2c      	ldr	r3, [pc, #176]	; (8004350 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80042a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042a4:	f003 0304 	and.w	r3, r3, #4
 80042a8:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d103      	bne.n	80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>
          frequency = HAL_RCC_GetPCLK2Freq();
 80042b0:	f7fe fe94 	bl	8002fdc <HAL_RCC_GetPCLK2Freq>
 80042b4:	61f8      	str	r0, [r7, #28]
        break;
 80042b6:	e20b      	b.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          frequency = HAL_RCC_GetSysClockFreq();
 80042b8:	f7fe fde4 	bl	8002e84 <HAL_RCC_GetSysClockFreq>
 80042bc:	61f8      	str	r0, [r7, #28]
        break;
 80042be:	e207      	b.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 80042c0:	4b23      	ldr	r3, [pc, #140]	; (8004350 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80042c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042c6:	f003 0318 	and.w	r3, r3, #24
 80042ca:	60fb      	str	r3, [r7, #12]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2b10      	cmp	r3, #16
 80042d0:	d010      	beq.n	80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2b10      	cmp	r3, #16
 80042d6:	d834      	bhi.n	8004342 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d003      	beq.n	80042e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2b08      	cmp	r3, #8
 80042e2:	d024      	beq.n	800432e <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          break;
 80042e4:	e02d      	b.n	8004342 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80042e6:	69b9      	ldr	r1, [r7, #24]
 80042e8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80042ec:	f000 fbe2 	bl	8004ab4 <RCCEx_GetSAIxPeriphCLKFreq>
 80042f0:	61f8      	str	r0, [r7, #28]
          break;
 80042f2:	e02b      	b.n	800434c <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80042f4:	4b16      	ldr	r3, [pc, #88]	; (8004350 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d122      	bne.n	8004346 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004300:	4b13      	ldr	r3, [pc, #76]	; (8004350 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0308 	and.w	r3, r3, #8
 8004308:	2b00      	cmp	r3, #0
 800430a:	d005      	beq.n	8004318 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800430c:	4b10      	ldr	r3, [pc, #64]	; (8004350 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	091b      	lsrs	r3, r3, #4
 8004312:	f003 030f 	and.w	r3, r3, #15
 8004316:	e005      	b.n	8004324 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8004318:	4b0d      	ldr	r3, [pc, #52]	; (8004350 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800431a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800431e:	0a1b      	lsrs	r3, r3, #8
 8004320:	f003 030f 	and.w	r3, r3, #15
 8004324:	4a0c      	ldr	r2, [pc, #48]	; (8004358 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8004326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800432a:	61fb      	str	r3, [r7, #28]
          break;
 800432c:	e00b      	b.n	8004346 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800432e:	4b08      	ldr	r3, [pc, #32]	; (8004350 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800433a:	d106      	bne.n	800434a <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = HSI_VALUE;
 800433c:	4b05      	ldr	r3, [pc, #20]	; (8004354 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800433e:	61fb      	str	r3, [r7, #28]
          break;
 8004340:	e003      	b.n	800434a <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          break;
 8004342:	bf00      	nop
 8004344:	e1c4      	b.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004346:	bf00      	nop
 8004348:	e1c2      	b.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800434a:	bf00      	nop
        break;
 800434c:	e1c0      	b.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 800434e:	bf00      	nop
 8004350:	40021000 	.word	0x40021000
 8004354:	00f42400 	.word	0x00f42400
 8004358:	0800a9f4 	.word	0x0800a9f4
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800435c:	4b96      	ldr	r3, [pc, #600]	; (80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800435e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004362:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004366:	60fb      	str	r3, [r7, #12]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800436e:	d013      	beq.n	8004398 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004376:	d819      	bhi.n	80043ac <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d004      	beq.n	8004388 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004384:	d004      	beq.n	8004390 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
          break;
 8004386:	e011      	b.n	80043ac <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004388:	f7fe fe12 	bl	8002fb0 <HAL_RCC_GetPCLK1Freq>
 800438c:	61f8      	str	r0, [r7, #28]
          break;
 800438e:	e010      	b.n	80043b2 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8004390:	f7fe fd78 	bl	8002e84 <HAL_RCC_GetSysClockFreq>
 8004394:	61f8      	str	r0, [r7, #28]
          break;
 8004396:	e00c      	b.n	80043b2 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004398:	4b87      	ldr	r3, [pc, #540]	; (80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043a4:	d104      	bne.n	80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = HSI_VALUE;
 80043a6:	4b85      	ldr	r3, [pc, #532]	; (80045bc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80043a8:	61fb      	str	r3, [r7, #28]
          break;
 80043aa:	e001      	b.n	80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 80043ac:	bf00      	nop
 80043ae:	e18f      	b.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80043b0:	bf00      	nop
        break;
 80043b2:	e18d      	b.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80043b4:	4b80      	ldr	r3, [pc, #512]	; (80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80043b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80043be:	60fb      	str	r3, [r7, #12]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043c6:	d013      	beq.n	80043f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043ce:	d819      	bhi.n	8004404 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d004      	beq.n	80043e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043dc:	d004      	beq.n	80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>
          break;
 80043de:	e011      	b.n	8004404 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          frequency = HAL_RCC_GetPCLK1Freq();
 80043e0:	f7fe fde6 	bl	8002fb0 <HAL_RCC_GetPCLK1Freq>
 80043e4:	61f8      	str	r0, [r7, #28]
          break;
 80043e6:	e010      	b.n	800440a <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          frequency = HAL_RCC_GetSysClockFreq();
 80043e8:	f7fe fd4c 	bl	8002e84 <HAL_RCC_GetSysClockFreq>
 80043ec:	61f8      	str	r0, [r7, #28]
          break;
 80043ee:	e00c      	b.n	800440a <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80043f0:	4b71      	ldr	r3, [pc, #452]	; (80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043fc:	d104      	bne.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
            frequency = HSI_VALUE;
 80043fe:	4b6f      	ldr	r3, [pc, #444]	; (80045bc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004400:	61fb      	str	r3, [r7, #28]
          break;
 8004402:	e001      	b.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          break;
 8004404:	bf00      	nop
 8004406:	e163      	b.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004408:	bf00      	nop
        break;
 800440a:	e161      	b.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800440c:	4b6a      	ldr	r3, [pc, #424]	; (80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800440e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004412:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004416:	60fb      	str	r3, [r7, #12]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800441e:	d013      	beq.n	8004448 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004426:	d819      	bhi.n	800445c <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d004      	beq.n	8004438 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004434:	d004      	beq.n	8004440 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
          break;
 8004436:	e011      	b.n	800445c <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004438:	f7fe fdba 	bl	8002fb0 <HAL_RCC_GetPCLK1Freq>
 800443c:	61f8      	str	r0, [r7, #28]
          break;
 800443e:	e010      	b.n	8004462 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          frequency = HAL_RCC_GetSysClockFreq();
 8004440:	f7fe fd20 	bl	8002e84 <HAL_RCC_GetSysClockFreq>
 8004444:	61f8      	str	r0, [r7, #28]
          break;
 8004446:	e00c      	b.n	8004462 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004448:	4b5b      	ldr	r3, [pc, #364]	; (80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004450:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004454:	d104      	bne.n	8004460 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
            frequency = HSI_VALUE;
 8004456:	4b59      	ldr	r3, [pc, #356]	; (80045bc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004458:	61fb      	str	r3, [r7, #28]
          break;
 800445a:	e001      	b.n	8004460 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          break;
 800445c:	bf00      	nop
 800445e:	e137      	b.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004460:	bf00      	nop
        break;
 8004462:	e135      	b.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8004464:	4b54      	ldr	r3, [pc, #336]	; (80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004466:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800446a:	f003 0303 	and.w	r3, r3, #3
 800446e:	60fb      	str	r3, [r7, #12]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2b02      	cmp	r3, #2
 8004474:	d011      	beq.n	800449a <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2b02      	cmp	r3, #2
 800447a:	d818      	bhi.n	80044ae <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d004      	beq.n	8004492 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
          break;
 8004488:	e011      	b.n	80044ae <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800448a:	f7fe fd91 	bl	8002fb0 <HAL_RCC_GetPCLK1Freq>
 800448e:	61f8      	str	r0, [r7, #28]
          break;
 8004490:	e010      	b.n	80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          frequency = HAL_RCC_GetSysClockFreq();
 8004492:	f7fe fcf7 	bl	8002e84 <HAL_RCC_GetSysClockFreq>
 8004496:	61f8      	str	r0, [r7, #28]
          break;
 8004498:	e00c      	b.n	80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800449a:	4b47      	ldr	r3, [pc, #284]	; (80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044a6:	d104      	bne.n	80044b2 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
            frequency = HSI_VALUE;
 80044a8:	4b44      	ldr	r3, [pc, #272]	; (80045bc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80044aa:	61fb      	str	r3, [r7, #28]
          break;
 80044ac:	e001      	b.n	80044b2 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          break;
 80044ae:	bf00      	nop
 80044b0:	e10e      	b.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80044b2:	bf00      	nop
        break;
 80044b4:	e10c      	b.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80044b6:	4b40      	ldr	r3, [pc, #256]	; (80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80044b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044bc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80044c0:	60fb      	str	r3, [r7, #12]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80044c8:	d02c      	beq.n	8004524 <HAL_RCCEx_GetPeriphCLKFreq+0xc80>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80044d0:	d833      	bhi.n	800453a <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80044d8:	d01a      	beq.n	8004510 <HAL_RCCEx_GetPeriphCLKFreq+0xc6c>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80044e0:	d82b      	bhi.n	800453a <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d004      	beq.n	80044f2 <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80044ee:	d004      	beq.n	80044fa <HAL_RCCEx_GetPeriphCLKFreq+0xc56>
          break;
 80044f0:	e023      	b.n	800453a <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
          frequency = HAL_RCC_GetPCLK1Freq();
 80044f2:	f7fe fd5d 	bl	8002fb0 <HAL_RCC_GetPCLK1Freq>
 80044f6:	61f8      	str	r0, [r7, #28]
          break;
 80044f8:	e026      	b.n	8004548 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80044fa:	4b2f      	ldr	r3, [pc, #188]	; (80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80044fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004500:	f003 0302 	and.w	r3, r3, #2
 8004504:	2b02      	cmp	r3, #2
 8004506:	d11a      	bne.n	800453e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
              frequency = LSI_VALUE;
 8004508:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800450c:	61fb      	str	r3, [r7, #28]
          break;
 800450e:	e016      	b.n	800453e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004510:	4b29      	ldr	r3, [pc, #164]	; (80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004518:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800451c:	d111      	bne.n	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
            frequency = HSI_VALUE;
 800451e:	4b27      	ldr	r3, [pc, #156]	; (80045bc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004520:	61fb      	str	r3, [r7, #28]
          break;
 8004522:	e00e      	b.n	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004524:	4b24      	ldr	r3, [pc, #144]	; (80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b02      	cmp	r3, #2
 8004530:	d109      	bne.n	8004546 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = LSE_VALUE;
 8004532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004536:	61fb      	str	r3, [r7, #28]
          break;
 8004538:	e005      	b.n	8004546 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          break;
 800453a:	bf00      	nop
 800453c:	e0c8      	b.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800453e:	bf00      	nop
 8004540:	e0c6      	b.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004542:	bf00      	nop
 8004544:	e0c4      	b.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004546:	bf00      	nop
        break;
 8004548:	e0c2      	b.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800454a:	4b1b      	ldr	r3, [pc, #108]	; (80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800454c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004550:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004554:	60fb      	str	r3, [r7, #12]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800455c:	d030      	beq.n	80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004564:	d837      	bhi.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800456c:	d01a      	beq.n	80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004574:	d82f      	bhi.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d004      	beq.n	8004586 <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004582:	d004      	beq.n	800458e <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          break;
 8004584:	e027      	b.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004586:	f7fe fd13 	bl	8002fb0 <HAL_RCC_GetPCLK1Freq>
 800458a:	61f8      	str	r0, [r7, #28]
          break;
 800458c:	e02a      	b.n	80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800458e:	4b0a      	ldr	r3, [pc, #40]	; (80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004590:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004594:	f003 0302 	and.w	r3, r3, #2
 8004598:	2b02      	cmp	r3, #2
 800459a:	d11e      	bne.n	80045da <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
              frequency = LSI_VALUE;
 800459c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80045a0:	61fb      	str	r3, [r7, #28]
          break;
 80045a2:	e01a      	b.n	80045da <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80045a4:	4b04      	ldr	r3, [pc, #16]	; (80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045b0:	d115      	bne.n	80045de <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
            frequency = HSI_VALUE;
 80045b2:	4b02      	ldr	r3, [pc, #8]	; (80045bc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80045b4:	61fb      	str	r3, [r7, #28]
          break;
 80045b6:	e012      	b.n	80045de <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 80045b8:	40021000 	.word	0x40021000
 80045bc:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80045c0:	4b46      	ldr	r3, [pc, #280]	; (80046dc <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80045c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d109      	bne.n	80045e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = LSE_VALUE;
 80045ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045d2:	61fb      	str	r3, [r7, #28]
          break;
 80045d4:	e005      	b.n	80045e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
          break;
 80045d6:	bf00      	nop
 80045d8:	e07a      	b.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80045da:	bf00      	nop
 80045dc:	e078      	b.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80045de:	bf00      	nop
 80045e0:	e076      	b.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80045e2:	bf00      	nop
        break;
 80045e4:	e074      	b.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80045e6:	4b3d      	ldr	r3, [pc, #244]	; (80046dc <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80045e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045ec:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80045f0:	60fb      	str	r3, [r7, #12]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045f8:	d02c      	beq.n	8004654 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004600:	d855      	bhi.n	80046ae <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d004      	beq.n	8004612 <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800460e:	d004      	beq.n	800461a <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
          break;
 8004610:	e04d      	b.n	80046ae <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
          frequency = HAL_RCC_GetSysClockFreq();
 8004612:	f7fe fc37 	bl	8002e84 <HAL_RCC_GetSysClockFreq>
 8004616:	61f8      	str	r0, [r7, #28]
          break;
 8004618:	e04e      	b.n	80046b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800461a:	4b30      	ldr	r3, [pc, #192]	; (80046dc <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b02      	cmp	r3, #2
 8004624:	d145      	bne.n	80046b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004626:	4b2d      	ldr	r3, [pc, #180]	; (80046dc <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0308 	and.w	r3, r3, #8
 800462e:	2b00      	cmp	r3, #0
 8004630:	d005      	beq.n	800463e <HAL_RCCEx_GetPeriphCLKFreq+0xd9a>
 8004632:	4b2a      	ldr	r3, [pc, #168]	; (80046dc <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	091b      	lsrs	r3, r3, #4
 8004638:	f003 030f 	and.w	r3, r3, #15
 800463c:	e005      	b.n	800464a <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
 800463e:	4b27      	ldr	r3, [pc, #156]	; (80046dc <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004640:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004644:	0a1b      	lsrs	r3, r3, #8
 8004646:	f003 030f 	and.w	r3, r3, #15
 800464a:	4a25      	ldr	r2, [pc, #148]	; (80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800464c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004650:	61fb      	str	r3, [r7, #28]
          break;
 8004652:	e02e      	b.n	80046b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004654:	4b21      	ldr	r3, [pc, #132]	; (80046dc <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800465c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004660:	d129      	bne.n	80046b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004662:	4b1e      	ldr	r3, [pc, #120]	; (80046dc <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800466a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800466e:	d122      	bne.n	80046b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004670:	4b1a      	ldr	r3, [pc, #104]	; (80046dc <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	0a1b      	lsrs	r3, r3, #8
 8004676:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800467a:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	fb03 f202 	mul.w	r2, r3, r2
 8004684:	4b15      	ldr	r3, [pc, #84]	; (80046dc <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	091b      	lsrs	r3, r3, #4
 800468a:	f003 030f 	and.w	r3, r3, #15
 800468e:	3301      	adds	r3, #1
 8004690:	fbb2 f3f3 	udiv	r3, r2, r3
 8004694:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004696:	4b11      	ldr	r3, [pc, #68]	; (80046dc <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	0d5b      	lsrs	r3, r3, #21
 800469c:	f003 0303 	and.w	r3, r3, #3
 80046a0:	3301      	adds	r3, #1
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	69ba      	ldr	r2, [r7, #24]
 80046a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046aa:	61fb      	str	r3, [r7, #28]
          break;
 80046ac:	e003      	b.n	80046b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          break;
 80046ae:	bf00      	nop
 80046b0:	e00e      	b.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80046b2:	bf00      	nop
 80046b4:	e00c      	b.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80046b6:	bf00      	nop
        break;
 80046b8:	e00a      	b.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 80046ba:	bf00      	nop
 80046bc:	e008      	b.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 80046be:	bf00      	nop
 80046c0:	e006      	b.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 80046c2:	bf00      	nop
 80046c4:	e004      	b.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 80046c6:	bf00      	nop
 80046c8:	e002      	b.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 80046ca:	bf00      	nop
 80046cc:	e000      	b.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 80046ce:	bf00      	nop
    }
  }

  return(frequency);
 80046d0:	69fb      	ldr	r3, [r7, #28]
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3720      	adds	r7, #32
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	40021000 	.word	0x40021000
 80046e0:	0800a9f4 	.word	0x0800a9f4

080046e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046ee:	2300      	movs	r3, #0
 80046f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80046f2:	4b72      	ldr	r3, [pc, #456]	; (80048bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	f003 0303 	and.w	r3, r3, #3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00e      	beq.n	800471c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80046fe:	4b6f      	ldr	r3, [pc, #444]	; (80048bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	f003 0203 	and.w	r2, r3, #3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	429a      	cmp	r2, r3
 800470c:	d103      	bne.n	8004716 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
       ||
 8004712:	2b00      	cmp	r3, #0
 8004714:	d142      	bne.n	800479c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	73fb      	strb	r3, [r7, #15]
 800471a:	e03f      	b.n	800479c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2b03      	cmp	r3, #3
 8004722:	d018      	beq.n	8004756 <RCCEx_PLLSAI1_Config+0x72>
 8004724:	2b03      	cmp	r3, #3
 8004726:	d825      	bhi.n	8004774 <RCCEx_PLLSAI1_Config+0x90>
 8004728:	2b01      	cmp	r3, #1
 800472a:	d002      	beq.n	8004732 <RCCEx_PLLSAI1_Config+0x4e>
 800472c:	2b02      	cmp	r3, #2
 800472e:	d009      	beq.n	8004744 <RCCEx_PLLSAI1_Config+0x60>
 8004730:	e020      	b.n	8004774 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004732:	4b62      	ldr	r3, [pc, #392]	; (80048bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d11d      	bne.n	800477a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004742:	e01a      	b.n	800477a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004744:	4b5d      	ldr	r3, [pc, #372]	; (80048bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800474c:	2b00      	cmp	r3, #0
 800474e:	d116      	bne.n	800477e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004754:	e013      	b.n	800477e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004756:	4b59      	ldr	r3, [pc, #356]	; (80048bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d10f      	bne.n	8004782 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004762:	4b56      	ldr	r3, [pc, #344]	; (80048bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d109      	bne.n	8004782 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004772:	e006      	b.n	8004782 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	73fb      	strb	r3, [r7, #15]
      break;
 8004778:	e004      	b.n	8004784 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800477a:	bf00      	nop
 800477c:	e002      	b.n	8004784 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800477e:	bf00      	nop
 8004780:	e000      	b.n	8004784 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004782:	bf00      	nop
    }

    if(status == HAL_OK)
 8004784:	7bfb      	ldrb	r3, [r7, #15]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d108      	bne.n	800479c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800478a:	4b4c      	ldr	r3, [pc, #304]	; (80048bc <RCCEx_PLLSAI1_Config+0x1d8>)
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	f023 0203 	bic.w	r2, r3, #3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4949      	ldr	r1, [pc, #292]	; (80048bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004798:	4313      	orrs	r3, r2
 800479a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800479c:	7bfb      	ldrb	r3, [r7, #15]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	f040 8086 	bne.w	80048b0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80047a4:	4b45      	ldr	r3, [pc, #276]	; (80048bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a44      	ldr	r2, [pc, #272]	; (80048bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80047aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047b0:	f7fc ff98 	bl	80016e4 <HAL_GetTick>
 80047b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047b6:	e009      	b.n	80047cc <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047b8:	f7fc ff94 	bl	80016e4 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d902      	bls.n	80047cc <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	73fb      	strb	r3, [r7, #15]
        break;
 80047ca:	e005      	b.n	80047d8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047cc:	4b3b      	ldr	r3, [pc, #236]	; (80048bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1ef      	bne.n	80047b8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80047d8:	7bfb      	ldrb	r3, [r7, #15]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d168      	bne.n	80048b0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d113      	bne.n	800480c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047e4:	4b35      	ldr	r3, [pc, #212]	; (80048bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80047e6:	691a      	ldr	r2, [r3, #16]
 80047e8:	4b35      	ldr	r3, [pc, #212]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047ea:	4013      	ands	r3, r2
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	6892      	ldr	r2, [r2, #8]
 80047f0:	0211      	lsls	r1, r2, #8
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	68d2      	ldr	r2, [r2, #12]
 80047f6:	06d2      	lsls	r2, r2, #27
 80047f8:	4311      	orrs	r1, r2
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	6852      	ldr	r2, [r2, #4]
 80047fe:	3a01      	subs	r2, #1
 8004800:	0112      	lsls	r2, r2, #4
 8004802:	430a      	orrs	r2, r1
 8004804:	492d      	ldr	r1, [pc, #180]	; (80048bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004806:	4313      	orrs	r3, r2
 8004808:	610b      	str	r3, [r1, #16]
 800480a:	e02d      	b.n	8004868 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d115      	bne.n	800483e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004812:	4b2a      	ldr	r3, [pc, #168]	; (80048bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004814:	691a      	ldr	r2, [r3, #16]
 8004816:	4b2b      	ldr	r3, [pc, #172]	; (80048c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004818:	4013      	ands	r3, r2
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	6892      	ldr	r2, [r2, #8]
 800481e:	0211      	lsls	r1, r2, #8
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	6912      	ldr	r2, [r2, #16]
 8004824:	0852      	lsrs	r2, r2, #1
 8004826:	3a01      	subs	r2, #1
 8004828:	0552      	lsls	r2, r2, #21
 800482a:	4311      	orrs	r1, r2
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	6852      	ldr	r2, [r2, #4]
 8004830:	3a01      	subs	r2, #1
 8004832:	0112      	lsls	r2, r2, #4
 8004834:	430a      	orrs	r2, r1
 8004836:	4921      	ldr	r1, [pc, #132]	; (80048bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004838:	4313      	orrs	r3, r2
 800483a:	610b      	str	r3, [r1, #16]
 800483c:	e014      	b.n	8004868 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800483e:	4b1f      	ldr	r3, [pc, #124]	; (80048bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004840:	691a      	ldr	r2, [r3, #16]
 8004842:	4b21      	ldr	r3, [pc, #132]	; (80048c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004844:	4013      	ands	r3, r2
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	6892      	ldr	r2, [r2, #8]
 800484a:	0211      	lsls	r1, r2, #8
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	6952      	ldr	r2, [r2, #20]
 8004850:	0852      	lsrs	r2, r2, #1
 8004852:	3a01      	subs	r2, #1
 8004854:	0652      	lsls	r2, r2, #25
 8004856:	4311      	orrs	r1, r2
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	6852      	ldr	r2, [r2, #4]
 800485c:	3a01      	subs	r2, #1
 800485e:	0112      	lsls	r2, r2, #4
 8004860:	430a      	orrs	r2, r1
 8004862:	4916      	ldr	r1, [pc, #88]	; (80048bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004864:	4313      	orrs	r3, r2
 8004866:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004868:	4b14      	ldr	r3, [pc, #80]	; (80048bc <RCCEx_PLLSAI1_Config+0x1d8>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a13      	ldr	r2, [pc, #76]	; (80048bc <RCCEx_PLLSAI1_Config+0x1d8>)
 800486e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004872:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004874:	f7fc ff36 	bl	80016e4 <HAL_GetTick>
 8004878:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800487a:	e009      	b.n	8004890 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800487c:	f7fc ff32 	bl	80016e4 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	2b02      	cmp	r3, #2
 8004888:	d902      	bls.n	8004890 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	73fb      	strb	r3, [r7, #15]
          break;
 800488e:	e005      	b.n	800489c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004890:	4b0a      	ldr	r3, [pc, #40]	; (80048bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d0ef      	beq.n	800487c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800489c:	7bfb      	ldrb	r3, [r7, #15]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d106      	bne.n	80048b0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80048a2:	4b06      	ldr	r3, [pc, #24]	; (80048bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80048a4:	691a      	ldr	r2, [r3, #16]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	4904      	ldr	r1, [pc, #16]	; (80048bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80048b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	40021000 	.word	0x40021000
 80048c0:	07ff800f 	.word	0x07ff800f
 80048c4:	ff9f800f 	.word	0xff9f800f
 80048c8:	f9ff800f 	.word	0xf9ff800f

080048cc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048d6:	2300      	movs	r3, #0
 80048d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80048da:	4b72      	ldr	r3, [pc, #456]	; (8004aa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	f003 0303 	and.w	r3, r3, #3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00e      	beq.n	8004904 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80048e6:	4b6f      	ldr	r3, [pc, #444]	; (8004aa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	f003 0203 	and.w	r2, r3, #3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d103      	bne.n	80048fe <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
       ||
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d142      	bne.n	8004984 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	73fb      	strb	r3, [r7, #15]
 8004902:	e03f      	b.n	8004984 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2b03      	cmp	r3, #3
 800490a:	d018      	beq.n	800493e <RCCEx_PLLSAI2_Config+0x72>
 800490c:	2b03      	cmp	r3, #3
 800490e:	d825      	bhi.n	800495c <RCCEx_PLLSAI2_Config+0x90>
 8004910:	2b01      	cmp	r3, #1
 8004912:	d002      	beq.n	800491a <RCCEx_PLLSAI2_Config+0x4e>
 8004914:	2b02      	cmp	r3, #2
 8004916:	d009      	beq.n	800492c <RCCEx_PLLSAI2_Config+0x60>
 8004918:	e020      	b.n	800495c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800491a:	4b62      	ldr	r3, [pc, #392]	; (8004aa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	2b00      	cmp	r3, #0
 8004924:	d11d      	bne.n	8004962 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800492a:	e01a      	b.n	8004962 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800492c:	4b5d      	ldr	r3, [pc, #372]	; (8004aa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004934:	2b00      	cmp	r3, #0
 8004936:	d116      	bne.n	8004966 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800493c:	e013      	b.n	8004966 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800493e:	4b59      	ldr	r3, [pc, #356]	; (8004aa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d10f      	bne.n	800496a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800494a:	4b56      	ldr	r3, [pc, #344]	; (8004aa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d109      	bne.n	800496a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800495a:	e006      	b.n	800496a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	73fb      	strb	r3, [r7, #15]
      break;
 8004960:	e004      	b.n	800496c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004962:	bf00      	nop
 8004964:	e002      	b.n	800496c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004966:	bf00      	nop
 8004968:	e000      	b.n	800496c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800496a:	bf00      	nop
    }

    if(status == HAL_OK)
 800496c:	7bfb      	ldrb	r3, [r7, #15]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d108      	bne.n	8004984 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004972:	4b4c      	ldr	r3, [pc, #304]	; (8004aa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	f023 0203 	bic.w	r2, r3, #3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4949      	ldr	r1, [pc, #292]	; (8004aa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004980:	4313      	orrs	r3, r2
 8004982:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004984:	7bfb      	ldrb	r3, [r7, #15]
 8004986:	2b00      	cmp	r3, #0
 8004988:	f040 8086 	bne.w	8004a98 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800498c:	4b45      	ldr	r3, [pc, #276]	; (8004aa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a44      	ldr	r2, [pc, #272]	; (8004aa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004992:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004996:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004998:	f7fc fea4 	bl	80016e4 <HAL_GetTick>
 800499c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800499e:	e009      	b.n	80049b4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80049a0:	f7fc fea0 	bl	80016e4 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d902      	bls.n	80049b4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	73fb      	strb	r3, [r7, #15]
        break;
 80049b2:	e005      	b.n	80049c0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80049b4:	4b3b      	ldr	r3, [pc, #236]	; (8004aa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1ef      	bne.n	80049a0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80049c0:	7bfb      	ldrb	r3, [r7, #15]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d168      	bne.n	8004a98 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d113      	bne.n	80049f4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80049cc:	4b35      	ldr	r3, [pc, #212]	; (8004aa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049ce:	695a      	ldr	r2, [r3, #20]
 80049d0:	4b35      	ldr	r3, [pc, #212]	; (8004aa8 <RCCEx_PLLSAI2_Config+0x1dc>)
 80049d2:	4013      	ands	r3, r2
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	6892      	ldr	r2, [r2, #8]
 80049d8:	0211      	lsls	r1, r2, #8
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	68d2      	ldr	r2, [r2, #12]
 80049de:	06d2      	lsls	r2, r2, #27
 80049e0:	4311      	orrs	r1, r2
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	6852      	ldr	r2, [r2, #4]
 80049e6:	3a01      	subs	r2, #1
 80049e8:	0112      	lsls	r2, r2, #4
 80049ea:	430a      	orrs	r2, r1
 80049ec:	492d      	ldr	r1, [pc, #180]	; (8004aa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	614b      	str	r3, [r1, #20]
 80049f2:	e02d      	b.n	8004a50 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d115      	bne.n	8004a26 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80049fa:	4b2a      	ldr	r3, [pc, #168]	; (8004aa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049fc:	695a      	ldr	r2, [r3, #20]
 80049fe:	4b2b      	ldr	r3, [pc, #172]	; (8004aac <RCCEx_PLLSAI2_Config+0x1e0>)
 8004a00:	4013      	ands	r3, r2
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	6892      	ldr	r2, [r2, #8]
 8004a06:	0211      	lsls	r1, r2, #8
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	6912      	ldr	r2, [r2, #16]
 8004a0c:	0852      	lsrs	r2, r2, #1
 8004a0e:	3a01      	subs	r2, #1
 8004a10:	0552      	lsls	r2, r2, #21
 8004a12:	4311      	orrs	r1, r2
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	6852      	ldr	r2, [r2, #4]
 8004a18:	3a01      	subs	r2, #1
 8004a1a:	0112      	lsls	r2, r2, #4
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	4921      	ldr	r1, [pc, #132]	; (8004aa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	614b      	str	r3, [r1, #20]
 8004a24:	e014      	b.n	8004a50 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a26:	4b1f      	ldr	r3, [pc, #124]	; (8004aa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a28:	695a      	ldr	r2, [r3, #20]
 8004a2a:	4b21      	ldr	r3, [pc, #132]	; (8004ab0 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	6892      	ldr	r2, [r2, #8]
 8004a32:	0211      	lsls	r1, r2, #8
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	6952      	ldr	r2, [r2, #20]
 8004a38:	0852      	lsrs	r2, r2, #1
 8004a3a:	3a01      	subs	r2, #1
 8004a3c:	0652      	lsls	r2, r2, #25
 8004a3e:	4311      	orrs	r1, r2
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	6852      	ldr	r2, [r2, #4]
 8004a44:	3a01      	subs	r2, #1
 8004a46:	0112      	lsls	r2, r2, #4
 8004a48:	430a      	orrs	r2, r1
 8004a4a:	4916      	ldr	r1, [pc, #88]	; (8004aa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004a50:	4b14      	ldr	r3, [pc, #80]	; (8004aa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a13      	ldr	r2, [pc, #76]	; (8004aa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a5a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a5c:	f7fc fe42 	bl	80016e4 <HAL_GetTick>
 8004a60:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a62:	e009      	b.n	8004a78 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a64:	f7fc fe3e 	bl	80016e4 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d902      	bls.n	8004a78 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	73fb      	strb	r3, [r7, #15]
          break;
 8004a76:	e005      	b.n	8004a84 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a78:	4b0a      	ldr	r3, [pc, #40]	; (8004aa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d0ef      	beq.n	8004a64 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004a84:	7bfb      	ldrb	r3, [r7, #15]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d106      	bne.n	8004a98 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004a8a:	4b06      	ldr	r3, [pc, #24]	; (8004aa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a8c:	695a      	ldr	r2, [r3, #20]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	4904      	ldr	r1, [pc, #16]	; (8004aa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3710      	adds	r7, #16
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	40021000 	.word	0x40021000
 8004aa8:	07ff800f 	.word	0x07ff800f
 8004aac:	ff9f800f 	.word	0xff9f800f
 8004ab0:	f9ff800f 	.word	0xf9ff800f

08004ab4 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b089      	sub	sp, #36	; 0x24
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ad0:	d10b      	bne.n	8004aea <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004ad2:	4b7e      	ldr	r3, [pc, #504]	; (8004ccc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004ad4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ad8:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8004adc:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	2b60      	cmp	r3, #96	; 0x60
 8004ae2:	d112      	bne.n	8004b0a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004ae4:	4b7a      	ldr	r3, [pc, #488]	; (8004cd0 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8004ae6:	61fb      	str	r3, [r7, #28]
 8004ae8:	e00f      	b.n	8004b0a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004af0:	d10b      	bne.n	8004b0a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8004af2:	4b76      	ldr	r3, [pc, #472]	; (8004ccc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004af4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004af8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004afc:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b04:	d101      	bne.n	8004b0a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8004b06:	4b72      	ldr	r3, [pc, #456]	; (8004cd0 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8004b08:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f040 80d6 	bne.w	8004cbe <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	2b40      	cmp	r3, #64	; 0x40
 8004b1a:	d003      	beq.n	8004b24 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b22:	d13b      	bne.n	8004b9c <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004b24:	4b69      	ldr	r3, [pc, #420]	; (8004ccc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b30:	f040 80c4 	bne.w	8004cbc <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8004b34:	4b65      	ldr	r3, [pc, #404]	; (8004ccc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	f000 80bd 	beq.w	8004cbc <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004b42:	4b62      	ldr	r3, [pc, #392]	; (8004ccc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	091b      	lsrs	r3, r3, #4
 8004b48:	f003 030f 	and.w	r3, r3, #15
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	693a      	ldr	r2, [r7, #16]
 8004b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b54:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004b56:	4b5d      	ldr	r3, [pc, #372]	; (8004ccc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	0a1b      	lsrs	r3, r3, #8
 8004b5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b60:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8004b62:	4b5a      	ldr	r3, [pc, #360]	; (8004ccc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	0edb      	lsrs	r3, r3, #27
 8004b68:	f003 031f 	and.w	r3, r3, #31
 8004b6c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d10a      	bne.n	8004b8a <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004b74:	4b55      	ldr	r3, [pc, #340]	; (8004ccc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d002      	beq.n	8004b86 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8004b80:	2311      	movs	r3, #17
 8004b82:	617b      	str	r3, [r7, #20]
 8004b84:	e001      	b.n	8004b8a <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8004b86:	2307      	movs	r3, #7
 8004b88:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	fb03 f202 	mul.w	r2, r3, r2
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b98:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004b9a:	e08f      	b.n	8004cbc <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d13a      	bne.n	8004c18 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8004ba2:	4b4a      	ldr	r3, [pc, #296]	; (8004ccc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004baa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bae:	f040 8086 	bne.w	8004cbe <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8004bb2:	4b46      	ldr	r3, [pc, #280]	; (8004ccc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d07f      	beq.n	8004cbe <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004bbe:	4b43      	ldr	r3, [pc, #268]	; (8004ccc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	091b      	lsrs	r3, r3, #4
 8004bc4:	f003 030f 	and.w	r3, r3, #15
 8004bc8:	3301      	adds	r3, #1
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd0:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004bd2:	4b3e      	ldr	r3, [pc, #248]	; (8004ccc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	0a1b      	lsrs	r3, r3, #8
 8004bd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bdc:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8004bde:	4b3b      	ldr	r3, [pc, #236]	; (8004ccc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	0edb      	lsrs	r3, r3, #27
 8004be4:	f003 031f 	and.w	r3, r3, #31
 8004be8:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d10a      	bne.n	8004c06 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8004bf0:	4b36      	ldr	r3, [pc, #216]	; (8004ccc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d002      	beq.n	8004c02 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8004bfc:	2311      	movs	r3, #17
 8004bfe:	617b      	str	r3, [r7, #20]
 8004c00:	e001      	b.n	8004c06 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8004c02:	2307      	movs	r3, #7
 8004c04:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	fb03 f202 	mul.w	r2, r3, r2
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c14:	61fb      	str	r3, [r7, #28]
 8004c16:	e052      	b.n	8004cbe <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	2b80      	cmp	r3, #128	; 0x80
 8004c1c:	d003      	beq.n	8004c26 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c24:	d109      	bne.n	8004c3a <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c26:	4b29      	ldr	r3, [pc, #164]	; (8004ccc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c32:	d144      	bne.n	8004cbe <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8004c34:	4b27      	ldr	r3, [pc, #156]	; (8004cd4 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8004c36:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c38:	e041      	b.n	8004cbe <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	2b20      	cmp	r3, #32
 8004c3e:	d003      	beq.n	8004c48 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c46:	d13a      	bne.n	8004cbe <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8004c48:	4b20      	ldr	r3, [pc, #128]	; (8004ccc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c54:	d133      	bne.n	8004cbe <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8004c56:	4b1d      	ldr	r3, [pc, #116]	; (8004ccc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d02d      	beq.n	8004cbe <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8004c62:	4b1a      	ldr	r3, [pc, #104]	; (8004ccc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	091b      	lsrs	r3, r3, #4
 8004c68:	f003 030f 	and.w	r3, r3, #15
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c74:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8004c76:	4b15      	ldr	r3, [pc, #84]	; (8004ccc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	0a1b      	lsrs	r3, r3, #8
 8004c7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c80:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8004c82:	4b12      	ldr	r3, [pc, #72]	; (8004ccc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004c84:	695b      	ldr	r3, [r3, #20]
 8004c86:	0edb      	lsrs	r3, r3, #27
 8004c88:	f003 031f 	and.w	r3, r3, #31
 8004c8c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d10a      	bne.n	8004caa <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8004c94:	4b0d      	ldr	r3, [pc, #52]	; (8004ccc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d002      	beq.n	8004ca6 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8004ca0:	2311      	movs	r3, #17
 8004ca2:	617b      	str	r3, [r7, #20]
 8004ca4:	e001      	b.n	8004caa <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8004ca6:	2307      	movs	r3, #7
 8004ca8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	fb03 f202 	mul.w	r2, r3, r2
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb8:	61fb      	str	r3, [r7, #28]
 8004cba:	e000      	b.n	8004cbe <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004cbc:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8004cbe:	69fb      	ldr	r3, [r7, #28]
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3724      	adds	r7, #36	; 0x24
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr
 8004ccc:	40021000 	.word	0x40021000
 8004cd0:	001fff68 	.word	0x001fff68
 8004cd4:	00f42400 	.word	0x00f42400

08004cd8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b08a      	sub	sp, #40	; 0x28
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d101      	bne.n	8004cea <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e1c7      	b.n	800507a <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d10e      	bne.n	8004d12 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a81      	ldr	r2, [pc, #516]	; (8004f00 <HAL_SAI_Init+0x228>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d107      	bne.n	8004d0e <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d103      	bne.n	8004d0e <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d001      	beq.n	8004d12 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e1b3      	b.n	800507a <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d106      	bne.n	8004d2c <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f7fc fb52 	bl	80013d0 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 f9b1 	bl	8005094 <SAI_Disable>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d001      	beq.n	8004d3c <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e19e      	b.n	800507a <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2202      	movs	r2, #2
 8004d40:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d00c      	beq.n	8004d66 <HAL_SAI_Init+0x8e>
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d80d      	bhi.n	8004d6c <HAL_SAI_Init+0x94>
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d002      	beq.n	8004d5a <HAL_SAI_Init+0x82>
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d003      	beq.n	8004d60 <HAL_SAI_Init+0x88>
 8004d58:	e008      	b.n	8004d6c <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8004d5e:	e008      	b.n	8004d72 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004d60:	2310      	movs	r3, #16
 8004d62:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8004d64:	e005      	b.n	8004d72 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8004d66:	2320      	movs	r3, #32
 8004d68:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8004d6a:	e002      	b.n	8004d72 <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8004d70:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	2b03      	cmp	r3, #3
 8004d78:	d81d      	bhi.n	8004db6 <HAL_SAI_Init+0xde>
 8004d7a:	a201      	add	r2, pc, #4	; (adr r2, 8004d80 <HAL_SAI_Init+0xa8>)
 8004d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d80:	08004d91 	.word	0x08004d91
 8004d84:	08004d97 	.word	0x08004d97
 8004d88:	08004d9f 	.word	0x08004d9f
 8004d8c:	08004da7 	.word	0x08004da7
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8004d90:	2300      	movs	r3, #0
 8004d92:	61fb      	str	r3, [r7, #28]
      break;
 8004d94:	e012      	b.n	8004dbc <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8004d96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d9a:	61fb      	str	r3, [r7, #28]
      break;
 8004d9c:	e00e      	b.n	8004dbc <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004d9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004da2:	61fb      	str	r3, [r7, #28]
      break;
 8004da4:	e00a      	b.n	8004dbc <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004da6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004daa:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dae:	f043 0301 	orr.w	r3, r3, #1
 8004db2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8004db4:	e002      	b.n	8004dbc <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8004db6:	2300      	movs	r3, #0
 8004db8:	61fb      	str	r3, [r7, #28]
      break;
 8004dba:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a4f      	ldr	r2, [pc, #316]	; (8004f00 <HAL_SAI_Init+0x228>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d004      	beq.n	8004dd0 <HAL_SAI_Init+0xf8>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a4e      	ldr	r2, [pc, #312]	; (8004f04 <HAL_SAI_Init+0x22c>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d103      	bne.n	8004dd8 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 8004dd0:	4a4d      	ldr	r2, [pc, #308]	; (8004f08 <HAL_SAI_Init+0x230>)
 8004dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd4:	6013      	str	r3, [r2, #0]
 8004dd6:	e002      	b.n	8004dde <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8004dd8:	4a4c      	ldr	r2, [pc, #304]	; (8004f0c <HAL_SAI_Init+0x234>)
 8004dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ddc:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	69db      	ldr	r3, [r3, #28]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d073      	beq.n	8004ece <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a45      	ldr	r2, [pc, #276]	; (8004f00 <HAL_SAI_Init+0x228>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d004      	beq.n	8004dfa <HAL_SAI_Init+0x122>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a43      	ldr	r2, [pc, #268]	; (8004f04 <HAL_SAI_Init+0x22c>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d105      	bne.n	8004e06 <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004dfa:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004dfe:	f7fe fd51 	bl	80038a4 <HAL_RCCEx_GetPeriphCLKFreq>
 8004e02:	61b8      	str	r0, [r7, #24]
 8004e04:	e004      	b.n	8004e10 <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004e06:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004e0a:	f7fe fd4b 	bl	80038a4 <HAL_RCCEx_GetPeriphCLKFreq>
 8004e0e:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	695b      	ldr	r3, [r3, #20]
 8004e14:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004e18:	d120      	bne.n	8004e5c <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1e:	2b04      	cmp	r3, #4
 8004e20:	d102      	bne.n	8004e28 <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8004e22:	2340      	movs	r3, #64	; 0x40
 8004e24:	613b      	str	r3, [r7, #16]
 8004e26:	e00a      	b.n	8004e3e <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2c:	2b08      	cmp	r3, #8
 8004e2e:	d103      	bne.n	8004e38 <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8004e30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e34:	613b      	str	r3, [r7, #16]
 8004e36:	e002      	b.n	8004e3e <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e3c:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8004e3e:	69ba      	ldr	r2, [r7, #24]
 8004e40:	4613      	mov	r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	4413      	add	r3, r2
 8004e46:	005b      	lsls	r3, r3, #1
 8004e48:	4619      	mov	r1, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	69db      	ldr	r3, [r3, #28]
 8004e4e:	693a      	ldr	r2, [r7, #16]
 8004e50:	fb02 f303 	mul.w	r3, r2, r3
 8004e54:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e58:	617b      	str	r3, [r7, #20]
 8004e5a:	e017      	b.n	8004e8c <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e64:	d101      	bne.n	8004e6a <HAL_SAI_Init+0x192>
 8004e66:	2302      	movs	r3, #2
 8004e68:	e000      	b.n	8004e6c <HAL_SAI_Init+0x194>
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8004e6e:	69ba      	ldr	r2, [r7, #24]
 8004e70:	4613      	mov	r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	4413      	add	r3, r2
 8004e76:	005b      	lsls	r3, r3, #1
 8004e78:	4619      	mov	r1, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	fb02 f303 	mul.w	r3, r2, r3
 8004e84:	021b      	lsls	r3, r3, #8
 8004e86:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e8a:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	4a20      	ldr	r2, [pc, #128]	; (8004f10 <HAL_SAI_Init+0x238>)
 8004e90:	fba2 2303 	umull	r2, r3, r2, r3
 8004e94:	08da      	lsrs	r2, r3, #3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8004e9a:	6979      	ldr	r1, [r7, #20]
 8004e9c:	4b1c      	ldr	r3, [pc, #112]	; (8004f10 <HAL_SAI_Init+0x238>)
 8004e9e:	fba3 2301 	umull	r2, r3, r3, r1
 8004ea2:	08da      	lsrs	r2, r3, #3
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4413      	add	r3, r2
 8004eaa:	005b      	lsls	r3, r3, #1
 8004eac:	1aca      	subs	r2, r1, r3
 8004eae:	2a08      	cmp	r2, #8
 8004eb0:	d904      	bls.n	8004ebc <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	1c5a      	adds	r2, r3, #1
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec0:	2b04      	cmp	r3, #4
 8004ec2:	d104      	bne.n	8004ece <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a1b      	ldr	r3, [r3, #32]
 8004ec8:	085a      	lsrs	r2, r3, #1
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d003      	beq.n	8004ede <HAL_SAI_Init+0x206>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d109      	bne.n	8004ef2 <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d101      	bne.n	8004eea <HAL_SAI_Init+0x212>
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	e001      	b.n	8004eee <HAL_SAI_Init+0x216>
 8004eea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004eee:	623b      	str	r3, [r7, #32]
 8004ef0:	e012      	b.n	8004f18 <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d10c      	bne.n	8004f14 <HAL_SAI_Init+0x23c>
 8004efa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004efe:	e00a      	b.n	8004f16 <HAL_SAI_Init+0x23e>
 8004f00:	40015404 	.word	0x40015404
 8004f04:	40015424 	.word	0x40015424
 8004f08:	40015400 	.word	0x40015400
 8004f0c:	40015800 	.word	0x40015800
 8004f10:	cccccccd 	.word	0xcccccccd
 8004f14:	2300      	movs	r3, #0
 8004f16:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	6819      	ldr	r1, [r3, #0]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	4b58      	ldr	r3, [pc, #352]	; (8005084 <HAL_SAI_Init+0x3ac>)
 8004f24:	400b      	ands	r3, r1
 8004f26:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6819      	ldr	r1, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685a      	ldr	r2, [r3, #4]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f36:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004f3c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f42:	431a      	orrs	r2, r3
 8004f44:	6a3b      	ldr	r3, [r7, #32]
 8004f46:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 8004f50:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004f5c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a1b      	ldr	r3, [r3, #32]
 8004f62:	051b      	lsls	r3, r3, #20
 8004f64:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8004f6a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	430a      	orrs	r2, r1
 8004f72:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	6812      	ldr	r2, [r2, #0]
 8004f7e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004f82:	f023 030f 	bic.w	r3, r3, #15
 8004f86:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6859      	ldr	r1, [r3, #4]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	699a      	ldr	r2, [r3, #24]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f96:	431a      	orrs	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9c:	431a      	orrs	r2, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	6899      	ldr	r1, [r3, #8]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	4b35      	ldr	r3, [pc, #212]	; (8005088 <HAL_SAI_Init+0x3b0>)
 8004fb2:	400b      	ands	r3, r1
 8004fb4:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	6899      	ldr	r1, [r3, #8]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fc0:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004fc6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
                           hsai->FrameInit.FSOffset |
 8004fcc:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSDefinition |
 8004fd2:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd8:	3b01      	subs	r3, #1
 8004fda:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8004fdc:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68d9      	ldr	r1, [r3, #12]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	f24f 0320 	movw	r3, #61472	; 0xf020
 8004ff4:	400b      	ands	r3, r1
 8004ff6:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68d9      	ldr	r1, [r3, #12]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005006:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800500c:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800500e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005014:	3b01      	subs	r3, #1
 8005016:	021b      	lsls	r3, r3, #8
 8005018:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	430a      	orrs	r2, r1
 8005020:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a19      	ldr	r2, [pc, #100]	; (800508c <HAL_SAI_Init+0x3b4>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d119      	bne.n	8005060 <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800502c:	4b18      	ldr	r3, [pc, #96]	; (8005090 <HAL_SAI_Init+0x3b8>)
 800502e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005030:	4a17      	ldr	r2, [pc, #92]	; (8005090 <HAL_SAI_Init+0x3b8>)
 8005032:	f023 0301 	bic.w	r3, r3, #1
 8005036:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800503e:	2b01      	cmp	r3, #1
 8005040:	d10e      	bne.n	8005060 <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504a:	3b01      	subs	r3, #1
 800504c:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800504e:	4910      	ldr	r1, [pc, #64]	; (8005090 <HAL_SAI_Init+0x3b8>)
 8005050:	4313      	orrs	r3, r2
 8005052:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8005054:	4b0e      	ldr	r3, [pc, #56]	; (8005090 <HAL_SAI_Init+0x3b8>)
 8005056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005058:	4a0d      	ldr	r2, [pc, #52]	; (8005090 <HAL_SAI_Init+0x3b8>)
 800505a:	f043 0301 	orr.w	r3, r3, #1
 800505e:	6453      	str	r3, [r2, #68]	; 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3728      	adds	r7, #40	; 0x28
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	f805c010 	.word	0xf805c010
 8005088:	fff88000 	.word	0xfff88000
 800508c:	40015404 	.word	0x40015404
 8005090:	40015400 	.word	0x40015400

08005094 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005094:	b480      	push	{r7}
 8005096:	b085      	sub	sp, #20
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800509c:	4b18      	ldr	r3, [pc, #96]	; (8005100 <SAI_Disable+0x6c>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a18      	ldr	r2, [pc, #96]	; (8005104 <SAI_Disable+0x70>)
 80050a2:	fba2 2303 	umull	r2, r3, r2, r3
 80050a6:	0b1b      	lsrs	r3, r3, #12
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80050ac:	2300      	movs	r3, #0
 80050ae:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80050be:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d10a      	bne.n	80050dc <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      status = HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	72fb      	strb	r3, [r7, #11]
      break;
 80050da:	e009      	b.n	80050f0 <SAI_Disable+0x5c>
    }
    count--;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	3b01      	subs	r3, #1
 80050e0:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d1e7      	bne.n	80050c0 <SAI_Disable+0x2c>

  return status;
 80050f0:	7afb      	ldrb	r3, [r7, #11]
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3714      	adds	r7, #20
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	20000000 	.word	0x20000000
 8005104:	95cbec1b 	.word	0x95cbec1b

08005108 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d101      	bne.n	800511a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e095      	b.n	8005246 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511e:	2b00      	cmp	r3, #0
 8005120:	d108      	bne.n	8005134 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800512a:	d009      	beq.n	8005140 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	61da      	str	r2, [r3, #28]
 8005132:	e005      	b.n	8005140 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b00      	cmp	r3, #0
 8005150:	d106      	bne.n	8005160 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f7fb ff80 	bl	8001060 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2202      	movs	r2, #2
 8005164:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005176:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005180:	d902      	bls.n	8005188 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005182:	2300      	movs	r3, #0
 8005184:	60fb      	str	r3, [r7, #12]
 8005186:	e002      	b.n	800518e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005188:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800518c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005196:	d007      	beq.n	80051a8 <HAL_SPI_Init+0xa0>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80051a0:	d002      	beq.n	80051a8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80051b8:	431a      	orrs	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	f003 0302 	and.w	r3, r3, #2
 80051c2:	431a      	orrs	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	695b      	ldr	r3, [r3, #20]
 80051c8:	f003 0301 	and.w	r3, r3, #1
 80051cc:	431a      	orrs	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051d6:	431a      	orrs	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	69db      	ldr	r3, [r3, #28]
 80051dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051e0:	431a      	orrs	r2, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ea:	ea42 0103 	orr.w	r1, r2, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	430a      	orrs	r2, r1
 80051fc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	0c1b      	lsrs	r3, r3, #16
 8005204:	f003 0204 	and.w	r2, r3, #4
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520c:	f003 0310 	and.w	r3, r3, #16
 8005210:	431a      	orrs	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005216:	f003 0308 	and.w	r3, r3, #8
 800521a:	431a      	orrs	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005224:	ea42 0103 	orr.w	r1, r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	430a      	orrs	r2, r1
 8005234:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b084      	sub	sp, #16
 8005252:	af00      	add	r7, sp, #0
 8005254:	60f8      	str	r0, [r7, #12]
 8005256:	60b9      	str	r1, [r7, #8]
 8005258:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d101      	bne.n	8005264 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e038      	b.n	80052d6 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800526a:	b2db      	uxtb	r3, r3
 800526c:	2b00      	cmp	r3, #0
 800526e:	d106      	bne.n	800527e <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	f7fc f89f 	bl	80013bc <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	3308      	adds	r3, #8
 8005286:	4619      	mov	r1, r3
 8005288:	4610      	mov	r0, r2
 800528a:	f001 fb8d 	bl	80069a8 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6818      	ldr	r0, [r3, #0]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	461a      	mov	r2, r3
 8005298:	68b9      	ldr	r1, [r7, #8]
 800529a:	f001 fc1f 	bl	8006adc <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6858      	ldr	r0, [r3, #4]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	689a      	ldr	r2, [r3, #8]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052aa:	6879      	ldr	r1, [r7, #4]
 80052ac:	f001 fc68 	bl	8006b80 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	6892      	ldr	r2, [r2, #8]
 80052b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	6892      	ldr	r2, [r2, #8]
 80052c4:	f041 0101 	orr.w	r1, r1, #1
 80052c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3710      	adds	r7, #16
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}

080052de <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052de:	b580      	push	{r7, lr}
 80052e0:	b082      	sub	sp, #8
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d101      	bne.n	80052f0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e042      	b.n	8005376 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d106      	bne.n	8005308 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f7fb ff0e 	bl	8001124 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2224      	movs	r2, #36	; 0x24
 800530c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f022 0201 	bic.w	r2, r2, #1
 800531e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005324:	2b00      	cmp	r3, #0
 8005326:	d002      	beq.n	800532e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 ffc1 	bl	80062b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 fcc2 	bl	8005cb8 <UART_SetConfig>
 8005334:	4603      	mov	r3, r0
 8005336:	2b01      	cmp	r3, #1
 8005338:	d101      	bne.n	800533e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e01b      	b.n	8005376 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	685a      	ldr	r2, [r3, #4]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800534c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	689a      	ldr	r2, [r3, #8]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800535c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f042 0201 	orr.w	r2, r2, #1
 800536c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f001 f840 	bl	80063f4 <UART_CheckIdleState>
 8005374:	4603      	mov	r3, r0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3708      	adds	r7, #8
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800537e:	b580      	push	{r7, lr}
 8005380:	b08a      	sub	sp, #40	; 0x28
 8005382:	af02      	add	r7, sp, #8
 8005384:	60f8      	str	r0, [r7, #12]
 8005386:	60b9      	str	r1, [r7, #8]
 8005388:	603b      	str	r3, [r7, #0]
 800538a:	4613      	mov	r3, r2
 800538c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005394:	2b20      	cmp	r3, #32
 8005396:	d17c      	bne.n	8005492 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d002      	beq.n	80053a4 <HAL_UART_Transmit+0x26>
 800539e:	88fb      	ldrh	r3, [r7, #6]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d101      	bne.n	80053a8 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e075      	b.n	8005494 <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2221      	movs	r2, #33	; 0x21
 80053b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053b8:	f7fc f994 	bl	80016e4 <HAL_GetTick>
 80053bc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	88fa      	ldrh	r2, [r7, #6]
 80053c2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	88fa      	ldrh	r2, [r7, #6]
 80053ca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053d6:	d108      	bne.n	80053ea <HAL_UART_Transmit+0x6c>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d104      	bne.n	80053ea <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80053e0:	2300      	movs	r3, #0
 80053e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	61bb      	str	r3, [r7, #24]
 80053e8:	e003      	b.n	80053f2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053ee:	2300      	movs	r3, #0
 80053f0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80053f2:	e031      	b.n	8005458 <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	9300      	str	r3, [sp, #0]
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	2200      	movs	r2, #0
 80053fc:	2180      	movs	r1, #128	; 0x80
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f001 f8a2 	bl	8006548 <UART_WaitOnFlagUntilTimeout>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d005      	beq.n	8005416 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2220      	movs	r2, #32
 800540e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e03e      	b.n	8005494 <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d10b      	bne.n	8005434 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	881a      	ldrh	r2, [r3, #0]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005428:	b292      	uxth	r2, r2
 800542a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	3302      	adds	r3, #2
 8005430:	61bb      	str	r3, [r7, #24]
 8005432:	e008      	b.n	8005446 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	781a      	ldrb	r2, [r3, #0]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	b292      	uxth	r2, r2
 800543e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	3301      	adds	r3, #1
 8005444:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800544c:	b29b      	uxth	r3, r3
 800544e:	3b01      	subs	r3, #1
 8005450:	b29a      	uxth	r2, r3
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800545e:	b29b      	uxth	r3, r3
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1c7      	bne.n	80053f4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	9300      	str	r3, [sp, #0]
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	2200      	movs	r2, #0
 800546c:	2140      	movs	r1, #64	; 0x40
 800546e:	68f8      	ldr	r0, [r7, #12]
 8005470:	f001 f86a 	bl	8006548 <UART_WaitOnFlagUntilTimeout>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d005      	beq.n	8005486 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2220      	movs	r2, #32
 800547e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e006      	b.n	8005494 <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2220      	movs	r2, #32
 800548a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800548e:	2300      	movs	r3, #0
 8005490:	e000      	b.n	8005494 <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 8005492:	2302      	movs	r3, #2
  }
}
 8005494:	4618      	mov	r0, r3
 8005496:	3720      	adds	r7, #32
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b08a      	sub	sp, #40	; 0x28
 80054a0:	af02      	add	r7, sp, #8
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	603b      	str	r3, [r7, #0]
 80054a8:	4613      	mov	r3, r2
 80054aa:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054b2:	2b20      	cmp	r3, #32
 80054b4:	f040 80b6 	bne.w	8005624 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d002      	beq.n	80054c4 <HAL_UART_Receive+0x28>
 80054be:	88fb      	ldrh	r3, [r7, #6]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d101      	bne.n	80054c8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e0ae      	b.n	8005626 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2222      	movs	r2, #34	; 0x22
 80054d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054de:	f7fc f901 	bl	80016e4 <HAL_GetTick>
 80054e2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	88fa      	ldrh	r2, [r7, #6]
 80054e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	88fa      	ldrh	r2, [r7, #6]
 80054f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054fc:	d10e      	bne.n	800551c <HAL_UART_Receive+0x80>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d105      	bne.n	8005512 <HAL_UART_Receive+0x76>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f240 12ff 	movw	r2, #511	; 0x1ff
 800550c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005510:	e02d      	b.n	800556e <HAL_UART_Receive+0xd2>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	22ff      	movs	r2, #255	; 0xff
 8005516:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800551a:	e028      	b.n	800556e <HAL_UART_Receive+0xd2>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d10d      	bne.n	8005540 <HAL_UART_Receive+0xa4>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d104      	bne.n	8005536 <HAL_UART_Receive+0x9a>
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	22ff      	movs	r2, #255	; 0xff
 8005530:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005534:	e01b      	b.n	800556e <HAL_UART_Receive+0xd2>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	227f      	movs	r2, #127	; 0x7f
 800553a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800553e:	e016      	b.n	800556e <HAL_UART_Receive+0xd2>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005548:	d10d      	bne.n	8005566 <HAL_UART_Receive+0xca>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d104      	bne.n	800555c <HAL_UART_Receive+0xc0>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	227f      	movs	r2, #127	; 0x7f
 8005556:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800555a:	e008      	b.n	800556e <HAL_UART_Receive+0xd2>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	223f      	movs	r2, #63	; 0x3f
 8005560:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005564:	e003      	b.n	800556e <HAL_UART_Receive+0xd2>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005574:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800557e:	d108      	bne.n	8005592 <HAL_UART_Receive+0xf6>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d104      	bne.n	8005592 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005588:	2300      	movs	r3, #0
 800558a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	61bb      	str	r3, [r7, #24]
 8005590:	e003      	b.n	800559a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005596:	2300      	movs	r3, #0
 8005598:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800559a:	e037      	b.n	800560c <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	9300      	str	r3, [sp, #0]
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	2200      	movs	r2, #0
 80055a4:	2120      	movs	r1, #32
 80055a6:	68f8      	ldr	r0, [r7, #12]
 80055a8:	f000 ffce 	bl	8006548 <UART_WaitOnFlagUntilTimeout>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d005      	beq.n	80055be <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2220      	movs	r2, #32
 80055b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e033      	b.n	8005626 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d10c      	bne.n	80055de <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80055ca:	b29a      	uxth	r2, r3
 80055cc:	8a7b      	ldrh	r3, [r7, #18]
 80055ce:	4013      	ands	r3, r2
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	3302      	adds	r3, #2
 80055da:	61bb      	str	r3, [r7, #24]
 80055dc:	e00d      	b.n	80055fa <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	b2da      	uxtb	r2, r3
 80055e8:	8a7b      	ldrh	r3, [r7, #18]
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	4013      	ands	r3, r2
 80055ee:	b2da      	uxtb	r2, r3
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	3301      	adds	r3, #1
 80055f8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005600:	b29b      	uxth	r3, r3
 8005602:	3b01      	subs	r3, #1
 8005604:	b29a      	uxth	r2, r3
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005612:	b29b      	uxth	r3, r3
 8005614:	2b00      	cmp	r3, #0
 8005616:	d1c1      	bne.n	800559c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2220      	movs	r2, #32
 800561c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8005620:	2300      	movs	r3, #0
 8005622:	e000      	b.n	8005626 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8005624:	2302      	movs	r3, #2
  }
}
 8005626:	4618      	mov	r0, r3
 8005628:	3720      	adds	r7, #32
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
	...

08005630 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b0ba      	sub	sp, #232	; 0xe8
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	69db      	ldr	r3, [r3, #28]
 800563e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005656:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800565a:	f640 030f 	movw	r3, #2063	; 0x80f
 800565e:	4013      	ands	r3, r2
 8005660:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005664:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005668:	2b00      	cmp	r3, #0
 800566a:	d11b      	bne.n	80056a4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800566c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005670:	f003 0320 	and.w	r3, r3, #32
 8005674:	2b00      	cmp	r3, #0
 8005676:	d015      	beq.n	80056a4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800567c:	f003 0320 	and.w	r3, r3, #32
 8005680:	2b00      	cmp	r3, #0
 8005682:	d105      	bne.n	8005690 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005684:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d009      	beq.n	80056a4 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005694:	2b00      	cmp	r3, #0
 8005696:	f000 82e3 	beq.w	8005c60 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	4798      	blx	r3
      }
      return;
 80056a2:	e2dd      	b.n	8005c60 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 80056a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f000 8123 	beq.w	80058f4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80056ae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80056b2:	4b8d      	ldr	r3, [pc, #564]	; (80058e8 <HAL_UART_IRQHandler+0x2b8>)
 80056b4:	4013      	ands	r3, r2
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d106      	bne.n	80056c8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80056ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80056be:	4b8b      	ldr	r3, [pc, #556]	; (80058ec <HAL_UART_IRQHandler+0x2bc>)
 80056c0:	4013      	ands	r3, r2
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f000 8116 	beq.w	80058f4 <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80056c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056cc:	f003 0301 	and.w	r3, r3, #1
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d011      	beq.n	80056f8 <HAL_UART_IRQHandler+0xc8>
 80056d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00b      	beq.n	80056f8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2201      	movs	r2, #1
 80056e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ee:	f043 0201 	orr.w	r2, r3, #1
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056fc:	f003 0302 	and.w	r3, r3, #2
 8005700:	2b00      	cmp	r3, #0
 8005702:	d011      	beq.n	8005728 <HAL_UART_IRQHandler+0xf8>
 8005704:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005708:	f003 0301 	and.w	r3, r3, #1
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00b      	beq.n	8005728 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2202      	movs	r2, #2
 8005716:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800571e:	f043 0204 	orr.w	r2, r3, #4
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800572c:	f003 0304 	and.w	r3, r3, #4
 8005730:	2b00      	cmp	r3, #0
 8005732:	d011      	beq.n	8005758 <HAL_UART_IRQHandler+0x128>
 8005734:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005738:	f003 0301 	and.w	r3, r3, #1
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00b      	beq.n	8005758 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2204      	movs	r2, #4
 8005746:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800574e:	f043 0202 	orr.w	r2, r3, #2
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800575c:	f003 0308 	and.w	r3, r3, #8
 8005760:	2b00      	cmp	r3, #0
 8005762:	d017      	beq.n	8005794 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005768:	f003 0320 	and.w	r3, r3, #32
 800576c:	2b00      	cmp	r3, #0
 800576e:	d105      	bne.n	800577c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005770:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005774:	4b5c      	ldr	r3, [pc, #368]	; (80058e8 <HAL_UART_IRQHandler+0x2b8>)
 8005776:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005778:	2b00      	cmp	r3, #0
 800577a:	d00b      	beq.n	8005794 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2208      	movs	r2, #8
 8005782:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800578a:	f043 0208 	orr.w	r2, r3, #8
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005798:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800579c:	2b00      	cmp	r3, #0
 800579e:	d012      	beq.n	80057c6 <HAL_UART_IRQHandler+0x196>
 80057a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00c      	beq.n	80057c6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057bc:	f043 0220 	orr.w	r2, r3, #32
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f000 8249 	beq.w	8005c64 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80057d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057d6:	f003 0320 	and.w	r3, r3, #32
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d013      	beq.n	8005806 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80057de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057e2:	f003 0320 	and.w	r3, r3, #32
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d105      	bne.n	80057f6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80057ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d007      	beq.n	8005806 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d003      	beq.n	8005806 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800580c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800581a:	2b40      	cmp	r3, #64	; 0x40
 800581c:	d005      	beq.n	800582a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800581e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005822:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005826:	2b00      	cmp	r3, #0
 8005828:	d054      	beq.n	80058d4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 fef3 	bl	8006616 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800583a:	2b40      	cmp	r3, #64	; 0x40
 800583c:	d146      	bne.n	80058cc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	3308      	adds	r3, #8
 8005844:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005848:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800584c:	e853 3f00 	ldrex	r3, [r3]
 8005850:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005854:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005858:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800585c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	3308      	adds	r3, #8
 8005866:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800586a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800586e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005872:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005876:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800587a:	e841 2300 	strex	r3, r2, [r1]
 800587e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005882:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d1d9      	bne.n	800583e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005890:	2b00      	cmp	r3, #0
 8005892:	d017      	beq.n	80058c4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800589a:	4a15      	ldr	r2, [pc, #84]	; (80058f0 <HAL_UART_IRQHandler+0x2c0>)
 800589c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058a4:	4618      	mov	r0, r3
 80058a6:	f7fc f989 	bl	8001bbc <HAL_DMA_Abort_IT>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d019      	beq.n	80058e4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80058be:	4610      	mov	r0, r2
 80058c0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058c2:	e00f      	b.n	80058e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 f9e1 	bl	8005c8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058ca:	e00b      	b.n	80058e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 f9dd 	bl	8005c8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058d2:	e007      	b.n	80058e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 f9d9 	bl	8005c8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80058e2:	e1bf      	b.n	8005c64 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058e4:	bf00      	nop
    return;
 80058e6:	e1bd      	b.n	8005c64 <HAL_UART_IRQHandler+0x634>
 80058e8:	10000001 	.word	0x10000001
 80058ec:	04000120 	.word	0x04000120
 80058f0:	080066e3 	.word	0x080066e3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	f040 8153 	bne.w	8005ba4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80058fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005902:	f003 0310 	and.w	r3, r3, #16
 8005906:	2b00      	cmp	r3, #0
 8005908:	f000 814c 	beq.w	8005ba4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800590c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005910:	f003 0310 	and.w	r3, r3, #16
 8005914:	2b00      	cmp	r3, #0
 8005916:	f000 8145 	beq.w	8005ba4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2210      	movs	r2, #16
 8005920:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800592c:	2b40      	cmp	r3, #64	; 0x40
 800592e:	f040 80bb 	bne.w	8005aa8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005940:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005944:	2b00      	cmp	r3, #0
 8005946:	f000 818f 	beq.w	8005c68 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005950:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005954:	429a      	cmp	r2, r3
 8005956:	f080 8187 	bcs.w	8005c68 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005960:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0320 	and.w	r3, r3, #32
 8005972:	2b00      	cmp	r3, #0
 8005974:	f040 8087 	bne.w	8005a86 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005980:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005984:	e853 3f00 	ldrex	r3, [r3]
 8005988:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800598c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005990:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005994:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	461a      	mov	r2, r3
 800599e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80059a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80059a6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80059ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80059b2:	e841 2300 	strex	r3, r2, [r1]
 80059b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80059ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d1da      	bne.n	8005978 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	3308      	adds	r3, #8
 80059c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059cc:	e853 3f00 	ldrex	r3, [r3]
 80059d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80059d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059d4:	f023 0301 	bic.w	r3, r3, #1
 80059d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	3308      	adds	r3, #8
 80059e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80059e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80059ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80059ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80059f2:	e841 2300 	strex	r3, r2, [r1]
 80059f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80059f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1e1      	bne.n	80059c2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	3308      	adds	r3, #8
 8005a04:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a08:	e853 3f00 	ldrex	r3, [r3]
 8005a0c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005a0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	3308      	adds	r3, #8
 8005a1e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005a22:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005a24:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a26:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005a28:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005a2a:	e841 2300 	strex	r3, r2, [r1]
 8005a2e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005a30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1e3      	bne.n	80059fe <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2220      	movs	r2, #32
 8005a3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a4c:	e853 3f00 	ldrex	r3, [r3]
 8005a50:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005a52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a54:	f023 0310 	bic.w	r3, r3, #16
 8005a58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	461a      	mov	r2, r3
 8005a62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a66:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a68:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a6a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a6e:	e841 2300 	strex	r3, r2, [r1]
 8005a72:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005a74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1e4      	bne.n	8005a44 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a80:	4618      	mov	r0, r3
 8005a82:	f7fc f83f 	bl	8001b04 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2202      	movs	r2, #2
 8005a8a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 f8fd 	bl	8005ca0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005aa6:	e0df      	b.n	8005c68 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	f000 80d1 	beq.w	8005c6c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8005aca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	f000 80cc 	beq.w	8005c6c <HAL_UART_IRQHandler+0x63c>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005adc:	e853 3f00 	ldrex	r3, [r3]
 8005ae0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ae4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ae8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	461a      	mov	r2, r3
 8005af2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005af6:	647b      	str	r3, [r7, #68]	; 0x44
 8005af8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005afa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005afc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005afe:	e841 2300 	strex	r3, r2, [r1]
 8005b02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1e4      	bne.n	8005ad4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	3308      	adds	r3, #8
 8005b10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b14:	e853 3f00 	ldrex	r3, [r3]
 8005b18:	623b      	str	r3, [r7, #32]
   return(result);
 8005b1a:	6a3b      	ldr	r3, [r7, #32]
 8005b1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b20:	f023 0301 	bic.w	r3, r3, #1
 8005b24:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	3308      	adds	r3, #8
 8005b2e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005b32:	633a      	str	r2, [r7, #48]	; 0x30
 8005b34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b3a:	e841 2300 	strex	r3, r2, [r1]
 8005b3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1e1      	bne.n	8005b0a <HAL_UART_IRQHandler+0x4da>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2220      	movs	r2, #32
 8005b4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	e853 3f00 	ldrex	r3, [r3]
 8005b66:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f023 0310 	bic.w	r3, r3, #16
 8005b6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	461a      	mov	r2, r3
 8005b78:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005b7c:	61fb      	str	r3, [r7, #28]
 8005b7e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b80:	69b9      	ldr	r1, [r7, #24]
 8005b82:	69fa      	ldr	r2, [r7, #28]
 8005b84:	e841 2300 	strex	r3, r2, [r1]
 8005b88:	617b      	str	r3, [r7, #20]
   return(result);
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d1e4      	bne.n	8005b5a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2202      	movs	r2, #2
 8005b94:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b96:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 f87f 	bl	8005ca0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ba2:	e063      	b.n	8005c6c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ba8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00e      	beq.n	8005bce <HAL_UART_IRQHandler+0x59e>
 8005bb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d008      	beq.n	8005bce <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005bc4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 fdcc 	bl	8006764 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005bcc:	e051      	b.n	8005c72 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d014      	beq.n	8005c04 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005bda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d105      	bne.n	8005bf2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005be6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d008      	beq.n	8005c04 <HAL_UART_IRQHandler+0x5d4>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d03a      	beq.n	8005c70 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	4798      	blx	r3
    }
    return;
 8005c02:	e035      	b.n	8005c70 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005c04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d009      	beq.n	8005c24 <HAL_UART_IRQHandler+0x5f4>
 8005c10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d003      	beq.n	8005c24 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 fd76 	bl	800670e <UART_EndTransmit_IT>
    return;
 8005c22:	e026      	b.n	8005c72 <HAL_UART_IRQHandler+0x642>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d009      	beq.n	8005c44 <HAL_UART_IRQHandler+0x614>
 8005c30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c34:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d003      	beq.n	8005c44 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 fda5 	bl	800678c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c42:	e016      	b.n	8005c72 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005c44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d010      	beq.n	8005c72 <HAL_UART_IRQHandler+0x642>
 8005c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	da0c      	bge.n	8005c72 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 fd8d 	bl	8006778 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c5e:	e008      	b.n	8005c72 <HAL_UART_IRQHandler+0x642>
      return;
 8005c60:	bf00      	nop
 8005c62:	e006      	b.n	8005c72 <HAL_UART_IRQHandler+0x642>
    return;
 8005c64:	bf00      	nop
 8005c66:	e004      	b.n	8005c72 <HAL_UART_IRQHandler+0x642>
      return;
 8005c68:	bf00      	nop
 8005c6a:	e002      	b.n	8005c72 <HAL_UART_IRQHandler+0x642>
      return;
 8005c6c:	bf00      	nop
 8005c6e:	e000      	b.n	8005c72 <HAL_UART_IRQHandler+0x642>
    return;
 8005c70:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8005c72:	37e8      	adds	r7, #232	; 0xe8
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005c80:	bf00      	nop
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005c94:	bf00      	nop
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	460b      	mov	r3, r1
 8005caa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cbc:	b08c      	sub	sp, #48	; 0x30
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	689a      	ldr	r2, [r3, #8]
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	431a      	orrs	r2, r3
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	695b      	ldr	r3, [r3, #20]
 8005cd6:	431a      	orrs	r2, r3
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	69db      	ldr	r3, [r3, #28]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	4baa      	ldr	r3, [pc, #680]	; (8005f90 <UART_SetConfig+0x2d8>)
 8005ce8:	4013      	ands	r3, r2
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	6812      	ldr	r2, [r2, #0]
 8005cee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005cf0:	430b      	orrs	r3, r1
 8005cf2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	68da      	ldr	r2, [r3, #12]
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	430a      	orrs	r2, r1
 8005d08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a9f      	ldr	r2, [pc, #636]	; (8005f94 <UART_SetConfig+0x2dc>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d004      	beq.n	8005d24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	6a1b      	ldr	r3, [r3, #32]
 8005d1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d20:	4313      	orrs	r3, r2
 8005d22:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005d2e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005d32:	697a      	ldr	r2, [r7, #20]
 8005d34:	6812      	ldr	r2, [r2, #0]
 8005d36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d38:	430b      	orrs	r3, r1
 8005d3a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d42:	f023 010f 	bic.w	r1, r3, #15
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	430a      	orrs	r2, r1
 8005d50:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a90      	ldr	r2, [pc, #576]	; (8005f98 <UART_SetConfig+0x2e0>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d125      	bne.n	8005da8 <UART_SetConfig+0xf0>
 8005d5c:	4b8f      	ldr	r3, [pc, #572]	; (8005f9c <UART_SetConfig+0x2e4>)
 8005d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d62:	f003 0303 	and.w	r3, r3, #3
 8005d66:	2b03      	cmp	r3, #3
 8005d68:	d81a      	bhi.n	8005da0 <UART_SetConfig+0xe8>
 8005d6a:	a201      	add	r2, pc, #4	; (adr r2, 8005d70 <UART_SetConfig+0xb8>)
 8005d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d70:	08005d81 	.word	0x08005d81
 8005d74:	08005d91 	.word	0x08005d91
 8005d78:	08005d89 	.word	0x08005d89
 8005d7c:	08005d99 	.word	0x08005d99
 8005d80:	2301      	movs	r3, #1
 8005d82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d86:	e116      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005d88:	2302      	movs	r3, #2
 8005d8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d8e:	e112      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005d90:	2304      	movs	r3, #4
 8005d92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d96:	e10e      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005d98:	2308      	movs	r3, #8
 8005d9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d9e:	e10a      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005da0:	2310      	movs	r3, #16
 8005da2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005da6:	e106      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a7c      	ldr	r2, [pc, #496]	; (8005fa0 <UART_SetConfig+0x2e8>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d138      	bne.n	8005e24 <UART_SetConfig+0x16c>
 8005db2:	4b7a      	ldr	r3, [pc, #488]	; (8005f9c <UART_SetConfig+0x2e4>)
 8005db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db8:	f003 030c 	and.w	r3, r3, #12
 8005dbc:	2b0c      	cmp	r3, #12
 8005dbe:	d82d      	bhi.n	8005e1c <UART_SetConfig+0x164>
 8005dc0:	a201      	add	r2, pc, #4	; (adr r2, 8005dc8 <UART_SetConfig+0x110>)
 8005dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc6:	bf00      	nop
 8005dc8:	08005dfd 	.word	0x08005dfd
 8005dcc:	08005e1d 	.word	0x08005e1d
 8005dd0:	08005e1d 	.word	0x08005e1d
 8005dd4:	08005e1d 	.word	0x08005e1d
 8005dd8:	08005e0d 	.word	0x08005e0d
 8005ddc:	08005e1d 	.word	0x08005e1d
 8005de0:	08005e1d 	.word	0x08005e1d
 8005de4:	08005e1d 	.word	0x08005e1d
 8005de8:	08005e05 	.word	0x08005e05
 8005dec:	08005e1d 	.word	0x08005e1d
 8005df0:	08005e1d 	.word	0x08005e1d
 8005df4:	08005e1d 	.word	0x08005e1d
 8005df8:	08005e15 	.word	0x08005e15
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e02:	e0d8      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005e04:	2302      	movs	r3, #2
 8005e06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e0a:	e0d4      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005e0c:	2304      	movs	r3, #4
 8005e0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e12:	e0d0      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005e14:	2308      	movs	r3, #8
 8005e16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e1a:	e0cc      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005e1c:	2310      	movs	r3, #16
 8005e1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e22:	e0c8      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a5e      	ldr	r2, [pc, #376]	; (8005fa4 <UART_SetConfig+0x2ec>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d125      	bne.n	8005e7a <UART_SetConfig+0x1c2>
 8005e2e:	4b5b      	ldr	r3, [pc, #364]	; (8005f9c <UART_SetConfig+0x2e4>)
 8005e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e34:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005e38:	2b30      	cmp	r3, #48	; 0x30
 8005e3a:	d016      	beq.n	8005e6a <UART_SetConfig+0x1b2>
 8005e3c:	2b30      	cmp	r3, #48	; 0x30
 8005e3e:	d818      	bhi.n	8005e72 <UART_SetConfig+0x1ba>
 8005e40:	2b20      	cmp	r3, #32
 8005e42:	d00a      	beq.n	8005e5a <UART_SetConfig+0x1a2>
 8005e44:	2b20      	cmp	r3, #32
 8005e46:	d814      	bhi.n	8005e72 <UART_SetConfig+0x1ba>
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d002      	beq.n	8005e52 <UART_SetConfig+0x19a>
 8005e4c:	2b10      	cmp	r3, #16
 8005e4e:	d008      	beq.n	8005e62 <UART_SetConfig+0x1aa>
 8005e50:	e00f      	b.n	8005e72 <UART_SetConfig+0x1ba>
 8005e52:	2300      	movs	r3, #0
 8005e54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e58:	e0ad      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005e5a:	2302      	movs	r3, #2
 8005e5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e60:	e0a9      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005e62:	2304      	movs	r3, #4
 8005e64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e68:	e0a5      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005e6a:	2308      	movs	r3, #8
 8005e6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e70:	e0a1      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005e72:	2310      	movs	r3, #16
 8005e74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e78:	e09d      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a4a      	ldr	r2, [pc, #296]	; (8005fa8 <UART_SetConfig+0x2f0>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d125      	bne.n	8005ed0 <UART_SetConfig+0x218>
 8005e84:	4b45      	ldr	r3, [pc, #276]	; (8005f9c <UART_SetConfig+0x2e4>)
 8005e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e8a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005e8e:	2bc0      	cmp	r3, #192	; 0xc0
 8005e90:	d016      	beq.n	8005ec0 <UART_SetConfig+0x208>
 8005e92:	2bc0      	cmp	r3, #192	; 0xc0
 8005e94:	d818      	bhi.n	8005ec8 <UART_SetConfig+0x210>
 8005e96:	2b80      	cmp	r3, #128	; 0x80
 8005e98:	d00a      	beq.n	8005eb0 <UART_SetConfig+0x1f8>
 8005e9a:	2b80      	cmp	r3, #128	; 0x80
 8005e9c:	d814      	bhi.n	8005ec8 <UART_SetConfig+0x210>
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d002      	beq.n	8005ea8 <UART_SetConfig+0x1f0>
 8005ea2:	2b40      	cmp	r3, #64	; 0x40
 8005ea4:	d008      	beq.n	8005eb8 <UART_SetConfig+0x200>
 8005ea6:	e00f      	b.n	8005ec8 <UART_SetConfig+0x210>
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005eae:	e082      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005eb0:	2302      	movs	r3, #2
 8005eb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005eb6:	e07e      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005eb8:	2304      	movs	r3, #4
 8005eba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ebe:	e07a      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005ec0:	2308      	movs	r3, #8
 8005ec2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ec6:	e076      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005ec8:	2310      	movs	r3, #16
 8005eca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ece:	e072      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a35      	ldr	r2, [pc, #212]	; (8005fac <UART_SetConfig+0x2f4>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d12a      	bne.n	8005f30 <UART_SetConfig+0x278>
 8005eda:	4b30      	ldr	r3, [pc, #192]	; (8005f9c <UART_SetConfig+0x2e4>)
 8005edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ee0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ee4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ee8:	d01a      	beq.n	8005f20 <UART_SetConfig+0x268>
 8005eea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005eee:	d81b      	bhi.n	8005f28 <UART_SetConfig+0x270>
 8005ef0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ef4:	d00c      	beq.n	8005f10 <UART_SetConfig+0x258>
 8005ef6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005efa:	d815      	bhi.n	8005f28 <UART_SetConfig+0x270>
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d003      	beq.n	8005f08 <UART_SetConfig+0x250>
 8005f00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f04:	d008      	beq.n	8005f18 <UART_SetConfig+0x260>
 8005f06:	e00f      	b.n	8005f28 <UART_SetConfig+0x270>
 8005f08:	2300      	movs	r3, #0
 8005f0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f0e:	e052      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005f10:	2302      	movs	r3, #2
 8005f12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f16:	e04e      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005f18:	2304      	movs	r3, #4
 8005f1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f1e:	e04a      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005f20:	2308      	movs	r3, #8
 8005f22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f26:	e046      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005f28:	2310      	movs	r3, #16
 8005f2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f2e:	e042      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a17      	ldr	r2, [pc, #92]	; (8005f94 <UART_SetConfig+0x2dc>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d13a      	bne.n	8005fb0 <UART_SetConfig+0x2f8>
 8005f3a:	4b18      	ldr	r3, [pc, #96]	; (8005f9c <UART_SetConfig+0x2e4>)
 8005f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f40:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005f44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f48:	d01a      	beq.n	8005f80 <UART_SetConfig+0x2c8>
 8005f4a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f4e:	d81b      	bhi.n	8005f88 <UART_SetConfig+0x2d0>
 8005f50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f54:	d00c      	beq.n	8005f70 <UART_SetConfig+0x2b8>
 8005f56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f5a:	d815      	bhi.n	8005f88 <UART_SetConfig+0x2d0>
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d003      	beq.n	8005f68 <UART_SetConfig+0x2b0>
 8005f60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f64:	d008      	beq.n	8005f78 <UART_SetConfig+0x2c0>
 8005f66:	e00f      	b.n	8005f88 <UART_SetConfig+0x2d0>
 8005f68:	2300      	movs	r3, #0
 8005f6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f6e:	e022      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005f70:	2302      	movs	r3, #2
 8005f72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f76:	e01e      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005f78:	2304      	movs	r3, #4
 8005f7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f7e:	e01a      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005f80:	2308      	movs	r3, #8
 8005f82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f86:	e016      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005f88:	2310      	movs	r3, #16
 8005f8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f8e:	e012      	b.n	8005fb6 <UART_SetConfig+0x2fe>
 8005f90:	cfff69f3 	.word	0xcfff69f3
 8005f94:	40008000 	.word	0x40008000
 8005f98:	40013800 	.word	0x40013800
 8005f9c:	40021000 	.word	0x40021000
 8005fa0:	40004400 	.word	0x40004400
 8005fa4:	40004800 	.word	0x40004800
 8005fa8:	40004c00 	.word	0x40004c00
 8005fac:	40005000 	.word	0x40005000
 8005fb0:	2310      	movs	r3, #16
 8005fb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4aae      	ldr	r2, [pc, #696]	; (8006274 <UART_SetConfig+0x5bc>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	f040 8097 	bne.w	80060f0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005fc2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005fc6:	2b08      	cmp	r3, #8
 8005fc8:	d823      	bhi.n	8006012 <UART_SetConfig+0x35a>
 8005fca:	a201      	add	r2, pc, #4	; (adr r2, 8005fd0 <UART_SetConfig+0x318>)
 8005fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd0:	08005ff5 	.word	0x08005ff5
 8005fd4:	08006013 	.word	0x08006013
 8005fd8:	08005ffd 	.word	0x08005ffd
 8005fdc:	08006013 	.word	0x08006013
 8005fe0:	08006003 	.word	0x08006003
 8005fe4:	08006013 	.word	0x08006013
 8005fe8:	08006013 	.word	0x08006013
 8005fec:	08006013 	.word	0x08006013
 8005ff0:	0800600b 	.word	0x0800600b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ff4:	f7fc ffdc 	bl	8002fb0 <HAL_RCC_GetPCLK1Freq>
 8005ff8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ffa:	e010      	b.n	800601e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ffc:	4b9e      	ldr	r3, [pc, #632]	; (8006278 <UART_SetConfig+0x5c0>)
 8005ffe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006000:	e00d      	b.n	800601e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006002:	f7fc ff3f 	bl	8002e84 <HAL_RCC_GetSysClockFreq>
 8006006:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006008:	e009      	b.n	800601e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800600a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800600e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006010:	e005      	b.n	800601e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006012:	2300      	movs	r3, #0
 8006014:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800601c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800601e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006020:	2b00      	cmp	r3, #0
 8006022:	f000 8130 	beq.w	8006286 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602a:	4a94      	ldr	r2, [pc, #592]	; (800627c <UART_SetConfig+0x5c4>)
 800602c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006030:	461a      	mov	r2, r3
 8006032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006034:	fbb3 f3f2 	udiv	r3, r3, r2
 8006038:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	685a      	ldr	r2, [r3, #4]
 800603e:	4613      	mov	r3, r2
 8006040:	005b      	lsls	r3, r3, #1
 8006042:	4413      	add	r3, r2
 8006044:	69ba      	ldr	r2, [r7, #24]
 8006046:	429a      	cmp	r2, r3
 8006048:	d305      	bcc.n	8006056 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006050:	69ba      	ldr	r2, [r7, #24]
 8006052:	429a      	cmp	r2, r3
 8006054:	d903      	bls.n	800605e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800605c:	e113      	b.n	8006286 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800605e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006060:	2200      	movs	r2, #0
 8006062:	60bb      	str	r3, [r7, #8]
 8006064:	60fa      	str	r2, [r7, #12]
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606a:	4a84      	ldr	r2, [pc, #528]	; (800627c <UART_SetConfig+0x5c4>)
 800606c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006070:	b29b      	uxth	r3, r3
 8006072:	2200      	movs	r2, #0
 8006074:	603b      	str	r3, [r7, #0]
 8006076:	607a      	str	r2, [r7, #4]
 8006078:	e9d7 2300 	ldrd	r2, r3, [r7]
 800607c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006080:	f7fa f90e 	bl	80002a0 <__aeabi_uldivmod>
 8006084:	4602      	mov	r2, r0
 8006086:	460b      	mov	r3, r1
 8006088:	4610      	mov	r0, r2
 800608a:	4619      	mov	r1, r3
 800608c:	f04f 0200 	mov.w	r2, #0
 8006090:	f04f 0300 	mov.w	r3, #0
 8006094:	020b      	lsls	r3, r1, #8
 8006096:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800609a:	0202      	lsls	r2, r0, #8
 800609c:	6979      	ldr	r1, [r7, #20]
 800609e:	6849      	ldr	r1, [r1, #4]
 80060a0:	0849      	lsrs	r1, r1, #1
 80060a2:	2000      	movs	r0, #0
 80060a4:	460c      	mov	r4, r1
 80060a6:	4605      	mov	r5, r0
 80060a8:	eb12 0804 	adds.w	r8, r2, r4
 80060ac:	eb43 0905 	adc.w	r9, r3, r5
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	469a      	mov	sl, r3
 80060b8:	4693      	mov	fp, r2
 80060ba:	4652      	mov	r2, sl
 80060bc:	465b      	mov	r3, fp
 80060be:	4640      	mov	r0, r8
 80060c0:	4649      	mov	r1, r9
 80060c2:	f7fa f8ed 	bl	80002a0 <__aeabi_uldivmod>
 80060c6:	4602      	mov	r2, r0
 80060c8:	460b      	mov	r3, r1
 80060ca:	4613      	mov	r3, r2
 80060cc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80060ce:	6a3b      	ldr	r3, [r7, #32]
 80060d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060d4:	d308      	bcc.n	80060e8 <UART_SetConfig+0x430>
 80060d6:	6a3b      	ldr	r3, [r7, #32]
 80060d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060dc:	d204      	bcs.n	80060e8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	6a3a      	ldr	r2, [r7, #32]
 80060e4:	60da      	str	r2, [r3, #12]
 80060e6:	e0ce      	b.n	8006286 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80060ee:	e0ca      	b.n	8006286 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	69db      	ldr	r3, [r3, #28]
 80060f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060f8:	d166      	bne.n	80061c8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80060fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80060fe:	2b08      	cmp	r3, #8
 8006100:	d827      	bhi.n	8006152 <UART_SetConfig+0x49a>
 8006102:	a201      	add	r2, pc, #4	; (adr r2, 8006108 <UART_SetConfig+0x450>)
 8006104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006108:	0800612d 	.word	0x0800612d
 800610c:	08006135 	.word	0x08006135
 8006110:	0800613d 	.word	0x0800613d
 8006114:	08006153 	.word	0x08006153
 8006118:	08006143 	.word	0x08006143
 800611c:	08006153 	.word	0x08006153
 8006120:	08006153 	.word	0x08006153
 8006124:	08006153 	.word	0x08006153
 8006128:	0800614b 	.word	0x0800614b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800612c:	f7fc ff40 	bl	8002fb0 <HAL_RCC_GetPCLK1Freq>
 8006130:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006132:	e014      	b.n	800615e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006134:	f7fc ff52 	bl	8002fdc <HAL_RCC_GetPCLK2Freq>
 8006138:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800613a:	e010      	b.n	800615e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800613c:	4b4e      	ldr	r3, [pc, #312]	; (8006278 <UART_SetConfig+0x5c0>)
 800613e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006140:	e00d      	b.n	800615e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006142:	f7fc fe9f 	bl	8002e84 <HAL_RCC_GetSysClockFreq>
 8006146:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006148:	e009      	b.n	800615e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800614a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800614e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006150:	e005      	b.n	800615e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006152:	2300      	movs	r3, #0
 8006154:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800615c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800615e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006160:	2b00      	cmp	r3, #0
 8006162:	f000 8090 	beq.w	8006286 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616a:	4a44      	ldr	r2, [pc, #272]	; (800627c <UART_SetConfig+0x5c4>)
 800616c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006170:	461a      	mov	r2, r3
 8006172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006174:	fbb3 f3f2 	udiv	r3, r3, r2
 8006178:	005a      	lsls	r2, r3, #1
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	085b      	lsrs	r3, r3, #1
 8006180:	441a      	add	r2, r3
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	fbb2 f3f3 	udiv	r3, r2, r3
 800618a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800618c:	6a3b      	ldr	r3, [r7, #32]
 800618e:	2b0f      	cmp	r3, #15
 8006190:	d916      	bls.n	80061c0 <UART_SetConfig+0x508>
 8006192:	6a3b      	ldr	r3, [r7, #32]
 8006194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006198:	d212      	bcs.n	80061c0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800619a:	6a3b      	ldr	r3, [r7, #32]
 800619c:	b29b      	uxth	r3, r3
 800619e:	f023 030f 	bic.w	r3, r3, #15
 80061a2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061a4:	6a3b      	ldr	r3, [r7, #32]
 80061a6:	085b      	lsrs	r3, r3, #1
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	f003 0307 	and.w	r3, r3, #7
 80061ae:	b29a      	uxth	r2, r3
 80061b0:	8bfb      	ldrh	r3, [r7, #30]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	8bfa      	ldrh	r2, [r7, #30]
 80061bc:	60da      	str	r2, [r3, #12]
 80061be:	e062      	b.n	8006286 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80061c6:	e05e      	b.n	8006286 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80061c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80061cc:	2b08      	cmp	r3, #8
 80061ce:	d828      	bhi.n	8006222 <UART_SetConfig+0x56a>
 80061d0:	a201      	add	r2, pc, #4	; (adr r2, 80061d8 <UART_SetConfig+0x520>)
 80061d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d6:	bf00      	nop
 80061d8:	080061fd 	.word	0x080061fd
 80061dc:	08006205 	.word	0x08006205
 80061e0:	0800620d 	.word	0x0800620d
 80061e4:	08006223 	.word	0x08006223
 80061e8:	08006213 	.word	0x08006213
 80061ec:	08006223 	.word	0x08006223
 80061f0:	08006223 	.word	0x08006223
 80061f4:	08006223 	.word	0x08006223
 80061f8:	0800621b 	.word	0x0800621b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061fc:	f7fc fed8 	bl	8002fb0 <HAL_RCC_GetPCLK1Freq>
 8006200:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006202:	e014      	b.n	800622e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006204:	f7fc feea 	bl	8002fdc <HAL_RCC_GetPCLK2Freq>
 8006208:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800620a:	e010      	b.n	800622e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800620c:	4b1a      	ldr	r3, [pc, #104]	; (8006278 <UART_SetConfig+0x5c0>)
 800620e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006210:	e00d      	b.n	800622e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006212:	f7fc fe37 	bl	8002e84 <HAL_RCC_GetSysClockFreq>
 8006216:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006218:	e009      	b.n	800622e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800621a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800621e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006220:	e005      	b.n	800622e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006222:	2300      	movs	r3, #0
 8006224:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800622c:	bf00      	nop
    }

    if (pclk != 0U)
 800622e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006230:	2b00      	cmp	r3, #0
 8006232:	d028      	beq.n	8006286 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006238:	4a10      	ldr	r2, [pc, #64]	; (800627c <UART_SetConfig+0x5c4>)
 800623a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800623e:	461a      	mov	r2, r3
 8006240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006242:	fbb3 f2f2 	udiv	r2, r3, r2
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	085b      	lsrs	r3, r3, #1
 800624c:	441a      	add	r2, r3
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	fbb2 f3f3 	udiv	r3, r2, r3
 8006256:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006258:	6a3b      	ldr	r3, [r7, #32]
 800625a:	2b0f      	cmp	r3, #15
 800625c:	d910      	bls.n	8006280 <UART_SetConfig+0x5c8>
 800625e:	6a3b      	ldr	r3, [r7, #32]
 8006260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006264:	d20c      	bcs.n	8006280 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006266:	6a3b      	ldr	r3, [r7, #32]
 8006268:	b29a      	uxth	r2, r3
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	60da      	str	r2, [r3, #12]
 8006270:	e009      	b.n	8006286 <UART_SetConfig+0x5ce>
 8006272:	bf00      	nop
 8006274:	40008000 	.word	0x40008000
 8006278:	00f42400 	.word	0x00f42400
 800627c:	0800aa24 	.word	0x0800aa24
      }
      else
      {
        ret = HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	2201      	movs	r2, #1
 800628a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	2201      	movs	r2, #1
 8006292:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	2200      	movs	r2, #0
 800629a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	2200      	movs	r2, #0
 80062a0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80062a2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3730      	adds	r7, #48	; 0x30
 80062aa:	46bd      	mov	sp, r7
 80062ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080062b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062bc:	f003 0308 	and.w	r3, r3, #8
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d00a      	beq.n	80062da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	430a      	orrs	r2, r1
 80062d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062de:	f003 0301 	and.w	r3, r3, #1
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d00a      	beq.n	80062fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	430a      	orrs	r2, r1
 80062fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006300:	f003 0302 	and.w	r3, r3, #2
 8006304:	2b00      	cmp	r3, #0
 8006306:	d00a      	beq.n	800631e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	430a      	orrs	r2, r1
 800631c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006322:	f003 0304 	and.w	r3, r3, #4
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00a      	beq.n	8006340 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	430a      	orrs	r2, r1
 800633e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006344:	f003 0310 	and.w	r3, r3, #16
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00a      	beq.n	8006362 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	430a      	orrs	r2, r1
 8006360:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006366:	f003 0320 	and.w	r3, r3, #32
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00a      	beq.n	8006384 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	430a      	orrs	r2, r1
 8006382:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800638c:	2b00      	cmp	r3, #0
 800638e:	d01a      	beq.n	80063c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	430a      	orrs	r2, r1
 80063a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063ae:	d10a      	bne.n	80063c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	430a      	orrs	r2, r1
 80063c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d00a      	beq.n	80063e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	430a      	orrs	r2, r1
 80063e6:	605a      	str	r2, [r3, #4]
  }
}
 80063e8:	bf00      	nop
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b098      	sub	sp, #96	; 0x60
 80063f8:	af02      	add	r7, sp, #8
 80063fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006404:	f7fb f96e 	bl	80016e4 <HAL_GetTick>
 8006408:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 0308 	and.w	r3, r3, #8
 8006414:	2b08      	cmp	r3, #8
 8006416:	d12f      	bne.n	8006478 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006418:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800641c:	9300      	str	r3, [sp, #0]
 800641e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006420:	2200      	movs	r2, #0
 8006422:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 f88e 	bl	8006548 <UART_WaitOnFlagUntilTimeout>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d022      	beq.n	8006478 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800643a:	e853 3f00 	ldrex	r3, [r3]
 800643e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006442:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006446:	653b      	str	r3, [r7, #80]	; 0x50
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	461a      	mov	r2, r3
 800644e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006450:	647b      	str	r3, [r7, #68]	; 0x44
 8006452:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006454:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006456:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006458:	e841 2300 	strex	r3, r2, [r1]
 800645c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800645e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006460:	2b00      	cmp	r3, #0
 8006462:	d1e6      	bne.n	8006432 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2220      	movs	r2, #32
 8006468:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006474:	2303      	movs	r3, #3
 8006476:	e063      	b.n	8006540 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f003 0304 	and.w	r3, r3, #4
 8006482:	2b04      	cmp	r3, #4
 8006484:	d149      	bne.n	800651a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006486:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800648a:	9300      	str	r3, [sp, #0]
 800648c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800648e:	2200      	movs	r2, #0
 8006490:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f000 f857 	bl	8006548 <UART_WaitOnFlagUntilTimeout>
 800649a:	4603      	mov	r3, r0
 800649c:	2b00      	cmp	r3, #0
 800649e:	d03c      	beq.n	800651a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a8:	e853 3f00 	ldrex	r3, [r3]
 80064ac:	623b      	str	r3, [r7, #32]
   return(result);
 80064ae:	6a3b      	ldr	r3, [r7, #32]
 80064b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	461a      	mov	r2, r3
 80064bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064be:	633b      	str	r3, [r7, #48]	; 0x30
 80064c0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064c6:	e841 2300 	strex	r3, r2, [r1]
 80064ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80064cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1e6      	bne.n	80064a0 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	3308      	adds	r3, #8
 80064d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	e853 3f00 	ldrex	r3, [r3]
 80064e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f023 0301 	bic.w	r3, r3, #1
 80064e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	3308      	adds	r3, #8
 80064f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064f2:	61fa      	str	r2, [r7, #28]
 80064f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f6:	69b9      	ldr	r1, [r7, #24]
 80064f8:	69fa      	ldr	r2, [r7, #28]
 80064fa:	e841 2300 	strex	r3, r2, [r1]
 80064fe:	617b      	str	r3, [r7, #20]
   return(result);
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d1e5      	bne.n	80064d2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2220      	movs	r2, #32
 800650a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	e012      	b.n	8006540 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2220      	movs	r2, #32
 800651e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2220      	movs	r2, #32
 8006526:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800653e:	2300      	movs	r3, #0
}
 8006540:	4618      	mov	r0, r3
 8006542:	3758      	adds	r7, #88	; 0x58
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	603b      	str	r3, [r7, #0]
 8006554:	4613      	mov	r3, r2
 8006556:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006558:	e049      	b.n	80065ee <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006560:	d045      	beq.n	80065ee <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006562:	f7fb f8bf 	bl	80016e4 <HAL_GetTick>
 8006566:	4602      	mov	r2, r0
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	1ad3      	subs	r3, r2, r3
 800656c:	69ba      	ldr	r2, [r7, #24]
 800656e:	429a      	cmp	r2, r3
 8006570:	d302      	bcc.n	8006578 <UART_WaitOnFlagUntilTimeout+0x30>
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d101      	bne.n	800657c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006578:	2303      	movs	r3, #3
 800657a:	e048      	b.n	800660e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 0304 	and.w	r3, r3, #4
 8006586:	2b00      	cmp	r3, #0
 8006588:	d031      	beq.n	80065ee <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	69db      	ldr	r3, [r3, #28]
 8006590:	f003 0308 	and.w	r3, r3, #8
 8006594:	2b08      	cmp	r3, #8
 8006596:	d110      	bne.n	80065ba <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2208      	movs	r2, #8
 800659e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065a0:	68f8      	ldr	r0, [r7, #12]
 80065a2:	f000 f838 	bl	8006616 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2208      	movs	r2, #8
 80065aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e029      	b.n	800660e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	69db      	ldr	r3, [r3, #28]
 80065c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065c8:	d111      	bne.n	80065ee <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065d4:	68f8      	ldr	r0, [r7, #12]
 80065d6:	f000 f81e 	bl	8006616 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2220      	movs	r2, #32
 80065de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2200      	movs	r2, #0
 80065e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e00f      	b.n	800660e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	69da      	ldr	r2, [r3, #28]
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	4013      	ands	r3, r2
 80065f8:	68ba      	ldr	r2, [r7, #8]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	bf0c      	ite	eq
 80065fe:	2301      	moveq	r3, #1
 8006600:	2300      	movne	r3, #0
 8006602:	b2db      	uxtb	r3, r3
 8006604:	461a      	mov	r2, r3
 8006606:	79fb      	ldrb	r3, [r7, #7]
 8006608:	429a      	cmp	r2, r3
 800660a:	d0a6      	beq.n	800655a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3710      	adds	r7, #16
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006616:	b480      	push	{r7}
 8006618:	b095      	sub	sp, #84	; 0x54
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006626:	e853 3f00 	ldrex	r3, [r3]
 800662a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800662c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006632:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	461a      	mov	r2, r3
 800663a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800663c:	643b      	str	r3, [r7, #64]	; 0x40
 800663e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006640:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006642:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006644:	e841 2300 	strex	r3, r2, [r1]
 8006648:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800664a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800664c:	2b00      	cmp	r3, #0
 800664e:	d1e6      	bne.n	800661e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	3308      	adds	r3, #8
 8006656:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006658:	6a3b      	ldr	r3, [r7, #32]
 800665a:	e853 3f00 	ldrex	r3, [r3]
 800665e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006666:	f023 0301 	bic.w	r3, r3, #1
 800666a:	64bb      	str	r3, [r7, #72]	; 0x48
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	3308      	adds	r3, #8
 8006672:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006674:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006676:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006678:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800667a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800667c:	e841 2300 	strex	r3, r2, [r1]
 8006680:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006684:	2b00      	cmp	r3, #0
 8006686:	d1e3      	bne.n	8006650 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800668c:	2b01      	cmp	r3, #1
 800668e:	d118      	bne.n	80066c2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	e853 3f00 	ldrex	r3, [r3]
 800669c:	60bb      	str	r3, [r7, #8]
   return(result);
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	f023 0310 	bic.w	r3, r3, #16
 80066a4:	647b      	str	r3, [r7, #68]	; 0x44
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	461a      	mov	r2, r3
 80066ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066ae:	61bb      	str	r3, [r7, #24]
 80066b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b2:	6979      	ldr	r1, [r7, #20]
 80066b4:	69ba      	ldr	r2, [r7, #24]
 80066b6:	e841 2300 	strex	r3, r2, [r1]
 80066ba:	613b      	str	r3, [r7, #16]
   return(result);
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d1e6      	bne.n	8006690 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2220      	movs	r2, #32
 80066c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80066d6:	bf00      	nop
 80066d8:	3754      	adds	r7, #84	; 0x54
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr

080066e2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066e2:	b580      	push	{r7, lr}
 80066e4:	b084      	sub	sp, #16
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006700:	68f8      	ldr	r0, [r7, #12]
 8006702:	f7ff fac3 	bl	8005c8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006706:	bf00      	nop
 8006708:	3710      	adds	r7, #16
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}

0800670e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800670e:	b580      	push	{r7, lr}
 8006710:	b088      	sub	sp, #32
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	e853 3f00 	ldrex	r3, [r3]
 8006722:	60bb      	str	r3, [r7, #8]
   return(result);
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800672a:	61fb      	str	r3, [r7, #28]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	461a      	mov	r2, r3
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	61bb      	str	r3, [r7, #24]
 8006736:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006738:	6979      	ldr	r1, [r7, #20]
 800673a:	69ba      	ldr	r2, [r7, #24]
 800673c:	e841 2300 	strex	r3, r2, [r1]
 8006740:	613b      	str	r3, [r7, #16]
   return(result);
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d1e6      	bne.n	8006716 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2220      	movs	r2, #32
 800674c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f7ff fa8e 	bl	8005c78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800675c:	bf00      	nop
 800675e:	3720      	adds	r7, #32
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800676c:	bf00      	nop
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006780:	bf00      	nop
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006794:	bf00      	nop
 8006796:	370c      	adds	r7, #12
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b085      	sub	sp, #20
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d101      	bne.n	80067b6 <HAL_UARTEx_DisableFifoMode+0x16>
 80067b2:	2302      	movs	r3, #2
 80067b4:	e027      	b.n	8006806 <HAL_UARTEx_DisableFifoMode+0x66>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2201      	movs	r2, #1
 80067ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2224      	movs	r2, #36	; 0x24
 80067c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f022 0201 	bic.w	r2, r2, #1
 80067dc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80067e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2220      	movs	r2, #32
 80067f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3714      	adds	r7, #20
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr

08006812 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006812:	b580      	push	{r7, lr}
 8006814:	b084      	sub	sp, #16
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
 800681a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006822:	2b01      	cmp	r3, #1
 8006824:	d101      	bne.n	800682a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006826:	2302      	movs	r3, #2
 8006828:	e02d      	b.n	8006886 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2201      	movs	r2, #1
 800682e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2224      	movs	r2, #36	; 0x24
 8006836:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f022 0201 	bic.w	r2, r2, #1
 8006850:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	683a      	ldr	r2, [r7, #0]
 8006862:	430a      	orrs	r2, r1
 8006864:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 f850 	bl	800690c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2220      	movs	r2, #32
 8006878:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	3710      	adds	r7, #16
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}

0800688e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800688e:	b580      	push	{r7, lr}
 8006890:	b084      	sub	sp, #16
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
 8006896:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d101      	bne.n	80068a6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80068a2:	2302      	movs	r3, #2
 80068a4:	e02d      	b.n	8006902 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2201      	movs	r2, #1
 80068aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2224      	movs	r2, #36	; 0x24
 80068b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f022 0201 	bic.w	r2, r2, #1
 80068cc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	683a      	ldr	r2, [r7, #0]
 80068de:	430a      	orrs	r2, r1
 80068e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 f812 	bl	800690c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2220      	movs	r2, #32
 80068f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	3710      	adds	r7, #16
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
	...

0800690c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800690c:	b480      	push	{r7}
 800690e:	b085      	sub	sp, #20
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006918:	2b00      	cmp	r3, #0
 800691a:	d108      	bne.n	800692e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800692c:	e031      	b.n	8006992 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800692e:	2308      	movs	r3, #8
 8006930:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006932:	2308      	movs	r3, #8
 8006934:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	0e5b      	lsrs	r3, r3, #25
 800693e:	b2db      	uxtb	r3, r3
 8006940:	f003 0307 	and.w	r3, r3, #7
 8006944:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	0f5b      	lsrs	r3, r3, #29
 800694e:	b2db      	uxtb	r3, r3
 8006950:	f003 0307 	and.w	r3, r3, #7
 8006954:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006956:	7bbb      	ldrb	r3, [r7, #14]
 8006958:	7b3a      	ldrb	r2, [r7, #12]
 800695a:	4911      	ldr	r1, [pc, #68]	; (80069a0 <UARTEx_SetNbDataToProcess+0x94>)
 800695c:	5c8a      	ldrb	r2, [r1, r2]
 800695e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006962:	7b3a      	ldrb	r2, [r7, #12]
 8006964:	490f      	ldr	r1, [pc, #60]	; (80069a4 <UARTEx_SetNbDataToProcess+0x98>)
 8006966:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006968:	fb93 f3f2 	sdiv	r3, r3, r2
 800696c:	b29a      	uxth	r2, r3
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006974:	7bfb      	ldrb	r3, [r7, #15]
 8006976:	7b7a      	ldrb	r2, [r7, #13]
 8006978:	4909      	ldr	r1, [pc, #36]	; (80069a0 <UARTEx_SetNbDataToProcess+0x94>)
 800697a:	5c8a      	ldrb	r2, [r1, r2]
 800697c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006980:	7b7a      	ldrb	r2, [r7, #13]
 8006982:	4908      	ldr	r1, [pc, #32]	; (80069a4 <UARTEx_SetNbDataToProcess+0x98>)
 8006984:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006986:	fb93 f3f2 	sdiv	r3, r3, r2
 800698a:	b29a      	uxth	r2, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006992:	bf00      	nop
 8006994:	3714      	adds	r7, #20
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr
 800699e:	bf00      	nop
 80069a0:	0800aa3c 	.word	0x0800aa3c
 80069a4:	0800aa44 	.word	0x0800aa44

080069a8 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b087      	sub	sp, #28
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069bc:	683a      	ldr	r2, [r7, #0]
 80069be:	6812      	ldr	r2, [r2, #0]
 80069c0:	f023 0101 	bic.w	r1, r3, #1
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	2b08      	cmp	r3, #8
 80069d0:	d102      	bne.n	80069d8 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80069d2:	2340      	movs	r3, #64	; 0x40
 80069d4:	617b      	str	r3, [r7, #20]
 80069d6:	e001      	b.n	80069dc <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80069d8:	2300      	movs	r3, #0
 80069da:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80069e8:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80069ee:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80069f4:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80069fa:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8006a00:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8006a06:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8006a0c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8006a12:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8006a18:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a26:	693a      	ldr	r2, [r7, #16]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a30:	693a      	ldr	r2, [r7, #16]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a3a:	693a      	ldr	r2, [r7, #16]
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a44:	693a      	ldr	r2, [r7, #16]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 8006a4a:	4b23      	ldr	r3, [pc, #140]	; (8006ad8 <FMC_NORSRAM_Init+0x130>)
 8006a4c:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a54:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006a5c:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8006a64:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8006a6c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	43db      	mvns	r3, r3
 8006a7c:	ea02 0103 	and.w	r1, r2, r3
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	4319      	orrs	r1, r3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a96:	d10c      	bne.n	8006ab2 <FMC_NORSRAM_Init+0x10a>
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d008      	beq.n	8006ab2 <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aac:	431a      	orrs	r2, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d006      	beq.n	8006ac8 <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ac2:	431a      	orrs	r2, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	371c      	adds	r7, #28
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	0008fb7f 	.word	0x0008fb7f

08006adc <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b087      	sub	sp, #28
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
#if defined(FMC_BTRx_DATAHLD)
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	1c5a      	adds	r2, r3, #1
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	011b      	lsls	r3, r3, #4
 8006afc:	431a      	orrs	r2, r3
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	021b      	lsls	r3, r3, #8
 8006b04:	431a      	orrs	r2, r3
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	079b      	lsls	r3, r3, #30
 8006b0c:	431a      	orrs	r2, r3
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	041b      	lsls	r3, r3, #16
 8006b14:	431a      	orrs	r2, r3
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	695b      	ldr	r3, [r3, #20]
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	051b      	lsls	r3, r3, #20
 8006b1e:	431a      	orrs	r2, r3
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	699b      	ldr	r3, [r3, #24]
 8006b24:	3b02      	subs	r3, #2
 8006b26:	061b      	lsls	r3, r3, #24
 8006b28:	ea42 0103 	orr.w	r1, r2, r3
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	69db      	ldr	r3, [r3, #28]
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	3201      	adds	r2, #1
 8006b34:	4319      	orrs	r1, r3
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b48:	d113      	bne.n	8006b72 <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006b52:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	695b      	ldr	r3, [r3, #20]
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	051b      	lsls	r3, r3, #20
 8006b5c:	697a      	ldr	r2, [r7, #20]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	431a      	orrs	r2, r3
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	371c      	adds	r7, #28
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b085      	sub	sp, #20
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	607a      	str	r2, [r7, #4]
 8006b8c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b94:	d121      	bne.n	8006bda <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FMC_BTRx_DATAHLD)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b9e:	f003 627f 	and.w	r2, r3, #267386880	; 0xff00000
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	6819      	ldr	r1, [r3, #0]
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	011b      	lsls	r3, r3, #4
 8006bac:	4319      	orrs	r1, r3
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	021b      	lsls	r3, r3, #8
 8006bb4:	4319      	orrs	r1, r3
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	079b      	lsls	r3, r3, #30
 8006bbc:	4319      	orrs	r1, r3
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	69db      	ldr	r3, [r3, #28]
 8006bc2:	4319      	orrs	r1, r3
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	041b      	lsls	r3, r3, #16
 8006bca:	430b      	orrs	r3, r1
 8006bcc:	ea42 0103 	orr.w	r1, r2, r3
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006bd8:	e005      	b.n	8006be6 <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006be2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8006be6:	2300      	movs	r3, #0
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3714      	adds	r7, #20
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <ai_log_err>:

static ai_buffer* ai_input;
static ai_buffer* ai_output;

static void ai_log_err(const ai_error err, const char *fct)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b082      	sub	sp, #8
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d009      	beq.n	8006c18 <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 8006c04:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8006c06:	461a      	mov	r2, r3
        err.type, err.code);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8006c0e:	6839      	ldr	r1, [r7, #0]
 8006c10:	4806      	ldr	r0, [pc, #24]	; (8006c2c <ai_log_err+0x38>)
 8006c12:	f002 fd25 	bl	8009660 <iprintf>
 8006c16:	e008      	b.n	8006c2a <ai_log_err+0x36>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8006c18:	793b      	ldrb	r3, [r7, #4]
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8006c22:	461a      	mov	r2, r3
 8006c24:	4802      	ldr	r0, [pc, #8]	; (8006c30 <ai_log_err+0x3c>)
 8006c26:	f002 fd1b 	bl	8009660 <iprintf>

  do {} while (1);
 8006c2a:	e7fe      	b.n	8006c2a <ai_log_err+0x36>
 8006c2c:	0800a8c0 	.word	0x0800a8c0
 8006c30:	0800a8f4 	.word	0x0800a8f4

08006c34 <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle *act_addr)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b086      	sub	sp, #24
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* Create and initialize an instance of the model */
  err = ai_wine_quality_create_and_init(&wine_quality, act_addr, NULL);
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	6879      	ldr	r1, [r7, #4]
 8006c40:	4828      	ldr	r0, [pc, #160]	; (8006ce4 <ai_boostrap+0xb0>)
 8006c42:	f000 fabf 	bl	80071c4 <ai_wine_quality_create_and_init>
 8006c46:	4603      	mov	r3, r0
 8006c48:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 8006c4a:	7b3b      	ldrb	r3, [r7, #12]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d006      	beq.n	8006c5e <ai_boostrap+0x2a>
    ai_log_err(err, "ai_wine_quality_create_and_init");
 8006c50:	4925      	ldr	r1, [pc, #148]	; (8006ce8 <ai_boostrap+0xb4>)
 8006c52:	68f8      	ldr	r0, [r7, #12]
 8006c54:	f7ff ffce 	bl	8006bf4 <ai_log_err>
    return -1;
 8006c58:	f04f 33ff 	mov.w	r3, #4294967295
 8006c5c:	e03e      	b.n	8006cdc <ai_boostrap+0xa8>
  }

  ai_input = ai_wine_quality_inputs_get(wine_quality, NULL);
 8006c5e:	4b21      	ldr	r3, [pc, #132]	; (8006ce4 <ai_boostrap+0xb0>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2100      	movs	r1, #0
 8006c64:	4618      	mov	r0, r3
 8006c66:	f000 fb21 	bl	80072ac <ai_wine_quality_inputs_get>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	4a1f      	ldr	r2, [pc, #124]	; (8006cec <ai_boostrap+0xb8>)
 8006c6e:	6013      	str	r3, [r2, #0]
  ai_output = ai_wine_quality_outputs_get(wine_quality, NULL);
 8006c70:	4b1c      	ldr	r3, [pc, #112]	; (8006ce4 <ai_boostrap+0xb0>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2100      	movs	r1, #0
 8006c76:	4618      	mov	r0, r3
 8006c78:	f000 fb32 	bl	80072e0 <ai_wine_quality_outputs_get>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	4a1c      	ldr	r2, [pc, #112]	; (8006cf0 <ai_boostrap+0xbc>)
 8006c80:	6013      	str	r3, [r2, #0]

#if defined(AI_WINE_QUALITY_INPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-inputs" option is used, memory buffer can be
   *  used from the activations buffer. This is not mandatory.
   */
  for (int idx=0; idx < AI_WINE_QUALITY_IN_NUM; idx++) {
 8006c82:	2300      	movs	r3, #0
 8006c84:	617b      	str	r3, [r7, #20]
 8006c86:	e00f      	b.n	8006ca8 <ai_boostrap+0x74>
	data_ins[idx] = ai_input[idx].data;
 8006c88:	4b18      	ldr	r3, [pc, #96]	; (8006cec <ai_boostrap+0xb8>)
 8006c8a:	6819      	ldr	r1, [r3, #0]
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	4613      	mov	r3, r2
 8006c90:	00db      	lsls	r3, r3, #3
 8006c92:	1a9b      	subs	r3, r3, r2
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	440b      	add	r3, r1
 8006c98:	685a      	ldr	r2, [r3, #4]
 8006c9a:	4916      	ldr	r1, [pc, #88]	; (8006cf4 <ai_boostrap+0xc0>)
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_WINE_QUALITY_IN_NUM; idx++) {
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	617b      	str	r3, [r7, #20]
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	ddec      	ble.n	8006c88 <ai_boostrap+0x54>

#if defined(AI_WINE_QUALITY_OUTPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-outputs" option is used, memory buffer can be
   *  used from the activations buffer. This is no mandatory.
   */
  for (int idx=0; idx < AI_WINE_QUALITY_OUT_NUM; idx++) {
 8006cae:	2300      	movs	r3, #0
 8006cb0:	613b      	str	r3, [r7, #16]
 8006cb2:	e00f      	b.n	8006cd4 <ai_boostrap+0xa0>
	data_outs[idx] = ai_output[idx].data;
 8006cb4:	4b0e      	ldr	r3, [pc, #56]	; (8006cf0 <ai_boostrap+0xbc>)
 8006cb6:	6819      	ldr	r1, [r3, #0]
 8006cb8:	693a      	ldr	r2, [r7, #16]
 8006cba:	4613      	mov	r3, r2
 8006cbc:	00db      	lsls	r3, r3, #3
 8006cbe:	1a9b      	subs	r3, r3, r2
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	440b      	add	r3, r1
 8006cc4:	685a      	ldr	r2, [r3, #4]
 8006cc6:	490c      	ldr	r1, [pc, #48]	; (8006cf8 <ai_boostrap+0xc4>)
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_WINE_QUALITY_OUT_NUM; idx++) {
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	613b      	str	r3, [r7, #16]
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	ddec      	ble.n	8006cb4 <ai_boostrap+0x80>
  for (int idx=0; idx < AI_WINE_QUALITY_OUT_NUM; idx++) {
	ai_output[idx].data = data_outs[idx];
  }
#endif

  return 0;
 8006cda:	2300      	movs	r3, #0
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3718      	adds	r7, #24
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	20000f90 	.word	0x20000f90
 8006ce8:	0800a924 	.word	0x0800a924
 8006cec:	20000f94 	.word	0x20000f94
 8006cf0:	20000f98 	.word	0x20000f98
 8006cf4:	20000cb4 	.word	0x20000cb4
 8006cf8:	20000cb8 	.word	0x20000cb8

08006cfc <ai_run>:

static int ai_run(void)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
  ai_i32 batch;

  batch = ai_wine_quality_run(wine_quality, ai_input, ai_output);
 8006d02:	4b0f      	ldr	r3, [pc, #60]	; (8006d40 <ai_run+0x44>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a0f      	ldr	r2, [pc, #60]	; (8006d44 <ai_run+0x48>)
 8006d08:	6811      	ldr	r1, [r2, #0]
 8006d0a:	4a0f      	ldr	r2, [pc, #60]	; (8006d48 <ai_run+0x4c>)
 8006d0c:	6812      	ldr	r2, [r2, #0]
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f000 fb3c 	bl	800738c <ai_wine_quality_run>
 8006d14:	6078      	str	r0, [r7, #4]
  if (batch != 1) {
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d00c      	beq.n	8006d36 <ai_run+0x3a>
    ai_log_err(ai_wine_quality_get_error(wine_quality),
 8006d1c:	4b08      	ldr	r3, [pc, #32]	; (8006d40 <ai_run+0x44>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4618      	mov	r0, r3
 8006d22:	f000 fa2d 	bl	8007180 <ai_wine_quality_get_error>
 8006d26:	4603      	mov	r3, r0
 8006d28:	4908      	ldr	r1, [pc, #32]	; (8006d4c <ai_run+0x50>)
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f7ff ff62 	bl	8006bf4 <ai_log_err>
        "ai_wine_quality_run");
    return -1;
 8006d30:	f04f 33ff 	mov.w	r3, #4294967295
 8006d34:	e000      	b.n	8006d38 <ai_run+0x3c>
  }

  return 0;
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3708      	adds	r7, #8
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	20000f90 	.word	0x20000f90
 8006d44:	20000f94 	.word	0x20000f94
 8006d48:	20000f98 	.word	0x20000f98
 8006d4c:	0800a944 	.word	0x0800a944

08006d50 <acquire_and_process_data>:

/* USER CODE BEGIN 2 */
int acquire_and_process_data(ai_i8* data[])
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b086      	sub	sp, #24
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 /* fill the inputs of the c-model */
	uint8_t tmp[4] = {0};
 8006d58:	2300      	movs	r3, #0
 8006d5a:	60fb      	str	r3, [r7, #12]
	#if _DEBUG
	float input[12] = {0}; // Stocker les valeurs d'entrée en mode Debug
	#endif

	  int i,k;
	  for (i = 0; i < 12; i++){
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	617b      	str	r3, [r7, #20]
 8006d60:	e01f      	b.n	8006da2 <acquire_and_process_data+0x52>
		  HAL_UART_Receive(&huart2, (uint8_t *) tmp, sizeof(tmp), 100);
 8006d62:	f107 010c 	add.w	r1, r7, #12
 8006d66:	2364      	movs	r3, #100	; 0x64
 8006d68:	2204      	movs	r2, #4
 8006d6a:	4812      	ldr	r0, [pc, #72]	; (8006db4 <acquire_and_process_data+0x64>)
 8006d6c:	f7fe fb96 	bl	800549c <HAL_UART_Receive>
		#if _DEBUG
		input[i] = *(float*) &tmp;
		#endif

	// Copier les bytes reçus dans le tableau de données
		  for ( k = 0; k < 4; k++){
 8006d70:	2300      	movs	r3, #0
 8006d72:	613b      	str	r3, [r7, #16]
 8006d74:	e00f      	b.n	8006d96 <acquire_and_process_data+0x46>
			((uint8_t *) data)[(i*4)+k] = tmp[k];
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	009a      	lsls	r2, r3, #2
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	461a      	mov	r2, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4413      	add	r3, r2
 8006d84:	f107 010c 	add.w	r1, r7, #12
 8006d88:	693a      	ldr	r2, [r7, #16]
 8006d8a:	440a      	add	r2, r1
 8006d8c:	7812      	ldrb	r2, [r2, #0]
 8006d8e:	701a      	strb	r2, [r3, #0]
		  for ( k = 0; k < 4; k++){
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	3301      	adds	r3, #1
 8006d94:	613b      	str	r3, [r7, #16]
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	2b03      	cmp	r3, #3
 8006d9a:	ddec      	ble.n	8006d76 <acquire_and_process_data+0x26>
	  for (i = 0; i < 12; i++){
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	3301      	adds	r3, #1
 8006da0:	617b      	str	r3, [r7, #20]
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	2b0b      	cmp	r3, #11
 8006da6:	dddc      	ble.n	8006d62 <acquire_and_process_data+0x12>
//		HAL_UART_Transmit(&huart2, (uint8_t *) tmp, sizeof(tmp), 100);
//	}
//
//	#endif

	  return 0;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3718      	adds	r7, #24
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	20000b2c 	.word	0x20000b2c

08006db8 <post_process>:

int post_process(ai_i8* data[])
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b088      	sub	sp, #32
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
/* process the predictions */
	  uint8_t *output = data; // don't care about the signed value of ai_i8...
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	617b      	str	r3, [r7, #20]
	  int i,j;

	  char test[4];
	  char sync[3] = "010";
 8006dc4:	4a1e      	ldr	r2, [pc, #120]	; (8006e40 <post_process+0x88>)
 8006dc6:	f107 030c 	add.w	r3, r7, #12
 8006dca:	6812      	ldr	r2, [r2, #0]
 8006dcc:	4611      	mov	r1, r2
 8006dce:	8019      	strh	r1, [r3, #0]
 8006dd0:	3302      	adds	r3, #2
 8006dd2:	0c12      	lsrs	r2, r2, #16
 8006dd4:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t *) sync, sizeof(sync), 100);
 8006dd6:	f107 010c 	add.w	r1, r7, #12
 8006dda:	2364      	movs	r3, #100	; 0x64
 8006ddc:	2203      	movs	r2, #3
 8006dde:	4819      	ldr	r0, [pc, #100]	; (8006e44 <post_process+0x8c>)
 8006de0:	f7fe facd 	bl	800537e <HAL_UART_Transmit>
	  for(i=0; i<7; i++){
 8006de4:	2300      	movs	r3, #0
 8006de6:	61fb      	str	r3, [r7, #28]
 8006de8:	e022      	b.n	8006e30 <post_process+0x78>
		  char tmp[4] = {0};
 8006dea:	2300      	movs	r3, #0
 8006dec:	60bb      	str	r3, [r7, #8]
		  for (j=0; j < 4; j++){
 8006dee:	2300      	movs	r3, #0
 8006df0:	61bb      	str	r3, [r7, #24]
 8006df2:	e010      	b.n	8006e16 <post_process+0x5e>
		  		  tmp[j] = output[i*4+j];
 8006df4:	69fb      	ldr	r3, [r7, #28]
 8006df6:	009a      	lsls	r2, r3, #2
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	4413      	add	r3, r2
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	4413      	add	r3, r2
 8006e02:	7819      	ldrb	r1, [r3, #0]
 8006e04:	f107 0208 	add.w	r2, r7, #8
 8006e08:	69bb      	ldr	r3, [r7, #24]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	460a      	mov	r2, r1
 8006e0e:	701a      	strb	r2, [r3, #0]
		  for (j=0; j < 4; j++){
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	3301      	adds	r3, #1
 8006e14:	61bb      	str	r3, [r7, #24]
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	2b03      	cmp	r3, #3
 8006e1a:	ddeb      	ble.n	8006df4 <post_process+0x3c>
		  	  }
		  HAL_UART_Transmit(&huart2, (uint8_t *) tmp, sizeof(tmp), 100);
 8006e1c:	f107 0108 	add.w	r1, r7, #8
 8006e20:	2364      	movs	r3, #100	; 0x64
 8006e22:	2204      	movs	r2, #4
 8006e24:	4807      	ldr	r0, [pc, #28]	; (8006e44 <post_process+0x8c>)
 8006e26:	f7fe faaa 	bl	800537e <HAL_UART_Transmit>
	  for(i=0; i<7; i++){
 8006e2a:	69fb      	ldr	r3, [r7, #28]
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	61fb      	str	r3, [r7, #28]
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	2b06      	cmp	r3, #6
 8006e34:	ddd9      	ble.n	8006dea <post_process+0x32>

	#ifdef _DEBUG
	  float predicted_quality = *(float*) &tmp;
	  printf("Predicted quality: %f\n", predicted_quality)
	#endif
	  return 0;
 8006e36:	2300      	movs	r3, #0
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3720      	adds	r7, #32
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	0800a958 	.word	0x0800a958
 8006e44:	20000b2c 	.word	0x20000b2c

08006e48 <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 8006e4c:	4803      	ldr	r0, [pc, #12]	; (8006e5c <MX_X_CUBE_AI_Init+0x14>)
 8006e4e:	f002 fc6d 	bl	800972c <puts>

  ai_boostrap(data_activations0);
 8006e52:	4803      	ldr	r0, [pc, #12]	; (8006e60 <MX_X_CUBE_AI_Init+0x18>)
 8006e54:	f7ff feee 	bl	8006c34 <ai_boostrap>
    /* USER CODE END 5 */
}
 8006e58:	bf00      	nop
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	0800a95c 	.word	0x0800a95c
 8006e60:	2000000c 	.word	0x2000000c

08006e64 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 6 */
  int res = -1;
 8006e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e6e:	60fb      	str	r3, [r7, #12]
  uint8_t *in_data = NULL;
 8006e70:	2300      	movs	r3, #0
 8006e72:	60bb      	str	r3, [r7, #8]
  uint8_t *out_data = NULL;
 8006e74:	2300      	movs	r3, #0
 8006e76:	607b      	str	r3, [r7, #4]
  printf("TEMPLATE - run - main loop\r\n");
 8006e78:	481a      	ldr	r0, [pc, #104]	; (8006ee4 <MX_X_CUBE_AI_Process+0x80>)
 8006e7a:	f002 fc57 	bl	800972c <puts>



  if (wine_quality) {
 8006e7e:	4b1a      	ldr	r3, [pc, #104]	; (8006ee8 <MX_X_CUBE_AI_Process+0x84>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d01b      	beq.n	8006ebe <MX_X_CUBE_AI_Process+0x5a>
  // set pointer on NN buffer
	#if defined(AI_WINE_QUALITY_INPUTS_IN_ACTIVATIONS)
	  in_data = ai_input[0].data;
 8006e86:	4b19      	ldr	r3, [pc, #100]	; (8006eec <MX_X_CUBE_AI_Process+0x88>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	60bb      	str	r3, [r7, #8]
	#else
	  in_data = in_data_s;
	#endif

	#if defined(AI_WINE_QUALITY_OUTPUTS_IN_ACTIVATIONS)
	  out_data = ai_output[0].data;
 8006e8e:	4b18      	ldr	r3, [pc, #96]	; (8006ef0 <MX_X_CUBE_AI_Process+0x8c>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	607b      	str	r3, [r7, #4]
	  out_data = out_data_s;
	#endif

    do {
      /* 1 - acquire and pre-process input data */
      res = acquire_and_process_data(data_ins);
 8006e96:	4817      	ldr	r0, [pc, #92]	; (8006ef4 <MX_X_CUBE_AI_Process+0x90>)
 8006e98:	f7ff ff5a 	bl	8006d50 <acquire_and_process_data>
 8006e9c:	60f8      	str	r0, [r7, #12]
      /* 2 - process the data - call inference engine */
      if (res == 0)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d102      	bne.n	8006eaa <MX_X_CUBE_AI_Process+0x46>
        res = ai_run();
 8006ea4:	f7ff ff2a 	bl	8006cfc <ai_run>
 8006ea8:	60f8      	str	r0, [r7, #12]
      /* 3- post-process the predictions */
      if (res == 0)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d103      	bne.n	8006eb8 <MX_X_CUBE_AI_Process+0x54>
        res = post_process(data_outs);
 8006eb0:	4811      	ldr	r0, [pc, #68]	; (8006ef8 <MX_X_CUBE_AI_Process+0x94>)
 8006eb2:	f7ff ff81 	bl	8006db8 <post_process>
 8006eb6:	60f8      	str	r0, [r7, #12]
    } while (res==0);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d0eb      	beq.n	8006e96 <MX_X_CUBE_AI_Process+0x32>
  }

  if (res) {
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d00a      	beq.n	8006eda <MX_X_CUBE_AI_Process+0x76>
    ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
 8006ec4:	2311      	movs	r3, #17
 8006ec6:	703b      	strb	r3, [r7, #0]
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	2210      	movs	r2, #16
 8006ecc:	f362 231f 	bfi	r3, r2, #8, #24
 8006ed0:	603b      	str	r3, [r7, #0]
    ai_log_err(err, "Process has FAILED");
 8006ed2:	490a      	ldr	r1, [pc, #40]	; (8006efc <MX_X_CUBE_AI_Process+0x98>)
 8006ed4:	6838      	ldr	r0, [r7, #0]
 8006ed6:	f7ff fe8d 	bl	8006bf4 <ai_log_err>
  }
    /* USER CODE END 6 */
}
 8006eda:	bf00      	nop
 8006edc:	3710      	adds	r7, #16
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop
 8006ee4:	0800a97c 	.word	0x0800a97c
 8006ee8:	20000f90 	.word	0x20000f90
 8006eec:	20000f94 	.word	0x20000f94
 8006ef0:	20000f98 	.word	0x20000f98
 8006ef4:	20000cb4 	.word	0x20000cb4
 8006ef8:	20000cb8 	.word	0x20000cb8
 8006efc:	0800a998 	.word	0x0800a998

08006f00 <wine_quality_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool wine_quality_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b082      	sub	sp, #8
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_wine_quality_activations_map, 1, params)) {
 8006f0a:	683a      	ldr	r2, [r7, #0]
 8006f0c:	2101      	movs	r1, #1
 8006f0e:	4833      	ldr	r0, [pc, #204]	; (8006fdc <wine_quality_configure_activations+0xdc>)
 8006f10:	f000 fb1a 	bl	8007548 <ai_platform_get_activations_map>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d055      	beq.n	8006fc6 <wine_quality_configure_activations+0xc6>
    /* Updating activations (byte) offsets */
    
    input_0_output_array.data = AI_PTR(g_wine_quality_activations_map[0] + 192);
 8006f1a:	4b30      	ldr	r3, [pc, #192]	; (8006fdc <wine_quality_configure_activations+0xdc>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	33c0      	adds	r3, #192	; 0xc0
 8006f20:	4a2f      	ldr	r2, [pc, #188]	; (8006fe0 <wine_quality_configure_activations+0xe0>)
 8006f22:	6093      	str	r3, [r2, #8]
    input_0_output_array.data_start = AI_PTR(g_wine_quality_activations_map[0] + 192);
 8006f24:	4b2d      	ldr	r3, [pc, #180]	; (8006fdc <wine_quality_configure_activations+0xdc>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	33c0      	adds	r3, #192	; 0xc0
 8006f2a:	4a2d      	ldr	r2, [pc, #180]	; (8006fe0 <wine_quality_configure_activations+0xe0>)
 8006f2c:	60d3      	str	r3, [r2, #12]
    
    dense_4_dense_output_array.data = AI_PTR(g_wine_quality_activations_map[0] + 240);
 8006f2e:	4b2b      	ldr	r3, [pc, #172]	; (8006fdc <wine_quality_configure_activations+0xdc>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	33f0      	adds	r3, #240	; 0xf0
 8006f34:	4a2b      	ldr	r2, [pc, #172]	; (8006fe4 <wine_quality_configure_activations+0xe4>)
 8006f36:	6093      	str	r3, [r2, #8]
    dense_4_dense_output_array.data_start = AI_PTR(g_wine_quality_activations_map[0] + 240);
 8006f38:	4b28      	ldr	r3, [pc, #160]	; (8006fdc <wine_quality_configure_activations+0xdc>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	33f0      	adds	r3, #240	; 0xf0
 8006f3e:	4a29      	ldr	r2, [pc, #164]	; (8006fe4 <wine_quality_configure_activations+0xe4>)
 8006f40:	60d3      	str	r3, [r2, #12]
    
    dense_4_output_array.data = AI_PTR(g_wine_quality_activations_map[0] + 240);
 8006f42:	4b26      	ldr	r3, [pc, #152]	; (8006fdc <wine_quality_configure_activations+0xdc>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	33f0      	adds	r3, #240	; 0xf0
 8006f48:	4a27      	ldr	r2, [pc, #156]	; (8006fe8 <wine_quality_configure_activations+0xe8>)
 8006f4a:	6093      	str	r3, [r2, #8]
    dense_4_output_array.data_start = AI_PTR(g_wine_quality_activations_map[0] + 240);
 8006f4c:	4b23      	ldr	r3, [pc, #140]	; (8006fdc <wine_quality_configure_activations+0xdc>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	33f0      	adds	r3, #240	; 0xf0
 8006f52:	4a25      	ldr	r2, [pc, #148]	; (8006fe8 <wine_quality_configure_activations+0xe8>)
 8006f54:	60d3      	str	r3, [r2, #12]
    
    dense_5_dense_output_array.data = AI_PTR(g_wine_quality_activations_map[0] + 0);
 8006f56:	4b21      	ldr	r3, [pc, #132]	; (8006fdc <wine_quality_configure_activations+0xdc>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a24      	ldr	r2, [pc, #144]	; (8006fec <wine_quality_configure_activations+0xec>)
 8006f5c:	6093      	str	r3, [r2, #8]
    dense_5_dense_output_array.data_start = AI_PTR(g_wine_quality_activations_map[0] + 0);
 8006f5e:	4b1f      	ldr	r3, [pc, #124]	; (8006fdc <wine_quality_configure_activations+0xdc>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a22      	ldr	r2, [pc, #136]	; (8006fec <wine_quality_configure_activations+0xec>)
 8006f64:	60d3      	str	r3, [r2, #12]
    
    dense_5_output_array.data = AI_PTR(g_wine_quality_activations_map[0] + 240);
 8006f66:	4b1d      	ldr	r3, [pc, #116]	; (8006fdc <wine_quality_configure_activations+0xdc>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	33f0      	adds	r3, #240	; 0xf0
 8006f6c:	4a20      	ldr	r2, [pc, #128]	; (8006ff0 <wine_quality_configure_activations+0xf0>)
 8006f6e:	6093      	str	r3, [r2, #8]
    dense_5_output_array.data_start = AI_PTR(g_wine_quality_activations_map[0] + 240);
 8006f70:	4b1a      	ldr	r3, [pc, #104]	; (8006fdc <wine_quality_configure_activations+0xdc>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	33f0      	adds	r3, #240	; 0xf0
 8006f76:	4a1e      	ldr	r2, [pc, #120]	; (8006ff0 <wine_quality_configure_activations+0xf0>)
 8006f78:	60d3      	str	r3, [r2, #12]
    
    dense_6_dense_output_array.data = AI_PTR(g_wine_quality_activations_map[0] + 0);
 8006f7a:	4b18      	ldr	r3, [pc, #96]	; (8006fdc <wine_quality_configure_activations+0xdc>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a1d      	ldr	r2, [pc, #116]	; (8006ff4 <wine_quality_configure_activations+0xf4>)
 8006f80:	6093      	str	r3, [r2, #8]
    dense_6_dense_output_array.data_start = AI_PTR(g_wine_quality_activations_map[0] + 0);
 8006f82:	4b16      	ldr	r3, [pc, #88]	; (8006fdc <wine_quality_configure_activations+0xdc>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a1b      	ldr	r2, [pc, #108]	; (8006ff4 <wine_quality_configure_activations+0xf4>)
 8006f88:	60d3      	str	r3, [r2, #12]
    
    dense_6_output_array.data = AI_PTR(g_wine_quality_activations_map[0] + 120);
 8006f8a:	4b14      	ldr	r3, [pc, #80]	; (8006fdc <wine_quality_configure_activations+0xdc>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	3378      	adds	r3, #120	; 0x78
 8006f90:	4a19      	ldr	r2, [pc, #100]	; (8006ff8 <wine_quality_configure_activations+0xf8>)
 8006f92:	6093      	str	r3, [r2, #8]
    dense_6_output_array.data_start = AI_PTR(g_wine_quality_activations_map[0] + 120);
 8006f94:	4b11      	ldr	r3, [pc, #68]	; (8006fdc <wine_quality_configure_activations+0xdc>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	3378      	adds	r3, #120	; 0x78
 8006f9a:	4a17      	ldr	r2, [pc, #92]	; (8006ff8 <wine_quality_configure_activations+0xf8>)
 8006f9c:	60d3      	str	r3, [r2, #12]
    
    dense_7_dense_output_array.data = AI_PTR(g_wine_quality_activations_map[0] + 0);
 8006f9e:	4b0f      	ldr	r3, [pc, #60]	; (8006fdc <wine_quality_configure_activations+0xdc>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a16      	ldr	r2, [pc, #88]	; (8006ffc <wine_quality_configure_activations+0xfc>)
 8006fa4:	6093      	str	r3, [r2, #8]
    dense_7_dense_output_array.data_start = AI_PTR(g_wine_quality_activations_map[0] + 0);
 8006fa6:	4b0d      	ldr	r3, [pc, #52]	; (8006fdc <wine_quality_configure_activations+0xdc>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a14      	ldr	r2, [pc, #80]	; (8006ffc <wine_quality_configure_activations+0xfc>)
 8006fac:	60d3      	str	r3, [r2, #12]
    
    dense_7_output_array.data = AI_PTR(g_wine_quality_activations_map[0] + 28);
 8006fae:	4b0b      	ldr	r3, [pc, #44]	; (8006fdc <wine_quality_configure_activations+0xdc>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	331c      	adds	r3, #28
 8006fb4:	4a12      	ldr	r2, [pc, #72]	; (8007000 <wine_quality_configure_activations+0x100>)
 8006fb6:	6093      	str	r3, [r2, #8]
    dense_7_output_array.data_start = AI_PTR(g_wine_quality_activations_map[0] + 28);
 8006fb8:	4b08      	ldr	r3, [pc, #32]	; (8006fdc <wine_quality_configure_activations+0xdc>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	331c      	adds	r3, #28
 8006fbe:	4a10      	ldr	r2, [pc, #64]	; (8007000 <wine_quality_configure_activations+0x100>)
 8006fc0:	60d3      	str	r3, [r2, #12]
    
    return true;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e005      	b.n	8006fd2 <wine_quality_configure_activations+0xd2>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8006fc6:	2213      	movs	r2, #19
 8006fc8:	2130      	movs	r1, #48	; 0x30
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 fba0 	bl	8007710 <ai_platform_network_set_error>
  return false;
 8006fd0:	2300      	movs	r3, #0
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3708      	adds	r7, #8
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	20000f9c 	.word	0x20000f9c
 8006fe0:	20000010 	.word	0x20000010
 8006fe4:	20000030 	.word	0x20000030
 8006fe8:	20000040 	.word	0x20000040
 8006fec:	20000060 	.word	0x20000060
 8006ff0:	20000080 	.word	0x20000080
 8006ff4:	20000090 	.word	0x20000090
 8006ff8:	200000a0 	.word	0x200000a0
 8006ffc:	200000b0 	.word	0x200000b0
 8007000:	200000c0 	.word	0x200000c0

08007004 <wine_quality_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool wine_quality_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_wine_quality_weights_map, 1, params)) {
 800700e:	683a      	ldr	r2, [r7, #0]
 8007010:	2101      	movs	r1, #1
 8007012:	4852      	ldr	r0, [pc, #328]	; (800715c <wine_quality_configure_weights+0x158>)
 8007014:	f000 fa44 	bl	80074a0 <ai_platform_get_weights_map>
 8007018:	4603      	mov	r3, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	f000 8094 	beq.w	8007148 <wine_quality_configure_weights+0x144>
    /* Updating weights (byte) offsets */
    
    dense_6_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8007020:	4b4f      	ldr	r3, [pc, #316]	; (8007160 <wine_quality_configure_weights+0x15c>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007028:	4a4d      	ldr	r2, [pc, #308]	; (8007160 <wine_quality_configure_weights+0x15c>)
 800702a:	6013      	str	r3, [r2, #0]
    dense_6_dense_bias_array.data = AI_PTR(g_wine_quality_weights_map[0] + 0);
 800702c:	4b4b      	ldr	r3, [pc, #300]	; (800715c <wine_quality_configure_weights+0x158>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a4b      	ldr	r2, [pc, #300]	; (8007160 <wine_quality_configure_weights+0x15c>)
 8007032:	6093      	str	r3, [r2, #8]
    dense_6_dense_bias_array.data_start = AI_PTR(g_wine_quality_weights_map[0] + 0);
 8007034:	4b49      	ldr	r3, [pc, #292]	; (800715c <wine_quality_configure_weights+0x158>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a49      	ldr	r2, [pc, #292]	; (8007160 <wine_quality_configure_weights+0x15c>)
 800703a:	60d3      	str	r3, [r2, #12]
    
    dense_7_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800703c:	4b49      	ldr	r3, [pc, #292]	; (8007164 <wine_quality_configure_weights+0x160>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007044:	4a47      	ldr	r2, [pc, #284]	; (8007164 <wine_quality_configure_weights+0x160>)
 8007046:	6013      	str	r3, [r2, #0]
    dense_7_dense_weights_array.data = AI_PTR(g_wine_quality_weights_map[0] + 120);
 8007048:	4b44      	ldr	r3, [pc, #272]	; (800715c <wine_quality_configure_weights+0x158>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	3378      	adds	r3, #120	; 0x78
 800704e:	4a45      	ldr	r2, [pc, #276]	; (8007164 <wine_quality_configure_weights+0x160>)
 8007050:	6093      	str	r3, [r2, #8]
    dense_7_dense_weights_array.data_start = AI_PTR(g_wine_quality_weights_map[0] + 120);
 8007052:	4b42      	ldr	r3, [pc, #264]	; (800715c <wine_quality_configure_weights+0x158>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	3378      	adds	r3, #120	; 0x78
 8007058:	4a42      	ldr	r2, [pc, #264]	; (8007164 <wine_quality_configure_weights+0x160>)
 800705a:	60d3      	str	r3, [r2, #12]
    
    dense_7_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800705c:	4b42      	ldr	r3, [pc, #264]	; (8007168 <wine_quality_configure_weights+0x164>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007064:	4a40      	ldr	r2, [pc, #256]	; (8007168 <wine_quality_configure_weights+0x164>)
 8007066:	6013      	str	r3, [r2, #0]
    dense_7_dense_bias_array.data = AI_PTR(g_wine_quality_weights_map[0] + 960);
 8007068:	4b3c      	ldr	r3, [pc, #240]	; (800715c <wine_quality_configure_weights+0x158>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8007070:	4a3d      	ldr	r2, [pc, #244]	; (8007168 <wine_quality_configure_weights+0x164>)
 8007072:	6093      	str	r3, [r2, #8]
    dense_7_dense_bias_array.data_start = AI_PTR(g_wine_quality_weights_map[0] + 960);
 8007074:	4b39      	ldr	r3, [pc, #228]	; (800715c <wine_quality_configure_weights+0x158>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 800707c:	4a3a      	ldr	r2, [pc, #232]	; (8007168 <wine_quality_configure_weights+0x164>)
 800707e:	60d3      	str	r3, [r2, #12]
    
    dense_4_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8007080:	4b3a      	ldr	r3, [pc, #232]	; (800716c <wine_quality_configure_weights+0x168>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007088:	4a38      	ldr	r2, [pc, #224]	; (800716c <wine_quality_configure_weights+0x168>)
 800708a:	6013      	str	r3, [r2, #0]
    dense_4_dense_weights_array.data = AI_PTR(g_wine_quality_weights_map[0] + 988);
 800708c:	4b33      	ldr	r3, [pc, #204]	; (800715c <wine_quality_configure_weights+0x158>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f503 7377 	add.w	r3, r3, #988	; 0x3dc
 8007094:	4a35      	ldr	r2, [pc, #212]	; (800716c <wine_quality_configure_weights+0x168>)
 8007096:	6093      	str	r3, [r2, #8]
    dense_4_dense_weights_array.data_start = AI_PTR(g_wine_quality_weights_map[0] + 988);
 8007098:	4b30      	ldr	r3, [pc, #192]	; (800715c <wine_quality_configure_weights+0x158>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f503 7377 	add.w	r3, r3, #988	; 0x3dc
 80070a0:	4a32      	ldr	r2, [pc, #200]	; (800716c <wine_quality_configure_weights+0x168>)
 80070a2:	60d3      	str	r3, [r2, #12]
    
    dense_4_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 80070a4:	4b32      	ldr	r3, [pc, #200]	; (8007170 <wine_quality_configure_weights+0x16c>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070ac:	4a30      	ldr	r2, [pc, #192]	; (8007170 <wine_quality_configure_weights+0x16c>)
 80070ae:	6013      	str	r3, [r2, #0]
    dense_4_dense_bias_array.data = AI_PTR(g_wine_quality_weights_map[0] + 6748);
 80070b0:	4b2a      	ldr	r3, [pc, #168]	; (800715c <wine_quality_configure_weights+0x158>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f503 53d2 	add.w	r3, r3, #6720	; 0x1a40
 80070b8:	331c      	adds	r3, #28
 80070ba:	4a2d      	ldr	r2, [pc, #180]	; (8007170 <wine_quality_configure_weights+0x16c>)
 80070bc:	6093      	str	r3, [r2, #8]
    dense_4_dense_bias_array.data_start = AI_PTR(g_wine_quality_weights_map[0] + 6748);
 80070be:	4b27      	ldr	r3, [pc, #156]	; (800715c <wine_quality_configure_weights+0x158>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f503 53d2 	add.w	r3, r3, #6720	; 0x1a40
 80070c6:	331c      	adds	r3, #28
 80070c8:	4a29      	ldr	r2, [pc, #164]	; (8007170 <wine_quality_configure_weights+0x16c>)
 80070ca:	60d3      	str	r3, [r2, #12]
    
    dense_5_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 80070cc:	4b29      	ldr	r3, [pc, #164]	; (8007174 <wine_quality_configure_weights+0x170>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070d4:	4a27      	ldr	r2, [pc, #156]	; (8007174 <wine_quality_configure_weights+0x170>)
 80070d6:	6013      	str	r3, [r2, #0]
    dense_5_dense_weights_array.data = AI_PTR(g_wine_quality_weights_map[0] + 7228);
 80070d8:	4b20      	ldr	r3, [pc, #128]	; (800715c <wine_quality_configure_weights+0x158>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80070e0:	331c      	adds	r3, #28
 80070e2:	4a24      	ldr	r2, [pc, #144]	; (8007174 <wine_quality_configure_weights+0x170>)
 80070e4:	6093      	str	r3, [r2, #8]
    dense_5_dense_weights_array.data_start = AI_PTR(g_wine_quality_weights_map[0] + 7228);
 80070e6:	4b1d      	ldr	r3, [pc, #116]	; (800715c <wine_quality_configure_weights+0x158>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80070ee:	331c      	adds	r3, #28
 80070f0:	4a20      	ldr	r2, [pc, #128]	; (8007174 <wine_quality_configure_weights+0x170>)
 80070f2:	60d3      	str	r3, [r2, #12]
    
    dense_5_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 80070f4:	4b20      	ldr	r3, [pc, #128]	; (8007178 <wine_quality_configure_weights+0x174>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070fc:	4a1e      	ldr	r2, [pc, #120]	; (8007178 <wine_quality_configure_weights+0x174>)
 80070fe:	6013      	str	r3, [r2, #0]
    dense_5_dense_bias_array.data = AI_PTR(g_wine_quality_weights_map[0] + 36028);
 8007100:	4b16      	ldr	r3, [pc, #88]	; (800715c <wine_quality_configure_weights+0x158>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 8007108:	33bc      	adds	r3, #188	; 0xbc
 800710a:	4a1b      	ldr	r2, [pc, #108]	; (8007178 <wine_quality_configure_weights+0x174>)
 800710c:	6093      	str	r3, [r2, #8]
    dense_5_dense_bias_array.data_start = AI_PTR(g_wine_quality_weights_map[0] + 36028);
 800710e:	4b13      	ldr	r3, [pc, #76]	; (800715c <wine_quality_configure_weights+0x158>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 8007116:	33bc      	adds	r3, #188	; 0xbc
 8007118:	4a17      	ldr	r2, [pc, #92]	; (8007178 <wine_quality_configure_weights+0x174>)
 800711a:	60d3      	str	r3, [r2, #12]
    
    dense_6_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800711c:	4b17      	ldr	r3, [pc, #92]	; (800717c <wine_quality_configure_weights+0x178>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007124:	4a15      	ldr	r2, [pc, #84]	; (800717c <wine_quality_configure_weights+0x178>)
 8007126:	6013      	str	r3, [r2, #0]
    dense_6_dense_weights_array.data = AI_PTR(g_wine_quality_weights_map[0] + 36268);
 8007128:	4b0c      	ldr	r3, [pc, #48]	; (800715c <wine_quality_configure_weights+0x158>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f503 430d 	add.w	r3, r3, #36096	; 0x8d00
 8007130:	33ac      	adds	r3, #172	; 0xac
 8007132:	4a12      	ldr	r2, [pc, #72]	; (800717c <wine_quality_configure_weights+0x178>)
 8007134:	6093      	str	r3, [r2, #8]
    dense_6_dense_weights_array.data_start = AI_PTR(g_wine_quality_weights_map[0] + 36268);
 8007136:	4b09      	ldr	r3, [pc, #36]	; (800715c <wine_quality_configure_weights+0x158>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f503 430d 	add.w	r3, r3, #36096	; 0x8d00
 800713e:	33ac      	adds	r3, #172	; 0xac
 8007140:	4a0e      	ldr	r2, [pc, #56]	; (800717c <wine_quality_configure_weights+0x178>)
 8007142:	60d3      	str	r3, [r2, #12]
    
    return true;
 8007144:	2301      	movs	r3, #1
 8007146:	e005      	b.n	8007154 <wine_quality_configure_weights+0x150>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8007148:	2212      	movs	r2, #18
 800714a:	2130      	movs	r1, #48	; 0x30
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 fadf 	bl	8007710 <ai_platform_network_set_error>
  return false;
 8007152:	2300      	movs	r3, #0
}
 8007154:	4618      	mov	r0, r3
 8007156:	3708      	adds	r7, #8
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}
 800715c:	20000fa0 	.word	0x20000fa0
 8007160:	20000020 	.word	0x20000020
 8007164:	20000050 	.word	0x20000050
 8007168:	20000070 	.word	0x20000070
 800716c:	200000d0 	.word	0x200000d0
 8007170:	200000e0 	.word	0x200000e0
 8007174:	200000f0 	.word	0x200000f0
 8007178:	20000100 	.word	0x20000100
 800717c:	20000110 	.word	0x20000110

08007180 <ai_wine_quality_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_wine_quality_get_error(ai_handle network)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 fa53 	bl	8007634 <ai_platform_network_get_error>
 800718e:	4603      	mov	r3, r0
}
 8007190:	4618      	mov	r0, r3
 8007192:	3708      	adds	r7, #8
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <ai_wine_quality_create>:

AI_API_ENTRY
ai_error ai_wine_quality_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af02      	add	r7, sp, #8
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 80071a2:	2300      	movs	r3, #0
 80071a4:	9301      	str	r3, [sp, #4]
 80071a6:	2305      	movs	r3, #5
 80071a8:	9300      	str	r3, [sp, #0]
 80071aa:	2301      	movs	r3, #1
 80071ac:	4a04      	ldr	r2, [pc, #16]	; (80071c0 <ai_wine_quality_create+0x28>)
 80071ae:	6839      	ldr	r1, [r7, #0]
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 fc59 	bl	8007a68 <ai_platform_network_create>
 80071b6:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3708      	adds	r7, #8
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}
 80071c0:	2000087c 	.word	0x2000087c

080071c4 <ai_wine_quality_create_and_init>:

AI_API_ENTRY
ai_error ai_wine_quality_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b096      	sub	sp, #88	; 0x58
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_wine_quality_create(network, AI_WINE_QUALITY_DATA_CONFIG);
 80071d0:	2100      	movs	r1, #0
 80071d2:	68f8      	ldr	r0, [r7, #12]
 80071d4:	f7ff ffe0 	bl	8007198 <ai_wine_quality_create>
 80071d8:	4603      	mov	r3, r0
 80071da:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 80071dc:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d001      	beq.n	80071e8 <ai_wine_quality_create_and_init+0x24>
        return err;
 80071e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071e6:	e05d      	b.n	80072a4 <ai_wine_quality_create_and_init+0xe0>
    if (ai_wine_quality_data_params_get(&params) != true) {
 80071e8:	f107 0314 	add.w	r3, r7, #20
 80071ec:	4618      	mov	r0, r3
 80071ee:	f000 f8dd 	bl	80073ac <ai_wine_quality_data_params_get>
 80071f2:	4603      	mov	r3, r0
 80071f4:	f083 0301 	eor.w	r3, r3, #1
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d008      	beq.n	8007210 <ai_wine_quality_create_and_init+0x4c>
        err = ai_wine_quality_get_error(*network);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4618      	mov	r0, r3
 8007204:	f7ff ffbc 	bl	8007180 <ai_wine_quality_get_error>
 8007208:	4603      	mov	r3, r0
 800720a:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 800720c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800720e:	e049      	b.n	80072a4 <ai_wine_quality_create_and_init+0xe0>
    }
#if defined(AI_WINE_QUALITY_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d016      	beq.n	8007244 <ai_wine_quality_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 8007216:	2300      	movs	r3, #0
 8007218:	657b      	str	r3, [r7, #84]	; 0x54
 800721a:	e00e      	b.n	800723a <ai_wine_quality_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 800721c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800721e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	68ba      	ldr	r2, [r7, #8]
 8007224:	4413      	add	r3, r2
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	f107 0314 	add.w	r3, r7, #20
 800722c:	330c      	adds	r3, #12
 800722e:	4618      	mov	r0, r3
 8007230:	f000 f922 	bl	8007478 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8007234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007236:	3301      	adds	r3, #1
 8007238:	657b      	str	r3, [r7, #84]	; 0x54
 800723a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800723c:	461a      	mov	r2, r3
 800723e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007240:	4293      	cmp	r3, r2
 8007242:	dbeb      	blt.n	800721c <ai_wine_quality_create_and_init+0x58>
    }
#endif
#if defined(AI_WINE_QUALITY_DATA_WEIGHTS_COUNT)
    if (weights) {
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d016      	beq.n	8007278 <ai_wine_quality_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 800724a:	2300      	movs	r3, #0
 800724c:	653b      	str	r3, [r7, #80]	; 0x50
 800724e:	e00e      	b.n	800726e <ai_wine_quality_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8007250:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	4413      	add	r3, r2
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	f107 0314 	add.w	r3, r7, #20
 8007260:	3304      	adds	r3, #4
 8007262:	4618      	mov	r0, r3
 8007264:	f000 f908 	bl	8007478 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8007268:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800726a:	3301      	adds	r3, #1
 800726c:	653b      	str	r3, [r7, #80]	; 0x50
 800726e:	8b7b      	ldrh	r3, [r7, #26]
 8007270:	461a      	mov	r2, r3
 8007272:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007274:	4293      	cmp	r3, r2
 8007276:	dbeb      	blt.n	8007250 <ai_wine_quality_create_and_init+0x8c>
    }
#endif
    if (ai_wine_quality_init(*network, &params) != true) {
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f107 0214 	add.w	r2, r7, #20
 8007280:	4611      	mov	r1, r2
 8007282:	4618      	mov	r0, r3
 8007284:	f000 f846 	bl	8007314 <ai_wine_quality_init>
 8007288:	4603      	mov	r3, r0
 800728a:	f083 0301 	eor.w	r3, r3, #1
 800728e:	b2db      	uxtb	r3, r3
 8007290:	2b00      	cmp	r3, #0
 8007292:	d006      	beq.n	80072a2 <ai_wine_quality_create_and_init+0xde>
        err = ai_wine_quality_get_error(*network);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4618      	mov	r0, r3
 800729a:	f7ff ff71 	bl	8007180 <ai_wine_quality_get_error>
 800729e:	4603      	mov	r3, r0
 80072a0:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 80072a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3758      	adds	r7, #88	; 0x58
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <ai_wine_quality_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_wine_quality_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d104      	bne.n	80072c6 <ai_wine_quality_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 80072bc:	4b06      	ldr	r3, [pc, #24]	; (80072d8 <ai_wine_quality_inputs_get+0x2c>)
 80072be:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	4a06      	ldr	r2, [pc, #24]	; (80072dc <ai_wine_quality_inputs_get+0x30>)
 80072c4:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 80072c6:	6839      	ldr	r1, [r7, #0]
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 fa27 	bl	800771c <ai_platform_inputs_get>
 80072ce:	4603      	mov	r3, r0
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3708      	adds	r7, #8
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}
 80072d8:	2000087c 	.word	0x2000087c
 80072dc:	a1c00100 	.word	0xa1c00100

080072e0 <ai_wine_quality_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_wine_quality_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d104      	bne.n	80072fa <ai_wine_quality_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 80072f0:	4b06      	ldr	r3, [pc, #24]	; (800730c <ai_wine_quality_outputs_get+0x2c>)
 80072f2:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	4a06      	ldr	r2, [pc, #24]	; (8007310 <ai_wine_quality_outputs_get+0x30>)
 80072f8:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 80072fa:	6839      	ldr	r1, [r7, #0]
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 fae3 	bl	80078c8 <ai_platform_outputs_get>
 8007302:	4603      	mov	r3, r0
}
 8007304:	4618      	mov	r0, r3
 8007306:	3708      	adds	r7, #8
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}
 800730c:	2000087c 	.word	0x2000087c
 8007310:	a1c00100 	.word	0xa1c00100

08007314 <ai_wine_quality_init>:
}

AI_API_ENTRY
ai_bool ai_wine_quality_init(
  ai_handle network, const ai_network_params* params)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800731e:	6839      	ldr	r1, [r7, #0]
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 fc77 	bl	8007c14 <ai_platform_network_init>
 8007326:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d101      	bne.n	8007332 <ai_wine_quality_init+0x1e>
 800732e:	2300      	movs	r3, #0
 8007330:	e028      	b.n	8007384 <ai_wine_quality_init+0x70>

  ai_bool ok = true;
 8007332:	2301      	movs	r3, #1
 8007334:	72fb      	strb	r3, [r7, #11]
  ok &= wine_quality_configure_weights(net_ctx, params);
 8007336:	6839      	ldr	r1, [r7, #0]
 8007338:	68f8      	ldr	r0, [r7, #12]
 800733a:	f7ff fe63 	bl	8007004 <wine_quality_configure_weights>
 800733e:	4603      	mov	r3, r0
 8007340:	461a      	mov	r2, r3
 8007342:	7afb      	ldrb	r3, [r7, #11]
 8007344:	4013      	ands	r3, r2
 8007346:	2b00      	cmp	r3, #0
 8007348:	bf14      	ite	ne
 800734a:	2301      	movne	r3, #1
 800734c:	2300      	moveq	r3, #0
 800734e:	72fb      	strb	r3, [r7, #11]
  ok &= wine_quality_configure_activations(net_ctx, params);
 8007350:	6839      	ldr	r1, [r7, #0]
 8007352:	68f8      	ldr	r0, [r7, #12]
 8007354:	f7ff fdd4 	bl	8006f00 <wine_quality_configure_activations>
 8007358:	4603      	mov	r3, r0
 800735a:	461a      	mov	r2, r3
 800735c:	7afb      	ldrb	r3, [r7, #11]
 800735e:	4013      	ands	r3, r2
 8007360:	2b00      	cmp	r3, #0
 8007362:	bf14      	ite	ne
 8007364:	2301      	movne	r3, #1
 8007366:	2300      	moveq	r3, #0
 8007368:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 fd40 	bl	8007df0 <ai_platform_network_post_init>
 8007370:	4603      	mov	r3, r0
 8007372:	461a      	mov	r2, r3
 8007374:	7afb      	ldrb	r3, [r7, #11]
 8007376:	4013      	ands	r3, r2
 8007378:	2b00      	cmp	r3, #0
 800737a:	bf14      	ite	ne
 800737c:	2301      	movne	r3, #1
 800737e:	2300      	moveq	r3, #0
 8007380:	72fb      	strb	r3, [r7, #11]

  return ok;
 8007382:	7afb      	ldrb	r3, [r7, #11]
}
 8007384:	4618      	mov	r0, r3
 8007386:	3710      	adds	r7, #16
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}

0800738c <ai_wine_quality_run>:


AI_API_ENTRY
ai_i32 ai_wine_quality_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	68b9      	ldr	r1, [r7, #8]
 800739c:	68f8      	ldr	r0, [r7, #12]
 800739e:	f000 fdaf 	bl	8007f00 <ai_platform_network_process>
 80073a2:	4603      	mov	r3, r0
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3710      	adds	r7, #16
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <ai_wine_quality_data_params_get>:
 * @ingroup wine_quality_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_wine_quality_data_params_get(ai_network_params* params)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b086      	sub	sp, #24
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d101      	bne.n	80073be <ai_wine_quality_data_params_get+0x12>
 80073ba:	2300      	movs	r3, #0
 80073bc:	e016      	b.n	80073ec <ai_wine_quality_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 80073be:	4a0d      	ldr	r2, [pc, #52]	; (80073f4 <ai_wine_quality_data_params_get+0x48>)
 80073c0:	f107 0310 	add.w	r3, r7, #16
 80073c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80073c8:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_WINE_QUALITY_DATA_ACTIVATIONS_COUNT, g_wine_quality_data_map_activations);
  
  const ai_buffer_array map_weights = 
 80073cc:	4a0a      	ldr	r2, [pc, #40]	; (80073f8 <ai_wine_quality_data_params_get+0x4c>)
 80073ce:	f107 0308 	add.w	r3, r7, #8
 80073d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80073d6:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_WINE_QUALITY_DATA_WEIGHTS_COUNT, g_wine_quality_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 80073da:	f107 0210 	add.w	r2, r7, #16
 80073de:	f107 0308 	add.w	r3, r7, #8
 80073e2:	4619      	mov	r1, r3
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 f903 	bl	80075f0 <ai_platform_bind_network_params>
 80073ea:	4603      	mov	r3, r0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3718      	adds	r7, #24
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}
 80073f4:	0800a9cc 	.word	0x0800a9cc
 80073f8:	0800a9d4 	.word	0x0800a9d4

080073fc <ai_buffer_get_size>:
 80073fc:	b378      	cbz	r0, 800745e <ai_buffer_get_size+0x62>
 80073fe:	b410      	push	{r4}
 8007400:	6803      	ldr	r3, [r0, #0]
 8007402:	4a17      	ldr	r2, [pc, #92]	; (8007460 <ai_buffer_get_size+0x64>)
 8007404:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8007408:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800740c:	4293      	cmp	r3, r2
 800740e:	d01e      	beq.n	800744e <ai_buffer_get_size+0x52>
 8007410:	6984      	ldr	r4, [r0, #24]
 8007412:	6862      	ldr	r2, [r4, #4]
 8007414:	7d03      	ldrb	r3, [r0, #20]
 8007416:	6941      	ldr	r1, [r0, #20]
 8007418:	f1a3 0301 	sub.w	r3, r3, #1
 800741c:	fab3 f383 	clz	r3, r3
 8007420:	095b      	lsrs	r3, r3, #5
 8007422:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8007426:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800742a:	da0b      	bge.n	8007444 <ai_buffer_get_size+0x48>
 800742c:	2b01      	cmp	r3, #1
 800742e:	d102      	bne.n	8007436 <ai_buffer_get_size+0x3a>
 8007430:	2802      	cmp	r0, #2
 8007432:	d007      	beq.n	8007444 <ai_buffer_get_size+0x48>
 8007434:	2302      	movs	r3, #2
 8007436:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800743a:	3301      	adds	r3, #1
 800743c:	4298      	cmp	r0, r3
 800743e:	fb01 f202 	mul.w	r2, r1, r2
 8007442:	d1f3      	bne.n	800742c <ai_buffer_get_size+0x30>
 8007444:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8007448:	f85d 4b04 	ldr.w	r4, [sp], #4
 800744c:	4770      	bx	lr
 800744e:	2900      	cmp	r1, #0
 8007450:	d0de      	beq.n	8007410 <ai_buffer_get_size+0x14>
 8007452:	6984      	ldr	r4, [r0, #24]
 8007454:	6863      	ldr	r3, [r4, #4]
 8007456:	331f      	adds	r3, #31
 8007458:	f023 021f 	bic.w	r2, r3, #31
 800745c:	e7da      	b.n	8007414 <ai_buffer_get_size+0x18>
 800745e:	4770      	bx	lr
 8007460:	000400c0 	.word	0x000400c0

08007464 <ai_buffer_array_sane>:
 8007464:	b138      	cbz	r0, 8007476 <ai_buffer_array_sane+0x12>
 8007466:	6843      	ldr	r3, [r0, #4]
 8007468:	b123      	cbz	r3, 8007474 <ai_buffer_array_sane+0x10>
 800746a:	8840      	ldrh	r0, [r0, #2]
 800746c:	3800      	subs	r0, #0
 800746e:	bf18      	it	ne
 8007470:	2001      	movne	r0, #1
 8007472:	4770      	bx	lr
 8007474:	4618      	mov	r0, r3
 8007476:	4770      	bx	lr

08007478 <ai_buffer_array_item_set_address>:
 8007478:	b150      	cbz	r0, 8007490 <ai_buffer_array_item_set_address+0x18>
 800747a:	6843      	ldr	r3, [r0, #4]
 800747c:	b14b      	cbz	r3, 8007492 <ai_buffer_array_item_set_address+0x1a>
 800747e:	8840      	ldrh	r0, [r0, #2]
 8007480:	b900      	cbnz	r0, 8007484 <ai_buffer_array_item_set_address+0xc>
 8007482:	4770      	bx	lr
 8007484:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8007488:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800748c:	2001      	movs	r0, #1
 800748e:	604a      	str	r2, [r1, #4]
 8007490:	4770      	bx	lr
 8007492:	4618      	mov	r0, r3
 8007494:	4770      	bx	lr
 8007496:	bf00      	nop

08007498 <_ai_platform_acquire_crc>:
 8007498:	2001      	movs	r0, #1
 800749a:	4770      	bx	lr

0800749c <_ai_platform_release_crc>:
 800749c:	4770      	bx	lr
 800749e:	bf00      	nop

080074a0 <ai_platform_get_weights_map>:
 80074a0:	2a00      	cmp	r2, #0
 80074a2:	d037      	beq.n	8007514 <ai_platform_get_weights_map+0x74>
 80074a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074a6:	4604      	mov	r4, r0
 80074a8:	b1a0      	cbz	r0, 80074d4 <ai_platform_get_weights_map+0x34>
 80074aa:	460f      	mov	r7, r1
 80074ac:	b191      	cbz	r1, 80074d4 <ai_platform_get_weights_map+0x34>
 80074ae:	4b25      	ldr	r3, [pc, #148]	; (8007544 <ai_platform_get_weights_map+0xa4>)
 80074b0:	6810      	ldr	r0, [r2, #0]
 80074b2:	4298      	cmp	r0, r3
 80074b4:	4615      	mov	r5, r2
 80074b6:	d00f      	beq.n	80074d8 <ai_platform_get_weights_map+0x38>
 80074b8:	6855      	ldr	r5, [r2, #4]
 80074ba:	b15d      	cbz	r5, 80074d4 <ai_platform_get_weights_map+0x34>
 80074bc:	682e      	ldr	r6, [r5, #0]
 80074be:	429e      	cmp	r6, r3
 80074c0:	d02a      	beq.n	8007518 <ai_platform_get_weights_map+0x78>
 80074c2:	f1a1 0001 	sub.w	r0, r1, #1
 80074c6:	6025      	str	r5, [r4, #0]
 80074c8:	fab0 f080 	clz	r0, r0
 80074cc:	0940      	lsrs	r0, r0, #5
 80074ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074d0:	42a7      	cmp	r7, r4
 80074d2:	d034      	beq.n	800753e <ai_platform_get_weights_map+0x9e>
 80074d4:	2000      	movs	r0, #0
 80074d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074d8:	1d10      	adds	r0, r2, #4
 80074da:	f7ff ffc3 	bl	8007464 <ai_buffer_array_sane>
 80074de:	2800      	cmp	r0, #0
 80074e0:	d0f8      	beq.n	80074d4 <ai_platform_get_weights_map+0x34>
 80074e2:	88eb      	ldrh	r3, [r5, #6]
 80074e4:	429f      	cmp	r7, r3
 80074e6:	d1f5      	bne.n	80074d4 <ai_platform_get_weights_map+0x34>
 80074e8:	f04f 0e00 	mov.w	lr, #0
 80074ec:	1f23      	subs	r3, r4, #4
 80074ee:	4670      	mov	r0, lr
 80074f0:	68aa      	ldr	r2, [r5, #8]
 80074f2:	eb02 0c0e 	add.w	ip, r2, lr
 80074f6:	f10e 0e1c 	add.w	lr, lr, #28
 80074fa:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80074fe:	b124      	cbz	r4, 800750a <ai_platform_get_weights_map+0x6a>
 8007500:	3001      	adds	r0, #1
 8007502:	4287      	cmp	r7, r0
 8007504:	f843 4f04 	str.w	r4, [r3, #4]!
 8007508:	d1f2      	bne.n	80074f0 <ai_platform_get_weights_map+0x50>
 800750a:	1a38      	subs	r0, r7, r0
 800750c:	fab0 f080 	clz	r0, r0
 8007510:	0940      	lsrs	r0, r0, #5
 8007512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007514:	2000      	movs	r0, #0
 8007516:	4770      	bx	lr
 8007518:	1f23      	subs	r3, r4, #4
 800751a:	4628      	mov	r0, r5
 800751c:	2400      	movs	r4, #0
 800751e:	e000      	b.n	8007522 <ai_platform_get_weights_map+0x82>
 8007520:	4614      	mov	r4, r2
 8007522:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8007526:	42b2      	cmp	r2, r6
 8007528:	d0d2      	beq.n	80074d0 <ai_platform_get_weights_map+0x30>
 800752a:	f843 2f04 	str.w	r2, [r3, #4]!
 800752e:	1c62      	adds	r2, r4, #1
 8007530:	4297      	cmp	r7, r2
 8007532:	d1f5      	bne.n	8007520 <ai_platform_get_weights_map+0x80>
 8007534:	3402      	adds	r4, #2
 8007536:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800753a:	42b3      	cmp	r3, r6
 800753c:	d1ca      	bne.n	80074d4 <ai_platform_get_weights_map+0x34>
 800753e:	2001      	movs	r0, #1
 8007540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007542:	bf00      	nop
 8007544:	a1facade 	.word	0xa1facade

08007548 <ai_platform_get_activations_map>:
 8007548:	2a00      	cmp	r2, #0
 800754a:	d038      	beq.n	80075be <ai_platform_get_activations_map+0x76>
 800754c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800754e:	4604      	mov	r4, r0
 8007550:	b1a0      	cbz	r0, 800757c <ai_platform_get_activations_map+0x34>
 8007552:	460f      	mov	r7, r1
 8007554:	b191      	cbz	r1, 800757c <ai_platform_get_activations_map+0x34>
 8007556:	4b25      	ldr	r3, [pc, #148]	; (80075ec <ai_platform_get_activations_map+0xa4>)
 8007558:	6810      	ldr	r0, [r2, #0]
 800755a:	4298      	cmp	r0, r3
 800755c:	4615      	mov	r5, r2
 800755e:	d00f      	beq.n	8007580 <ai_platform_get_activations_map+0x38>
 8007560:	6a15      	ldr	r5, [r2, #32]
 8007562:	b15d      	cbz	r5, 800757c <ai_platform_get_activations_map+0x34>
 8007564:	682e      	ldr	r6, [r5, #0]
 8007566:	429e      	cmp	r6, r3
 8007568:	d02b      	beq.n	80075c2 <ai_platform_get_activations_map+0x7a>
 800756a:	f1a1 0001 	sub.w	r0, r1, #1
 800756e:	6025      	str	r5, [r4, #0]
 8007570:	fab0 f080 	clz	r0, r0
 8007574:	0940      	lsrs	r0, r0, #5
 8007576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007578:	42a7      	cmp	r7, r4
 800757a:	d035      	beq.n	80075e8 <ai_platform_get_activations_map+0xa0>
 800757c:	2000      	movs	r0, #0
 800757e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007580:	f102 000c 	add.w	r0, r2, #12
 8007584:	f7ff ff6e 	bl	8007464 <ai_buffer_array_sane>
 8007588:	2800      	cmp	r0, #0
 800758a:	d0f7      	beq.n	800757c <ai_platform_get_activations_map+0x34>
 800758c:	89eb      	ldrh	r3, [r5, #14]
 800758e:	429f      	cmp	r7, r3
 8007590:	d1f4      	bne.n	800757c <ai_platform_get_activations_map+0x34>
 8007592:	f04f 0e00 	mov.w	lr, #0
 8007596:	1f23      	subs	r3, r4, #4
 8007598:	4670      	mov	r0, lr
 800759a:	692a      	ldr	r2, [r5, #16]
 800759c:	eb02 0c0e 	add.w	ip, r2, lr
 80075a0:	f10e 0e1c 	add.w	lr, lr, #28
 80075a4:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80075a8:	b124      	cbz	r4, 80075b4 <ai_platform_get_activations_map+0x6c>
 80075aa:	3001      	adds	r0, #1
 80075ac:	4287      	cmp	r7, r0
 80075ae:	f843 4f04 	str.w	r4, [r3, #4]!
 80075b2:	d1f2      	bne.n	800759a <ai_platform_get_activations_map+0x52>
 80075b4:	1a38      	subs	r0, r7, r0
 80075b6:	fab0 f080 	clz	r0, r0
 80075ba:	0940      	lsrs	r0, r0, #5
 80075bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075be:	2000      	movs	r0, #0
 80075c0:	4770      	bx	lr
 80075c2:	1f23      	subs	r3, r4, #4
 80075c4:	4628      	mov	r0, r5
 80075c6:	2400      	movs	r4, #0
 80075c8:	e000      	b.n	80075cc <ai_platform_get_activations_map+0x84>
 80075ca:	4614      	mov	r4, r2
 80075cc:	f850 2f04 	ldr.w	r2, [r0, #4]!
 80075d0:	42b2      	cmp	r2, r6
 80075d2:	d0d1      	beq.n	8007578 <ai_platform_get_activations_map+0x30>
 80075d4:	f843 2f04 	str.w	r2, [r3, #4]!
 80075d8:	1c62      	adds	r2, r4, #1
 80075da:	4297      	cmp	r7, r2
 80075dc:	d1f5      	bne.n	80075ca <ai_platform_get_activations_map+0x82>
 80075de:	3402      	adds	r4, #2
 80075e0:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80075e4:	42b3      	cmp	r3, r6
 80075e6:	d1c9      	bne.n	800757c <ai_platform_get_activations_map+0x34>
 80075e8:	2001      	movs	r0, #1
 80075ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075ec:	a1facade 	.word	0xa1facade

080075f0 <ai_platform_bind_network_params>:
 80075f0:	b1a0      	cbz	r0, 800761c <ai_platform_bind_network_params+0x2c>
 80075f2:	b1b1      	cbz	r1, 8007622 <ai_platform_bind_network_params+0x32>
 80075f4:	b1c2      	cbz	r2, 8007628 <ai_platform_bind_network_params+0x38>
 80075f6:	b410      	push	{r4}
 80075f8:	4603      	mov	r3, r0
 80075fa:	4c0d      	ldr	r4, [pc, #52]	; (8007630 <ai_platform_bind_network_params+0x40>)
 80075fc:	f843 4b04 	str.w	r4, [r3], #4
 8007600:	f100 0c0c 	add.w	ip, r0, #12
 8007604:	c903      	ldmia	r1, {r0, r1}
 8007606:	e883 0003 	stmia.w	r3, {r0, r1}
 800760a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800760e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8007612:	2301      	movs	r3, #1
 8007614:	4618      	mov	r0, r3
 8007616:	f85d 4b04 	ldr.w	r4, [sp], #4
 800761a:	4770      	bx	lr
 800761c:	4603      	mov	r3, r0
 800761e:	4618      	mov	r0, r3
 8007620:	4770      	bx	lr
 8007622:	460b      	mov	r3, r1
 8007624:	4618      	mov	r0, r3
 8007626:	4770      	bx	lr
 8007628:	4613      	mov	r3, r2
 800762a:	4618      	mov	r0, r3
 800762c:	4770      	bx	lr
 800762e:	bf00      	nop
 8007630:	a1facade 	.word	0xa1facade

08007634 <ai_platform_network_get_error>:
 8007634:	b510      	push	{r4, lr}
 8007636:	b1f0      	cbz	r0, 8007676 <ai_platform_network_get_error+0x42>
 8007638:	4b2f      	ldr	r3, [pc, #188]	; (80076f8 <ai_platform_network_get_error+0xc4>)
 800763a:	6802      	ldr	r2, [r0, #0]
 800763c:	429a      	cmp	r2, r3
 800763e:	4604      	mov	r4, r0
 8007640:	d119      	bne.n	8007676 <ai_platform_network_get_error+0x42>
 8007642:	f7ff ff29 	bl	8007498 <_ai_platform_acquire_crc>
 8007646:	4b2d      	ldr	r3, [pc, #180]	; (80076fc <ai_platform_network_get_error+0xc8>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800764e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007652:	d03c      	beq.n	80076ce <ai_platform_network_get_error+0x9a>
 8007654:	4a2a      	ldr	r2, [pc, #168]	; (8007700 <ai_platform_network_get_error+0xcc>)
 8007656:	2301      	movs	r3, #1
 8007658:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800765c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007660:	2b00      	cmp	r3, #0
 8007662:	d1fb      	bne.n	800765c <ai_platform_network_get_error+0x28>
 8007664:	4b27      	ldr	r3, [pc, #156]	; (8007704 <ai_platform_network_get_error+0xd0>)
 8007666:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800766a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800766e:	4b26      	ldr	r3, [pc, #152]	; (8007708 <ai_platform_network_get_error+0xd4>)
 8007670:	429a      	cmp	r2, r3
 8007672:	d038      	beq.n	80076e6 <ai_platform_network_get_error+0xb2>
 8007674:	e7fe      	b.n	8007674 <ai_platform_network_get_error+0x40>
 8007676:	f7ff ff0f 	bl	8007498 <_ai_platform_acquire_crc>
 800767a:	4b20      	ldr	r3, [pc, #128]	; (80076fc <ai_platform_network_get_error+0xc8>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007686:	d010      	beq.n	80076aa <ai_platform_network_get_error+0x76>
 8007688:	4a1d      	ldr	r2, [pc, #116]	; (8007700 <ai_platform_network_get_error+0xcc>)
 800768a:	2301      	movs	r3, #1
 800768c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007690:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007694:	2b00      	cmp	r3, #0
 8007696:	d1fb      	bne.n	8007690 <ai_platform_network_get_error+0x5c>
 8007698:	4b1a      	ldr	r3, [pc, #104]	; (8007704 <ai_platform_network_get_error+0xd0>)
 800769a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800769e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80076a2:	4b19      	ldr	r3, [pc, #100]	; (8007708 <ai_platform_network_get_error+0xd4>)
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d00d      	beq.n	80076c4 <ai_platform_network_get_error+0x90>
 80076a8:	e7fe      	b.n	80076a8 <ai_platform_network_get_error+0x74>
 80076aa:	4a18      	ldr	r2, [pc, #96]	; (800770c <ai_platform_network_get_error+0xd8>)
 80076ac:	2301      	movs	r3, #1
 80076ae:	6093      	str	r3, [r2, #8]
 80076b0:	6893      	ldr	r3, [r2, #8]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d1fc      	bne.n	80076b0 <ai_platform_network_get_error+0x7c>
 80076b6:	4b13      	ldr	r3, [pc, #76]	; (8007704 <ai_platform_network_get_error+0xd0>)
 80076b8:	6013      	str	r3, [r2, #0]
 80076ba:	6812      	ldr	r2, [r2, #0]
 80076bc:	4b12      	ldr	r3, [pc, #72]	; (8007708 <ai_platform_network_get_error+0xd4>)
 80076be:	429a      	cmp	r2, r3
 80076c0:	d000      	beq.n	80076c4 <ai_platform_network_get_error+0x90>
 80076c2:	e7fe      	b.n	80076c2 <ai_platform_network_get_error+0x8e>
 80076c4:	f7ff feea 	bl	800749c <_ai_platform_release_crc>
 80076c8:	f241 0010 	movw	r0, #4112	; 0x1010
 80076cc:	bd10      	pop	{r4, pc}
 80076ce:	4a0f      	ldr	r2, [pc, #60]	; (800770c <ai_platform_network_get_error+0xd8>)
 80076d0:	2301      	movs	r3, #1
 80076d2:	6093      	str	r3, [r2, #8]
 80076d4:	6893      	ldr	r3, [r2, #8]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d1fc      	bne.n	80076d4 <ai_platform_network_get_error+0xa0>
 80076da:	4b0a      	ldr	r3, [pc, #40]	; (8007704 <ai_platform_network_get_error+0xd0>)
 80076dc:	6013      	str	r3, [r2, #0]
 80076de:	6812      	ldr	r2, [r2, #0]
 80076e0:	4b09      	ldr	r3, [pc, #36]	; (8007708 <ai_platform_network_get_error+0xd4>)
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d107      	bne.n	80076f6 <ai_platform_network_get_error+0xc2>
 80076e6:	f7ff fed9 	bl	800749c <_ai_platform_release_crc>
 80076ea:	f104 0010 	add.w	r0, r4, #16
 80076ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076f2:	f000 be8b 	b.w	800840c <core_get_error>
 80076f6:	e7fe      	b.n	80076f6 <ai_platform_network_get_error+0xc2>
 80076f8:	a1c00100 	.word	0xa1c00100
 80076fc:	e0042000 	.word	0xe0042000
 8007700:	58024000 	.word	0x58024000
 8007704:	f407a5c2 	.word	0xf407a5c2
 8007708:	b5e8b5cd 	.word	0xb5e8b5cd
 800770c:	40023000 	.word	0x40023000

08007710 <ai_platform_network_set_error>:
 8007710:	b110      	cbz	r0, 8007718 <ai_platform_network_set_error+0x8>
 8007712:	3010      	adds	r0, #16
 8007714:	f000 be80 	b.w	8008418 <core_set_error>
 8007718:	4770      	bx	lr
 800771a:	bf00      	nop

0800771c <ai_platform_inputs_get>:
 800771c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007720:	b085      	sub	sp, #20
 8007722:	9102      	str	r1, [sp, #8]
 8007724:	b1f0      	cbz	r0, 8007764 <ai_platform_inputs_get+0x48>
 8007726:	4b62      	ldr	r3, [pc, #392]	; (80078b0 <ai_platform_inputs_get+0x194>)
 8007728:	6802      	ldr	r2, [r0, #0]
 800772a:	429a      	cmp	r2, r3
 800772c:	4607      	mov	r7, r0
 800772e:	d119      	bne.n	8007764 <ai_platform_inputs_get+0x48>
 8007730:	f7ff feb2 	bl	8007498 <_ai_platform_acquire_crc>
 8007734:	4b5f      	ldr	r3, [pc, #380]	; (80078b4 <ai_platform_inputs_get+0x198>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800773c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007740:	d03d      	beq.n	80077be <ai_platform_inputs_get+0xa2>
 8007742:	4a5d      	ldr	r2, [pc, #372]	; (80078b8 <ai_platform_inputs_get+0x19c>)
 8007744:	2301      	movs	r3, #1
 8007746:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800774a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800774e:	2b00      	cmp	r3, #0
 8007750:	d1fb      	bne.n	800774a <ai_platform_inputs_get+0x2e>
 8007752:	4b5a      	ldr	r3, [pc, #360]	; (80078bc <ai_platform_inputs_get+0x1a0>)
 8007754:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007758:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800775c:	4b58      	ldr	r3, [pc, #352]	; (80078c0 <ai_platform_inputs_get+0x1a4>)
 800775e:	429a      	cmp	r2, r3
 8007760:	d039      	beq.n	80077d6 <ai_platform_inputs_get+0xba>
 8007762:	e7fe      	b.n	8007762 <ai_platform_inputs_get+0x46>
 8007764:	f7ff fe98 	bl	8007498 <_ai_platform_acquire_crc>
 8007768:	4b52      	ldr	r3, [pc, #328]	; (80078b4 <ai_platform_inputs_get+0x198>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007770:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007774:	d010      	beq.n	8007798 <ai_platform_inputs_get+0x7c>
 8007776:	4a50      	ldr	r2, [pc, #320]	; (80078b8 <ai_platform_inputs_get+0x19c>)
 8007778:	2301      	movs	r3, #1
 800777a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800777e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007782:	2b00      	cmp	r3, #0
 8007784:	d1fb      	bne.n	800777e <ai_platform_inputs_get+0x62>
 8007786:	4b4d      	ldr	r3, [pc, #308]	; (80078bc <ai_platform_inputs_get+0x1a0>)
 8007788:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800778c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007790:	4b4b      	ldr	r3, [pc, #300]	; (80078c0 <ai_platform_inputs_get+0x1a4>)
 8007792:	429a      	cmp	r2, r3
 8007794:	d00d      	beq.n	80077b2 <ai_platform_inputs_get+0x96>
 8007796:	e7fe      	b.n	8007796 <ai_platform_inputs_get+0x7a>
 8007798:	4a4a      	ldr	r2, [pc, #296]	; (80078c4 <ai_platform_inputs_get+0x1a8>)
 800779a:	2301      	movs	r3, #1
 800779c:	6093      	str	r3, [r2, #8]
 800779e:	6893      	ldr	r3, [r2, #8]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d1fc      	bne.n	800779e <ai_platform_inputs_get+0x82>
 80077a4:	4b45      	ldr	r3, [pc, #276]	; (80078bc <ai_platform_inputs_get+0x1a0>)
 80077a6:	6013      	str	r3, [r2, #0]
 80077a8:	6812      	ldr	r2, [r2, #0]
 80077aa:	4b45      	ldr	r3, [pc, #276]	; (80078c0 <ai_platform_inputs_get+0x1a4>)
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d000      	beq.n	80077b2 <ai_platform_inputs_get+0x96>
 80077b0:	e7fe      	b.n	80077b0 <ai_platform_inputs_get+0x94>
 80077b2:	f7ff fe73 	bl	800749c <_ai_platform_release_crc>
 80077b6:	2000      	movs	r0, #0
 80077b8:	b005      	add	sp, #20
 80077ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077be:	4a41      	ldr	r2, [pc, #260]	; (80078c4 <ai_platform_inputs_get+0x1a8>)
 80077c0:	2301      	movs	r3, #1
 80077c2:	6093      	str	r3, [r2, #8]
 80077c4:	6893      	ldr	r3, [r2, #8]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d1fc      	bne.n	80077c4 <ai_platform_inputs_get+0xa8>
 80077ca:	4b3c      	ldr	r3, [pc, #240]	; (80078bc <ai_platform_inputs_get+0x1a0>)
 80077cc:	6013      	str	r3, [r2, #0]
 80077ce:	6812      	ldr	r2, [r2, #0]
 80077d0:	4b3b      	ldr	r3, [pc, #236]	; (80078c0 <ai_platform_inputs_get+0x1a4>)
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d155      	bne.n	8007882 <ai_platform_inputs_get+0x166>
 80077d6:	f7ff fe61 	bl	800749c <_ai_platform_release_crc>
 80077da:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d051      	beq.n	8007884 <ai_platform_inputs_get+0x168>
 80077e0:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 80077e4:	f1ba 0f00 	cmp.w	sl, #0
 80077e8:	d04c      	beq.n	8007884 <ai_platform_inputs_get+0x168>
 80077ea:	f04f 0b00 	mov.w	fp, #0
 80077ee:	465d      	mov	r5, fp
 80077f0:	9703      	str	r7, [sp, #12]
 80077f2:	e016      	b.n	8007822 <ai_platform_inputs_get+0x106>
 80077f4:	9901      	ldr	r1, [sp, #4]
 80077f6:	2301      	movs	r3, #1
 80077f8:	507b      	str	r3, [r7, r1]
 80077fa:	69b1      	ldr	r1, [r6, #24]
 80077fc:	6849      	ldr	r1, [r1, #4]
 80077fe:	6121      	str	r1, [r4, #16]
 8007800:	f04f 0301 	mov.w	r3, #1
 8007804:	7523      	strb	r3, [r4, #20]
 8007806:	e9c4 c200 	strd	ip, r2, [r4]
 800780a:	6962      	ldr	r2, [r4, #20]
 800780c:	60a0      	str	r0, [r4, #8]
 800780e:	2300      	movs	r3, #0
 8007810:	f369 221f 	bfi	r2, r9, #8, #24
 8007814:	f8c4 8018 	str.w	r8, [r4, #24]
 8007818:	60e3      	str	r3, [r4, #12]
 800781a:	3501      	adds	r5, #1
 800781c:	f10b 0b1c 	add.w	fp, fp, #28
 8007820:	6162      	str	r2, [r4, #20]
 8007822:	f8ba 3000 	ldrh.w	r3, [sl]
 8007826:	42ab      	cmp	r3, r5
 8007828:	b2aa      	uxth	r2, r5
 800782a:	d93a      	bls.n	80078a2 <ai_platform_inputs_get+0x186>
 800782c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007830:	00e9      	lsls	r1, r5, #3
 8007832:	9101      	str	r1, [sp, #4]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d034      	beq.n	80078a2 <ai_platform_inputs_get+0x186>
 8007838:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800783c:	2e00      	cmp	r6, #0
 800783e:	d030      	beq.n	80078a2 <ai_platform_inputs_get+0x186>
 8007840:	f8da 3008 	ldr.w	r3, [sl, #8]
 8007844:	69b2      	ldr	r2, [r6, #24]
 8007846:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800784a:	6810      	ldr	r0, [r2, #0]
 800784c:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8007850:	68b3      	ldr	r3, [r6, #8]
 8007852:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8007856:	f001 fcd1 	bl	80091fc <ai_array_to_buffer_fmt>
 800785a:	69b1      	ldr	r1, [r6, #24]
 800785c:	4684      	mov	ip, r0
 800785e:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8007862:	688a      	ldr	r2, [r1, #8]
 8007864:	445c      	add	r4, fp
 8007866:	2800      	cmp	r0, #0
 8007868:	d0c8      	beq.n	80077fc <ai_platform_inputs_get+0xe0>
 800786a:	2100      	movs	r1, #0
 800786c:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8007870:	6831      	ldr	r1, [r6, #0]
 8007872:	6041      	str	r1, [r0, #4]
 8007874:	b111      	cbz	r1, 800787c <ai_platform_inputs_get+0x160>
 8007876:	8849      	ldrh	r1, [r1, #2]
 8007878:	2900      	cmp	r1, #0
 800787a:	d1bb      	bne.n	80077f4 <ai_platform_inputs_get+0xd8>
 800787c:	69b1      	ldr	r1, [r6, #24]
 800787e:	2000      	movs	r0, #0
 8007880:	e7bc      	b.n	80077fc <ai_platform_inputs_get+0xe0>
 8007882:	e7fe      	b.n	8007882 <ai_platform_inputs_get+0x166>
 8007884:	2218      	movs	r2, #24
 8007886:	2111      	movs	r1, #17
 8007888:	f107 0010 	add.w	r0, r7, #16
 800788c:	f000 fdc4 	bl	8008418 <core_set_error>
 8007890:	2200      	movs	r2, #0
 8007892:	4610      	mov	r0, r2
 8007894:	9b02      	ldr	r3, [sp, #8]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d08e      	beq.n	80077b8 <ai_platform_inputs_get+0x9c>
 800789a:	801a      	strh	r2, [r3, #0]
 800789c:	b005      	add	sp, #20
 800789e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078a2:	9f03      	ldr	r7, [sp, #12]
 80078a4:	2a00      	cmp	r2, #0
 80078a6:	d0ed      	beq.n	8007884 <ai_platform_inputs_get+0x168>
 80078a8:	f8da 3008 	ldr.w	r3, [sl, #8]
 80078ac:	6858      	ldr	r0, [r3, #4]
 80078ae:	e7f1      	b.n	8007894 <ai_platform_inputs_get+0x178>
 80078b0:	a1c00100 	.word	0xa1c00100
 80078b4:	e0042000 	.word	0xe0042000
 80078b8:	58024000 	.word	0x58024000
 80078bc:	f407a5c2 	.word	0xf407a5c2
 80078c0:	b5e8b5cd 	.word	0xb5e8b5cd
 80078c4:	40023000 	.word	0x40023000

080078c8 <ai_platform_outputs_get>:
 80078c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078cc:	b085      	sub	sp, #20
 80078ce:	9102      	str	r1, [sp, #8]
 80078d0:	b1f0      	cbz	r0, 8007910 <ai_platform_outputs_get+0x48>
 80078d2:	4b5f      	ldr	r3, [pc, #380]	; (8007a50 <ai_platform_outputs_get+0x188>)
 80078d4:	6802      	ldr	r2, [r0, #0]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	4607      	mov	r7, r0
 80078da:	d119      	bne.n	8007910 <ai_platform_outputs_get+0x48>
 80078dc:	f7ff fddc 	bl	8007498 <_ai_platform_acquire_crc>
 80078e0:	4b5c      	ldr	r3, [pc, #368]	; (8007a54 <ai_platform_outputs_get+0x18c>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80078e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078ec:	d03d      	beq.n	800796a <ai_platform_outputs_get+0xa2>
 80078ee:	4a5a      	ldr	r2, [pc, #360]	; (8007a58 <ai_platform_outputs_get+0x190>)
 80078f0:	2301      	movs	r3, #1
 80078f2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80078f6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d1fb      	bne.n	80078f6 <ai_platform_outputs_get+0x2e>
 80078fe:	4b57      	ldr	r3, [pc, #348]	; (8007a5c <ai_platform_outputs_get+0x194>)
 8007900:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007904:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007908:	4b55      	ldr	r3, [pc, #340]	; (8007a60 <ai_platform_outputs_get+0x198>)
 800790a:	429a      	cmp	r2, r3
 800790c:	d039      	beq.n	8007982 <ai_platform_outputs_get+0xba>
 800790e:	e7fe      	b.n	800790e <ai_platform_outputs_get+0x46>
 8007910:	f7ff fdc2 	bl	8007498 <_ai_platform_acquire_crc>
 8007914:	4b4f      	ldr	r3, [pc, #316]	; (8007a54 <ai_platform_outputs_get+0x18c>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800791c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007920:	d010      	beq.n	8007944 <ai_platform_outputs_get+0x7c>
 8007922:	4a4d      	ldr	r2, [pc, #308]	; (8007a58 <ai_platform_outputs_get+0x190>)
 8007924:	2301      	movs	r3, #1
 8007926:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800792a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800792e:	2b00      	cmp	r3, #0
 8007930:	d1fb      	bne.n	800792a <ai_platform_outputs_get+0x62>
 8007932:	4b4a      	ldr	r3, [pc, #296]	; (8007a5c <ai_platform_outputs_get+0x194>)
 8007934:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007938:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800793c:	4b48      	ldr	r3, [pc, #288]	; (8007a60 <ai_platform_outputs_get+0x198>)
 800793e:	429a      	cmp	r2, r3
 8007940:	d00d      	beq.n	800795e <ai_platform_outputs_get+0x96>
 8007942:	e7fe      	b.n	8007942 <ai_platform_outputs_get+0x7a>
 8007944:	4a47      	ldr	r2, [pc, #284]	; (8007a64 <ai_platform_outputs_get+0x19c>)
 8007946:	2301      	movs	r3, #1
 8007948:	6093      	str	r3, [r2, #8]
 800794a:	6893      	ldr	r3, [r2, #8]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d1fc      	bne.n	800794a <ai_platform_outputs_get+0x82>
 8007950:	4b42      	ldr	r3, [pc, #264]	; (8007a5c <ai_platform_outputs_get+0x194>)
 8007952:	6013      	str	r3, [r2, #0]
 8007954:	6812      	ldr	r2, [r2, #0]
 8007956:	4b42      	ldr	r3, [pc, #264]	; (8007a60 <ai_platform_outputs_get+0x198>)
 8007958:	429a      	cmp	r2, r3
 800795a:	d000      	beq.n	800795e <ai_platform_outputs_get+0x96>
 800795c:	e7fe      	b.n	800795c <ai_platform_outputs_get+0x94>
 800795e:	f7ff fd9d 	bl	800749c <_ai_platform_release_crc>
 8007962:	2000      	movs	r0, #0
 8007964:	b005      	add	sp, #20
 8007966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800796a:	4a3e      	ldr	r2, [pc, #248]	; (8007a64 <ai_platform_outputs_get+0x19c>)
 800796c:	2301      	movs	r3, #1
 800796e:	6093      	str	r3, [r2, #8]
 8007970:	6893      	ldr	r3, [r2, #8]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d1fc      	bne.n	8007970 <ai_platform_outputs_get+0xa8>
 8007976:	4b39      	ldr	r3, [pc, #228]	; (8007a5c <ai_platform_outputs_get+0x194>)
 8007978:	6013      	str	r3, [r2, #0]
 800797a:	6812      	ldr	r2, [r2, #0]
 800797c:	4b38      	ldr	r3, [pc, #224]	; (8007a60 <ai_platform_outputs_get+0x198>)
 800797e:	429a      	cmp	r2, r3
 8007980:	d150      	bne.n	8007a24 <ai_platform_outputs_get+0x15c>
 8007982:	f7ff fd8b 	bl	800749c <_ai_platform_release_crc>
 8007986:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007988:	2b01      	cmp	r3, #1
 800798a:	d958      	bls.n	8007a3e <ai_platform_outputs_get+0x176>
 800798c:	f04f 0b00 	mov.w	fp, #0
 8007990:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8007994:	9703      	str	r7, [sp, #12]
 8007996:	465d      	mov	r5, fp
 8007998:	e016      	b.n	80079c8 <ai_platform_outputs_get+0x100>
 800799a:	9901      	ldr	r1, [sp, #4]
 800799c:	2301      	movs	r3, #1
 800799e:	507b      	str	r3, [r7, r1]
 80079a0:	69b1      	ldr	r1, [r6, #24]
 80079a2:	6849      	ldr	r1, [r1, #4]
 80079a4:	6121      	str	r1, [r4, #16]
 80079a6:	f04f 0301 	mov.w	r3, #1
 80079aa:	7523      	strb	r3, [r4, #20]
 80079ac:	e9c4 c200 	strd	ip, r2, [r4]
 80079b0:	6962      	ldr	r2, [r4, #20]
 80079b2:	60a0      	str	r0, [r4, #8]
 80079b4:	2300      	movs	r3, #0
 80079b6:	f369 221f 	bfi	r2, r9, #8, #24
 80079ba:	f8c4 8018 	str.w	r8, [r4, #24]
 80079be:	60e3      	str	r3, [r4, #12]
 80079c0:	3501      	adds	r5, #1
 80079c2:	f10b 0b1c 	add.w	fp, fp, #28
 80079c6:	6162      	str	r2, [r4, #20]
 80079c8:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80079cc:	42ab      	cmp	r3, r5
 80079ce:	b2aa      	uxth	r2, r5
 80079d0:	d929      	bls.n	8007a26 <ai_platform_outputs_get+0x15e>
 80079d2:	f8da 3010 	ldr.w	r3, [sl, #16]
 80079d6:	00e9      	lsls	r1, r5, #3
 80079d8:	9101      	str	r1, [sp, #4]
 80079da:	b323      	cbz	r3, 8007a26 <ai_platform_outputs_get+0x15e>
 80079dc:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80079e0:	b30e      	cbz	r6, 8007a26 <ai_platform_outputs_get+0x15e>
 80079e2:	f8da 3014 	ldr.w	r3, [sl, #20]
 80079e6:	69b2      	ldr	r2, [r6, #24]
 80079e8:	f8d6 800c 	ldr.w	r8, [r6, #12]
 80079ec:	6810      	ldr	r0, [r2, #0]
 80079ee:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 80079f2:	68b3      	ldr	r3, [r6, #8]
 80079f4:	f3c3 2917 	ubfx	r9, r3, #8, #24
 80079f8:	f001 fc00 	bl	80091fc <ai_array_to_buffer_fmt>
 80079fc:	69b1      	ldr	r1, [r6, #24]
 80079fe:	4684      	mov	ip, r0
 8007a00:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8007a04:	688a      	ldr	r2, [r1, #8]
 8007a06:	445c      	add	r4, fp
 8007a08:	2800      	cmp	r0, #0
 8007a0a:	d0ca      	beq.n	80079a2 <ai_platform_outputs_get+0xda>
 8007a0c:	2100      	movs	r1, #0
 8007a0e:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8007a12:	6831      	ldr	r1, [r6, #0]
 8007a14:	6041      	str	r1, [r0, #4]
 8007a16:	b111      	cbz	r1, 8007a1e <ai_platform_outputs_get+0x156>
 8007a18:	8849      	ldrh	r1, [r1, #2]
 8007a1a:	2900      	cmp	r1, #0
 8007a1c:	d1bd      	bne.n	800799a <ai_platform_outputs_get+0xd2>
 8007a1e:	69b1      	ldr	r1, [r6, #24]
 8007a20:	2000      	movs	r0, #0
 8007a22:	e7be      	b.n	80079a2 <ai_platform_outputs_get+0xda>
 8007a24:	e7fe      	b.n	8007a24 <ai_platform_outputs_get+0x15c>
 8007a26:	9f03      	ldr	r7, [sp, #12]
 8007a28:	b14a      	cbz	r2, 8007a3e <ai_platform_outputs_get+0x176>
 8007a2a:	f8da 3014 	ldr.w	r3, [sl, #20]
 8007a2e:	6858      	ldr	r0, [r3, #4]
 8007a30:	9b02      	ldr	r3, [sp, #8]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d096      	beq.n	8007964 <ai_platform_outputs_get+0x9c>
 8007a36:	801a      	strh	r2, [r3, #0]
 8007a38:	b005      	add	sp, #20
 8007a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a3e:	2218      	movs	r2, #24
 8007a40:	2111      	movs	r1, #17
 8007a42:	f107 0010 	add.w	r0, r7, #16
 8007a46:	f000 fce7 	bl	8008418 <core_set_error>
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	4610      	mov	r0, r2
 8007a4e:	e7ef      	b.n	8007a30 <ai_platform_outputs_get+0x168>
 8007a50:	a1c00100 	.word	0xa1c00100
 8007a54:	e0042000 	.word	0xe0042000
 8007a58:	58024000 	.word	0x58024000
 8007a5c:	f407a5c2 	.word	0xf407a5c2
 8007a60:	b5e8b5cd 	.word	0xb5e8b5cd
 8007a64:	40023000 	.word	0x40023000

08007a68 <ai_platform_network_create>:
 8007a68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007a6c:	b083      	sub	sp, #12
 8007a6e:	4606      	mov	r6, r0
 8007a70:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8007a74:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8007a78:	4615      	mov	r5, r2
 8007a7a:	461f      	mov	r7, r3
 8007a7c:	f7ff fd0c 	bl	8007498 <_ai_platform_acquire_crc>
 8007a80:	b188      	cbz	r0, 8007aa6 <ai_platform_network_create+0x3e>
 8007a82:	4a5d      	ldr	r2, [pc, #372]	; (8007bf8 <ai_platform_network_create+0x190>)
 8007a84:	6812      	ldr	r2, [r2, #0]
 8007a86:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8007a8a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8007a8e:	4603      	mov	r3, r0
 8007a90:	d00e      	beq.n	8007ab0 <ai_platform_network_create+0x48>
 8007a92:	4a5a      	ldr	r2, [pc, #360]	; (8007bfc <ai_platform_network_create+0x194>)
 8007a94:	2118      	movs	r1, #24
 8007a96:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8007a9a:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8007a9e:	2918      	cmp	r1, #24
 8007aa0:	d018      	beq.n	8007ad4 <ai_platform_network_create+0x6c>
 8007aa2:	f7ff fcfb 	bl	800749c <_ai_platform_release_crc>
 8007aa6:	f244 1033 	movw	r0, #16691	; 0x4133
 8007aaa:	b003      	add	sp, #12
 8007aac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ab0:	4a53      	ldr	r2, [pc, #332]	; (8007c00 <ai_platform_network_create+0x198>)
 8007ab2:	2101      	movs	r1, #1
 8007ab4:	6091      	str	r1, [r2, #8]
 8007ab6:	2114      	movs	r1, #20
 8007ab8:	e001      	b.n	8007abe <ai_platform_network_create+0x56>
 8007aba:	3901      	subs	r1, #1
 8007abc:	d002      	beq.n	8007ac4 <ai_platform_network_create+0x5c>
 8007abe:	6894      	ldr	r4, [r2, #8]
 8007ac0:	2c00      	cmp	r4, #0
 8007ac2:	d1fa      	bne.n	8007aba <ai_platform_network_create+0x52>
 8007ac4:	4a4e      	ldr	r2, [pc, #312]	; (8007c00 <ai_platform_network_create+0x198>)
 8007ac6:	6891      	ldr	r1, [r2, #8]
 8007ac8:	b911      	cbnz	r1, 8007ad0 <ai_platform_network_create+0x68>
 8007aca:	6812      	ldr	r2, [r2, #0]
 8007acc:	3201      	adds	r2, #1
 8007ace:	d008      	beq.n	8007ae2 <ai_platform_network_create+0x7a>
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	e7e6      	b.n	8007aa2 <ai_platform_network_create+0x3a>
 8007ad4:	2101      	movs	r1, #1
 8007ad6:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8007ada:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8007ade:	2900      	cmp	r1, #0
 8007ae0:	d1fb      	bne.n	8007ada <ai_platform_network_create+0x72>
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f7ff fcda 	bl	800749c <_ai_platform_release_crc>
 8007ae8:	f7ff fcd6 	bl	8007498 <_ai_platform_acquire_crc>
 8007aec:	4b42      	ldr	r3, [pc, #264]	; (8007bf8 <ai_platform_network_create+0x190>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007af4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007af8:	d010      	beq.n	8007b1c <ai_platform_network_create+0xb4>
 8007afa:	4b40      	ldr	r3, [pc, #256]	; (8007bfc <ai_platform_network_create+0x194>)
 8007afc:	2201      	movs	r2, #1
 8007afe:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8007b02:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 8007b06:	2900      	cmp	r1, #0
 8007b08:	d1fb      	bne.n	8007b02 <ai_platform_network_create+0x9a>
 8007b0a:	4a3e      	ldr	r2, [pc, #248]	; (8007c04 <ai_platform_network_create+0x19c>)
 8007b0c:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8007b10:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8007b14:	4b3c      	ldr	r3, [pc, #240]	; (8007c08 <ai_platform_network_create+0x1a0>)
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d00c      	beq.n	8007b34 <ai_platform_network_create+0xcc>
 8007b1a:	e7fe      	b.n	8007b1a <ai_platform_network_create+0xb2>
 8007b1c:	4a38      	ldr	r2, [pc, #224]	; (8007c00 <ai_platform_network_create+0x198>)
 8007b1e:	2301      	movs	r3, #1
 8007b20:	6093      	str	r3, [r2, #8]
 8007b22:	6893      	ldr	r3, [r2, #8]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d1fc      	bne.n	8007b22 <ai_platform_network_create+0xba>
 8007b28:	4b36      	ldr	r3, [pc, #216]	; (8007c04 <ai_platform_network_create+0x19c>)
 8007b2a:	6013      	str	r3, [r2, #0]
 8007b2c:	6812      	ldr	r2, [r2, #0]
 8007b2e:	4b36      	ldr	r3, [pc, #216]	; (8007c08 <ai_platform_network_create+0x1a0>)
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d122      	bne.n	8007b7a <ai_platform_network_create+0x112>
 8007b34:	f7ff fcb2 	bl	800749c <_ai_platform_release_crc>
 8007b38:	b38e      	cbz	r6, 8007b9e <ai_platform_network_create+0x136>
 8007b3a:	4b34      	ldr	r3, [pc, #208]	; (8007c0c <ai_platform_network_create+0x1a4>)
 8007b3c:	602b      	str	r3, [r5, #0]
 8007b3e:	6035      	str	r5, [r6, #0]
 8007b40:	f000 fc62 	bl	8008408 <core_init>
 8007b44:	b1d0      	cbz	r0, 8007b7c <ai_platform_network_create+0x114>
 8007b46:	f7ff fca7 	bl	8007498 <_ai_platform_acquire_crc>
 8007b4a:	4b2b      	ldr	r3, [pc, #172]	; (8007bf8 <ai_platform_network_create+0x190>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007b52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b56:	d025      	beq.n	8007ba4 <ai_platform_network_create+0x13c>
 8007b58:	4a28      	ldr	r2, [pc, #160]	; (8007bfc <ai_platform_network_create+0x194>)
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007b60:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d1fb      	bne.n	8007b60 <ai_platform_network_create+0xf8>
 8007b68:	4b26      	ldr	r3, [pc, #152]	; (8007c04 <ai_platform_network_create+0x19c>)
 8007b6a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007b6e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007b72:	4b25      	ldr	r3, [pc, #148]	; (8007c08 <ai_platform_network_create+0x1a0>)
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d022      	beq.n	8007bbe <ai_platform_network_create+0x156>
 8007b78:	e7fe      	b.n	8007b78 <ai_platform_network_create+0x110>
 8007b7a:	e7fe      	b.n	8007b7a <ai_platform_network_create+0x112>
 8007b7c:	2430      	movs	r4, #48	; 0x30
 8007b7e:	2300      	movs	r3, #0
 8007b80:	6033      	str	r3, [r6, #0]
 8007b82:	2610      	movs	r6, #16
 8007b84:	464a      	mov	r2, r9
 8007b86:	4641      	mov	r1, r8
 8007b88:	4638      	mov	r0, r7
 8007b8a:	f001 fbdd 	bl	8009348 <ai_version_get>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	2000      	movs	r0, #0
 8007b92:	f364 0007 	bfi	r0, r4, #0, #8
 8007b96:	64ab      	str	r3, [r5, #72]	; 0x48
 8007b98:	f366 201f 	bfi	r0, r6, #8, #24
 8007b9c:	e785      	b.n	8007aaa <ai_platform_network_create+0x42>
 8007b9e:	f241 0010 	movw	r0, #4112	; 0x1010
 8007ba2:	e782      	b.n	8007aaa <ai_platform_network_create+0x42>
 8007ba4:	4a16      	ldr	r2, [pc, #88]	; (8007c00 <ai_platform_network_create+0x198>)
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	6093      	str	r3, [r2, #8]
 8007baa:	6893      	ldr	r3, [r2, #8]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d1fc      	bne.n	8007baa <ai_platform_network_create+0x142>
 8007bb0:	4b14      	ldr	r3, [pc, #80]	; (8007c04 <ai_platform_network_create+0x19c>)
 8007bb2:	6013      	str	r3, [r2, #0]
 8007bb4:	6812      	ldr	r2, [r2, #0]
 8007bb6:	4b14      	ldr	r3, [pc, #80]	; (8007c08 <ai_platform_network_create+0x1a0>)
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d000      	beq.n	8007bbe <ai_platform_network_create+0x156>
 8007bbc:	e7fe      	b.n	8007bbc <ai_platform_network_create+0x154>
 8007bbe:	f7ff fc6d 	bl	800749c <_ai_platform_release_crc>
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	4641      	mov	r1, r8
 8007bc6:	4638      	mov	r0, r7
 8007bc8:	f001 fbbe 	bl	8009348 <ai_version_get>
 8007bcc:	2200      	movs	r2, #0
 8007bce:	4604      	mov	r4, r0
 8007bd0:	2105      	movs	r1, #5
 8007bd2:	2001      	movs	r0, #1
 8007bd4:	f001 fbb8 	bl	8009348 <ai_version_get>
 8007bd8:	4284      	cmp	r4, r0
 8007bda:	d001      	beq.n	8007be0 <ai_platform_network_create+0x178>
 8007bdc:	2401      	movs	r4, #1
 8007bde:	e7ce      	b.n	8007b7e <ai_platform_network_create+0x116>
 8007be0:	4b0b      	ldr	r3, [pc, #44]	; (8007c10 <ai_platform_network_create+0x1a8>)
 8007be2:	9301      	str	r3, [sp, #4]
 8007be4:	a801      	add	r0, sp, #4
 8007be6:	f000 fc23 	bl	8008430 <ai_check_custom_types>
 8007bea:	b110      	cbz	r0, 8007bf2 <ai_platform_network_create+0x18a>
 8007bec:	2600      	movs	r6, #0
 8007bee:	4634      	mov	r4, r6
 8007bf0:	e7c8      	b.n	8007b84 <ai_platform_network_create+0x11c>
 8007bf2:	2402      	movs	r4, #2
 8007bf4:	e7c3      	b.n	8007b7e <ai_platform_network_create+0x116>
 8007bf6:	bf00      	nop
 8007bf8:	e0042000 	.word	0xe0042000
 8007bfc:	58024000 	.word	0x58024000
 8007c00:	40023000 	.word	0x40023000
 8007c04:	f407a5c2 	.word	0xf407a5c2
 8007c08:	b5e8b5cd 	.word	0xb5e8b5cd
 8007c0c:	a1c00100 	.word	0xa1c00100
 8007c10:	84048403 	.word	0x84048403

08007c14 <ai_platform_network_init>:
 8007c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c18:	b1f8      	cbz	r0, 8007c5a <ai_platform_network_init+0x46>
 8007c1a:	4b6e      	ldr	r3, [pc, #440]	; (8007dd4 <ai_platform_network_init+0x1c0>)
 8007c1c:	6802      	ldr	r2, [r0, #0]
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	4604      	mov	r4, r0
 8007c22:	d11a      	bne.n	8007c5a <ai_platform_network_init+0x46>
 8007c24:	460e      	mov	r6, r1
 8007c26:	f7ff fc37 	bl	8007498 <_ai_platform_acquire_crc>
 8007c2a:	4b6b      	ldr	r3, [pc, #428]	; (8007dd8 <ai_platform_network_init+0x1c4>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007c32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c36:	d03d      	beq.n	8007cb4 <ai_platform_network_init+0xa0>
 8007c38:	4a68      	ldr	r2, [pc, #416]	; (8007ddc <ai_platform_network_init+0x1c8>)
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007c40:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d1fb      	bne.n	8007c40 <ai_platform_network_init+0x2c>
 8007c48:	4b65      	ldr	r3, [pc, #404]	; (8007de0 <ai_platform_network_init+0x1cc>)
 8007c4a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007c4e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007c52:	4b64      	ldr	r3, [pc, #400]	; (8007de4 <ai_platform_network_init+0x1d0>)
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d039      	beq.n	8007ccc <ai_platform_network_init+0xb8>
 8007c58:	e7fe      	b.n	8007c58 <ai_platform_network_init+0x44>
 8007c5a:	f7ff fc1d 	bl	8007498 <_ai_platform_acquire_crc>
 8007c5e:	4b5e      	ldr	r3, [pc, #376]	; (8007dd8 <ai_platform_network_init+0x1c4>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007c66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c6a:	d010      	beq.n	8007c8e <ai_platform_network_init+0x7a>
 8007c6c:	4a5b      	ldr	r2, [pc, #364]	; (8007ddc <ai_platform_network_init+0x1c8>)
 8007c6e:	2301      	movs	r3, #1
 8007c70:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007c74:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d1fb      	bne.n	8007c74 <ai_platform_network_init+0x60>
 8007c7c:	4b58      	ldr	r3, [pc, #352]	; (8007de0 <ai_platform_network_init+0x1cc>)
 8007c7e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007c82:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007c86:	4b57      	ldr	r3, [pc, #348]	; (8007de4 <ai_platform_network_init+0x1d0>)
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d00d      	beq.n	8007ca8 <ai_platform_network_init+0x94>
 8007c8c:	e7fe      	b.n	8007c8c <ai_platform_network_init+0x78>
 8007c8e:	4a56      	ldr	r2, [pc, #344]	; (8007de8 <ai_platform_network_init+0x1d4>)
 8007c90:	2301      	movs	r3, #1
 8007c92:	6093      	str	r3, [r2, #8]
 8007c94:	6893      	ldr	r3, [r2, #8]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d1fc      	bne.n	8007c94 <ai_platform_network_init+0x80>
 8007c9a:	4b51      	ldr	r3, [pc, #324]	; (8007de0 <ai_platform_network_init+0x1cc>)
 8007c9c:	6013      	str	r3, [r2, #0]
 8007c9e:	6812      	ldr	r2, [r2, #0]
 8007ca0:	4b50      	ldr	r3, [pc, #320]	; (8007de4 <ai_platform_network_init+0x1d0>)
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d000      	beq.n	8007ca8 <ai_platform_network_init+0x94>
 8007ca6:	e7fe      	b.n	8007ca6 <ai_platform_network_init+0x92>
 8007ca8:	f7ff fbf8 	bl	800749c <_ai_platform_release_crc>
 8007cac:	2600      	movs	r6, #0
 8007cae:	4630      	mov	r0, r6
 8007cb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cb4:	4a4c      	ldr	r2, [pc, #304]	; (8007de8 <ai_platform_network_init+0x1d4>)
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	6093      	str	r3, [r2, #8]
 8007cba:	6893      	ldr	r3, [r2, #8]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d1fc      	bne.n	8007cba <ai_platform_network_init+0xa6>
 8007cc0:	4b47      	ldr	r3, [pc, #284]	; (8007de0 <ai_platform_network_init+0x1cc>)
 8007cc2:	6013      	str	r3, [r2, #0]
 8007cc4:	6812      	ldr	r2, [r2, #0]
 8007cc6:	4b47      	ldr	r3, [pc, #284]	; (8007de4 <ai_platform_network_init+0x1d0>)
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d11c      	bne.n	8007d06 <ai_platform_network_init+0xf2>
 8007ccc:	f7ff fbe6 	bl	800749c <_ai_platform_release_crc>
 8007cd0:	2e00      	cmp	r6, #0
 8007cd2:	d06f      	beq.n	8007db4 <ai_platform_network_init+0x1a0>
 8007cd4:	4b45      	ldr	r3, [pc, #276]	; (8007dec <ai_platform_network_init+0x1d8>)
 8007cd6:	6832      	ldr	r2, [r6, #0]
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d115      	bne.n	8007d08 <ai_platform_network_init+0xf4>
 8007cdc:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8007ce0:	6933      	ldr	r3, [r6, #16]
 8007ce2:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 8007ce6:	89f7      	ldrh	r7, [r6, #14]
 8007ce8:	62a3      	str	r3, [r4, #40]	; 0x28
 8007cea:	e9c4 2107 	strd	r2, r1, [r4, #28]
 8007cee:	2303      	movs	r3, #3
 8007cf0:	84e7      	strh	r7, [r4, #38]	; 0x26
 8007cf2:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 8007cf6:	60e3      	str	r3, [r4, #12]
 8007cf8:	4620      	mov	r0, r4
 8007cfa:	4626      	mov	r6, r4
 8007cfc:	f000 fbc2 	bl	8008484 <ai_layers_init_all>
 8007d00:	4630      	mov	r0, r6
 8007d02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d06:	e7fe      	b.n	8007d06 <ai_platform_network_init+0xf2>
 8007d08:	2101      	movs	r1, #1
 8007d0a:	4630      	mov	r0, r6
 8007d0c:	4635      	mov	r5, r6
 8007d0e:	6876      	ldr	r6, [r6, #4]
 8007d10:	f7ff fb74 	bl	80073fc <ai_buffer_get_size>
 8007d14:	f105 081c 	add.w	r8, r5, #28
 8007d18:	4681      	mov	r9, r0
 8007d1a:	2101      	movs	r1, #1
 8007d1c:	4640      	mov	r0, r8
 8007d1e:	6a2f      	ldr	r7, [r5, #32]
 8007d20:	f7ff fb6c 	bl	80073fc <ai_buffer_get_size>
 8007d24:	f1b9 0f00 	cmp.w	r9, #0
 8007d28:	d025      	beq.n	8007d76 <ai_platform_network_init+0x162>
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	4696      	mov	lr, r2
 8007d2e:	bb30      	cbnz	r0, 8007d7e <ai_platform_network_init+0x16a>
 8007d30:	4680      	mov	r8, r0
 8007d32:	4607      	mov	r7, r0
 8007d34:	b376      	cbz	r6, 8007d94 <ai_platform_network_init+0x180>
 8007d36:	8be3      	ldrh	r3, [r4, #30]
 8007d38:	4573      	cmp	r3, lr
 8007d3a:	d323      	bcc.n	8007d84 <ai_platform_network_init+0x170>
 8007d3c:	b142      	cbz	r2, 8007d50 <ai_platform_network_init+0x13c>
 8007d3e:	46ac      	mov	ip, r5
 8007d40:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8007d44:	6a25      	ldr	r5, [r4, #32]
 8007d46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007d48:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8007d4c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8007d50:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8007d52:	f8a4 e01e 	strh.w	lr, [r4, #30]
 8007d56:	2600      	movs	r6, #0
 8007d58:	42bb      	cmp	r3, r7
 8007d5a:	83a6      	strh	r6, [r4, #28]
 8007d5c:	d323      	bcc.n	8007da6 <ai_platform_network_init+0x192>
 8007d5e:	b37f      	cbz	r7, 8007dc0 <ai_platform_network_init+0x1ac>
 8007d60:	46c4      	mov	ip, r8
 8007d62:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8007d66:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8007d68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007d6a:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8007d6e:	46b6      	mov	lr, r6
 8007d70:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8007d74:	e7bb      	b.n	8007cee <ai_platform_network_init+0xda>
 8007d76:	464a      	mov	r2, r9
 8007d78:	46ce      	mov	lr, r9
 8007d7a:	464d      	mov	r5, r9
 8007d7c:	e7d7      	b.n	8007d2e <ai_platform_network_init+0x11a>
 8007d7e:	b30f      	cbz	r7, 8007dc4 <ai_platform_network_init+0x1b0>
 8007d80:	2701      	movs	r7, #1
 8007d82:	e7d7      	b.n	8007d34 <ai_platform_network_init+0x120>
 8007d84:	2212      	movs	r2, #18
 8007d86:	2116      	movs	r1, #22
 8007d88:	f104 0010 	add.w	r0, r4, #16
 8007d8c:	f000 fb44 	bl	8008418 <core_set_error>
 8007d90:	2600      	movs	r6, #0
 8007d92:	e78c      	b.n	8007cae <ai_platform_network_init+0x9a>
 8007d94:	f1b9 0f00 	cmp.w	r9, #0
 8007d98:	d0cd      	beq.n	8007d36 <ai_platform_network_init+0x122>
 8007d9a:	2110      	movs	r1, #16
 8007d9c:	2212      	movs	r2, #18
 8007d9e:	1860      	adds	r0, r4, r1
 8007da0:	f000 fb3a 	bl	8008418 <core_set_error>
 8007da4:	e783      	b.n	8007cae <ai_platform_network_init+0x9a>
 8007da6:	2213      	movs	r2, #19
 8007da8:	2116      	movs	r1, #22
 8007daa:	f104 0010 	add.w	r0, r4, #16
 8007dae:	f000 fb33 	bl	8008418 <core_set_error>
 8007db2:	e77c      	b.n	8007cae <ai_platform_network_init+0x9a>
 8007db4:	2110      	movs	r1, #16
 8007db6:	2211      	movs	r2, #17
 8007db8:	1860      	adds	r0, r4, r1
 8007dba:	f000 fb2d 	bl	8008418 <core_set_error>
 8007dbe:	e776      	b.n	8007cae <ai_platform_network_init+0x9a>
 8007dc0:	46be      	mov	lr, r7
 8007dc2:	e794      	b.n	8007cee <ai_platform_network_init+0xda>
 8007dc4:	2110      	movs	r1, #16
 8007dc6:	2213      	movs	r2, #19
 8007dc8:	1860      	adds	r0, r4, r1
 8007dca:	f000 fb25 	bl	8008418 <core_set_error>
 8007dce:	463e      	mov	r6, r7
 8007dd0:	e76d      	b.n	8007cae <ai_platform_network_init+0x9a>
 8007dd2:	bf00      	nop
 8007dd4:	a1c00100 	.word	0xa1c00100
 8007dd8:	e0042000 	.word	0xe0042000
 8007ddc:	58024000 	.word	0x58024000
 8007de0:	f407a5c2 	.word	0xf407a5c2
 8007de4:	b5e8b5cd 	.word	0xb5e8b5cd
 8007de8:	40023000 	.word	0x40023000
 8007dec:	a1facade 	.word	0xa1facade

08007df0 <ai_platform_network_post_init>:
 8007df0:	b538      	push	{r3, r4, r5, lr}
 8007df2:	b1f0      	cbz	r0, 8007e32 <ai_platform_network_post_init+0x42>
 8007df4:	4b3c      	ldr	r3, [pc, #240]	; (8007ee8 <ai_platform_network_post_init+0xf8>)
 8007df6:	6802      	ldr	r2, [r0, #0]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	4604      	mov	r4, r0
 8007dfc:	d119      	bne.n	8007e32 <ai_platform_network_post_init+0x42>
 8007dfe:	f7ff fb4b 	bl	8007498 <_ai_platform_acquire_crc>
 8007e02:	4b3a      	ldr	r3, [pc, #232]	; (8007eec <ai_platform_network_post_init+0xfc>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007e0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e0e:	d03b      	beq.n	8007e88 <ai_platform_network_post_init+0x98>
 8007e10:	4a37      	ldr	r2, [pc, #220]	; (8007ef0 <ai_platform_network_post_init+0x100>)
 8007e12:	2301      	movs	r3, #1
 8007e14:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007e18:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d1fb      	bne.n	8007e18 <ai_platform_network_post_init+0x28>
 8007e20:	4b34      	ldr	r3, [pc, #208]	; (8007ef4 <ai_platform_network_post_init+0x104>)
 8007e22:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007e26:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007e2a:	4b33      	ldr	r3, [pc, #204]	; (8007ef8 <ai_platform_network_post_init+0x108>)
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d037      	beq.n	8007ea0 <ai_platform_network_post_init+0xb0>
 8007e30:	e7fe      	b.n	8007e30 <ai_platform_network_post_init+0x40>
 8007e32:	f7ff fb31 	bl	8007498 <_ai_platform_acquire_crc>
 8007e36:	4b2d      	ldr	r3, [pc, #180]	; (8007eec <ai_platform_network_post_init+0xfc>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007e3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e42:	d010      	beq.n	8007e66 <ai_platform_network_post_init+0x76>
 8007e44:	4a2a      	ldr	r2, [pc, #168]	; (8007ef0 <ai_platform_network_post_init+0x100>)
 8007e46:	2301      	movs	r3, #1
 8007e48:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007e4c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d1fb      	bne.n	8007e4c <ai_platform_network_post_init+0x5c>
 8007e54:	4b27      	ldr	r3, [pc, #156]	; (8007ef4 <ai_platform_network_post_init+0x104>)
 8007e56:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007e5a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007e5e:	4b26      	ldr	r3, [pc, #152]	; (8007ef8 <ai_platform_network_post_init+0x108>)
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d00d      	beq.n	8007e80 <ai_platform_network_post_init+0x90>
 8007e64:	e7fe      	b.n	8007e64 <ai_platform_network_post_init+0x74>
 8007e66:	4a25      	ldr	r2, [pc, #148]	; (8007efc <ai_platform_network_post_init+0x10c>)
 8007e68:	2301      	movs	r3, #1
 8007e6a:	6093      	str	r3, [r2, #8]
 8007e6c:	6893      	ldr	r3, [r2, #8]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d1fc      	bne.n	8007e6c <ai_platform_network_post_init+0x7c>
 8007e72:	4b20      	ldr	r3, [pc, #128]	; (8007ef4 <ai_platform_network_post_init+0x104>)
 8007e74:	6013      	str	r3, [r2, #0]
 8007e76:	6812      	ldr	r2, [r2, #0]
 8007e78:	4b1f      	ldr	r3, [pc, #124]	; (8007ef8 <ai_platform_network_post_init+0x108>)
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d000      	beq.n	8007e80 <ai_platform_network_post_init+0x90>
 8007e7e:	e7fe      	b.n	8007e7e <ai_platform_network_post_init+0x8e>
 8007e80:	f7ff fb0c 	bl	800749c <_ai_platform_release_crc>
 8007e84:	2000      	movs	r0, #0
 8007e86:	bd38      	pop	{r3, r4, r5, pc}
 8007e88:	4a1c      	ldr	r2, [pc, #112]	; (8007efc <ai_platform_network_post_init+0x10c>)
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	6093      	str	r3, [r2, #8]
 8007e8e:	6893      	ldr	r3, [r2, #8]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d1fc      	bne.n	8007e8e <ai_platform_network_post_init+0x9e>
 8007e94:	4b17      	ldr	r3, [pc, #92]	; (8007ef4 <ai_platform_network_post_init+0x104>)
 8007e96:	6013      	str	r3, [r2, #0]
 8007e98:	6812      	ldr	r2, [r2, #0]
 8007e9a:	4b17      	ldr	r3, [pc, #92]	; (8007ef8 <ai_platform_network_post_init+0x108>)
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d11a      	bne.n	8007ed6 <ai_platform_network_post_init+0xe6>
 8007ea0:	f7ff fafc 	bl	800749c <_ai_platform_release_crc>
 8007ea4:	68e3      	ldr	r3, [r4, #12]
 8007ea6:	f013 0502 	ands.w	r5, r3, #2
 8007eaa:	d015      	beq.n	8007ed8 <ai_platform_network_post_init+0xe8>
 8007eac:	4620      	mov	r0, r4
 8007eae:	f000 faf7 	bl	80084a0 <ai_layers_post_init_all>
 8007eb2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007eb4:	b16b      	cbz	r3, 8007ed2 <ai_platform_network_post_init+0xe2>
 8007eb6:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8007eb8:	e007      	b.n	8007eca <ai_platform_network_post_init+0xda>
 8007eba:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8007ebe:	4798      	blx	r3
 8007ec0:	692b      	ldr	r3, [r5, #16]
 8007ec2:	42ab      	cmp	r3, r5
 8007ec4:	d005      	beq.n	8007ed2 <ai_platform_network_post_init+0xe2>
 8007ec6:	b123      	cbz	r3, 8007ed2 <ai_platform_network_post_init+0xe2>
 8007ec8:	461d      	mov	r5, r3
 8007eca:	4629      	mov	r1, r5
 8007ecc:	2000      	movs	r0, #0
 8007ece:	2d00      	cmp	r5, #0
 8007ed0:	d1f3      	bne.n	8007eba <ai_platform_network_post_init+0xca>
 8007ed2:	2001      	movs	r0, #1
 8007ed4:	bd38      	pop	{r3, r4, r5, pc}
 8007ed6:	e7fe      	b.n	8007ed6 <ai_platform_network_post_init+0xe6>
 8007ed8:	2210      	movs	r2, #16
 8007eda:	2111      	movs	r1, #17
 8007edc:	18a0      	adds	r0, r4, r2
 8007ede:	f000 fa9b 	bl	8008418 <core_set_error>
 8007ee2:	4628      	mov	r0, r5
 8007ee4:	bd38      	pop	{r3, r4, r5, pc}
 8007ee6:	bf00      	nop
 8007ee8:	a1c00100 	.word	0xa1c00100
 8007eec:	e0042000 	.word	0xe0042000
 8007ef0:	58024000 	.word	0x58024000
 8007ef4:	f407a5c2 	.word	0xf407a5c2
 8007ef8:	b5e8b5cd 	.word	0xb5e8b5cd
 8007efc:	40023000 	.word	0x40023000

08007f00 <ai_platform_network_process>:
 8007f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f04:	460e      	mov	r6, r1
 8007f06:	b085      	sub	sp, #20
 8007f08:	4693      	mov	fp, r2
 8007f0a:	4605      	mov	r5, r0
 8007f0c:	b120      	cbz	r0, 8007f18 <ai_platform_network_process+0x18>
 8007f0e:	4bb8      	ldr	r3, [pc, #736]	; (80081f0 <ai_platform_network_process+0x2f0>)
 8007f10:	6802      	ldr	r2, [r0, #0]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	bf18      	it	ne
 8007f16:	2500      	movne	r5, #0
 8007f18:	f7ff fabe 	bl	8007498 <_ai_platform_acquire_crc>
 8007f1c:	4bb5      	ldr	r3, [pc, #724]	; (80081f4 <ai_platform_network_process+0x2f4>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f28:	d010      	beq.n	8007f4c <ai_platform_network_process+0x4c>
 8007f2a:	4ab3      	ldr	r2, [pc, #716]	; (80081f8 <ai_platform_network_process+0x2f8>)
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007f32:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d1fb      	bne.n	8007f32 <ai_platform_network_process+0x32>
 8007f3a:	4bb0      	ldr	r3, [pc, #704]	; (80081fc <ai_platform_network_process+0x2fc>)
 8007f3c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007f40:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007f44:	4bae      	ldr	r3, [pc, #696]	; (8008200 <ai_platform_network_process+0x300>)
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d00d      	beq.n	8007f66 <ai_platform_network_process+0x66>
 8007f4a:	e7fe      	b.n	8007f4a <ai_platform_network_process+0x4a>
 8007f4c:	4aad      	ldr	r2, [pc, #692]	; (8008204 <ai_platform_network_process+0x304>)
 8007f4e:	2301      	movs	r3, #1
 8007f50:	6093      	str	r3, [r2, #8]
 8007f52:	6893      	ldr	r3, [r2, #8]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d1fc      	bne.n	8007f52 <ai_platform_network_process+0x52>
 8007f58:	4ba8      	ldr	r3, [pc, #672]	; (80081fc <ai_platform_network_process+0x2fc>)
 8007f5a:	6013      	str	r3, [r2, #0]
 8007f5c:	6812      	ldr	r2, [r2, #0]
 8007f5e:	4ba8      	ldr	r3, [pc, #672]	; (8008200 <ai_platform_network_process+0x300>)
 8007f60:	429a      	cmp	r2, r3
 8007f62:	f040 812c 	bne.w	80081be <ai_platform_network_process+0x2be>
 8007f66:	f7ff fa99 	bl	800749c <_ai_platform_release_crc>
 8007f6a:	2d00      	cmp	r5, #0
 8007f6c:	f000 8154 	beq.w	8008218 <ai_platform_network_process+0x318>
 8007f70:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	f000 8124 	beq.w	80081c0 <ai_platform_network_process+0x2c0>
 8007f78:	68eb      	ldr	r3, [r5, #12]
 8007f7a:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8007f7e:	f003 0303 	and.w	r3, r3, #3
 8007f82:	2700      	movs	r7, #0
 8007f84:	2b03      	cmp	r3, #3
 8007f86:	616f      	str	r7, [r5, #20]
 8007f88:	f040 813e 	bne.w	8008208 <ai_platform_network_process+0x308>
 8007f8c:	2e00      	cmp	r6, #0
 8007f8e:	f000 811d 	beq.w	80081cc <ai_platform_network_process+0x2cc>
 8007f92:	f1ba 0f00 	cmp.w	sl, #0
 8007f96:	f000 8119 	beq.w	80081cc <ai_platform_network_process+0x2cc>
 8007f9a:	f8ba 3000 	ldrh.w	r3, [sl]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	f000 8114 	beq.w	80081cc <ai_platform_network_process+0x2cc>
 8007fa4:	69b3      	ldr	r3, [r6, #24]
 8007fa6:	f8cd b00c 	str.w	fp, [sp, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	e9cd 3501 	strd	r3, r5, [sp, #4]
 8007fb0:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d072      	beq.n	800809e <ai_platform_network_process+0x19e>
 8007fb8:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8007fbc:	2c00      	cmp	r4, #0
 8007fbe:	d06e      	beq.n	800809e <ai_platform_network_process+0x19e>
 8007fc0:	f8da 3008 	ldr.w	r3, [sl, #8]
 8007fc4:	f8d3 9000 	ldr.w	r9, [r3]
 8007fc8:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8007fcc:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8007fd0:	f000 81de 	beq.w	8008390 <ai_platform_network_process+0x490>
 8007fd4:	69a3      	ldr	r3, [r4, #24]
 8007fd6:	2101      	movs	r1, #1
 8007fd8:	4630      	mov	r0, r6
 8007fda:	685d      	ldr	r5, [r3, #4]
 8007fdc:	f7ff fa0e 	bl	80073fc <ai_buffer_get_size>
 8007fe0:	4285      	cmp	r5, r0
 8007fe2:	f0c0 811b 	bcc.w	800821c <ai_platform_network_process+0x31c>
 8007fe6:	68e0      	ldr	r0, [r4, #12]
 8007fe8:	69b1      	ldr	r1, [r6, #24]
 8007fea:	68c2      	ldr	r2, [r0, #12]
 8007fec:	68cb      	ldr	r3, [r1, #12]
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	f040 8114 	bne.w	800821c <ai_platform_network_process+0x31c>
 8007ff4:	6882      	ldr	r2, [r0, #8]
 8007ff6:	688b      	ldr	r3, [r1, #8]
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	f040 810f 	bne.w	800821c <ai_platform_network_process+0x31c>
 8007ffe:	6842      	ldr	r2, [r0, #4]
 8008000:	684b      	ldr	r3, [r1, #4]
 8008002:	429a      	cmp	r2, r3
 8008004:	f040 810a 	bne.w	800821c <ai_platform_network_process+0x31c>
 8008008:	69a3      	ldr	r3, [r4, #24]
 800800a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800800e:	f001 f989 	bl	8009324 <ai_array_get_data_byte_size>
 8008012:	4605      	mov	r5, r0
 8008014:	4620      	mov	r0, r4
 8008016:	f001 f99d 	bl	8009354 <get_tensor_byte_size>
 800801a:	4285      	cmp	r5, r0
 800801c:	f0c0 80fe 	bcc.w	800821c <ai_platform_network_process+0x31c>
 8008020:	69a3      	ldr	r3, [r4, #24]
 8008022:	6818      	ldr	r0, [r3, #0]
 8008024:	f001 f8ea 	bl	80091fc <ai_array_to_buffer_fmt>
 8008028:	6833      	ldr	r3, [r6, #0]
 800802a:	4058      	eors	r0, r3
 800802c:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8008030:	f040 81b9 	bne.w	80083a6 <ai_platform_network_process+0x4a6>
 8008034:	6873      	ldr	r3, [r6, #4]
 8008036:	2b00      	cmp	r3, #0
 8008038:	f000 81ac 	beq.w	8008394 <ai_platform_network_process+0x494>
 800803c:	69b3      	ldr	r3, [r6, #24]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2b00      	cmp	r3, #0
 8008042:	f000 819c 	beq.w	800837e <ai_platform_network_process+0x47e>
 8008046:	9a01      	ldr	r2, [sp, #4]
 8008048:	429a      	cmp	r2, r3
 800804a:	bf38      	it	cc
 800804c:	461a      	movcc	r2, r3
 800804e:	4620      	mov	r0, r4
 8008050:	9201      	str	r2, [sp, #4]
 8008052:	f001 f97f 	bl	8009354 <get_tensor_byte_size>
 8008056:	f8c8 0008 	str.w	r0, [r8, #8]
 800805a:	69b3      	ldr	r3, [r6, #24]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	fb00 f303 	mul.w	r3, r0, r3
 8008062:	f8c8 300c 	str.w	r3, [r8, #12]
 8008066:	6871      	ldr	r1, [r6, #4]
 8008068:	f8c8 1004 	str.w	r1, [r8, #4]
 800806c:	440b      	add	r3, r1
 800806e:	f849 300b 	str.w	r3, [r9, fp]
 8008072:	69a0      	ldr	r0, [r4, #24]
 8008074:	6803      	ldr	r3, [r0, #0]
 8008076:	009a      	lsls	r2, r3, #2
 8008078:	f107 0701 	add.w	r7, r7, #1
 800807c:	f106 061c 	add.w	r6, r6, #28
 8008080:	f100 80af 	bmi.w	80081e2 <ai_platform_network_process+0x2e2>
 8008084:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8008088:	1a9b      	subs	r3, r3, r2
 800808a:	4419      	add	r1, r3
 800808c:	6081      	str	r1, [r0, #8]
 800808e:	69a3      	ldr	r3, [r4, #24]
 8008090:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8008094:	60da      	str	r2, [r3, #12]
 8008096:	f8ba 3000 	ldrh.w	r3, [sl]
 800809a:	42bb      	cmp	r3, r7
 800809c:	d888      	bhi.n	8007fb0 <ai_platform_network_process+0xb0>
 800809e:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 80080a2:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 80080a4:	f1bb 0f00 	cmp.w	fp, #0
 80080a8:	f000 8186 	beq.w	80083b8 <ai_platform_network_process+0x4b8>
 80080ac:	2a01      	cmp	r2, #1
 80080ae:	f240 815e 	bls.w	800836e <ai_platform_network_process+0x46e>
 80080b2:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 80080b6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	f000 8157 	beq.w	800836e <ai_platform_network_process+0x46e>
 80080c0:	465e      	mov	r6, fp
 80080c2:	2700      	movs	r7, #0
 80080c4:	462c      	mov	r4, r5
 80080c6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	f000 80b4 	beq.w	8008238 <ai_platform_network_process+0x338>
 80080d0:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 80080d4:	2d00      	cmp	r5, #0
 80080d6:	f000 80af 	beq.w	8008238 <ai_platform_network_process+0x338>
 80080da:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80080de:	f8d3 8000 	ldr.w	r8, [r3]
 80080e2:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 80080e6:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 80080ea:	f000 8171 	beq.w	80083d0 <ai_platform_network_process+0x4d0>
 80080ee:	69ab      	ldr	r3, [r5, #24]
 80080f0:	2101      	movs	r1, #1
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	9302      	str	r3, [sp, #8]
 80080f6:	4630      	mov	r0, r6
 80080f8:	f7ff f980 	bl	80073fc <ai_buffer_get_size>
 80080fc:	9b02      	ldr	r3, [sp, #8]
 80080fe:	4283      	cmp	r3, r0
 8008100:	f0c0 8134 	bcc.w	800836c <ai_platform_network_process+0x46c>
 8008104:	68e8      	ldr	r0, [r5, #12]
 8008106:	69b1      	ldr	r1, [r6, #24]
 8008108:	68c2      	ldr	r2, [r0, #12]
 800810a:	68cb      	ldr	r3, [r1, #12]
 800810c:	429a      	cmp	r2, r3
 800810e:	f040 812d 	bne.w	800836c <ai_platform_network_process+0x46c>
 8008112:	6882      	ldr	r2, [r0, #8]
 8008114:	688b      	ldr	r3, [r1, #8]
 8008116:	429a      	cmp	r2, r3
 8008118:	f040 8128 	bne.w	800836c <ai_platform_network_process+0x46c>
 800811c:	6842      	ldr	r2, [r0, #4]
 800811e:	684b      	ldr	r3, [r1, #4]
 8008120:	429a      	cmp	r2, r3
 8008122:	f040 8123 	bne.w	800836c <ai_platform_network_process+0x46c>
 8008126:	69ab      	ldr	r3, [r5, #24]
 8008128:	e9d3 0100 	ldrd	r0, r1, [r3]
 800812c:	f001 f8fa 	bl	8009324 <ai_array_get_data_byte_size>
 8008130:	9002      	str	r0, [sp, #8]
 8008132:	4628      	mov	r0, r5
 8008134:	f001 f90e 	bl	8009354 <get_tensor_byte_size>
 8008138:	9b02      	ldr	r3, [sp, #8]
 800813a:	4283      	cmp	r3, r0
 800813c:	f0c0 8116 	bcc.w	800836c <ai_platform_network_process+0x46c>
 8008140:	69ab      	ldr	r3, [r5, #24]
 8008142:	6818      	ldr	r0, [r3, #0]
 8008144:	f001 f85a 	bl	80091fc <ai_array_to_buffer_fmt>
 8008148:	6833      	ldr	r3, [r6, #0]
 800814a:	4058      	eors	r0, r3
 800814c:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8008150:	f040 8136 	bne.w	80083c0 <ai_platform_network_process+0x4c0>
 8008154:	6873      	ldr	r3, [r6, #4]
 8008156:	2b00      	cmp	r3, #0
 8008158:	f000 814d 	beq.w	80083f6 <ai_platform_network_process+0x4f6>
 800815c:	69b3      	ldr	r3, [r6, #24]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	2b00      	cmp	r3, #0
 8008162:	f000 813f 	beq.w	80083e4 <ai_platform_network_process+0x4e4>
 8008166:	9a01      	ldr	r2, [sp, #4]
 8008168:	429a      	cmp	r2, r3
 800816a:	bf38      	it	cc
 800816c:	461a      	movcc	r2, r3
 800816e:	4628      	mov	r0, r5
 8008170:	9201      	str	r2, [sp, #4]
 8008172:	f001 f8ef 	bl	8009354 <get_tensor_byte_size>
 8008176:	f8ca 0008 	str.w	r0, [sl, #8]
 800817a:	69b3      	ldr	r3, [r6, #24]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	fb00 f303 	mul.w	r3, r0, r3
 8008182:	f8ca 300c 	str.w	r3, [sl, #12]
 8008186:	6871      	ldr	r1, [r6, #4]
 8008188:	f8ca 1004 	str.w	r1, [sl, #4]
 800818c:	440b      	add	r3, r1
 800818e:	f848 300b 	str.w	r3, [r8, fp]
 8008192:	69a8      	ldr	r0, [r5, #24]
 8008194:	6803      	ldr	r3, [r0, #0]
 8008196:	009b      	lsls	r3, r3, #2
 8008198:	f107 0701 	add.w	r7, r7, #1
 800819c:	f106 061c 	add.w	r6, r6, #28
 80081a0:	d445      	bmi.n	800822e <ai_platform_network_process+0x32e>
 80081a2:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80081a6:	1a9b      	subs	r3, r3, r2
 80081a8:	4419      	add	r1, r3
 80081aa:	6081      	str	r1, [r0, #8]
 80081ac:	69ab      	ldr	r3, [r5, #24]
 80081ae:	f8da 2004 	ldr.w	r2, [sl, #4]
 80081b2:	60da      	str	r2, [r3, #12]
 80081b4:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80081b8:	429f      	cmp	r7, r3
 80081ba:	d384      	bcc.n	80080c6 <ai_platform_network_process+0x1c6>
 80081bc:	e03c      	b.n	8008238 <ai_platform_network_process+0x338>
 80081be:	e7fe      	b.n	80081be <ai_platform_network_process+0x2be>
 80081c0:	68ea      	ldr	r2, [r5, #12]
 80081c2:	616b      	str	r3, [r5, #20]
 80081c4:	f002 0203 	and.w	r2, r2, #3
 80081c8:	2a03      	cmp	r2, #3
 80081ca:	d11d      	bne.n	8008208 <ai_platform_network_process+0x308>
 80081cc:	2217      	movs	r2, #23
 80081ce:	2112      	movs	r1, #18
 80081d0:	f105 0010 	add.w	r0, r5, #16
 80081d4:	f000 f920 	bl	8008418 <core_set_error>
 80081d8:	2400      	movs	r4, #0
 80081da:	4620      	mov	r0, r4
 80081dc:	b005      	add	sp, #20
 80081de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081e2:	f8ba 3000 	ldrh.w	r3, [sl]
 80081e6:	429f      	cmp	r7, r3
 80081e8:	f4ff aee2 	bcc.w	8007fb0 <ai_platform_network_process+0xb0>
 80081ec:	e757      	b.n	800809e <ai_platform_network_process+0x19e>
 80081ee:	bf00      	nop
 80081f0:	a1c00100 	.word	0xa1c00100
 80081f4:	e0042000 	.word	0xe0042000
 80081f8:	58024000 	.word	0x58024000
 80081fc:	f407a5c2 	.word	0xf407a5c2
 8008200:	b5e8b5cd 	.word	0xb5e8b5cd
 8008204:	40023000 	.word	0x40023000
 8008208:	2230      	movs	r2, #48	; 0x30
 800820a:	2111      	movs	r1, #17
 800820c:	f105 0010 	add.w	r0, r5, #16
 8008210:	f000 f902 	bl	8008418 <core_set_error>
 8008214:	2400      	movs	r4, #0
 8008216:	e7e0      	b.n	80081da <ai_platform_network_process+0x2da>
 8008218:	462c      	mov	r4, r5
 800821a:	e7de      	b.n	80081da <ai_platform_network_process+0x2da>
 800821c:	9d02      	ldr	r5, [sp, #8]
 800821e:	2218      	movs	r2, #24
 8008220:	2112      	movs	r1, #18
 8008222:	f105 0010 	add.w	r0, r5, #16
 8008226:	f000 f8f7 	bl	8008418 <core_set_error>
 800822a:	2400      	movs	r4, #0
 800822c:	e7d5      	b.n	80081da <ai_platform_network_process+0x2da>
 800822e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8008232:	429f      	cmp	r7, r3
 8008234:	f4ff af47 	bcc.w	80080c6 <ai_platform_network_process+0x1c6>
 8008238:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800823c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800823e:	82a3      	strh	r3, [r4, #20]
 8008240:	4625      	mov	r5, r4
 8008242:	2a00      	cmp	r2, #0
 8008244:	f040 808c 	bne.w	8008360 <ai_platform_network_process+0x460>
 8008248:	4616      	mov	r6, r2
 800824a:	4617      	mov	r7, r2
 800824c:	8aec      	ldrh	r4, [r5, #22]
 800824e:	429c      	cmp	r4, r3
 8008250:	bf38      	it	cc
 8008252:	46ab      	movcc	fp, r5
 8008254:	d2c1      	bcs.n	80081da <ai_platform_network_process+0x2da>
 8008256:	2e00      	cmp	r6, #0
 8008258:	d030      	beq.n	80082bc <ai_platform_network_process+0x3bc>
 800825a:	f04f 0800 	mov.w	r8, #0
 800825e:	e014      	b.n	800828a <ai_platform_network_process+0x38a>
 8008260:	6882      	ldr	r2, [r0, #8]
 8008262:	68c5      	ldr	r5, [r0, #12]
 8008264:	6863      	ldr	r3, [r4, #4]
 8008266:	1b52      	subs	r2, r2, r5
 8008268:	4413      	add	r3, r2
 800826a:	6083      	str	r3, [r0, #8]
 800826c:	698b      	ldr	r3, [r1, #24]
 800826e:	6862      	ldr	r2, [r4, #4]
 8008270:	60da      	str	r2, [r3, #12]
 8008272:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8008276:	f859 200a 	ldr.w	r2, [r9, sl]
 800827a:	440b      	add	r3, r1
 800827c:	4293      	cmp	r3, r2
 800827e:	bf24      	itt	cs
 8008280:	68e3      	ldrcs	r3, [r4, #12]
 8008282:	1ad3      	subcs	r3, r2, r3
 8008284:	6063      	str	r3, [r4, #4]
 8008286:	f108 0801 	add.w	r8, r8, #1
 800828a:	8833      	ldrh	r3, [r6, #0]
 800828c:	4543      	cmp	r3, r8
 800828e:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8008292:	d913      	bls.n	80082bc <ai_platform_network_process+0x3bc>
 8008294:	6873      	ldr	r3, [r6, #4]
 8008296:	b18b      	cbz	r3, 80082bc <ai_platform_network_process+0x3bc>
 8008298:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 800829c:	b171      	cbz	r1, 80082bc <ai_platform_network_process+0x3bc>
 800829e:	6988      	ldr	r0, [r1, #24]
 80082a0:	68b2      	ldr	r2, [r6, #8]
 80082a2:	6803      	ldr	r3, [r0, #0]
 80082a4:	f8d2 9000 	ldr.w	r9, [r2]
 80082a8:	009d      	lsls	r5, r3, #2
 80082aa:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 80082ae:	d5d7      	bpl.n	8008260 <ai_platform_network_process+0x360>
 80082b0:	6881      	ldr	r1, [r0, #8]
 80082b2:	68a2      	ldr	r2, [r4, #8]
 80082b4:	6860      	ldr	r0, [r4, #4]
 80082b6:	f000 ff1b 	bl	80090f0 <st_int8_copy>
 80082ba:	e7da      	b.n	8008272 <ai_platform_network_process+0x372>
 80082bc:	4658      	mov	r0, fp
 80082be:	f000 f903 	bl	80084c8 <ai_layers_forward_all>
 80082c2:	2f00      	cmp	r7, #0
 80082c4:	d03d      	beq.n	8008342 <ai_platform_network_process+0x442>
 80082c6:	2400      	movs	r4, #0
 80082c8:	e016      	b.n	80082f8 <ai_platform_network_process+0x3f8>
 80082ca:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 80082ce:	f859 100a 	ldr.w	r1, [r9, sl]
 80082d2:	4413      	add	r3, r2
 80082d4:	428b      	cmp	r3, r1
 80082d6:	bf24      	itt	cs
 80082d8:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 80082dc:	1acb      	subcs	r3, r1, r3
 80082de:	f8c8 3004 	str.w	r3, [r8, #4]
 80082e2:	6981      	ldr	r1, [r0, #24]
 80082e4:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 80082e8:	1b52      	subs	r2, r2, r5
 80082ea:	4413      	add	r3, r2
 80082ec:	608b      	str	r3, [r1, #8]
 80082ee:	6983      	ldr	r3, [r0, #24]
 80082f0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80082f4:	60da      	str	r2, [r3, #12]
 80082f6:	3401      	adds	r4, #1
 80082f8:	883b      	ldrh	r3, [r7, #0]
 80082fa:	42a3      	cmp	r3, r4
 80082fc:	d921      	bls.n	8008342 <ai_platform_network_process+0x442>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	b1fb      	cbz	r3, 8008342 <ai_platform_network_process+0x442>
 8008302:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8008306:	b1e0      	cbz	r0, 8008342 <ai_platform_network_process+0x442>
 8008308:	68ba      	ldr	r2, [r7, #8]
 800830a:	6983      	ldr	r3, [r0, #24]
 800830c:	f8d2 9000 	ldr.w	r9, [r2]
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	0092      	lsls	r2, r2, #2
 8008314:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8008318:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 800831c:	d5d5      	bpl.n	80082ca <ai_platform_network_process+0x3ca>
 800831e:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8008322:	6898      	ldr	r0, [r3, #8]
 8008324:	f000 fee4 	bl	80090f0 <st_int8_copy>
 8008328:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 800832c:	f859 200a 	ldr.w	r2, [r9, sl]
 8008330:	440b      	add	r3, r1
 8008332:	4293      	cmp	r3, r2
 8008334:	bf24      	itt	cs
 8008336:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 800833a:	1ad3      	subcs	r3, r2, r3
 800833c:	f8c8 3004 	str.w	r3, [r8, #4]
 8008340:	e7d9      	b.n	80082f6 <ai_platform_network_process+0x3f6>
 8008342:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8008346:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800834a:	3401      	adds	r4, #1
 800834c:	b2a4      	uxth	r4, r4
 800834e:	42a3      	cmp	r3, r4
 8008350:	f8ab 4016 	strh.w	r4, [fp, #22]
 8008354:	f63f af7f 	bhi.w	8008256 <ai_platform_network_process+0x356>
 8008358:	4620      	mov	r0, r4
 800835a:	b005      	add	sp, #20
 800835c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008360:	2a01      	cmp	r2, #1
 8008362:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8008364:	d03c      	beq.n	80083e0 <ai_platform_network_process+0x4e0>
 8008366:	f106 070c 	add.w	r7, r6, #12
 800836a:	e76f      	b.n	800824c <ai_platform_network_process+0x34c>
 800836c:	4625      	mov	r5, r4
 800836e:	2218      	movs	r2, #24
 8008370:	2113      	movs	r1, #19
 8008372:	f105 0010 	add.w	r0, r5, #16
 8008376:	f000 f84f 	bl	8008418 <core_set_error>
 800837a:	2400      	movs	r4, #0
 800837c:	e72d      	b.n	80081da <ai_platform_network_process+0x2da>
 800837e:	9d02      	ldr	r5, [sp, #8]
 8008380:	4604      	mov	r4, r0
 8008382:	2221      	movs	r2, #33	; 0x21
 8008384:	2112      	movs	r1, #18
 8008386:	f105 0010 	add.w	r0, r5, #16
 800838a:	f000 f845 	bl	8008418 <core_set_error>
 800838e:	e724      	b.n	80081da <ai_platform_network_process+0x2da>
 8008390:	9d02      	ldr	r5, [sp, #8]
 8008392:	e71b      	b.n	80081cc <ai_platform_network_process+0x2cc>
 8008394:	9d02      	ldr	r5, [sp, #8]
 8008396:	4604      	mov	r4, r0
 8008398:	2217      	movs	r2, #23
 800839a:	2112      	movs	r1, #18
 800839c:	f105 0010 	add.w	r0, r5, #16
 80083a0:	f000 f83a 	bl	8008418 <core_set_error>
 80083a4:	e719      	b.n	80081da <ai_platform_network_process+0x2da>
 80083a6:	9d02      	ldr	r5, [sp, #8]
 80083a8:	2219      	movs	r2, #25
 80083aa:	2112      	movs	r1, #18
 80083ac:	f105 0010 	add.w	r0, r5, #16
 80083b0:	f000 f832 	bl	8008418 <core_set_error>
 80083b4:	2400      	movs	r4, #0
 80083b6:	e710      	b.n	80081da <ai_platform_network_process+0x2da>
 80083b8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80083bc:	82ab      	strh	r3, [r5, #20]
 80083be:	e740      	b.n	8008242 <ai_platform_network_process+0x342>
 80083c0:	f104 0010 	add.w	r0, r4, #16
 80083c4:	2219      	movs	r2, #25
 80083c6:	2113      	movs	r1, #19
 80083c8:	f000 f826 	bl	8008418 <core_set_error>
 80083cc:	2400      	movs	r4, #0
 80083ce:	e704      	b.n	80081da <ai_platform_network_process+0x2da>
 80083d0:	f104 0010 	add.w	r0, r4, #16
 80083d4:	2217      	movs	r2, #23
 80083d6:	2113      	movs	r1, #19
 80083d8:	f000 f81e 	bl	8008418 <core_set_error>
 80083dc:	4654      	mov	r4, sl
 80083de:	e6fc      	b.n	80081da <ai_platform_network_process+0x2da>
 80083e0:	2700      	movs	r7, #0
 80083e2:	e733      	b.n	800824c <ai_platform_network_process+0x34c>
 80083e4:	4625      	mov	r5, r4
 80083e6:	2221      	movs	r2, #33	; 0x21
 80083e8:	4604      	mov	r4, r0
 80083ea:	2113      	movs	r1, #19
 80083ec:	f105 0010 	add.w	r0, r5, #16
 80083f0:	f000 f812 	bl	8008418 <core_set_error>
 80083f4:	e6f1      	b.n	80081da <ai_platform_network_process+0x2da>
 80083f6:	4625      	mov	r5, r4
 80083f8:	2217      	movs	r2, #23
 80083fa:	4604      	mov	r4, r0
 80083fc:	2113      	movs	r1, #19
 80083fe:	f105 0010 	add.w	r0, r5, #16
 8008402:	f000 f809 	bl	8008418 <core_set_error>
 8008406:	e6e8      	b.n	80081da <ai_platform_network_process+0x2da>

08008408 <core_init>:
 8008408:	2001      	movs	r0, #1
 800840a:	4770      	bx	lr

0800840c <core_get_error>:
 800840c:	4603      	mov	r3, r0
 800840e:	2200      	movs	r2, #0
 8008410:	6800      	ldr	r0, [r0, #0]
 8008412:	601a      	str	r2, [r3, #0]
 8008414:	4770      	bx	lr
 8008416:	bf00      	nop

08008418 <core_set_error>:
 8008418:	4603      	mov	r3, r0
 800841a:	7800      	ldrb	r0, [r0, #0]
 800841c:	b108      	cbz	r0, 8008422 <core_set_error+0xa>
 800841e:	2000      	movs	r0, #0
 8008420:	4770      	bx	lr
 8008422:	7019      	strb	r1, [r3, #0]
 8008424:	6819      	ldr	r1, [r3, #0]
 8008426:	f362 211f 	bfi	r1, r2, #8, #24
 800842a:	2001      	movs	r0, #1
 800842c:	6019      	str	r1, [r3, #0]
 800842e:	4770      	bx	lr

08008430 <ai_check_custom_types>:
 8008430:	b082      	sub	sp, #8
 8008432:	4b13      	ldr	r3, [pc, #76]	; (8008480 <ai_check_custom_types+0x50>)
 8008434:	9301      	str	r3, [sp, #4]
 8008436:	b118      	cbz	r0, 8008440 <ai_check_custom_types+0x10>
 8008438:	7803      	ldrb	r3, [r0, #0]
 800843a:	2b03      	cmp	r3, #3
 800843c:	d002      	beq.n	8008444 <ai_check_custom_types+0x14>
 800843e:	2000      	movs	r0, #0
 8008440:	b002      	add	sp, #8
 8008442:	4770      	bx	lr
 8008444:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008448:	4293      	cmp	r3, r2
 800844a:	d004      	beq.n	8008456 <ai_check_custom_types+0x26>
 800844c:	2001      	movs	r0, #1
 800844e:	f080 0001 	eor.w	r0, r0, #1
 8008452:	b002      	add	sp, #8
 8008454:	4770      	bx	lr
 8008456:	7842      	ldrb	r2, [r0, #1]
 8008458:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800845c:	429a      	cmp	r2, r3
 800845e:	f100 0001 	add.w	r0, r0, #1
 8008462:	d1f3      	bne.n	800844c <ai_check_custom_types+0x1c>
 8008464:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8008468:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800846c:	429a      	cmp	r2, r3
 800846e:	d1ed      	bne.n	800844c <ai_check_custom_types+0x1c>
 8008470:	7842      	ldrb	r2, [r0, #1]
 8008472:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008476:	429a      	cmp	r2, r3
 8008478:	d1e8      	bne.n	800844c <ai_check_custom_types+0x1c>
 800847a:	2000      	movs	r0, #0
 800847c:	e7e7      	b.n	800844e <ai_check_custom_types+0x1e>
 800847e:	bf00      	nop
 8008480:	84048403 	.word	0x84048403

08008484 <ai_layers_init_all>:
 8008484:	4601      	mov	r1, r0
 8008486:	2000      	movs	r0, #0
 8008488:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800848a:	b143      	cbz	r3, 800849e <ai_layers_init_all+0x1a>
 800848c:	691a      	ldr	r2, [r3, #16]
 800848e:	60d9      	str	r1, [r3, #12]
 8008490:	429a      	cmp	r2, r3
 8008492:	f100 0001 	add.w	r0, r0, #1
 8008496:	d002      	beq.n	800849e <ai_layers_init_all+0x1a>
 8008498:	b10a      	cbz	r2, 800849e <ai_layers_init_all+0x1a>
 800849a:	4613      	mov	r3, r2
 800849c:	e7f5      	b.n	800848a <ai_layers_init_all+0x6>
 800849e:	4770      	bx	lr

080084a0 <ai_layers_post_init_all>:
 80084a0:	b538      	push	{r3, r4, r5, lr}
 80084a2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80084a4:	2500      	movs	r5, #0
 80084a6:	b16c      	cbz	r4, 80084c4 <ai_layers_post_init_all+0x24>
 80084a8:	6863      	ldr	r3, [r4, #4]
 80084aa:	07db      	lsls	r3, r3, #31
 80084ac:	d504      	bpl.n	80084b8 <ai_layers_post_init_all+0x18>
 80084ae:	6a23      	ldr	r3, [r4, #32]
 80084b0:	4620      	mov	r0, r4
 80084b2:	b10b      	cbz	r3, 80084b8 <ai_layers_post_init_all+0x18>
 80084b4:	4798      	blx	r3
 80084b6:	3501      	adds	r5, #1
 80084b8:	6923      	ldr	r3, [r4, #16]
 80084ba:	42a3      	cmp	r3, r4
 80084bc:	d002      	beq.n	80084c4 <ai_layers_post_init_all+0x24>
 80084be:	b10b      	cbz	r3, 80084c4 <ai_layers_post_init_all+0x24>
 80084c0:	461c      	mov	r4, r3
 80084c2:	e7f0      	b.n	80084a6 <ai_layers_post_init_all+0x6>
 80084c4:	4628      	mov	r0, r5
 80084c6:	bd38      	pop	{r3, r4, r5, pc}

080084c8 <ai_layers_forward_all>:
 80084c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084cc:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 80084d0:	4604      	mov	r4, r0
 80084d2:	f1b8 0f00 	cmp.w	r8, #0
 80084d6:	d02b      	beq.n	8008530 <ai_layers_forward_all+0x68>
 80084d8:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80084da:	6381      	str	r1, [r0, #56]	; 0x38
 80084dc:	b321      	cbz	r1, 8008528 <ai_layers_forward_all+0x60>
 80084de:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80084e0:	2001      	movs	r0, #1
 80084e2:	47c0      	blx	r8
 80084e4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80084e6:	b1fe      	cbz	r6, 8008528 <ai_layers_forward_all+0x60>
 80084e8:	2700      	movs	r7, #0
 80084ea:	4631      	mov	r1, r6
 80084ec:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80084ee:	2002      	movs	r0, #2
 80084f0:	47c0      	blx	r8
 80084f2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80084f4:	4628      	mov	r0, r5
 80084f6:	696b      	ldr	r3, [r5, #20]
 80084f8:	4798      	blx	r3
 80084fa:	692e      	ldr	r6, [r5, #16]
 80084fc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80084fe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008500:	42b5      	cmp	r5, r6
 8008502:	f04f 0003 	mov.w	r0, #3
 8008506:	d007      	beq.n	8008518 <ai_layers_forward_all+0x50>
 8008508:	47c0      	blx	r8
 800850a:	3701      	adds	r7, #1
 800850c:	63a6      	str	r6, [r4, #56]	; 0x38
 800850e:	2e00      	cmp	r6, #0
 8008510:	d1eb      	bne.n	80084ea <ai_layers_forward_all+0x22>
 8008512:	4638      	mov	r0, r7
 8008514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008518:	2003      	movs	r0, #3
 800851a:	47c0      	blx	r8
 800851c:	2300      	movs	r3, #0
 800851e:	3701      	adds	r7, #1
 8008520:	63a3      	str	r3, [r4, #56]	; 0x38
 8008522:	4638      	mov	r0, r7
 8008524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008528:	2700      	movs	r7, #0
 800852a:	4638      	mov	r0, r7
 800852c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008530:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8008532:	6385      	str	r5, [r0, #56]	; 0x38
 8008534:	2d00      	cmp	r5, #0
 8008536:	d0f7      	beq.n	8008528 <ai_layers_forward_all+0x60>
 8008538:	4647      	mov	r7, r8
 800853a:	696b      	ldr	r3, [r5, #20]
 800853c:	4628      	mov	r0, r5
 800853e:	4798      	blx	r3
 8008540:	462b      	mov	r3, r5
 8008542:	692d      	ldr	r5, [r5, #16]
 8008544:	429d      	cmp	r5, r3
 8008546:	d004      	beq.n	8008552 <ai_layers_forward_all+0x8a>
 8008548:	63a5      	str	r5, [r4, #56]	; 0x38
 800854a:	3701      	adds	r7, #1
 800854c:	2d00      	cmp	r5, #0
 800854e:	d1f4      	bne.n	800853a <ai_layers_forward_all+0x72>
 8008550:	e7df      	b.n	8008512 <ai_layers_forward_all+0x4a>
 8008552:	2300      	movs	r3, #0
 8008554:	63a3      	str	r3, [r4, #56]	; 0x38
 8008556:	3701      	adds	r7, #1
 8008558:	e7db      	b.n	8008512 <ai_layers_forward_all+0x4a>
 800855a:	bf00      	nop

0800855c <forward_dense>:
 800855c:	6983      	ldr	r3, [r0, #24]
 800855e:	881a      	ldrh	r2, [r3, #0]
 8008560:	2a00      	cmp	r2, #0
 8008562:	f000 8181 	beq.w	8008868 <forward_dense+0x30c>
 8008566:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800856a:	ed2d 8b02 	vpush	{d8}
 800856e:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8008572:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8008576:	b095      	sub	sp, #84	; 0x54
 8008578:	b105      	cbz	r5, 800857c <forward_dense+0x20>
 800857a:	682d      	ldr	r5, [r5, #0]
 800857c:	2a01      	cmp	r2, #1
 800857e:	f000 828f 	beq.w	8008aa0 <forward_dense+0x544>
 8008582:	f8dc 6010 	ldr.w	r6, [ip, #16]
 8008586:	b106      	cbz	r6, 800858a <forward_dense+0x2e>
 8008588:	6836      	ldr	r6, [r6, #0]
 800858a:	2a02      	cmp	r2, #2
 800858c:	f000 816e 	beq.w	800886c <forward_dense+0x310>
 8008590:	f8dc 301c 	ldr.w	r3, [ip, #28]
 8008594:	930b      	str	r3, [sp, #44]	; 0x2c
 8008596:	2b00      	cmp	r3, #0
 8008598:	f000 8274 	beq.w	8008a84 <forward_dense+0x528>
 800859c:	4619      	mov	r1, r3
 800859e:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 80085a2:	6809      	ldr	r1, [r1, #0]
 80085a4:	910d      	str	r1, [sp, #52]	; 0x34
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	f240 826e 	bls.w	8008a88 <forward_dense+0x52c>
 80085ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80085b2:	460b      	mov	r3, r1
 80085b4:	68e8      	ldr	r0, [r5, #12]
 80085b6:	68f7      	ldr	r7, [r6, #12]
 80085b8:	6840      	ldr	r0, [r0, #4]
 80085ba:	6999      	ldr	r1, [r3, #24]
 80085bc:	9013      	str	r0, [sp, #76]	; 0x4c
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	680b      	ldr	r3, [r1, #0]
 80085c2:	9012      	str	r0, [sp, #72]	; 0x48
 80085c4:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 80085c8:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 80085cc:	fb00 f404 	mul.w	r4, r0, r4
 80085d0:	f3c3 5041 	ubfx	r0, r3, #21, #2
 80085d4:	fa4e f000 	asr.w	r0, lr, r0
 80085d8:	2a03      	cmp	r2, #3
 80085da:	9010      	str	r0, [sp, #64]	; 0x40
 80085dc:	f000 825d 	beq.w	8008a9a <forward_dense+0x53e>
 80085e0:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 80085e4:	f3c3 4343 	ubfx	r3, r3, #17, #4
 80085e8:	2a00      	cmp	r2, #0
 80085ea:	f000 8246 	beq.w	8008a7a <forward_dense+0x51e>
 80085ee:	6812      	ldr	r2, [r2, #0]
 80085f0:	2a00      	cmp	r2, #0
 80085f2:	f000 8242 	beq.w	8008a7a <forward_dense+0x51e>
 80085f6:	2b04      	cmp	r3, #4
 80085f8:	f8d2 9018 	ldr.w	r9, [r2, #24]
 80085fc:	f000 822c 	beq.w	8008a58 <forward_dense+0x4fc>
 8008600:	2b08      	cmp	r3, #8
 8008602:	f000 8229 	beq.w	8008a58 <forward_dense+0x4fc>
 8008606:	f04f 0b00 	mov.w	fp, #0
 800860a:	69b2      	ldr	r2, [r6, #24]
 800860c:	69ab      	ldr	r3, [r5, #24]
 800860e:	6891      	ldr	r1, [r2, #8]
 8008610:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	6952      	ldr	r2, [r2, #20]
 8008616:	9106      	str	r1, [sp, #24]
 8008618:	fb07 f404 	mul.w	r4, r7, r4
 800861c:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8008620:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008622:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8008626:	4281      	cmp	r1, r0
 8008628:	ea4f 0482 	mov.w	r4, r2, lsl #2
 800862c:	900e      	str	r0, [sp, #56]	; 0x38
 800862e:	940c      	str	r4, [sp, #48]	; 0x30
 8008630:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 8008634:	f080 8113 	bcs.w	800885e <forward_dense+0x302>
 8008638:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800863a:	ed9f 8a93 	vldr	s16, [pc, #588]	; 8008888 <forward_dense+0x32c>
 800863e:	f021 0201 	bic.w	r2, r1, #1
 8008642:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8008646:	9204      	str	r2, [sp, #16]
 8008648:	f001 0201 	and.w	r2, r1, #1
 800864c:	08c8      	lsrs	r0, r1, #3
 800864e:	9208      	str	r2, [sp, #32]
 8008650:	008a      	lsls	r2, r1, #2
 8008652:	f001 0a07 	and.w	sl, r1, #7
 8008656:	920f      	str	r2, [sp, #60]	; 0x3c
 8008658:	eb03 1240 	add.w	r2, r3, r0, lsl #5
 800865c:	3320      	adds	r3, #32
 800865e:	465c      	mov	r4, fp
 8008660:	9007      	str	r0, [sp, #28]
 8008662:	46cb      	mov	fp, r9
 8008664:	9205      	str	r2, [sp, #20]
 8008666:	9302      	str	r3, [sp, #8]
 8008668:	46c1      	mov	r9, r8
 800866a:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800866e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008670:	699b      	ldr	r3, [r3, #24]
 8008672:	689a      	ldr	r2, [r3, #8]
 8008674:	9b02      	ldr	r3, [sp, #8]
 8008676:	3b20      	subs	r3, #32
 8008678:	930a      	str	r3, [sp, #40]	; 0x28
 800867a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800867c:	b10b      	cbz	r3, 8008682 <forward_dense+0x126>
 800867e:	699b      	ldr	r3, [r3, #24]
 8008680:	689b      	ldr	r3, [r3, #8]
 8008682:	2c00      	cmp	r4, #0
 8008684:	f000 81da 	beq.w	8008a3c <forward_dense+0x4e0>
 8008688:	9910      	ldr	r1, [sp, #64]	; 0x40
 800868a:	2904      	cmp	r1, #4
 800868c:	9906      	ldr	r1, [sp, #24]
 800868e:	f000 80fd 	beq.w	800888c <forward_dense+0x330>
 8008692:	4549      	cmp	r1, r9
 8008694:	f080 80d2 	bcs.w	800883c <forward_dense+0x2e0>
 8008698:	460f      	mov	r7, r1
 800869a:	9907      	ldr	r1, [sp, #28]
 800869c:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80086a0:	f8dd a014 	ldr.w	sl, [sp, #20]
 80086a4:	1c4e      	adds	r6, r1, #1
 80086a6:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80086aa:	4694      	mov	ip, r2
 80086ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80086ae:	468e      	mov	lr, r1
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	f000 80de 	beq.w	8008872 <forward_dense+0x316>
 80086b6:	ecf3 2a01 	vldmia	r3!, {s5}
 80086ba:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8008888 <forward_dense+0x32c>
 80086be:	f1be 0f00 	cmp.w	lr, #0
 80086c2:	f000 80de 	beq.w	8008882 <forward_dense+0x326>
 80086c6:	f10c 0108 	add.w	r1, ip, #8
 80086ca:	4640      	mov	r0, r8
 80086cc:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 80086d0:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 80086d4:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 80086d8:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 80086dc:	ed50 4a05 	vldr	s9, [r0, #-20]	; 0xffffffec
 80086e0:	ed10 5a04 	vldr	s10, [r0, #-16]
 80086e4:	ed50 5a03 	vldr	s11, [r0, #-12]
 80086e8:	ed10 6a02 	vldr	s12, [r0, #-8]
 80086ec:	ed50 6a01 	vldr	s13, [r0, #-4]
 80086f0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80086f4:	edd5 7a00 	vldr	s15, [r5]
 80086f8:	f811 5c08 	ldrb.w	r5, [r1, #-8]
 80086fc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008700:	ee67 7a83 	vmul.f32	s15, s15, s6
 8008704:	ed95 3a00 	vldr	s6, [r5]
 8008708:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 800870c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008710:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008714:	3108      	adds	r1, #8
 8008716:	edd5 3a00 	vldr	s7, [r5]
 800871a:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 800871e:	eee3 7a84 	vfma.f32	s15, s7, s8
 8008722:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008726:	3020      	adds	r0, #32
 8008728:	ed95 4a00 	vldr	s8, [r5]
 800872c:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8008730:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008734:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008738:	edd5 4a00 	vldr	s9, [r5]
 800873c:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8008740:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008744:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008748:	ed95 5a00 	vldr	s10, [r5]
 800874c:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8008750:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008754:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008758:	edd5 5a00 	vldr	s11, [r5]
 800875c:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 8008760:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008764:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008768:	428e      	cmp	r6, r1
 800876a:	ed95 6a00 	vldr	s12, [r5]
 800876e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008772:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008776:	d1a9      	bne.n	80086cc <forward_dense+0x170>
 8008778:	f1a6 0108 	sub.w	r1, r6, #8
 800877c:	4650      	mov	r0, sl
 800877e:	2a00      	cmp	r2, #0
 8008780:	d04a      	beq.n	8008818 <forward_dense+0x2bc>
 8008782:	780d      	ldrb	r5, [r1, #0]
 8008784:	edd0 6a00 	vldr	s13, [r0]
 8008788:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800878c:	edd5 7a00 	vldr	s15, [r5]
 8008790:	2a01      	cmp	r2, #1
 8008792:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008796:	d03f      	beq.n	8008818 <forward_dense+0x2bc>
 8008798:	784d      	ldrb	r5, [r1, #1]
 800879a:	edd0 6a01 	vldr	s13, [r0, #4]
 800879e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80087a2:	edd5 7a00 	vldr	s15, [r5]
 80087a6:	2a02      	cmp	r2, #2
 80087a8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80087ac:	d034      	beq.n	8008818 <forward_dense+0x2bc>
 80087ae:	788d      	ldrb	r5, [r1, #2]
 80087b0:	edd0 6a02 	vldr	s13, [r0, #8]
 80087b4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80087b8:	edd5 7a00 	vldr	s15, [r5]
 80087bc:	2a03      	cmp	r2, #3
 80087be:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80087c2:	d029      	beq.n	8008818 <forward_dense+0x2bc>
 80087c4:	78cd      	ldrb	r5, [r1, #3]
 80087c6:	edd0 6a03 	vldr	s13, [r0, #12]
 80087ca:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80087ce:	edd5 7a00 	vldr	s15, [r5]
 80087d2:	2a04      	cmp	r2, #4
 80087d4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80087d8:	d01e      	beq.n	8008818 <forward_dense+0x2bc>
 80087da:	790d      	ldrb	r5, [r1, #4]
 80087dc:	edd0 6a04 	vldr	s13, [r0, #16]
 80087e0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80087e4:	edd5 7a00 	vldr	s15, [r5]
 80087e8:	2a05      	cmp	r2, #5
 80087ea:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80087ee:	d013      	beq.n	8008818 <forward_dense+0x2bc>
 80087f0:	794d      	ldrb	r5, [r1, #5]
 80087f2:	edd0 6a05 	vldr	s13, [r0, #20]
 80087f6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80087fa:	edd5 7a00 	vldr	s15, [r5]
 80087fe:	2a06      	cmp	r2, #6
 8008800:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008804:	d008      	beq.n	8008818 <forward_dense+0x2bc>
 8008806:	7989      	ldrb	r1, [r1, #6]
 8008808:	edd0 7a06 	vldr	s15, [r0, #24]
 800880c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8008810:	edd1 6a00 	vldr	s13, [r1]
 8008814:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008818:	44dc      	add	ip, fp
 800881a:	445e      	add	r6, fp
 800881c:	ee32 7a87 	vadd.f32	s14, s5, s14
 8008820:	eca7 7a01 	vstmia	r7!, {s14}
 8008824:	454f      	cmp	r7, r9
 8008826:	f4ff af43 	bcc.w	80086b0 <forward_dense+0x154>
 800882a:	9a06      	ldr	r2, [sp, #24]
 800882c:	eba9 0302 	sub.w	r3, r9, r2
 8008830:	3b01      	subs	r3, #1
 8008832:	f023 0303 	bic.w	r3, r3, #3
 8008836:	3304      	adds	r3, #4
 8008838:	18d3      	adds	r3, r2, r3
 800883a:	9306      	str	r3, [sp, #24]
 800883c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800883e:	9a05      	ldr	r2, [sp, #20]
 8008840:	4499      	add	r9, r3
 8008842:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008844:	441a      	add	r2, r3
 8008846:	9205      	str	r2, [sp, #20]
 8008848:	9a02      	ldr	r2, [sp, #8]
 800884a:	441a      	add	r2, r3
 800884c:	9202      	str	r2, [sp, #8]
 800884e:	9a04      	ldr	r2, [sp, #16]
 8008850:	441a      	add	r2, r3
 8008852:	9204      	str	r2, [sp, #16]
 8008854:	9b06      	ldr	r3, [sp, #24]
 8008856:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008858:	4293      	cmp	r3, r2
 800885a:	f4ff af08 	bcc.w	800866e <forward_dense+0x112>
 800885e:	b015      	add	sp, #84	; 0x54
 8008860:	ecbd 8b02 	vpop	{d8}
 8008864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008868:	6853      	ldr	r3, [r2, #4]
 800886a:	deff      	udf	#255	; 0xff
 800886c:	2300      	movs	r3, #0
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	deff      	udf	#255	; 0xff
 8008872:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8008888 <forward_dense+0x32c>
 8008876:	eef0 2a48 	vmov.f32	s5, s16
 800887a:	f1be 0f00 	cmp.w	lr, #0
 800887e:	f47f af22 	bne.w	80086c6 <forward_dense+0x16a>
 8008882:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008884:	4661      	mov	r1, ip
 8008886:	e77a      	b.n	800877e <forward_dense+0x222>
 8008888:	00000000 	.word	0x00000000
 800888c:	4549      	cmp	r1, r9
 800888e:	d2d5      	bcs.n	800883c <forward_dense+0x2e0>
 8008890:	9807      	ldr	r0, [sp, #28]
 8008892:	9103      	str	r1, [sp, #12]
 8008894:	9904      	ldr	r1, [sp, #16]
 8008896:	f100 0c01 	add.w	ip, r0, #1
 800889a:	3901      	subs	r1, #1
 800889c:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 80088a0:	9109      	str	r1, [sp, #36]	; 0x24
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	f000 80b2 	beq.w	8008a0c <forward_dense+0x4b0>
 80088a8:	9907      	ldr	r1, [sp, #28]
 80088aa:	ecf3 2a01 	vldmia	r3!, {s5}
 80088ae:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 8008888 <forward_dense+0x32c>
 80088b2:	2900      	cmp	r1, #0
 80088b4:	f000 80b2 	beq.w	8008a1c <forward_dense+0x4c0>
 80088b8:	9902      	ldr	r1, [sp, #8]
 80088ba:	1d10      	adds	r0, r2, #4
 80088bc:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 80088c0:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 80088c4:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 80088c8:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 80088cc:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 80088d0:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
 80088d4:	ed11 5a04 	vldr	s10, [r1, #-16]
 80088d8:	ed51 5a03 	vldr	s11, [r1, #-12]
 80088dc:	ed11 6a02 	vldr	s12, [r1, #-8]
 80088e0:	ed51 6a01 	vldr	s13, [r1, #-4]
 80088e4:	f006 070f 	and.w	r7, r6, #15
 80088e8:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 80088ec:	edd7 7a00 	vldr	s15, [r7]
 80088f0:	0936      	lsrs	r6, r6, #4
 80088f2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80088f6:	ed96 3a00 	vldr	s6, [r6]
 80088fa:	ee67 7a82 	vmul.f32	s15, s15, s4
 80088fe:	092e      	lsrs	r6, r5, #4
 8008900:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008904:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008908:	f005 050f 	and.w	r5, r5, #15
 800890c:	edd6 3a00 	vldr	s7, [r6]
 8008910:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 8008914:	eee3 7a84 	vfma.f32	s15, s7, s8
 8008918:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800891c:	0937      	lsrs	r7, r6, #4
 800891e:	ed95 4a00 	vldr	s8, [r5]
 8008922:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 8008926:	eee4 7a24 	vfma.f32	s15, s8, s9
 800892a:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800892e:	f006 060f 	and.w	r6, r6, #15
 8008932:	edd7 4a00 	vldr	s9, [r7]
 8008936:	eee4 7a85 	vfma.f32	s15, s9, s10
 800893a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800893e:	3004      	adds	r0, #4
 8008940:	ed96 5a00 	vldr	s10, [r6]
 8008944:	092e      	lsrs	r6, r5, #4
 8008946:	eee5 7a25 	vfma.f32	s15, s10, s11
 800894a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800894e:	f005 050f 	and.w	r5, r5, #15
 8008952:	edd6 5a00 	vldr	s11, [r6]
 8008956:	eee5 7a86 	vfma.f32	s15, s11, s12
 800895a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800895e:	4584      	cmp	ip, r0
 8008960:	ed95 6a00 	vldr	s12, [r5]
 8008964:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008968:	f101 0120 	add.w	r1, r1, #32
 800896c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008970:	d1a4      	bne.n	80088bc <forward_dense+0x360>
 8008972:	f8dd e014 	ldr.w	lr, [sp, #20]
 8008976:	f1ac 0804 	sub.w	r8, ip, #4
 800897a:	9904      	ldr	r1, [sp, #16]
 800897c:	458e      	cmp	lr, r1
 800897e:	d22a      	bcs.n	80089d6 <forward_dense+0x47a>
 8008980:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008982:	eba1 070e 	sub.w	r7, r1, lr
 8008986:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
 800898a:	f10e 0008 	add.w	r0, lr, #8
 800898e:	f108 36ff 	add.w	r6, r8, #4294967295
 8008992:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 8008996:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800899a:	ed50 5a01 	vldr	s11, [r0, #-4]
 800899e:	ed50 6a02 	vldr	s13, [r0, #-8]
 80089a2:	f001 050f 	and.w	r5, r1, #15
 80089a6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80089aa:	edd5 7a00 	vldr	s15, [r5]
 80089ae:	0909      	lsrs	r1, r1, #4
 80089b0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80089b4:	ed91 6a00 	vldr	s12, [r1]
 80089b8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80089bc:	42b7      	cmp	r7, r6
 80089be:	eee6 7a26 	vfma.f32	s15, s12, s13
 80089c2:	f100 0008 	add.w	r0, r0, #8
 80089c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80089ca:	d1e4      	bne.n	8008996 <forward_dense+0x43a>
 80089cc:	f10a 0a01 	add.w	sl, sl, #1
 80089d0:	44d0      	add	r8, sl
 80089d2:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 80089d6:	9908      	ldr	r1, [sp, #32]
 80089d8:	b321      	cbz	r1, 8008a24 <forward_dense+0x4c8>
 80089da:	f898 1000 	ldrb.w	r1, [r8]
 80089de:	edde 7a00 	vldr	s15, [lr]
 80089e2:	0909      	lsrs	r1, r1, #4
 80089e4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80089e8:	edd1 6a00 	vldr	s13, [r1]
 80089ec:	9903      	ldr	r1, [sp, #12]
 80089ee:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80089f2:	445a      	add	r2, fp
 80089f4:	44dc      	add	ip, fp
 80089f6:	ee72 2a87 	vadd.f32	s5, s5, s14
 80089fa:	ece1 2a01 	vstmia	r1!, {s5}
 80089fe:	4589      	cmp	r9, r1
 8008a00:	9103      	str	r1, [sp, #12]
 8008a02:	f67f af12 	bls.w	800882a <forward_dense+0x2ce>
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	f47f af4e 	bne.w	80088a8 <forward_dense+0x34c>
 8008a0c:	9907      	ldr	r1, [sp, #28]
 8008a0e:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 8008888 <forward_dense+0x32c>
 8008a12:	eef0 2a48 	vmov.f32	s5, s16
 8008a16:	2900      	cmp	r1, #0
 8008a18:	f47f af4e 	bne.w	80088b8 <forward_dense+0x35c>
 8008a1c:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 8008a20:	4690      	mov	r8, r2
 8008a22:	e7aa      	b.n	800897a <forward_dense+0x41e>
 8008a24:	9903      	ldr	r1, [sp, #12]
 8008a26:	ee32 7a87 	vadd.f32	s14, s5, s14
 8008a2a:	445a      	add	r2, fp
 8008a2c:	eca1 7a01 	vstmia	r1!, {s14}
 8008a30:	4549      	cmp	r1, r9
 8008a32:	9103      	str	r1, [sp, #12]
 8008a34:	44dc      	add	ip, fp
 8008a36:	f4ff af34 	bcc.w	80088a2 <forward_dense+0x346>
 8008a3a:	e6f6      	b.n	800882a <forward_dense+0x2ce>
 8008a3c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008a3e:	9d06      	ldr	r5, [sp, #24]
 8008a40:	9101      	str	r1, [sp, #4]
 8008a42:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008a44:	9100      	str	r1, [sp, #0]
 8008a46:	4628      	mov	r0, r5
 8008a48:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008a4a:	f000 fa2d 	bl	8008ea8 <forward_lite_dense_if32of32wf32>
 8008a4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a50:	462b      	mov	r3, r5
 8008a52:	4413      	add	r3, r2
 8008a54:	9306      	str	r3, [sp, #24]
 8008a56:	e6f1      	b.n	800883c <forward_dense+0x2e0>
 8008a58:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8008a5c:	f1b9 0f00 	cmp.w	r9, #0
 8008a60:	d016      	beq.n	8008a90 <forward_dense+0x534>
 8008a62:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008a66:	f000 fc35 	bl	80092d4 <ai_array_get_byte_size>
 8008a6a:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 8008a6e:	4602      	mov	r2, r0
 8008a70:	4659      	mov	r1, fp
 8008a72:	4640      	mov	r0, r8
 8008a74:	f000 fb3c 	bl	80090f0 <st_int8_copy>
 8008a78:	e5c7      	b.n	800860a <forward_dense+0xae>
 8008a7a:	2b04      	cmp	r3, #4
 8008a7c:	d00a      	beq.n	8008a94 <forward_dense+0x538>
 8008a7e:	f04f 0900 	mov.w	r9, #0
 8008a82:	e5bd      	b.n	8008600 <forward_dense+0xa4>
 8008a84:	930d      	str	r3, [sp, #52]	; 0x34
 8008a86:	e595      	b.n	80085b4 <forward_dense+0x58>
 8008a88:	2300      	movs	r3, #0
 8008a8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a8c:	460b      	mov	r3, r1
 8008a8e:	e591      	b.n	80085b4 <forward_dense+0x58>
 8008a90:	46c3      	mov	fp, r8
 8008a92:	e5ba      	b.n	800860a <forward_dense+0xae>
 8008a94:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 8008a98:	e5b7      	b.n	800860a <forward_dense+0xae>
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	deff      	udf	#255	; 0xff
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	deff      	udf	#255	; 0xff
 8008aa6:	bf00      	nop

08008aa8 <forward_tanh>:
 8008aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aaa:	6982      	ldr	r2, [r0, #24]
 8008aac:	8813      	ldrh	r3, [r2, #0]
 8008aae:	b38b      	cbz	r3, 8008b14 <forward_tanh+0x6c>
 8008ab0:	6852      	ldr	r2, [r2, #4]
 8008ab2:	6854      	ldr	r4, [r2, #4]
 8008ab4:	b104      	cbz	r4, 8008ab8 <forward_tanh+0x10>
 8008ab6:	6824      	ldr	r4, [r4, #0]
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d02a      	beq.n	8008b12 <forward_tanh+0x6a>
 8008abc:	6915      	ldr	r5, [r2, #16]
 8008abe:	b105      	cbz	r5, 8008ac2 <forward_tanh+0x1a>
 8008ac0:	682d      	ldr	r5, [r5, #0]
 8008ac2:	68a3      	ldr	r3, [r4, #8]
 8008ac4:	0a1b      	lsrs	r3, r3, #8
 8008ac6:	d027      	beq.n	8008b18 <forward_tanh+0x70>
 8008ac8:	68e0      	ldr	r0, [r4, #12]
 8008aca:	2201      	movs	r2, #1
 8008acc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8008ad0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008ad4:	4298      	cmp	r0, r3
 8008ad6:	fb01 f202 	mul.w	r2, r1, r2
 8008ada:	d1f9      	bne.n	8008ad0 <forward_tanh+0x28>
 8008adc:	69a7      	ldr	r7, [r4, #24]
 8008ade:	69a9      	ldr	r1, [r5, #24]
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	688e      	ldr	r6, [r1, #8]
 8008ae4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8008ae8:	3a01      	subs	r2, #1
 8008aea:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 8008aee:	42ab      	cmp	r3, r5
 8008af0:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 8008af4:	d80c      	bhi.n	8008b10 <forward_tanh+0x68>
 8008af6:	3504      	adds	r5, #4
 8008af8:	3604      	adds	r6, #4
 8008afa:	462c      	mov	r4, r5
 8008afc:	ed35 0a01 	vldmdb	r5!, {s0}
 8008b00:	f001 fc10 	bl	800a324 <tanhf>
 8008b04:	ed26 0a01 	vstmdb	r6!, {s0}
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	3c08      	subs	r4, #8
 8008b0c:	42a3      	cmp	r3, r4
 8008b0e:	d9f4      	bls.n	8008afa <forward_tanh+0x52>
 8008b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b12:	2300      	movs	r3, #0
 8008b14:	685b      	ldr	r3, [r3, #4]
 8008b16:	deff      	udf	#255	; 0xff
 8008b18:	69ab      	ldr	r3, [r5, #24]
 8008b1a:	69a7      	ldr	r7, [r4, #24]
 8008b1c:	689e      	ldr	r6, [r3, #8]
 8008b1e:	68bd      	ldr	r5, [r7, #8]
 8008b20:	e7e9      	b.n	8008af6 <forward_tanh+0x4e>
 8008b22:	bf00      	nop

08008b24 <forward_relu>:
 8008b24:	6982      	ldr	r2, [r0, #24]
 8008b26:	8813      	ldrh	r3, [r2, #0]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d05b      	beq.n	8008be4 <forward_relu+0xc0>
 8008b2c:	6851      	ldr	r1, [r2, #4]
 8008b2e:	684a      	ldr	r2, [r1, #4]
 8008b30:	b102      	cbz	r2, 8008b34 <forward_relu+0x10>
 8008b32:	6812      	ldr	r2, [r2, #0]
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	f000 8123 	beq.w	8008d80 <forward_relu+0x25c>
 8008b3a:	b470      	push	{r4, r5, r6}
 8008b3c:	6909      	ldr	r1, [r1, #16]
 8008b3e:	b101      	cbz	r1, 8008b42 <forward_relu+0x1e>
 8008b40:	6809      	ldr	r1, [r1, #0]
 8008b42:	69c6      	ldr	r6, [r0, #28]
 8008b44:	2e00      	cmp	r6, #0
 8008b46:	f000 8097 	beq.w	8008c78 <forward_relu+0x154>
 8008b4a:	6873      	ldr	r3, [r6, #4]
 8008b4c:	6988      	ldr	r0, [r1, #24]
 8008b4e:	6991      	ldr	r1, [r2, #24]
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	f000 80c1 	beq.w	8008cd8 <forward_relu+0x1b4>
 8008b56:	6893      	ldr	r3, [r2, #8]
 8008b58:	6880      	ldr	r0, [r0, #8]
 8008b5a:	688c      	ldr	r4, [r1, #8]
 8008b5c:	0a1b      	lsrs	r3, r3, #8
 8008b5e:	f000 80f2 	beq.w	8008d46 <forward_relu+0x222>
 8008b62:	68d5      	ldr	r5, [r2, #12]
 8008b64:	2201      	movs	r2, #1
 8008b66:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008b6a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008b6e:	42ab      	cmp	r3, r5
 8008b70:	fb01 f202 	mul.w	r2, r1, r2
 8008b74:	d1f9      	bne.n	8008b6a <forward_relu+0x46>
 8008b76:	68b3      	ldr	r3, [r6, #8]
 8008b78:	ed93 7a02 	vldr	s14, [r3, #8]
 8008b7c:	edd3 6a00 	vldr	s13, [r3]
 8008b80:	ed93 6a01 	vldr	s12, [r3, #4]
 8008b84:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8008b88:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8008b8c:	3a01      	subs	r2, #1
 8008b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b92:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008b96:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8008b9a:	d425      	bmi.n	8008be8 <forward_relu+0xc4>
 8008b9c:	429c      	cmp	r4, r3
 8008b9e:	d81f      	bhi.n	8008be0 <forward_relu+0xbc>
 8008ba0:	1d1a      	adds	r2, r3, #4
 8008ba2:	1d01      	adds	r1, r0, #4
 8008ba4:	e00d      	b.n	8008bc2 <forward_relu+0x9e>
 8008ba6:	eef4 6ae7 	vcmpe.f32	s13, s15
 8008baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bae:	db03      	blt.n	8008bb8 <forward_relu+0x94>
 8008bb0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008bb4:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008bb8:	3b08      	subs	r3, #8
 8008bba:	429c      	cmp	r4, r3
 8008bbc:	ed61 7a01 	vstmdb	r1!, {s15}
 8008bc0:	d80e      	bhi.n	8008be0 <forward_relu+0xbc>
 8008bc2:	4613      	mov	r3, r2
 8008bc4:	ed72 7a01 	vldmdb	r2!, {s15}
 8008bc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bd0:	d9e9      	bls.n	8008ba6 <forward_relu+0x82>
 8008bd2:	3b08      	subs	r3, #8
 8008bd4:	eef0 7a47 	vmov.f32	s15, s14
 8008bd8:	429c      	cmp	r4, r3
 8008bda:	ed61 7a01 	vstmdb	r1!, {s15}
 8008bde:	d9f0      	bls.n	8008bc2 <forward_relu+0x9e>
 8008be0:	bc70      	pop	{r4, r5, r6}
 8008be2:	4770      	bx	lr
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	deff      	udf	#255	; 0xff
 8008be8:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8008bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bf0:	d11f      	bne.n	8008c32 <forward_relu+0x10e>
 8008bf2:	429c      	cmp	r4, r3
 8008bf4:	d8f4      	bhi.n	8008be0 <forward_relu+0xbc>
 8008bf6:	1b1c      	subs	r4, r3, r4
 8008bf8:	f024 0403 	bic.w	r4, r4, #3
 8008bfc:	1d1a      	adds	r2, r3, #4
 8008bfe:	2500      	movs	r5, #0
 8008c00:	1b1b      	subs	r3, r3, r4
 8008c02:	1d01      	adds	r1, r0, #4
 8008c04:	ed72 7a01 	vldmdb	r2!, {s15}
 8008c08:	eef4 7ae6 	vcmpe.f32	s15, s13
 8008c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c10:	dc0a      	bgt.n	8008c28 <forward_relu+0x104>
 8008c12:	429a      	cmp	r2, r3
 8008c14:	f841 5d04 	str.w	r5, [r1, #-4]!
 8008c18:	d0e2      	beq.n	8008be0 <forward_relu+0xbc>
 8008c1a:	ed72 7a01 	vldmdb	r2!, {s15}
 8008c1e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8008c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c26:	ddf4      	ble.n	8008c12 <forward_relu+0xee>
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	ed61 7a01 	vstmdb	r1!, {s15}
 8008c2e:	d1e9      	bne.n	8008c04 <forward_relu+0xe0>
 8008c30:	e7d6      	b.n	8008be0 <forward_relu+0xbc>
 8008c32:	429c      	cmp	r4, r3
 8008c34:	d8d4      	bhi.n	8008be0 <forward_relu+0xbc>
 8008c36:	1b1c      	subs	r4, r3, r4
 8008c38:	f024 0403 	bic.w	r4, r4, #3
 8008c3c:	1d1a      	adds	r2, r3, #4
 8008c3e:	1d01      	adds	r1, r0, #4
 8008c40:	1b1b      	subs	r3, r3, r4
 8008c42:	ed72 7a01 	vldmdb	r2!, {s15}
 8008c46:	eef4 6ae7 	vcmpe.f32	s13, s15
 8008c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c4e:	db0e      	blt.n	8008c6e <forward_relu+0x14a>
 8008c50:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008c54:	4293      	cmp	r3, r2
 8008c56:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008c5a:	ed61 7a01 	vstmdb	r1!, {s15}
 8008c5e:	d0bf      	beq.n	8008be0 <forward_relu+0xbc>
 8008c60:	ed72 7a01 	vldmdb	r2!, {s15}
 8008c64:	eef4 6ae7 	vcmpe.f32	s13, s15
 8008c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c6c:	daf0      	bge.n	8008c50 <forward_relu+0x12c>
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	ed61 7a01 	vstmdb	r1!, {s15}
 8008c74:	d1e5      	bne.n	8008c42 <forward_relu+0x11e>
 8008c76:	e7b3      	b.n	8008be0 <forward_relu+0xbc>
 8008c78:	6893      	ldr	r3, [r2, #8]
 8008c7a:	6989      	ldr	r1, [r1, #24]
 8008c7c:	6990      	ldr	r0, [r2, #24]
 8008c7e:	6889      	ldr	r1, [r1, #8]
 8008c80:	6884      	ldr	r4, [r0, #8]
 8008c82:	0a1b      	lsrs	r3, r3, #8
 8008c84:	d075      	beq.n	8008d72 <forward_relu+0x24e>
 8008c86:	68d5      	ldr	r5, [r2, #12]
 8008c88:	2201      	movs	r2, #1
 8008c8a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008c8e:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8008c92:	429d      	cmp	r5, r3
 8008c94:	fb00 f202 	mul.w	r2, r0, r2
 8008c98:	d1f9      	bne.n	8008c8e <forward_relu+0x16a>
 8008c9a:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 8008c9e:	3b01      	subs	r3, #1
 8008ca0:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8008ca4:	4294      	cmp	r4, r2
 8008ca6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8008caa:	d899      	bhi.n	8008be0 <forward_relu+0xbc>
 8008cac:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8008d88 <forward_relu+0x264>
 8008cb0:	3204      	adds	r2, #4
 8008cb2:	3104      	adds	r1, #4
 8008cb4:	4613      	mov	r3, r2
 8008cb6:	ed72 7a01 	vldmdb	r2!, {s15}
 8008cba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cc2:	f1a3 0308 	sub.w	r3, r3, #8
 8008cc6:	bfb8      	it	lt
 8008cc8:	eef0 7a47 	vmovlt.f32	s15, s14
 8008ccc:	429c      	cmp	r4, r3
 8008cce:	ed61 7a01 	vstmdb	r1!, {s15}
 8008cd2:	d9ef      	bls.n	8008cb4 <forward_relu+0x190>
 8008cd4:	bc70      	pop	{r4, r5, r6}
 8008cd6:	4770      	bx	lr
 8008cd8:	688c      	ldr	r4, [r1, #8]
 8008cda:	6891      	ldr	r1, [r2, #8]
 8008cdc:	6880      	ldr	r0, [r0, #8]
 8008cde:	0a09      	lsrs	r1, r1, #8
 8008ce0:	d049      	beq.n	8008d76 <forward_relu+0x252>
 8008ce2:	68d5      	ldr	r5, [r2, #12]
 8008ce4:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 8008ce8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008cec:	42aa      	cmp	r2, r5
 8008cee:	fb01 f303 	mul.w	r3, r1, r3
 8008cf2:	d1f9      	bne.n	8008ce8 <forward_relu+0x1c4>
 8008cf4:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8008cf8:	3a01      	subs	r2, #1
 8008cfa:	68b1      	ldr	r1, [r6, #8]
 8008cfc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008d00:	429c      	cmp	r4, r3
 8008d02:	ed91 7a00 	vldr	s14, [r1]
 8008d06:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8008d0a:	f63f af69 	bhi.w	8008be0 <forward_relu+0xbc>
 8008d0e:	2500      	movs	r5, #0
 8008d10:	3304      	adds	r3, #4
 8008d12:	1d02      	adds	r2, r0, #4
 8008d14:	ed53 7a01 	vldr	s15, [r3, #-4]
 8008d18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d20:	f1a3 0104 	sub.w	r1, r3, #4
 8008d24:	f1a3 0308 	sub.w	r3, r3, #8
 8008d28:	d406      	bmi.n	8008d38 <forward_relu+0x214>
 8008d2a:	429c      	cmp	r4, r3
 8008d2c:	f842 5d04 	str.w	r5, [r2, #-4]!
 8008d30:	f63f af56 	bhi.w	8008be0 <forward_relu+0xbc>
 8008d34:	460b      	mov	r3, r1
 8008d36:	e7ed      	b.n	8008d14 <forward_relu+0x1f0>
 8008d38:	429c      	cmp	r4, r3
 8008d3a:	ed62 7a01 	vstmdb	r2!, {s15}
 8008d3e:	f63f af4f 	bhi.w	8008be0 <forward_relu+0xbc>
 8008d42:	460b      	mov	r3, r1
 8008d44:	e7e6      	b.n	8008d14 <forward_relu+0x1f0>
 8008d46:	68b3      	ldr	r3, [r6, #8]
 8008d48:	ed93 7a02 	vldr	s14, [r3, #8]
 8008d4c:	edd3 6a00 	vldr	s13, [r3]
 8008d50:	ed93 6a01 	vldr	s12, [r3, #4]
 8008d54:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8008d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d5c:	d401      	bmi.n	8008d62 <forward_relu+0x23e>
 8008d5e:	4623      	mov	r3, r4
 8008d60:	e71e      	b.n	8008ba0 <forward_relu+0x7c>
 8008d62:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8008d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d6a:	4623      	mov	r3, r4
 8008d6c:	f47f af63 	bne.w	8008c36 <forward_relu+0x112>
 8008d70:	e741      	b.n	8008bf6 <forward_relu+0xd2>
 8008d72:	4622      	mov	r2, r4
 8008d74:	e79a      	b.n	8008cac <forward_relu+0x188>
 8008d76:	68b2      	ldr	r2, [r6, #8]
 8008d78:	4623      	mov	r3, r4
 8008d7a:	ed92 7a00 	vldr	s14, [r2]
 8008d7e:	e7c6      	b.n	8008d0e <forward_relu+0x1ea>
 8008d80:	2300      	movs	r3, #0
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	deff      	udf	#255	; 0xff
 8008d86:	bf00      	nop
 8008d88:	00000000 	.word	0x00000000

08008d8c <forward_sm>:
 8008d8c:	6982      	ldr	r2, [r0, #24]
 8008d8e:	8813      	ldrh	r3, [r2, #0]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d07c      	beq.n	8008e8e <forward_sm+0x102>
 8008d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d98:	ed2d 8b04 	vpush	{d8-d9}
 8008d9c:	6852      	ldr	r2, [r2, #4]
 8008d9e:	6854      	ldr	r4, [r2, #4]
 8008da0:	b085      	sub	sp, #20
 8008da2:	b104      	cbz	r4, 8008da6 <forward_sm+0x1a>
 8008da4:	6824      	ldr	r4, [r4, #0]
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d076      	beq.n	8008e98 <forward_sm+0x10c>
 8008daa:	6913      	ldr	r3, [r2, #16]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d076      	beq.n	8008e9e <forward_sm+0x112>
 8008db0:	681e      	ldr	r6, [r3, #0]
 8008db2:	68a3      	ldr	r3, [r4, #8]
 8008db4:	68e0      	ldr	r0, [r4, #12]
 8008db6:	68f2      	ldr	r2, [r6, #12]
 8008db8:	6845      	ldr	r5, [r0, #4]
 8008dba:	6857      	ldr	r7, [r2, #4]
 8008dbc:	0a1b      	lsrs	r3, r3, #8
 8008dbe:	d068      	beq.n	8008e92 <forward_sm+0x106>
 8008dc0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008dca:	4298      	cmp	r0, r3
 8008dcc:	fb01 f202 	mul.w	r2, r1, r2
 8008dd0:	d1f9      	bne.n	8008dc6 <forward_sm+0x3a>
 8008dd2:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8008dd6:	69a2      	ldr	r2, [r4, #24]
 8008dd8:	69b3      	ldr	r3, [r6, #24]
 8008dda:	6892      	ldr	r2, [r2, #8]
 8008ddc:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8008de0:	eb02 0309 	add.w	r3, r2, r9
 8008de4:	429a      	cmp	r2, r3
 8008de6:	9301      	str	r3, [sp, #4]
 8008de8:	d24c      	bcs.n	8008e84 <forward_sm+0xf8>
 8008dea:	00bb      	lsls	r3, r7, #2
 8008dec:	9303      	str	r3, [sp, #12]
 8008dee:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 8008df2:	00ab      	lsls	r3, r5, #2
 8008df4:	2d01      	cmp	r5, #1
 8008df6:	ed92 8a00 	vldr	s16, [r2]
 8008dfa:	9302      	str	r3, [sp, #8]
 8008dfc:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8008e00:	463e      	mov	r6, r7
 8008e02:	d93c      	bls.n	8008e7e <forward_sm+0xf2>
 8008e04:	1d13      	adds	r3, r2, #4
 8008e06:	ecf3 7a01 	vldmia	r3!, {s15}
 8008e0a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e12:	bfb8      	it	lt
 8008e14:	eeb0 8a67 	vmovlt.f32	s16, s15
 8008e18:	429e      	cmp	r6, r3
 8008e1a:	d1f4      	bne.n	8008e06 <forward_sm+0x7a>
 8008e1c:	eddf 8a21 	vldr	s17, [pc, #132]	; 8008ea4 <forward_sm+0x118>
 8008e20:	4692      	mov	sl, r2
 8008e22:	46c3      	mov	fp, r8
 8008e24:	46c1      	mov	r9, r8
 8008e26:	2400      	movs	r4, #0
 8008e28:	ecba 0a01 	vldmia	sl!, {s0}
 8008e2c:	ee30 0a48 	vsub.f32	s0, s0, s16
 8008e30:	f001 fa3a 	bl	800a2a8 <expf>
 8008e34:	3401      	adds	r4, #1
 8008e36:	42a5      	cmp	r5, r4
 8008e38:	ee78 8a80 	vadd.f32	s17, s17, s0
 8008e3c:	eca9 0a01 	vstmia	r9!, {s0}
 8008e40:	d8f2      	bhi.n	8008e28 <forward_sm+0x9c>
 8008e42:	eef5 8a40 	vcmp.f32	s17, #0.0
 8008e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e4a:	d00b      	beq.n	8008e64 <forward_sm+0xd8>
 8008e4c:	ee89 7a28 	vdiv.f32	s14, s18, s17
 8008e50:	2300      	movs	r3, #0
 8008e52:	3301      	adds	r3, #1
 8008e54:	429d      	cmp	r5, r3
 8008e56:	eddb 7a00 	vldr	s15, [fp]
 8008e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e5e:	eceb 7a01 	vstmia	fp!, {s15}
 8008e62:	d8f6      	bhi.n	8008e52 <forward_sm+0xc6>
 8008e64:	9b03      	ldr	r3, [sp, #12]
 8008e66:	9901      	ldr	r1, [sp, #4]
 8008e68:	4498      	add	r8, r3
 8008e6a:	9b02      	ldr	r3, [sp, #8]
 8008e6c:	42b9      	cmp	r1, r7
 8008e6e:	463a      	mov	r2, r7
 8008e70:	441e      	add	r6, r3
 8008e72:	d907      	bls.n	8008e84 <forward_sm+0xf8>
 8008e74:	2d01      	cmp	r5, #1
 8008e76:	ed92 8a00 	vldr	s16, [r2]
 8008e7a:	441f      	add	r7, r3
 8008e7c:	d8c2      	bhi.n	8008e04 <forward_sm+0x78>
 8008e7e:	2d00      	cmp	r5, #0
 8008e80:	d0f0      	beq.n	8008e64 <forward_sm+0xd8>
 8008e82:	e7cb      	b.n	8008e1c <forward_sm+0x90>
 8008e84:	b005      	add	sp, #20
 8008e86:	ecbd 8b04 	vpop	{d8-d9}
 8008e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	deff      	udf	#255	; 0xff
 8008e92:	f04f 0904 	mov.w	r9, #4
 8008e96:	e79e      	b.n	8008dd6 <forward_sm+0x4a>
 8008e98:	2300      	movs	r3, #0
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	deff      	udf	#255	; 0xff
 8008e9e:	68db      	ldr	r3, [r3, #12]
 8008ea0:	deff      	udf	#255	; 0xff
 8008ea2:	bf00      	nop
 8008ea4:	00000000 	.word	0x00000000

08008ea8 <forward_lite_dense_if32of32wf32>:
 8008ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eac:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
 8008eb0:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 8008eb4:	4287      	cmp	r7, r0
 8008eb6:	f240 8106 	bls.w	80090c6 <forward_lite_dense_if32of32wf32+0x21e>
 8008eba:	f1a6 0810 	sub.w	r8, r6, #16
 8008ebe:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8008ec2:	f108 0801 	add.w	r8, r8, #1
 8008ec6:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 8008eca:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8008ece:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 8008ed2:	4605      	mov	r5, r0
 8008ed4:	f006 0a0f 	and.w	sl, r6, #15
 8008ed8:	2e0f      	cmp	r6, #15
 8008eda:	ed9f 7a84 	vldr	s14, [pc, #528]	; 80090ec <forward_lite_dense_if32of32wf32+0x244>
 8008ede:	f240 8101 	bls.w	80090e4 <forward_lite_dense_if32of32wf32+0x23c>
 8008ee2:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 8008ee6:	f102 0440 	add.w	r4, r2, #64	; 0x40
 8008eea:	46b6      	mov	lr, r6
 8008eec:	ed54 5a0f 	vldr	s11, [r4, #-60]	; 0xffffffc4
 8008ef0:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 8008ef4:	ed1c 6a10 	vldr	s12, [ip, #-64]	; 0xffffffc0
 8008ef8:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 8008efc:	ed5c 4a0d 	vldr	s9, [ip, #-52]	; 0xffffffcc
 8008f00:	ed1c 5a0c 	vldr	s10, [ip, #-48]	; 0xffffffd0
 8008f04:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
 8008f08:	ed54 3a0a 	vldr	s7, [r4, #-40]	; 0xffffffd8
 8008f0c:	ed1c 4a09 	vldr	s8, [ip, #-36]	; 0xffffffdc
 8008f10:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
 8008f14:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 8008f18:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 8008f1c:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 8008f20:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008f24:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 8008f28:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008f2c:	f1ae 0e10 	sub.w	lr, lr, #16
 8008f30:	f1be 0f0f 	cmp.w	lr, #15
 8008f34:	ed14 6a0e 	vldr	s12, [r4, #-56]	; 0xffffffc8
 8008f38:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 8008f3c:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008f40:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8008f44:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8008f48:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
 8008f4c:	ed1c 6a1b 	vldr	s12, [ip, #-108]	; 0xffffff94
 8008f50:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8008f54:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
 8008f58:	ed54 4a19 	vldr	s9, [r4, #-100]	; 0xffffff9c
 8008f5c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008f60:	ed1c 5a18 	vldr	s10, [ip, #-96]	; 0xffffffa0
 8008f64:	ed54 5a18 	vldr	s11, [r4, #-96]	; 0xffffffa0
 8008f68:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008f6c:	ed1c 6a17 	vldr	s12, [ip, #-92]	; 0xffffffa4
 8008f70:	ed54 6a17 	vldr	s13, [r4, #-92]	; 0xffffffa4
 8008f74:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008f78:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 8008f7c:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 8008f80:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008f84:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 8008f88:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 8008f8c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008f90:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 8008f94:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 8008f98:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008f9c:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 8008fa0:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 8008fa4:	eee1 7a21 	vfma.f32	s15, s2, s3
 8008fa8:	eee2 7a22 	vfma.f32	s15, s4, s5
 8008fac:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008fb0:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008fb4:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008fb8:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008fbc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008fc0:	d894      	bhi.n	8008eec <forward_lite_dense_if32of32wf32+0x44>
 8008fc2:	eb02 0e0b 	add.w	lr, r2, fp
 8008fc6:	4654      	mov	r4, sl
 8008fc8:	46c4      	mov	ip, r8
 8008fca:	2c00      	cmp	r4, #0
 8008fcc:	d075      	beq.n	80090ba <forward_lite_dense_if32of32wf32+0x212>
 8008fce:	eddc 6a00 	vldr	s13, [ip]
 8008fd2:	edde 7a00 	vldr	s15, [lr]
 8008fd6:	2c01      	cmp	r4, #1
 8008fd8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008fdc:	d06d      	beq.n	80090ba <forward_lite_dense_if32of32wf32+0x212>
 8008fde:	eddc 6a01 	vldr	s13, [ip, #4]
 8008fe2:	edde 7a01 	vldr	s15, [lr, #4]
 8008fe6:	2c02      	cmp	r4, #2
 8008fe8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008fec:	d065      	beq.n	80090ba <forward_lite_dense_if32of32wf32+0x212>
 8008fee:	eddc 6a02 	vldr	s13, [ip, #8]
 8008ff2:	edde 7a02 	vldr	s15, [lr, #8]
 8008ff6:	2c03      	cmp	r4, #3
 8008ff8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008ffc:	d05d      	beq.n	80090ba <forward_lite_dense_if32of32wf32+0x212>
 8008ffe:	eddc 6a03 	vldr	s13, [ip, #12]
 8009002:	edde 7a03 	vldr	s15, [lr, #12]
 8009006:	2c04      	cmp	r4, #4
 8009008:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800900c:	d055      	beq.n	80090ba <forward_lite_dense_if32of32wf32+0x212>
 800900e:	eddc 6a04 	vldr	s13, [ip, #16]
 8009012:	edde 7a04 	vldr	s15, [lr, #16]
 8009016:	2c05      	cmp	r4, #5
 8009018:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800901c:	d04d      	beq.n	80090ba <forward_lite_dense_if32of32wf32+0x212>
 800901e:	eddc 6a05 	vldr	s13, [ip, #20]
 8009022:	edde 7a05 	vldr	s15, [lr, #20]
 8009026:	2c06      	cmp	r4, #6
 8009028:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800902c:	d045      	beq.n	80090ba <forward_lite_dense_if32of32wf32+0x212>
 800902e:	eddc 6a06 	vldr	s13, [ip, #24]
 8009032:	edde 7a06 	vldr	s15, [lr, #24]
 8009036:	2c07      	cmp	r4, #7
 8009038:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800903c:	d03d      	beq.n	80090ba <forward_lite_dense_if32of32wf32+0x212>
 800903e:	eddc 6a07 	vldr	s13, [ip, #28]
 8009042:	edde 7a07 	vldr	s15, [lr, #28]
 8009046:	2c08      	cmp	r4, #8
 8009048:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800904c:	d035      	beq.n	80090ba <forward_lite_dense_if32of32wf32+0x212>
 800904e:	eddc 6a08 	vldr	s13, [ip, #32]
 8009052:	edde 7a08 	vldr	s15, [lr, #32]
 8009056:	2c09      	cmp	r4, #9
 8009058:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800905c:	d02d      	beq.n	80090ba <forward_lite_dense_if32of32wf32+0x212>
 800905e:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 8009062:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 8009066:	2c0a      	cmp	r4, #10
 8009068:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800906c:	d025      	beq.n	80090ba <forward_lite_dense_if32of32wf32+0x212>
 800906e:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 8009072:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 8009076:	2c0b      	cmp	r4, #11
 8009078:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800907c:	d01d      	beq.n	80090ba <forward_lite_dense_if32of32wf32+0x212>
 800907e:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 8009082:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 8009086:	2c0c      	cmp	r4, #12
 8009088:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800908c:	d015      	beq.n	80090ba <forward_lite_dense_if32of32wf32+0x212>
 800908e:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 8009092:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 8009096:	3c0d      	subs	r4, #13
 8009098:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800909c:	d00d      	beq.n	80090ba <forward_lite_dense_if32of32wf32+0x212>
 800909e:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 80090a2:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 80090a6:	2c01      	cmp	r4, #1
 80090a8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80090ac:	d005      	beq.n	80090ba <forward_lite_dense_if32of32wf32+0x212>
 80090ae:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 80090b2:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 80090b6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80090ba:	444a      	add	r2, r9
 80090bc:	eca5 7a01 	vstmia	r5!, {s14}
 80090c0:	42af      	cmp	r7, r5
 80090c2:	f63f af09 	bhi.w	8008ed8 <forward_lite_dense_if32of32wf32+0x30>
 80090c6:	b15b      	cbz	r3, 80090e0 <forward_lite_dense_if32of32wf32+0x238>
 80090c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80090ca:	b14a      	cbz	r2, 80090e0 <forward_lite_dense_if32of32wf32+0x238>
 80090cc:	edd0 7a00 	vldr	s15, [r0]
 80090d0:	ecb3 7a01 	vldmia	r3!, {s14}
 80090d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80090d8:	ece0 7a01 	vstmia	r0!, {s15}
 80090dc:	4287      	cmp	r7, r0
 80090de:	d1f5      	bne.n	80090cc <forward_lite_dense_if32of32wf32+0x224>
 80090e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090e4:	4634      	mov	r4, r6
 80090e6:	4696      	mov	lr, r2
 80090e8:	468c      	mov	ip, r1
 80090ea:	e76e      	b.n	8008fca <forward_lite_dense_if32of32wf32+0x122>
 80090ec:	00000000 	.word	0x00000000

080090f0 <st_int8_copy>:
 80090f0:	4288      	cmp	r0, r1
 80090f2:	d057      	beq.n	80091a4 <st_int8_copy+0xb4>
 80090f4:	2a00      	cmp	r2, #0
 80090f6:	d055      	beq.n	80091a4 <st_int8_copy+0xb4>
 80090f8:	4288      	cmp	r0, r1
 80090fa:	d354      	bcc.n	80091a6 <st_int8_copy+0xb6>
 80090fc:	078b      	lsls	r3, r1, #30
 80090fe:	d102      	bne.n	8009106 <st_int8_copy+0x16>
 8009100:	e009      	b.n	8009116 <st_int8_copy+0x26>
 8009102:	2a00      	cmp	r2, #0
 8009104:	d05c      	beq.n	80091c0 <st_int8_copy+0xd0>
 8009106:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800910a:	f801 3b01 	strb.w	r3, [r1], #1
 800910e:	078b      	lsls	r3, r1, #30
 8009110:	f102 32ff 	add.w	r2, r2, #4294967295
 8009114:	d1f5      	bne.n	8009102 <st_int8_copy+0x12>
 8009116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800911a:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 800911e:	d069      	beq.n	80091f4 <st_int8_copy+0x104>
 8009120:	ea41 0300 	orr.w	r3, r1, r0
 8009124:	075b      	lsls	r3, r3, #29
 8009126:	d14c      	bne.n	80091c2 <st_int8_copy+0xd2>
 8009128:	f10e 33ff 	add.w	r3, lr, #4294967295
 800912c:	2b01      	cmp	r3, #1
 800912e:	d948      	bls.n	80091c2 <st_int8_copy+0xd2>
 8009130:	f100 0310 	add.w	r3, r0, #16
 8009134:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8009138:	f101 0c10 	add.w	ip, r1, #16
 800913c:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 8009140:	ed13 6b04 	vldr	d6, [r3, #-16]
 8009144:	ed13 7b02 	vldr	d7, [r3, #-8]
 8009148:	3310      	adds	r3, #16
 800914a:	4573      	cmp	r3, lr
 800914c:	ed0c 6b04 	vstr	d6, [ip, #-16]
 8009150:	ed0c 7b02 	vstr	d7, [ip, #-8]
 8009154:	f10c 0c10 	add.w	ip, ip, #16
 8009158:	d1f2      	bne.n	8009140 <st_int8_copy+0x50>
 800915a:	f3c2 0381 	ubfx	r3, r2, #2, #2
 800915e:	4421      	add	r1, r4
 8009160:	4420      	add	r0, r4
 8009162:	f002 0203 	and.w	r2, r2, #3
 8009166:	b16b      	cbz	r3, 8009184 <st_int8_copy+0x94>
 8009168:	6804      	ldr	r4, [r0, #0]
 800916a:	600c      	str	r4, [r1, #0]
 800916c:	1e5c      	subs	r4, r3, #1
 800916e:	d005      	beq.n	800917c <st_int8_copy+0x8c>
 8009170:	6845      	ldr	r5, [r0, #4]
 8009172:	604d      	str	r5, [r1, #4]
 8009174:	2c01      	cmp	r4, #1
 8009176:	bf1c      	itt	ne
 8009178:	6884      	ldrne	r4, [r0, #8]
 800917a:	608c      	strne	r4, [r1, #8]
 800917c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8009180:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8009184:	b162      	cbz	r2, 80091a0 <st_int8_copy+0xb0>
 8009186:	f990 3000 	ldrsb.w	r3, [r0]
 800918a:	700b      	strb	r3, [r1, #0]
 800918c:	3a01      	subs	r2, #1
 800918e:	d007      	beq.n	80091a0 <st_int8_copy+0xb0>
 8009190:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8009194:	704b      	strb	r3, [r1, #1]
 8009196:	2a01      	cmp	r2, #1
 8009198:	bf1c      	itt	ne
 800919a:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 800919e:	708b      	strbne	r3, [r1, #2]
 80091a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091a4:	4770      	bx	lr
 80091a6:	1883      	adds	r3, r0, r2
 80091a8:	428b      	cmp	r3, r1
 80091aa:	d9a7      	bls.n	80090fc <st_int8_copy+0xc>
 80091ac:	4283      	cmp	r3, r0
 80091ae:	440a      	add	r2, r1
 80091b0:	d9f8      	bls.n	80091a4 <st_int8_copy+0xb4>
 80091b2:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 80091b6:	f802 1d01 	strb.w	r1, [r2, #-1]!
 80091ba:	4283      	cmp	r3, r0
 80091bc:	d1f9      	bne.n	80091b2 <st_int8_copy+0xc2>
 80091be:	4770      	bx	lr
 80091c0:	4770      	bx	lr
 80091c2:	ea4f 140e 	mov.w	r4, lr, lsl #4
 80091c6:	460b      	mov	r3, r1
 80091c8:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 80091cc:	4684      	mov	ip, r0
 80091ce:	f8dc 7000 	ldr.w	r7, [ip]
 80091d2:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80091d6:	f8dc 5008 	ldr.w	r5, [ip, #8]
 80091da:	f8dc 800c 	ldr.w	r8, [ip, #12]
 80091de:	f8c3 800c 	str.w	r8, [r3, #12]
 80091e2:	601f      	str	r7, [r3, #0]
 80091e4:	605e      	str	r6, [r3, #4]
 80091e6:	609d      	str	r5, [r3, #8]
 80091e8:	3310      	adds	r3, #16
 80091ea:	459e      	cmp	lr, r3
 80091ec:	f10c 0c10 	add.w	ip, ip, #16
 80091f0:	d1ed      	bne.n	80091ce <st_int8_copy+0xde>
 80091f2:	e7b2      	b.n	800915a <st_int8_copy+0x6a>
 80091f4:	0893      	lsrs	r3, r2, #2
 80091f6:	f002 0203 	and.w	r2, r2, #3
 80091fa:	e7b4      	b.n	8009166 <st_int8_copy+0x76>

080091fc <ai_array_to_buffer_fmt>:
 80091fc:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8009200:	2b02      	cmp	r3, #2
 8009202:	d050      	beq.n	80092a6 <ai_array_to_buffer_fmt+0xaa>
 8009204:	4b2a      	ldr	r3, [pc, #168]	; (80092b0 <ai_array_to_buffer_fmt+0xb4>)
 8009206:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 800920a:	429a      	cmp	r2, r3
 800920c:	d00b      	beq.n	8009226 <ai_array_to_buffer_fmt+0x2a>
 800920e:	dc1c      	bgt.n	800924a <ai_array_to_buffer_fmt+0x4e>
 8009210:	4b28      	ldr	r3, [pc, #160]	; (80092b4 <ai_array_to_buffer_fmt+0xb8>)
 8009212:	429a      	cmp	r2, r3
 8009214:	d007      	beq.n	8009226 <ai_array_to_buffer_fmt+0x2a>
 8009216:	dd0b      	ble.n	8009230 <ai_array_to_buffer_fmt+0x34>
 8009218:	4b27      	ldr	r3, [pc, #156]	; (80092b8 <ai_array_to_buffer_fmt+0xbc>)
 800921a:	429a      	cmp	r2, r3
 800921c:	d003      	beq.n	8009226 <ai_array_to_buffer_fmt+0x2a>
 800921e:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8009222:	429a      	cmp	r2, r3
 8009224:	d131      	bne.n	800928a <ai_array_to_buffer_fmt+0x8e>
 8009226:	4613      	mov	r3, r2
 8009228:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800922c:	4318      	orrs	r0, r3
 800922e:	4770      	bx	lr
 8009230:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8009234:	429a      	cmp	r2, r3
 8009236:	d0f6      	beq.n	8009226 <ai_array_to_buffer_fmt+0x2a>
 8009238:	dd2c      	ble.n	8009294 <ai_array_to_buffer_fmt+0x98>
 800923a:	4b20      	ldr	r3, [pc, #128]	; (80092bc <ai_array_to_buffer_fmt+0xc0>)
 800923c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8009240:	429a      	cmp	r2, r3
 8009242:	bf18      	it	ne
 8009244:	2340      	movne	r3, #64	; 0x40
 8009246:	4318      	orrs	r0, r3
 8009248:	4770      	bx	lr
 800924a:	4b1d      	ldr	r3, [pc, #116]	; (80092c0 <ai_array_to_buffer_fmt+0xc4>)
 800924c:	429a      	cmp	r2, r3
 800924e:	d0ea      	beq.n	8009226 <ai_array_to_buffer_fmt+0x2a>
 8009250:	dd0e      	ble.n	8009270 <ai_array_to_buffer_fmt+0x74>
 8009252:	4b1c      	ldr	r3, [pc, #112]	; (80092c4 <ai_array_to_buffer_fmt+0xc8>)
 8009254:	429a      	cmp	r2, r3
 8009256:	d0e6      	beq.n	8009226 <ai_array_to_buffer_fmt+0x2a>
 8009258:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 800925c:	429a      	cmp	r2, r3
 800925e:	d0e2      	beq.n	8009226 <ai_array_to_buffer_fmt+0x2a>
 8009260:	4b19      	ldr	r3, [pc, #100]	; (80092c8 <ai_array_to_buffer_fmt+0xcc>)
 8009262:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8009266:	429a      	cmp	r2, r3
 8009268:	bf18      	it	ne
 800926a:	2340      	movne	r3, #64	; 0x40
 800926c:	4318      	orrs	r0, r3
 800926e:	4770      	bx	lr
 8009270:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8009274:	429a      	cmp	r2, r3
 8009276:	d0d6      	beq.n	8009226 <ai_array_to_buffer_fmt+0x2a>
 8009278:	3307      	adds	r3, #7
 800927a:	429a      	cmp	r2, r3
 800927c:	d0d3      	beq.n	8009226 <ai_array_to_buffer_fmt+0x2a>
 800927e:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 8009282:	429a      	cmp	r2, r3
 8009284:	bf18      	it	ne
 8009286:	2340      	movne	r3, #64	; 0x40
 8009288:	e7ce      	b.n	8009228 <ai_array_to_buffer_fmt+0x2c>
 800928a:	4b10      	ldr	r3, [pc, #64]	; (80092cc <ai_array_to_buffer_fmt+0xd0>)
 800928c:	429a      	cmp	r2, r3
 800928e:	bf18      	it	ne
 8009290:	2340      	movne	r3, #64	; 0x40
 8009292:	e7c9      	b.n	8009228 <ai_array_to_buffer_fmt+0x2c>
 8009294:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8009298:	429a      	cmp	r2, r3
 800929a:	d0c4      	beq.n	8009226 <ai_array_to_buffer_fmt+0x2a>
 800929c:	3380      	adds	r3, #128	; 0x80
 800929e:	429a      	cmp	r2, r3
 80092a0:	bf18      	it	ne
 80092a2:	2340      	movne	r3, #64	; 0x40
 80092a4:	e7c0      	b.n	8009228 <ai_array_to_buffer_fmt+0x2c>
 80092a6:	4b0a      	ldr	r3, [pc, #40]	; (80092d0 <ai_array_to_buffer_fmt+0xd4>)
 80092a8:	4003      	ands	r3, r0
 80092aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80092ae:	e7bb      	b.n	8009228 <ai_array_to_buffer_fmt+0x2c>
 80092b0:	00840040 	.word	0x00840040
 80092b4:	00040840 	.word	0x00040840
 80092b8:	00041040 	.word	0x00041040
 80092bc:	00040447 	.word	0x00040447
 80092c0:	00840840 	.word	0x00840840
 80092c4:	00841040 	.word	0x00841040
 80092c8:	0084084f 	.word	0x0084084f
 80092cc:	0004084f 	.word	0x0004084f
 80092d0:	00803fff 	.word	0x00803fff

080092d4 <ai_array_get_byte_size>:
 80092d4:	b319      	cbz	r1, 800931e <ai_array_get_byte_size+0x4a>
 80092d6:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80092da:	fb03 f101 	mul.w	r1, r3, r1
 80092de:	3107      	adds	r1, #7
 80092e0:	f3c0 4243 	ubfx	r2, r0, #17, #4
 80092e4:	f021 0307 	bic.w	r3, r1, #7
 80092e8:	2a04      	cmp	r2, #4
 80092ea:	f3c0 5141 	ubfx	r1, r0, #21, #2
 80092ee:	fa23 f101 	lsr.w	r1, r3, r1
 80092f2:	ea4f 10e0 	mov.w	r0, r0, asr #7
 80092f6:	d00b      	beq.n	8009310 <ai_array_get_byte_size+0x3c>
 80092f8:	2a08      	cmp	r2, #8
 80092fa:	d002      	beq.n	8009302 <ai_array_get_byte_size+0x2e>
 80092fc:	3107      	adds	r1, #7
 80092fe:	08c8      	lsrs	r0, r1, #3
 8009300:	4770      	bx	lr
 8009302:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8009306:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800930a:	3107      	adds	r1, #7
 800930c:	08c8      	lsrs	r0, r1, #3
 800930e:	4770      	bx	lr
 8009310:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8009314:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 8009318:	3107      	adds	r1, #7
 800931a:	08c8      	lsrs	r0, r1, #3
 800931c:	4770      	bx	lr
 800931e:	4608      	mov	r0, r1
 8009320:	4770      	bx	lr
 8009322:	bf00      	nop

08009324 <ai_array_get_data_byte_size>:
 8009324:	b169      	cbz	r1, 8009342 <ai_array_get_data_byte_size+0x1e>
 8009326:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 800932a:	fb02 f101 	mul.w	r1, r2, r1
 800932e:	1dcb      	adds	r3, r1, #7
 8009330:	f023 0307 	bic.w	r3, r3, #7
 8009334:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8009338:	fa23 f000 	lsr.w	r0, r3, r0
 800933c:	3007      	adds	r0, #7
 800933e:	08c0      	lsrs	r0, r0, #3
 8009340:	4770      	bx	lr
 8009342:	4608      	mov	r0, r1
 8009344:	4770      	bx	lr
 8009346:	bf00      	nop

08009348 <ai_version_get>:
 8009348:	0212      	lsls	r2, r2, #8
 800934a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800934e:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8009352:	4770      	bx	lr

08009354 <get_tensor_byte_size>:
 8009354:	b410      	push	{r4}
 8009356:	6983      	ldr	r3, [r0, #24]
 8009358:	68c4      	ldr	r4, [r0, #12]
 800935a:	6941      	ldr	r1, [r0, #20]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	68e0      	ldr	r0, [r4, #12]
 8009360:	4a07      	ldr	r2, [pc, #28]	; (8009380 <get_tensor_byte_size+0x2c>)
 8009362:	68c9      	ldr	r1, [r1, #12]
 8009364:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009368:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800936c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009370:	fb01 f000 	mul.w	r0, r1, r0
 8009374:	4293      	cmp	r3, r2
 8009376:	bf04      	itt	eq
 8009378:	3007      	addeq	r0, #7
 800937a:	08c0      	lsreq	r0, r0, #3
 800937c:	4770      	bx	lr
 800937e:	bf00      	nop
 8009380:	000400c0 	.word	0x000400c0

08009384 <sbrk_aligned>:
 8009384:	b570      	push	{r4, r5, r6, lr}
 8009386:	4e0e      	ldr	r6, [pc, #56]	; (80093c0 <sbrk_aligned+0x3c>)
 8009388:	460c      	mov	r4, r1
 800938a:	6831      	ldr	r1, [r6, #0]
 800938c:	4605      	mov	r5, r0
 800938e:	b911      	cbnz	r1, 8009396 <sbrk_aligned+0x12>
 8009390:	f000 fae8 	bl	8009964 <_sbrk_r>
 8009394:	6030      	str	r0, [r6, #0]
 8009396:	4621      	mov	r1, r4
 8009398:	4628      	mov	r0, r5
 800939a:	f000 fae3 	bl	8009964 <_sbrk_r>
 800939e:	1c43      	adds	r3, r0, #1
 80093a0:	d00a      	beq.n	80093b8 <sbrk_aligned+0x34>
 80093a2:	1cc4      	adds	r4, r0, #3
 80093a4:	f024 0403 	bic.w	r4, r4, #3
 80093a8:	42a0      	cmp	r0, r4
 80093aa:	d007      	beq.n	80093bc <sbrk_aligned+0x38>
 80093ac:	1a21      	subs	r1, r4, r0
 80093ae:	4628      	mov	r0, r5
 80093b0:	f000 fad8 	bl	8009964 <_sbrk_r>
 80093b4:	3001      	adds	r0, #1
 80093b6:	d101      	bne.n	80093bc <sbrk_aligned+0x38>
 80093b8:	f04f 34ff 	mov.w	r4, #4294967295
 80093bc:	4620      	mov	r0, r4
 80093be:	bd70      	pop	{r4, r5, r6, pc}
 80093c0:	20001040 	.word	0x20001040

080093c4 <_malloc_r>:
 80093c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093c8:	1ccd      	adds	r5, r1, #3
 80093ca:	f025 0503 	bic.w	r5, r5, #3
 80093ce:	3508      	adds	r5, #8
 80093d0:	2d0c      	cmp	r5, #12
 80093d2:	bf38      	it	cc
 80093d4:	250c      	movcc	r5, #12
 80093d6:	2d00      	cmp	r5, #0
 80093d8:	4607      	mov	r7, r0
 80093da:	db01      	blt.n	80093e0 <_malloc_r+0x1c>
 80093dc:	42a9      	cmp	r1, r5
 80093de:	d905      	bls.n	80093ec <_malloc_r+0x28>
 80093e0:	230c      	movs	r3, #12
 80093e2:	603b      	str	r3, [r7, #0]
 80093e4:	2600      	movs	r6, #0
 80093e6:	4630      	mov	r0, r6
 80093e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80094c0 <_malloc_r+0xfc>
 80093f0:	f000 f868 	bl	80094c4 <__malloc_lock>
 80093f4:	f8d8 3000 	ldr.w	r3, [r8]
 80093f8:	461c      	mov	r4, r3
 80093fa:	bb5c      	cbnz	r4, 8009454 <_malloc_r+0x90>
 80093fc:	4629      	mov	r1, r5
 80093fe:	4638      	mov	r0, r7
 8009400:	f7ff ffc0 	bl	8009384 <sbrk_aligned>
 8009404:	1c43      	adds	r3, r0, #1
 8009406:	4604      	mov	r4, r0
 8009408:	d155      	bne.n	80094b6 <_malloc_r+0xf2>
 800940a:	f8d8 4000 	ldr.w	r4, [r8]
 800940e:	4626      	mov	r6, r4
 8009410:	2e00      	cmp	r6, #0
 8009412:	d145      	bne.n	80094a0 <_malloc_r+0xdc>
 8009414:	2c00      	cmp	r4, #0
 8009416:	d048      	beq.n	80094aa <_malloc_r+0xe6>
 8009418:	6823      	ldr	r3, [r4, #0]
 800941a:	4631      	mov	r1, r6
 800941c:	4638      	mov	r0, r7
 800941e:	eb04 0903 	add.w	r9, r4, r3
 8009422:	f000 fa9f 	bl	8009964 <_sbrk_r>
 8009426:	4581      	cmp	r9, r0
 8009428:	d13f      	bne.n	80094aa <_malloc_r+0xe6>
 800942a:	6821      	ldr	r1, [r4, #0]
 800942c:	1a6d      	subs	r5, r5, r1
 800942e:	4629      	mov	r1, r5
 8009430:	4638      	mov	r0, r7
 8009432:	f7ff ffa7 	bl	8009384 <sbrk_aligned>
 8009436:	3001      	adds	r0, #1
 8009438:	d037      	beq.n	80094aa <_malloc_r+0xe6>
 800943a:	6823      	ldr	r3, [r4, #0]
 800943c:	442b      	add	r3, r5
 800943e:	6023      	str	r3, [r4, #0]
 8009440:	f8d8 3000 	ldr.w	r3, [r8]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d038      	beq.n	80094ba <_malloc_r+0xf6>
 8009448:	685a      	ldr	r2, [r3, #4]
 800944a:	42a2      	cmp	r2, r4
 800944c:	d12b      	bne.n	80094a6 <_malloc_r+0xe2>
 800944e:	2200      	movs	r2, #0
 8009450:	605a      	str	r2, [r3, #4]
 8009452:	e00f      	b.n	8009474 <_malloc_r+0xb0>
 8009454:	6822      	ldr	r2, [r4, #0]
 8009456:	1b52      	subs	r2, r2, r5
 8009458:	d41f      	bmi.n	800949a <_malloc_r+0xd6>
 800945a:	2a0b      	cmp	r2, #11
 800945c:	d917      	bls.n	800948e <_malloc_r+0xca>
 800945e:	1961      	adds	r1, r4, r5
 8009460:	42a3      	cmp	r3, r4
 8009462:	6025      	str	r5, [r4, #0]
 8009464:	bf18      	it	ne
 8009466:	6059      	strne	r1, [r3, #4]
 8009468:	6863      	ldr	r3, [r4, #4]
 800946a:	bf08      	it	eq
 800946c:	f8c8 1000 	streq.w	r1, [r8]
 8009470:	5162      	str	r2, [r4, r5]
 8009472:	604b      	str	r3, [r1, #4]
 8009474:	4638      	mov	r0, r7
 8009476:	f104 060b 	add.w	r6, r4, #11
 800947a:	f000 f829 	bl	80094d0 <__malloc_unlock>
 800947e:	f026 0607 	bic.w	r6, r6, #7
 8009482:	1d23      	adds	r3, r4, #4
 8009484:	1af2      	subs	r2, r6, r3
 8009486:	d0ae      	beq.n	80093e6 <_malloc_r+0x22>
 8009488:	1b9b      	subs	r3, r3, r6
 800948a:	50a3      	str	r3, [r4, r2]
 800948c:	e7ab      	b.n	80093e6 <_malloc_r+0x22>
 800948e:	42a3      	cmp	r3, r4
 8009490:	6862      	ldr	r2, [r4, #4]
 8009492:	d1dd      	bne.n	8009450 <_malloc_r+0x8c>
 8009494:	f8c8 2000 	str.w	r2, [r8]
 8009498:	e7ec      	b.n	8009474 <_malloc_r+0xb0>
 800949a:	4623      	mov	r3, r4
 800949c:	6864      	ldr	r4, [r4, #4]
 800949e:	e7ac      	b.n	80093fa <_malloc_r+0x36>
 80094a0:	4634      	mov	r4, r6
 80094a2:	6876      	ldr	r6, [r6, #4]
 80094a4:	e7b4      	b.n	8009410 <_malloc_r+0x4c>
 80094a6:	4613      	mov	r3, r2
 80094a8:	e7cc      	b.n	8009444 <_malloc_r+0x80>
 80094aa:	230c      	movs	r3, #12
 80094ac:	603b      	str	r3, [r7, #0]
 80094ae:	4638      	mov	r0, r7
 80094b0:	f000 f80e 	bl	80094d0 <__malloc_unlock>
 80094b4:	e797      	b.n	80093e6 <_malloc_r+0x22>
 80094b6:	6025      	str	r5, [r4, #0]
 80094b8:	e7dc      	b.n	8009474 <_malloc_r+0xb0>
 80094ba:	605b      	str	r3, [r3, #4]
 80094bc:	deff      	udf	#255	; 0xff
 80094be:	bf00      	nop
 80094c0:	2000103c 	.word	0x2000103c

080094c4 <__malloc_lock>:
 80094c4:	4801      	ldr	r0, [pc, #4]	; (80094cc <__malloc_lock+0x8>)
 80094c6:	f000 ba9a 	b.w	80099fe <__retarget_lock_acquire_recursive>
 80094ca:	bf00      	nop
 80094cc:	20001184 	.word	0x20001184

080094d0 <__malloc_unlock>:
 80094d0:	4801      	ldr	r0, [pc, #4]	; (80094d8 <__malloc_unlock+0x8>)
 80094d2:	f000 ba95 	b.w	8009a00 <__retarget_lock_release_recursive>
 80094d6:	bf00      	nop
 80094d8:	20001184 	.word	0x20001184

080094dc <std>:
 80094dc:	2300      	movs	r3, #0
 80094de:	b510      	push	{r4, lr}
 80094e0:	4604      	mov	r4, r0
 80094e2:	e9c0 3300 	strd	r3, r3, [r0]
 80094e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80094ea:	6083      	str	r3, [r0, #8]
 80094ec:	8181      	strh	r1, [r0, #12]
 80094ee:	6643      	str	r3, [r0, #100]	; 0x64
 80094f0:	81c2      	strh	r2, [r0, #14]
 80094f2:	6183      	str	r3, [r0, #24]
 80094f4:	4619      	mov	r1, r3
 80094f6:	2208      	movs	r2, #8
 80094f8:	305c      	adds	r0, #92	; 0x5c
 80094fa:	f000 f9f7 	bl	80098ec <memset>
 80094fe:	4b0d      	ldr	r3, [pc, #52]	; (8009534 <std+0x58>)
 8009500:	6263      	str	r3, [r4, #36]	; 0x24
 8009502:	4b0d      	ldr	r3, [pc, #52]	; (8009538 <std+0x5c>)
 8009504:	62a3      	str	r3, [r4, #40]	; 0x28
 8009506:	4b0d      	ldr	r3, [pc, #52]	; (800953c <std+0x60>)
 8009508:	62e3      	str	r3, [r4, #44]	; 0x2c
 800950a:	4b0d      	ldr	r3, [pc, #52]	; (8009540 <std+0x64>)
 800950c:	6323      	str	r3, [r4, #48]	; 0x30
 800950e:	4b0d      	ldr	r3, [pc, #52]	; (8009544 <std+0x68>)
 8009510:	6224      	str	r4, [r4, #32]
 8009512:	429c      	cmp	r4, r3
 8009514:	d006      	beq.n	8009524 <std+0x48>
 8009516:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800951a:	4294      	cmp	r4, r2
 800951c:	d002      	beq.n	8009524 <std+0x48>
 800951e:	33d0      	adds	r3, #208	; 0xd0
 8009520:	429c      	cmp	r4, r3
 8009522:	d105      	bne.n	8009530 <std+0x54>
 8009524:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800952c:	f000 ba66 	b.w	80099fc <__retarget_lock_init_recursive>
 8009530:	bd10      	pop	{r4, pc}
 8009532:	bf00      	nop
 8009534:	0800973d 	.word	0x0800973d
 8009538:	0800975f 	.word	0x0800975f
 800953c:	08009797 	.word	0x08009797
 8009540:	080097bb 	.word	0x080097bb
 8009544:	20001044 	.word	0x20001044

08009548 <stdio_exit_handler>:
 8009548:	4a02      	ldr	r2, [pc, #8]	; (8009554 <stdio_exit_handler+0xc>)
 800954a:	4903      	ldr	r1, [pc, #12]	; (8009558 <stdio_exit_handler+0x10>)
 800954c:	4803      	ldr	r0, [pc, #12]	; (800955c <stdio_exit_handler+0x14>)
 800954e:	f000 b869 	b.w	8009624 <_fwalk_sglue>
 8009552:	bf00      	nop
 8009554:	20000920 	.word	0x20000920
 8009558:	0800a151 	.word	0x0800a151
 800955c:	2000092c 	.word	0x2000092c

08009560 <cleanup_stdio>:
 8009560:	6841      	ldr	r1, [r0, #4]
 8009562:	4b0c      	ldr	r3, [pc, #48]	; (8009594 <cleanup_stdio+0x34>)
 8009564:	4299      	cmp	r1, r3
 8009566:	b510      	push	{r4, lr}
 8009568:	4604      	mov	r4, r0
 800956a:	d001      	beq.n	8009570 <cleanup_stdio+0x10>
 800956c:	f000 fdf0 	bl	800a150 <_fflush_r>
 8009570:	68a1      	ldr	r1, [r4, #8]
 8009572:	4b09      	ldr	r3, [pc, #36]	; (8009598 <cleanup_stdio+0x38>)
 8009574:	4299      	cmp	r1, r3
 8009576:	d002      	beq.n	800957e <cleanup_stdio+0x1e>
 8009578:	4620      	mov	r0, r4
 800957a:	f000 fde9 	bl	800a150 <_fflush_r>
 800957e:	68e1      	ldr	r1, [r4, #12]
 8009580:	4b06      	ldr	r3, [pc, #24]	; (800959c <cleanup_stdio+0x3c>)
 8009582:	4299      	cmp	r1, r3
 8009584:	d004      	beq.n	8009590 <cleanup_stdio+0x30>
 8009586:	4620      	mov	r0, r4
 8009588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800958c:	f000 bde0 	b.w	800a150 <_fflush_r>
 8009590:	bd10      	pop	{r4, pc}
 8009592:	bf00      	nop
 8009594:	20001044 	.word	0x20001044
 8009598:	200010ac 	.word	0x200010ac
 800959c:	20001114 	.word	0x20001114

080095a0 <global_stdio_init.part.0>:
 80095a0:	b510      	push	{r4, lr}
 80095a2:	4b0b      	ldr	r3, [pc, #44]	; (80095d0 <global_stdio_init.part.0+0x30>)
 80095a4:	4c0b      	ldr	r4, [pc, #44]	; (80095d4 <global_stdio_init.part.0+0x34>)
 80095a6:	4a0c      	ldr	r2, [pc, #48]	; (80095d8 <global_stdio_init.part.0+0x38>)
 80095a8:	601a      	str	r2, [r3, #0]
 80095aa:	4620      	mov	r0, r4
 80095ac:	2200      	movs	r2, #0
 80095ae:	2104      	movs	r1, #4
 80095b0:	f7ff ff94 	bl	80094dc <std>
 80095b4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80095b8:	2201      	movs	r2, #1
 80095ba:	2109      	movs	r1, #9
 80095bc:	f7ff ff8e 	bl	80094dc <std>
 80095c0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80095c4:	2202      	movs	r2, #2
 80095c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095ca:	2112      	movs	r1, #18
 80095cc:	f7ff bf86 	b.w	80094dc <std>
 80095d0:	2000117c 	.word	0x2000117c
 80095d4:	20001044 	.word	0x20001044
 80095d8:	08009549 	.word	0x08009549

080095dc <__sfp_lock_acquire>:
 80095dc:	4801      	ldr	r0, [pc, #4]	; (80095e4 <__sfp_lock_acquire+0x8>)
 80095de:	f000 ba0e 	b.w	80099fe <__retarget_lock_acquire_recursive>
 80095e2:	bf00      	nop
 80095e4:	20001185 	.word	0x20001185

080095e8 <__sfp_lock_release>:
 80095e8:	4801      	ldr	r0, [pc, #4]	; (80095f0 <__sfp_lock_release+0x8>)
 80095ea:	f000 ba09 	b.w	8009a00 <__retarget_lock_release_recursive>
 80095ee:	bf00      	nop
 80095f0:	20001185 	.word	0x20001185

080095f4 <__sinit>:
 80095f4:	b510      	push	{r4, lr}
 80095f6:	4604      	mov	r4, r0
 80095f8:	f7ff fff0 	bl	80095dc <__sfp_lock_acquire>
 80095fc:	6a23      	ldr	r3, [r4, #32]
 80095fe:	b11b      	cbz	r3, 8009608 <__sinit+0x14>
 8009600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009604:	f7ff bff0 	b.w	80095e8 <__sfp_lock_release>
 8009608:	4b04      	ldr	r3, [pc, #16]	; (800961c <__sinit+0x28>)
 800960a:	6223      	str	r3, [r4, #32]
 800960c:	4b04      	ldr	r3, [pc, #16]	; (8009620 <__sinit+0x2c>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d1f5      	bne.n	8009600 <__sinit+0xc>
 8009614:	f7ff ffc4 	bl	80095a0 <global_stdio_init.part.0>
 8009618:	e7f2      	b.n	8009600 <__sinit+0xc>
 800961a:	bf00      	nop
 800961c:	08009561 	.word	0x08009561
 8009620:	2000117c 	.word	0x2000117c

08009624 <_fwalk_sglue>:
 8009624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009628:	4607      	mov	r7, r0
 800962a:	4688      	mov	r8, r1
 800962c:	4614      	mov	r4, r2
 800962e:	2600      	movs	r6, #0
 8009630:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009634:	f1b9 0901 	subs.w	r9, r9, #1
 8009638:	d505      	bpl.n	8009646 <_fwalk_sglue+0x22>
 800963a:	6824      	ldr	r4, [r4, #0]
 800963c:	2c00      	cmp	r4, #0
 800963e:	d1f7      	bne.n	8009630 <_fwalk_sglue+0xc>
 8009640:	4630      	mov	r0, r6
 8009642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009646:	89ab      	ldrh	r3, [r5, #12]
 8009648:	2b01      	cmp	r3, #1
 800964a:	d907      	bls.n	800965c <_fwalk_sglue+0x38>
 800964c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009650:	3301      	adds	r3, #1
 8009652:	d003      	beq.n	800965c <_fwalk_sglue+0x38>
 8009654:	4629      	mov	r1, r5
 8009656:	4638      	mov	r0, r7
 8009658:	47c0      	blx	r8
 800965a:	4306      	orrs	r6, r0
 800965c:	3568      	adds	r5, #104	; 0x68
 800965e:	e7e9      	b.n	8009634 <_fwalk_sglue+0x10>

08009660 <iprintf>:
 8009660:	b40f      	push	{r0, r1, r2, r3}
 8009662:	b507      	push	{r0, r1, r2, lr}
 8009664:	4906      	ldr	r1, [pc, #24]	; (8009680 <iprintf+0x20>)
 8009666:	ab04      	add	r3, sp, #16
 8009668:	6808      	ldr	r0, [r1, #0]
 800966a:	f853 2b04 	ldr.w	r2, [r3], #4
 800966e:	6881      	ldr	r1, [r0, #8]
 8009670:	9301      	str	r3, [sp, #4]
 8009672:	f000 fa3d 	bl	8009af0 <_vfiprintf_r>
 8009676:	b003      	add	sp, #12
 8009678:	f85d eb04 	ldr.w	lr, [sp], #4
 800967c:	b004      	add	sp, #16
 800967e:	4770      	bx	lr
 8009680:	20000978 	.word	0x20000978

08009684 <_puts_r>:
 8009684:	6a03      	ldr	r3, [r0, #32]
 8009686:	b570      	push	{r4, r5, r6, lr}
 8009688:	6884      	ldr	r4, [r0, #8]
 800968a:	4605      	mov	r5, r0
 800968c:	460e      	mov	r6, r1
 800968e:	b90b      	cbnz	r3, 8009694 <_puts_r+0x10>
 8009690:	f7ff ffb0 	bl	80095f4 <__sinit>
 8009694:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009696:	07db      	lsls	r3, r3, #31
 8009698:	d405      	bmi.n	80096a6 <_puts_r+0x22>
 800969a:	89a3      	ldrh	r3, [r4, #12]
 800969c:	0598      	lsls	r0, r3, #22
 800969e:	d402      	bmi.n	80096a6 <_puts_r+0x22>
 80096a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096a2:	f000 f9ac 	bl	80099fe <__retarget_lock_acquire_recursive>
 80096a6:	89a3      	ldrh	r3, [r4, #12]
 80096a8:	0719      	lsls	r1, r3, #28
 80096aa:	d513      	bpl.n	80096d4 <_puts_r+0x50>
 80096ac:	6923      	ldr	r3, [r4, #16]
 80096ae:	b18b      	cbz	r3, 80096d4 <_puts_r+0x50>
 80096b0:	3e01      	subs	r6, #1
 80096b2:	68a3      	ldr	r3, [r4, #8]
 80096b4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80096b8:	3b01      	subs	r3, #1
 80096ba:	60a3      	str	r3, [r4, #8]
 80096bc:	b9e9      	cbnz	r1, 80096fa <_puts_r+0x76>
 80096be:	2b00      	cmp	r3, #0
 80096c0:	da2e      	bge.n	8009720 <_puts_r+0x9c>
 80096c2:	4622      	mov	r2, r4
 80096c4:	210a      	movs	r1, #10
 80096c6:	4628      	mov	r0, r5
 80096c8:	f000 f87b 	bl	80097c2 <__swbuf_r>
 80096cc:	3001      	adds	r0, #1
 80096ce:	d007      	beq.n	80096e0 <_puts_r+0x5c>
 80096d0:	250a      	movs	r5, #10
 80096d2:	e007      	b.n	80096e4 <_puts_r+0x60>
 80096d4:	4621      	mov	r1, r4
 80096d6:	4628      	mov	r0, r5
 80096d8:	f000 f8b0 	bl	800983c <__swsetup_r>
 80096dc:	2800      	cmp	r0, #0
 80096de:	d0e7      	beq.n	80096b0 <_puts_r+0x2c>
 80096e0:	f04f 35ff 	mov.w	r5, #4294967295
 80096e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80096e6:	07da      	lsls	r2, r3, #31
 80096e8:	d405      	bmi.n	80096f6 <_puts_r+0x72>
 80096ea:	89a3      	ldrh	r3, [r4, #12]
 80096ec:	059b      	lsls	r3, r3, #22
 80096ee:	d402      	bmi.n	80096f6 <_puts_r+0x72>
 80096f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096f2:	f000 f985 	bl	8009a00 <__retarget_lock_release_recursive>
 80096f6:	4628      	mov	r0, r5
 80096f8:	bd70      	pop	{r4, r5, r6, pc}
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	da04      	bge.n	8009708 <_puts_r+0x84>
 80096fe:	69a2      	ldr	r2, [r4, #24]
 8009700:	429a      	cmp	r2, r3
 8009702:	dc06      	bgt.n	8009712 <_puts_r+0x8e>
 8009704:	290a      	cmp	r1, #10
 8009706:	d004      	beq.n	8009712 <_puts_r+0x8e>
 8009708:	6823      	ldr	r3, [r4, #0]
 800970a:	1c5a      	adds	r2, r3, #1
 800970c:	6022      	str	r2, [r4, #0]
 800970e:	7019      	strb	r1, [r3, #0]
 8009710:	e7cf      	b.n	80096b2 <_puts_r+0x2e>
 8009712:	4622      	mov	r2, r4
 8009714:	4628      	mov	r0, r5
 8009716:	f000 f854 	bl	80097c2 <__swbuf_r>
 800971a:	3001      	adds	r0, #1
 800971c:	d1c9      	bne.n	80096b2 <_puts_r+0x2e>
 800971e:	e7df      	b.n	80096e0 <_puts_r+0x5c>
 8009720:	6823      	ldr	r3, [r4, #0]
 8009722:	250a      	movs	r5, #10
 8009724:	1c5a      	adds	r2, r3, #1
 8009726:	6022      	str	r2, [r4, #0]
 8009728:	701d      	strb	r5, [r3, #0]
 800972a:	e7db      	b.n	80096e4 <_puts_r+0x60>

0800972c <puts>:
 800972c:	4b02      	ldr	r3, [pc, #8]	; (8009738 <puts+0xc>)
 800972e:	4601      	mov	r1, r0
 8009730:	6818      	ldr	r0, [r3, #0]
 8009732:	f7ff bfa7 	b.w	8009684 <_puts_r>
 8009736:	bf00      	nop
 8009738:	20000978 	.word	0x20000978

0800973c <__sread>:
 800973c:	b510      	push	{r4, lr}
 800973e:	460c      	mov	r4, r1
 8009740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009744:	f000 f8fc 	bl	8009940 <_read_r>
 8009748:	2800      	cmp	r0, #0
 800974a:	bfab      	itete	ge
 800974c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800974e:	89a3      	ldrhlt	r3, [r4, #12]
 8009750:	181b      	addge	r3, r3, r0
 8009752:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009756:	bfac      	ite	ge
 8009758:	6563      	strge	r3, [r4, #84]	; 0x54
 800975a:	81a3      	strhlt	r3, [r4, #12]
 800975c:	bd10      	pop	{r4, pc}

0800975e <__swrite>:
 800975e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009762:	461f      	mov	r7, r3
 8009764:	898b      	ldrh	r3, [r1, #12]
 8009766:	05db      	lsls	r3, r3, #23
 8009768:	4605      	mov	r5, r0
 800976a:	460c      	mov	r4, r1
 800976c:	4616      	mov	r6, r2
 800976e:	d505      	bpl.n	800977c <__swrite+0x1e>
 8009770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009774:	2302      	movs	r3, #2
 8009776:	2200      	movs	r2, #0
 8009778:	f000 f8d0 	bl	800991c <_lseek_r>
 800977c:	89a3      	ldrh	r3, [r4, #12]
 800977e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009782:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009786:	81a3      	strh	r3, [r4, #12]
 8009788:	4632      	mov	r2, r6
 800978a:	463b      	mov	r3, r7
 800978c:	4628      	mov	r0, r5
 800978e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009792:	f000 b8f7 	b.w	8009984 <_write_r>

08009796 <__sseek>:
 8009796:	b510      	push	{r4, lr}
 8009798:	460c      	mov	r4, r1
 800979a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800979e:	f000 f8bd 	bl	800991c <_lseek_r>
 80097a2:	1c43      	adds	r3, r0, #1
 80097a4:	89a3      	ldrh	r3, [r4, #12]
 80097a6:	bf15      	itete	ne
 80097a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80097aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80097ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80097b2:	81a3      	strheq	r3, [r4, #12]
 80097b4:	bf18      	it	ne
 80097b6:	81a3      	strhne	r3, [r4, #12]
 80097b8:	bd10      	pop	{r4, pc}

080097ba <__sclose>:
 80097ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097be:	f000 b89d 	b.w	80098fc <_close_r>

080097c2 <__swbuf_r>:
 80097c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097c4:	460e      	mov	r6, r1
 80097c6:	4614      	mov	r4, r2
 80097c8:	4605      	mov	r5, r0
 80097ca:	b118      	cbz	r0, 80097d4 <__swbuf_r+0x12>
 80097cc:	6a03      	ldr	r3, [r0, #32]
 80097ce:	b90b      	cbnz	r3, 80097d4 <__swbuf_r+0x12>
 80097d0:	f7ff ff10 	bl	80095f4 <__sinit>
 80097d4:	69a3      	ldr	r3, [r4, #24]
 80097d6:	60a3      	str	r3, [r4, #8]
 80097d8:	89a3      	ldrh	r3, [r4, #12]
 80097da:	071a      	lsls	r2, r3, #28
 80097dc:	d525      	bpl.n	800982a <__swbuf_r+0x68>
 80097de:	6923      	ldr	r3, [r4, #16]
 80097e0:	b31b      	cbz	r3, 800982a <__swbuf_r+0x68>
 80097e2:	6823      	ldr	r3, [r4, #0]
 80097e4:	6922      	ldr	r2, [r4, #16]
 80097e6:	1a98      	subs	r0, r3, r2
 80097e8:	6963      	ldr	r3, [r4, #20]
 80097ea:	b2f6      	uxtb	r6, r6
 80097ec:	4283      	cmp	r3, r0
 80097ee:	4637      	mov	r7, r6
 80097f0:	dc04      	bgt.n	80097fc <__swbuf_r+0x3a>
 80097f2:	4621      	mov	r1, r4
 80097f4:	4628      	mov	r0, r5
 80097f6:	f000 fcab 	bl	800a150 <_fflush_r>
 80097fa:	b9e0      	cbnz	r0, 8009836 <__swbuf_r+0x74>
 80097fc:	68a3      	ldr	r3, [r4, #8]
 80097fe:	3b01      	subs	r3, #1
 8009800:	60a3      	str	r3, [r4, #8]
 8009802:	6823      	ldr	r3, [r4, #0]
 8009804:	1c5a      	adds	r2, r3, #1
 8009806:	6022      	str	r2, [r4, #0]
 8009808:	701e      	strb	r6, [r3, #0]
 800980a:	6962      	ldr	r2, [r4, #20]
 800980c:	1c43      	adds	r3, r0, #1
 800980e:	429a      	cmp	r2, r3
 8009810:	d004      	beq.n	800981c <__swbuf_r+0x5a>
 8009812:	89a3      	ldrh	r3, [r4, #12]
 8009814:	07db      	lsls	r3, r3, #31
 8009816:	d506      	bpl.n	8009826 <__swbuf_r+0x64>
 8009818:	2e0a      	cmp	r6, #10
 800981a:	d104      	bne.n	8009826 <__swbuf_r+0x64>
 800981c:	4621      	mov	r1, r4
 800981e:	4628      	mov	r0, r5
 8009820:	f000 fc96 	bl	800a150 <_fflush_r>
 8009824:	b938      	cbnz	r0, 8009836 <__swbuf_r+0x74>
 8009826:	4638      	mov	r0, r7
 8009828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800982a:	4621      	mov	r1, r4
 800982c:	4628      	mov	r0, r5
 800982e:	f000 f805 	bl	800983c <__swsetup_r>
 8009832:	2800      	cmp	r0, #0
 8009834:	d0d5      	beq.n	80097e2 <__swbuf_r+0x20>
 8009836:	f04f 37ff 	mov.w	r7, #4294967295
 800983a:	e7f4      	b.n	8009826 <__swbuf_r+0x64>

0800983c <__swsetup_r>:
 800983c:	b538      	push	{r3, r4, r5, lr}
 800983e:	4b2a      	ldr	r3, [pc, #168]	; (80098e8 <__swsetup_r+0xac>)
 8009840:	4605      	mov	r5, r0
 8009842:	6818      	ldr	r0, [r3, #0]
 8009844:	460c      	mov	r4, r1
 8009846:	b118      	cbz	r0, 8009850 <__swsetup_r+0x14>
 8009848:	6a03      	ldr	r3, [r0, #32]
 800984a:	b90b      	cbnz	r3, 8009850 <__swsetup_r+0x14>
 800984c:	f7ff fed2 	bl	80095f4 <__sinit>
 8009850:	89a3      	ldrh	r3, [r4, #12]
 8009852:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009856:	0718      	lsls	r0, r3, #28
 8009858:	d422      	bmi.n	80098a0 <__swsetup_r+0x64>
 800985a:	06d9      	lsls	r1, r3, #27
 800985c:	d407      	bmi.n	800986e <__swsetup_r+0x32>
 800985e:	2309      	movs	r3, #9
 8009860:	602b      	str	r3, [r5, #0]
 8009862:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009866:	81a3      	strh	r3, [r4, #12]
 8009868:	f04f 30ff 	mov.w	r0, #4294967295
 800986c:	e034      	b.n	80098d8 <__swsetup_r+0x9c>
 800986e:	0758      	lsls	r0, r3, #29
 8009870:	d512      	bpl.n	8009898 <__swsetup_r+0x5c>
 8009872:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009874:	b141      	cbz	r1, 8009888 <__swsetup_r+0x4c>
 8009876:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800987a:	4299      	cmp	r1, r3
 800987c:	d002      	beq.n	8009884 <__swsetup_r+0x48>
 800987e:	4628      	mov	r0, r5
 8009880:	f000 f8c0 	bl	8009a04 <_free_r>
 8009884:	2300      	movs	r3, #0
 8009886:	6363      	str	r3, [r4, #52]	; 0x34
 8009888:	89a3      	ldrh	r3, [r4, #12]
 800988a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800988e:	81a3      	strh	r3, [r4, #12]
 8009890:	2300      	movs	r3, #0
 8009892:	6063      	str	r3, [r4, #4]
 8009894:	6923      	ldr	r3, [r4, #16]
 8009896:	6023      	str	r3, [r4, #0]
 8009898:	89a3      	ldrh	r3, [r4, #12]
 800989a:	f043 0308 	orr.w	r3, r3, #8
 800989e:	81a3      	strh	r3, [r4, #12]
 80098a0:	6923      	ldr	r3, [r4, #16]
 80098a2:	b94b      	cbnz	r3, 80098b8 <__swsetup_r+0x7c>
 80098a4:	89a3      	ldrh	r3, [r4, #12]
 80098a6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80098aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098ae:	d003      	beq.n	80098b8 <__swsetup_r+0x7c>
 80098b0:	4621      	mov	r1, r4
 80098b2:	4628      	mov	r0, r5
 80098b4:	f000 fc9a 	bl	800a1ec <__smakebuf_r>
 80098b8:	89a0      	ldrh	r0, [r4, #12]
 80098ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80098be:	f010 0301 	ands.w	r3, r0, #1
 80098c2:	d00a      	beq.n	80098da <__swsetup_r+0x9e>
 80098c4:	2300      	movs	r3, #0
 80098c6:	60a3      	str	r3, [r4, #8]
 80098c8:	6963      	ldr	r3, [r4, #20]
 80098ca:	425b      	negs	r3, r3
 80098cc:	61a3      	str	r3, [r4, #24]
 80098ce:	6923      	ldr	r3, [r4, #16]
 80098d0:	b943      	cbnz	r3, 80098e4 <__swsetup_r+0xa8>
 80098d2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80098d6:	d1c4      	bne.n	8009862 <__swsetup_r+0x26>
 80098d8:	bd38      	pop	{r3, r4, r5, pc}
 80098da:	0781      	lsls	r1, r0, #30
 80098dc:	bf58      	it	pl
 80098de:	6963      	ldrpl	r3, [r4, #20]
 80098e0:	60a3      	str	r3, [r4, #8]
 80098e2:	e7f4      	b.n	80098ce <__swsetup_r+0x92>
 80098e4:	2000      	movs	r0, #0
 80098e6:	e7f7      	b.n	80098d8 <__swsetup_r+0x9c>
 80098e8:	20000978 	.word	0x20000978

080098ec <memset>:
 80098ec:	4402      	add	r2, r0
 80098ee:	4603      	mov	r3, r0
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d100      	bne.n	80098f6 <memset+0xa>
 80098f4:	4770      	bx	lr
 80098f6:	f803 1b01 	strb.w	r1, [r3], #1
 80098fa:	e7f9      	b.n	80098f0 <memset+0x4>

080098fc <_close_r>:
 80098fc:	b538      	push	{r3, r4, r5, lr}
 80098fe:	4d06      	ldr	r5, [pc, #24]	; (8009918 <_close_r+0x1c>)
 8009900:	2300      	movs	r3, #0
 8009902:	4604      	mov	r4, r0
 8009904:	4608      	mov	r0, r1
 8009906:	602b      	str	r3, [r5, #0]
 8009908:	f000 ff90 	bl	800a82c <_close>
 800990c:	1c43      	adds	r3, r0, #1
 800990e:	d102      	bne.n	8009916 <_close_r+0x1a>
 8009910:	682b      	ldr	r3, [r5, #0]
 8009912:	b103      	cbz	r3, 8009916 <_close_r+0x1a>
 8009914:	6023      	str	r3, [r4, #0]
 8009916:	bd38      	pop	{r3, r4, r5, pc}
 8009918:	20001180 	.word	0x20001180

0800991c <_lseek_r>:
 800991c:	b538      	push	{r3, r4, r5, lr}
 800991e:	4d07      	ldr	r5, [pc, #28]	; (800993c <_lseek_r+0x20>)
 8009920:	4604      	mov	r4, r0
 8009922:	4608      	mov	r0, r1
 8009924:	4611      	mov	r1, r2
 8009926:	2200      	movs	r2, #0
 8009928:	602a      	str	r2, [r5, #0]
 800992a:	461a      	mov	r2, r3
 800992c:	f000 ff96 	bl	800a85c <_lseek>
 8009930:	1c43      	adds	r3, r0, #1
 8009932:	d102      	bne.n	800993a <_lseek_r+0x1e>
 8009934:	682b      	ldr	r3, [r5, #0]
 8009936:	b103      	cbz	r3, 800993a <_lseek_r+0x1e>
 8009938:	6023      	str	r3, [r4, #0]
 800993a:	bd38      	pop	{r3, r4, r5, pc}
 800993c:	20001180 	.word	0x20001180

08009940 <_read_r>:
 8009940:	b538      	push	{r3, r4, r5, lr}
 8009942:	4d07      	ldr	r5, [pc, #28]	; (8009960 <_read_r+0x20>)
 8009944:	4604      	mov	r4, r0
 8009946:	4608      	mov	r0, r1
 8009948:	4611      	mov	r1, r2
 800994a:	2200      	movs	r2, #0
 800994c:	602a      	str	r2, [r5, #0]
 800994e:	461a      	mov	r2, r3
 8009950:	f000 ff8c 	bl	800a86c <_read>
 8009954:	1c43      	adds	r3, r0, #1
 8009956:	d102      	bne.n	800995e <_read_r+0x1e>
 8009958:	682b      	ldr	r3, [r5, #0]
 800995a:	b103      	cbz	r3, 800995e <_read_r+0x1e>
 800995c:	6023      	str	r3, [r4, #0]
 800995e:	bd38      	pop	{r3, r4, r5, pc}
 8009960:	20001180 	.word	0x20001180

08009964 <_sbrk_r>:
 8009964:	b538      	push	{r3, r4, r5, lr}
 8009966:	4d06      	ldr	r5, [pc, #24]	; (8009980 <_sbrk_r+0x1c>)
 8009968:	2300      	movs	r3, #0
 800996a:	4604      	mov	r4, r0
 800996c:	4608      	mov	r0, r1
 800996e:	602b      	str	r3, [r5, #0]
 8009970:	f7f7 fdde 	bl	8001530 <_sbrk>
 8009974:	1c43      	adds	r3, r0, #1
 8009976:	d102      	bne.n	800997e <_sbrk_r+0x1a>
 8009978:	682b      	ldr	r3, [r5, #0]
 800997a:	b103      	cbz	r3, 800997e <_sbrk_r+0x1a>
 800997c:	6023      	str	r3, [r4, #0]
 800997e:	bd38      	pop	{r3, r4, r5, pc}
 8009980:	20001180 	.word	0x20001180

08009984 <_write_r>:
 8009984:	b538      	push	{r3, r4, r5, lr}
 8009986:	4d07      	ldr	r5, [pc, #28]	; (80099a4 <_write_r+0x20>)
 8009988:	4604      	mov	r4, r0
 800998a:	4608      	mov	r0, r1
 800998c:	4611      	mov	r1, r2
 800998e:	2200      	movs	r2, #0
 8009990:	602a      	str	r2, [r5, #0]
 8009992:	461a      	mov	r2, r3
 8009994:	f000 ff72 	bl	800a87c <_write>
 8009998:	1c43      	adds	r3, r0, #1
 800999a:	d102      	bne.n	80099a2 <_write_r+0x1e>
 800999c:	682b      	ldr	r3, [r5, #0]
 800999e:	b103      	cbz	r3, 80099a2 <_write_r+0x1e>
 80099a0:	6023      	str	r3, [r4, #0]
 80099a2:	bd38      	pop	{r3, r4, r5, pc}
 80099a4:	20001180 	.word	0x20001180

080099a8 <__errno>:
 80099a8:	4b01      	ldr	r3, [pc, #4]	; (80099b0 <__errno+0x8>)
 80099aa:	6818      	ldr	r0, [r3, #0]
 80099ac:	4770      	bx	lr
 80099ae:	bf00      	nop
 80099b0:	20000978 	.word	0x20000978

080099b4 <__libc_init_array>:
 80099b4:	b570      	push	{r4, r5, r6, lr}
 80099b6:	4d0d      	ldr	r5, [pc, #52]	; (80099ec <__libc_init_array+0x38>)
 80099b8:	4c0d      	ldr	r4, [pc, #52]	; (80099f0 <__libc_init_array+0x3c>)
 80099ba:	1b64      	subs	r4, r4, r5
 80099bc:	10a4      	asrs	r4, r4, #2
 80099be:	2600      	movs	r6, #0
 80099c0:	42a6      	cmp	r6, r4
 80099c2:	d109      	bne.n	80099d8 <__libc_init_array+0x24>
 80099c4:	4d0b      	ldr	r5, [pc, #44]	; (80099f4 <__libc_init_array+0x40>)
 80099c6:	4c0c      	ldr	r4, [pc, #48]	; (80099f8 <__libc_init_array+0x44>)
 80099c8:	f000 ff60 	bl	800a88c <_init>
 80099cc:	1b64      	subs	r4, r4, r5
 80099ce:	10a4      	asrs	r4, r4, #2
 80099d0:	2600      	movs	r6, #0
 80099d2:	42a6      	cmp	r6, r4
 80099d4:	d105      	bne.n	80099e2 <__libc_init_array+0x2e>
 80099d6:	bd70      	pop	{r4, r5, r6, pc}
 80099d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80099dc:	4798      	blx	r3
 80099de:	3601      	adds	r6, #1
 80099e0:	e7ee      	b.n	80099c0 <__libc_init_array+0xc>
 80099e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80099e6:	4798      	blx	r3
 80099e8:	3601      	adds	r6, #1
 80099ea:	e7f2      	b.n	80099d2 <__libc_init_array+0x1e>
 80099ec:	080154c4 	.word	0x080154c4
 80099f0:	080154c4 	.word	0x080154c4
 80099f4:	080154c4 	.word	0x080154c4
 80099f8:	080154c8 	.word	0x080154c8

080099fc <__retarget_lock_init_recursive>:
 80099fc:	4770      	bx	lr

080099fe <__retarget_lock_acquire_recursive>:
 80099fe:	4770      	bx	lr

08009a00 <__retarget_lock_release_recursive>:
 8009a00:	4770      	bx	lr
	...

08009a04 <_free_r>:
 8009a04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a06:	2900      	cmp	r1, #0
 8009a08:	d044      	beq.n	8009a94 <_free_r+0x90>
 8009a0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a0e:	9001      	str	r0, [sp, #4]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	f1a1 0404 	sub.w	r4, r1, #4
 8009a16:	bfb8      	it	lt
 8009a18:	18e4      	addlt	r4, r4, r3
 8009a1a:	f7ff fd53 	bl	80094c4 <__malloc_lock>
 8009a1e:	4a1e      	ldr	r2, [pc, #120]	; (8009a98 <_free_r+0x94>)
 8009a20:	9801      	ldr	r0, [sp, #4]
 8009a22:	6813      	ldr	r3, [r2, #0]
 8009a24:	b933      	cbnz	r3, 8009a34 <_free_r+0x30>
 8009a26:	6063      	str	r3, [r4, #4]
 8009a28:	6014      	str	r4, [r2, #0]
 8009a2a:	b003      	add	sp, #12
 8009a2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a30:	f7ff bd4e 	b.w	80094d0 <__malloc_unlock>
 8009a34:	42a3      	cmp	r3, r4
 8009a36:	d908      	bls.n	8009a4a <_free_r+0x46>
 8009a38:	6825      	ldr	r5, [r4, #0]
 8009a3a:	1961      	adds	r1, r4, r5
 8009a3c:	428b      	cmp	r3, r1
 8009a3e:	bf01      	itttt	eq
 8009a40:	6819      	ldreq	r1, [r3, #0]
 8009a42:	685b      	ldreq	r3, [r3, #4]
 8009a44:	1949      	addeq	r1, r1, r5
 8009a46:	6021      	streq	r1, [r4, #0]
 8009a48:	e7ed      	b.n	8009a26 <_free_r+0x22>
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	685b      	ldr	r3, [r3, #4]
 8009a4e:	b10b      	cbz	r3, 8009a54 <_free_r+0x50>
 8009a50:	42a3      	cmp	r3, r4
 8009a52:	d9fa      	bls.n	8009a4a <_free_r+0x46>
 8009a54:	6811      	ldr	r1, [r2, #0]
 8009a56:	1855      	adds	r5, r2, r1
 8009a58:	42a5      	cmp	r5, r4
 8009a5a:	d10b      	bne.n	8009a74 <_free_r+0x70>
 8009a5c:	6824      	ldr	r4, [r4, #0]
 8009a5e:	4421      	add	r1, r4
 8009a60:	1854      	adds	r4, r2, r1
 8009a62:	42a3      	cmp	r3, r4
 8009a64:	6011      	str	r1, [r2, #0]
 8009a66:	d1e0      	bne.n	8009a2a <_free_r+0x26>
 8009a68:	681c      	ldr	r4, [r3, #0]
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	6053      	str	r3, [r2, #4]
 8009a6e:	440c      	add	r4, r1
 8009a70:	6014      	str	r4, [r2, #0]
 8009a72:	e7da      	b.n	8009a2a <_free_r+0x26>
 8009a74:	d902      	bls.n	8009a7c <_free_r+0x78>
 8009a76:	230c      	movs	r3, #12
 8009a78:	6003      	str	r3, [r0, #0]
 8009a7a:	e7d6      	b.n	8009a2a <_free_r+0x26>
 8009a7c:	6825      	ldr	r5, [r4, #0]
 8009a7e:	1961      	adds	r1, r4, r5
 8009a80:	428b      	cmp	r3, r1
 8009a82:	bf04      	itt	eq
 8009a84:	6819      	ldreq	r1, [r3, #0]
 8009a86:	685b      	ldreq	r3, [r3, #4]
 8009a88:	6063      	str	r3, [r4, #4]
 8009a8a:	bf04      	itt	eq
 8009a8c:	1949      	addeq	r1, r1, r5
 8009a8e:	6021      	streq	r1, [r4, #0]
 8009a90:	6054      	str	r4, [r2, #4]
 8009a92:	e7ca      	b.n	8009a2a <_free_r+0x26>
 8009a94:	b003      	add	sp, #12
 8009a96:	bd30      	pop	{r4, r5, pc}
 8009a98:	2000103c 	.word	0x2000103c

08009a9c <__sfputc_r>:
 8009a9c:	6893      	ldr	r3, [r2, #8]
 8009a9e:	3b01      	subs	r3, #1
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	b410      	push	{r4}
 8009aa4:	6093      	str	r3, [r2, #8]
 8009aa6:	da08      	bge.n	8009aba <__sfputc_r+0x1e>
 8009aa8:	6994      	ldr	r4, [r2, #24]
 8009aaa:	42a3      	cmp	r3, r4
 8009aac:	db01      	blt.n	8009ab2 <__sfputc_r+0x16>
 8009aae:	290a      	cmp	r1, #10
 8009ab0:	d103      	bne.n	8009aba <__sfputc_r+0x1e>
 8009ab2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ab6:	f7ff be84 	b.w	80097c2 <__swbuf_r>
 8009aba:	6813      	ldr	r3, [r2, #0]
 8009abc:	1c58      	adds	r0, r3, #1
 8009abe:	6010      	str	r0, [r2, #0]
 8009ac0:	7019      	strb	r1, [r3, #0]
 8009ac2:	4608      	mov	r0, r1
 8009ac4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ac8:	4770      	bx	lr

08009aca <__sfputs_r>:
 8009aca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009acc:	4606      	mov	r6, r0
 8009ace:	460f      	mov	r7, r1
 8009ad0:	4614      	mov	r4, r2
 8009ad2:	18d5      	adds	r5, r2, r3
 8009ad4:	42ac      	cmp	r4, r5
 8009ad6:	d101      	bne.n	8009adc <__sfputs_r+0x12>
 8009ad8:	2000      	movs	r0, #0
 8009ada:	e007      	b.n	8009aec <__sfputs_r+0x22>
 8009adc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ae0:	463a      	mov	r2, r7
 8009ae2:	4630      	mov	r0, r6
 8009ae4:	f7ff ffda 	bl	8009a9c <__sfputc_r>
 8009ae8:	1c43      	adds	r3, r0, #1
 8009aea:	d1f3      	bne.n	8009ad4 <__sfputs_r+0xa>
 8009aec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009af0 <_vfiprintf_r>:
 8009af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009af4:	460d      	mov	r5, r1
 8009af6:	b09d      	sub	sp, #116	; 0x74
 8009af8:	4614      	mov	r4, r2
 8009afa:	4698      	mov	r8, r3
 8009afc:	4606      	mov	r6, r0
 8009afe:	b118      	cbz	r0, 8009b08 <_vfiprintf_r+0x18>
 8009b00:	6a03      	ldr	r3, [r0, #32]
 8009b02:	b90b      	cbnz	r3, 8009b08 <_vfiprintf_r+0x18>
 8009b04:	f7ff fd76 	bl	80095f4 <__sinit>
 8009b08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b0a:	07d9      	lsls	r1, r3, #31
 8009b0c:	d405      	bmi.n	8009b1a <_vfiprintf_r+0x2a>
 8009b0e:	89ab      	ldrh	r3, [r5, #12]
 8009b10:	059a      	lsls	r2, r3, #22
 8009b12:	d402      	bmi.n	8009b1a <_vfiprintf_r+0x2a>
 8009b14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b16:	f7ff ff72 	bl	80099fe <__retarget_lock_acquire_recursive>
 8009b1a:	89ab      	ldrh	r3, [r5, #12]
 8009b1c:	071b      	lsls	r3, r3, #28
 8009b1e:	d501      	bpl.n	8009b24 <_vfiprintf_r+0x34>
 8009b20:	692b      	ldr	r3, [r5, #16]
 8009b22:	b99b      	cbnz	r3, 8009b4c <_vfiprintf_r+0x5c>
 8009b24:	4629      	mov	r1, r5
 8009b26:	4630      	mov	r0, r6
 8009b28:	f7ff fe88 	bl	800983c <__swsetup_r>
 8009b2c:	b170      	cbz	r0, 8009b4c <_vfiprintf_r+0x5c>
 8009b2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b30:	07dc      	lsls	r4, r3, #31
 8009b32:	d504      	bpl.n	8009b3e <_vfiprintf_r+0x4e>
 8009b34:	f04f 30ff 	mov.w	r0, #4294967295
 8009b38:	b01d      	add	sp, #116	; 0x74
 8009b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b3e:	89ab      	ldrh	r3, [r5, #12]
 8009b40:	0598      	lsls	r0, r3, #22
 8009b42:	d4f7      	bmi.n	8009b34 <_vfiprintf_r+0x44>
 8009b44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b46:	f7ff ff5b 	bl	8009a00 <__retarget_lock_release_recursive>
 8009b4a:	e7f3      	b.n	8009b34 <_vfiprintf_r+0x44>
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	9309      	str	r3, [sp, #36]	; 0x24
 8009b50:	2320      	movs	r3, #32
 8009b52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b56:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b5a:	2330      	movs	r3, #48	; 0x30
 8009b5c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009d10 <_vfiprintf_r+0x220>
 8009b60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b64:	f04f 0901 	mov.w	r9, #1
 8009b68:	4623      	mov	r3, r4
 8009b6a:	469a      	mov	sl, r3
 8009b6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b70:	b10a      	cbz	r2, 8009b76 <_vfiprintf_r+0x86>
 8009b72:	2a25      	cmp	r2, #37	; 0x25
 8009b74:	d1f9      	bne.n	8009b6a <_vfiprintf_r+0x7a>
 8009b76:	ebba 0b04 	subs.w	fp, sl, r4
 8009b7a:	d00b      	beq.n	8009b94 <_vfiprintf_r+0xa4>
 8009b7c:	465b      	mov	r3, fp
 8009b7e:	4622      	mov	r2, r4
 8009b80:	4629      	mov	r1, r5
 8009b82:	4630      	mov	r0, r6
 8009b84:	f7ff ffa1 	bl	8009aca <__sfputs_r>
 8009b88:	3001      	adds	r0, #1
 8009b8a:	f000 80a9 	beq.w	8009ce0 <_vfiprintf_r+0x1f0>
 8009b8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b90:	445a      	add	r2, fp
 8009b92:	9209      	str	r2, [sp, #36]	; 0x24
 8009b94:	f89a 3000 	ldrb.w	r3, [sl]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	f000 80a1 	beq.w	8009ce0 <_vfiprintf_r+0x1f0>
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ba4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ba8:	f10a 0a01 	add.w	sl, sl, #1
 8009bac:	9304      	str	r3, [sp, #16]
 8009bae:	9307      	str	r3, [sp, #28]
 8009bb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009bb4:	931a      	str	r3, [sp, #104]	; 0x68
 8009bb6:	4654      	mov	r4, sl
 8009bb8:	2205      	movs	r2, #5
 8009bba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bbe:	4854      	ldr	r0, [pc, #336]	; (8009d10 <_vfiprintf_r+0x220>)
 8009bc0:	f7f6 fb1e 	bl	8000200 <memchr>
 8009bc4:	9a04      	ldr	r2, [sp, #16]
 8009bc6:	b9d8      	cbnz	r0, 8009c00 <_vfiprintf_r+0x110>
 8009bc8:	06d1      	lsls	r1, r2, #27
 8009bca:	bf44      	itt	mi
 8009bcc:	2320      	movmi	r3, #32
 8009bce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bd2:	0713      	lsls	r3, r2, #28
 8009bd4:	bf44      	itt	mi
 8009bd6:	232b      	movmi	r3, #43	; 0x2b
 8009bd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bdc:	f89a 3000 	ldrb.w	r3, [sl]
 8009be0:	2b2a      	cmp	r3, #42	; 0x2a
 8009be2:	d015      	beq.n	8009c10 <_vfiprintf_r+0x120>
 8009be4:	9a07      	ldr	r2, [sp, #28]
 8009be6:	4654      	mov	r4, sl
 8009be8:	2000      	movs	r0, #0
 8009bea:	f04f 0c0a 	mov.w	ip, #10
 8009bee:	4621      	mov	r1, r4
 8009bf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bf4:	3b30      	subs	r3, #48	; 0x30
 8009bf6:	2b09      	cmp	r3, #9
 8009bf8:	d94d      	bls.n	8009c96 <_vfiprintf_r+0x1a6>
 8009bfa:	b1b0      	cbz	r0, 8009c2a <_vfiprintf_r+0x13a>
 8009bfc:	9207      	str	r2, [sp, #28]
 8009bfe:	e014      	b.n	8009c2a <_vfiprintf_r+0x13a>
 8009c00:	eba0 0308 	sub.w	r3, r0, r8
 8009c04:	fa09 f303 	lsl.w	r3, r9, r3
 8009c08:	4313      	orrs	r3, r2
 8009c0a:	9304      	str	r3, [sp, #16]
 8009c0c:	46a2      	mov	sl, r4
 8009c0e:	e7d2      	b.n	8009bb6 <_vfiprintf_r+0xc6>
 8009c10:	9b03      	ldr	r3, [sp, #12]
 8009c12:	1d19      	adds	r1, r3, #4
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	9103      	str	r1, [sp, #12]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	bfbb      	ittet	lt
 8009c1c:	425b      	neglt	r3, r3
 8009c1e:	f042 0202 	orrlt.w	r2, r2, #2
 8009c22:	9307      	strge	r3, [sp, #28]
 8009c24:	9307      	strlt	r3, [sp, #28]
 8009c26:	bfb8      	it	lt
 8009c28:	9204      	strlt	r2, [sp, #16]
 8009c2a:	7823      	ldrb	r3, [r4, #0]
 8009c2c:	2b2e      	cmp	r3, #46	; 0x2e
 8009c2e:	d10c      	bne.n	8009c4a <_vfiprintf_r+0x15a>
 8009c30:	7863      	ldrb	r3, [r4, #1]
 8009c32:	2b2a      	cmp	r3, #42	; 0x2a
 8009c34:	d134      	bne.n	8009ca0 <_vfiprintf_r+0x1b0>
 8009c36:	9b03      	ldr	r3, [sp, #12]
 8009c38:	1d1a      	adds	r2, r3, #4
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	9203      	str	r2, [sp, #12]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	bfb8      	it	lt
 8009c42:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c46:	3402      	adds	r4, #2
 8009c48:	9305      	str	r3, [sp, #20]
 8009c4a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009d20 <_vfiprintf_r+0x230>
 8009c4e:	7821      	ldrb	r1, [r4, #0]
 8009c50:	2203      	movs	r2, #3
 8009c52:	4650      	mov	r0, sl
 8009c54:	f7f6 fad4 	bl	8000200 <memchr>
 8009c58:	b138      	cbz	r0, 8009c6a <_vfiprintf_r+0x17a>
 8009c5a:	9b04      	ldr	r3, [sp, #16]
 8009c5c:	eba0 000a 	sub.w	r0, r0, sl
 8009c60:	2240      	movs	r2, #64	; 0x40
 8009c62:	4082      	lsls	r2, r0
 8009c64:	4313      	orrs	r3, r2
 8009c66:	3401      	adds	r4, #1
 8009c68:	9304      	str	r3, [sp, #16]
 8009c6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c6e:	4829      	ldr	r0, [pc, #164]	; (8009d14 <_vfiprintf_r+0x224>)
 8009c70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c74:	2206      	movs	r2, #6
 8009c76:	f7f6 fac3 	bl	8000200 <memchr>
 8009c7a:	2800      	cmp	r0, #0
 8009c7c:	d03f      	beq.n	8009cfe <_vfiprintf_r+0x20e>
 8009c7e:	4b26      	ldr	r3, [pc, #152]	; (8009d18 <_vfiprintf_r+0x228>)
 8009c80:	bb1b      	cbnz	r3, 8009cca <_vfiprintf_r+0x1da>
 8009c82:	9b03      	ldr	r3, [sp, #12]
 8009c84:	3307      	adds	r3, #7
 8009c86:	f023 0307 	bic.w	r3, r3, #7
 8009c8a:	3308      	adds	r3, #8
 8009c8c:	9303      	str	r3, [sp, #12]
 8009c8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c90:	443b      	add	r3, r7
 8009c92:	9309      	str	r3, [sp, #36]	; 0x24
 8009c94:	e768      	b.n	8009b68 <_vfiprintf_r+0x78>
 8009c96:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c9a:	460c      	mov	r4, r1
 8009c9c:	2001      	movs	r0, #1
 8009c9e:	e7a6      	b.n	8009bee <_vfiprintf_r+0xfe>
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	3401      	adds	r4, #1
 8009ca4:	9305      	str	r3, [sp, #20]
 8009ca6:	4619      	mov	r1, r3
 8009ca8:	f04f 0c0a 	mov.w	ip, #10
 8009cac:	4620      	mov	r0, r4
 8009cae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009cb2:	3a30      	subs	r2, #48	; 0x30
 8009cb4:	2a09      	cmp	r2, #9
 8009cb6:	d903      	bls.n	8009cc0 <_vfiprintf_r+0x1d0>
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d0c6      	beq.n	8009c4a <_vfiprintf_r+0x15a>
 8009cbc:	9105      	str	r1, [sp, #20]
 8009cbe:	e7c4      	b.n	8009c4a <_vfiprintf_r+0x15a>
 8009cc0:	fb0c 2101 	mla	r1, ip, r1, r2
 8009cc4:	4604      	mov	r4, r0
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	e7f0      	b.n	8009cac <_vfiprintf_r+0x1bc>
 8009cca:	ab03      	add	r3, sp, #12
 8009ccc:	9300      	str	r3, [sp, #0]
 8009cce:	462a      	mov	r2, r5
 8009cd0:	4b12      	ldr	r3, [pc, #72]	; (8009d1c <_vfiprintf_r+0x22c>)
 8009cd2:	a904      	add	r1, sp, #16
 8009cd4:	4630      	mov	r0, r6
 8009cd6:	f3af 8000 	nop.w
 8009cda:	4607      	mov	r7, r0
 8009cdc:	1c78      	adds	r0, r7, #1
 8009cde:	d1d6      	bne.n	8009c8e <_vfiprintf_r+0x19e>
 8009ce0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ce2:	07d9      	lsls	r1, r3, #31
 8009ce4:	d405      	bmi.n	8009cf2 <_vfiprintf_r+0x202>
 8009ce6:	89ab      	ldrh	r3, [r5, #12]
 8009ce8:	059a      	lsls	r2, r3, #22
 8009cea:	d402      	bmi.n	8009cf2 <_vfiprintf_r+0x202>
 8009cec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009cee:	f7ff fe87 	bl	8009a00 <__retarget_lock_release_recursive>
 8009cf2:	89ab      	ldrh	r3, [r5, #12]
 8009cf4:	065b      	lsls	r3, r3, #25
 8009cf6:	f53f af1d 	bmi.w	8009b34 <_vfiprintf_r+0x44>
 8009cfa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009cfc:	e71c      	b.n	8009b38 <_vfiprintf_r+0x48>
 8009cfe:	ab03      	add	r3, sp, #12
 8009d00:	9300      	str	r3, [sp, #0]
 8009d02:	462a      	mov	r2, r5
 8009d04:	4b05      	ldr	r3, [pc, #20]	; (8009d1c <_vfiprintf_r+0x22c>)
 8009d06:	a904      	add	r1, sp, #16
 8009d08:	4630      	mov	r0, r6
 8009d0a:	f000 f879 	bl	8009e00 <_printf_i>
 8009d0e:	e7e4      	b.n	8009cda <_vfiprintf_r+0x1ea>
 8009d10:	08015470 	.word	0x08015470
 8009d14:	0801547a 	.word	0x0801547a
 8009d18:	00000000 	.word	0x00000000
 8009d1c:	08009acb 	.word	0x08009acb
 8009d20:	08015476 	.word	0x08015476

08009d24 <_printf_common>:
 8009d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d28:	4616      	mov	r6, r2
 8009d2a:	4699      	mov	r9, r3
 8009d2c:	688a      	ldr	r2, [r1, #8]
 8009d2e:	690b      	ldr	r3, [r1, #16]
 8009d30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009d34:	4293      	cmp	r3, r2
 8009d36:	bfb8      	it	lt
 8009d38:	4613      	movlt	r3, r2
 8009d3a:	6033      	str	r3, [r6, #0]
 8009d3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009d40:	4607      	mov	r7, r0
 8009d42:	460c      	mov	r4, r1
 8009d44:	b10a      	cbz	r2, 8009d4a <_printf_common+0x26>
 8009d46:	3301      	adds	r3, #1
 8009d48:	6033      	str	r3, [r6, #0]
 8009d4a:	6823      	ldr	r3, [r4, #0]
 8009d4c:	0699      	lsls	r1, r3, #26
 8009d4e:	bf42      	ittt	mi
 8009d50:	6833      	ldrmi	r3, [r6, #0]
 8009d52:	3302      	addmi	r3, #2
 8009d54:	6033      	strmi	r3, [r6, #0]
 8009d56:	6825      	ldr	r5, [r4, #0]
 8009d58:	f015 0506 	ands.w	r5, r5, #6
 8009d5c:	d106      	bne.n	8009d6c <_printf_common+0x48>
 8009d5e:	f104 0a19 	add.w	sl, r4, #25
 8009d62:	68e3      	ldr	r3, [r4, #12]
 8009d64:	6832      	ldr	r2, [r6, #0]
 8009d66:	1a9b      	subs	r3, r3, r2
 8009d68:	42ab      	cmp	r3, r5
 8009d6a:	dc26      	bgt.n	8009dba <_printf_common+0x96>
 8009d6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009d70:	1e13      	subs	r3, r2, #0
 8009d72:	6822      	ldr	r2, [r4, #0]
 8009d74:	bf18      	it	ne
 8009d76:	2301      	movne	r3, #1
 8009d78:	0692      	lsls	r2, r2, #26
 8009d7a:	d42b      	bmi.n	8009dd4 <_printf_common+0xb0>
 8009d7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009d80:	4649      	mov	r1, r9
 8009d82:	4638      	mov	r0, r7
 8009d84:	47c0      	blx	r8
 8009d86:	3001      	adds	r0, #1
 8009d88:	d01e      	beq.n	8009dc8 <_printf_common+0xa4>
 8009d8a:	6823      	ldr	r3, [r4, #0]
 8009d8c:	6922      	ldr	r2, [r4, #16]
 8009d8e:	f003 0306 	and.w	r3, r3, #6
 8009d92:	2b04      	cmp	r3, #4
 8009d94:	bf02      	ittt	eq
 8009d96:	68e5      	ldreq	r5, [r4, #12]
 8009d98:	6833      	ldreq	r3, [r6, #0]
 8009d9a:	1aed      	subeq	r5, r5, r3
 8009d9c:	68a3      	ldr	r3, [r4, #8]
 8009d9e:	bf0c      	ite	eq
 8009da0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009da4:	2500      	movne	r5, #0
 8009da6:	4293      	cmp	r3, r2
 8009da8:	bfc4      	itt	gt
 8009daa:	1a9b      	subgt	r3, r3, r2
 8009dac:	18ed      	addgt	r5, r5, r3
 8009dae:	2600      	movs	r6, #0
 8009db0:	341a      	adds	r4, #26
 8009db2:	42b5      	cmp	r5, r6
 8009db4:	d11a      	bne.n	8009dec <_printf_common+0xc8>
 8009db6:	2000      	movs	r0, #0
 8009db8:	e008      	b.n	8009dcc <_printf_common+0xa8>
 8009dba:	2301      	movs	r3, #1
 8009dbc:	4652      	mov	r2, sl
 8009dbe:	4649      	mov	r1, r9
 8009dc0:	4638      	mov	r0, r7
 8009dc2:	47c0      	blx	r8
 8009dc4:	3001      	adds	r0, #1
 8009dc6:	d103      	bne.n	8009dd0 <_printf_common+0xac>
 8009dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8009dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dd0:	3501      	adds	r5, #1
 8009dd2:	e7c6      	b.n	8009d62 <_printf_common+0x3e>
 8009dd4:	18e1      	adds	r1, r4, r3
 8009dd6:	1c5a      	adds	r2, r3, #1
 8009dd8:	2030      	movs	r0, #48	; 0x30
 8009dda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009dde:	4422      	add	r2, r4
 8009de0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009de4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009de8:	3302      	adds	r3, #2
 8009dea:	e7c7      	b.n	8009d7c <_printf_common+0x58>
 8009dec:	2301      	movs	r3, #1
 8009dee:	4622      	mov	r2, r4
 8009df0:	4649      	mov	r1, r9
 8009df2:	4638      	mov	r0, r7
 8009df4:	47c0      	blx	r8
 8009df6:	3001      	adds	r0, #1
 8009df8:	d0e6      	beq.n	8009dc8 <_printf_common+0xa4>
 8009dfa:	3601      	adds	r6, #1
 8009dfc:	e7d9      	b.n	8009db2 <_printf_common+0x8e>
	...

08009e00 <_printf_i>:
 8009e00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e04:	7e0f      	ldrb	r7, [r1, #24]
 8009e06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009e08:	2f78      	cmp	r7, #120	; 0x78
 8009e0a:	4691      	mov	r9, r2
 8009e0c:	4680      	mov	r8, r0
 8009e0e:	460c      	mov	r4, r1
 8009e10:	469a      	mov	sl, r3
 8009e12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009e16:	d807      	bhi.n	8009e28 <_printf_i+0x28>
 8009e18:	2f62      	cmp	r7, #98	; 0x62
 8009e1a:	d80a      	bhi.n	8009e32 <_printf_i+0x32>
 8009e1c:	2f00      	cmp	r7, #0
 8009e1e:	f000 80d4 	beq.w	8009fca <_printf_i+0x1ca>
 8009e22:	2f58      	cmp	r7, #88	; 0x58
 8009e24:	f000 80c0 	beq.w	8009fa8 <_printf_i+0x1a8>
 8009e28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009e30:	e03a      	b.n	8009ea8 <_printf_i+0xa8>
 8009e32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009e36:	2b15      	cmp	r3, #21
 8009e38:	d8f6      	bhi.n	8009e28 <_printf_i+0x28>
 8009e3a:	a101      	add	r1, pc, #4	; (adr r1, 8009e40 <_printf_i+0x40>)
 8009e3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e40:	08009e99 	.word	0x08009e99
 8009e44:	08009ead 	.word	0x08009ead
 8009e48:	08009e29 	.word	0x08009e29
 8009e4c:	08009e29 	.word	0x08009e29
 8009e50:	08009e29 	.word	0x08009e29
 8009e54:	08009e29 	.word	0x08009e29
 8009e58:	08009ead 	.word	0x08009ead
 8009e5c:	08009e29 	.word	0x08009e29
 8009e60:	08009e29 	.word	0x08009e29
 8009e64:	08009e29 	.word	0x08009e29
 8009e68:	08009e29 	.word	0x08009e29
 8009e6c:	08009fb1 	.word	0x08009fb1
 8009e70:	08009ed9 	.word	0x08009ed9
 8009e74:	08009f6b 	.word	0x08009f6b
 8009e78:	08009e29 	.word	0x08009e29
 8009e7c:	08009e29 	.word	0x08009e29
 8009e80:	08009fd3 	.word	0x08009fd3
 8009e84:	08009e29 	.word	0x08009e29
 8009e88:	08009ed9 	.word	0x08009ed9
 8009e8c:	08009e29 	.word	0x08009e29
 8009e90:	08009e29 	.word	0x08009e29
 8009e94:	08009f73 	.word	0x08009f73
 8009e98:	682b      	ldr	r3, [r5, #0]
 8009e9a:	1d1a      	adds	r2, r3, #4
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	602a      	str	r2, [r5, #0]
 8009ea0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ea4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	e09f      	b.n	8009fec <_printf_i+0x1ec>
 8009eac:	6820      	ldr	r0, [r4, #0]
 8009eae:	682b      	ldr	r3, [r5, #0]
 8009eb0:	0607      	lsls	r7, r0, #24
 8009eb2:	f103 0104 	add.w	r1, r3, #4
 8009eb6:	6029      	str	r1, [r5, #0]
 8009eb8:	d501      	bpl.n	8009ebe <_printf_i+0xbe>
 8009eba:	681e      	ldr	r6, [r3, #0]
 8009ebc:	e003      	b.n	8009ec6 <_printf_i+0xc6>
 8009ebe:	0646      	lsls	r6, r0, #25
 8009ec0:	d5fb      	bpl.n	8009eba <_printf_i+0xba>
 8009ec2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009ec6:	2e00      	cmp	r6, #0
 8009ec8:	da03      	bge.n	8009ed2 <_printf_i+0xd2>
 8009eca:	232d      	movs	r3, #45	; 0x2d
 8009ecc:	4276      	negs	r6, r6
 8009ece:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ed2:	485a      	ldr	r0, [pc, #360]	; (800a03c <_printf_i+0x23c>)
 8009ed4:	230a      	movs	r3, #10
 8009ed6:	e012      	b.n	8009efe <_printf_i+0xfe>
 8009ed8:	682b      	ldr	r3, [r5, #0]
 8009eda:	6820      	ldr	r0, [r4, #0]
 8009edc:	1d19      	adds	r1, r3, #4
 8009ede:	6029      	str	r1, [r5, #0]
 8009ee0:	0605      	lsls	r5, r0, #24
 8009ee2:	d501      	bpl.n	8009ee8 <_printf_i+0xe8>
 8009ee4:	681e      	ldr	r6, [r3, #0]
 8009ee6:	e002      	b.n	8009eee <_printf_i+0xee>
 8009ee8:	0641      	lsls	r1, r0, #25
 8009eea:	d5fb      	bpl.n	8009ee4 <_printf_i+0xe4>
 8009eec:	881e      	ldrh	r6, [r3, #0]
 8009eee:	4853      	ldr	r0, [pc, #332]	; (800a03c <_printf_i+0x23c>)
 8009ef0:	2f6f      	cmp	r7, #111	; 0x6f
 8009ef2:	bf0c      	ite	eq
 8009ef4:	2308      	moveq	r3, #8
 8009ef6:	230a      	movne	r3, #10
 8009ef8:	2100      	movs	r1, #0
 8009efa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009efe:	6865      	ldr	r5, [r4, #4]
 8009f00:	60a5      	str	r5, [r4, #8]
 8009f02:	2d00      	cmp	r5, #0
 8009f04:	bfa2      	ittt	ge
 8009f06:	6821      	ldrge	r1, [r4, #0]
 8009f08:	f021 0104 	bicge.w	r1, r1, #4
 8009f0c:	6021      	strge	r1, [r4, #0]
 8009f0e:	b90e      	cbnz	r6, 8009f14 <_printf_i+0x114>
 8009f10:	2d00      	cmp	r5, #0
 8009f12:	d04b      	beq.n	8009fac <_printf_i+0x1ac>
 8009f14:	4615      	mov	r5, r2
 8009f16:	fbb6 f1f3 	udiv	r1, r6, r3
 8009f1a:	fb03 6711 	mls	r7, r3, r1, r6
 8009f1e:	5dc7      	ldrb	r7, [r0, r7]
 8009f20:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009f24:	4637      	mov	r7, r6
 8009f26:	42bb      	cmp	r3, r7
 8009f28:	460e      	mov	r6, r1
 8009f2a:	d9f4      	bls.n	8009f16 <_printf_i+0x116>
 8009f2c:	2b08      	cmp	r3, #8
 8009f2e:	d10b      	bne.n	8009f48 <_printf_i+0x148>
 8009f30:	6823      	ldr	r3, [r4, #0]
 8009f32:	07de      	lsls	r6, r3, #31
 8009f34:	d508      	bpl.n	8009f48 <_printf_i+0x148>
 8009f36:	6923      	ldr	r3, [r4, #16]
 8009f38:	6861      	ldr	r1, [r4, #4]
 8009f3a:	4299      	cmp	r1, r3
 8009f3c:	bfde      	ittt	le
 8009f3e:	2330      	movle	r3, #48	; 0x30
 8009f40:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009f44:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009f48:	1b52      	subs	r2, r2, r5
 8009f4a:	6122      	str	r2, [r4, #16]
 8009f4c:	f8cd a000 	str.w	sl, [sp]
 8009f50:	464b      	mov	r3, r9
 8009f52:	aa03      	add	r2, sp, #12
 8009f54:	4621      	mov	r1, r4
 8009f56:	4640      	mov	r0, r8
 8009f58:	f7ff fee4 	bl	8009d24 <_printf_common>
 8009f5c:	3001      	adds	r0, #1
 8009f5e:	d14a      	bne.n	8009ff6 <_printf_i+0x1f6>
 8009f60:	f04f 30ff 	mov.w	r0, #4294967295
 8009f64:	b004      	add	sp, #16
 8009f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f6a:	6823      	ldr	r3, [r4, #0]
 8009f6c:	f043 0320 	orr.w	r3, r3, #32
 8009f70:	6023      	str	r3, [r4, #0]
 8009f72:	4833      	ldr	r0, [pc, #204]	; (800a040 <_printf_i+0x240>)
 8009f74:	2778      	movs	r7, #120	; 0x78
 8009f76:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009f7a:	6823      	ldr	r3, [r4, #0]
 8009f7c:	6829      	ldr	r1, [r5, #0]
 8009f7e:	061f      	lsls	r7, r3, #24
 8009f80:	f851 6b04 	ldr.w	r6, [r1], #4
 8009f84:	d402      	bmi.n	8009f8c <_printf_i+0x18c>
 8009f86:	065f      	lsls	r7, r3, #25
 8009f88:	bf48      	it	mi
 8009f8a:	b2b6      	uxthmi	r6, r6
 8009f8c:	07df      	lsls	r7, r3, #31
 8009f8e:	bf48      	it	mi
 8009f90:	f043 0320 	orrmi.w	r3, r3, #32
 8009f94:	6029      	str	r1, [r5, #0]
 8009f96:	bf48      	it	mi
 8009f98:	6023      	strmi	r3, [r4, #0]
 8009f9a:	b91e      	cbnz	r6, 8009fa4 <_printf_i+0x1a4>
 8009f9c:	6823      	ldr	r3, [r4, #0]
 8009f9e:	f023 0320 	bic.w	r3, r3, #32
 8009fa2:	6023      	str	r3, [r4, #0]
 8009fa4:	2310      	movs	r3, #16
 8009fa6:	e7a7      	b.n	8009ef8 <_printf_i+0xf8>
 8009fa8:	4824      	ldr	r0, [pc, #144]	; (800a03c <_printf_i+0x23c>)
 8009faa:	e7e4      	b.n	8009f76 <_printf_i+0x176>
 8009fac:	4615      	mov	r5, r2
 8009fae:	e7bd      	b.n	8009f2c <_printf_i+0x12c>
 8009fb0:	682b      	ldr	r3, [r5, #0]
 8009fb2:	6826      	ldr	r6, [r4, #0]
 8009fb4:	6961      	ldr	r1, [r4, #20]
 8009fb6:	1d18      	adds	r0, r3, #4
 8009fb8:	6028      	str	r0, [r5, #0]
 8009fba:	0635      	lsls	r5, r6, #24
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	d501      	bpl.n	8009fc4 <_printf_i+0x1c4>
 8009fc0:	6019      	str	r1, [r3, #0]
 8009fc2:	e002      	b.n	8009fca <_printf_i+0x1ca>
 8009fc4:	0670      	lsls	r0, r6, #25
 8009fc6:	d5fb      	bpl.n	8009fc0 <_printf_i+0x1c0>
 8009fc8:	8019      	strh	r1, [r3, #0]
 8009fca:	2300      	movs	r3, #0
 8009fcc:	6123      	str	r3, [r4, #16]
 8009fce:	4615      	mov	r5, r2
 8009fd0:	e7bc      	b.n	8009f4c <_printf_i+0x14c>
 8009fd2:	682b      	ldr	r3, [r5, #0]
 8009fd4:	1d1a      	adds	r2, r3, #4
 8009fd6:	602a      	str	r2, [r5, #0]
 8009fd8:	681d      	ldr	r5, [r3, #0]
 8009fda:	6862      	ldr	r2, [r4, #4]
 8009fdc:	2100      	movs	r1, #0
 8009fde:	4628      	mov	r0, r5
 8009fe0:	f7f6 f90e 	bl	8000200 <memchr>
 8009fe4:	b108      	cbz	r0, 8009fea <_printf_i+0x1ea>
 8009fe6:	1b40      	subs	r0, r0, r5
 8009fe8:	6060      	str	r0, [r4, #4]
 8009fea:	6863      	ldr	r3, [r4, #4]
 8009fec:	6123      	str	r3, [r4, #16]
 8009fee:	2300      	movs	r3, #0
 8009ff0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ff4:	e7aa      	b.n	8009f4c <_printf_i+0x14c>
 8009ff6:	6923      	ldr	r3, [r4, #16]
 8009ff8:	462a      	mov	r2, r5
 8009ffa:	4649      	mov	r1, r9
 8009ffc:	4640      	mov	r0, r8
 8009ffe:	47d0      	blx	sl
 800a000:	3001      	adds	r0, #1
 800a002:	d0ad      	beq.n	8009f60 <_printf_i+0x160>
 800a004:	6823      	ldr	r3, [r4, #0]
 800a006:	079b      	lsls	r3, r3, #30
 800a008:	d413      	bmi.n	800a032 <_printf_i+0x232>
 800a00a:	68e0      	ldr	r0, [r4, #12]
 800a00c:	9b03      	ldr	r3, [sp, #12]
 800a00e:	4298      	cmp	r0, r3
 800a010:	bfb8      	it	lt
 800a012:	4618      	movlt	r0, r3
 800a014:	e7a6      	b.n	8009f64 <_printf_i+0x164>
 800a016:	2301      	movs	r3, #1
 800a018:	4632      	mov	r2, r6
 800a01a:	4649      	mov	r1, r9
 800a01c:	4640      	mov	r0, r8
 800a01e:	47d0      	blx	sl
 800a020:	3001      	adds	r0, #1
 800a022:	d09d      	beq.n	8009f60 <_printf_i+0x160>
 800a024:	3501      	adds	r5, #1
 800a026:	68e3      	ldr	r3, [r4, #12]
 800a028:	9903      	ldr	r1, [sp, #12]
 800a02a:	1a5b      	subs	r3, r3, r1
 800a02c:	42ab      	cmp	r3, r5
 800a02e:	dcf2      	bgt.n	800a016 <_printf_i+0x216>
 800a030:	e7eb      	b.n	800a00a <_printf_i+0x20a>
 800a032:	2500      	movs	r5, #0
 800a034:	f104 0619 	add.w	r6, r4, #25
 800a038:	e7f5      	b.n	800a026 <_printf_i+0x226>
 800a03a:	bf00      	nop
 800a03c:	08015481 	.word	0x08015481
 800a040:	08015492 	.word	0x08015492

0800a044 <__sflush_r>:
 800a044:	898a      	ldrh	r2, [r1, #12]
 800a046:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a04a:	4605      	mov	r5, r0
 800a04c:	0710      	lsls	r0, r2, #28
 800a04e:	460c      	mov	r4, r1
 800a050:	d458      	bmi.n	800a104 <__sflush_r+0xc0>
 800a052:	684b      	ldr	r3, [r1, #4]
 800a054:	2b00      	cmp	r3, #0
 800a056:	dc05      	bgt.n	800a064 <__sflush_r+0x20>
 800a058:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	dc02      	bgt.n	800a064 <__sflush_r+0x20>
 800a05e:	2000      	movs	r0, #0
 800a060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a064:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a066:	2e00      	cmp	r6, #0
 800a068:	d0f9      	beq.n	800a05e <__sflush_r+0x1a>
 800a06a:	2300      	movs	r3, #0
 800a06c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a070:	682f      	ldr	r7, [r5, #0]
 800a072:	6a21      	ldr	r1, [r4, #32]
 800a074:	602b      	str	r3, [r5, #0]
 800a076:	d032      	beq.n	800a0de <__sflush_r+0x9a>
 800a078:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a07a:	89a3      	ldrh	r3, [r4, #12]
 800a07c:	075a      	lsls	r2, r3, #29
 800a07e:	d505      	bpl.n	800a08c <__sflush_r+0x48>
 800a080:	6863      	ldr	r3, [r4, #4]
 800a082:	1ac0      	subs	r0, r0, r3
 800a084:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a086:	b10b      	cbz	r3, 800a08c <__sflush_r+0x48>
 800a088:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a08a:	1ac0      	subs	r0, r0, r3
 800a08c:	2300      	movs	r3, #0
 800a08e:	4602      	mov	r2, r0
 800a090:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a092:	6a21      	ldr	r1, [r4, #32]
 800a094:	4628      	mov	r0, r5
 800a096:	47b0      	blx	r6
 800a098:	1c43      	adds	r3, r0, #1
 800a09a:	89a3      	ldrh	r3, [r4, #12]
 800a09c:	d106      	bne.n	800a0ac <__sflush_r+0x68>
 800a09e:	6829      	ldr	r1, [r5, #0]
 800a0a0:	291d      	cmp	r1, #29
 800a0a2:	d82b      	bhi.n	800a0fc <__sflush_r+0xb8>
 800a0a4:	4a29      	ldr	r2, [pc, #164]	; (800a14c <__sflush_r+0x108>)
 800a0a6:	410a      	asrs	r2, r1
 800a0a8:	07d6      	lsls	r6, r2, #31
 800a0aa:	d427      	bmi.n	800a0fc <__sflush_r+0xb8>
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	6062      	str	r2, [r4, #4]
 800a0b0:	04d9      	lsls	r1, r3, #19
 800a0b2:	6922      	ldr	r2, [r4, #16]
 800a0b4:	6022      	str	r2, [r4, #0]
 800a0b6:	d504      	bpl.n	800a0c2 <__sflush_r+0x7e>
 800a0b8:	1c42      	adds	r2, r0, #1
 800a0ba:	d101      	bne.n	800a0c0 <__sflush_r+0x7c>
 800a0bc:	682b      	ldr	r3, [r5, #0]
 800a0be:	b903      	cbnz	r3, 800a0c2 <__sflush_r+0x7e>
 800a0c0:	6560      	str	r0, [r4, #84]	; 0x54
 800a0c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0c4:	602f      	str	r7, [r5, #0]
 800a0c6:	2900      	cmp	r1, #0
 800a0c8:	d0c9      	beq.n	800a05e <__sflush_r+0x1a>
 800a0ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0ce:	4299      	cmp	r1, r3
 800a0d0:	d002      	beq.n	800a0d8 <__sflush_r+0x94>
 800a0d2:	4628      	mov	r0, r5
 800a0d4:	f7ff fc96 	bl	8009a04 <_free_r>
 800a0d8:	2000      	movs	r0, #0
 800a0da:	6360      	str	r0, [r4, #52]	; 0x34
 800a0dc:	e7c0      	b.n	800a060 <__sflush_r+0x1c>
 800a0de:	2301      	movs	r3, #1
 800a0e0:	4628      	mov	r0, r5
 800a0e2:	47b0      	blx	r6
 800a0e4:	1c41      	adds	r1, r0, #1
 800a0e6:	d1c8      	bne.n	800a07a <__sflush_r+0x36>
 800a0e8:	682b      	ldr	r3, [r5, #0]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d0c5      	beq.n	800a07a <__sflush_r+0x36>
 800a0ee:	2b1d      	cmp	r3, #29
 800a0f0:	d001      	beq.n	800a0f6 <__sflush_r+0xb2>
 800a0f2:	2b16      	cmp	r3, #22
 800a0f4:	d101      	bne.n	800a0fa <__sflush_r+0xb6>
 800a0f6:	602f      	str	r7, [r5, #0]
 800a0f8:	e7b1      	b.n	800a05e <__sflush_r+0x1a>
 800a0fa:	89a3      	ldrh	r3, [r4, #12]
 800a0fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a100:	81a3      	strh	r3, [r4, #12]
 800a102:	e7ad      	b.n	800a060 <__sflush_r+0x1c>
 800a104:	690f      	ldr	r7, [r1, #16]
 800a106:	2f00      	cmp	r7, #0
 800a108:	d0a9      	beq.n	800a05e <__sflush_r+0x1a>
 800a10a:	0793      	lsls	r3, r2, #30
 800a10c:	680e      	ldr	r6, [r1, #0]
 800a10e:	bf08      	it	eq
 800a110:	694b      	ldreq	r3, [r1, #20]
 800a112:	600f      	str	r7, [r1, #0]
 800a114:	bf18      	it	ne
 800a116:	2300      	movne	r3, #0
 800a118:	eba6 0807 	sub.w	r8, r6, r7
 800a11c:	608b      	str	r3, [r1, #8]
 800a11e:	f1b8 0f00 	cmp.w	r8, #0
 800a122:	dd9c      	ble.n	800a05e <__sflush_r+0x1a>
 800a124:	6a21      	ldr	r1, [r4, #32]
 800a126:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a128:	4643      	mov	r3, r8
 800a12a:	463a      	mov	r2, r7
 800a12c:	4628      	mov	r0, r5
 800a12e:	47b0      	blx	r6
 800a130:	2800      	cmp	r0, #0
 800a132:	dc06      	bgt.n	800a142 <__sflush_r+0xfe>
 800a134:	89a3      	ldrh	r3, [r4, #12]
 800a136:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a13a:	81a3      	strh	r3, [r4, #12]
 800a13c:	f04f 30ff 	mov.w	r0, #4294967295
 800a140:	e78e      	b.n	800a060 <__sflush_r+0x1c>
 800a142:	4407      	add	r7, r0
 800a144:	eba8 0800 	sub.w	r8, r8, r0
 800a148:	e7e9      	b.n	800a11e <__sflush_r+0xda>
 800a14a:	bf00      	nop
 800a14c:	dfbffffe 	.word	0xdfbffffe

0800a150 <_fflush_r>:
 800a150:	b538      	push	{r3, r4, r5, lr}
 800a152:	690b      	ldr	r3, [r1, #16]
 800a154:	4605      	mov	r5, r0
 800a156:	460c      	mov	r4, r1
 800a158:	b913      	cbnz	r3, 800a160 <_fflush_r+0x10>
 800a15a:	2500      	movs	r5, #0
 800a15c:	4628      	mov	r0, r5
 800a15e:	bd38      	pop	{r3, r4, r5, pc}
 800a160:	b118      	cbz	r0, 800a16a <_fflush_r+0x1a>
 800a162:	6a03      	ldr	r3, [r0, #32]
 800a164:	b90b      	cbnz	r3, 800a16a <_fflush_r+0x1a>
 800a166:	f7ff fa45 	bl	80095f4 <__sinit>
 800a16a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d0f3      	beq.n	800a15a <_fflush_r+0xa>
 800a172:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a174:	07d0      	lsls	r0, r2, #31
 800a176:	d404      	bmi.n	800a182 <_fflush_r+0x32>
 800a178:	0599      	lsls	r1, r3, #22
 800a17a:	d402      	bmi.n	800a182 <_fflush_r+0x32>
 800a17c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a17e:	f7ff fc3e 	bl	80099fe <__retarget_lock_acquire_recursive>
 800a182:	4628      	mov	r0, r5
 800a184:	4621      	mov	r1, r4
 800a186:	f7ff ff5d 	bl	800a044 <__sflush_r>
 800a18a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a18c:	07da      	lsls	r2, r3, #31
 800a18e:	4605      	mov	r5, r0
 800a190:	d4e4      	bmi.n	800a15c <_fflush_r+0xc>
 800a192:	89a3      	ldrh	r3, [r4, #12]
 800a194:	059b      	lsls	r3, r3, #22
 800a196:	d4e1      	bmi.n	800a15c <_fflush_r+0xc>
 800a198:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a19a:	f7ff fc31 	bl	8009a00 <__retarget_lock_release_recursive>
 800a19e:	e7dd      	b.n	800a15c <_fflush_r+0xc>

0800a1a0 <__swhatbuf_r>:
 800a1a0:	b570      	push	{r4, r5, r6, lr}
 800a1a2:	460c      	mov	r4, r1
 800a1a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1a8:	2900      	cmp	r1, #0
 800a1aa:	b096      	sub	sp, #88	; 0x58
 800a1ac:	4615      	mov	r5, r2
 800a1ae:	461e      	mov	r6, r3
 800a1b0:	da0d      	bge.n	800a1ce <__swhatbuf_r+0x2e>
 800a1b2:	89a3      	ldrh	r3, [r4, #12]
 800a1b4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a1b8:	f04f 0100 	mov.w	r1, #0
 800a1bc:	bf0c      	ite	eq
 800a1be:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a1c2:	2340      	movne	r3, #64	; 0x40
 800a1c4:	2000      	movs	r0, #0
 800a1c6:	6031      	str	r1, [r6, #0]
 800a1c8:	602b      	str	r3, [r5, #0]
 800a1ca:	b016      	add	sp, #88	; 0x58
 800a1cc:	bd70      	pop	{r4, r5, r6, pc}
 800a1ce:	466a      	mov	r2, sp
 800a1d0:	f000 f848 	bl	800a264 <_fstat_r>
 800a1d4:	2800      	cmp	r0, #0
 800a1d6:	dbec      	blt.n	800a1b2 <__swhatbuf_r+0x12>
 800a1d8:	9901      	ldr	r1, [sp, #4]
 800a1da:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a1de:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a1e2:	4259      	negs	r1, r3
 800a1e4:	4159      	adcs	r1, r3
 800a1e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1ea:	e7eb      	b.n	800a1c4 <__swhatbuf_r+0x24>

0800a1ec <__smakebuf_r>:
 800a1ec:	898b      	ldrh	r3, [r1, #12]
 800a1ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a1f0:	079d      	lsls	r5, r3, #30
 800a1f2:	4606      	mov	r6, r0
 800a1f4:	460c      	mov	r4, r1
 800a1f6:	d507      	bpl.n	800a208 <__smakebuf_r+0x1c>
 800a1f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a1fc:	6023      	str	r3, [r4, #0]
 800a1fe:	6123      	str	r3, [r4, #16]
 800a200:	2301      	movs	r3, #1
 800a202:	6163      	str	r3, [r4, #20]
 800a204:	b002      	add	sp, #8
 800a206:	bd70      	pop	{r4, r5, r6, pc}
 800a208:	ab01      	add	r3, sp, #4
 800a20a:	466a      	mov	r2, sp
 800a20c:	f7ff ffc8 	bl	800a1a0 <__swhatbuf_r>
 800a210:	9900      	ldr	r1, [sp, #0]
 800a212:	4605      	mov	r5, r0
 800a214:	4630      	mov	r0, r6
 800a216:	f7ff f8d5 	bl	80093c4 <_malloc_r>
 800a21a:	b948      	cbnz	r0, 800a230 <__smakebuf_r+0x44>
 800a21c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a220:	059a      	lsls	r2, r3, #22
 800a222:	d4ef      	bmi.n	800a204 <__smakebuf_r+0x18>
 800a224:	f023 0303 	bic.w	r3, r3, #3
 800a228:	f043 0302 	orr.w	r3, r3, #2
 800a22c:	81a3      	strh	r3, [r4, #12]
 800a22e:	e7e3      	b.n	800a1f8 <__smakebuf_r+0xc>
 800a230:	89a3      	ldrh	r3, [r4, #12]
 800a232:	6020      	str	r0, [r4, #0]
 800a234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a238:	81a3      	strh	r3, [r4, #12]
 800a23a:	9b00      	ldr	r3, [sp, #0]
 800a23c:	6163      	str	r3, [r4, #20]
 800a23e:	9b01      	ldr	r3, [sp, #4]
 800a240:	6120      	str	r0, [r4, #16]
 800a242:	b15b      	cbz	r3, 800a25c <__smakebuf_r+0x70>
 800a244:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a248:	4630      	mov	r0, r6
 800a24a:	f000 f81d 	bl	800a288 <_isatty_r>
 800a24e:	b128      	cbz	r0, 800a25c <__smakebuf_r+0x70>
 800a250:	89a3      	ldrh	r3, [r4, #12]
 800a252:	f023 0303 	bic.w	r3, r3, #3
 800a256:	f043 0301 	orr.w	r3, r3, #1
 800a25a:	81a3      	strh	r3, [r4, #12]
 800a25c:	89a3      	ldrh	r3, [r4, #12]
 800a25e:	431d      	orrs	r5, r3
 800a260:	81a5      	strh	r5, [r4, #12]
 800a262:	e7cf      	b.n	800a204 <__smakebuf_r+0x18>

0800a264 <_fstat_r>:
 800a264:	b538      	push	{r3, r4, r5, lr}
 800a266:	4d07      	ldr	r5, [pc, #28]	; (800a284 <_fstat_r+0x20>)
 800a268:	2300      	movs	r3, #0
 800a26a:	4604      	mov	r4, r0
 800a26c:	4608      	mov	r0, r1
 800a26e:	4611      	mov	r1, r2
 800a270:	602b      	str	r3, [r5, #0]
 800a272:	f000 fae3 	bl	800a83c <_fstat>
 800a276:	1c43      	adds	r3, r0, #1
 800a278:	d102      	bne.n	800a280 <_fstat_r+0x1c>
 800a27a:	682b      	ldr	r3, [r5, #0]
 800a27c:	b103      	cbz	r3, 800a280 <_fstat_r+0x1c>
 800a27e:	6023      	str	r3, [r4, #0]
 800a280:	bd38      	pop	{r3, r4, r5, pc}
 800a282:	bf00      	nop
 800a284:	20001180 	.word	0x20001180

0800a288 <_isatty_r>:
 800a288:	b538      	push	{r3, r4, r5, lr}
 800a28a:	4d06      	ldr	r5, [pc, #24]	; (800a2a4 <_isatty_r+0x1c>)
 800a28c:	2300      	movs	r3, #0
 800a28e:	4604      	mov	r4, r0
 800a290:	4608      	mov	r0, r1
 800a292:	602b      	str	r3, [r5, #0]
 800a294:	f000 fada 	bl	800a84c <_isatty>
 800a298:	1c43      	adds	r3, r0, #1
 800a29a:	d102      	bne.n	800a2a2 <_isatty_r+0x1a>
 800a29c:	682b      	ldr	r3, [r5, #0]
 800a29e:	b103      	cbz	r3, 800a2a2 <_isatty_r+0x1a>
 800a2a0:	6023      	str	r3, [r4, #0]
 800a2a2:	bd38      	pop	{r3, r4, r5, pc}
 800a2a4:	20001180 	.word	0x20001180

0800a2a8 <expf>:
 800a2a8:	b508      	push	{r3, lr}
 800a2aa:	ed2d 8b02 	vpush	{d8}
 800a2ae:	eef0 8a40 	vmov.f32	s17, s0
 800a2b2:	f000 f9ed 	bl	800a690 <__ieee754_expf>
 800a2b6:	eeb0 8a40 	vmov.f32	s16, s0
 800a2ba:	eeb0 0a68 	vmov.f32	s0, s17
 800a2be:	f000 f899 	bl	800a3f4 <finitef>
 800a2c2:	b160      	cbz	r0, 800a2de <expf+0x36>
 800a2c4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800a304 <expf+0x5c>
 800a2c8:	eef4 8ae7 	vcmpe.f32	s17, s15
 800a2cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2d0:	dd0a      	ble.n	800a2e8 <expf+0x40>
 800a2d2:	f7ff fb69 	bl	80099a8 <__errno>
 800a2d6:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 800a308 <expf+0x60>
 800a2da:	2322      	movs	r3, #34	; 0x22
 800a2dc:	6003      	str	r3, [r0, #0]
 800a2de:	eeb0 0a48 	vmov.f32	s0, s16
 800a2e2:	ecbd 8b02 	vpop	{d8}
 800a2e6:	bd08      	pop	{r3, pc}
 800a2e8:	eddf 7a08 	vldr	s15, [pc, #32]	; 800a30c <expf+0x64>
 800a2ec:	eef4 8ae7 	vcmpe.f32	s17, s15
 800a2f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2f4:	d5f3      	bpl.n	800a2de <expf+0x36>
 800a2f6:	f7ff fb57 	bl	80099a8 <__errno>
 800a2fa:	2322      	movs	r3, #34	; 0x22
 800a2fc:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800a310 <expf+0x68>
 800a300:	6003      	str	r3, [r0, #0]
 800a302:	e7ec      	b.n	800a2de <expf+0x36>
 800a304:	42b17217 	.word	0x42b17217
 800a308:	7f800000 	.word	0x7f800000
 800a30c:	c2cff1b5 	.word	0xc2cff1b5
 800a310:	00000000 	.word	0x00000000

0800a314 <fabsf>:
 800a314:	ee10 3a10 	vmov	r3, s0
 800a318:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a31c:	ee00 3a10 	vmov	s0, r3
 800a320:	4770      	bx	lr
	...

0800a324 <tanhf>:
 800a324:	b538      	push	{r3, r4, r5, lr}
 800a326:	ee10 5a10 	vmov	r5, s0
 800a32a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a32e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a332:	ed2d 8b02 	vpush	{d8}
 800a336:	db0f      	blt.n	800a358 <tanhf+0x34>
 800a338:	4b2a      	ldr	r3, [pc, #168]	; (800a3e4 <tanhf+0xc0>)
 800a33a:	ed93 6a00 	vldr	s12, [r3]
 800a33e:	edd3 6a00 	vldr	s13, [r3]
 800a342:	eec6 7a00 	vdiv.f32	s15, s12, s0
 800a346:	2d00      	cmp	r5, #0
 800a348:	bfac      	ite	ge
 800a34a:	ee37 0aa6 	vaddge.f32	s0, s15, s13
 800a34e:	ee37 0ae6 	vsublt.f32	s0, s15, s13
 800a352:	ecbd 8b02 	vpop	{d8}
 800a356:	bd38      	pop	{r3, r4, r5, pc}
 800a358:	4a23      	ldr	r2, [pc, #140]	; (800a3e8 <tanhf+0xc4>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	dc39      	bgt.n	800a3d2 <tanhf+0xae>
 800a35e:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 800a362:	da07      	bge.n	800a374 <tanhf+0x50>
 800a364:	4b1f      	ldr	r3, [pc, #124]	; (800a3e4 <tanhf+0xc0>)
 800a366:	edd3 7a00 	vldr	s15, [r3]
 800a36a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a36e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a372:	e7ee      	b.n	800a352 <tanhf+0x2e>
 800a374:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800a378:	4c1c      	ldr	r4, [pc, #112]	; (800a3ec <tanhf+0xc8>)
 800a37a:	db19      	blt.n	800a3b0 <tanhf+0x8c>
 800a37c:	f7ff ffca 	bl	800a314 <fabsf>
 800a380:	edd4 7a00 	vldr	s15, [r4]
 800a384:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a388:	f000 f842 	bl	800a410 <expm1f>
 800a38c:	4b15      	ldr	r3, [pc, #84]	; (800a3e4 <tanhf+0xc0>)
 800a38e:	edd3 7a00 	vldr	s15, [r3]
 800a392:	edd4 6a00 	vldr	s13, [r4]
 800a396:	ed94 7a00 	vldr	s14, [r4]
 800a39a:	ee37 0a00 	vadd.f32	s0, s14, s0
 800a39e:	ee86 7a80 	vdiv.f32	s14, s13, s0
 800a3a2:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800a3a6:	2d00      	cmp	r5, #0
 800a3a8:	bfb8      	it	lt
 800a3aa:	eeb1 0a40 	vneglt.f32	s0, s0
 800a3ae:	e7d0      	b.n	800a352 <tanhf+0x2e>
 800a3b0:	ed94 8a00 	vldr	s16, [r4]
 800a3b4:	f7ff ffae 	bl	800a314 <fabsf>
 800a3b8:	ee28 0a40 	vnmul.f32	s0, s16, s0
 800a3bc:	f000 f828 	bl	800a410 <expm1f>
 800a3c0:	edd4 7a00 	vldr	s15, [r4]
 800a3c4:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a3c8:	eeb1 7a40 	vneg.f32	s14, s0
 800a3cc:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800a3d0:	e7e9      	b.n	800a3a6 <tanhf+0x82>
 800a3d2:	4b04      	ldr	r3, [pc, #16]	; (800a3e4 <tanhf+0xc0>)
 800a3d4:	ed93 0a00 	vldr	s0, [r3]
 800a3d8:	4b05      	ldr	r3, [pc, #20]	; (800a3f0 <tanhf+0xcc>)
 800a3da:	edd3 7a00 	vldr	s15, [r3]
 800a3de:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a3e2:	e7e0      	b.n	800a3a6 <tanhf+0x82>
 800a3e4:	2000097c 	.word	0x2000097c
 800a3e8:	41afffff 	.word	0x41afffff
 800a3ec:	20000984 	.word	0x20000984
 800a3f0:	20000980 	.word	0x20000980

0800a3f4 <finitef>:
 800a3f4:	b082      	sub	sp, #8
 800a3f6:	ed8d 0a01 	vstr	s0, [sp, #4]
 800a3fa:	9801      	ldr	r0, [sp, #4]
 800a3fc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800a400:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800a404:	bfac      	ite	ge
 800a406:	2000      	movge	r0, #0
 800a408:	2001      	movlt	r0, #1
 800a40a:	b002      	add	sp, #8
 800a40c:	4770      	bx	lr
	...

0800a410 <expm1f>:
 800a410:	ee10 2a10 	vmov	r2, s0
 800a414:	497e      	ldr	r1, [pc, #504]	; (800a610 <expm1f+0x200>)
 800a416:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800a41a:	428b      	cmp	r3, r1
 800a41c:	d921      	bls.n	800a462 <expm1f+0x52>
 800a41e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a422:	d902      	bls.n	800a42a <expm1f+0x1a>
 800a424:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a428:	4770      	bx	lr
 800a42a:	d106      	bne.n	800a43a <expm1f+0x2a>
 800a42c:	2a00      	cmp	r2, #0
 800a42e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800a432:	bfb8      	it	lt
 800a434:	eeb0 0a67 	vmovlt.f32	s0, s15
 800a438:	4770      	bx	lr
 800a43a:	2a00      	cmp	r2, #0
 800a43c:	db05      	blt.n	800a44a <expm1f+0x3a>
 800a43e:	4975      	ldr	r1, [pc, #468]	; (800a614 <expm1f+0x204>)
 800a440:	428b      	cmp	r3, r1
 800a442:	d95c      	bls.n	800a4fe <expm1f+0xee>
 800a444:	2000      	movs	r0, #0
 800a446:	f000 b91d 	b.w	800a684 <__math_oflowf>
 800a44a:	eddf 7a73 	vldr	s15, [pc, #460]	; 800a618 <expm1f+0x208>
 800a44e:	ee70 7a27 	vadd.f32	s15, s0, s15
 800a452:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a45a:	d550      	bpl.n	800a4fe <expm1f+0xee>
 800a45c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800a460:	4770      	bx	lr
 800a462:	496e      	ldr	r1, [pc, #440]	; (800a61c <expm1f+0x20c>)
 800a464:	428b      	cmp	r3, r1
 800a466:	d967      	bls.n	800a538 <expm1f+0x128>
 800a468:	496d      	ldr	r1, [pc, #436]	; (800a620 <expm1f+0x210>)
 800a46a:	428b      	cmp	r3, r1
 800a46c:	d847      	bhi.n	800a4fe <expm1f+0xee>
 800a46e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800a624 <expm1f+0x214>
 800a472:	2a00      	cmp	r2, #0
 800a474:	bfa7      	ittee	ge
 800a476:	ee30 7a47 	vsubge.f32	s14, s0, s14
 800a47a:	eddf 6a6b 	vldrge	s13, [pc, #428]	; 800a628 <expm1f+0x218>
 800a47e:	eddf 6a6b 	vldrlt	s13, [pc, #428]	; 800a62c <expm1f+0x21c>
 800a482:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 800a486:	bfac      	ite	ge
 800a488:	2301      	movge	r3, #1
 800a48a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a48e:	ee37 0a66 	vsub.f32	s0, s14, s13
 800a492:	ee77 7a40 	vsub.f32	s15, s14, s0
 800a496:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a49a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800a49e:	ee20 4a25 	vmul.f32	s8, s0, s11
 800a4a2:	ed9f 6a63 	vldr	s12, [pc, #396]	; 800a630 <expm1f+0x220>
 800a4a6:	eddf 6a63 	vldr	s13, [pc, #396]	; 800a634 <expm1f+0x224>
 800a4aa:	ed9f 5a63 	vldr	s10, [pc, #396]	; 800a638 <expm1f+0x228>
 800a4ae:	ee20 7a04 	vmul.f32	s14, s0, s8
 800a4b2:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 800a4b6:	eee7 6a06 	vfma.f32	s13, s14, s12
 800a4ba:	ed9f 6a60 	vldr	s12, [pc, #384]	; 800a63c <expm1f+0x22c>
 800a4be:	eea6 6a87 	vfma.f32	s12, s13, s14
 800a4c2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a640 <expm1f+0x230>
 800a4c6:	eee6 6a07 	vfma.f32	s13, s12, s14
 800a4ca:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a4ce:	eea6 5a87 	vfma.f32	s10, s13, s14
 800a4d2:	eef0 6a46 	vmov.f32	s13, s12
 800a4d6:	eee5 6a07 	vfma.f32	s13, s10, s14
 800a4da:	eee4 4a66 	vfms.f32	s9, s8, s13
 800a4de:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 800a4e2:	eea0 4a64 	vfms.f32	s8, s0, s9
 800a4e6:	ee36 5ae4 	vsub.f32	s10, s13, s9
 800a4ea:	eec5 6a04 	vdiv.f32	s13, s10, s8
 800a4ee:	ee66 6a87 	vmul.f32	s13, s13, s14
 800a4f2:	bb7b      	cbnz	r3, 800a554 <expm1f+0x144>
 800a4f4:	ee90 7a26 	vfnms.f32	s14, s0, s13
 800a4f8:	ee30 0a47 	vsub.f32	s0, s0, s14
 800a4fc:	4770      	bx	lr
 800a4fe:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800a502:	2a00      	cmp	r2, #0
 800a504:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a508:	bfb8      	it	lt
 800a50a:	eef0 7a47 	vmovlt.f32	s15, s14
 800a50e:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800a644 <expm1f+0x234>
 800a512:	ee40 7a07 	vmla.f32	s15, s0, s14
 800a516:	eeb0 7a40 	vmov.f32	s14, s0
 800a51a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a51e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a522:	ee17 3a90 	vmov	r3, s15
 800a526:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800a624 <expm1f+0x214>
 800a52a:	eea6 7ae7 	vfms.f32	s14, s13, s15
 800a52e:	eddf 7a3e 	vldr	s15, [pc, #248]	; 800a628 <expm1f+0x218>
 800a532:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a536:	e7aa      	b.n	800a48e <expm1f+0x7e>
 800a538:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 800a53c:	d208      	bcs.n	800a550 <expm1f+0x140>
 800a53e:	eddf 7a42 	vldr	s15, [pc, #264]	; 800a648 <expm1f+0x238>
 800a542:	ee70 7a27 	vadd.f32	s15, s0, s15
 800a546:	ee77 7ae7 	vsub.f32	s15, s15, s15
 800a54a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a54e:	4770      	bx	lr
 800a550:	2300      	movs	r3, #0
 800a552:	e7a2      	b.n	800a49a <expm1f+0x8a>
 800a554:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800a558:	1c5a      	adds	r2, r3, #1
 800a55a:	eed6 7a80 	vfnms.f32	s15, s13, s0
 800a55e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a562:	d106      	bne.n	800a572 <expm1f+0x162>
 800a564:	ee70 7a67 	vsub.f32	s15, s0, s15
 800a568:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 800a56c:	eea7 0aa5 	vfma.f32	s0, s15, s11
 800a570:	4770      	bx	lr
 800a572:	2b01      	cmp	r3, #1
 800a574:	d118      	bne.n	800a5a8 <expm1f+0x198>
 800a576:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 800a57a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800a57e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a582:	bf5b      	ittet	pl
 800a584:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 800a588:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
 800a58c:	ee70 5a25 	vaddmi.f32	s11, s0, s11
 800a590:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 800a594:	bf43      	ittte	mi
 800a596:	ee77 7ae5 	vsubmi.f32	s15, s15, s11
 800a59a:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
 800a59e:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 800a5a2:	eeb0 0a46 	vmovpl.f32	s0, s12
 800a5a6:	4770      	bx	lr
 800a5a8:	1c5a      	adds	r2, r3, #1
 800a5aa:	2a39      	cmp	r2, #57	; 0x39
 800a5ac:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 800a5b0:	d90b      	bls.n	800a5ca <expm1f+0x1ba>
 800a5b2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a5b6:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a5ba:	ee17 3a90 	vmov	r3, s15
 800a5be:	4419      	add	r1, r3
 800a5c0:	ee07 1a90 	vmov	s15, r1
 800a5c4:	ee37 0ac6 	vsub.f32	s0, s15, s12
 800a5c8:	4770      	bx	lr
 800a5ca:	2b16      	cmp	r3, #22
 800a5cc:	dc11      	bgt.n	800a5f2 <expm1f+0x1e2>
 800a5ce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a5d2:	fa42 f303 	asr.w	r3, r2, r3
 800a5d6:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 800a5da:	ee07 3a10 	vmov	s14, r3
 800a5de:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a5e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a5e6:	ee17 3a90 	vmov	r3, s15
 800a5ea:	440b      	add	r3, r1
 800a5ec:	ee00 3a10 	vmov	s0, r3
 800a5f0:	4770      	bx	lr
 800a5f2:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800a5f6:	05db      	lsls	r3, r3, #23
 800a5f8:	ee07 3a10 	vmov	s14, r3
 800a5fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a600:	ee70 7a67 	vsub.f32	s15, s0, s15
 800a604:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a608:	ee17 3a90 	vmov	r3, s15
 800a60c:	e7ed      	b.n	800a5ea <expm1f+0x1da>
 800a60e:	bf00      	nop
 800a610:	4195b843 	.word	0x4195b843
 800a614:	42b17217 	.word	0x42b17217
 800a618:	0da24260 	.word	0x0da24260
 800a61c:	3eb17218 	.word	0x3eb17218
 800a620:	3f851591 	.word	0x3f851591
 800a624:	3f317180 	.word	0x3f317180
 800a628:	3717f7d1 	.word	0x3717f7d1
 800a62c:	b717f7d1 	.word	0xb717f7d1
 800a630:	b457edbb 	.word	0xb457edbb
 800a634:	36867e54 	.word	0x36867e54
 800a638:	bd088889 	.word	0xbd088889
 800a63c:	b8a670cd 	.word	0xb8a670cd
 800a640:	3ad00d01 	.word	0x3ad00d01
 800a644:	3fb8aa3b 	.word	0x3fb8aa3b
 800a648:	7149f2ca 	.word	0x7149f2ca

0800a64c <with_errnof>:
 800a64c:	b513      	push	{r0, r1, r4, lr}
 800a64e:	4604      	mov	r4, r0
 800a650:	ed8d 0a01 	vstr	s0, [sp, #4]
 800a654:	f7ff f9a8 	bl	80099a8 <__errno>
 800a658:	ed9d 0a01 	vldr	s0, [sp, #4]
 800a65c:	6004      	str	r4, [r0, #0]
 800a65e:	b002      	add	sp, #8
 800a660:	bd10      	pop	{r4, pc}

0800a662 <xflowf>:
 800a662:	b130      	cbz	r0, 800a672 <xflowf+0x10>
 800a664:	eef1 7a40 	vneg.f32	s15, s0
 800a668:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a66c:	2022      	movs	r0, #34	; 0x22
 800a66e:	f7ff bfed 	b.w	800a64c <with_errnof>
 800a672:	eef0 7a40 	vmov.f32	s15, s0
 800a676:	e7f7      	b.n	800a668 <xflowf+0x6>

0800a678 <__math_uflowf>:
 800a678:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a680 <__math_uflowf+0x8>
 800a67c:	f7ff bff1 	b.w	800a662 <xflowf>
 800a680:	10000000 	.word	0x10000000

0800a684 <__math_oflowf>:
 800a684:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a68c <__math_oflowf+0x8>
 800a688:	f7ff bfeb 	b.w	800a662 <xflowf>
 800a68c:	70000000 	.word	0x70000000

0800a690 <__ieee754_expf>:
 800a690:	ee10 2a10 	vmov	r2, s0
 800a694:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800a698:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a69c:	d902      	bls.n	800a6a4 <__ieee754_expf+0x14>
 800a69e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a6a2:	4770      	bx	lr
 800a6a4:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 800a6a8:	d106      	bne.n	800a6b8 <__ieee754_expf+0x28>
 800a6aa:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800a7e4 <__ieee754_expf+0x154>
 800a6ae:	2900      	cmp	r1, #0
 800a6b0:	bf18      	it	ne
 800a6b2:	eeb0 0a67 	vmovne.f32	s0, s15
 800a6b6:	4770      	bx	lr
 800a6b8:	484b      	ldr	r0, [pc, #300]	; (800a7e8 <__ieee754_expf+0x158>)
 800a6ba:	4282      	cmp	r2, r0
 800a6bc:	dd02      	ble.n	800a6c4 <__ieee754_expf+0x34>
 800a6be:	2000      	movs	r0, #0
 800a6c0:	f7ff bfe0 	b.w	800a684 <__math_oflowf>
 800a6c4:	2a00      	cmp	r2, #0
 800a6c6:	da05      	bge.n	800a6d4 <__ieee754_expf+0x44>
 800a6c8:	4a48      	ldr	r2, [pc, #288]	; (800a7ec <__ieee754_expf+0x15c>)
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	d902      	bls.n	800a6d4 <__ieee754_expf+0x44>
 800a6ce:	2000      	movs	r0, #0
 800a6d0:	f7ff bfd2 	b.w	800a678 <__math_uflowf>
 800a6d4:	4a46      	ldr	r2, [pc, #280]	; (800a7f0 <__ieee754_expf+0x160>)
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800a6dc:	d952      	bls.n	800a784 <__ieee754_expf+0xf4>
 800a6de:	4a45      	ldr	r2, [pc, #276]	; (800a7f4 <__ieee754_expf+0x164>)
 800a6e0:	4293      	cmp	r3, r2
 800a6e2:	ea4f 0281 	mov.w	r2, r1, lsl #2
 800a6e6:	d834      	bhi.n	800a752 <__ieee754_expf+0xc2>
 800a6e8:	4b43      	ldr	r3, [pc, #268]	; (800a7f8 <__ieee754_expf+0x168>)
 800a6ea:	4413      	add	r3, r2
 800a6ec:	ed93 7a00 	vldr	s14, [r3]
 800a6f0:	4b42      	ldr	r3, [pc, #264]	; (800a7fc <__ieee754_expf+0x16c>)
 800a6f2:	4413      	add	r3, r2
 800a6f4:	ee30 7a47 	vsub.f32	s14, s0, s14
 800a6f8:	f1c1 0201 	rsb	r2, r1, #1
 800a6fc:	edd3 7a00 	vldr	s15, [r3]
 800a700:	1a52      	subs	r2, r2, r1
 800a702:	ee37 0a67 	vsub.f32	s0, s14, s15
 800a706:	ee20 6a00 	vmul.f32	s12, s0, s0
 800a70a:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800a800 <__ieee754_expf+0x170>
 800a70e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a804 <__ieee754_expf+0x174>
 800a712:	eee6 6a05 	vfma.f32	s13, s12, s10
 800a716:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800a808 <__ieee754_expf+0x178>
 800a71a:	eea6 5a86 	vfma.f32	s10, s13, s12
 800a71e:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a80c <__ieee754_expf+0x17c>
 800a722:	eee5 6a06 	vfma.f32	s13, s10, s12
 800a726:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800a810 <__ieee754_expf+0x180>
 800a72a:	eea6 5a86 	vfma.f32	s10, s13, s12
 800a72e:	eef0 6a40 	vmov.f32	s13, s0
 800a732:	eee5 6a46 	vfms.f32	s13, s10, s12
 800a736:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800a73a:	ee20 5a26 	vmul.f32	s10, s0, s13
 800a73e:	bb92      	cbnz	r2, 800a7a6 <__ieee754_expf+0x116>
 800a740:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800a744:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800a748:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800a74c:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800a750:	4770      	bx	lr
 800a752:	4b30      	ldr	r3, [pc, #192]	; (800a814 <__ieee754_expf+0x184>)
 800a754:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800a818 <__ieee754_expf+0x188>
 800a758:	eddf 6a30 	vldr	s13, [pc, #192]	; 800a81c <__ieee754_expf+0x18c>
 800a75c:	4413      	add	r3, r2
 800a75e:	edd3 7a00 	vldr	s15, [r3]
 800a762:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a766:	eeb0 7a40 	vmov.f32	s14, s0
 800a76a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a76e:	ee17 2a90 	vmov	r2, s15
 800a772:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a776:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800a77a:	eddf 6a29 	vldr	s13, [pc, #164]	; 800a820 <__ieee754_expf+0x190>
 800a77e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a782:	e7be      	b.n	800a702 <__ieee754_expf+0x72>
 800a784:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 800a788:	d20b      	bcs.n	800a7a2 <__ieee754_expf+0x112>
 800a78a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a824 <__ieee754_expf+0x194>
 800a78e:	ee70 6a26 	vadd.f32	s13, s0, s13
 800a792:	eef4 6ae5 	vcmpe.f32	s13, s11
 800a796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a79a:	dd02      	ble.n	800a7a2 <__ieee754_expf+0x112>
 800a79c:	ee30 0a25 	vadd.f32	s0, s0, s11
 800a7a0:	4770      	bx	lr
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	e7af      	b.n	800a706 <__ieee754_expf+0x76>
 800a7a6:	ee36 6a66 	vsub.f32	s12, s12, s13
 800a7aa:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800a7ae:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800a7b2:	bfb8      	it	lt
 800a7b4:	3264      	addlt	r2, #100	; 0x64
 800a7b6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a7ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a7be:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800a7c2:	ee17 3a90 	vmov	r3, s15
 800a7c6:	bfab      	itete	ge
 800a7c8:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800a7cc:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800a7d0:	ee00 3a10 	vmovge	s0, r3
 800a7d4:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 800a828 <__ieee754_expf+0x198>
 800a7d8:	bfbc      	itt	lt
 800a7da:	ee00 3a10 	vmovlt	s0, r3
 800a7de:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800a7e2:	4770      	bx	lr
 800a7e4:	00000000 	.word	0x00000000
 800a7e8:	42b17217 	.word	0x42b17217
 800a7ec:	42cff1b5 	.word	0x42cff1b5
 800a7f0:	3eb17218 	.word	0x3eb17218
 800a7f4:	3f851591 	.word	0x3f851591
 800a7f8:	080154ac 	.word	0x080154ac
 800a7fc:	080154b4 	.word	0x080154b4
 800a800:	3331bb4c 	.word	0x3331bb4c
 800a804:	b5ddea0e 	.word	0xb5ddea0e
 800a808:	388ab355 	.word	0x388ab355
 800a80c:	bb360b61 	.word	0xbb360b61
 800a810:	3e2aaaab 	.word	0x3e2aaaab
 800a814:	080154a4 	.word	0x080154a4
 800a818:	3fb8aa3b 	.word	0x3fb8aa3b
 800a81c:	3f317180 	.word	0x3f317180
 800a820:	3717f7d1 	.word	0x3717f7d1
 800a824:	7149f2ca 	.word	0x7149f2ca
 800a828:	0d800000 	.word	0x0d800000

0800a82c <_close>:
 800a82c:	4b02      	ldr	r3, [pc, #8]	; (800a838 <_close+0xc>)
 800a82e:	2258      	movs	r2, #88	; 0x58
 800a830:	601a      	str	r2, [r3, #0]
 800a832:	f04f 30ff 	mov.w	r0, #4294967295
 800a836:	4770      	bx	lr
 800a838:	20001180 	.word	0x20001180

0800a83c <_fstat>:
 800a83c:	4b02      	ldr	r3, [pc, #8]	; (800a848 <_fstat+0xc>)
 800a83e:	2258      	movs	r2, #88	; 0x58
 800a840:	601a      	str	r2, [r3, #0]
 800a842:	f04f 30ff 	mov.w	r0, #4294967295
 800a846:	4770      	bx	lr
 800a848:	20001180 	.word	0x20001180

0800a84c <_isatty>:
 800a84c:	4b02      	ldr	r3, [pc, #8]	; (800a858 <_isatty+0xc>)
 800a84e:	2258      	movs	r2, #88	; 0x58
 800a850:	601a      	str	r2, [r3, #0]
 800a852:	2000      	movs	r0, #0
 800a854:	4770      	bx	lr
 800a856:	bf00      	nop
 800a858:	20001180 	.word	0x20001180

0800a85c <_lseek>:
 800a85c:	4b02      	ldr	r3, [pc, #8]	; (800a868 <_lseek+0xc>)
 800a85e:	2258      	movs	r2, #88	; 0x58
 800a860:	601a      	str	r2, [r3, #0]
 800a862:	f04f 30ff 	mov.w	r0, #4294967295
 800a866:	4770      	bx	lr
 800a868:	20001180 	.word	0x20001180

0800a86c <_read>:
 800a86c:	4b02      	ldr	r3, [pc, #8]	; (800a878 <_read+0xc>)
 800a86e:	2258      	movs	r2, #88	; 0x58
 800a870:	601a      	str	r2, [r3, #0]
 800a872:	f04f 30ff 	mov.w	r0, #4294967295
 800a876:	4770      	bx	lr
 800a878:	20001180 	.word	0x20001180

0800a87c <_write>:
 800a87c:	4b02      	ldr	r3, [pc, #8]	; (800a888 <_write+0xc>)
 800a87e:	2258      	movs	r2, #88	; 0x58
 800a880:	601a      	str	r2, [r3, #0]
 800a882:	f04f 30ff 	mov.w	r0, #4294967295
 800a886:	4770      	bx	lr
 800a888:	20001180 	.word	0x20001180

0800a88c <_init>:
 800a88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a88e:	bf00      	nop
 800a890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a892:	bc08      	pop	{r3}
 800a894:	469e      	mov	lr, r3
 800a896:	4770      	bx	lr

0800a898 <_fini>:
 800a898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a89a:	bf00      	nop
 800a89c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a89e:	bc08      	pop	{r3}
 800a8a0:	469e      	mov	lr, r3
 800a8a2:	4770      	bx	lr
