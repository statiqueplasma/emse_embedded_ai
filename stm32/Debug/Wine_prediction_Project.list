
Wine_prediction_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009df0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00007c2c  08009fc0  08009fc0  00019fc0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011bec  08011bec  00030988  2**0
                  CONTENTS
  4 .ARM          00000008  08011bec  08011bec  00021bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011bf4  08011bf4  00030988  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011bf4  08011bf4  00021bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011bf8  08011bf8  00021bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000988  20000000  08011bfc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000770  200009a0  08012584  000309a0  2**5
                  ALLOC
 10 ._user_heap_stack 00001000  20001110  08012584  00031110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030988  2**0
                  CONTENTS, READONLY
 12 .comment      00000093  00000000  00000000  000309b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a191  00000000  00000000  00030a4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035d6  00000000  00000000  0004abdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013c8  00000000  00000000  0004e1b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f4e  00000000  00000000  0004f580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00035ab6  00000000  00000000  000504ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c09e  00000000  00000000  00085f84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0013ca3b  00000000  00000000  000a2022  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005bc4  00000000  00000000  001dea60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008e  00000000  00000000  001e4624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200009a0 	.word	0x200009a0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08009f98 	.word	0x08009f98

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200009a4 	.word	0x200009a4
 80001fc:	08009f98 	.word	0x08009f98

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a0:	f001 f823 	bl	80015ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a4:	f000 f815 	bl	80005d2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a8:	f000 fa6c 	bl	8000a84 <MX_GPIO_Init>
  MX_CRC_Init();
 80005ac:	f000 f864 	bl	8000678 <MX_CRC_Init>
  MX_FMC_Init();
 80005b0:	f000 fa02 	bl	80009b8 <MX_FMC_Init>
  MX_I2C1_Init();
 80005b4:	f000 f882 	bl	80006bc <MX_I2C1_Init>
  MX_SAI1_Init();
 80005b8:	f000 f8c0 	bl	800073c <MX_SAI1_Init>
  //MX_SDMMC1_SD_Init();
  MX_SPI2_Init();
 80005bc:	f000 f926 	bl	800080c <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80005c0:	f000 f962 	bl	8000888 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80005c4:	f000 f9ac 	bl	8000920 <MX_USART3_UART_Init>
  //MX_USB_OTG_FS_PCD_Init();
  MX_X_CUBE_AI_Init();
 80005c8:	f005 ffa4 	bl	8006514 <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
  MX_X_CUBE_AI_Process();
 80005cc:	f005 ffb0 	bl	8006530 <MX_X_CUBE_AI_Process>
 80005d0:	e7fc      	b.n	80005cc <main+0x30>

080005d2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d2:	b580      	push	{r7, lr}
 80005d4:	b096      	sub	sp, #88	; 0x58
 80005d6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d8:	f107 0314 	add.w	r3, r7, #20
 80005dc:	2244      	movs	r2, #68	; 0x44
 80005de:	2100      	movs	r1, #0
 80005e0:	4618      	mov	r0, r3
 80005e2:	f008 fd09 	bl	8008ff8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e6:	463b      	mov	r3, r7
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80005f4:	2000      	movs	r0, #0
 80005f6:	f001 fd41 	bl	800207c <HAL_PWREx_ControlVoltageScaling>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000600:	f000 fc5e 	bl	8000ec0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
 8000604:	2330      	movs	r3, #48	; 0x30
 8000606:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000608:	2301      	movs	r3, #1
 800060a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800060c:	2301      	movs	r3, #1
 800060e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000610:	2300      	movs	r3, #0
 8000612:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000614:	2360      	movs	r3, #96	; 0x60
 8000616:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000618:	2302      	movs	r3, #2
 800061a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800061c:	2301      	movs	r3, #1
 800061e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000620:	2301      	movs	r3, #1
 8000622:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000624:	233c      	movs	r3, #60	; 0x3c
 8000626:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 8000628:	2305      	movs	r3, #5
 800062a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800062c:	2302      	movs	r3, #2
 800062e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000630:	2302      	movs	r3, #2
 8000632:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000634:	f107 0314 	add.w	r3, r7, #20
 8000638:	4618      	mov	r0, r3
 800063a:	f001 fdd3 	bl	80021e4 <HAL_RCC_OscConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000644:	f000 fc3c 	bl	8000ec0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000648:	230f      	movs	r3, #15
 800064a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064c:	2303      	movs	r3, #3
 800064e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800065c:	463b      	mov	r3, r7
 800065e:	2105      	movs	r1, #5
 8000660:	4618      	mov	r0, r3
 8000662:	f002 f9d9 	bl	8002a18 <HAL_RCC_ClockConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800066c:	f000 fc28 	bl	8000ec0 <Error_Handler>
  }
}
 8000670:	bf00      	nop
 8000672:	3758      	adds	r7, #88	; 0x58
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800067c:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <MX_CRC_Init+0x3c>)
 800067e:	4a0e      	ldr	r2, [pc, #56]	; (80006b8 <MX_CRC_Init+0x40>)
 8000680:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000682:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <MX_CRC_Init+0x3c>)
 8000684:	2200      	movs	r2, #0
 8000686:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000688:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <MX_CRC_Init+0x3c>)
 800068a:	2200      	movs	r2, #0
 800068c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800068e:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <MX_CRC_Init+0x3c>)
 8000690:	2200      	movs	r2, #0
 8000692:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000694:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <MX_CRC_Init+0x3c>)
 8000696:	2200      	movs	r2, #0
 8000698:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800069a:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <MX_CRC_Init+0x3c>)
 800069c:	2201      	movs	r2, #1
 800069e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006a0:	4804      	ldr	r0, [pc, #16]	; (80006b4 <MX_CRC_Init+0x3c>)
 80006a2:	f001 f8fd 	bl	80018a0 <HAL_CRC_Init>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80006ac:	f000 fc08 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	200009bc 	.word	0x200009bc
 80006b8:	40023000 	.word	0x40023000

080006bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006c0:	4b1b      	ldr	r3, [pc, #108]	; (8000730 <MX_I2C1_Init+0x74>)
 80006c2:	4a1c      	ldr	r2, [pc, #112]	; (8000734 <MX_I2C1_Init+0x78>)
 80006c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80006c6:	4b1a      	ldr	r3, [pc, #104]	; (8000730 <MX_I2C1_Init+0x74>)
 80006c8:	4a1b      	ldr	r2, [pc, #108]	; (8000738 <MX_I2C1_Init+0x7c>)
 80006ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006cc:	4b18      	ldr	r3, [pc, #96]	; (8000730 <MX_I2C1_Init+0x74>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d2:	4b17      	ldr	r3, [pc, #92]	; (8000730 <MX_I2C1_Init+0x74>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d8:	4b15      	ldr	r3, [pc, #84]	; (8000730 <MX_I2C1_Init+0x74>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006de:	4b14      	ldr	r3, [pc, #80]	; (8000730 <MX_I2C1_Init+0x74>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006e4:	4b12      	ldr	r3, [pc, #72]	; (8000730 <MX_I2C1_Init+0x74>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ea:	4b11      	ldr	r3, [pc, #68]	; (8000730 <MX_I2C1_Init+0x74>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f0:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <MX_I2C1_Init+0x74>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006f6:	480e      	ldr	r0, [pc, #56]	; (8000730 <MX_I2C1_Init+0x74>)
 80006f8:	f001 fb6e 	bl	8001dd8 <HAL_I2C_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000702:	f000 fbdd 	bl	8000ec0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000706:	2100      	movs	r1, #0
 8000708:	4809      	ldr	r0, [pc, #36]	; (8000730 <MX_I2C1_Init+0x74>)
 800070a:	f001 fc00 	bl	8001f0e <HAL_I2CEx_ConfigAnalogFilter>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000714:	f000 fbd4 	bl	8000ec0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000718:	2100      	movs	r1, #0
 800071a:	4805      	ldr	r0, [pc, #20]	; (8000730 <MX_I2C1_Init+0x74>)
 800071c:	f001 fc42 	bl	8001fa4 <HAL_I2CEx_ConfigDigitalFilter>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000726:	f000 fbcb 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	200009e0 	.word	0x200009e0
 8000734:	40005400 	.word	0x40005400
 8000738:	307075b1 	.word	0x307075b1

0800073c <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000740:	4b2f      	ldr	r3, [pc, #188]	; (8000800 <MX_SAI1_Init+0xc4>)
 8000742:	4a30      	ldr	r2, [pc, #192]	; (8000804 <MX_SAI1_Init+0xc8>)
 8000744:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000746:	4b2e      	ldr	r3, [pc, #184]	; (8000800 <MX_SAI1_Init+0xc4>)
 8000748:	2200      	movs	r2, #0
 800074a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800074c:	4b2c      	ldr	r3, [pc, #176]	; (8000800 <MX_SAI1_Init+0xc4>)
 800074e:	2200      	movs	r2, #0
 8000750:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000752:	4b2b      	ldr	r3, [pc, #172]	; (8000800 <MX_SAI1_Init+0xc4>)
 8000754:	2240      	movs	r2, #64	; 0x40
 8000756:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000758:	4b29      	ldr	r3, [pc, #164]	; (8000800 <MX_SAI1_Init+0xc4>)
 800075a:	2200      	movs	r2, #0
 800075c:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800075e:	4b28      	ldr	r3, [pc, #160]	; (8000800 <MX_SAI1_Init+0xc4>)
 8000760:	2200      	movs	r2, #0
 8000762:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000764:	4b26      	ldr	r3, [pc, #152]	; (8000800 <MX_SAI1_Init+0xc4>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800076a:	4b25      	ldr	r3, [pc, #148]	; (8000800 <MX_SAI1_Init+0xc4>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000770:	4b23      	ldr	r3, [pc, #140]	; (8000800 <MX_SAI1_Init+0xc4>)
 8000772:	2200      	movs	r2, #0
 8000774:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8000776:	4b22      	ldr	r3, [pc, #136]	; (8000800 <MX_SAI1_Init+0xc4>)
 8000778:	2200      	movs	r2, #0
 800077a:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800077c:	4b20      	ldr	r3, [pc, #128]	; (8000800 <MX_SAI1_Init+0xc4>)
 800077e:	2200      	movs	r2, #0
 8000780:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000782:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <MX_SAI1_Init+0xc4>)
 8000784:	4a20      	ldr	r2, [pc, #128]	; (8000808 <MX_SAI1_Init+0xcc>)
 8000786:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000788:	4b1d      	ldr	r3, [pc, #116]	; (8000800 <MX_SAI1_Init+0xc4>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800078e:	4b1c      	ldr	r3, [pc, #112]	; (8000800 <MX_SAI1_Init+0xc4>)
 8000790:	2200      	movs	r2, #0
 8000792:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000794:	4b1a      	ldr	r3, [pc, #104]	; (8000800 <MX_SAI1_Init+0xc4>)
 8000796:	2200      	movs	r2, #0
 8000798:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800079a:	4b19      	ldr	r3, [pc, #100]	; (8000800 <MX_SAI1_Init+0xc4>)
 800079c:	2200      	movs	r2, #0
 800079e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 80007a0:	4b17      	ldr	r3, [pc, #92]	; (8000800 <MX_SAI1_Init+0xc4>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 0;
 80007a8:	4b15      	ldr	r3, [pc, #84]	; (8000800 <MX_SAI1_Init+0xc4>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80007ae:	4b14      	ldr	r3, [pc, #80]	; (8000800 <MX_SAI1_Init+0xc4>)
 80007b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007b4:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 80007b6:	4b12      	ldr	r3, [pc, #72]	; (8000800 <MX_SAI1_Init+0xc4>)
 80007b8:	2208      	movs	r2, #8
 80007ba:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 80007bc:	4b10      	ldr	r3, [pc, #64]	; (8000800 <MX_SAI1_Init+0xc4>)
 80007be:	2201      	movs	r2, #1
 80007c0:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80007c2:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <MX_SAI1_Init+0xc4>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80007c8:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <MX_SAI1_Init+0xc4>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80007ce:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <MX_SAI1_Init+0xc4>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 80007d4:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <MX_SAI1_Init+0xc4>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_SAI1_Init+0xc4>)
 80007dc:	2200      	movs	r2, #0
 80007de:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 80007e0:	4b07      	ldr	r3, [pc, #28]	; (8000800 <MX_SAI1_Init+0xc4>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <MX_SAI1_Init+0xc4>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 80007ec:	4804      	ldr	r0, [pc, #16]	; (8000800 <MX_SAI1_Init+0xc4>)
 80007ee:	f004 f977 	bl	8004ae0 <HAL_SAI_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 80007f8:	f000 fb62 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000a34 	.word	0x20000a34
 8000804:	40015404 	.word	0x40015404
 8000808:	0002ee00 	.word	0x0002ee00

0800080c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000810:	4b1b      	ldr	r3, [pc, #108]	; (8000880 <MX_SPI2_Init+0x74>)
 8000812:	4a1c      	ldr	r2, [pc, #112]	; (8000884 <MX_SPI2_Init+0x78>)
 8000814:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000816:	4b1a      	ldr	r3, [pc, #104]	; (8000880 <MX_SPI2_Init+0x74>)
 8000818:	f44f 7282 	mov.w	r2, #260	; 0x104
 800081c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800081e:	4b18      	ldr	r3, [pc, #96]	; (8000880 <MX_SPI2_Init+0x74>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000824:	4b16      	ldr	r3, [pc, #88]	; (8000880 <MX_SPI2_Init+0x74>)
 8000826:	f44f 7240 	mov.w	r2, #768	; 0x300
 800082a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800082c:	4b14      	ldr	r3, [pc, #80]	; (8000880 <MX_SPI2_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000832:	4b13      	ldr	r3, [pc, #76]	; (8000880 <MX_SPI2_Init+0x74>)
 8000834:	2200      	movs	r2, #0
 8000836:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000838:	4b11      	ldr	r3, [pc, #68]	; (8000880 <MX_SPI2_Init+0x74>)
 800083a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800083e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000840:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <MX_SPI2_Init+0x74>)
 8000842:	2208      	movs	r2, #8
 8000844:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <MX_SPI2_Init+0x74>)
 8000848:	2200      	movs	r2, #0
 800084a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800084c:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <MX_SPI2_Init+0x74>)
 800084e:	2200      	movs	r2, #0
 8000850:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <MX_SPI2_Init+0x74>)
 8000854:	2200      	movs	r2, #0
 8000856:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000858:	4b09      	ldr	r3, [pc, #36]	; (8000880 <MX_SPI2_Init+0x74>)
 800085a:	2207      	movs	r2, #7
 800085c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800085e:	4b08      	ldr	r3, [pc, #32]	; (8000880 <MX_SPI2_Init+0x74>)
 8000860:	2200      	movs	r2, #0
 8000862:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <MX_SPI2_Init+0x74>)
 8000866:	2208      	movs	r2, #8
 8000868:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800086a:	4805      	ldr	r0, [pc, #20]	; (8000880 <MX_SPI2_Init+0x74>)
 800086c:	f004 fb50 	bl	8004f10 <HAL_SPI_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000876:	f000 fb23 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000ac8 	.word	0x20000ac8
 8000884:	40003800 	.word	0x40003800

08000888 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800088c:	4b22      	ldr	r3, [pc, #136]	; (8000918 <MX_USART2_UART_Init+0x90>)
 800088e:	4a23      	ldr	r2, [pc, #140]	; (800091c <MX_USART2_UART_Init+0x94>)
 8000890:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000892:	4b21      	ldr	r3, [pc, #132]	; (8000918 <MX_USART2_UART_Init+0x90>)
 8000894:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000898:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800089a:	4b1f      	ldr	r3, [pc, #124]	; (8000918 <MX_USART2_UART_Init+0x90>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008a0:	4b1d      	ldr	r3, [pc, #116]	; (8000918 <MX_USART2_UART_Init+0x90>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008a6:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <MX_USART2_UART_Init+0x90>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008ac:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <MX_USART2_UART_Init+0x90>)
 80008ae:	220c      	movs	r2, #12
 80008b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b2:	4b19      	ldr	r3, [pc, #100]	; (8000918 <MX_USART2_UART_Init+0x90>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b8:	4b17      	ldr	r3, [pc, #92]	; (8000918 <MX_USART2_UART_Init+0x90>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008be:	4b16      	ldr	r3, [pc, #88]	; (8000918 <MX_USART2_UART_Init+0x90>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008c4:	4b14      	ldr	r3, [pc, #80]	; (8000918 <MX_USART2_UART_Init+0x90>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ca:	4b13      	ldr	r3, [pc, #76]	; (8000918 <MX_USART2_UART_Init+0x90>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008d0:	4811      	ldr	r0, [pc, #68]	; (8000918 <MX_USART2_UART_Init+0x90>)
 80008d2:	f004 fc08 	bl	80050e6 <HAL_UART_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80008dc:	f000 faf0 	bl	8000ec0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008e0:	2100      	movs	r1, #0
 80008e2:	480d      	ldr	r0, [pc, #52]	; (8000918 <MX_USART2_UART_Init+0x90>)
 80008e4:	f005 faf6 	bl	8005ed4 <HAL_UARTEx_SetTxFifoThreshold>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80008ee:	f000 fae7 	bl	8000ec0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008f2:	2100      	movs	r1, #0
 80008f4:	4808      	ldr	r0, [pc, #32]	; (8000918 <MX_USART2_UART_Init+0x90>)
 80008f6:	f005 fb2b 	bl	8005f50 <HAL_UARTEx_SetRxFifoThreshold>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000900:	f000 fade 	bl	8000ec0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000904:	4804      	ldr	r0, [pc, #16]	; (8000918 <MX_USART2_UART_Init+0x90>)
 8000906:	f005 faac 	bl	8005e62 <HAL_UARTEx_DisableFifoMode>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000910:	f000 fad6 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000b2c 	.word	0x20000b2c
 800091c:	40004400 	.word	0x40004400

08000920 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000924:	4b22      	ldr	r3, [pc, #136]	; (80009b0 <MX_USART3_UART_Init+0x90>)
 8000926:	4a23      	ldr	r2, [pc, #140]	; (80009b4 <MX_USART3_UART_Init+0x94>)
 8000928:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800092a:	4b21      	ldr	r3, [pc, #132]	; (80009b0 <MX_USART3_UART_Init+0x90>)
 800092c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000930:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000932:	4b1f      	ldr	r3, [pc, #124]	; (80009b0 <MX_USART3_UART_Init+0x90>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000938:	4b1d      	ldr	r3, [pc, #116]	; (80009b0 <MX_USART3_UART_Init+0x90>)
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800093e:	4b1c      	ldr	r3, [pc, #112]	; (80009b0 <MX_USART3_UART_Init+0x90>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000944:	4b1a      	ldr	r3, [pc, #104]	; (80009b0 <MX_USART3_UART_Init+0x90>)
 8000946:	220c      	movs	r2, #12
 8000948:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094a:	4b19      	ldr	r3, [pc, #100]	; (80009b0 <MX_USART3_UART_Init+0x90>)
 800094c:	2200      	movs	r2, #0
 800094e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000950:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <MX_USART3_UART_Init+0x90>)
 8000952:	2200      	movs	r2, #0
 8000954:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000956:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <MX_USART3_UART_Init+0x90>)
 8000958:	2200      	movs	r2, #0
 800095a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800095c:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <MX_USART3_UART_Init+0x90>)
 800095e:	2200      	movs	r2, #0
 8000960:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000962:	4b13      	ldr	r3, [pc, #76]	; (80009b0 <MX_USART3_UART_Init+0x90>)
 8000964:	2200      	movs	r2, #0
 8000966:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000968:	4811      	ldr	r0, [pc, #68]	; (80009b0 <MX_USART3_UART_Init+0x90>)
 800096a:	f004 fbbc 	bl	80050e6 <HAL_UART_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000974:	f000 faa4 	bl	8000ec0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000978:	2100      	movs	r1, #0
 800097a:	480d      	ldr	r0, [pc, #52]	; (80009b0 <MX_USART3_UART_Init+0x90>)
 800097c:	f005 faaa 	bl	8005ed4 <HAL_UARTEx_SetTxFifoThreshold>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000986:	f000 fa9b 	bl	8000ec0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800098a:	2100      	movs	r1, #0
 800098c:	4808      	ldr	r0, [pc, #32]	; (80009b0 <MX_USART3_UART_Init+0x90>)
 800098e:	f005 fadf 	bl	8005f50 <HAL_UARTEx_SetRxFifoThreshold>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000998:	f000 fa92 	bl	8000ec0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800099c:	4804      	ldr	r0, [pc, #16]	; (80009b0 <MX_USART3_UART_Init+0x90>)
 800099e:	f005 fa60 	bl	8005e62 <HAL_UARTEx_DisableFifoMode>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009a8:	f000 fa8a 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000bc0 	.word	0x20000bc0
 80009b4:	40004800 	.word	0x40004800

080009b8 <MX_FMC_Init>:

}

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b088      	sub	sp, #32
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 80009be:	463b      	mov	r3, r7
 80009c0:	2220      	movs	r2, #32
 80009c2:	2100      	movs	r1, #0
 80009c4:	4618      	mov	r0, r3
 80009c6:	f008 fb17 	bl	8008ff8 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 80009ca:	4b2c      	ldr	r3, [pc, #176]	; (8000a7c <MX_FMC_Init+0xc4>)
 80009cc:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80009d0:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80009d2:	4b2a      	ldr	r3, [pc, #168]	; (8000a7c <MX_FMC_Init+0xc4>)
 80009d4:	4a2a      	ldr	r2, [pc, #168]	; (8000a80 <MX_FMC_Init+0xc8>)
 80009d6:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 80009d8:	4b28      	ldr	r3, [pc, #160]	; (8000a7c <MX_FMC_Init+0xc4>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80009de:	4b27      	ldr	r3, [pc, #156]	; (8000a7c <MX_FMC_Init+0xc4>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_PSRAM;
 80009e4:	4b25      	ldr	r3, [pc, #148]	; (8000a7c <MX_FMC_Init+0xc4>)
 80009e6:	2204      	movs	r2, #4
 80009e8:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80009ea:	4b24      	ldr	r3, [pc, #144]	; (8000a7c <MX_FMC_Init+0xc4>)
 80009ec:	2210      	movs	r2, #16
 80009ee:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_ENABLE;
 80009f0:	4b22      	ldr	r3, [pc, #136]	; (8000a7c <MX_FMC_Init+0xc4>)
 80009f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009f6:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80009f8:	4b20      	ldr	r3, [pc, #128]	; (8000a7c <MX_FMC_Init+0xc4>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80009fe:	4b1f      	ldr	r3, [pc, #124]	; (8000a7c <MX_FMC_Init+0xc4>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8000a04:	4b1d      	ldr	r3, [pc, #116]	; (8000a7c <MX_FMC_Init+0xc4>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_ENABLE;
 8000a0a:	4b1c      	ldr	r3, [pc, #112]	; (8000a7c <MX_FMC_Init+0xc4>)
 8000a0c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a10:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000a12:	4b1a      	ldr	r3, [pc, #104]	; (8000a7c <MX_FMC_Init+0xc4>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000a18:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <MX_FMC_Init+0xc4>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_ENABLE;
 8000a1e:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <MX_FMC_Init+0xc4>)
 8000a20:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000a24:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000a26:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <MX_FMC_Init+0xc4>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000a2c:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <MX_FMC_Init+0xc4>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 8000a32:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <MX_FMC_Init+0xc4>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	645a      	str	r2, [r3, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000a38:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <MX_FMC_Init+0xc4>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000a3e:	230f      	movs	r3, #15
 8000a40:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8000a42:	230f      	movs	r3, #15
 8000a44:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8000a46:	23ff      	movs	r3, #255	; 0xff
 8000a48:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000a4e:	230f      	movs	r3, #15
 8000a50:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000a52:	2310      	movs	r3, #16
 8000a54:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 2;
 8000a56:	2302      	movs	r3, #2
 8000a58:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000a5e:	463b      	mov	r3, r7
 8000a60:	2200      	movs	r2, #0
 8000a62:	4619      	mov	r1, r3
 8000a64:	4805      	ldr	r0, [pc, #20]	; (8000a7c <MX_FMC_Init+0xc4>)
 8000a66:	f004 faf6 	bl	8005056 <HAL_SRAM_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_FMC_Init+0xbc>
  {
    Error_Handler( );
 8000a70:	f000 fa26 	bl	8000ec0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000a74:	bf00      	nop
 8000a76:	3720      	adds	r7, #32
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000c54 	.word	0x20000c54
 8000a80:	a0000104 	.word	0xa0000104

08000a84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08e      	sub	sp, #56	; 0x38
 8000a88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
 8000a98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a9a:	4bb2      	ldr	r3, [pc, #712]	; (8000d64 <MX_GPIO_Init+0x2e0>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	4ab1      	ldr	r2, [pc, #708]	; (8000d64 <MX_GPIO_Init+0x2e0>)
 8000aa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aa6:	4baf      	ldr	r3, [pc, #700]	; (8000d64 <MX_GPIO_Init+0x2e0>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000aae:	623b      	str	r3, [r7, #32]
 8000ab0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ab2:	4bac      	ldr	r3, [pc, #688]	; (8000d64 <MX_GPIO_Init+0x2e0>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab6:	4aab      	ldr	r2, [pc, #684]	; (8000d64 <MX_GPIO_Init+0x2e0>)
 8000ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000abc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000abe:	4ba9      	ldr	r3, [pc, #676]	; (8000d64 <MX_GPIO_Init+0x2e0>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ac6:	61fb      	str	r3, [r7, #28]
 8000ac8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aca:	4ba6      	ldr	r3, [pc, #664]	; (8000d64 <MX_GPIO_Init+0x2e0>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ace:	4aa5      	ldr	r2, [pc, #660]	; (8000d64 <MX_GPIO_Init+0x2e0>)
 8000ad0:	f043 0310 	orr.w	r3, r3, #16
 8000ad4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad6:	4ba3      	ldr	r3, [pc, #652]	; (8000d64 <MX_GPIO_Init+0x2e0>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ada:	f003 0310 	and.w	r3, r3, #16
 8000ade:	61bb      	str	r3, [r7, #24]
 8000ae0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae2:	4ba0      	ldr	r3, [pc, #640]	; (8000d64 <MX_GPIO_Init+0x2e0>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae6:	4a9f      	ldr	r2, [pc, #636]	; (8000d64 <MX_GPIO_Init+0x2e0>)
 8000ae8:	f043 0302 	orr.w	r3, r3, #2
 8000aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aee:	4b9d      	ldr	r3, [pc, #628]	; (8000d64 <MX_GPIO_Init+0x2e0>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af2:	f003 0302 	and.w	r3, r3, #2
 8000af6:	617b      	str	r3, [r7, #20]
 8000af8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	4b9a      	ldr	r3, [pc, #616]	; (8000d64 <MX_GPIO_Init+0x2e0>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afe:	4a99      	ldr	r2, [pc, #612]	; (8000d64 <MX_GPIO_Init+0x2e0>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b06:	4b97      	ldr	r3, [pc, #604]	; (8000d64 <MX_GPIO_Init+0x2e0>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	613b      	str	r3, [r7, #16]
 8000b10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b12:	4b94      	ldr	r3, [pc, #592]	; (8000d64 <MX_GPIO_Init+0x2e0>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b16:	4a93      	ldr	r2, [pc, #588]	; (8000d64 <MX_GPIO_Init+0x2e0>)
 8000b18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b1e:	4b91      	ldr	r3, [pc, #580]	; (8000d64 <MX_GPIO_Init+0x2e0>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 8000b2a:	f001 fb4b 	bl	80021c4 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b2e:	4b8d      	ldr	r3, [pc, #564]	; (8000d64 <MX_GPIO_Init+0x2e0>)
 8000b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b32:	4a8c      	ldr	r2, [pc, #560]	; (8000d64 <MX_GPIO_Init+0x2e0>)
 8000b34:	f043 0308 	orr.w	r3, r3, #8
 8000b38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b3a:	4b8a      	ldr	r3, [pc, #552]	; (8000d64 <MX_GPIO_Init+0x2e0>)
 8000b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3e:	f003 0308 	and.w	r3, r3, #8
 8000b42:	60bb      	str	r3, [r7, #8]
 8000b44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b46:	4b87      	ldr	r3, [pc, #540]	; (8000d64 <MX_GPIO_Init+0x2e0>)
 8000b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4a:	4a86      	ldr	r2, [pc, #536]	; (8000d64 <MX_GPIO_Init+0x2e0>)
 8000b4c:	f043 0304 	orr.w	r3, r3, #4
 8000b50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b52:	4b84      	ldr	r3, [pc, #528]	; (8000d64 <MX_GPIO_Init+0x2e0>)
 8000b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b56:	f003 0304 	and.w	r3, r3, #4
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b5e:	4b81      	ldr	r3, [pc, #516]	; (8000d64 <MX_GPIO_Init+0x2e0>)
 8000b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b62:	4a80      	ldr	r2, [pc, #512]	; (8000d64 <MX_GPIO_Init+0x2e0>)
 8000b64:	f043 0320 	orr.w	r3, r3, #32
 8000b68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b6a:	4b7e      	ldr	r3, [pc, #504]	; (8000d64 <MX_GPIO_Init+0x2e0>)
 8000b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6e:	f003 0320 	and.w	r3, r3, #32
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8000b76:	2200      	movs	r2, #0
 8000b78:	f244 0114 	movw	r1, #16404	; 0x4014
 8000b7c:	487a      	ldr	r0, [pc, #488]	; (8000d68 <MX_GPIO_Init+0x2e4>)
 8000b7e:	f001 f913 	bl	8001da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(JOY_SEL_GPIO_Port, JOY_SEL_Pin, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b88:	4878      	ldr	r0, [pc, #480]	; (8000d6c <MX_GPIO_Init+0x2e8>)
 8000b8a:	f001 f90d 	bl	8001da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2140      	movs	r1, #64	; 0x40
 8000b92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b96:	f001 f907 	bl	8001da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_Port, MFX_WAKEUP_Pin, GPIO_PIN_RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2104      	movs	r1, #4
 8000b9e:	4874      	ldr	r0, [pc, #464]	; (8000d70 <MX_GPIO_Init+0x2ec>)
 8000ba0:	f001 f902 	bl	8001da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OCTOSPIM_P2_IO1_Pin OCTOSPIM_P2_IO2_Pin OCTOSPIM_P2_CLK_Pin OCTOSPIM_P2_IO0_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO1_Pin|OCTOSPIM_P2_IO2_Pin|OCTOSPIM_P2_CLK_Pin|OCTOSPIM_P2_IO0_Pin;
 8000ba4:	f44f 6364 	mov.w	r3, #3648	; 0xe40
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000baa:	2302      	movs	r3, #2
 8000bac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000bb6:	2305      	movs	r3, #5
 8000bb8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000bba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	486c      	ldr	r0, [pc, #432]	; (8000d74 <MX_GPIO_Init+0x2f0>)
 8000bc2:	f000 ff5f 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : MIC_VDD_Pin DSI_SPI_USART_CS_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin;
 8000bc6:	f244 0314 	movw	r3, #16404	; 0x4014
 8000bca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4862      	ldr	r0, [pc, #392]	; (8000d68 <MX_GPIO_Init+0x2e4>)
 8000be0:	f000 ff50 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000be4:	2310      	movs	r3, #16
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be8:	2302      	movs	r3, #2
 8000bea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000bf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	485c      	ldr	r0, [pc, #368]	; (8000d70 <MX_GPIO_Init+0x2ec>)
 8000c00:	f000 ff40 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D7_Pin DCMI_D5_Pin DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 8000c04:	23b0      	movs	r3, #176	; 0xb0
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c10:	2300      	movs	r3, #0
 8000c12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000c14:	230a      	movs	r3, #10
 8000c16:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4855      	ldr	r0, [pc, #340]	; (8000d74 <MX_GPIO_Init+0x2f0>)
 8000c20:	f000 ff30 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOSPIM_P2_IO6_Pin OCTOSPIM_P2_DQS_Pin OCTOSPIM_P2_IO7_Pin OCTOSPIM_P2_CS_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO6_Pin|OCTOSPIM_P2_DQS_Pin|OCTOSPIM_P2_IO7_Pin|OCTOSPIM_P2_CS_Pin;
 8000c24:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c32:	2303      	movs	r3, #3
 8000c34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000c36:	2305      	movs	r3, #5
 8000c38:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3e:	4619      	mov	r1, r3
 8000c40:	484d      	ldr	r0, [pc, #308]	; (8000d78 <MX_GPIO_Init+0x2f4>)
 8000c42:	f000 ff1f 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8000c46:	2302      	movs	r3, #2
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c4a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8000c54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4846      	ldr	r0, [pc, #280]	; (8000d74 <MX_GPIO_Init+0x2f0>)
 8000c5c:	f000 ff12 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D3_Pin DCMI_PIXCLK_Pin DCMI_D2_Pin */
  GPIO_InitStruct.Pin = DCMI_D3_Pin|DCMI_PIXCLK_Pin|DCMI_D2_Pin;
 8000c60:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c66:	2302      	movs	r3, #2
 8000c68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000c72:	230a      	movs	r3, #10
 8000c74:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	483a      	ldr	r0, [pc, #232]	; (8000d68 <MX_GPIO_Init+0x2e4>)
 8000c7e:	f000 ff01 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 8000c82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c90:	2300      	movs	r3, #0
 8000c92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000c94:	2303      	movs	r3, #3
 8000c96:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8000c98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4832      	ldr	r0, [pc, #200]	; (8000d68 <MX_GPIO_Init+0x2e4>)
 8000ca0:	f000 fef0 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOPSIM_P2_IO4_Pin OCTOSPIM_P2_IO5_Pin OCTOSPI_P2_IO3_Pin */
  GPIO_InitStruct.Pin = OCTOPSIM_P2_IO4_Pin|OCTOSPIM_P2_IO5_Pin|OCTOSPI_P2_IO3_Pin;
 8000ca4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	2302      	movs	r3, #2
 8000cac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000cb6:	2305      	movs	r3, #5
 8000cb8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4829      	ldr	r0, [pc, #164]	; (8000d68 <MX_GPIO_Init+0x2e4>)
 8000cc2:	f000 fedf 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_SEL_Pin;
 8000cc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 8000cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4823      	ldr	r0, [pc, #140]	; (8000d6c <MX_GPIO_Init+0x2e8>)
 8000ce0:	f000 fed0 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_14_Pin ARD_15_Pin */
  GPIO_InitStruct.Pin = ARD_14_Pin|ARD_15_Pin;
 8000ce4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cea:	2312      	movs	r3, #18
 8000cec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000cf6:	2304      	movs	r3, #4
 8000cf8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cfe:	4619      	mov	r1, r3
 8000d00:	481d      	ldr	r0, [pc, #116]	; (8000d78 <MX_GPIO_Init+0x2f4>)
 8000d02:	f000 febf 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_INT_Pin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 8000d06:	2340      	movs	r3, #64	; 0x40
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d0a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 8000d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4814      	ldr	r0, [pc, #80]	; (8000d6c <MX_GPIO_Init+0x2e8>)
 8000d1c:	f000 feb2 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFDATIN3_Pin DF_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFDATIN3_Pin|DF_CKOUT_Pin;
 8000d20:	2384      	movs	r3, #132	; 0x84
 8000d22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d24:	2302      	movs	r3, #2
 8000d26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000d30:	2306      	movs	r3, #6
 8000d32:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d38:	4619      	mov	r1, r3
 8000d3a:	480c      	ldr	r0, [pc, #48]	; (8000d6c <MX_GPIO_Init+0x2e8>)
 8000d3c:	f000 fea2 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D0_Pin ARD_D1_Pin */
  GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8000d40:	2303      	movs	r3, #3
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d44:	2302      	movs	r3, #2
 8000d46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000d50:	2308      	movs	r3, #8
 8000d52:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4804      	ldr	r0, [pc, #16]	; (8000d6c <MX_GPIO_Init+0x2e8>)
 8000d5c:	f000 fe92 	bl	8001a84 <HAL_GPIO_Init>
 8000d60:	e00c      	b.n	8000d7c <MX_GPIO_Init+0x2f8>
 8000d62:	bf00      	nop
 8000d64:	40021000 	.word	0x40021000
 8000d68:	48001c00 	.word	0x48001c00
 8000d6c:	48000800 	.word	0x48000800
 8000d70:	48000400 	.word	0x48000400
 8000d74:	48002000 	.word	0x48002000
 8000d78:	48001800 	.word	0x48001800

  /*Configure GPIO pins : ARD_A2_Pin ARD_A1_Pin */
  GPIO_InitStruct.Pin = ARD_A2_Pin|ARD_A1_Pin;
 8000d7c:	2318      	movs	r3, #24
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d80:	230b      	movs	r3, #11
 8000d82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4849      	ldr	r0, [pc, #292]	; (8000eb4 <MX_GPIO_Init+0x430>)
 8000d90:	f000 fe78 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A4_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A4_Pin|ARD_A0_Pin;
 8000d94:	2381      	movs	r3, #129	; 0x81
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d98:	230b      	movs	r3, #11
 8000d9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da4:	4619      	mov	r1, r3
 8000da6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000daa:	f000 fe6b 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_PWM_Pin */
  GPIO_InitStruct.Pin = STMOD_PWM_Pin;
 8000dae:	2320      	movs	r3, #32
 8000db0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db2:	2302      	movs	r3, #2
 8000db4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(STMOD_PWM_GPIO_Port, &GPIO_InitStruct);
 8000dc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dcc:	f000 fe5a 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8000dd0:	2340      	movs	r3, #64	; 0x40
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8000de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de4:	4619      	mov	r1, r3
 8000de6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dea:	f000 fe4b 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8000dee:	2302      	movs	r3, #2
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df2:	2302      	movs	r3, #2
 8000df4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8000e02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e06:	4619      	mov	r1, r3
 8000e08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e0c:	f000 fe3a 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_TE_Pin */
  GPIO_InitStruct.Pin = DSI_TE_Pin;
 8000e10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e16:	2302      	movs	r3, #2
 8000e18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_DSI;
 8000e22:	230b      	movs	r3, #11
 8000e24:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 8000e26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4822      	ldr	r0, [pc, #136]	; (8000eb8 <MX_GPIO_Init+0x434>)
 8000e2e:	f000 fe29 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_HSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin;
 8000e32:	2310      	movs	r3, #16
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	2302      	movs	r3, #2
 8000e38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000e42:	230a      	movs	r3, #10
 8000e44:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8000e46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e50:	f000 fe18 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_A3_Pin */
  GPIO_InitStruct.Pin = ARD_A3_Pin;
 8000e54:	2301      	movs	r3, #1
 8000e56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e58:	230b      	movs	r3, #11
 8000e5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 8000e60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e64:	4619      	mov	r1, r3
 8000e66:	4815      	ldr	r0, [pc, #84]	; (8000ebc <MX_GPIO_Init+0x438>)
 8000e68:	f000 fe0c 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8000e6c:	2304      	movs	r3, #4
 8000e6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e70:	2301      	movs	r3, #1
 8000e72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000e7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e80:	4619      	mov	r1, r3
 8000e82:	480e      	ldr	r0, [pc, #56]	; (8000ebc <MX_GPIO_Init+0x438>)
 8000e84:	f000 fdfe 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFDATIN1_Pin */
  GPIO_InitStruct.Pin = DFDATIN1_Pin;
 8000e88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2300      	movs	r3, #0
 8000e98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000e9a:	2306      	movs	r3, #6
 8000e9c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 8000e9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4805      	ldr	r0, [pc, #20]	; (8000ebc <MX_GPIO_Init+0x438>)
 8000ea6:	f000 fded 	bl	8001a84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000eaa:	bf00      	nop
 8000eac:	3738      	adds	r7, #56	; 0x38
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	48000800 	.word	0x48000800
 8000eb8:	48001400 	.word	0x48001400
 8000ebc:	48000400 	.word	0x48000400

08000ec0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec4:	b672      	cpsid	i
}
 8000ec6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <Error_Handler+0x8>
	...

08000ecc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed2:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <HAL_MspInit+0x44>)
 8000ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ed6:	4a0e      	ldr	r2, [pc, #56]	; (8000f10 <HAL_MspInit+0x44>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	6613      	str	r3, [r2, #96]	; 0x60
 8000ede:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <HAL_MspInit+0x44>)
 8000ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eea:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <HAL_MspInit+0x44>)
 8000eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eee:	4a08      	ldr	r2, [pc, #32]	; (8000f10 <HAL_MspInit+0x44>)
 8000ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ef6:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_MspInit+0x44>)
 8000ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efe:	603b      	str	r3, [r7, #0]
 8000f00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	40021000 	.word	0x40021000

08000f14 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <HAL_CRC_MspInit+0x38>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d10b      	bne.n	8000f3e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f26:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <HAL_CRC_MspInit+0x3c>)
 8000f28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f2a:	4a09      	ldr	r2, [pc, #36]	; (8000f50 <HAL_CRC_MspInit+0x3c>)
 8000f2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f30:	6493      	str	r3, [r2, #72]	; 0x48
 8000f32:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <HAL_CRC_MspInit+0x3c>)
 8000f34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000f3e:	bf00      	nop
 8000f40:	3714      	adds	r7, #20
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	40023000 	.word	0x40023000
 8000f50:	40021000 	.word	0x40021000

08000f54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b0b2      	sub	sp, #200	; 0xc8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f6c:	f107 0318 	add.w	r3, r7, #24
 8000f70:	229c      	movs	r2, #156	; 0x9c
 8000f72:	2100      	movs	r1, #0
 8000f74:	4618      	mov	r0, r3
 8000f76:	f008 f83f 	bl	8008ff8 <memset>
  if(hi2c->Instance==I2C1)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a33      	ldr	r2, [pc, #204]	; (800104c <HAL_I2C_MspInit+0xf8>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d15e      	bne.n	8001042 <HAL_I2C_MspInit+0xee>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f84:	2340      	movs	r3, #64	; 0x40
 8000f86:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f8c:	f107 0318 	add.w	r3, r7, #24
 8000f90:	4618      	mov	r0, r3
 8000f92:	f001 fffb 	bl	8002f8c <HAL_RCCEx_PeriphCLKConfig>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000f9c:	f7ff ff90 	bl	8000ec0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa0:	4b2b      	ldr	r3, [pc, #172]	; (8001050 <HAL_I2C_MspInit+0xfc>)
 8000fa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa4:	4a2a      	ldr	r2, [pc, #168]	; (8001050 <HAL_I2C_MspInit+0xfc>)
 8000fa6:	f043 0302 	orr.w	r3, r3, #2
 8000faa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fac:	4b28      	ldr	r3, [pc, #160]	; (8001050 <HAL_I2C_MspInit+0xfc>)
 8000fae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb0:	f003 0302 	and.w	r3, r3, #2
 8000fb4:	617b      	str	r3, [r7, #20]
 8000fb6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fb8:	4b25      	ldr	r3, [pc, #148]	; (8001050 <HAL_I2C_MspInit+0xfc>)
 8000fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fbc:	4a24      	ldr	r2, [pc, #144]	; (8001050 <HAL_I2C_MspInit+0xfc>)
 8000fbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fc4:	4b22      	ldr	r3, [pc, #136]	; (8001050 <HAL_I2C_MspInit+0xfc>)
 8000fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fcc:	613b      	str	r3, [r7, #16]
 8000fce:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8000fd0:	f001 f8f8 	bl	80021c4 <HAL_PWREx_EnableVddIO2>
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PG13     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin;
 8000fd4:	2340      	movs	r3, #64	; 0x40
 8000fd6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fda:	2312      	movs	r3, #18
 8000fdc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fec:	2304      	movs	r3, #4
 8000fee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(I2C1_SCL_GPIO_Port, &GPIO_InitStruct);
 8000ff2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4816      	ldr	r0, [pc, #88]	; (8001054 <HAL_I2C_MspInit+0x100>)
 8000ffa:	f000 fd43 	bl	8001a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C1_SDA_Pin;
 8000ffe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001002:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001006:	2312      	movs	r3, #18
 8001008:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800100c:	2301      	movs	r3, #1
 800100e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001012:	2303      	movs	r3, #3
 8001014:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001018:	2304      	movs	r3, #4
 800101a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStruct);
 800101e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001022:	4619      	mov	r1, r3
 8001024:	480c      	ldr	r0, [pc, #48]	; (8001058 <HAL_I2C_MspInit+0x104>)
 8001026:	f000 fd2d 	bl	8001a84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800102a:	4b09      	ldr	r3, [pc, #36]	; (8001050 <HAL_I2C_MspInit+0xfc>)
 800102c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102e:	4a08      	ldr	r2, [pc, #32]	; (8001050 <HAL_I2C_MspInit+0xfc>)
 8001030:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001034:	6593      	str	r3, [r2, #88]	; 0x58
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_I2C_MspInit+0xfc>)
 8001038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800103a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001042:	bf00      	nop
 8001044:	37c8      	adds	r7, #200	; 0xc8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40005400 	.word	0x40005400
 8001050:	40021000 	.word	0x40021000
 8001054:	48000400 	.word	0x48000400
 8001058:	48001800 	.word	0x48001800

0800105c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08a      	sub	sp, #40	; 0x28
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a25      	ldr	r2, [pc, #148]	; (8001110 <HAL_SPI_MspInit+0xb4>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d144      	bne.n	8001108 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800107e:	4b25      	ldr	r3, [pc, #148]	; (8001114 <HAL_SPI_MspInit+0xb8>)
 8001080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001082:	4a24      	ldr	r2, [pc, #144]	; (8001114 <HAL_SPI_MspInit+0xb8>)
 8001084:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001088:	6593      	str	r3, [r2, #88]	; 0x58
 800108a:	4b22      	ldr	r3, [pc, #136]	; (8001114 <HAL_SPI_MspInit+0xb8>)
 800108c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800108e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001092:	613b      	str	r3, [r7, #16]
 8001094:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001096:	4b1f      	ldr	r3, [pc, #124]	; (8001114 <HAL_SPI_MspInit+0xb8>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109a:	4a1e      	ldr	r2, [pc, #120]	; (8001114 <HAL_SPI_MspInit+0xb8>)
 800109c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010a2:	4b1c      	ldr	r3, [pc, #112]	; (8001114 <HAL_SPI_MspInit+0xb8>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ae:	4b19      	ldr	r3, [pc, #100]	; (8001114 <HAL_SPI_MspInit+0xb8>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b2:	4a18      	ldr	r2, [pc, #96]	; (8001114 <HAL_SPI_MspInit+0xb8>)
 80010b4:	f043 0302 	orr.w	r3, r3, #2
 80010b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ba:	4b16      	ldr	r3, [pc, #88]	; (8001114 <HAL_SPI_MspInit+0xb8>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	68bb      	ldr	r3, [r7, #8]
    PI0     ------> SPI2_NSS
    PB15     ------> SPI2_MOSI
    PB14     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = ARD_10_Pin;
 80010c6:	2301      	movs	r3, #1
 80010c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	2302      	movs	r3, #2
 80010cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d2:	2303      	movs	r3, #3
 80010d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010d6:	2305      	movs	r3, #5
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_10_GPIO_Port, &GPIO_InitStruct);
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	4619      	mov	r1, r3
 80010e0:	480d      	ldr	r0, [pc, #52]	; (8001118 <HAL_SPI_MspInit+0xbc>)
 80010e2:	f000 fccf 	bl	8001a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_MOSI_Pin|SPI2_MISO_Pin|SPI2_CLK_Pin;
 80010e6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80010ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	2302      	movs	r3, #2
 80010ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f4:	2303      	movs	r3, #3
 80010f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010f8:	2305      	movs	r3, #5
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	4619      	mov	r1, r3
 8001102:	4806      	ldr	r0, [pc, #24]	; (800111c <HAL_SPI_MspInit+0xc0>)
 8001104:	f000 fcbe 	bl	8001a84 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001108:	bf00      	nop
 800110a:	3728      	adds	r7, #40	; 0x28
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40003800 	.word	0x40003800
 8001114:	40021000 	.word	0x40021000
 8001118:	48002000 	.word	0x48002000
 800111c:	48000400 	.word	0x48000400

08001120 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b0b4      	sub	sp, #208	; 0xd0
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001138:	f107 0320 	add.w	r3, r7, #32
 800113c:	229c      	movs	r2, #156	; 0x9c
 800113e:	2100      	movs	r1, #0
 8001140:	4618      	mov	r0, r3
 8001142:	f007 ff59 	bl	8008ff8 <memset>
  if(huart->Instance==USART2)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a54      	ldr	r2, [pc, #336]	; (800129c <HAL_UART_MspInit+0x17c>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d13c      	bne.n	80011ca <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001150:	2302      	movs	r3, #2
 8001152:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001154:	2300      	movs	r3, #0
 8001156:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001158:	f107 0320 	add.w	r3, r7, #32
 800115c:	4618      	mov	r0, r3
 800115e:	f001 ff15 	bl	8002f8c <HAL_RCCEx_PeriphCLKConfig>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001168:	f7ff feaa 	bl	8000ec0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800116c:	4b4c      	ldr	r3, [pc, #304]	; (80012a0 <HAL_UART_MspInit+0x180>)
 800116e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001170:	4a4b      	ldr	r2, [pc, #300]	; (80012a0 <HAL_UART_MspInit+0x180>)
 8001172:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001176:	6593      	str	r3, [r2, #88]	; 0x58
 8001178:	4b49      	ldr	r3, [pc, #292]	; (80012a0 <HAL_UART_MspInit+0x180>)
 800117a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800117c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001180:	61fb      	str	r3, [r7, #28]
 8001182:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001184:	4b46      	ldr	r3, [pc, #280]	; (80012a0 <HAL_UART_MspInit+0x180>)
 8001186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001188:	4a45      	ldr	r2, [pc, #276]	; (80012a0 <HAL_UART_MspInit+0x180>)
 800118a:	f043 0301 	orr.w	r3, r3, #1
 800118e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001190:	4b43      	ldr	r3, [pc, #268]	; (80012a0 <HAL_UART_MspInit+0x180>)
 8001192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	61bb      	str	r3, [r7, #24]
 800119a:	69bb      	ldr	r3, [r7, #24]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_TX_Pin;
 800119c:	230c      	movs	r3, #12
 800119e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a2:	2302      	movs	r3, #2
 80011a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ae:	2303      	movs	r3, #3
 80011b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011b4:	2307      	movs	r3, #7
 80011b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ba:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80011be:	4619      	mov	r1, r3
 80011c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c4:	f000 fc5e 	bl	8001a84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011c8:	e063      	b.n	8001292 <HAL_UART_MspInit+0x172>
  else if(huart->Instance==USART3)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a35      	ldr	r2, [pc, #212]	; (80012a4 <HAL_UART_MspInit+0x184>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d15e      	bne.n	8001292 <HAL_UART_MspInit+0x172>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011d4:	2304      	movs	r3, #4
 80011d6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80011d8:	2300      	movs	r3, #0
 80011da:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011dc:	f107 0320 	add.w	r3, r7, #32
 80011e0:	4618      	mov	r0, r3
 80011e2:	f001 fed3 	bl	8002f8c <HAL_RCCEx_PeriphCLKConfig>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 80011ec:	f7ff fe68 	bl	8000ec0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80011f0:	4b2b      	ldr	r3, [pc, #172]	; (80012a0 <HAL_UART_MspInit+0x180>)
 80011f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f4:	4a2a      	ldr	r2, [pc, #168]	; (80012a0 <HAL_UART_MspInit+0x180>)
 80011f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011fa:	6593      	str	r3, [r2, #88]	; 0x58
 80011fc:	4b28      	ldr	r3, [pc, #160]	; (80012a0 <HAL_UART_MspInit+0x180>)
 80011fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001200:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001204:	617b      	str	r3, [r7, #20]
 8001206:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001208:	4b25      	ldr	r3, [pc, #148]	; (80012a0 <HAL_UART_MspInit+0x180>)
 800120a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120c:	4a24      	ldr	r2, [pc, #144]	; (80012a0 <HAL_UART_MspInit+0x180>)
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001214:	4b22      	ldr	r3, [pc, #136]	; (80012a0 <HAL_UART_MspInit+0x180>)
 8001216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	613b      	str	r3, [r7, #16]
 800121e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001220:	4b1f      	ldr	r3, [pc, #124]	; (80012a0 <HAL_UART_MspInit+0x180>)
 8001222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001224:	4a1e      	ldr	r2, [pc, #120]	; (80012a0 <HAL_UART_MspInit+0x180>)
 8001226:	f043 0302 	orr.w	r3, r3, #2
 800122a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800122c:	4b1c      	ldr	r3, [pc, #112]	; (80012a0 <HAL_UART_MspInit+0x180>)
 800122e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001230:	f003 0302 	and.w	r3, r3, #2
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART3_RTS_Pin;
 8001238:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800123c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001240:	2302      	movs	r3, #2
 8001242:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124c:	2303      	movs	r3, #3
 800124e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001252:	2307      	movs	r3, #7
 8001254:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(USART3_RTS_GPIO_Port, &GPIO_InitStruct);
 8001258:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800125c:	4619      	mov	r1, r3
 800125e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001262:	f000 fc0f 	bl	8001a84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART3_RX_Pin|USART3_TX_Pin;
 8001266:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800126a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126e:	2302      	movs	r3, #2
 8001270:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127a:	2303      	movs	r3, #3
 800127c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001280:	2307      	movs	r3, #7
 8001282:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001286:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800128a:	4619      	mov	r1, r3
 800128c:	4806      	ldr	r0, [pc, #24]	; (80012a8 <HAL_UART_MspInit+0x188>)
 800128e:	f000 fbf9 	bl	8001a84 <HAL_GPIO_Init>
}
 8001292:	bf00      	nop
 8001294:	37d0      	adds	r7, #208	; 0xd0
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40004400 	.word	0x40004400
 80012a0:	40021000 	.word	0x40021000
 80012a4:	40004800 	.word	0x40004800
 80012a8:	48000400 	.word	0x48000400

080012ac <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80012c0:	4b32      	ldr	r3, [pc, #200]	; (800138c <HAL_FMC_MspInit+0xe0>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d15d      	bne.n	8001384 <HAL_FMC_MspInit+0xd8>
    return;
  }
  FMC_Initialized = 1;
 80012c8:	4b30      	ldr	r3, [pc, #192]	; (800138c <HAL_FMC_MspInit+0xe0>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80012ce:	4b30      	ldr	r3, [pc, #192]	; (8001390 <HAL_FMC_MspInit+0xe4>)
 80012d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012d2:	4a2f      	ldr	r2, [pc, #188]	; (8001390 <HAL_FMC_MspInit+0xe4>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	6513      	str	r3, [r2, #80]	; 0x50
 80012da:	4b2d      	ldr	r3, [pc, #180]	; (8001390 <HAL_FMC_MspInit+0xe4>)
 80012dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	603b      	str	r3, [r7, #0]
 80012e4:	683b      	ldr	r3, [r7, #0]
  PF13   ------> FMC_A7
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|PSRAM_A20_Pin|PSRAM_A19_Pin
 80012e6:	f64f 739b 	movw	r3, #65435	; 0xff9b
 80012ea:	607b      	str	r3, [r7, #4]
                          |D7_Pin|D6_Pin|D12_Pin|D5_Pin
                          |D11_Pin|D4_Pin|D10_Pin|D9_Pin
                          |D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ec:	2302      	movs	r3, #2
 80012ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f4:	2303      	movs	r3, #3
 80012f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012f8:	230c      	movs	r3, #12
 80012fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	4619      	mov	r1, r3
 8001300:	4824      	ldr	r0, [pc, #144]	; (8001394 <HAL_FMC_MspInit+0xe8>)
 8001302:	f000 fbbf 	bl	8001a84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|PSRAM_OE_Pin|D3_Pin|PSRAM_WE_Pin
 8001306:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 800130a:	607b      	str	r3, [r7, #4]
                          |PSRAM_WAIT_Pin|PSRAM_CLK_Pin|PSRAM_NE1_Pin|PSRAM_A18_Pin
                          |D1_Pin|D0_Pin|PSRAM_A17_Pin|PSRAM_A16_Pin
                          |D15_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130c:	2302      	movs	r3, #2
 800130e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001314:	2303      	movs	r3, #3
 8001316:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001318:	230c      	movs	r3, #12
 800131a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	4619      	mov	r1, r3
 8001320:	481d      	ldr	r0, [pc, #116]	; (8001398 <HAL_FMC_MspInit+0xec>)
 8001322:	f000 fbaf 	bl	8001a84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_ADV_Pin;
 8001326:	2380      	movs	r3, #128	; 0x80
 8001328:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132a:	2302      	movs	r3, #2
 800132c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001332:	2303      	movs	r3, #3
 8001334:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001336:	230c      	movs	r3, #12
 8001338:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PSRAM_ADV_GPIO_Port, &GPIO_InitStruct);
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	4619      	mov	r1, r3
 800133e:	4817      	ldr	r0, [pc, #92]	; (800139c <HAL_FMC_MspInit+0xf0>)
 8001340:	f000 fba0 	bl	8001a84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 8001344:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001348:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134a:	2302      	movs	r3, #2
 800134c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001352:	2303      	movs	r3, #3
 8001354:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001356:	230c      	movs	r3, #12
 8001358:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	4619      	mov	r1, r3
 800135e:	4810      	ldr	r0, [pc, #64]	; (80013a0 <HAL_FMC_MspInit+0xf4>)
 8001360:	f000 fb90 	bl	8001a84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A15_Pin|PSRAM_A11_Pin
 8001364:	233f      	movs	r3, #63	; 0x3f
 8001366:	607b      	str	r3, [r7, #4]
                          |PSRAM_A12_Pin|PSRAM_A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001368:	2302      	movs	r3, #2
 800136a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001370:	2303      	movs	r3, #3
 8001372:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001374:	230c      	movs	r3, #12
 8001376:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001378:	1d3b      	adds	r3, r7, #4
 800137a:	4619      	mov	r1, r3
 800137c:	4809      	ldr	r0, [pc, #36]	; (80013a4 <HAL_FMC_MspInit+0xf8>)
 800137e:	f000 fb81 	bl	8001a84 <HAL_GPIO_Init>
 8001382:	e000      	b.n	8001386 <HAL_FMC_MspInit+0xda>
    return;
 8001384:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001386:	3718      	adds	r7, #24
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000ca4 	.word	0x20000ca4
 8001390:	40021000 	.word	0x40021000
 8001394:	48001000 	.word	0x48001000
 8001398:	48000c00 	.word	0x48000c00
 800139c:	48000400 	.word	0x48000400
 80013a0:	48001400 	.word	0x48001400
 80013a4:	48001800 	.word	0x48001800

080013a8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80013b0:	f7ff ff7c 	bl	80012ac <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80013b4:	bf00      	nop
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b0b0      	sub	sp, #192	; 0xc0
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013c4:	f107 0310 	add.w	r3, r7, #16
 80013c8:	229c      	movs	r2, #156	; 0x9c
 80013ca:	2100      	movs	r1, #0
 80013cc:	4618      	mov	r0, r3
 80013ce:	f007 fe13 	bl	8008ff8 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a32      	ldr	r2, [pc, #200]	; (80014a0 <HAL_SAI_MspInit+0xe4>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d15d      	bne.n	8001498 <HAL_SAI_MspInit+0xdc>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80013dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013e0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80013e2:	2300      	movs	r3, #0
 80013e4:	67fb      	str	r3, [r7, #124]	; 0x7c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80013e6:	2301      	movs	r3, #1
 80013e8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80013ea:	2301      	movs	r3, #1
 80013ec:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80013ee:	2310      	movs	r3, #16
 80013f0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80013f2:	2302      	movs	r3, #2
 80013f4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80013f6:	2302      	movs	r3, #2
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80013fa:	2302      	movs	r3, #2
 80013fc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 80013fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001402:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001404:	f107 0310 	add.w	r3, r7, #16
 8001408:	4618      	mov	r0, r3
 800140a:	f001 fdbf 	bl	8002f8c <HAL_RCCEx_PeriphCLKConfig>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <HAL_SAI_MspInit+0x5c>
    {
      Error_Handler();
 8001414:	f7ff fd54 	bl	8000ec0 <Error_Handler>
    }

    if (SAI1_client == 0)
 8001418:	4b22      	ldr	r3, [pc, #136]	; (80014a4 <HAL_SAI_MspInit+0xe8>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d10b      	bne.n	8001438 <HAL_SAI_MspInit+0x7c>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001420:	4b21      	ldr	r3, [pc, #132]	; (80014a8 <HAL_SAI_MspInit+0xec>)
 8001422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001424:	4a20      	ldr	r2, [pc, #128]	; (80014a8 <HAL_SAI_MspInit+0xec>)
 8001426:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800142a:	6613      	str	r3, [r2, #96]	; 0x60
 800142c:	4b1e      	ldr	r3, [pc, #120]	; (80014a8 <HAL_SAI_MspInit+0xec>)
 800142e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001430:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 8001438:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <HAL_SAI_MspInit+0xe8>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	3301      	adds	r3, #1
 800143e:	4a19      	ldr	r2, [pc, #100]	; (80014a4 <HAL_SAI_MspInit+0xe8>)
 8001440:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PB9     ------> SAI1_FS_A
    PE6     ------> SAI1_SD_A
    PE5     ------> SAI1_SCK_A
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin|SAI1_FSA_Pin;
 8001442:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001446:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144a:	2302      	movs	r3, #2
 800144c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001456:	2300      	movs	r3, #0
 8001458:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800145c:	230d      	movs	r3, #13
 800145e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001462:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001466:	4619      	mov	r1, r3
 8001468:	4810      	ldr	r0, [pc, #64]	; (80014ac <HAL_SAI_MspInit+0xf0>)
 800146a:	f000 fb0b 	bl	8001a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCKA_Pin|SAI1_SDA_Pin|SAI1_SCKA_Pin;
 800146e:	2364      	movs	r3, #100	; 0x64
 8001470:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001474:	2302      	movs	r3, #2
 8001476:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001480:	2300      	movs	r3, #0
 8001482:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001486:	230d      	movs	r3, #13
 8001488:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800148c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001490:	4619      	mov	r1, r3
 8001492:	4807      	ldr	r0, [pc, #28]	; (80014b0 <HAL_SAI_MspInit+0xf4>)
 8001494:	f000 faf6 	bl	8001a84 <HAL_GPIO_Init>

    }
}
 8001498:	bf00      	nop
 800149a:	37c0      	adds	r7, #192	; 0xc0
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40015404 	.word	0x40015404
 80014a4:	20000ca8 	.word	0x20000ca8
 80014a8:	40021000 	.word	0x40021000
 80014ac:	48000400 	.word	0x48000400
 80014b0:	48001000 	.word	0x48001000

080014b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <NMI_Handler+0x4>

080014ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014be:	e7fe      	b.n	80014be <HardFault_Handler+0x4>

080014c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c4:	e7fe      	b.n	80014c4 <MemManage_Handler+0x4>

080014c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ca:	e7fe      	b.n	80014ca <BusFault_Handler+0x4>

080014cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <UsageFault_Handler+0x4>

080014d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001500:	f000 f8c8 	bl	8001694 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}

08001508 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001510:	4a14      	ldr	r2, [pc, #80]	; (8001564 <_sbrk+0x5c>)
 8001512:	4b15      	ldr	r3, [pc, #84]	; (8001568 <_sbrk+0x60>)
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800151c:	4b13      	ldr	r3, [pc, #76]	; (800156c <_sbrk+0x64>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d102      	bne.n	800152a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001524:	4b11      	ldr	r3, [pc, #68]	; (800156c <_sbrk+0x64>)
 8001526:	4a12      	ldr	r2, [pc, #72]	; (8001570 <_sbrk+0x68>)
 8001528:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800152a:	4b10      	ldr	r3, [pc, #64]	; (800156c <_sbrk+0x64>)
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4413      	add	r3, r2
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	429a      	cmp	r2, r3
 8001536:	d207      	bcs.n	8001548 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001538:	f007 fdbc 	bl	80090b4 <__errno>
 800153c:	4603      	mov	r3, r0
 800153e:	220c      	movs	r2, #12
 8001540:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001542:	f04f 33ff 	mov.w	r3, #4294967295
 8001546:	e009      	b.n	800155c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001548:	4b08      	ldr	r3, [pc, #32]	; (800156c <_sbrk+0x64>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800154e:	4b07      	ldr	r3, [pc, #28]	; (800156c <_sbrk+0x64>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4413      	add	r3, r2
 8001556:	4a05      	ldr	r2, [pc, #20]	; (800156c <_sbrk+0x64>)
 8001558:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800155a:	68fb      	ldr	r3, [r7, #12]
}
 800155c:	4618      	mov	r0, r3
 800155e:	3718      	adds	r7, #24
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	200a0000 	.word	0x200a0000
 8001568:	00000800 	.word	0x00000800
 800156c:	20000cac 	.word	0x20000cac
 8001570:	20001110 	.word	0x20001110

08001574 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <SystemInit+0x20>)
 800157a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800157e:	4a05      	ldr	r2, [pc, #20]	; (8001594 <SystemInit+0x20>)
 8001580:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001584:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001598:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015d0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800159c:	f7ff ffea 	bl	8001574 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015a0:	480c      	ldr	r0, [pc, #48]	; (80015d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80015a2:	490d      	ldr	r1, [pc, #52]	; (80015d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015a4:	4a0d      	ldr	r2, [pc, #52]	; (80015dc <LoopForever+0xe>)
  movs r3, #0
 80015a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015a8:	e002      	b.n	80015b0 <LoopCopyDataInit>

080015aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ae:	3304      	adds	r3, #4

080015b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015b4:	d3f9      	bcc.n	80015aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015b6:	4a0a      	ldr	r2, [pc, #40]	; (80015e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015b8:	4c0a      	ldr	r4, [pc, #40]	; (80015e4 <LoopForever+0x16>)
  movs r3, #0
 80015ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015bc:	e001      	b.n	80015c2 <LoopFillZerobss>

080015be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015c0:	3204      	adds	r2, #4

080015c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015c4:	d3fb      	bcc.n	80015be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015c6:	f007 fd7b 	bl	80090c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015ca:	f7fe ffe7 	bl	800059c <main>

080015ce <LoopForever>:

LoopForever:
    b LoopForever
 80015ce:	e7fe      	b.n	80015ce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80015d0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80015d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015d8:	20000988 	.word	0x20000988
  ldr r2, =_sidata
 80015dc:	08011bfc 	.word	0x08011bfc
  ldr r2, =_sbss
 80015e0:	200009a0 	.word	0x200009a0
  ldr r4, =_ebss
 80015e4:	20001110 	.word	0x20001110

080015e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015e8:	e7fe      	b.n	80015e8 <ADC1_IRQHandler>

080015ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015f0:	2300      	movs	r3, #0
 80015f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015f4:	2003      	movs	r0, #3
 80015f6:	f000 f91f 	bl	8001838 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015fa:	2000      	movs	r0, #0
 80015fc:	f000 f80e 	bl	800161c <HAL_InitTick>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d002      	beq.n	800160c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	71fb      	strb	r3, [r7, #7]
 800160a:	e001      	b.n	8001610 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800160c:	f7ff fc5e 	bl	8000ecc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001610:	79fb      	ldrb	r3, [r7, #7]
}
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001624:	2300      	movs	r3, #0
 8001626:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001628:	4b17      	ldr	r3, [pc, #92]	; (8001688 <HAL_InitTick+0x6c>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d023      	beq.n	8001678 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001630:	4b16      	ldr	r3, [pc, #88]	; (800168c <HAL_InitTick+0x70>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	4b14      	ldr	r3, [pc, #80]	; (8001688 <HAL_InitTick+0x6c>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	4619      	mov	r1, r3
 800163a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800163e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001642:	fbb2 f3f3 	udiv	r3, r2, r3
 8001646:	4618      	mov	r0, r3
 8001648:	f000 f91d 	bl	8001886 <HAL_SYSTICK_Config>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d10f      	bne.n	8001672 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2b0f      	cmp	r3, #15
 8001656:	d809      	bhi.n	800166c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001658:	2200      	movs	r2, #0
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	f04f 30ff 	mov.w	r0, #4294967295
 8001660:	f000 f8f5 	bl	800184e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001664:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <HAL_InitTick+0x74>)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	e007      	b.n	800167c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	73fb      	strb	r3, [r7, #15]
 8001670:	e004      	b.n	800167c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	73fb      	strb	r3, [r7, #15]
 8001676:	e001      	b.n	800167c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800167c:	7bfb      	ldrb	r3, [r7, #15]
}
 800167e:	4618      	mov	r0, r3
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000008 	.word	0x20000008
 800168c:	20000000 	.word	0x20000000
 8001690:	20000004 	.word	0x20000004

08001694 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001698:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <HAL_IncTick+0x20>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	461a      	mov	r2, r3
 800169e:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <HAL_IncTick+0x24>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4413      	add	r3, r2
 80016a4:	4a04      	ldr	r2, [pc, #16]	; (80016b8 <HAL_IncTick+0x24>)
 80016a6:	6013      	str	r3, [r2, #0]
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	20000008 	.word	0x20000008
 80016b8:	20000cb0 	.word	0x20000cb0

080016bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  return uwTick;
 80016c0:	4b03      	ldr	r3, [pc, #12]	; (80016d0 <HAL_GetTick+0x14>)
 80016c2:	681b      	ldr	r3, [r3, #0]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	20000cb0 	.word	0x20000cb0

080016d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e4:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <__NVIC_SetPriorityGrouping+0x44>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ea:	68ba      	ldr	r2, [r7, #8]
 80016ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016f0:	4013      	ands	r3, r2
 80016f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001704:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001706:	4a04      	ldr	r2, [pc, #16]	; (8001718 <__NVIC_SetPriorityGrouping+0x44>)
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	60d3      	str	r3, [r2, #12]
}
 800170c:	bf00      	nop
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001720:	4b04      	ldr	r3, [pc, #16]	; (8001734 <__NVIC_GetPriorityGrouping+0x18>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	0a1b      	lsrs	r3, r3, #8
 8001726:	f003 0307 	and.w	r3, r3, #7
}
 800172a:	4618      	mov	r0, r3
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	6039      	str	r1, [r7, #0]
 8001742:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001748:	2b00      	cmp	r3, #0
 800174a:	db0a      	blt.n	8001762 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	b2da      	uxtb	r2, r3
 8001750:	490c      	ldr	r1, [pc, #48]	; (8001784 <__NVIC_SetPriority+0x4c>)
 8001752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001756:	0112      	lsls	r2, r2, #4
 8001758:	b2d2      	uxtb	r2, r2
 800175a:	440b      	add	r3, r1
 800175c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001760:	e00a      	b.n	8001778 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	b2da      	uxtb	r2, r3
 8001766:	4908      	ldr	r1, [pc, #32]	; (8001788 <__NVIC_SetPriority+0x50>)
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	f003 030f 	and.w	r3, r3, #15
 800176e:	3b04      	subs	r3, #4
 8001770:	0112      	lsls	r2, r2, #4
 8001772:	b2d2      	uxtb	r2, r2
 8001774:	440b      	add	r3, r1
 8001776:	761a      	strb	r2, [r3, #24]
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	e000e100 	.word	0xe000e100
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800178c:	b480      	push	{r7}
 800178e:	b089      	sub	sp, #36	; 0x24
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	f1c3 0307 	rsb	r3, r3, #7
 80017a6:	2b04      	cmp	r3, #4
 80017a8:	bf28      	it	cs
 80017aa:	2304      	movcs	r3, #4
 80017ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	3304      	adds	r3, #4
 80017b2:	2b06      	cmp	r3, #6
 80017b4:	d902      	bls.n	80017bc <NVIC_EncodePriority+0x30>
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	3b03      	subs	r3, #3
 80017ba:	e000      	b.n	80017be <NVIC_EncodePriority+0x32>
 80017bc:	2300      	movs	r3, #0
 80017be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c0:	f04f 32ff 	mov.w	r2, #4294967295
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	43da      	mvns	r2, r3
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	401a      	ands	r2, r3
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017d4:	f04f 31ff 	mov.w	r1, #4294967295
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	fa01 f303 	lsl.w	r3, r1, r3
 80017de:	43d9      	mvns	r1, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e4:	4313      	orrs	r3, r2
         );
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3724      	adds	r7, #36	; 0x24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
	...

080017f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3b01      	subs	r3, #1
 8001800:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001804:	d301      	bcc.n	800180a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001806:	2301      	movs	r3, #1
 8001808:	e00f      	b.n	800182a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800180a:	4a0a      	ldr	r2, [pc, #40]	; (8001834 <SysTick_Config+0x40>)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3b01      	subs	r3, #1
 8001810:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001812:	210f      	movs	r1, #15
 8001814:	f04f 30ff 	mov.w	r0, #4294967295
 8001818:	f7ff ff8e 	bl	8001738 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800181c:	4b05      	ldr	r3, [pc, #20]	; (8001834 <SysTick_Config+0x40>)
 800181e:	2200      	movs	r2, #0
 8001820:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001822:	4b04      	ldr	r3, [pc, #16]	; (8001834 <SysTick_Config+0x40>)
 8001824:	2207      	movs	r2, #7
 8001826:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	e000e010 	.word	0xe000e010

08001838 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f7ff ff47 	bl	80016d4 <__NVIC_SetPriorityGrouping>
}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b086      	sub	sp, #24
 8001852:	af00      	add	r7, sp, #0
 8001854:	4603      	mov	r3, r0
 8001856:	60b9      	str	r1, [r7, #8]
 8001858:	607a      	str	r2, [r7, #4]
 800185a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800185c:	2300      	movs	r3, #0
 800185e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001860:	f7ff ff5c 	bl	800171c <__NVIC_GetPriorityGrouping>
 8001864:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	68b9      	ldr	r1, [r7, #8]
 800186a:	6978      	ldr	r0, [r7, #20]
 800186c:	f7ff ff8e 	bl	800178c <NVIC_EncodePriority>
 8001870:	4602      	mov	r2, r0
 8001872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001876:	4611      	mov	r1, r2
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff ff5d 	bl	8001738 <__NVIC_SetPriority>
}
 800187e:	bf00      	nop
 8001880:	3718      	adds	r7, #24
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b082      	sub	sp, #8
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f7ff ffb0 	bl	80017f4 <SysTick_Config>
 8001894:	4603      	mov	r3, r0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
	...

080018a0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e054      	b.n	800195c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	7f5b      	ldrb	r3, [r3, #29]
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d105      	bne.n	80018c8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff fb26 	bl	8000f14 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2202      	movs	r2, #2
 80018cc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	791b      	ldrb	r3, [r3, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d10c      	bne.n	80018f0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a22      	ldr	r2, [pc, #136]	; (8001964 <HAL_CRC_Init+0xc4>)
 80018dc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f022 0218 	bic.w	r2, r2, #24
 80018ec:	609a      	str	r2, [r3, #8]
 80018ee:	e00c      	b.n	800190a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6899      	ldr	r1, [r3, #8]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	461a      	mov	r2, r3
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f000 f834 	bl	8001968 <HAL_CRCEx_Polynomial_Set>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e028      	b.n	800195c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	795b      	ldrb	r3, [r3, #5]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d105      	bne.n	800191e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f04f 32ff 	mov.w	r2, #4294967295
 800191a:	611a      	str	r2, [r3, #16]
 800191c:	e004      	b.n	8001928 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	6912      	ldr	r2, [r2, #16]
 8001926:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	695a      	ldr	r2, [r3, #20]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	430a      	orrs	r2, r1
 800193c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	699a      	ldr	r2, [r3, #24]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	430a      	orrs	r2, r1
 8001952:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	04c11db7 	.word	0x04c11db7

08001968 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001968:	b480      	push	{r7}
 800196a:	b087      	sub	sp, #28
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001974:	2300      	movs	r3, #0
 8001976:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001978:	231f      	movs	r3, #31
 800197a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	2b00      	cmp	r3, #0
 8001984:	d102      	bne.n	800198c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	75fb      	strb	r3, [r7, #23]
 800198a:	e063      	b.n	8001a54 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800198c:	bf00      	nop
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1e5a      	subs	r2, r3, #1
 8001992:	613a      	str	r2, [r7, #16]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d009      	beq.n	80019ac <HAL_CRCEx_Polynomial_Set+0x44>
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	f003 031f 	and.w	r3, r3, #31
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	fa22 f303 	lsr.w	r3, r2, r3
 80019a4:	f003 0301 	and.w	r3, r3, #1
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d0f0      	beq.n	800198e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2b18      	cmp	r3, #24
 80019b0:	d846      	bhi.n	8001a40 <HAL_CRCEx_Polynomial_Set+0xd8>
 80019b2:	a201      	add	r2, pc, #4	; (adr r2, 80019b8 <HAL_CRCEx_Polynomial_Set+0x50>)
 80019b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b8:	08001a47 	.word	0x08001a47
 80019bc:	08001a41 	.word	0x08001a41
 80019c0:	08001a41 	.word	0x08001a41
 80019c4:	08001a41 	.word	0x08001a41
 80019c8:	08001a41 	.word	0x08001a41
 80019cc:	08001a41 	.word	0x08001a41
 80019d0:	08001a41 	.word	0x08001a41
 80019d4:	08001a41 	.word	0x08001a41
 80019d8:	08001a35 	.word	0x08001a35
 80019dc:	08001a41 	.word	0x08001a41
 80019e0:	08001a41 	.word	0x08001a41
 80019e4:	08001a41 	.word	0x08001a41
 80019e8:	08001a41 	.word	0x08001a41
 80019ec:	08001a41 	.word	0x08001a41
 80019f0:	08001a41 	.word	0x08001a41
 80019f4:	08001a41 	.word	0x08001a41
 80019f8:	08001a29 	.word	0x08001a29
 80019fc:	08001a41 	.word	0x08001a41
 8001a00:	08001a41 	.word	0x08001a41
 8001a04:	08001a41 	.word	0x08001a41
 8001a08:	08001a41 	.word	0x08001a41
 8001a0c:	08001a41 	.word	0x08001a41
 8001a10:	08001a41 	.word	0x08001a41
 8001a14:	08001a41 	.word	0x08001a41
 8001a18:	08001a1d 	.word	0x08001a1d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	2b06      	cmp	r3, #6
 8001a20:	d913      	bls.n	8001a4a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001a26:	e010      	b.n	8001a4a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	2b07      	cmp	r3, #7
 8001a2c:	d90f      	bls.n	8001a4e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001a32:	e00c      	b.n	8001a4e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	2b0f      	cmp	r3, #15
 8001a38:	d90b      	bls.n	8001a52 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001a3e:	e008      	b.n	8001a52 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	75fb      	strb	r3, [r7, #23]
        break;
 8001a44:	e006      	b.n	8001a54 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001a46:	bf00      	nop
 8001a48:	e004      	b.n	8001a54 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001a4a:	bf00      	nop
 8001a4c:	e002      	b.n	8001a54 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001a4e:	bf00      	nop
 8001a50:	e000      	b.n	8001a54 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001a52:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8001a54:	7dfb      	ldrb	r3, [r7, #23]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d10d      	bne.n	8001a76 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	68ba      	ldr	r2, [r7, #8]
 8001a60:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f023 0118 	bic.w	r1, r3, #24
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	430a      	orrs	r2, r1
 8001a74:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001a76:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	371c      	adds	r7, #28
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b087      	sub	sp, #28
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a92:	e166      	b.n	8001d62 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	2101      	movs	r1, #1
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f000 8158 	beq.w	8001d5c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 0303 	and.w	r3, r3, #3
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d005      	beq.n	8001ac4 <HAL_GPIO_Init+0x40>
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f003 0303 	and.w	r3, r3, #3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d130      	bne.n	8001b26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	2203      	movs	r2, #3
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	68da      	ldr	r2, [r3, #12]
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001afa:	2201      	movs	r2, #1
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43db      	mvns	r3, r3
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	4013      	ands	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	091b      	lsrs	r3, r3, #4
 8001b10:	f003 0201 	and.w	r2, r3, #1
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f003 0303 	and.w	r3, r3, #3
 8001b2e:	2b03      	cmp	r3, #3
 8001b30:	d017      	beq.n	8001b62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	2203      	movs	r2, #3
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43db      	mvns	r3, r3
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	4013      	ands	r3, r2
 8001b48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	689a      	ldr	r2, [r3, #8]
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d123      	bne.n	8001bb6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	08da      	lsrs	r2, r3, #3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	3208      	adds	r2, #8
 8001b76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	220f      	movs	r2, #15
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	691a      	ldr	r2, [r3, #16]
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	f003 0307 	and.w	r3, r3, #7
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	08da      	lsrs	r2, r3, #3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3208      	adds	r2, #8
 8001bb0:	6939      	ldr	r1, [r7, #16]
 8001bb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	2203      	movs	r2, #3
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f003 0203 	and.w	r2, r3, #3
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f000 80b2 	beq.w	8001d5c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf8:	4b61      	ldr	r3, [pc, #388]	; (8001d80 <HAL_GPIO_Init+0x2fc>)
 8001bfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bfc:	4a60      	ldr	r2, [pc, #384]	; (8001d80 <HAL_GPIO_Init+0x2fc>)
 8001bfe:	f043 0301 	orr.w	r3, r3, #1
 8001c02:	6613      	str	r3, [r2, #96]	; 0x60
 8001c04:	4b5e      	ldr	r3, [pc, #376]	; (8001d80 <HAL_GPIO_Init+0x2fc>)
 8001c06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	60bb      	str	r3, [r7, #8]
 8001c0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c10:	4a5c      	ldr	r2, [pc, #368]	; (8001d84 <HAL_GPIO_Init+0x300>)
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	089b      	lsrs	r3, r3, #2
 8001c16:	3302      	adds	r3, #2
 8001c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	f003 0303 	and.w	r3, r3, #3
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	220f      	movs	r2, #15
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	4013      	ands	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c3a:	d02b      	beq.n	8001c94 <HAL_GPIO_Init+0x210>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a52      	ldr	r2, [pc, #328]	; (8001d88 <HAL_GPIO_Init+0x304>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d025      	beq.n	8001c90 <HAL_GPIO_Init+0x20c>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a51      	ldr	r2, [pc, #324]	; (8001d8c <HAL_GPIO_Init+0x308>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d01f      	beq.n	8001c8c <HAL_GPIO_Init+0x208>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4a50      	ldr	r2, [pc, #320]	; (8001d90 <HAL_GPIO_Init+0x30c>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d019      	beq.n	8001c88 <HAL_GPIO_Init+0x204>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4a4f      	ldr	r2, [pc, #316]	; (8001d94 <HAL_GPIO_Init+0x310>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d013      	beq.n	8001c84 <HAL_GPIO_Init+0x200>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4a4e      	ldr	r2, [pc, #312]	; (8001d98 <HAL_GPIO_Init+0x314>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d00d      	beq.n	8001c80 <HAL_GPIO_Init+0x1fc>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4a4d      	ldr	r2, [pc, #308]	; (8001d9c <HAL_GPIO_Init+0x318>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d007      	beq.n	8001c7c <HAL_GPIO_Init+0x1f8>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4a4c      	ldr	r2, [pc, #304]	; (8001da0 <HAL_GPIO_Init+0x31c>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d101      	bne.n	8001c78 <HAL_GPIO_Init+0x1f4>
 8001c74:	2307      	movs	r3, #7
 8001c76:	e00e      	b.n	8001c96 <HAL_GPIO_Init+0x212>
 8001c78:	2308      	movs	r3, #8
 8001c7a:	e00c      	b.n	8001c96 <HAL_GPIO_Init+0x212>
 8001c7c:	2306      	movs	r3, #6
 8001c7e:	e00a      	b.n	8001c96 <HAL_GPIO_Init+0x212>
 8001c80:	2305      	movs	r3, #5
 8001c82:	e008      	b.n	8001c96 <HAL_GPIO_Init+0x212>
 8001c84:	2304      	movs	r3, #4
 8001c86:	e006      	b.n	8001c96 <HAL_GPIO_Init+0x212>
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e004      	b.n	8001c96 <HAL_GPIO_Init+0x212>
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	e002      	b.n	8001c96 <HAL_GPIO_Init+0x212>
 8001c90:	2301      	movs	r3, #1
 8001c92:	e000      	b.n	8001c96 <HAL_GPIO_Init+0x212>
 8001c94:	2300      	movs	r3, #0
 8001c96:	697a      	ldr	r2, [r7, #20]
 8001c98:	f002 0203 	and.w	r2, r2, #3
 8001c9c:	0092      	lsls	r2, r2, #2
 8001c9e:	4093      	lsls	r3, r2
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ca6:	4937      	ldr	r1, [pc, #220]	; (8001d84 <HAL_GPIO_Init+0x300>)
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	089b      	lsrs	r3, r3, #2
 8001cac:	3302      	adds	r3, #2
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cb4:	4b3b      	ldr	r3, [pc, #236]	; (8001da4 <HAL_GPIO_Init+0x320>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d003      	beq.n	8001cd8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001cd8:	4a32      	ldr	r2, [pc, #200]	; (8001da4 <HAL_GPIO_Init+0x320>)
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001cde:	4b31      	ldr	r3, [pc, #196]	; (8001da4 <HAL_GPIO_Init+0x320>)
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	4013      	ands	r3, r2
 8001cec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d02:	4a28      	ldr	r2, [pc, #160]	; (8001da4 <HAL_GPIO_Init+0x320>)
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d08:	4b26      	ldr	r3, [pc, #152]	; (8001da4 <HAL_GPIO_Init+0x320>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	43db      	mvns	r3, r3
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	4013      	ands	r3, r2
 8001d16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d003      	beq.n	8001d2c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d2c:	4a1d      	ldr	r2, [pc, #116]	; (8001da4 <HAL_GPIO_Init+0x320>)
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001d32:	4b1c      	ldr	r3, [pc, #112]	; (8001da4 <HAL_GPIO_Init+0x320>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d56:	4a13      	ldr	r2, [pc, #76]	; (8001da4 <HAL_GPIO_Init+0x320>)
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	fa22 f303 	lsr.w	r3, r2, r3
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f47f ae91 	bne.w	8001a94 <HAL_GPIO_Init+0x10>
  }
}
 8001d72:	bf00      	nop
 8001d74:	bf00      	nop
 8001d76:	371c      	adds	r7, #28
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	40021000 	.word	0x40021000
 8001d84:	40010000 	.word	0x40010000
 8001d88:	48000400 	.word	0x48000400
 8001d8c:	48000800 	.word	0x48000800
 8001d90:	48000c00 	.word	0x48000c00
 8001d94:	48001000 	.word	0x48001000
 8001d98:	48001400 	.word	0x48001400
 8001d9c:	48001800 	.word	0x48001800
 8001da0:	48001c00 	.word	0x48001c00
 8001da4:	40010400 	.word	0x40010400

08001da8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	460b      	mov	r3, r1
 8001db2:	807b      	strh	r3, [r7, #2]
 8001db4:	4613      	mov	r3, r2
 8001db6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001db8:	787b      	ldrb	r3, [r7, #1]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d003      	beq.n	8001dc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dbe:	887a      	ldrh	r2, [r7, #2]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001dc4:	e002      	b.n	8001dcc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001dc6:	887a      	ldrh	r2, [r7, #2]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e08d      	b.n	8001f06 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d106      	bne.n	8001e04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7ff f8a8 	bl	8000f54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2224      	movs	r2, #36	; 0x24
 8001e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 0201 	bic.w	r2, r2, #1
 8001e1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685a      	ldr	r2, [r3, #4]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e28:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e38:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d107      	bne.n	8001e52 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	689a      	ldr	r2, [r3, #8]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	e006      	b.n	8001e60 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	689a      	ldr	r2, [r3, #8]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001e5e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d108      	bne.n	8001e7a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	685a      	ldr	r2, [r3, #4]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e76:	605a      	str	r2, [r3, #4]
 8001e78:	e007      	b.n	8001e8a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	685a      	ldr	r2, [r3, #4]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e88:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	6812      	ldr	r2, [r2, #0]
 8001e94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e9c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68da      	ldr	r2, [r3, #12]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001eac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	691a      	ldr	r2, [r3, #16]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	69d9      	ldr	r1, [r3, #28]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a1a      	ldr	r2, [r3, #32]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 0201 	orr.w	r2, r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2220      	movs	r2, #32
 8001ef2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
 8001f16:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	2b20      	cmp	r3, #32
 8001f22:	d138      	bne.n	8001f96 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d101      	bne.n	8001f32 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f2e:	2302      	movs	r3, #2
 8001f30:	e032      	b.n	8001f98 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2224      	movs	r2, #36	; 0x24
 8001f3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 0201 	bic.w	r2, r2, #1
 8001f50:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f60:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6819      	ldr	r1, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f042 0201 	orr.w	r2, r2, #1
 8001f80:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2220      	movs	r2, #32
 8001f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f92:	2300      	movs	r3, #0
 8001f94:	e000      	b.n	8001f98 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f96:	2302      	movs	r3, #2
  }
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b20      	cmp	r3, #32
 8001fb8:	d139      	bne.n	800202e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d101      	bne.n	8001fc8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	e033      	b.n	8002030 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2224      	movs	r2, #36	; 0x24
 8001fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f022 0201 	bic.w	r2, r2, #1
 8001fe6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ff6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	021b      	lsls	r3, r3, #8
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f042 0201 	orr.w	r2, r2, #1
 8002018:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2220      	movs	r2, #32
 800201e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800202a:	2300      	movs	r3, #0
 800202c:	e000      	b.n	8002030 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800202e:	2302      	movs	r3, #2
  }
}
 8002030:	4618      	mov	r0, r3
 8002032:	3714      	adds	r7, #20
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002040:	4b0d      	ldr	r3, [pc, #52]	; (8002078 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002048:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800204c:	d102      	bne.n	8002054 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800204e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002052:	e00b      	b.n	800206c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002054:	4b08      	ldr	r3, [pc, #32]	; (8002078 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002056:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800205a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002062:	d102      	bne.n	800206a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002064:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002068:	e000      	b.n	800206c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800206a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800206c:	4618      	mov	r0, r3
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	40007000 	.word	0x40007000

0800207c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d141      	bne.n	800210e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800208a:	4b4b      	ldr	r3, [pc, #300]	; (80021b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002092:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002096:	d131      	bne.n	80020fc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002098:	4b47      	ldr	r3, [pc, #284]	; (80021b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800209a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800209e:	4a46      	ldr	r2, [pc, #280]	; (80021b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020a8:	4b43      	ldr	r3, [pc, #268]	; (80021b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020b0:	4a41      	ldr	r2, [pc, #260]	; (80021b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80020b8:	4b40      	ldr	r3, [pc, #256]	; (80021bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2232      	movs	r2, #50	; 0x32
 80020be:	fb02 f303 	mul.w	r3, r2, r3
 80020c2:	4a3f      	ldr	r2, [pc, #252]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80020c4:	fba2 2303 	umull	r2, r3, r2, r3
 80020c8:	0c9b      	lsrs	r3, r3, #18
 80020ca:	3301      	adds	r3, #1
 80020cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020ce:	e002      	b.n	80020d6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	3b01      	subs	r3, #1
 80020d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020d6:	4b38      	ldr	r3, [pc, #224]	; (80021b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020e2:	d102      	bne.n	80020ea <HAL_PWREx_ControlVoltageScaling+0x6e>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1f2      	bne.n	80020d0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020ea:	4b33      	ldr	r3, [pc, #204]	; (80021b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020f6:	d158      	bne.n	80021aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e057      	b.n	80021ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020fc:	4b2e      	ldr	r3, [pc, #184]	; (80021b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002102:	4a2d      	ldr	r2, [pc, #180]	; (80021b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002104:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002108:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800210c:	e04d      	b.n	80021aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002114:	d141      	bne.n	800219a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002116:	4b28      	ldr	r3, [pc, #160]	; (80021b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800211e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002122:	d131      	bne.n	8002188 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002124:	4b24      	ldr	r3, [pc, #144]	; (80021b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002126:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800212a:	4a23      	ldr	r2, [pc, #140]	; (80021b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800212c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002130:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002134:	4b20      	ldr	r3, [pc, #128]	; (80021b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800213c:	4a1e      	ldr	r2, [pc, #120]	; (80021b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800213e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002142:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002144:	4b1d      	ldr	r3, [pc, #116]	; (80021bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2232      	movs	r2, #50	; 0x32
 800214a:	fb02 f303 	mul.w	r3, r2, r3
 800214e:	4a1c      	ldr	r2, [pc, #112]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002150:	fba2 2303 	umull	r2, r3, r2, r3
 8002154:	0c9b      	lsrs	r3, r3, #18
 8002156:	3301      	adds	r3, #1
 8002158:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800215a:	e002      	b.n	8002162 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	3b01      	subs	r3, #1
 8002160:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002162:	4b15      	ldr	r3, [pc, #84]	; (80021b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800216a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800216e:	d102      	bne.n	8002176 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f2      	bne.n	800215c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002176:	4b10      	ldr	r3, [pc, #64]	; (80021b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800217e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002182:	d112      	bne.n	80021aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e011      	b.n	80021ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002188:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800218a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800218e:	4a0a      	ldr	r2, [pc, #40]	; (80021b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002194:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002198:	e007      	b.n	80021aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800219a:	4b07      	ldr	r3, [pc, #28]	; (80021b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021a2:	4a05      	ldr	r2, [pc, #20]	; (80021b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021a8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3714      	adds	r7, #20
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	40007000 	.word	0x40007000
 80021bc:	20000000 	.word	0x20000000
 80021c0:	431bde83 	.word	0x431bde83

080021c4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80021c8:	4b05      	ldr	r3, [pc, #20]	; (80021e0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	4a04      	ldr	r2, [pc, #16]	; (80021e0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80021ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021d2:	6053      	str	r3, [r2, #4]
}
 80021d4:	bf00      	nop
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	40007000 	.word	0x40007000

080021e4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b088      	sub	sp, #32
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d102      	bne.n	80021f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	f000 bc08 	b.w	8002a08 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021f8:	4b96      	ldr	r3, [pc, #600]	; (8002454 <HAL_RCC_OscConfig+0x270>)
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f003 030c 	and.w	r3, r3, #12
 8002200:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002202:	4b94      	ldr	r3, [pc, #592]	; (8002454 <HAL_RCC_OscConfig+0x270>)
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	f003 0303 	and.w	r3, r3, #3
 800220a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0310 	and.w	r3, r3, #16
 8002214:	2b00      	cmp	r3, #0
 8002216:	f000 80e4 	beq.w	80023e2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d007      	beq.n	8002230 <HAL_RCC_OscConfig+0x4c>
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	2b0c      	cmp	r3, #12
 8002224:	f040 808b 	bne.w	800233e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	2b01      	cmp	r3, #1
 800222c:	f040 8087 	bne.w	800233e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002230:	4b88      	ldr	r3, [pc, #544]	; (8002454 <HAL_RCC_OscConfig+0x270>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d005      	beq.n	8002248 <HAL_RCC_OscConfig+0x64>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d101      	bne.n	8002248 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e3df      	b.n	8002a08 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a1a      	ldr	r2, [r3, #32]
 800224c:	4b81      	ldr	r3, [pc, #516]	; (8002454 <HAL_RCC_OscConfig+0x270>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0308 	and.w	r3, r3, #8
 8002254:	2b00      	cmp	r3, #0
 8002256:	d004      	beq.n	8002262 <HAL_RCC_OscConfig+0x7e>
 8002258:	4b7e      	ldr	r3, [pc, #504]	; (8002454 <HAL_RCC_OscConfig+0x270>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002260:	e005      	b.n	800226e <HAL_RCC_OscConfig+0x8a>
 8002262:	4b7c      	ldr	r3, [pc, #496]	; (8002454 <HAL_RCC_OscConfig+0x270>)
 8002264:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002268:	091b      	lsrs	r3, r3, #4
 800226a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800226e:	4293      	cmp	r3, r2
 8002270:	d223      	bcs.n	80022ba <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a1b      	ldr	r3, [r3, #32]
 8002276:	4618      	mov	r0, r3
 8002278:	f000 fdca 	bl	8002e10 <RCC_SetFlashLatencyFromMSIRange>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e3c0      	b.n	8002a08 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002286:	4b73      	ldr	r3, [pc, #460]	; (8002454 <HAL_RCC_OscConfig+0x270>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a72      	ldr	r2, [pc, #456]	; (8002454 <HAL_RCC_OscConfig+0x270>)
 800228c:	f043 0308 	orr.w	r3, r3, #8
 8002290:	6013      	str	r3, [r2, #0]
 8002292:	4b70      	ldr	r3, [pc, #448]	; (8002454 <HAL_RCC_OscConfig+0x270>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	496d      	ldr	r1, [pc, #436]	; (8002454 <HAL_RCC_OscConfig+0x270>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022a4:	4b6b      	ldr	r3, [pc, #428]	; (8002454 <HAL_RCC_OscConfig+0x270>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	69db      	ldr	r3, [r3, #28]
 80022b0:	021b      	lsls	r3, r3, #8
 80022b2:	4968      	ldr	r1, [pc, #416]	; (8002454 <HAL_RCC_OscConfig+0x270>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	604b      	str	r3, [r1, #4]
 80022b8:	e025      	b.n	8002306 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022ba:	4b66      	ldr	r3, [pc, #408]	; (8002454 <HAL_RCC_OscConfig+0x270>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a65      	ldr	r2, [pc, #404]	; (8002454 <HAL_RCC_OscConfig+0x270>)
 80022c0:	f043 0308 	orr.w	r3, r3, #8
 80022c4:	6013      	str	r3, [r2, #0]
 80022c6:	4b63      	ldr	r3, [pc, #396]	; (8002454 <HAL_RCC_OscConfig+0x270>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a1b      	ldr	r3, [r3, #32]
 80022d2:	4960      	ldr	r1, [pc, #384]	; (8002454 <HAL_RCC_OscConfig+0x270>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022d8:	4b5e      	ldr	r3, [pc, #376]	; (8002454 <HAL_RCC_OscConfig+0x270>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	69db      	ldr	r3, [r3, #28]
 80022e4:	021b      	lsls	r3, r3, #8
 80022e6:	495b      	ldr	r1, [pc, #364]	; (8002454 <HAL_RCC_OscConfig+0x270>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d109      	bne.n	8002306 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 fd8a 	bl	8002e10 <RCC_SetFlashLatencyFromMSIRange>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e380      	b.n	8002a08 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002306:	f000 fcc1 	bl	8002c8c <HAL_RCC_GetSysClockFreq>
 800230a:	4602      	mov	r2, r0
 800230c:	4b51      	ldr	r3, [pc, #324]	; (8002454 <HAL_RCC_OscConfig+0x270>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	091b      	lsrs	r3, r3, #4
 8002312:	f003 030f 	and.w	r3, r3, #15
 8002316:	4950      	ldr	r1, [pc, #320]	; (8002458 <HAL_RCC_OscConfig+0x274>)
 8002318:	5ccb      	ldrb	r3, [r1, r3]
 800231a:	f003 031f 	and.w	r3, r3, #31
 800231e:	fa22 f303 	lsr.w	r3, r2, r3
 8002322:	4a4e      	ldr	r2, [pc, #312]	; (800245c <HAL_RCC_OscConfig+0x278>)
 8002324:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002326:	4b4e      	ldr	r3, [pc, #312]	; (8002460 <HAL_RCC_OscConfig+0x27c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff f976 	bl	800161c <HAL_InitTick>
 8002330:	4603      	mov	r3, r0
 8002332:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002334:	7bfb      	ldrb	r3, [r7, #15]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d052      	beq.n	80023e0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800233a:	7bfb      	ldrb	r3, [r7, #15]
 800233c:	e364      	b.n	8002a08 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d032      	beq.n	80023ac <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002346:	4b43      	ldr	r3, [pc, #268]	; (8002454 <HAL_RCC_OscConfig+0x270>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a42      	ldr	r2, [pc, #264]	; (8002454 <HAL_RCC_OscConfig+0x270>)
 800234c:	f043 0301 	orr.w	r3, r3, #1
 8002350:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002352:	f7ff f9b3 	bl	80016bc <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800235a:	f7ff f9af 	bl	80016bc <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e34d      	b.n	8002a08 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800236c:	4b39      	ldr	r3, [pc, #228]	; (8002454 <HAL_RCC_OscConfig+0x270>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d0f0      	beq.n	800235a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002378:	4b36      	ldr	r3, [pc, #216]	; (8002454 <HAL_RCC_OscConfig+0x270>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a35      	ldr	r2, [pc, #212]	; (8002454 <HAL_RCC_OscConfig+0x270>)
 800237e:	f043 0308 	orr.w	r3, r3, #8
 8002382:	6013      	str	r3, [r2, #0]
 8002384:	4b33      	ldr	r3, [pc, #204]	; (8002454 <HAL_RCC_OscConfig+0x270>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	4930      	ldr	r1, [pc, #192]	; (8002454 <HAL_RCC_OscConfig+0x270>)
 8002392:	4313      	orrs	r3, r2
 8002394:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002396:	4b2f      	ldr	r3, [pc, #188]	; (8002454 <HAL_RCC_OscConfig+0x270>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	69db      	ldr	r3, [r3, #28]
 80023a2:	021b      	lsls	r3, r3, #8
 80023a4:	492b      	ldr	r1, [pc, #172]	; (8002454 <HAL_RCC_OscConfig+0x270>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	604b      	str	r3, [r1, #4]
 80023aa:	e01a      	b.n	80023e2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023ac:	4b29      	ldr	r3, [pc, #164]	; (8002454 <HAL_RCC_OscConfig+0x270>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a28      	ldr	r2, [pc, #160]	; (8002454 <HAL_RCC_OscConfig+0x270>)
 80023b2:	f023 0301 	bic.w	r3, r3, #1
 80023b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023b8:	f7ff f980 	bl	80016bc <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023c0:	f7ff f97c 	bl	80016bc <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e31a      	b.n	8002a08 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023d2:	4b20      	ldr	r3, [pc, #128]	; (8002454 <HAL_RCC_OscConfig+0x270>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f0      	bne.n	80023c0 <HAL_RCC_OscConfig+0x1dc>
 80023de:	e000      	b.n	80023e2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023e0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d073      	beq.n	80024d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	2b08      	cmp	r3, #8
 80023f2:	d005      	beq.n	8002400 <HAL_RCC_OscConfig+0x21c>
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	2b0c      	cmp	r3, #12
 80023f8:	d10e      	bne.n	8002418 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	2b03      	cmp	r3, #3
 80023fe:	d10b      	bne.n	8002418 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002400:	4b14      	ldr	r3, [pc, #80]	; (8002454 <HAL_RCC_OscConfig+0x270>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d063      	beq.n	80024d4 <HAL_RCC_OscConfig+0x2f0>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d15f      	bne.n	80024d4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e2f7      	b.n	8002a08 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002420:	d106      	bne.n	8002430 <HAL_RCC_OscConfig+0x24c>
 8002422:	4b0c      	ldr	r3, [pc, #48]	; (8002454 <HAL_RCC_OscConfig+0x270>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a0b      	ldr	r2, [pc, #44]	; (8002454 <HAL_RCC_OscConfig+0x270>)
 8002428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800242c:	6013      	str	r3, [r2, #0]
 800242e:	e025      	b.n	800247c <HAL_RCC_OscConfig+0x298>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002438:	d114      	bne.n	8002464 <HAL_RCC_OscConfig+0x280>
 800243a:	4b06      	ldr	r3, [pc, #24]	; (8002454 <HAL_RCC_OscConfig+0x270>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a05      	ldr	r2, [pc, #20]	; (8002454 <HAL_RCC_OscConfig+0x270>)
 8002440:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002444:	6013      	str	r3, [r2, #0]
 8002446:	4b03      	ldr	r3, [pc, #12]	; (8002454 <HAL_RCC_OscConfig+0x270>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a02      	ldr	r2, [pc, #8]	; (8002454 <HAL_RCC_OscConfig+0x270>)
 800244c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002450:	6013      	str	r3, [r2, #0]
 8002452:	e013      	b.n	800247c <HAL_RCC_OscConfig+0x298>
 8002454:	40021000 	.word	0x40021000
 8002458:	0800a0dc 	.word	0x0800a0dc
 800245c:	20000000 	.word	0x20000000
 8002460:	20000004 	.word	0x20000004
 8002464:	4ba0      	ldr	r3, [pc, #640]	; (80026e8 <HAL_RCC_OscConfig+0x504>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a9f      	ldr	r2, [pc, #636]	; (80026e8 <HAL_RCC_OscConfig+0x504>)
 800246a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800246e:	6013      	str	r3, [r2, #0]
 8002470:	4b9d      	ldr	r3, [pc, #628]	; (80026e8 <HAL_RCC_OscConfig+0x504>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a9c      	ldr	r2, [pc, #624]	; (80026e8 <HAL_RCC_OscConfig+0x504>)
 8002476:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800247a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d013      	beq.n	80024ac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002484:	f7ff f91a 	bl	80016bc <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800248c:	f7ff f916 	bl	80016bc <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b64      	cmp	r3, #100	; 0x64
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e2b4      	b.n	8002a08 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800249e:	4b92      	ldr	r3, [pc, #584]	; (80026e8 <HAL_RCC_OscConfig+0x504>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d0f0      	beq.n	800248c <HAL_RCC_OscConfig+0x2a8>
 80024aa:	e014      	b.n	80024d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ac:	f7ff f906 	bl	80016bc <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024b4:	f7ff f902 	bl	80016bc <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b64      	cmp	r3, #100	; 0x64
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e2a0      	b.n	8002a08 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024c6:	4b88      	ldr	r3, [pc, #544]	; (80026e8 <HAL_RCC_OscConfig+0x504>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1f0      	bne.n	80024b4 <HAL_RCC_OscConfig+0x2d0>
 80024d2:	e000      	b.n	80024d6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d060      	beq.n	80025a4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	2b04      	cmp	r3, #4
 80024e6:	d005      	beq.n	80024f4 <HAL_RCC_OscConfig+0x310>
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	2b0c      	cmp	r3, #12
 80024ec:	d119      	bne.n	8002522 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d116      	bne.n	8002522 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024f4:	4b7c      	ldr	r3, [pc, #496]	; (80026e8 <HAL_RCC_OscConfig+0x504>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d005      	beq.n	800250c <HAL_RCC_OscConfig+0x328>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d101      	bne.n	800250c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e27d      	b.n	8002a08 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800250c:	4b76      	ldr	r3, [pc, #472]	; (80026e8 <HAL_RCC_OscConfig+0x504>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	061b      	lsls	r3, r3, #24
 800251a:	4973      	ldr	r1, [pc, #460]	; (80026e8 <HAL_RCC_OscConfig+0x504>)
 800251c:	4313      	orrs	r3, r2
 800251e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002520:	e040      	b.n	80025a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d023      	beq.n	8002572 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800252a:	4b6f      	ldr	r3, [pc, #444]	; (80026e8 <HAL_RCC_OscConfig+0x504>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a6e      	ldr	r2, [pc, #440]	; (80026e8 <HAL_RCC_OscConfig+0x504>)
 8002530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002534:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002536:	f7ff f8c1 	bl	80016bc <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800253c:	e008      	b.n	8002550 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800253e:	f7ff f8bd 	bl	80016bc <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e25b      	b.n	8002a08 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002550:	4b65      	ldr	r3, [pc, #404]	; (80026e8 <HAL_RCC_OscConfig+0x504>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0f0      	beq.n	800253e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800255c:	4b62      	ldr	r3, [pc, #392]	; (80026e8 <HAL_RCC_OscConfig+0x504>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	061b      	lsls	r3, r3, #24
 800256a:	495f      	ldr	r1, [pc, #380]	; (80026e8 <HAL_RCC_OscConfig+0x504>)
 800256c:	4313      	orrs	r3, r2
 800256e:	604b      	str	r3, [r1, #4]
 8002570:	e018      	b.n	80025a4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002572:	4b5d      	ldr	r3, [pc, #372]	; (80026e8 <HAL_RCC_OscConfig+0x504>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a5c      	ldr	r2, [pc, #368]	; (80026e8 <HAL_RCC_OscConfig+0x504>)
 8002578:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800257c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800257e:	f7ff f89d 	bl	80016bc <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002584:	e008      	b.n	8002598 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002586:	f7ff f899 	bl	80016bc <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e237      	b.n	8002a08 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002598:	4b53      	ldr	r3, [pc, #332]	; (80026e8 <HAL_RCC_OscConfig+0x504>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1f0      	bne.n	8002586 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0308 	and.w	r3, r3, #8
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d03c      	beq.n	800262a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	695b      	ldr	r3, [r3, #20]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d01c      	beq.n	80025f2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025b8:	4b4b      	ldr	r3, [pc, #300]	; (80026e8 <HAL_RCC_OscConfig+0x504>)
 80025ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025be:	4a4a      	ldr	r2, [pc, #296]	; (80026e8 <HAL_RCC_OscConfig+0x504>)
 80025c0:	f043 0301 	orr.w	r3, r3, #1
 80025c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c8:	f7ff f878 	bl	80016bc <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025d0:	f7ff f874 	bl	80016bc <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e212      	b.n	8002a08 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025e2:	4b41      	ldr	r3, [pc, #260]	; (80026e8 <HAL_RCC_OscConfig+0x504>)
 80025e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0ef      	beq.n	80025d0 <HAL_RCC_OscConfig+0x3ec>
 80025f0:	e01b      	b.n	800262a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025f2:	4b3d      	ldr	r3, [pc, #244]	; (80026e8 <HAL_RCC_OscConfig+0x504>)
 80025f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025f8:	4a3b      	ldr	r2, [pc, #236]	; (80026e8 <HAL_RCC_OscConfig+0x504>)
 80025fa:	f023 0301 	bic.w	r3, r3, #1
 80025fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002602:	f7ff f85b 	bl	80016bc <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002608:	e008      	b.n	800261c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800260a:	f7ff f857 	bl	80016bc <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e1f5      	b.n	8002a08 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800261c:	4b32      	ldr	r3, [pc, #200]	; (80026e8 <HAL_RCC_OscConfig+0x504>)
 800261e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1ef      	bne.n	800260a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0304 	and.w	r3, r3, #4
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 80a6 	beq.w	8002784 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002638:	2300      	movs	r3, #0
 800263a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800263c:	4b2a      	ldr	r3, [pc, #168]	; (80026e8 <HAL_RCC_OscConfig+0x504>)
 800263e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d10d      	bne.n	8002664 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002648:	4b27      	ldr	r3, [pc, #156]	; (80026e8 <HAL_RCC_OscConfig+0x504>)
 800264a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264c:	4a26      	ldr	r2, [pc, #152]	; (80026e8 <HAL_RCC_OscConfig+0x504>)
 800264e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002652:	6593      	str	r3, [r2, #88]	; 0x58
 8002654:	4b24      	ldr	r3, [pc, #144]	; (80026e8 <HAL_RCC_OscConfig+0x504>)
 8002656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265c:	60bb      	str	r3, [r7, #8]
 800265e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002660:	2301      	movs	r3, #1
 8002662:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002664:	4b21      	ldr	r3, [pc, #132]	; (80026ec <HAL_RCC_OscConfig+0x508>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266c:	2b00      	cmp	r3, #0
 800266e:	d118      	bne.n	80026a2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002670:	4b1e      	ldr	r3, [pc, #120]	; (80026ec <HAL_RCC_OscConfig+0x508>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a1d      	ldr	r2, [pc, #116]	; (80026ec <HAL_RCC_OscConfig+0x508>)
 8002676:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800267a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800267c:	f7ff f81e 	bl	80016bc <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002684:	f7ff f81a 	bl	80016bc <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e1b8      	b.n	8002a08 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002696:	4b15      	ldr	r3, [pc, #84]	; (80026ec <HAL_RCC_OscConfig+0x508>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0f0      	beq.n	8002684 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d108      	bne.n	80026bc <HAL_RCC_OscConfig+0x4d8>
 80026aa:	4b0f      	ldr	r3, [pc, #60]	; (80026e8 <HAL_RCC_OscConfig+0x504>)
 80026ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b0:	4a0d      	ldr	r2, [pc, #52]	; (80026e8 <HAL_RCC_OscConfig+0x504>)
 80026b2:	f043 0301 	orr.w	r3, r3, #1
 80026b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026ba:	e029      	b.n	8002710 <HAL_RCC_OscConfig+0x52c>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	2b05      	cmp	r3, #5
 80026c2:	d115      	bne.n	80026f0 <HAL_RCC_OscConfig+0x50c>
 80026c4:	4b08      	ldr	r3, [pc, #32]	; (80026e8 <HAL_RCC_OscConfig+0x504>)
 80026c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ca:	4a07      	ldr	r2, [pc, #28]	; (80026e8 <HAL_RCC_OscConfig+0x504>)
 80026cc:	f043 0304 	orr.w	r3, r3, #4
 80026d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026d4:	4b04      	ldr	r3, [pc, #16]	; (80026e8 <HAL_RCC_OscConfig+0x504>)
 80026d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026da:	4a03      	ldr	r2, [pc, #12]	; (80026e8 <HAL_RCC_OscConfig+0x504>)
 80026dc:	f043 0301 	orr.w	r3, r3, #1
 80026e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026e4:	e014      	b.n	8002710 <HAL_RCC_OscConfig+0x52c>
 80026e6:	bf00      	nop
 80026e8:	40021000 	.word	0x40021000
 80026ec:	40007000 	.word	0x40007000
 80026f0:	4b9d      	ldr	r3, [pc, #628]	; (8002968 <HAL_RCC_OscConfig+0x784>)
 80026f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f6:	4a9c      	ldr	r2, [pc, #624]	; (8002968 <HAL_RCC_OscConfig+0x784>)
 80026f8:	f023 0301 	bic.w	r3, r3, #1
 80026fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002700:	4b99      	ldr	r3, [pc, #612]	; (8002968 <HAL_RCC_OscConfig+0x784>)
 8002702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002706:	4a98      	ldr	r2, [pc, #608]	; (8002968 <HAL_RCC_OscConfig+0x784>)
 8002708:	f023 0304 	bic.w	r3, r3, #4
 800270c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d016      	beq.n	8002746 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002718:	f7fe ffd0 	bl	80016bc <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800271e:	e00a      	b.n	8002736 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002720:	f7fe ffcc 	bl	80016bc <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	f241 3288 	movw	r2, #5000	; 0x1388
 800272e:	4293      	cmp	r3, r2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e168      	b.n	8002a08 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002736:	4b8c      	ldr	r3, [pc, #560]	; (8002968 <HAL_RCC_OscConfig+0x784>)
 8002738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d0ed      	beq.n	8002720 <HAL_RCC_OscConfig+0x53c>
 8002744:	e015      	b.n	8002772 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002746:	f7fe ffb9 	bl	80016bc <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800274c:	e00a      	b.n	8002764 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800274e:	f7fe ffb5 	bl	80016bc <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	f241 3288 	movw	r2, #5000	; 0x1388
 800275c:	4293      	cmp	r3, r2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e151      	b.n	8002a08 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002764:	4b80      	ldr	r3, [pc, #512]	; (8002968 <HAL_RCC_OscConfig+0x784>)
 8002766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1ed      	bne.n	800274e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002772:	7ffb      	ldrb	r3, [r7, #31]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d105      	bne.n	8002784 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002778:	4b7b      	ldr	r3, [pc, #492]	; (8002968 <HAL_RCC_OscConfig+0x784>)
 800277a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800277c:	4a7a      	ldr	r2, [pc, #488]	; (8002968 <HAL_RCC_OscConfig+0x784>)
 800277e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002782:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0320 	and.w	r3, r3, #32
 800278c:	2b00      	cmp	r3, #0
 800278e:	d03c      	beq.n	800280a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002794:	2b00      	cmp	r3, #0
 8002796:	d01c      	beq.n	80027d2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002798:	4b73      	ldr	r3, [pc, #460]	; (8002968 <HAL_RCC_OscConfig+0x784>)
 800279a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800279e:	4a72      	ldr	r2, [pc, #456]	; (8002968 <HAL_RCC_OscConfig+0x784>)
 80027a0:	f043 0301 	orr.w	r3, r3, #1
 80027a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a8:	f7fe ff88 	bl	80016bc <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027b0:	f7fe ff84 	bl	80016bc <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e122      	b.n	8002a08 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027c2:	4b69      	ldr	r3, [pc, #420]	; (8002968 <HAL_RCC_OscConfig+0x784>)
 80027c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0ef      	beq.n	80027b0 <HAL_RCC_OscConfig+0x5cc>
 80027d0:	e01b      	b.n	800280a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027d2:	4b65      	ldr	r3, [pc, #404]	; (8002968 <HAL_RCC_OscConfig+0x784>)
 80027d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027d8:	4a63      	ldr	r2, [pc, #396]	; (8002968 <HAL_RCC_OscConfig+0x784>)
 80027da:	f023 0301 	bic.w	r3, r3, #1
 80027de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e2:	f7fe ff6b 	bl	80016bc <HAL_GetTick>
 80027e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027e8:	e008      	b.n	80027fc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027ea:	f7fe ff67 	bl	80016bc <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e105      	b.n	8002a08 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027fc:	4b5a      	ldr	r3, [pc, #360]	; (8002968 <HAL_RCC_OscConfig+0x784>)
 80027fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1ef      	bne.n	80027ea <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280e:	2b00      	cmp	r3, #0
 8002810:	f000 80f9 	beq.w	8002a06 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002818:	2b02      	cmp	r3, #2
 800281a:	f040 80cf 	bne.w	80029bc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800281e:	4b52      	ldr	r3, [pc, #328]	; (8002968 <HAL_RCC_OscConfig+0x784>)
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	f003 0203 	and.w	r2, r3, #3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282e:	429a      	cmp	r2, r3
 8002830:	d12c      	bne.n	800288c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283c:	3b01      	subs	r3, #1
 800283e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002840:	429a      	cmp	r2, r3
 8002842:	d123      	bne.n	800288c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800284e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002850:	429a      	cmp	r2, r3
 8002852:	d11b      	bne.n	800288c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800285e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002860:	429a      	cmp	r2, r3
 8002862:	d113      	bne.n	800288c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800286e:	085b      	lsrs	r3, r3, #1
 8002870:	3b01      	subs	r3, #1
 8002872:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002874:	429a      	cmp	r2, r3
 8002876:	d109      	bne.n	800288c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	085b      	lsrs	r3, r3, #1
 8002884:	3b01      	subs	r3, #1
 8002886:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002888:	429a      	cmp	r2, r3
 800288a:	d071      	beq.n	8002970 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	2b0c      	cmp	r3, #12
 8002890:	d068      	beq.n	8002964 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002892:	4b35      	ldr	r3, [pc, #212]	; (8002968 <HAL_RCC_OscConfig+0x784>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d105      	bne.n	80028aa <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800289e:	4b32      	ldr	r3, [pc, #200]	; (8002968 <HAL_RCC_OscConfig+0x784>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e0ac      	b.n	8002a08 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80028ae:	4b2e      	ldr	r3, [pc, #184]	; (8002968 <HAL_RCC_OscConfig+0x784>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a2d      	ldr	r2, [pc, #180]	; (8002968 <HAL_RCC_OscConfig+0x784>)
 80028b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028b8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028ba:	f7fe feff 	bl	80016bc <HAL_GetTick>
 80028be:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028c0:	e008      	b.n	80028d4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c2:	f7fe fefb 	bl	80016bc <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e099      	b.n	8002a08 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028d4:	4b24      	ldr	r3, [pc, #144]	; (8002968 <HAL_RCC_OscConfig+0x784>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d1f0      	bne.n	80028c2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028e0:	4b21      	ldr	r3, [pc, #132]	; (8002968 <HAL_RCC_OscConfig+0x784>)
 80028e2:	68da      	ldr	r2, [r3, #12]
 80028e4:	4b21      	ldr	r3, [pc, #132]	; (800296c <HAL_RCC_OscConfig+0x788>)
 80028e6:	4013      	ands	r3, r2
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80028f0:	3a01      	subs	r2, #1
 80028f2:	0112      	lsls	r2, r2, #4
 80028f4:	4311      	orrs	r1, r2
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028fa:	0212      	lsls	r2, r2, #8
 80028fc:	4311      	orrs	r1, r2
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002902:	0852      	lsrs	r2, r2, #1
 8002904:	3a01      	subs	r2, #1
 8002906:	0552      	lsls	r2, r2, #21
 8002908:	4311      	orrs	r1, r2
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800290e:	0852      	lsrs	r2, r2, #1
 8002910:	3a01      	subs	r2, #1
 8002912:	0652      	lsls	r2, r2, #25
 8002914:	4311      	orrs	r1, r2
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800291a:	06d2      	lsls	r2, r2, #27
 800291c:	430a      	orrs	r2, r1
 800291e:	4912      	ldr	r1, [pc, #72]	; (8002968 <HAL_RCC_OscConfig+0x784>)
 8002920:	4313      	orrs	r3, r2
 8002922:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002924:	4b10      	ldr	r3, [pc, #64]	; (8002968 <HAL_RCC_OscConfig+0x784>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a0f      	ldr	r2, [pc, #60]	; (8002968 <HAL_RCC_OscConfig+0x784>)
 800292a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800292e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002930:	4b0d      	ldr	r3, [pc, #52]	; (8002968 <HAL_RCC_OscConfig+0x784>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	4a0c      	ldr	r2, [pc, #48]	; (8002968 <HAL_RCC_OscConfig+0x784>)
 8002936:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800293a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800293c:	f7fe febe 	bl	80016bc <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002944:	f7fe feba 	bl	80016bc <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e058      	b.n	8002a08 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002956:	4b04      	ldr	r3, [pc, #16]	; (8002968 <HAL_RCC_OscConfig+0x784>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d0f0      	beq.n	8002944 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002962:	e050      	b.n	8002a06 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e04f      	b.n	8002a08 <HAL_RCC_OscConfig+0x824>
 8002968:	40021000 	.word	0x40021000
 800296c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002970:	4b27      	ldr	r3, [pc, #156]	; (8002a10 <HAL_RCC_OscConfig+0x82c>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d144      	bne.n	8002a06 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800297c:	4b24      	ldr	r3, [pc, #144]	; (8002a10 <HAL_RCC_OscConfig+0x82c>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a23      	ldr	r2, [pc, #140]	; (8002a10 <HAL_RCC_OscConfig+0x82c>)
 8002982:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002986:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002988:	4b21      	ldr	r3, [pc, #132]	; (8002a10 <HAL_RCC_OscConfig+0x82c>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	4a20      	ldr	r2, [pc, #128]	; (8002a10 <HAL_RCC_OscConfig+0x82c>)
 800298e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002992:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002994:	f7fe fe92 	bl	80016bc <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800299c:	f7fe fe8e 	bl	80016bc <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e02c      	b.n	8002a08 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029ae:	4b18      	ldr	r3, [pc, #96]	; (8002a10 <HAL_RCC_OscConfig+0x82c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d0f0      	beq.n	800299c <HAL_RCC_OscConfig+0x7b8>
 80029ba:	e024      	b.n	8002a06 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	2b0c      	cmp	r3, #12
 80029c0:	d01f      	beq.n	8002a02 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029c2:	4b13      	ldr	r3, [pc, #76]	; (8002a10 <HAL_RCC_OscConfig+0x82c>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a12      	ldr	r2, [pc, #72]	; (8002a10 <HAL_RCC_OscConfig+0x82c>)
 80029c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ce:	f7fe fe75 	bl	80016bc <HAL_GetTick>
 80029d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029d4:	e008      	b.n	80029e8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029d6:	f7fe fe71 	bl	80016bc <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e00f      	b.n	8002a08 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029e8:	4b09      	ldr	r3, [pc, #36]	; (8002a10 <HAL_RCC_OscConfig+0x82c>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1f0      	bne.n	80029d6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80029f4:	4b06      	ldr	r3, [pc, #24]	; (8002a10 <HAL_RCC_OscConfig+0x82c>)
 80029f6:	68da      	ldr	r2, [r3, #12]
 80029f8:	4905      	ldr	r1, [pc, #20]	; (8002a10 <HAL_RCC_OscConfig+0x82c>)
 80029fa:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <HAL_RCC_OscConfig+0x830>)
 80029fc:	4013      	ands	r3, r2
 80029fe:	60cb      	str	r3, [r1, #12]
 8002a00:	e001      	b.n	8002a06 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e000      	b.n	8002a08 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3720      	adds	r7, #32
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	40021000 	.word	0x40021000
 8002a14:	feeefffc 	.word	0xfeeefffc

08002a18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002a22:	2300      	movs	r3, #0
 8002a24:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d101      	bne.n	8002a30 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e11d      	b.n	8002c6c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a30:	4b90      	ldr	r3, [pc, #576]	; (8002c74 <HAL_RCC_ClockConfig+0x25c>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 030f 	and.w	r3, r3, #15
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d910      	bls.n	8002a60 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a3e:	4b8d      	ldr	r3, [pc, #564]	; (8002c74 <HAL_RCC_ClockConfig+0x25c>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f023 020f 	bic.w	r2, r3, #15
 8002a46:	498b      	ldr	r1, [pc, #556]	; (8002c74 <HAL_RCC_ClockConfig+0x25c>)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a4e:	4b89      	ldr	r3, [pc, #548]	; (8002c74 <HAL_RCC_ClockConfig+0x25c>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d001      	beq.n	8002a60 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e105      	b.n	8002c6c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d010      	beq.n	8002a8e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	4b81      	ldr	r3, [pc, #516]	; (8002c78 <HAL_RCC_ClockConfig+0x260>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d908      	bls.n	8002a8e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a7c:	4b7e      	ldr	r3, [pc, #504]	; (8002c78 <HAL_RCC_ClockConfig+0x260>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	497b      	ldr	r1, [pc, #492]	; (8002c78 <HAL_RCC_ClockConfig+0x260>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d079      	beq.n	8002b8e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2b03      	cmp	r3, #3
 8002aa0:	d11e      	bne.n	8002ae0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aa2:	4b75      	ldr	r3, [pc, #468]	; (8002c78 <HAL_RCC_ClockConfig+0x260>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e0dc      	b.n	8002c6c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002ab2:	f000 fa07 	bl	8002ec4 <RCC_GetSysClockFreqFromPLLSource>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	4a70      	ldr	r2, [pc, #448]	; (8002c7c <HAL_RCC_ClockConfig+0x264>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d946      	bls.n	8002b4c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002abe:	4b6e      	ldr	r3, [pc, #440]	; (8002c78 <HAL_RCC_ClockConfig+0x260>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d140      	bne.n	8002b4c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002aca:	4b6b      	ldr	r3, [pc, #428]	; (8002c78 <HAL_RCC_ClockConfig+0x260>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ad2:	4a69      	ldr	r2, [pc, #420]	; (8002c78 <HAL_RCC_ClockConfig+0x260>)
 8002ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ad8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002ada:	2380      	movs	r3, #128	; 0x80
 8002adc:	617b      	str	r3, [r7, #20]
 8002ade:	e035      	b.n	8002b4c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d107      	bne.n	8002af8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ae8:	4b63      	ldr	r3, [pc, #396]	; (8002c78 <HAL_RCC_ClockConfig+0x260>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d115      	bne.n	8002b20 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e0b9      	b.n	8002c6c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d107      	bne.n	8002b10 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b00:	4b5d      	ldr	r3, [pc, #372]	; (8002c78 <HAL_RCC_ClockConfig+0x260>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d109      	bne.n	8002b20 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e0ad      	b.n	8002c6c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b10:	4b59      	ldr	r3, [pc, #356]	; (8002c78 <HAL_RCC_ClockConfig+0x260>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d101      	bne.n	8002b20 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e0a5      	b.n	8002c6c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002b20:	f000 f8b4 	bl	8002c8c <HAL_RCC_GetSysClockFreq>
 8002b24:	4603      	mov	r3, r0
 8002b26:	4a55      	ldr	r2, [pc, #340]	; (8002c7c <HAL_RCC_ClockConfig+0x264>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d90f      	bls.n	8002b4c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002b2c:	4b52      	ldr	r3, [pc, #328]	; (8002c78 <HAL_RCC_ClockConfig+0x260>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d109      	bne.n	8002b4c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b38:	4b4f      	ldr	r3, [pc, #316]	; (8002c78 <HAL_RCC_ClockConfig+0x260>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b40:	4a4d      	ldr	r2, [pc, #308]	; (8002c78 <HAL_RCC_ClockConfig+0x260>)
 8002b42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b46:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002b48:	2380      	movs	r3, #128	; 0x80
 8002b4a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b4c:	4b4a      	ldr	r3, [pc, #296]	; (8002c78 <HAL_RCC_ClockConfig+0x260>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f023 0203 	bic.w	r2, r3, #3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	4947      	ldr	r1, [pc, #284]	; (8002c78 <HAL_RCC_ClockConfig+0x260>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b5e:	f7fe fdad 	bl	80016bc <HAL_GetTick>
 8002b62:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b64:	e00a      	b.n	8002b7c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b66:	f7fe fda9 	bl	80016bc <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e077      	b.n	8002c6c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b7c:	4b3e      	ldr	r3, [pc, #248]	; (8002c78 <HAL_RCC_ClockConfig+0x260>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f003 020c 	and.w	r2, r3, #12
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d1eb      	bne.n	8002b66 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	2b80      	cmp	r3, #128	; 0x80
 8002b92:	d105      	bne.n	8002ba0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002b94:	4b38      	ldr	r3, [pc, #224]	; (8002c78 <HAL_RCC_ClockConfig+0x260>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	4a37      	ldr	r2, [pc, #220]	; (8002c78 <HAL_RCC_ClockConfig+0x260>)
 8002b9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b9e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d010      	beq.n	8002bce <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689a      	ldr	r2, [r3, #8]
 8002bb0:	4b31      	ldr	r3, [pc, #196]	; (8002c78 <HAL_RCC_ClockConfig+0x260>)
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d208      	bcs.n	8002bce <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bbc:	4b2e      	ldr	r3, [pc, #184]	; (8002c78 <HAL_RCC_ClockConfig+0x260>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	492b      	ldr	r1, [pc, #172]	; (8002c78 <HAL_RCC_ClockConfig+0x260>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bce:	4b29      	ldr	r3, [pc, #164]	; (8002c74 <HAL_RCC_ClockConfig+0x25c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 030f 	and.w	r3, r3, #15
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d210      	bcs.n	8002bfe <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bdc:	4b25      	ldr	r3, [pc, #148]	; (8002c74 <HAL_RCC_ClockConfig+0x25c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f023 020f 	bic.w	r2, r3, #15
 8002be4:	4923      	ldr	r1, [pc, #140]	; (8002c74 <HAL_RCC_ClockConfig+0x25c>)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bec:	4b21      	ldr	r3, [pc, #132]	; (8002c74 <HAL_RCC_ClockConfig+0x25c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 030f 	and.w	r3, r3, #15
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d001      	beq.n	8002bfe <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e036      	b.n	8002c6c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0304 	and.w	r3, r3, #4
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d008      	beq.n	8002c1c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c0a:	4b1b      	ldr	r3, [pc, #108]	; (8002c78 <HAL_RCC_ClockConfig+0x260>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	4918      	ldr	r1, [pc, #96]	; (8002c78 <HAL_RCC_ClockConfig+0x260>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0308 	and.w	r3, r3, #8
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d009      	beq.n	8002c3c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c28:	4b13      	ldr	r3, [pc, #76]	; (8002c78 <HAL_RCC_ClockConfig+0x260>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	4910      	ldr	r1, [pc, #64]	; (8002c78 <HAL_RCC_ClockConfig+0x260>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c3c:	f000 f826 	bl	8002c8c <HAL_RCC_GetSysClockFreq>
 8002c40:	4602      	mov	r2, r0
 8002c42:	4b0d      	ldr	r3, [pc, #52]	; (8002c78 <HAL_RCC_ClockConfig+0x260>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	091b      	lsrs	r3, r3, #4
 8002c48:	f003 030f 	and.w	r3, r3, #15
 8002c4c:	490c      	ldr	r1, [pc, #48]	; (8002c80 <HAL_RCC_ClockConfig+0x268>)
 8002c4e:	5ccb      	ldrb	r3, [r1, r3]
 8002c50:	f003 031f 	and.w	r3, r3, #31
 8002c54:	fa22 f303 	lsr.w	r3, r2, r3
 8002c58:	4a0a      	ldr	r2, [pc, #40]	; (8002c84 <HAL_RCC_ClockConfig+0x26c>)
 8002c5a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c5c:	4b0a      	ldr	r3, [pc, #40]	; (8002c88 <HAL_RCC_ClockConfig+0x270>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7fe fcdb 	bl	800161c <HAL_InitTick>
 8002c66:	4603      	mov	r3, r0
 8002c68:	73fb      	strb	r3, [r7, #15]

  return status;
 8002c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3718      	adds	r7, #24
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	40022000 	.word	0x40022000
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	04c4b400 	.word	0x04c4b400
 8002c80:	0800a0dc 	.word	0x0800a0dc
 8002c84:	20000000 	.word	0x20000000
 8002c88:	20000004 	.word	0x20000004

08002c8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b089      	sub	sp, #36	; 0x24
 8002c90:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c92:	2300      	movs	r3, #0
 8002c94:	61fb      	str	r3, [r7, #28]
 8002c96:	2300      	movs	r3, #0
 8002c98:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c9a:	4b3e      	ldr	r3, [pc, #248]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f003 030c 	and.w	r3, r3, #12
 8002ca2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ca4:	4b3b      	ldr	r3, [pc, #236]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	f003 0303 	and.w	r3, r3, #3
 8002cac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d005      	beq.n	8002cc0 <HAL_RCC_GetSysClockFreq+0x34>
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	2b0c      	cmp	r3, #12
 8002cb8:	d121      	bne.n	8002cfe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d11e      	bne.n	8002cfe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002cc0:	4b34      	ldr	r3, [pc, #208]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0308 	and.w	r3, r3, #8
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d107      	bne.n	8002cdc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ccc:	4b31      	ldr	r3, [pc, #196]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cd2:	0a1b      	lsrs	r3, r3, #8
 8002cd4:	f003 030f 	and.w	r3, r3, #15
 8002cd8:	61fb      	str	r3, [r7, #28]
 8002cda:	e005      	b.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002cdc:	4b2d      	ldr	r3, [pc, #180]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	091b      	lsrs	r3, r3, #4
 8002ce2:	f003 030f 	and.w	r3, r3, #15
 8002ce6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ce8:	4a2b      	ldr	r2, [pc, #172]	; (8002d98 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cf0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10d      	bne.n	8002d14 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cfc:	e00a      	b.n	8002d14 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	2b04      	cmp	r3, #4
 8002d02:	d102      	bne.n	8002d0a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d04:	4b25      	ldr	r3, [pc, #148]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x110>)
 8002d06:	61bb      	str	r3, [r7, #24]
 8002d08:	e004      	b.n	8002d14 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	d101      	bne.n	8002d14 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d10:	4b22      	ldr	r3, [pc, #136]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x110>)
 8002d12:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	2b0c      	cmp	r3, #12
 8002d18:	d134      	bne.n	8002d84 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d1a:	4b1e      	ldr	r3, [pc, #120]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	f003 0303 	and.w	r3, r3, #3
 8002d22:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d003      	beq.n	8002d32 <HAL_RCC_GetSysClockFreq+0xa6>
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	2b03      	cmp	r3, #3
 8002d2e:	d003      	beq.n	8002d38 <HAL_RCC_GetSysClockFreq+0xac>
 8002d30:	e005      	b.n	8002d3e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d32:	4b1a      	ldr	r3, [pc, #104]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x110>)
 8002d34:	617b      	str	r3, [r7, #20]
      break;
 8002d36:	e005      	b.n	8002d44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d38:	4b18      	ldr	r3, [pc, #96]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x110>)
 8002d3a:	617b      	str	r3, [r7, #20]
      break;
 8002d3c:	e002      	b.n	8002d44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	617b      	str	r3, [r7, #20]
      break;
 8002d42:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d44:	4b13      	ldr	r3, [pc, #76]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	091b      	lsrs	r3, r3, #4
 8002d4a:	f003 030f 	and.w	r3, r3, #15
 8002d4e:	3301      	adds	r3, #1
 8002d50:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d52:	4b10      	ldr	r3, [pc, #64]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	0a1b      	lsrs	r3, r3, #8
 8002d58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d5c:	697a      	ldr	r2, [r7, #20]
 8002d5e:	fb03 f202 	mul.w	r2, r3, r2
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d68:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d6a:	4b0a      	ldr	r3, [pc, #40]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	0e5b      	lsrs	r3, r3, #25
 8002d70:	f003 0303 	and.w	r3, r3, #3
 8002d74:	3301      	adds	r3, #1
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d82:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d84:	69bb      	ldr	r3, [r7, #24]
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3724      	adds	r7, #36	; 0x24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	40021000 	.word	0x40021000
 8002d98:	0800a0f4 	.word	0x0800a0f4
 8002d9c:	00f42400 	.word	0x00f42400

08002da0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002da4:	4b03      	ldr	r3, [pc, #12]	; (8002db4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002da6:	681b      	ldr	r3, [r3, #0]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	20000000 	.word	0x20000000

08002db8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002dbc:	f7ff fff0 	bl	8002da0 <HAL_RCC_GetHCLKFreq>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	4b06      	ldr	r3, [pc, #24]	; (8002ddc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	0a1b      	lsrs	r3, r3, #8
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	4904      	ldr	r1, [pc, #16]	; (8002de0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002dce:	5ccb      	ldrb	r3, [r1, r3]
 8002dd0:	f003 031f 	and.w	r3, r3, #31
 8002dd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	40021000 	.word	0x40021000
 8002de0:	0800a0ec 	.word	0x0800a0ec

08002de4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002de8:	f7ff ffda 	bl	8002da0 <HAL_RCC_GetHCLKFreq>
 8002dec:	4602      	mov	r2, r0
 8002dee:	4b06      	ldr	r3, [pc, #24]	; (8002e08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	0adb      	lsrs	r3, r3, #11
 8002df4:	f003 0307 	and.w	r3, r3, #7
 8002df8:	4904      	ldr	r1, [pc, #16]	; (8002e0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002dfa:	5ccb      	ldrb	r3, [r1, r3]
 8002dfc:	f003 031f 	and.w	r3, r3, #31
 8002e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	0800a0ec 	.word	0x0800a0ec

08002e10 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e18:	2300      	movs	r3, #0
 8002e1a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e1c:	4b27      	ldr	r3, [pc, #156]	; (8002ebc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d003      	beq.n	8002e30 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002e28:	f7ff f908 	bl	800203c <HAL_PWREx_GetVoltageRange>
 8002e2c:	6178      	str	r0, [r7, #20]
 8002e2e:	e014      	b.n	8002e5a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e30:	4b22      	ldr	r3, [pc, #136]	; (8002ebc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e34:	4a21      	ldr	r2, [pc, #132]	; (8002ebc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002e36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e3a:	6593      	str	r3, [r2, #88]	; 0x58
 8002e3c:	4b1f      	ldr	r3, [pc, #124]	; (8002ebc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e44:	60fb      	str	r3, [r7, #12]
 8002e46:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e48:	f7ff f8f8 	bl	800203c <HAL_PWREx_GetVoltageRange>
 8002e4c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e4e:	4b1b      	ldr	r3, [pc, #108]	; (8002ebc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e52:	4a1a      	ldr	r2, [pc, #104]	; (8002ebc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002e54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e58:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e60:	d10b      	bne.n	8002e7a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2b80      	cmp	r3, #128	; 0x80
 8002e66:	d913      	bls.n	8002e90 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2ba0      	cmp	r3, #160	; 0xa0
 8002e6c:	d902      	bls.n	8002e74 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e6e:	2302      	movs	r3, #2
 8002e70:	613b      	str	r3, [r7, #16]
 8002e72:	e00d      	b.n	8002e90 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e74:	2301      	movs	r3, #1
 8002e76:	613b      	str	r3, [r7, #16]
 8002e78:	e00a      	b.n	8002e90 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2b7f      	cmp	r3, #127	; 0x7f
 8002e7e:	d902      	bls.n	8002e86 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002e80:	2302      	movs	r3, #2
 8002e82:	613b      	str	r3, [r7, #16]
 8002e84:	e004      	b.n	8002e90 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2b70      	cmp	r3, #112	; 0x70
 8002e8a:	d101      	bne.n	8002e90 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e90:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f023 020f 	bic.w	r2, r3, #15
 8002e98:	4909      	ldr	r1, [pc, #36]	; (8002ec0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ea0:	4b07      	ldr	r3, [pc, #28]	; (8002ec0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 030f 	and.w	r3, r3, #15
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d001      	beq.n	8002eb2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e000      	b.n	8002eb4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3718      	adds	r7, #24
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	40022000 	.word	0x40022000

08002ec4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b087      	sub	sp, #28
 8002ec8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002eca:	4b2d      	ldr	r3, [pc, #180]	; (8002f80 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	f003 0303 	and.w	r3, r3, #3
 8002ed2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2b03      	cmp	r3, #3
 8002ed8:	d00b      	beq.n	8002ef2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2b03      	cmp	r3, #3
 8002ede:	d825      	bhi.n	8002f2c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d008      	beq.n	8002ef8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d11f      	bne.n	8002f2c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002eec:	4b25      	ldr	r3, [pc, #148]	; (8002f84 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002eee:	613b      	str	r3, [r7, #16]
    break;
 8002ef0:	e01f      	b.n	8002f32 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002ef2:	4b24      	ldr	r3, [pc, #144]	; (8002f84 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002ef4:	613b      	str	r3, [r7, #16]
    break;
 8002ef6:	e01c      	b.n	8002f32 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ef8:	4b21      	ldr	r3, [pc, #132]	; (8002f80 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0308 	and.w	r3, r3, #8
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d107      	bne.n	8002f14 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f04:	4b1e      	ldr	r3, [pc, #120]	; (8002f80 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f0a:	0a1b      	lsrs	r3, r3, #8
 8002f0c:	f003 030f 	and.w	r3, r3, #15
 8002f10:	617b      	str	r3, [r7, #20]
 8002f12:	e005      	b.n	8002f20 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f14:	4b1a      	ldr	r3, [pc, #104]	; (8002f80 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	091b      	lsrs	r3, r3, #4
 8002f1a:	f003 030f 	and.w	r3, r3, #15
 8002f1e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002f20:	4a19      	ldr	r2, [pc, #100]	; (8002f88 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f28:	613b      	str	r3, [r7, #16]
    break;
 8002f2a:	e002      	b.n	8002f32 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	613b      	str	r3, [r7, #16]
    break;
 8002f30:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f32:	4b13      	ldr	r3, [pc, #76]	; (8002f80 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	091b      	lsrs	r3, r3, #4
 8002f38:	f003 030f 	and.w	r3, r3, #15
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f40:	4b0f      	ldr	r3, [pc, #60]	; (8002f80 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	0a1b      	lsrs	r3, r3, #8
 8002f46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	fb03 f202 	mul.w	r2, r3, r2
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f56:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f58:	4b09      	ldr	r3, [pc, #36]	; (8002f80 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	0e5b      	lsrs	r3, r3, #25
 8002f5e:	f003 0303 	and.w	r3, r3, #3
 8002f62:	3301      	adds	r3, #1
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f70:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002f72:	683b      	ldr	r3, [r7, #0]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	371c      	adds	r7, #28
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr
 8002f80:	40021000 	.word	0x40021000
 8002f84:	00f42400 	.word	0x00f42400
 8002f88:	0800a0f4 	.word	0x0800a0f4

08002f8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f94:	2300      	movs	r3, #0
 8002f96:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f98:	2300      	movs	r3, #0
 8002f9a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d040      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fac:	2b80      	cmp	r3, #128	; 0x80
 8002fae:	d02a      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002fb0:	2b80      	cmp	r3, #128	; 0x80
 8002fb2:	d825      	bhi.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002fb4:	2b60      	cmp	r3, #96	; 0x60
 8002fb6:	d026      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002fb8:	2b60      	cmp	r3, #96	; 0x60
 8002fba:	d821      	bhi.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002fbc:	2b40      	cmp	r3, #64	; 0x40
 8002fbe:	d006      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002fc0:	2b40      	cmp	r3, #64	; 0x40
 8002fc2:	d81d      	bhi.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d009      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002fc8:	2b20      	cmp	r3, #32
 8002fca:	d010      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002fcc:	e018      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002fce:	4b89      	ldr	r3, [pc, #548]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	4a88      	ldr	r2, [pc, #544]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fd8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fda:	e015      	b.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	3304      	adds	r3, #4
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f001 fa82 	bl	80044ec <RCCEx_PLLSAI1_Config>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fec:	e00c      	b.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	3320      	adds	r3, #32
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f001 fb6d 	bl	80046d4 <RCCEx_PLLSAI2_Config>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ffe:	e003      	b.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	74fb      	strb	r3, [r7, #19]
      break;
 8003004:	e000      	b.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003006:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003008:	7cfb      	ldrb	r3, [r7, #19]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10b      	bne.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800300e:	4b79      	ldr	r3, [pc, #484]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003010:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003014:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800301c:	4975      	ldr	r1, [pc, #468]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800301e:	4313      	orrs	r3, r2
 8003020:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003024:	e001      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003026:	7cfb      	ldrb	r3, [r7, #19]
 8003028:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d047      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800303e:	d030      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003040:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003044:	d82a      	bhi.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003046:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800304a:	d02a      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800304c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003050:	d824      	bhi.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003052:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003056:	d008      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800305c:	d81e      	bhi.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x110>
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00a      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003066:	d010      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003068:	e018      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800306a:	4b62      	ldr	r3, [pc, #392]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	4a61      	ldr	r2, [pc, #388]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003074:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003076:	e015      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	3304      	adds	r3, #4
 800307c:	2100      	movs	r1, #0
 800307e:	4618      	mov	r0, r3
 8003080:	f001 fa34 	bl	80044ec <RCCEx_PLLSAI1_Config>
 8003084:	4603      	mov	r3, r0
 8003086:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003088:	e00c      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	3320      	adds	r3, #32
 800308e:	2100      	movs	r1, #0
 8003090:	4618      	mov	r0, r3
 8003092:	f001 fb1f 	bl	80046d4 <RCCEx_PLLSAI2_Config>
 8003096:	4603      	mov	r3, r0
 8003098:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800309a:	e003      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	74fb      	strb	r3, [r7, #19]
      break;
 80030a0:	e000      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80030a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030a4:	7cfb      	ldrb	r3, [r7, #19]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10b      	bne.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80030aa:	4b52      	ldr	r3, [pc, #328]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b8:	494e      	ldr	r1, [pc, #312]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80030c0:	e001      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030c2:	7cfb      	ldrb	r3, [r7, #19]
 80030c4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 809f 	beq.w	8003212 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030d4:	2300      	movs	r3, #0
 80030d6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80030d8:	4b46      	ldr	r3, [pc, #280]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80030e4:	2301      	movs	r3, #1
 80030e6:	e000      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80030e8:	2300      	movs	r3, #0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00d      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ee:	4b41      	ldr	r3, [pc, #260]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f2:	4a40      	ldr	r2, [pc, #256]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030f8:	6593      	str	r3, [r2, #88]	; 0x58
 80030fa:	4b3e      	ldr	r3, [pc, #248]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003102:	60bb      	str	r3, [r7, #8]
 8003104:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003106:	2301      	movs	r3, #1
 8003108:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800310a:	4b3b      	ldr	r3, [pc, #236]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a3a      	ldr	r2, [pc, #232]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003114:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003116:	f7fe fad1 	bl	80016bc <HAL_GetTick>
 800311a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800311c:	e009      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800311e:	f7fe facd 	bl	80016bc <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d902      	bls.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	74fb      	strb	r3, [r7, #19]
        break;
 8003130:	e005      	b.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003132:	4b31      	ldr	r3, [pc, #196]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313a:	2b00      	cmp	r3, #0
 800313c:	d0ef      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800313e:	7cfb      	ldrb	r3, [r7, #19]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d15b      	bne.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003144:	4b2b      	ldr	r3, [pc, #172]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800314a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800314e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d01f      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	429a      	cmp	r2, r3
 8003160:	d019      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003162:	4b24      	ldr	r3, [pc, #144]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003168:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800316c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800316e:	4b21      	ldr	r3, [pc, #132]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003174:	4a1f      	ldr	r2, [pc, #124]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003176:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800317a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800317e:	4b1d      	ldr	r3, [pc, #116]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003184:	4a1b      	ldr	r2, [pc, #108]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003186:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800318a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800318e:	4a19      	ldr	r2, [pc, #100]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	2b00      	cmp	r3, #0
 800319e:	d016      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a0:	f7fe fa8c 	bl	80016bc <HAL_GetTick>
 80031a4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031a6:	e00b      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031a8:	f7fe fa88 	bl	80016bc <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d902      	bls.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	74fb      	strb	r3, [r7, #19]
            break;
 80031be:	e006      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031c0:	4b0c      	ldr	r3, [pc, #48]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d0ec      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80031ce:	7cfb      	ldrb	r3, [r7, #19]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d10c      	bne.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031d4:	4b07      	ldr	r3, [pc, #28]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031e4:	4903      	ldr	r1, [pc, #12]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80031ec:	e008      	b.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031ee:	7cfb      	ldrb	r3, [r7, #19]
 80031f0:	74bb      	strb	r3, [r7, #18]
 80031f2:	e005      	b.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80031f4:	40021000 	.word	0x40021000
 80031f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031fc:	7cfb      	ldrb	r3, [r7, #19]
 80031fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003200:	7c7b      	ldrb	r3, [r7, #17]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d105      	bne.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003206:	4ba0      	ldr	r3, [pc, #640]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800320a:	4a9f      	ldr	r2, [pc, #636]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800320c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003210:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00a      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800321e:	4b9a      	ldr	r3, [pc, #616]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003224:	f023 0203 	bic.w	r2, r3, #3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800322c:	4996      	ldr	r1, [pc, #600]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800322e:	4313      	orrs	r3, r2
 8003230:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00a      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003240:	4b91      	ldr	r3, [pc, #580]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003246:	f023 020c 	bic.w	r2, r3, #12
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	498e      	ldr	r1, [pc, #568]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003250:	4313      	orrs	r3, r2
 8003252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0304 	and.w	r3, r3, #4
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00a      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003262:	4b89      	ldr	r3, [pc, #548]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003268:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003270:	4985      	ldr	r1, [pc, #532]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003272:	4313      	orrs	r3, r2
 8003274:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0308 	and.w	r3, r3, #8
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00a      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003284:	4b80      	ldr	r3, [pc, #512]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003292:	497d      	ldr	r1, [pc, #500]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003294:	4313      	orrs	r3, r2
 8003296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0310 	and.w	r3, r3, #16
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00a      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032a6:	4b78      	ldr	r3, [pc, #480]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032b4:	4974      	ldr	r1, [pc, #464]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0320 	and.w	r3, r3, #32
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00a      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032c8:	4b6f      	ldr	r3, [pc, #444]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032d6:	496c      	ldr	r1, [pc, #432]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00a      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032ea:	4b67      	ldr	r3, [pc, #412]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032f8:	4963      	ldr	r1, [pc, #396]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00a      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800330c:	4b5e      	ldr	r3, [pc, #376]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800330e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003312:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800331a:	495b      	ldr	r1, [pc, #364]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800331c:	4313      	orrs	r3, r2
 800331e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00a      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800332e:	4b56      	ldr	r3, [pc, #344]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003334:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800333c:	4952      	ldr	r1, [pc, #328]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800333e:	4313      	orrs	r3, r2
 8003340:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00a      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003350:	4b4d      	ldr	r3, [pc, #308]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003356:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335e:	494a      	ldr	r1, [pc, #296]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003360:	4313      	orrs	r3, r2
 8003362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00a      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003372:	4b45      	ldr	r3, [pc, #276]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003378:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003380:	4941      	ldr	r1, [pc, #260]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003382:	4313      	orrs	r3, r2
 8003384:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d00a      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003394:	4b3c      	ldr	r3, [pc, #240]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003396:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800339a:	f023 0203 	bic.w	r2, r3, #3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033a2:	4939      	ldr	r1, [pc, #228]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d028      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033b6:	4b34      	ldr	r3, [pc, #208]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033bc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033c4:	4930      	ldr	r1, [pc, #192]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033d4:	d106      	bne.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033d6:	4b2c      	ldr	r3, [pc, #176]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	4a2b      	ldr	r2, [pc, #172]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033e0:	60d3      	str	r3, [r2, #12]
 80033e2:	e011      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033ec:	d10c      	bne.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	3304      	adds	r3, #4
 80033f2:	2101      	movs	r1, #1
 80033f4:	4618      	mov	r0, r3
 80033f6:	f001 f879 	bl	80044ec <RCCEx_PLLSAI1_Config>
 80033fa:	4603      	mov	r3, r0
 80033fc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80033fe:	7cfb      	ldrb	r3, [r7, #19]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003404:	7cfb      	ldrb	r3, [r7, #19]
 8003406:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d04d      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003418:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800341c:	d108      	bne.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800341e:	4b1a      	ldr	r3, [pc, #104]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003420:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003424:	4a18      	ldr	r2, [pc, #96]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003426:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800342a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800342e:	e012      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003430:	4b15      	ldr	r3, [pc, #84]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003432:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003436:	4a14      	ldr	r2, [pc, #80]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003438:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800343c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003440:	4b11      	ldr	r3, [pc, #68]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003446:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800344e:	490e      	ldr	r1, [pc, #56]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003450:	4313      	orrs	r3, r2
 8003452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800345a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800345e:	d106      	bne.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003460:	4b09      	ldr	r3, [pc, #36]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	4a08      	ldr	r2, [pc, #32]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003466:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800346a:	60d3      	str	r3, [r2, #12]
 800346c:	e020      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003472:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003476:	d109      	bne.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003478:	4b03      	ldr	r3, [pc, #12]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	4a02      	ldr	r2, [pc, #8]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800347e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003482:	60d3      	str	r3, [r2, #12]
 8003484:	e014      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003486:	bf00      	nop
 8003488:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003490:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003494:	d10c      	bne.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	3304      	adds	r3, #4
 800349a:	2101      	movs	r1, #1
 800349c:	4618      	mov	r0, r3
 800349e:	f001 f825 	bl	80044ec <RCCEx_PLLSAI1_Config>
 80034a2:	4603      	mov	r3, r0
 80034a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034a6:	7cfb      	ldrb	r3, [r7, #19]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80034ac:	7cfb      	ldrb	r3, [r7, #19]
 80034ae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d028      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034bc:	4b7a      	ldr	r3, [pc, #488]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80034be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034ca:	4977      	ldr	r1, [pc, #476]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034da:	d106      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034dc:	4b72      	ldr	r3, [pc, #456]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	4a71      	ldr	r2, [pc, #452]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80034e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034e6:	60d3      	str	r3, [r2, #12]
 80034e8:	e011      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034f2:	d10c      	bne.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	3304      	adds	r3, #4
 80034f8:	2101      	movs	r1, #1
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 fff6 	bl	80044ec <RCCEx_PLLSAI1_Config>
 8003500:	4603      	mov	r3, r0
 8003502:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003504:	7cfb      	ldrb	r3, [r7, #19]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800350a:	7cfb      	ldrb	r3, [r7, #19]
 800350c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d01e      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800351a:	4b63      	ldr	r3, [pc, #396]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800351c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003520:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800352a:	495f      	ldr	r1, [pc, #380]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800352c:	4313      	orrs	r3, r2
 800352e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003538:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800353c:	d10c      	bne.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	3304      	adds	r3, #4
 8003542:	2102      	movs	r1, #2
 8003544:	4618      	mov	r0, r3
 8003546:	f000 ffd1 	bl	80044ec <RCCEx_PLLSAI1_Config>
 800354a:	4603      	mov	r3, r0
 800354c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800354e:	7cfb      	ldrb	r3, [r7, #19]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003554:	7cfb      	ldrb	r3, [r7, #19]
 8003556:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00b      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003564:	4b50      	ldr	r3, [pc, #320]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003566:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800356a:	f023 0204 	bic.w	r2, r3, #4
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003574:	494c      	ldr	r1, [pc, #304]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003576:	4313      	orrs	r3, r2
 8003578:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00b      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003588:	4b47      	ldr	r3, [pc, #284]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800358a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800358e:	f023 0218 	bic.w	r2, r3, #24
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003598:	4943      	ldr	r1, [pc, #268]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800359a:	4313      	orrs	r3, r2
 800359c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d035      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80035ac:	4b3e      	ldr	r3, [pc, #248]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a3d      	ldr	r2, [pc, #244]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80035b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035b8:	f7fe f880 	bl	80016bc <HAL_GetTick>
 80035bc:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80035be:	e009      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80035c0:	f7fe f87c 	bl	80016bc <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d902      	bls.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	74fb      	strb	r3, [r7, #19]
        break;
 80035d2:	e005      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80035d4:	4b34      	ldr	r3, [pc, #208]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1ef      	bne.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 80035e0:	7cfb      	ldrb	r3, [r7, #19]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d113      	bne.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 80035e6:	4b30      	ldr	r3, [pc, #192]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80035e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035f6:	492c      	ldr	r1, [pc, #176]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	3320      	adds	r3, #32
 8003602:	2102      	movs	r1, #2
 8003604:	4618      	mov	r0, r3
 8003606:	f001 f865 	bl	80046d4 <RCCEx_PLLSAI2_Config>
 800360a:	4603      	mov	r3, r0
 800360c:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800360e:	7cfb      	ldrb	r3, [r7, #19]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d001      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8003614:	7cfb      	ldrb	r3, [r7, #19]
 8003616:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d01e      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8003624:	4b20      	ldr	r3, [pc, #128]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003626:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800362a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003634:	491c      	ldr	r1, [pc, #112]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003636:	4313      	orrs	r3, r2
 8003638:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003646:	d10c      	bne.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	3320      	adds	r3, #32
 800364c:	2101      	movs	r1, #1
 800364e:	4618      	mov	r0, r3
 8003650:	f001 f840 	bl	80046d4 <RCCEx_PLLSAI2_Config>
 8003654:	4603      	mov	r3, r0
 8003656:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003658:	7cfb      	ldrb	r3, [r7, #19]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 800365e:	7cfb      	ldrb	r3, [r7, #19]
 8003660:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d017      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800366e:	4b0e      	ldr	r3, [pc, #56]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003670:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003674:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800367e:	490a      	ldr	r1, [pc, #40]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003680:	4313      	orrs	r3, r2
 8003682:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800368c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003690:	d105      	bne.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003692:	4b05      	ldr	r3, [pc, #20]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	4a04      	ldr	r2, [pc, #16]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003698:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800369c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800369e:	7cbb      	ldrb	r3, [r7, #18]
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3718      	adds	r7, #24
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	40021000 	.word	0x40021000

080036ac <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b088      	sub	sp, #32
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80036b4:	2300      	movs	r3, #0
 80036b6:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036be:	d13e      	bne.n	800373e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80036c0:	4bb6      	ldr	r3, [pc, #728]	; (800399c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80036c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ca:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036d2:	d028      	beq.n	8003726 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036da:	f200 86f2 	bhi.w	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036e4:	d005      	beq.n	80036f2 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036ec:	d00e      	beq.n	800370c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80036ee:	f000 bee8 	b.w	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80036f2:	4baa      	ldr	r3, [pc, #680]	; (800399c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80036f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	f040 86e2 	bne.w	80044c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
        frequency = LSE_VALUE;
 8003702:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003706:	61fb      	str	r3, [r7, #28]
      break;
 8003708:	f000 bedd 	b.w	80044c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800370c:	4ba3      	ldr	r3, [pc, #652]	; (800399c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800370e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b02      	cmp	r3, #2
 8003718:	f040 86d7 	bne.w	80044ca <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = LSI_VALUE;
 800371c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8003720:	61fb      	str	r3, [r7, #28]
      break;
 8003722:	f000 bed2 	b.w	80044ca <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003726:	4b9d      	ldr	r3, [pc, #628]	; (800399c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003732:	f040 86cc 	bne.w	80044ce <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
        frequency = HSE_VALUE / 32U;
 8003736:	4b9a      	ldr	r3, [pc, #616]	; (80039a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003738:	61fb      	str	r3, [r7, #28]
      break;
 800373a:	f000 bec8 	b.w	80044ce <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800373e:	4b97      	ldr	r3, [pc, #604]	; (800399c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	f003 0303 	and.w	r3, r3, #3
 8003746:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	2b03      	cmp	r3, #3
 800374c:	d036      	beq.n	80037bc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	2b03      	cmp	r3, #3
 8003752:	d840      	bhi.n	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d003      	beq.n	8003762 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	2b02      	cmp	r3, #2
 800375e:	d020      	beq.n	80037a2 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8003760:	e039      	b.n	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003762:	4b8e      	ldr	r3, [pc, #568]	; (800399c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b02      	cmp	r3, #2
 800376c:	d116      	bne.n	800379c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800376e:	4b8b      	ldr	r3, [pc, #556]	; (800399c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0308 	and.w	r3, r3, #8
 8003776:	2b00      	cmp	r3, #0
 8003778:	d005      	beq.n	8003786 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800377a:	4b88      	ldr	r3, [pc, #544]	; (800399c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	091b      	lsrs	r3, r3, #4
 8003780:	f003 030f 	and.w	r3, r3, #15
 8003784:	e005      	b.n	8003792 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8003786:	4b85      	ldr	r3, [pc, #532]	; (800399c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003788:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800378c:	0a1b      	lsrs	r3, r3, #8
 800378e:	f003 030f 	and.w	r3, r3, #15
 8003792:	4a84      	ldr	r2, [pc, #528]	; (80039a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003798:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800379a:	e01f      	b.n	80037dc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800379c:	2300      	movs	r3, #0
 800379e:	61bb      	str	r3, [r7, #24]
      break;
 80037a0:	e01c      	b.n	80037dc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80037a2:	4b7e      	ldr	r3, [pc, #504]	; (800399c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037ae:	d102      	bne.n	80037b6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80037b0:	4b7d      	ldr	r3, [pc, #500]	; (80039a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80037b2:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80037b4:	e012      	b.n	80037dc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80037b6:	2300      	movs	r3, #0
 80037b8:	61bb      	str	r3, [r7, #24]
      break;
 80037ba:	e00f      	b.n	80037dc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80037bc:	4b77      	ldr	r3, [pc, #476]	; (800399c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037c8:	d102      	bne.n	80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80037ca:	4b77      	ldr	r3, [pc, #476]	; (80039a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80037cc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80037ce:	e005      	b.n	80037dc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80037d0:	2300      	movs	r3, #0
 80037d2:	61bb      	str	r3, [r7, #24]
      break;
 80037d4:	e002      	b.n	80037dc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80037d6:	2300      	movs	r3, #0
 80037d8:	61bb      	str	r3, [r7, #24]
      break;
 80037da:	bf00      	nop
    }

    switch(PeriphClk)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037e2:	f000 8604 	beq.w	80043ee <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037ec:	f200 8671 	bhi.w	80044d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037f6:	f000 8467 	beq.w	80040c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003800:	f200 8667 	bhi.w	80044d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800380a:	f000 852f 	beq.w	800426c <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003814:	f200 865d 	bhi.w	80044d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800381e:	f000 8185 	beq.w	8003b2c <HAL_RCCEx_GetPeriphCLKFreq+0x480>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003828:	f200 8653 	bhi.w	80044d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003832:	f000 80cb 	beq.w	80039cc <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800383c:	f200 8649 	bhi.w	80044d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003846:	f000 842e 	beq.w	80040a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003850:	f200 863f 	bhi.w	80044d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800385a:	f000 83e2 	beq.w	8004022 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003864:	f200 8635 	bhi.w	80044d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800386e:	f000 80ad 	beq.w	80039cc <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003878:	f200 862b 	bhi.w	80044d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003882:	f000 809b 	beq.w	80039bc <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800388c:	f200 8621 	bhi.w	80044d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003896:	f000 8089 	beq.w	80039ac <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038a0:	f200 8617 	bhi.w	80044d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038aa:	f000 8552 	beq.w	8004352 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038b4:	f200 860d 	bhi.w	80044d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038be:	f000 84fe 	beq.w	80042be <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038c8:	f200 8603 	bhi.w	80044d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038d2:	f000 849f 	beq.w	8004214 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038dc:	f200 85f9 	bhi.w	80044d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b80      	cmp	r3, #128	; 0x80
 80038e4:	f000 846a 	beq.w	80041bc <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2b80      	cmp	r3, #128	; 0x80
 80038ec:	f200 85f1 	bhi.w	80044d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b20      	cmp	r3, #32
 80038f4:	d84c      	bhi.n	8003990 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f000 85ea 	beq.w	80044d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	3b01      	subs	r3, #1
 8003902:	2b1f      	cmp	r3, #31
 8003904:	f200 85e5 	bhi.w	80044d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003908:	a201      	add	r2, pc, #4	; (adr r2, 8003910 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800390a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800390e:	bf00      	nop
 8003910:	08003d21 	.word	0x08003d21
 8003914:	08003d8f 	.word	0x08003d8f
 8003918:	080044d3 	.word	0x080044d3
 800391c:	08003e23 	.word	0x08003e23
 8003920:	080044d3 	.word	0x080044d3
 8003924:	080044d3 	.word	0x080044d3
 8003928:	080044d3 	.word	0x080044d3
 800392c:	08003e9b 	.word	0x08003e9b
 8003930:	080044d3 	.word	0x080044d3
 8003934:	080044d3 	.word	0x080044d3
 8003938:	080044d3 	.word	0x080044d3
 800393c:	080044d3 	.word	0x080044d3
 8003940:	080044d3 	.word	0x080044d3
 8003944:	080044d3 	.word	0x080044d3
 8003948:	080044d3 	.word	0x080044d3
 800394c:	08003f1f 	.word	0x08003f1f
 8003950:	080044d3 	.word	0x080044d3
 8003954:	080044d3 	.word	0x080044d3
 8003958:	080044d3 	.word	0x080044d3
 800395c:	080044d3 	.word	0x080044d3
 8003960:	080044d3 	.word	0x080044d3
 8003964:	080044d3 	.word	0x080044d3
 8003968:	080044d3 	.word	0x080044d3
 800396c:	080044d3 	.word	0x080044d3
 8003970:	080044d3 	.word	0x080044d3
 8003974:	080044d3 	.word	0x080044d3
 8003978:	080044d3 	.word	0x080044d3
 800397c:	080044d3 	.word	0x080044d3
 8003980:	080044d3 	.word	0x080044d3
 8003984:	080044d3 	.word	0x080044d3
 8003988:	080044d3 	.word	0x080044d3
 800398c:	08003fa1 	.word	0x08003fa1
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b40      	cmp	r3, #64	; 0x40
 8003994:	f000 83e6 	beq.w	8004164 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8003998:	f000 bd9b 	b.w	80044d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800399c:	40021000 	.word	0x40021000
 80039a0:	0007a120 	.word	0x0007a120
 80039a4:	0800a0f4 	.word	0x0800a0f4
 80039a8:	00f42400 	.word	0x00f42400
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80039ac:	69b9      	ldr	r1, [r7, #24]
 80039ae:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80039b2:	f000 ff83 	bl	80048bc <RCCEx_GetSAIxPeriphCLKFreq>
 80039b6:	61f8      	str	r0, [r7, #28]
      break;
 80039b8:	f000 bd8e 	b.w	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80039bc:	69b9      	ldr	r1, [r7, #24]
 80039be:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80039c2:	f000 ff7b 	bl	80048bc <RCCEx_GetSAIxPeriphCLKFreq>
 80039c6:	61f8      	str	r0, [r7, #28]
      break;
 80039c8:	f000 bd86 	b.w	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80039cc:	4b9a      	ldr	r3, [pc, #616]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80039ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d2:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80039d6:	60fb      	str	r3, [r7, #12]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80039de:	d015      	beq.n	8003a0c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80039e6:	f200 8092 	bhi.w	8003b0e <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039f0:	d029      	beq.n	8003a46 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039f8:	f200 8089 	bhi.w	8003b0e <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d07b      	beq.n	8003afa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a08:	d04a      	beq.n	8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
          break;
 8003a0a:	e080      	b.n	8003b0e <HAL_RCCEx_GetPeriphCLKFreq+0x462>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003a0c:	4b8a      	ldr	r3, [pc, #552]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d17d      	bne.n	8003b14 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003a18:	4b87      	ldr	r3, [pc, #540]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0308 	and.w	r3, r3, #8
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d005      	beq.n	8003a30 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
 8003a24:	4b84      	ldr	r3, [pc, #528]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	091b      	lsrs	r3, r3, #4
 8003a2a:	f003 030f 	and.w	r3, r3, #15
 8003a2e:	e005      	b.n	8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 8003a30:	4b81      	ldr	r3, [pc, #516]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a36:	0a1b      	lsrs	r3, r3, #8
 8003a38:	f003 030f 	and.w	r3, r3, #15
 8003a3c:	4a7f      	ldr	r2, [pc, #508]	; (8003c3c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8003a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a42:	61fb      	str	r3, [r7, #28]
          break;
 8003a44:	e066      	b.n	8003b14 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003a46:	4b7c      	ldr	r3, [pc, #496]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a52:	d162      	bne.n	8003b1a <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8003a54:	4b78      	ldr	r3, [pc, #480]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a60:	d15b      	bne.n	8003b1a <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003a62:	4b75      	ldr	r3, [pc, #468]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	0a1b      	lsrs	r3, r3, #8
 8003a68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a6c:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	68ba      	ldr	r2, [r7, #8]
 8003a72:	fb03 f202 	mul.w	r2, r3, r2
 8003a76:	4b70      	ldr	r3, [pc, #448]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	091b      	lsrs	r3, r3, #4
 8003a7c:	f003 030f 	and.w	r3, r3, #15
 8003a80:	3301      	adds	r3, #1
 8003a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a86:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8003a88:	4b6b      	ldr	r3, [pc, #428]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	0d5b      	lsrs	r3, r3, #21
 8003a8e:	f003 0303 	and.w	r3, r3, #3
 8003a92:	3301      	adds	r3, #1
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a9c:	61fb      	str	r3, [r7, #28]
          break;
 8003a9e:	e03c      	b.n	8003b1a <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8003aa0:	4b65      	ldr	r3, [pc, #404]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003aa8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003aac:	d138      	bne.n	8003b20 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8003aae:	4b62      	ldr	r3, [pc, #392]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ab6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003aba:	d131      	bne.n	8003b20 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003abc:	4b5e      	ldr	r3, [pc, #376]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	0a1b      	lsrs	r3, r3, #8
 8003ac2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ac6:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	68ba      	ldr	r2, [r7, #8]
 8003acc:	fb03 f202 	mul.w	r2, r3, r2
 8003ad0:	4b59      	ldr	r3, [pc, #356]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	091b      	lsrs	r3, r3, #4
 8003ad6:	f003 030f 	and.w	r3, r3, #15
 8003ada:	3301      	adds	r3, #1
 8003adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae0:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8003ae2:	4b55      	ldr	r3, [pc, #340]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	0d5b      	lsrs	r3, r3, #21
 8003ae8:	f003 0303 	and.w	r3, r3, #3
 8003aec:	3301      	adds	r3, #1
 8003aee:	005b      	lsls	r3, r3, #1
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af6:	61fb      	str	r3, [r7, #28]
          break;
 8003af8:	e012      	b.n	8003b20 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8003afa:	4b4f      	ldr	r3, [pc, #316]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003afc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d10e      	bne.n	8003b26 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI48_VALUE;
 8003b08:	4b4d      	ldr	r3, [pc, #308]	; (8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8003b0a:	61fb      	str	r3, [r7, #28]
          break;
 8003b0c:	e00b      	b.n	8003b26 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          break;
 8003b0e:	bf00      	nop
 8003b10:	f000 bce2 	b.w	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003b14:	bf00      	nop
 8003b16:	f000 bcdf 	b.w	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003b1a:	bf00      	nop
 8003b1c:	f000 bcdc 	b.w	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003b20:	bf00      	nop
 8003b22:	f000 bcd9 	b.w	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003b26:	bf00      	nop
        break;
 8003b28:	f000 bcd6 	b.w	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8003b2c:	4b42      	ldr	r3, [pc, #264]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003b2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b3a:	d13d      	bne.n	8003bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003b3c:	4b3e      	ldr	r3, [pc, #248]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b48:	f040 84c5 	bne.w	80044d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8003b4c:	4b3a      	ldr	r3, [pc, #232]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b58:	f040 84bd 	bne.w	80044d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003b5c:	4b36      	ldr	r3, [pc, #216]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	0a1b      	lsrs	r3, r3, #8
 8003b62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b66:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	68ba      	ldr	r2, [r7, #8]
 8003b6c:	fb03 f202 	mul.w	r2, r3, r2
 8003b70:	4b31      	ldr	r3, [pc, #196]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	091b      	lsrs	r3, r3, #4
 8003b76:	f003 030f 	and.w	r3, r3, #15
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b80:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8003b82:	4b2d      	ldr	r3, [pc, #180]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	0edb      	lsrs	r3, r3, #27
 8003b88:	f003 031f 	and.w	r3, r3, #31
 8003b8c:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10a      	bne.n	8003baa <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8003b94:	4b28      	ldr	r3, [pc, #160]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d002      	beq.n	8003ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
                pllp = 17U;
 8003ba0:	2311      	movs	r3, #17
 8003ba2:	617b      	str	r3, [r7, #20]
 8003ba4:	e001      	b.n	8003baa <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 7U;
 8003ba6:	2307      	movs	r3, #7
 8003ba8:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8003baa:	69ba      	ldr	r2, [r7, #24]
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb2:	61fb      	str	r3, [r7, #28]
      break;
 8003bb4:	f000 bc8f 	b.w	80044d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8003bb8:	4b1f      	ldr	r3, [pc, #124]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bbe:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8003bc2:	60fb      	str	r3, [r7, #12]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003bca:	d016      	beq.n	8003bfa <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003bd2:	f200 809b 	bhi.w	8003d0c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bdc:	d032      	beq.n	8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003be4:	f200 8092 	bhi.w	8003d0c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f000 8084 	beq.w	8003cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bf6:	d052      	beq.n	8003c9e <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
          break;
 8003bf8:	e088      	b.n	8003d0c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003bfa:	4b0f      	ldr	r3, [pc, #60]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	f040 8084 	bne.w	8003d10 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003c08:	4b0b      	ldr	r3, [pc, #44]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0308 	and.w	r3, r3, #8
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d005      	beq.n	8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 8003c14:	4b08      	ldr	r3, [pc, #32]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	091b      	lsrs	r3, r3, #4
 8003c1a:	f003 030f 	and.w	r3, r3, #15
 8003c1e:	e005      	b.n	8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8003c20:	4b05      	ldr	r3, [pc, #20]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c26:	0a1b      	lsrs	r3, r3, #8
 8003c28:	f003 030f 	and.w	r3, r3, #15
 8003c2c:	4a03      	ldr	r2, [pc, #12]	; (8003c3c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8003c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c32:	61fb      	str	r3, [r7, #28]
          break;
 8003c34:	e06c      	b.n	8003d10 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8003c36:	bf00      	nop
 8003c38:	40021000 	.word	0x40021000
 8003c3c:	0800a0f4 	.word	0x0800a0f4
 8003c40:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003c44:	4ba5      	ldr	r3, [pc, #660]	; (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c50:	d160      	bne.n	8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8003c52:	4ba2      	ldr	r3, [pc, #648]	; (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c5e:	d159      	bne.n	8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003c60:	4b9e      	ldr	r3, [pc, #632]	; (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	0a1b      	lsrs	r3, r3, #8
 8003c66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c6a:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	68ba      	ldr	r2, [r7, #8]
 8003c70:	fb03 f202 	mul.w	r2, r3, r2
 8003c74:	4b99      	ldr	r3, [pc, #612]	; (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	091b      	lsrs	r3, r3, #4
 8003c7a:	f003 030f 	and.w	r3, r3, #15
 8003c7e:	3301      	adds	r3, #1
 8003c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c84:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8003c86:	4b95      	ldr	r3, [pc, #596]	; (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	0d5b      	lsrs	r3, r3, #21
 8003c8c:	f003 0303 	and.w	r3, r3, #3
 8003c90:	3301      	adds	r3, #1
 8003c92:	005b      	lsls	r3, r3, #1
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c9a:	61fb      	str	r3, [r7, #28]
          break;
 8003c9c:	e03a      	b.n	8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8003c9e:	4b8f      	ldr	r3, [pc, #572]	; (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ca6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003caa:	d135      	bne.n	8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8003cac:	4b8b      	ldr	r3, [pc, #556]	; (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cb8:	d12e      	bne.n	8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003cba:	4b88      	ldr	r3, [pc, #544]	; (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	0a1b      	lsrs	r3, r3, #8
 8003cc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cc4:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	fb03 f202 	mul.w	r2, r3, r2
 8003cce:	4b83      	ldr	r3, [pc, #524]	; (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	091b      	lsrs	r3, r3, #4
 8003cd4:	f003 030f 	and.w	r3, r3, #15
 8003cd8:	3301      	adds	r3, #1
 8003cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cde:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8003ce0:	4b7e      	ldr	r3, [pc, #504]	; (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	0d5b      	lsrs	r3, r3, #21
 8003ce6:	f003 0303 	and.w	r3, r3, #3
 8003cea:	3301      	adds	r3, #1
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf4:	61fb      	str	r3, [r7, #28]
          break;
 8003cf6:	e00f      	b.n	8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8003cf8:	4b78      	ldr	r3, [pc, #480]	; (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003cfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d10a      	bne.n	8003d1c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            frequency = HSI48_VALUE;
 8003d06:	4b76      	ldr	r3, [pc, #472]	; (8003ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8003d08:	61fb      	str	r3, [r7, #28]
          break;
 8003d0a:	e007      	b.n	8003d1c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          break;
 8003d0c:	bf00      	nop
 8003d0e:	e3e2      	b.n	80044d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8003d10:	bf00      	nop
 8003d12:	e3e0      	b.n	80044d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8003d14:	bf00      	nop
 8003d16:	e3de      	b.n	80044d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8003d18:	bf00      	nop
 8003d1a:	e3dc      	b.n	80044d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8003d1c:	bf00      	nop
      break;
 8003d1e:	e3da      	b.n	80044d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003d20:	4b6e      	ldr	r3, [pc, #440]	; (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d26:	f003 0303 	and.w	r3, r3, #3
 8003d2a:	60fb      	str	r3, [r7, #12]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2b03      	cmp	r3, #3
 8003d30:	d827      	bhi.n	8003d82 <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
 8003d32:	a201      	add	r2, pc, #4	; (adr r2, 8003d38 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 8003d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d38:	08003d49 	.word	0x08003d49
 8003d3c:	08003d51 	.word	0x08003d51
 8003d40:	08003d59 	.word	0x08003d59
 8003d44:	08003d6d 	.word	0x08003d6d
          frequency = HAL_RCC_GetPCLK2Freq();
 8003d48:	f7ff f84c 	bl	8002de4 <HAL_RCC_GetPCLK2Freq>
 8003d4c:	61f8      	str	r0, [r7, #28]
          break;
 8003d4e:	e01d      	b.n	8003d8c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          frequency = HAL_RCC_GetSysClockFreq();
 8003d50:	f7fe ff9c 	bl	8002c8c <HAL_RCC_GetSysClockFreq>
 8003d54:	61f8      	str	r0, [r7, #28]
          break;
 8003d56:	e019      	b.n	8003d8c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003d58:	4b60      	ldr	r3, [pc, #384]	; (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d64:	d10f      	bne.n	8003d86 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
            frequency = HSI_VALUE;
 8003d66:	4b5f      	ldr	r3, [pc, #380]	; (8003ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8003d68:	61fb      	str	r3, [r7, #28]
          break;
 8003d6a:	e00c      	b.n	8003d86 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003d6c:	4b5b      	ldr	r3, [pc, #364]	; (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d107      	bne.n	8003d8a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = LSE_VALUE;
 8003d7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d7e:	61fb      	str	r3, [r7, #28]
          break;
 8003d80:	e003      	b.n	8003d8a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          break;
 8003d82:	bf00      	nop
 8003d84:	e3a8      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003d86:	bf00      	nop
 8003d88:	e3a6      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003d8a:	bf00      	nop
        break;
 8003d8c:	e3a4      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8003d8e:	4b53      	ldr	r3, [pc, #332]	; (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d94:	f003 030c 	and.w	r3, r3, #12
 8003d98:	60fb      	str	r3, [r7, #12]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2b0c      	cmp	r3, #12
 8003d9e:	d83a      	bhi.n	8003e16 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 8003da0:	a201      	add	r2, pc, #4	; (adr r2, 8003da8 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>)
 8003da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da6:	bf00      	nop
 8003da8:	08003ddd 	.word	0x08003ddd
 8003dac:	08003e17 	.word	0x08003e17
 8003db0:	08003e17 	.word	0x08003e17
 8003db4:	08003e17 	.word	0x08003e17
 8003db8:	08003de5 	.word	0x08003de5
 8003dbc:	08003e17 	.word	0x08003e17
 8003dc0:	08003e17 	.word	0x08003e17
 8003dc4:	08003e17 	.word	0x08003e17
 8003dc8:	08003ded 	.word	0x08003ded
 8003dcc:	08003e17 	.word	0x08003e17
 8003dd0:	08003e17 	.word	0x08003e17
 8003dd4:	08003e17 	.word	0x08003e17
 8003dd8:	08003e01 	.word	0x08003e01
          frequency = HAL_RCC_GetPCLK1Freq();
 8003ddc:	f7fe ffec 	bl	8002db8 <HAL_RCC_GetPCLK1Freq>
 8003de0:	61f8      	str	r0, [r7, #28]
          break;
 8003de2:	e01d      	b.n	8003e20 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          frequency = HAL_RCC_GetSysClockFreq();
 8003de4:	f7fe ff52 	bl	8002c8c <HAL_RCC_GetSysClockFreq>
 8003de8:	61f8      	str	r0, [r7, #28]
          break;
 8003dea:	e019      	b.n	8003e20 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003dec:	4b3b      	ldr	r3, [pc, #236]	; (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003df8:	d10f      	bne.n	8003e1a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
            frequency = HSI_VALUE;
 8003dfa:	4b3a      	ldr	r3, [pc, #232]	; (8003ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8003dfc:	61fb      	str	r3, [r7, #28]
          break;
 8003dfe:	e00c      	b.n	8003e1a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003e00:	4b36      	ldr	r3, [pc, #216]	; (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d107      	bne.n	8003e1e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = LSE_VALUE;
 8003e0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e12:	61fb      	str	r3, [r7, #28]
          break;
 8003e14:	e003      	b.n	8003e1e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          break;
 8003e16:	bf00      	nop
 8003e18:	e35e      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003e1a:	bf00      	nop
 8003e1c:	e35c      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003e1e:	bf00      	nop
        break;
 8003e20:	e35a      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8003e22:	4b2e      	ldr	r3, [pc, #184]	; (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e28:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e2c:	60fb      	str	r3, [r7, #12]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2b30      	cmp	r3, #48	; 0x30
 8003e32:	d021      	beq.n	8003e78 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2b30      	cmp	r3, #48	; 0x30
 8003e38:	d829      	bhi.n	8003e8e <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2b20      	cmp	r3, #32
 8003e3e:	d011      	beq.n	8003e64 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2b20      	cmp	r3, #32
 8003e44:	d823      	bhi.n	8003e8e <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d003      	beq.n	8003e54 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2b10      	cmp	r3, #16
 8003e50:	d004      	beq.n	8003e5c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
          break;
 8003e52:	e01c      	b.n	8003e8e <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003e54:	f7fe ffb0 	bl	8002db8 <HAL_RCC_GetPCLK1Freq>
 8003e58:	61f8      	str	r0, [r7, #28]
          break;
 8003e5a:	e01d      	b.n	8003e98 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          frequency = HAL_RCC_GetSysClockFreq();
 8003e5c:	f7fe ff16 	bl	8002c8c <HAL_RCC_GetSysClockFreq>
 8003e60:	61f8      	str	r0, [r7, #28]
          break;
 8003e62:	e019      	b.n	8003e98 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003e64:	4b1d      	ldr	r3, [pc, #116]	; (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e70:	d10f      	bne.n	8003e92 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
            frequency = HSI_VALUE;
 8003e72:	4b1c      	ldr	r3, [pc, #112]	; (8003ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8003e74:	61fb      	str	r3, [r7, #28]
          break;
 8003e76:	e00c      	b.n	8003e92 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003e78:	4b18      	ldr	r3, [pc, #96]	; (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d107      	bne.n	8003e96 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = LSE_VALUE;
 8003e86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e8a:	61fb      	str	r3, [r7, #28]
          break;
 8003e8c:	e003      	b.n	8003e96 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          break;
 8003e8e:	bf00      	nop
 8003e90:	e322      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003e92:	bf00      	nop
 8003e94:	e320      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003e96:	bf00      	nop
        break;
 8003e98:	e31e      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8003e9a:	4b10      	ldr	r3, [pc, #64]	; (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003ea4:	60fb      	str	r3, [r7, #12]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2bc0      	cmp	r3, #192	; 0xc0
 8003eaa:	d027      	beq.n	8003efc <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2bc0      	cmp	r3, #192	; 0xc0
 8003eb0:	d82f      	bhi.n	8003f12 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2b80      	cmp	r3, #128	; 0x80
 8003eb6:	d017      	beq.n	8003ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2b80      	cmp	r3, #128	; 0x80
 8003ebc:	d829      	bhi.n	8003f12 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d003      	beq.n	8003ecc <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2b40      	cmp	r3, #64	; 0x40
 8003ec8:	d004      	beq.n	8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
          break;
 8003eca:	e022      	b.n	8003f12 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003ecc:	f7fe ff74 	bl	8002db8 <HAL_RCC_GetPCLK1Freq>
 8003ed0:	61f8      	str	r0, [r7, #28]
          break;
 8003ed2:	e023      	b.n	8003f1c <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          frequency = HAL_RCC_GetSysClockFreq();
 8003ed4:	f7fe feda 	bl	8002c8c <HAL_RCC_GetSysClockFreq>
 8003ed8:	61f8      	str	r0, [r7, #28]
          break;
 8003eda:	e01f      	b.n	8003f1c <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	02dc6c00 	.word	0x02dc6c00
 8003ee4:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003ee8:	4b9b      	ldr	r3, [pc, #620]	; (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ef0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ef4:	d10f      	bne.n	8003f16 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
            frequency = HSI_VALUE;
 8003ef6:	4b99      	ldr	r3, [pc, #612]	; (800415c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8003ef8:	61fb      	str	r3, [r7, #28]
          break;
 8003efa:	e00c      	b.n	8003f16 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003efc:	4b96      	ldr	r3, [pc, #600]	; (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8003efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d107      	bne.n	8003f1a <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = LSE_VALUE;
 8003f0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f0e:	61fb      	str	r3, [r7, #28]
          break;
 8003f10:	e003      	b.n	8003f1a <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 8003f12:	bf00      	nop
 8003f14:	e2e0      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003f16:	bf00      	nop
 8003f18:	e2de      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003f1a:	bf00      	nop
        break;
 8003f1c:	e2dc      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8003f1e:	4b8e      	ldr	r3, [pc, #568]	; (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8003f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f28:	60fb      	str	r3, [r7, #12]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f30:	d025      	beq.n	8003f7e <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f38:	d82c      	bhi.n	8003f94 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f40:	d013      	beq.n	8003f6a <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f48:	d824      	bhi.n	8003f94 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d004      	beq.n	8003f5a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f56:	d004      	beq.n	8003f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
          break;
 8003f58:	e01c      	b.n	8003f94 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003f5a:	f7fe ff2d 	bl	8002db8 <HAL_RCC_GetPCLK1Freq>
 8003f5e:	61f8      	str	r0, [r7, #28]
          break;
 8003f60:	e01d      	b.n	8003f9e <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 8003f62:	f7fe fe93 	bl	8002c8c <HAL_RCC_GetSysClockFreq>
 8003f66:	61f8      	str	r0, [r7, #28]
          break;
 8003f68:	e019      	b.n	8003f9e <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003f6a:	4b7b      	ldr	r3, [pc, #492]	; (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f76:	d10f      	bne.n	8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
            frequency = HSI_VALUE;
 8003f78:	4b78      	ldr	r3, [pc, #480]	; (800415c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8003f7a:	61fb      	str	r3, [r7, #28]
          break;
 8003f7c:	e00c      	b.n	8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003f7e:	4b76      	ldr	r3, [pc, #472]	; (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8003f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f84:	f003 0302 	and.w	r3, r3, #2
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d107      	bne.n	8003f9c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = LSE_VALUE;
 8003f8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f90:	61fb      	str	r3, [r7, #28]
          break;
 8003f92:	e003      	b.n	8003f9c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 8003f94:	bf00      	nop
 8003f96:	e29f      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003f98:	bf00      	nop
 8003f9a:	e29d      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003f9c:	bf00      	nop
        break;
 8003f9e:	e29b      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8003fa0:	4b6d      	ldr	r3, [pc, #436]	; (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8003fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003faa:	60fb      	str	r3, [r7, #12]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fb2:	d025      	beq.n	8004000 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fba:	d82c      	bhi.n	8004016 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fc2:	d013      	beq.n	8003fec <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fca:	d824      	bhi.n	8004016 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d004      	beq.n	8003fdc <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fd8:	d004      	beq.n	8003fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
          break;
 8003fda:	e01c      	b.n	8004016 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003fdc:	f7fe feec 	bl	8002db8 <HAL_RCC_GetPCLK1Freq>
 8003fe0:	61f8      	str	r0, [r7, #28]
          break;
 8003fe2:	e01d      	b.n	8004020 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = HAL_RCC_GetSysClockFreq();
 8003fe4:	f7fe fe52 	bl	8002c8c <HAL_RCC_GetSysClockFreq>
 8003fe8:	61f8      	str	r0, [r7, #28]
          break;
 8003fea:	e019      	b.n	8004020 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003fec:	4b5a      	ldr	r3, [pc, #360]	; (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ff8:	d10f      	bne.n	800401a <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
            frequency = HSI_VALUE;
 8003ffa:	4b58      	ldr	r3, [pc, #352]	; (800415c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8003ffc:	61fb      	str	r3, [r7, #28]
          break;
 8003ffe:	e00c      	b.n	800401a <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004000:	4b55      	ldr	r3, [pc, #340]	; (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b02      	cmp	r3, #2
 800400c:	d107      	bne.n	800401e <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = LSE_VALUE;
 800400e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004012:	61fb      	str	r3, [r7, #28]
          break;
 8004014:	e003      	b.n	800401e <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          break;
 8004016:	bf00      	nop
 8004018:	e25e      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800401a:	bf00      	nop
 800401c:	e25c      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800401e:	bf00      	nop
        break;
 8004020:	e25a      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8004022:	4b4d      	ldr	r3, [pc, #308]	; (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004028:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800402c:	60fb      	str	r3, [r7, #12]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004034:	d007      	beq.n	8004046 <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800403c:	d12f      	bne.n	800409e <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          frequency = HAL_RCC_GetSysClockFreq();
 800403e:	f7fe fe25 	bl	8002c8c <HAL_RCC_GetSysClockFreq>
 8004042:	61f8      	str	r0, [r7, #28]
          break;
 8004044:	e02e      	b.n	80040a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8004046:	4b44      	ldr	r3, [pc, #272]	; (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800404e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004052:	d126      	bne.n	80040a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
 8004054:	4b40      	ldr	r3, [pc, #256]	; (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d020      	beq.n	80040a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004060:	4b3d      	ldr	r3, [pc, #244]	; (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	0a1b      	lsrs	r3, r3, #8
 8004066:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800406a:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	fb03 f202 	mul.w	r2, r3, r2
 8004074:	4b38      	ldr	r3, [pc, #224]	; (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	091b      	lsrs	r3, r3, #4
 800407a:	f003 030f 	and.w	r3, r3, #15
 800407e:	3301      	adds	r3, #1
 8004080:	fbb2 f3f3 	udiv	r3, r2, r3
 8004084:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8004086:	4b34      	ldr	r3, [pc, #208]	; (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	0e5b      	lsrs	r3, r3, #25
 800408c:	f003 0303 	and.w	r3, r3, #3
 8004090:	3301      	adds	r3, #1
 8004092:	005b      	lsls	r3, r3, #1
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	fbb2 f3f3 	udiv	r3, r2, r3
 800409a:	61fb      	str	r3, [r7, #28]
          break;
 800409c:	e001      	b.n	80040a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          break;
 800409e:	bf00      	nop
 80040a0:	e21a      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80040a2:	bf00      	nop
        break;
 80040a4:	e218      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80040a6:	4b2c      	ldr	r3, [pc, #176]	; (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80040a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040ac:	f003 0304 	and.w	r3, r3, #4
 80040b0:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d103      	bne.n	80040c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>
          frequency = HAL_RCC_GetPCLK2Freq();
 80040b8:	f7fe fe94 	bl	8002de4 <HAL_RCC_GetPCLK2Freq>
 80040bc:	61f8      	str	r0, [r7, #28]
        break;
 80040be:	e20b      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          frequency = HAL_RCC_GetSysClockFreq();
 80040c0:	f7fe fde4 	bl	8002c8c <HAL_RCC_GetSysClockFreq>
 80040c4:	61f8      	str	r0, [r7, #28]
        break;
 80040c6:	e207      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 80040c8:	4b23      	ldr	r3, [pc, #140]	; (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80040ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040ce:	f003 0318 	and.w	r3, r3, #24
 80040d2:	60fb      	str	r3, [r7, #12]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2b10      	cmp	r3, #16
 80040d8:	d010      	beq.n	80040fc <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2b10      	cmp	r3, #16
 80040de:	d834      	bhi.n	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d003      	beq.n	80040ee <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2b08      	cmp	r3, #8
 80040ea:	d024      	beq.n	8004136 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          break;
 80040ec:	e02d      	b.n	800414a <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80040ee:	69b9      	ldr	r1, [r7, #24]
 80040f0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80040f4:	f000 fbe2 	bl	80048bc <RCCEx_GetSAIxPeriphCLKFreq>
 80040f8:	61f8      	str	r0, [r7, #28]
          break;
 80040fa:	e02b      	b.n	8004154 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80040fc:	4b16      	ldr	r3, [pc, #88]	; (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0302 	and.w	r3, r3, #2
 8004104:	2b02      	cmp	r3, #2
 8004106:	d122      	bne.n	800414e <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004108:	4b13      	ldr	r3, [pc, #76]	; (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0308 	and.w	r3, r3, #8
 8004110:	2b00      	cmp	r3, #0
 8004112:	d005      	beq.n	8004120 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8004114:	4b10      	ldr	r3, [pc, #64]	; (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	091b      	lsrs	r3, r3, #4
 800411a:	f003 030f 	and.w	r3, r3, #15
 800411e:	e005      	b.n	800412c <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8004120:	4b0d      	ldr	r3, [pc, #52]	; (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004122:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004126:	0a1b      	lsrs	r3, r3, #8
 8004128:	f003 030f 	and.w	r3, r3, #15
 800412c:	4a0c      	ldr	r2, [pc, #48]	; (8004160 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800412e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004132:	61fb      	str	r3, [r7, #28]
          break;
 8004134:	e00b      	b.n	800414e <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004136:	4b08      	ldr	r3, [pc, #32]	; (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800413e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004142:	d106      	bne.n	8004152 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = HSI_VALUE;
 8004144:	4b05      	ldr	r3, [pc, #20]	; (800415c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004146:	61fb      	str	r3, [r7, #28]
          break;
 8004148:	e003      	b.n	8004152 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          break;
 800414a:	bf00      	nop
 800414c:	e1c4      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800414e:	bf00      	nop
 8004150:	e1c2      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004152:	bf00      	nop
        break;
 8004154:	e1c0      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 8004156:	bf00      	nop
 8004158:	40021000 	.word	0x40021000
 800415c:	00f42400 	.word	0x00f42400
 8004160:	0800a0f4 	.word	0x0800a0f4
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004164:	4b96      	ldr	r3, [pc, #600]	; (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800416a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800416e:	60fb      	str	r3, [r7, #12]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004176:	d013      	beq.n	80041a0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800417e:	d819      	bhi.n	80041b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d004      	beq.n	8004190 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800418c:	d004      	beq.n	8004198 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
          break;
 800418e:	e011      	b.n	80041b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004190:	f7fe fe12 	bl	8002db8 <HAL_RCC_GetPCLK1Freq>
 8004194:	61f8      	str	r0, [r7, #28]
          break;
 8004196:	e010      	b.n	80041ba <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8004198:	f7fe fd78 	bl	8002c8c <HAL_RCC_GetSysClockFreq>
 800419c:	61f8      	str	r0, [r7, #28]
          break;
 800419e:	e00c      	b.n	80041ba <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80041a0:	4b87      	ldr	r3, [pc, #540]	; (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ac:	d104      	bne.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = HSI_VALUE;
 80041ae:	4b85      	ldr	r3, [pc, #532]	; (80043c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80041b0:	61fb      	str	r3, [r7, #28]
          break;
 80041b2:	e001      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 80041b4:	bf00      	nop
 80041b6:	e18f      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80041b8:	bf00      	nop
        break;
 80041ba:	e18d      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80041bc:	4b80      	ldr	r3, [pc, #512]	; (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80041be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80041c6:	60fb      	str	r3, [r7, #12]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041ce:	d013      	beq.n	80041f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041d6:	d819      	bhi.n	800420c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d004      	beq.n	80041e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041e4:	d004      	beq.n	80041f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>
          break;
 80041e6:	e011      	b.n	800420c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          frequency = HAL_RCC_GetPCLK1Freq();
 80041e8:	f7fe fde6 	bl	8002db8 <HAL_RCC_GetPCLK1Freq>
 80041ec:	61f8      	str	r0, [r7, #28]
          break;
 80041ee:	e010      	b.n	8004212 <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          frequency = HAL_RCC_GetSysClockFreq();
 80041f0:	f7fe fd4c 	bl	8002c8c <HAL_RCC_GetSysClockFreq>
 80041f4:	61f8      	str	r0, [r7, #28]
          break;
 80041f6:	e00c      	b.n	8004212 <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80041f8:	4b71      	ldr	r3, [pc, #452]	; (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004200:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004204:	d104      	bne.n	8004210 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
            frequency = HSI_VALUE;
 8004206:	4b6f      	ldr	r3, [pc, #444]	; (80043c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004208:	61fb      	str	r3, [r7, #28]
          break;
 800420a:	e001      	b.n	8004210 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          break;
 800420c:	bf00      	nop
 800420e:	e163      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004210:	bf00      	nop
        break;
 8004212:	e161      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004214:	4b6a      	ldr	r3, [pc, #424]	; (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800421a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800421e:	60fb      	str	r3, [r7, #12]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004226:	d013      	beq.n	8004250 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800422e:	d819      	bhi.n	8004264 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d004      	beq.n	8004240 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800423c:	d004      	beq.n	8004248 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
          break;
 800423e:	e011      	b.n	8004264 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004240:	f7fe fdba 	bl	8002db8 <HAL_RCC_GetPCLK1Freq>
 8004244:	61f8      	str	r0, [r7, #28]
          break;
 8004246:	e010      	b.n	800426a <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          frequency = HAL_RCC_GetSysClockFreq();
 8004248:	f7fe fd20 	bl	8002c8c <HAL_RCC_GetSysClockFreq>
 800424c:	61f8      	str	r0, [r7, #28]
          break;
 800424e:	e00c      	b.n	800426a <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004250:	4b5b      	ldr	r3, [pc, #364]	; (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004258:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800425c:	d104      	bne.n	8004268 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
            frequency = HSI_VALUE;
 800425e:	4b59      	ldr	r3, [pc, #356]	; (80043c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004260:	61fb      	str	r3, [r7, #28]
          break;
 8004262:	e001      	b.n	8004268 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          break;
 8004264:	bf00      	nop
 8004266:	e137      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004268:	bf00      	nop
        break;
 800426a:	e135      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800426c:	4b54      	ldr	r3, [pc, #336]	; (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800426e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004272:	f003 0303 	and.w	r3, r3, #3
 8004276:	60fb      	str	r3, [r7, #12]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2b02      	cmp	r3, #2
 800427c:	d011      	beq.n	80042a2 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2b02      	cmp	r3, #2
 8004282:	d818      	bhi.n	80042b6 <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d003      	beq.n	8004292 <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d004      	beq.n	800429a <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
          break;
 8004290:	e011      	b.n	80042b6 <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004292:	f7fe fd91 	bl	8002db8 <HAL_RCC_GetPCLK1Freq>
 8004296:	61f8      	str	r0, [r7, #28]
          break;
 8004298:	e010      	b.n	80042bc <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          frequency = HAL_RCC_GetSysClockFreq();
 800429a:	f7fe fcf7 	bl	8002c8c <HAL_RCC_GetSysClockFreq>
 800429e:	61f8      	str	r0, [r7, #28]
          break;
 80042a0:	e00c      	b.n	80042bc <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80042a2:	4b47      	ldr	r3, [pc, #284]	; (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ae:	d104      	bne.n	80042ba <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
            frequency = HSI_VALUE;
 80042b0:	4b44      	ldr	r3, [pc, #272]	; (80043c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80042b2:	61fb      	str	r3, [r7, #28]
          break;
 80042b4:	e001      	b.n	80042ba <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          break;
 80042b6:	bf00      	nop
 80042b8:	e10e      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80042ba:	bf00      	nop
        break;
 80042bc:	e10c      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80042be:	4b40      	ldr	r3, [pc, #256]	; (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80042c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80042c8:	60fb      	str	r3, [r7, #12]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80042d0:	d02c      	beq.n	800432c <HAL_RCCEx_GetPeriphCLKFreq+0xc80>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80042d8:	d833      	bhi.n	8004342 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80042e0:	d01a      	beq.n	8004318 <HAL_RCCEx_GetPeriphCLKFreq+0xc6c>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80042e8:	d82b      	bhi.n	8004342 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d004      	beq.n	80042fa <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80042f6:	d004      	beq.n	8004302 <HAL_RCCEx_GetPeriphCLKFreq+0xc56>
          break;
 80042f8:	e023      	b.n	8004342 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
          frequency = HAL_RCC_GetPCLK1Freq();
 80042fa:	f7fe fd5d 	bl	8002db8 <HAL_RCC_GetPCLK1Freq>
 80042fe:	61f8      	str	r0, [r7, #28]
          break;
 8004300:	e026      	b.n	8004350 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004302:	4b2f      	ldr	r3, [pc, #188]	; (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004304:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004308:	f003 0302 	and.w	r3, r3, #2
 800430c:	2b02      	cmp	r3, #2
 800430e:	d11a      	bne.n	8004346 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
              frequency = LSI_VALUE;
 8004310:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004314:	61fb      	str	r3, [r7, #28]
          break;
 8004316:	e016      	b.n	8004346 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004318:	4b29      	ldr	r3, [pc, #164]	; (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004324:	d111      	bne.n	800434a <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
            frequency = HSI_VALUE;
 8004326:	4b27      	ldr	r3, [pc, #156]	; (80043c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004328:	61fb      	str	r3, [r7, #28]
          break;
 800432a:	e00e      	b.n	800434a <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800432c:	4b24      	ldr	r3, [pc, #144]	; (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800432e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b02      	cmp	r3, #2
 8004338:	d109      	bne.n	800434e <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = LSE_VALUE;
 800433a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800433e:	61fb      	str	r3, [r7, #28]
          break;
 8004340:	e005      	b.n	800434e <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          break;
 8004342:	bf00      	nop
 8004344:	e0c8      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004346:	bf00      	nop
 8004348:	e0c6      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800434a:	bf00      	nop
 800434c:	e0c4      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800434e:	bf00      	nop
        break;
 8004350:	e0c2      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004352:	4b1b      	ldr	r3, [pc, #108]	; (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004358:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800435c:	60fb      	str	r3, [r7, #12]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004364:	d030      	beq.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800436c:	d837      	bhi.n	80043de <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004374:	d01a      	beq.n	80043ac <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800437c:	d82f      	bhi.n	80043de <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d004      	beq.n	800438e <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800438a:	d004      	beq.n	8004396 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          break;
 800438c:	e027      	b.n	80043de <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = HAL_RCC_GetPCLK1Freq();
 800438e:	f7fe fd13 	bl	8002db8 <HAL_RCC_GetPCLK1Freq>
 8004392:	61f8      	str	r0, [r7, #28]
          break;
 8004394:	e02a      	b.n	80043ec <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004396:	4b0a      	ldr	r3, [pc, #40]	; (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004398:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d11e      	bne.n	80043e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
              frequency = LSI_VALUE;
 80043a4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80043a8:	61fb      	str	r3, [r7, #28]
          break;
 80043aa:	e01a      	b.n	80043e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80043ac:	4b04      	ldr	r3, [pc, #16]	; (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043b8:	d115      	bne.n	80043e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
            frequency = HSI_VALUE;
 80043ba:	4b02      	ldr	r3, [pc, #8]	; (80043c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80043bc:	61fb      	str	r3, [r7, #28]
          break;
 80043be:	e012      	b.n	80043e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 80043c0:	40021000 	.word	0x40021000
 80043c4:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80043c8:	4b46      	ldr	r3, [pc, #280]	; (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80043ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d109      	bne.n	80043ea <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = LSE_VALUE;
 80043d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043da:	61fb      	str	r3, [r7, #28]
          break;
 80043dc:	e005      	b.n	80043ea <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
          break;
 80043de:	bf00      	nop
 80043e0:	e07a      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80043e2:	bf00      	nop
 80043e4:	e078      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80043e6:	bf00      	nop
 80043e8:	e076      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80043ea:	bf00      	nop
        break;
 80043ec:	e074      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80043ee:	4b3d      	ldr	r3, [pc, #244]	; (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80043f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043f4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80043f8:	60fb      	str	r3, [r7, #12]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004400:	d02c      	beq.n	800445c <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004408:	d855      	bhi.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d004      	beq.n	800441a <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004416:	d004      	beq.n	8004422 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
          break;
 8004418:	e04d      	b.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
          frequency = HAL_RCC_GetSysClockFreq();
 800441a:	f7fe fc37 	bl	8002c8c <HAL_RCC_GetSysClockFreq>
 800441e:	61f8      	str	r0, [r7, #28]
          break;
 8004420:	e04e      	b.n	80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004422:	4b30      	ldr	r3, [pc, #192]	; (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b02      	cmp	r3, #2
 800442c:	d145      	bne.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800442e:	4b2d      	ldr	r3, [pc, #180]	; (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0308 	and.w	r3, r3, #8
 8004436:	2b00      	cmp	r3, #0
 8004438:	d005      	beq.n	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0xd9a>
 800443a:	4b2a      	ldr	r3, [pc, #168]	; (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	091b      	lsrs	r3, r3, #4
 8004440:	f003 030f 	and.w	r3, r3, #15
 8004444:	e005      	b.n	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
 8004446:	4b27      	ldr	r3, [pc, #156]	; (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004448:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800444c:	0a1b      	lsrs	r3, r3, #8
 800444e:	f003 030f 	and.w	r3, r3, #15
 8004452:	4a25      	ldr	r2, [pc, #148]	; (80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8004454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004458:	61fb      	str	r3, [r7, #28]
          break;
 800445a:	e02e      	b.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800445c:	4b21      	ldr	r3, [pc, #132]	; (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004464:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004468:	d129      	bne.n	80044be <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800446a:	4b1e      	ldr	r3, [pc, #120]	; (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004472:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004476:	d122      	bne.n	80044be <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004478:	4b1a      	ldr	r3, [pc, #104]	; (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	0a1b      	lsrs	r3, r3, #8
 800447e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004482:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	fb03 f202 	mul.w	r2, r3, r2
 800448c:	4b15      	ldr	r3, [pc, #84]	; (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	091b      	lsrs	r3, r3, #4
 8004492:	f003 030f 	and.w	r3, r3, #15
 8004496:	3301      	adds	r3, #1
 8004498:	fbb2 f3f3 	udiv	r3, r2, r3
 800449c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800449e:	4b11      	ldr	r3, [pc, #68]	; (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	0d5b      	lsrs	r3, r3, #21
 80044a4:	f003 0303 	and.w	r3, r3, #3
 80044a8:	3301      	adds	r3, #1
 80044aa:	005b      	lsls	r3, r3, #1
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b2:	61fb      	str	r3, [r7, #28]
          break;
 80044b4:	e003      	b.n	80044be <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          break;
 80044b6:	bf00      	nop
 80044b8:	e00e      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80044ba:	bf00      	nop
 80044bc:	e00c      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80044be:	bf00      	nop
        break;
 80044c0:	e00a      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 80044c2:	bf00      	nop
 80044c4:	e008      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 80044c6:	bf00      	nop
 80044c8:	e006      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 80044ca:	bf00      	nop
 80044cc:	e004      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 80044ce:	bf00      	nop
 80044d0:	e002      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 80044d2:	bf00      	nop
 80044d4:	e000      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 80044d6:	bf00      	nop
    }
  }

  return(frequency);
 80044d8:	69fb      	ldr	r3, [r7, #28]
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3720      	adds	r7, #32
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	40021000 	.word	0x40021000
 80044e8:	0800a0f4 	.word	0x0800a0f4

080044ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044f6:	2300      	movs	r3, #0
 80044f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044fa:	4b72      	ldr	r3, [pc, #456]	; (80046c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	f003 0303 	and.w	r3, r3, #3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00e      	beq.n	8004524 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004506:	4b6f      	ldr	r3, [pc, #444]	; (80046c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	f003 0203 	and.w	r2, r3, #3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	429a      	cmp	r2, r3
 8004514:	d103      	bne.n	800451e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
       ||
 800451a:	2b00      	cmp	r3, #0
 800451c:	d142      	bne.n	80045a4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	73fb      	strb	r3, [r7, #15]
 8004522:	e03f      	b.n	80045a4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2b03      	cmp	r3, #3
 800452a:	d018      	beq.n	800455e <RCCEx_PLLSAI1_Config+0x72>
 800452c:	2b03      	cmp	r3, #3
 800452e:	d825      	bhi.n	800457c <RCCEx_PLLSAI1_Config+0x90>
 8004530:	2b01      	cmp	r3, #1
 8004532:	d002      	beq.n	800453a <RCCEx_PLLSAI1_Config+0x4e>
 8004534:	2b02      	cmp	r3, #2
 8004536:	d009      	beq.n	800454c <RCCEx_PLLSAI1_Config+0x60>
 8004538:	e020      	b.n	800457c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800453a:	4b62      	ldr	r3, [pc, #392]	; (80046c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d11d      	bne.n	8004582 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800454a:	e01a      	b.n	8004582 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800454c:	4b5d      	ldr	r3, [pc, #372]	; (80046c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004554:	2b00      	cmp	r3, #0
 8004556:	d116      	bne.n	8004586 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800455c:	e013      	b.n	8004586 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800455e:	4b59      	ldr	r3, [pc, #356]	; (80046c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d10f      	bne.n	800458a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800456a:	4b56      	ldr	r3, [pc, #344]	; (80046c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d109      	bne.n	800458a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800457a:	e006      	b.n	800458a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	73fb      	strb	r3, [r7, #15]
      break;
 8004580:	e004      	b.n	800458c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004582:	bf00      	nop
 8004584:	e002      	b.n	800458c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004586:	bf00      	nop
 8004588:	e000      	b.n	800458c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800458a:	bf00      	nop
    }

    if(status == HAL_OK)
 800458c:	7bfb      	ldrb	r3, [r7, #15]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d108      	bne.n	80045a4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004592:	4b4c      	ldr	r3, [pc, #304]	; (80046c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	f023 0203 	bic.w	r2, r3, #3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4949      	ldr	r1, [pc, #292]	; (80046c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80045a4:	7bfb      	ldrb	r3, [r7, #15]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f040 8086 	bne.w	80046b8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80045ac:	4b45      	ldr	r3, [pc, #276]	; (80046c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a44      	ldr	r2, [pc, #272]	; (80046c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80045b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045b8:	f7fd f880 	bl	80016bc <HAL_GetTick>
 80045bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045be:	e009      	b.n	80045d4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045c0:	f7fd f87c 	bl	80016bc <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d902      	bls.n	80045d4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	73fb      	strb	r3, [r7, #15]
        break;
 80045d2:	e005      	b.n	80045e0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045d4:	4b3b      	ldr	r3, [pc, #236]	; (80046c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1ef      	bne.n	80045c0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80045e0:	7bfb      	ldrb	r3, [r7, #15]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d168      	bne.n	80046b8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d113      	bne.n	8004614 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045ec:	4b35      	ldr	r3, [pc, #212]	; (80046c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045ee:	691a      	ldr	r2, [r3, #16]
 80045f0:	4b35      	ldr	r3, [pc, #212]	; (80046c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80045f2:	4013      	ands	r3, r2
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	6892      	ldr	r2, [r2, #8]
 80045f8:	0211      	lsls	r1, r2, #8
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	68d2      	ldr	r2, [r2, #12]
 80045fe:	06d2      	lsls	r2, r2, #27
 8004600:	4311      	orrs	r1, r2
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	6852      	ldr	r2, [r2, #4]
 8004606:	3a01      	subs	r2, #1
 8004608:	0112      	lsls	r2, r2, #4
 800460a:	430a      	orrs	r2, r1
 800460c:	492d      	ldr	r1, [pc, #180]	; (80046c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800460e:	4313      	orrs	r3, r2
 8004610:	610b      	str	r3, [r1, #16]
 8004612:	e02d      	b.n	8004670 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d115      	bne.n	8004646 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800461a:	4b2a      	ldr	r3, [pc, #168]	; (80046c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800461c:	691a      	ldr	r2, [r3, #16]
 800461e:	4b2b      	ldr	r3, [pc, #172]	; (80046cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004620:	4013      	ands	r3, r2
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	6892      	ldr	r2, [r2, #8]
 8004626:	0211      	lsls	r1, r2, #8
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	6912      	ldr	r2, [r2, #16]
 800462c:	0852      	lsrs	r2, r2, #1
 800462e:	3a01      	subs	r2, #1
 8004630:	0552      	lsls	r2, r2, #21
 8004632:	4311      	orrs	r1, r2
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	6852      	ldr	r2, [r2, #4]
 8004638:	3a01      	subs	r2, #1
 800463a:	0112      	lsls	r2, r2, #4
 800463c:	430a      	orrs	r2, r1
 800463e:	4921      	ldr	r1, [pc, #132]	; (80046c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004640:	4313      	orrs	r3, r2
 8004642:	610b      	str	r3, [r1, #16]
 8004644:	e014      	b.n	8004670 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004646:	4b1f      	ldr	r3, [pc, #124]	; (80046c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004648:	691a      	ldr	r2, [r3, #16]
 800464a:	4b21      	ldr	r3, [pc, #132]	; (80046d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800464c:	4013      	ands	r3, r2
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	6892      	ldr	r2, [r2, #8]
 8004652:	0211      	lsls	r1, r2, #8
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	6952      	ldr	r2, [r2, #20]
 8004658:	0852      	lsrs	r2, r2, #1
 800465a:	3a01      	subs	r2, #1
 800465c:	0652      	lsls	r2, r2, #25
 800465e:	4311      	orrs	r1, r2
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	6852      	ldr	r2, [r2, #4]
 8004664:	3a01      	subs	r2, #1
 8004666:	0112      	lsls	r2, r2, #4
 8004668:	430a      	orrs	r2, r1
 800466a:	4916      	ldr	r1, [pc, #88]	; (80046c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800466c:	4313      	orrs	r3, r2
 800466e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004670:	4b14      	ldr	r3, [pc, #80]	; (80046c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a13      	ldr	r2, [pc, #76]	; (80046c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004676:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800467a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800467c:	f7fd f81e 	bl	80016bc <HAL_GetTick>
 8004680:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004682:	e009      	b.n	8004698 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004684:	f7fd f81a 	bl	80016bc <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b02      	cmp	r3, #2
 8004690:	d902      	bls.n	8004698 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	73fb      	strb	r3, [r7, #15]
          break;
 8004696:	e005      	b.n	80046a4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004698:	4b0a      	ldr	r3, [pc, #40]	; (80046c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d0ef      	beq.n	8004684 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80046a4:	7bfb      	ldrb	r3, [r7, #15]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d106      	bne.n	80046b8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80046aa:	4b06      	ldr	r3, [pc, #24]	; (80046c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046ac:	691a      	ldr	r2, [r3, #16]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	4904      	ldr	r1, [pc, #16]	; (80046c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80046b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	40021000 	.word	0x40021000
 80046c8:	07ff800f 	.word	0x07ff800f
 80046cc:	ff9f800f 	.word	0xff9f800f
 80046d0:	f9ff800f 	.word	0xf9ff800f

080046d4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046de:	2300      	movs	r3, #0
 80046e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80046e2:	4b72      	ldr	r3, [pc, #456]	; (80048ac <RCCEx_PLLSAI2_Config+0x1d8>)
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	f003 0303 	and.w	r3, r3, #3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00e      	beq.n	800470c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80046ee:	4b6f      	ldr	r3, [pc, #444]	; (80048ac <RCCEx_PLLSAI2_Config+0x1d8>)
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	f003 0203 	and.w	r2, r3, #3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d103      	bne.n	8004706 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
       ||
 8004702:	2b00      	cmp	r3, #0
 8004704:	d142      	bne.n	800478c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	73fb      	strb	r3, [r7, #15]
 800470a:	e03f      	b.n	800478c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2b03      	cmp	r3, #3
 8004712:	d018      	beq.n	8004746 <RCCEx_PLLSAI2_Config+0x72>
 8004714:	2b03      	cmp	r3, #3
 8004716:	d825      	bhi.n	8004764 <RCCEx_PLLSAI2_Config+0x90>
 8004718:	2b01      	cmp	r3, #1
 800471a:	d002      	beq.n	8004722 <RCCEx_PLLSAI2_Config+0x4e>
 800471c:	2b02      	cmp	r3, #2
 800471e:	d009      	beq.n	8004734 <RCCEx_PLLSAI2_Config+0x60>
 8004720:	e020      	b.n	8004764 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004722:	4b62      	ldr	r3, [pc, #392]	; (80048ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	2b00      	cmp	r3, #0
 800472c:	d11d      	bne.n	800476a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004732:	e01a      	b.n	800476a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004734:	4b5d      	ldr	r3, [pc, #372]	; (80048ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800473c:	2b00      	cmp	r3, #0
 800473e:	d116      	bne.n	800476e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004744:	e013      	b.n	800476e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004746:	4b59      	ldr	r3, [pc, #356]	; (80048ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10f      	bne.n	8004772 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004752:	4b56      	ldr	r3, [pc, #344]	; (80048ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d109      	bne.n	8004772 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004762:	e006      	b.n	8004772 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	73fb      	strb	r3, [r7, #15]
      break;
 8004768:	e004      	b.n	8004774 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800476a:	bf00      	nop
 800476c:	e002      	b.n	8004774 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800476e:	bf00      	nop
 8004770:	e000      	b.n	8004774 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004772:	bf00      	nop
    }

    if(status == HAL_OK)
 8004774:	7bfb      	ldrb	r3, [r7, #15]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d108      	bne.n	800478c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800477a:	4b4c      	ldr	r3, [pc, #304]	; (80048ac <RCCEx_PLLSAI2_Config+0x1d8>)
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	f023 0203 	bic.w	r2, r3, #3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4949      	ldr	r1, [pc, #292]	; (80048ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004788:	4313      	orrs	r3, r2
 800478a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800478c:	7bfb      	ldrb	r3, [r7, #15]
 800478e:	2b00      	cmp	r3, #0
 8004790:	f040 8086 	bne.w	80048a0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004794:	4b45      	ldr	r3, [pc, #276]	; (80048ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a44      	ldr	r2, [pc, #272]	; (80048ac <RCCEx_PLLSAI2_Config+0x1d8>)
 800479a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800479e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047a0:	f7fc ff8c 	bl	80016bc <HAL_GetTick>
 80047a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80047a6:	e009      	b.n	80047bc <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80047a8:	f7fc ff88 	bl	80016bc <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d902      	bls.n	80047bc <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	73fb      	strb	r3, [r7, #15]
        break;
 80047ba:	e005      	b.n	80047c8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80047bc:	4b3b      	ldr	r3, [pc, #236]	; (80048ac <RCCEx_PLLSAI2_Config+0x1d8>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d1ef      	bne.n	80047a8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80047c8:	7bfb      	ldrb	r3, [r7, #15]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d168      	bne.n	80048a0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d113      	bne.n	80047fc <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047d4:	4b35      	ldr	r3, [pc, #212]	; (80048ac <RCCEx_PLLSAI2_Config+0x1d8>)
 80047d6:	695a      	ldr	r2, [r3, #20]
 80047d8:	4b35      	ldr	r3, [pc, #212]	; (80048b0 <RCCEx_PLLSAI2_Config+0x1dc>)
 80047da:	4013      	ands	r3, r2
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	6892      	ldr	r2, [r2, #8]
 80047e0:	0211      	lsls	r1, r2, #8
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	68d2      	ldr	r2, [r2, #12]
 80047e6:	06d2      	lsls	r2, r2, #27
 80047e8:	4311      	orrs	r1, r2
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	6852      	ldr	r2, [r2, #4]
 80047ee:	3a01      	subs	r2, #1
 80047f0:	0112      	lsls	r2, r2, #4
 80047f2:	430a      	orrs	r2, r1
 80047f4:	492d      	ldr	r1, [pc, #180]	; (80048ac <RCCEx_PLLSAI2_Config+0x1d8>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	614b      	str	r3, [r1, #20]
 80047fa:	e02d      	b.n	8004858 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d115      	bne.n	800482e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004802:	4b2a      	ldr	r3, [pc, #168]	; (80048ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004804:	695a      	ldr	r2, [r3, #20]
 8004806:	4b2b      	ldr	r3, [pc, #172]	; (80048b4 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004808:	4013      	ands	r3, r2
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	6892      	ldr	r2, [r2, #8]
 800480e:	0211      	lsls	r1, r2, #8
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	6912      	ldr	r2, [r2, #16]
 8004814:	0852      	lsrs	r2, r2, #1
 8004816:	3a01      	subs	r2, #1
 8004818:	0552      	lsls	r2, r2, #21
 800481a:	4311      	orrs	r1, r2
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	6852      	ldr	r2, [r2, #4]
 8004820:	3a01      	subs	r2, #1
 8004822:	0112      	lsls	r2, r2, #4
 8004824:	430a      	orrs	r2, r1
 8004826:	4921      	ldr	r1, [pc, #132]	; (80048ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004828:	4313      	orrs	r3, r2
 800482a:	614b      	str	r3, [r1, #20]
 800482c:	e014      	b.n	8004858 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800482e:	4b1f      	ldr	r3, [pc, #124]	; (80048ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004830:	695a      	ldr	r2, [r3, #20]
 8004832:	4b21      	ldr	r3, [pc, #132]	; (80048b8 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004834:	4013      	ands	r3, r2
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	6892      	ldr	r2, [r2, #8]
 800483a:	0211      	lsls	r1, r2, #8
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	6952      	ldr	r2, [r2, #20]
 8004840:	0852      	lsrs	r2, r2, #1
 8004842:	3a01      	subs	r2, #1
 8004844:	0652      	lsls	r2, r2, #25
 8004846:	4311      	orrs	r1, r2
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	6852      	ldr	r2, [r2, #4]
 800484c:	3a01      	subs	r2, #1
 800484e:	0112      	lsls	r2, r2, #4
 8004850:	430a      	orrs	r2, r1
 8004852:	4916      	ldr	r1, [pc, #88]	; (80048ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004854:	4313      	orrs	r3, r2
 8004856:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004858:	4b14      	ldr	r3, [pc, #80]	; (80048ac <RCCEx_PLLSAI2_Config+0x1d8>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a13      	ldr	r2, [pc, #76]	; (80048ac <RCCEx_PLLSAI2_Config+0x1d8>)
 800485e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004862:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004864:	f7fc ff2a 	bl	80016bc <HAL_GetTick>
 8004868:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800486a:	e009      	b.n	8004880 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800486c:	f7fc ff26 	bl	80016bc <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b02      	cmp	r3, #2
 8004878:	d902      	bls.n	8004880 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	73fb      	strb	r3, [r7, #15]
          break;
 800487e:	e005      	b.n	800488c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004880:	4b0a      	ldr	r3, [pc, #40]	; (80048ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d0ef      	beq.n	800486c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800488c:	7bfb      	ldrb	r3, [r7, #15]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d106      	bne.n	80048a0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004892:	4b06      	ldr	r3, [pc, #24]	; (80048ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004894:	695a      	ldr	r2, [r3, #20]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	4904      	ldr	r1, [pc, #16]	; (80048ac <RCCEx_PLLSAI2_Config+0x1d8>)
 800489c:	4313      	orrs	r3, r2
 800489e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80048a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	40021000 	.word	0x40021000
 80048b0:	07ff800f 	.word	0x07ff800f
 80048b4:	ff9f800f 	.word	0xff9f800f
 80048b8:	f9ff800f 	.word	0xf9ff800f

080048bc <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80048bc:	b480      	push	{r7}
 80048be:	b089      	sub	sp, #36	; 0x24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80048c6:	2300      	movs	r3, #0
 80048c8:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80048ca:	2300      	movs	r3, #0
 80048cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80048ce:	2300      	movs	r3, #0
 80048d0:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048d8:	d10b      	bne.n	80048f2 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80048da:	4b7e      	ldr	r3, [pc, #504]	; (8004ad4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80048dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048e0:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80048e4:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	2b60      	cmp	r3, #96	; 0x60
 80048ea:	d112      	bne.n	8004912 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80048ec:	4b7a      	ldr	r3, [pc, #488]	; (8004ad8 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 80048ee:	61fb      	str	r3, [r7, #28]
 80048f0:	e00f      	b.n	8004912 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048f8:	d10b      	bne.n	8004912 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80048fa:	4b76      	ldr	r3, [pc, #472]	; (8004ad4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80048fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004900:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004904:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800490c:	d101      	bne.n	8004912 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800490e:	4b72      	ldr	r3, [pc, #456]	; (8004ad8 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8004910:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	2b00      	cmp	r3, #0
 8004916:	f040 80d6 	bne.w	8004ac6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	2b40      	cmp	r3, #64	; 0x40
 8004922:	d003      	beq.n	800492c <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800492a:	d13b      	bne.n	80049a4 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800492c:	4b69      	ldr	r3, [pc, #420]	; (8004ad4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004934:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004938:	f040 80c4 	bne.w	8004ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 800493c:	4b65      	ldr	r3, [pc, #404]	; (8004ad4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004944:	2b00      	cmp	r3, #0
 8004946:	f000 80bd 	beq.w	8004ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800494a:	4b62      	ldr	r3, [pc, #392]	; (8004ad4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	091b      	lsrs	r3, r3, #4
 8004950:	f003 030f 	and.w	r3, r3, #15
 8004954:	3301      	adds	r3, #1
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	fbb2 f3f3 	udiv	r3, r2, r3
 800495c:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800495e:	4b5d      	ldr	r3, [pc, #372]	; (8004ad4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	0a1b      	lsrs	r3, r3, #8
 8004964:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004968:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800496a:	4b5a      	ldr	r3, [pc, #360]	; (8004ad4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	0edb      	lsrs	r3, r3, #27
 8004970:	f003 031f 	and.w	r3, r3, #31
 8004974:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d10a      	bne.n	8004992 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800497c:	4b55      	ldr	r3, [pc, #340]	; (8004ad4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d002      	beq.n	800498e <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8004988:	2311      	movs	r3, #17
 800498a:	617b      	str	r3, [r7, #20]
 800498c:	e001      	b.n	8004992 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 800498e:	2307      	movs	r3, #7
 8004990:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	fb03 f202 	mul.w	r2, r3, r2
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a0:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80049a2:	e08f      	b.n	8004ac4 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d13a      	bne.n	8004a20 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80049aa:	4b4a      	ldr	r3, [pc, #296]	; (8004ad4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049b6:	f040 8086 	bne.w	8004ac6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 80049ba:	4b46      	ldr	r3, [pc, #280]	; (8004ad4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d07f      	beq.n	8004ac6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80049c6:	4b43      	ldr	r3, [pc, #268]	; (8004ad4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	091b      	lsrs	r3, r3, #4
 80049cc:	f003 030f 	and.w	r3, r3, #15
 80049d0:	3301      	adds	r3, #1
 80049d2:	693a      	ldr	r2, [r7, #16]
 80049d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d8:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80049da:	4b3e      	ldr	r3, [pc, #248]	; (8004ad4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	0a1b      	lsrs	r3, r3, #8
 80049e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049e4:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 80049e6:	4b3b      	ldr	r3, [pc, #236]	; (8004ad4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	0edb      	lsrs	r3, r3, #27
 80049ec:	f003 031f 	and.w	r3, r3, #31
 80049f0:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d10a      	bne.n	8004a0e <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80049f8:	4b36      	ldr	r3, [pc, #216]	; (8004ad4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d002      	beq.n	8004a0a <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8004a04:	2311      	movs	r3, #17
 8004a06:	617b      	str	r3, [r7, #20]
 8004a08:	e001      	b.n	8004a0e <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8004a0a:	2307      	movs	r3, #7
 8004a0c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	fb03 f202 	mul.w	r2, r3, r2
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a1c:	61fb      	str	r3, [r7, #28]
 8004a1e:	e052      	b.n	8004ac6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	2b80      	cmp	r3, #128	; 0x80
 8004a24:	d003      	beq.n	8004a2e <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a2c:	d109      	bne.n	8004a42 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004a2e:	4b29      	ldr	r3, [pc, #164]	; (8004ad4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a3a:	d144      	bne.n	8004ac6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8004a3c:	4b27      	ldr	r3, [pc, #156]	; (8004adc <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8004a3e:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004a40:	e041      	b.n	8004ac6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	2b20      	cmp	r3, #32
 8004a46:	d003      	beq.n	8004a50 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a4e:	d13a      	bne.n	8004ac6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8004a50:	4b20      	ldr	r3, [pc, #128]	; (8004ad4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a5c:	d133      	bne.n	8004ac6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8004a5e:	4b1d      	ldr	r3, [pc, #116]	; (8004ad4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d02d      	beq.n	8004ac6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8004a6a:	4b1a      	ldr	r3, [pc, #104]	; (8004ad4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	091b      	lsrs	r3, r3, #4
 8004a70:	f003 030f 	and.w	r3, r3, #15
 8004a74:	3301      	adds	r3, #1
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a7c:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8004a7e:	4b15      	ldr	r3, [pc, #84]	; (8004ad4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	0a1b      	lsrs	r3, r3, #8
 8004a84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a88:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8004a8a:	4b12      	ldr	r3, [pc, #72]	; (8004ad4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	0edb      	lsrs	r3, r3, #27
 8004a90:	f003 031f 	and.w	r3, r3, #31
 8004a94:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d10a      	bne.n	8004ab2 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8004a9c:	4b0d      	ldr	r3, [pc, #52]	; (8004ad4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004a9e:	695b      	ldr	r3, [r3, #20]
 8004aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d002      	beq.n	8004aae <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8004aa8:	2311      	movs	r3, #17
 8004aaa:	617b      	str	r3, [r7, #20]
 8004aac:	e001      	b.n	8004ab2 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8004aae:	2307      	movs	r3, #7
 8004ab0:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	fb03 f202 	mul.w	r2, r3, r2
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac0:	61fb      	str	r3, [r7, #28]
 8004ac2:	e000      	b.n	8004ac6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004ac4:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8004ac6:	69fb      	ldr	r3, [r7, #28]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3724      	adds	r7, #36	; 0x24
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr
 8004ad4:	40021000 	.word	0x40021000
 8004ad8:	001fff68 	.word	0x001fff68
 8004adc:	00f42400 	.word	0x00f42400

08004ae0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b08a      	sub	sp, #40	; 0x28
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d101      	bne.n	8004af2 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e1c7      	b.n	8004e82 <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d10e      	bne.n	8004b1a <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a81      	ldr	r2, [pc, #516]	; (8004d08 <HAL_SAI_Init+0x228>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d107      	bne.n	8004b16 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d103      	bne.n	8004b16 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d001      	beq.n	8004b1a <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e1b3      	b.n	8004e82 <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d106      	bne.n	8004b34 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f7fc fc44 	bl	80013bc <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 f9b1 	bl	8004e9c <SAI_Disable>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d001      	beq.n	8004b44 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e19e      	b.n	8004e82 <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2202      	movs	r2, #2
 8004b48:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d00c      	beq.n	8004b6e <HAL_SAI_Init+0x8e>
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d80d      	bhi.n	8004b74 <HAL_SAI_Init+0x94>
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d002      	beq.n	8004b62 <HAL_SAI_Init+0x82>
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d003      	beq.n	8004b68 <HAL_SAI_Init+0x88>
 8004b60:	e008      	b.n	8004b74 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8004b62:	2300      	movs	r3, #0
 8004b64:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8004b66:	e008      	b.n	8004b7a <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004b68:	2310      	movs	r3, #16
 8004b6a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8004b6c:	e005      	b.n	8004b7a <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8004b6e:	2320      	movs	r3, #32
 8004b70:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8004b72:	e002      	b.n	8004b7a <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8004b74:	2300      	movs	r3, #0
 8004b76:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8004b78:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	2b03      	cmp	r3, #3
 8004b80:	d81d      	bhi.n	8004bbe <HAL_SAI_Init+0xde>
 8004b82:	a201      	add	r2, pc, #4	; (adr r2, 8004b88 <HAL_SAI_Init+0xa8>)
 8004b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b88:	08004b99 	.word	0x08004b99
 8004b8c:	08004b9f 	.word	0x08004b9f
 8004b90:	08004ba7 	.word	0x08004ba7
 8004b94:	08004baf 	.word	0x08004baf
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	61fb      	str	r3, [r7, #28]
      break;
 8004b9c:	e012      	b.n	8004bc4 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8004b9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ba2:	61fb      	str	r3, [r7, #28]
      break;
 8004ba4:	e00e      	b.n	8004bc4 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004ba6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004baa:	61fb      	str	r3, [r7, #28]
      break;
 8004bac:	e00a      	b.n	8004bc4 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004bae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004bb2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb6:	f043 0301 	orr.w	r3, r3, #1
 8004bba:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8004bbc:	e002      	b.n	8004bc4 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	61fb      	str	r3, [r7, #28]
      break;
 8004bc2:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a4f      	ldr	r2, [pc, #316]	; (8004d08 <HAL_SAI_Init+0x228>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d004      	beq.n	8004bd8 <HAL_SAI_Init+0xf8>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a4e      	ldr	r2, [pc, #312]	; (8004d0c <HAL_SAI_Init+0x22c>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d103      	bne.n	8004be0 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 8004bd8:	4a4d      	ldr	r2, [pc, #308]	; (8004d10 <HAL_SAI_Init+0x230>)
 8004bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bdc:	6013      	str	r3, [r2, #0]
 8004bde:	e002      	b.n	8004be6 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8004be0:	4a4c      	ldr	r2, [pc, #304]	; (8004d14 <HAL_SAI_Init+0x234>)
 8004be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be4:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	69db      	ldr	r3, [r3, #28]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d073      	beq.n	8004cd6 <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a45      	ldr	r2, [pc, #276]	; (8004d08 <HAL_SAI_Init+0x228>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d004      	beq.n	8004c02 <HAL_SAI_Init+0x122>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a43      	ldr	r2, [pc, #268]	; (8004d0c <HAL_SAI_Init+0x22c>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d105      	bne.n	8004c0e <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004c02:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004c06:	f7fe fd51 	bl	80036ac <HAL_RCCEx_GetPeriphCLKFreq>
 8004c0a:	61b8      	str	r0, [r7, #24]
 8004c0c:	e004      	b.n	8004c18 <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004c0e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004c12:	f7fe fd4b 	bl	80036ac <HAL_RCCEx_GetPeriphCLKFreq>
 8004c16:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	695b      	ldr	r3, [r3, #20]
 8004c1c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c20:	d120      	bne.n	8004c64 <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c26:	2b04      	cmp	r3, #4
 8004c28:	d102      	bne.n	8004c30 <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8004c2a:	2340      	movs	r3, #64	; 0x40
 8004c2c:	613b      	str	r3, [r7, #16]
 8004c2e:	e00a      	b.n	8004c46 <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c34:	2b08      	cmp	r3, #8
 8004c36:	d103      	bne.n	8004c40 <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8004c38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c3c:	613b      	str	r3, [r7, #16]
 8004c3e:	e002      	b.n	8004c46 <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c44:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8004c46:	69ba      	ldr	r2, [r7, #24]
 8004c48:	4613      	mov	r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	4413      	add	r3, r2
 8004c4e:	005b      	lsls	r3, r3, #1
 8004c50:	4619      	mov	r1, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	69db      	ldr	r3, [r3, #28]
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	fb02 f303 	mul.w	r3, r2, r3
 8004c5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c60:	617b      	str	r3, [r7, #20]
 8004c62:	e017      	b.n	8004c94 <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c6c:	d101      	bne.n	8004c72 <HAL_SAI_Init+0x192>
 8004c6e:	2302      	movs	r3, #2
 8004c70:	e000      	b.n	8004c74 <HAL_SAI_Init+0x194>
 8004c72:	2301      	movs	r3, #1
 8004c74:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8004c76:	69ba      	ldr	r2, [r7, #24]
 8004c78:	4613      	mov	r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	4413      	add	r3, r2
 8004c7e:	005b      	lsls	r3, r3, #1
 8004c80:	4619      	mov	r1, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	69db      	ldr	r3, [r3, #28]
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	fb02 f303 	mul.w	r3, r2, r3
 8004c8c:	021b      	lsls	r3, r3, #8
 8004c8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c92:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	4a20      	ldr	r2, [pc, #128]	; (8004d18 <HAL_SAI_Init+0x238>)
 8004c98:	fba2 2303 	umull	r2, r3, r2, r3
 8004c9c:	08da      	lsrs	r2, r3, #3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8004ca2:	6979      	ldr	r1, [r7, #20]
 8004ca4:	4b1c      	ldr	r3, [pc, #112]	; (8004d18 <HAL_SAI_Init+0x238>)
 8004ca6:	fba3 2301 	umull	r2, r3, r3, r1
 8004caa:	08da      	lsrs	r2, r3, #3
 8004cac:	4613      	mov	r3, r2
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	4413      	add	r3, r2
 8004cb2:	005b      	lsls	r3, r3, #1
 8004cb4:	1aca      	subs	r2, r1, r3
 8004cb6:	2a08      	cmp	r2, #8
 8004cb8:	d904      	bls.n	8004cc4 <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
 8004cbe:	1c5a      	adds	r2, r3, #1
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc8:	2b04      	cmp	r3, #4
 8004cca:	d104      	bne.n	8004cd6 <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a1b      	ldr	r3, [r3, #32]
 8004cd0:	085a      	lsrs	r2, r3, #1
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d003      	beq.n	8004ce6 <HAL_SAI_Init+0x206>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d109      	bne.n	8004cfa <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d101      	bne.n	8004cf2 <HAL_SAI_Init+0x212>
 8004cee:	2300      	movs	r3, #0
 8004cf0:	e001      	b.n	8004cf6 <HAL_SAI_Init+0x216>
 8004cf2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004cf6:	623b      	str	r3, [r7, #32]
 8004cf8:	e012      	b.n	8004d20 <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d10c      	bne.n	8004d1c <HAL_SAI_Init+0x23c>
 8004d02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d06:	e00a      	b.n	8004d1e <HAL_SAI_Init+0x23e>
 8004d08:	40015404 	.word	0x40015404
 8004d0c:	40015424 	.word	0x40015424
 8004d10:	40015400 	.word	0x40015400
 8004d14:	40015800 	.word	0x40015800
 8004d18:	cccccccd 	.word	0xcccccccd
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	6819      	ldr	r1, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	4b58      	ldr	r3, [pc, #352]	; (8004e8c <HAL_SAI_Init+0x3ac>)
 8004d2c:	400b      	ands	r3, r1
 8004d2e:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	6819      	ldr	r1, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685a      	ldr	r2, [r3, #4]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004d44:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d4a:	431a      	orrs	r2, r3
 8004d4c:	6a3b      	ldr	r3, [r7, #32]
 8004d4e:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 8004d58:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004d64:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	051b      	lsls	r3, r3, #20
 8004d6c:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8004d72:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	6812      	ldr	r2, [r2, #0]
 8004d86:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004d8a:	f023 030f 	bic.w	r3, r3, #15
 8004d8e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6859      	ldr	r1, [r3, #4]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	699a      	ldr	r2, [r3, #24]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9e:	431a      	orrs	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da4:	431a      	orrs	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	430a      	orrs	r2, r1
 8004dac:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	6899      	ldr	r1, [r3, #8]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	4b35      	ldr	r3, [pc, #212]	; (8004e90 <HAL_SAI_Init+0x3b0>)
 8004dba:	400b      	ands	r3, r1
 8004dbc:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	6899      	ldr	r1, [r3, #8]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dc8:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004dce:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
                           hsai->FrameInit.FSOffset |
 8004dd4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSDefinition |
 8004dda:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de0:	3b01      	subs	r3, #1
 8004de2:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8004de4:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	430a      	orrs	r2, r1
 8004dec:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68d9      	ldr	r1, [r3, #12]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	f24f 0320 	movw	r3, #61472	; 0xf020
 8004dfc:	400b      	ands	r3, r1
 8004dfe:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68d9      	ldr	r1, [r3, #12]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e0e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e14:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004e16:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	021b      	lsls	r3, r3, #8
 8004e20:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	430a      	orrs	r2, r1
 8004e28:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a19      	ldr	r2, [pc, #100]	; (8004e94 <HAL_SAI_Init+0x3b4>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d119      	bne.n	8004e68 <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8004e34:	4b18      	ldr	r3, [pc, #96]	; (8004e98 <HAL_SAI_Init+0x3b8>)
 8004e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e38:	4a17      	ldr	r2, [pc, #92]	; (8004e98 <HAL_SAI_Init+0x3b8>)
 8004e3a:	f023 0301 	bic.w	r3, r3, #1
 8004e3e:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d10e      	bne.n	8004e68 <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e52:	3b01      	subs	r3, #1
 8004e54:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8004e56:	4910      	ldr	r1, [pc, #64]	; (8004e98 <HAL_SAI_Init+0x3b8>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8004e5c:	4b0e      	ldr	r3, [pc, #56]	; (8004e98 <HAL_SAI_Init+0x3b8>)
 8004e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e60:	4a0d      	ldr	r2, [pc, #52]	; (8004e98 <HAL_SAI_Init+0x3b8>)
 8004e62:	f043 0301 	orr.w	r3, r3, #1
 8004e66:	6453      	str	r3, [r2, #68]	; 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3728      	adds	r7, #40	; 0x28
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	f805c010 	.word	0xf805c010
 8004e90:	fff88000 	.word	0xfff88000
 8004e94:	40015404 	.word	0x40015404
 8004e98:	40015400 	.word	0x40015400

08004e9c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004ea4:	4b18      	ldr	r3, [pc, #96]	; (8004f08 <SAI_Disable+0x6c>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a18      	ldr	r2, [pc, #96]	; (8004f0c <SAI_Disable+0x70>)
 8004eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8004eae:	0b1b      	lsrs	r3, r3, #12
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004ec6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d10a      	bne.n	8004ee4 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      status = HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	72fb      	strb	r3, [r7, #11]
      break;
 8004ee2:	e009      	b.n	8004ef8 <SAI_Disable+0x5c>
    }
    count--;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d1e7      	bne.n	8004ec8 <SAI_Disable+0x2c>

  return status;
 8004ef8:	7afb      	ldrb	r3, [r7, #11]
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3714      	adds	r7, #20
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	20000000 	.word	0x20000000
 8004f0c:	95cbec1b 	.word	0x95cbec1b

08004f10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d101      	bne.n	8004f22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e095      	b.n	800504e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d108      	bne.n	8004f3c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f32:	d009      	beq.n	8004f48 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	61da      	str	r2, [r3, #28]
 8004f3a:	e005      	b.n	8004f48 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d106      	bne.n	8004f68 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f7fc f87a 	bl	800105c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2202      	movs	r2, #2
 8004f6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f7e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f88:	d902      	bls.n	8004f90 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	60fb      	str	r3, [r7, #12]
 8004f8e:	e002      	b.n	8004f96 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004f90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f94:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004f9e:	d007      	beq.n	8004fb0 <HAL_SPI_Init+0xa0>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004fa8:	d002      	beq.n	8004fb0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004fc0:	431a      	orrs	r2, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	f003 0302 	and.w	r3, r3, #2
 8004fca:	431a      	orrs	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	695b      	ldr	r3, [r3, #20]
 8004fd0:	f003 0301 	and.w	r3, r3, #1
 8004fd4:	431a      	orrs	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fde:	431a      	orrs	r2, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	69db      	ldr	r3, [r3, #28]
 8004fe4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fe8:	431a      	orrs	r2, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a1b      	ldr	r3, [r3, #32]
 8004fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ff2:	ea42 0103 	orr.w	r1, r2, r3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	430a      	orrs	r2, r1
 8005004:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	0c1b      	lsrs	r3, r3, #16
 800500c:	f003 0204 	and.w	r2, r3, #4
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005014:	f003 0310 	and.w	r3, r3, #16
 8005018:	431a      	orrs	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800501e:	f003 0308 	and.w	r3, r3, #8
 8005022:	431a      	orrs	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800502c:	ea42 0103 	orr.w	r1, r2, r3
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	430a      	orrs	r2, r1
 800503c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3710      	adds	r7, #16
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}

08005056 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8005056:	b580      	push	{r7, lr}
 8005058:	b084      	sub	sp, #16
 800505a:	af00      	add	r7, sp, #0
 800505c:	60f8      	str	r0, [r7, #12]
 800505e:	60b9      	str	r1, [r7, #8]
 8005060:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d101      	bne.n	800506c <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e038      	b.n	80050de <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005072:	b2db      	uxtb	r3, r3
 8005074:	2b00      	cmp	r3, #0
 8005076:	d106      	bne.n	8005086 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f7fc f991 	bl	80013a8 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	3308      	adds	r3, #8
 800508e:	4619      	mov	r1, r3
 8005090:	4610      	mov	r0, r2
 8005092:	f000 ffe9 	bl	8006068 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6818      	ldr	r0, [r3, #0]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	461a      	mov	r2, r3
 80050a0:	68b9      	ldr	r1, [r7, #8]
 80050a2:	f001 f87b 	bl	800619c <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6858      	ldr	r0, [r3, #4]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	689a      	ldr	r2, [r3, #8]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b2:	6879      	ldr	r1, [r7, #4]
 80050b4:	f001 f8c4 	bl	8006240 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	6892      	ldr	r2, [r2, #8]
 80050c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	6892      	ldr	r2, [r2, #8]
 80050cc:	f041 0101 	orr.w	r1, r1, #1
 80050d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b082      	sub	sp, #8
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d101      	bne.n	80050f8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e042      	b.n	800517e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d106      	bne.n	8005110 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f7fc f808 	bl	8001120 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2224      	movs	r2, #36	; 0x24
 8005114:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f022 0201 	bic.w	r2, r2, #1
 8005126:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800512c:	2b00      	cmp	r3, #0
 800512e:	d002      	beq.n	8005136 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 fc7d 	bl	8005a30 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 f97e 	bl	8005438 <UART_SetConfig>
 800513c:	4603      	mov	r3, r0
 800513e:	2b01      	cmp	r3, #1
 8005140:	d101      	bne.n	8005146 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e01b      	b.n	800517e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	685a      	ldr	r2, [r3, #4]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005154:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	689a      	ldr	r2, [r3, #8]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005164:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f042 0201 	orr.w	r2, r2, #1
 8005174:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 fcfc 	bl	8005b74 <UART_CheckIdleState>
 800517c:	4603      	mov	r3, r0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3708      	adds	r7, #8
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005186:	b580      	push	{r7, lr}
 8005188:	b08a      	sub	sp, #40	; 0x28
 800518a:	af02      	add	r7, sp, #8
 800518c:	60f8      	str	r0, [r7, #12]
 800518e:	60b9      	str	r1, [r7, #8]
 8005190:	603b      	str	r3, [r7, #0]
 8005192:	4613      	mov	r3, r2
 8005194:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800519c:	2b20      	cmp	r3, #32
 800519e:	d17c      	bne.n	800529a <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d002      	beq.n	80051ac <HAL_UART_Transmit+0x26>
 80051a6:	88fb      	ldrh	r3, [r7, #6]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d101      	bne.n	80051b0 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e075      	b.n	800529c <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2221      	movs	r2, #33	; 0x21
 80051bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051c0:	f7fc fa7c 	bl	80016bc <HAL_GetTick>
 80051c4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	88fa      	ldrh	r2, [r7, #6]
 80051ca:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	88fa      	ldrh	r2, [r7, #6]
 80051d2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051de:	d108      	bne.n	80051f2 <HAL_UART_Transmit+0x6c>
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d104      	bne.n	80051f2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80051e8:	2300      	movs	r3, #0
 80051ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	61bb      	str	r3, [r7, #24]
 80051f0:	e003      	b.n	80051fa <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051f6:	2300      	movs	r3, #0
 80051f8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80051fa:	e031      	b.n	8005260 <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	9300      	str	r3, [sp, #0]
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	2200      	movs	r2, #0
 8005204:	2180      	movs	r1, #128	; 0x80
 8005206:	68f8      	ldr	r0, [r7, #12]
 8005208:	f000 fd5e 	bl	8005cc8 <UART_WaitOnFlagUntilTimeout>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d005      	beq.n	800521e <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2220      	movs	r2, #32
 8005216:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e03e      	b.n	800529c <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d10b      	bne.n	800523c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	881a      	ldrh	r2, [r3, #0]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005230:	b292      	uxth	r2, r2
 8005232:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	3302      	adds	r3, #2
 8005238:	61bb      	str	r3, [r7, #24]
 800523a:	e008      	b.n	800524e <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	781a      	ldrb	r2, [r3, #0]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	b292      	uxth	r2, r2
 8005246:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	3301      	adds	r3, #1
 800524c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005254:	b29b      	uxth	r3, r3
 8005256:	3b01      	subs	r3, #1
 8005258:	b29a      	uxth	r2, r3
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005266:	b29b      	uxth	r3, r3
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1c7      	bne.n	80051fc <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	9300      	str	r3, [sp, #0]
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	2200      	movs	r2, #0
 8005274:	2140      	movs	r1, #64	; 0x40
 8005276:	68f8      	ldr	r0, [r7, #12]
 8005278:	f000 fd26 	bl	8005cc8 <UART_WaitOnFlagUntilTimeout>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d005      	beq.n	800528e <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2220      	movs	r2, #32
 8005286:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e006      	b.n	800529c <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2220      	movs	r2, #32
 8005292:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005296:	2300      	movs	r3, #0
 8005298:	e000      	b.n	800529c <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 800529a:	2302      	movs	r3, #2
  }
}
 800529c:	4618      	mov	r0, r3
 800529e:	3720      	adds	r7, #32
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b08a      	sub	sp, #40	; 0x28
 80052a8:	af02      	add	r7, sp, #8
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	603b      	str	r3, [r7, #0]
 80052b0:	4613      	mov	r3, r2
 80052b2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052ba:	2b20      	cmp	r3, #32
 80052bc:	f040 80b6 	bne.w	800542c <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d002      	beq.n	80052cc <HAL_UART_Receive+0x28>
 80052c6:	88fb      	ldrh	r3, [r7, #6]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d101      	bne.n	80052d0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e0ae      	b.n	800542e <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2222      	movs	r2, #34	; 0x22
 80052dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2200      	movs	r2, #0
 80052e4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052e6:	f7fc f9e9 	bl	80016bc <HAL_GetTick>
 80052ea:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	88fa      	ldrh	r2, [r7, #6]
 80052f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	88fa      	ldrh	r2, [r7, #6]
 80052f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005304:	d10e      	bne.n	8005324 <HAL_UART_Receive+0x80>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d105      	bne.n	800531a <HAL_UART_Receive+0x76>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005314:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005318:	e02d      	b.n	8005376 <HAL_UART_Receive+0xd2>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	22ff      	movs	r2, #255	; 0xff
 800531e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005322:	e028      	b.n	8005376 <HAL_UART_Receive+0xd2>
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d10d      	bne.n	8005348 <HAL_UART_Receive+0xa4>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d104      	bne.n	800533e <HAL_UART_Receive+0x9a>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	22ff      	movs	r2, #255	; 0xff
 8005338:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800533c:	e01b      	b.n	8005376 <HAL_UART_Receive+0xd2>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	227f      	movs	r2, #127	; 0x7f
 8005342:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005346:	e016      	b.n	8005376 <HAL_UART_Receive+0xd2>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005350:	d10d      	bne.n	800536e <HAL_UART_Receive+0xca>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d104      	bne.n	8005364 <HAL_UART_Receive+0xc0>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	227f      	movs	r2, #127	; 0x7f
 800535e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005362:	e008      	b.n	8005376 <HAL_UART_Receive+0xd2>
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	223f      	movs	r2, #63	; 0x3f
 8005368:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800536c:	e003      	b.n	8005376 <HAL_UART_Receive+0xd2>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800537c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005386:	d108      	bne.n	800539a <HAL_UART_Receive+0xf6>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d104      	bne.n	800539a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005390:	2300      	movs	r3, #0
 8005392:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	61bb      	str	r3, [r7, #24]
 8005398:	e003      	b.n	80053a2 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800539e:	2300      	movs	r3, #0
 80053a0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80053a2:	e037      	b.n	8005414 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	9300      	str	r3, [sp, #0]
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	2200      	movs	r2, #0
 80053ac:	2120      	movs	r1, #32
 80053ae:	68f8      	ldr	r0, [r7, #12]
 80053b0:	f000 fc8a 	bl	8005cc8 <UART_WaitOnFlagUntilTimeout>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d005      	beq.n	80053c6 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2220      	movs	r2, #32
 80053be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e033      	b.n	800542e <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d10c      	bne.n	80053e6 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80053d2:	b29a      	uxth	r2, r3
 80053d4:	8a7b      	ldrh	r3, [r7, #18]
 80053d6:	4013      	ands	r3, r2
 80053d8:	b29a      	uxth	r2, r3
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	3302      	adds	r3, #2
 80053e2:	61bb      	str	r3, [r7, #24]
 80053e4:	e00d      	b.n	8005402 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	b2da      	uxtb	r2, r3
 80053f0:	8a7b      	ldrh	r3, [r7, #18]
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	4013      	ands	r3, r2
 80053f6:	b2da      	uxtb	r2, r3
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	3301      	adds	r3, #1
 8005400:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005408:	b29b      	uxth	r3, r3
 800540a:	3b01      	subs	r3, #1
 800540c:	b29a      	uxth	r2, r3
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800541a:	b29b      	uxth	r3, r3
 800541c:	2b00      	cmp	r3, #0
 800541e:	d1c1      	bne.n	80053a4 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2220      	movs	r2, #32
 8005424:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8005428:	2300      	movs	r3, #0
 800542a:	e000      	b.n	800542e <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800542c:	2302      	movs	r3, #2
  }
}
 800542e:	4618      	mov	r0, r3
 8005430:	3720      	adds	r7, #32
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
	...

08005438 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005438:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800543c:	b08c      	sub	sp, #48	; 0x30
 800543e:	af00      	add	r7, sp, #0
 8005440:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005442:	2300      	movs	r3, #0
 8005444:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	689a      	ldr	r2, [r3, #8]
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	431a      	orrs	r2, r3
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	431a      	orrs	r2, r3
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	69db      	ldr	r3, [r3, #28]
 800545c:	4313      	orrs	r3, r2
 800545e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	4baa      	ldr	r3, [pc, #680]	; (8005710 <UART_SetConfig+0x2d8>)
 8005468:	4013      	ands	r3, r2
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	6812      	ldr	r2, [r2, #0]
 800546e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005470:	430b      	orrs	r3, r1
 8005472:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	68da      	ldr	r2, [r3, #12]
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	430a      	orrs	r2, r1
 8005488:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a9f      	ldr	r2, [pc, #636]	; (8005714 <UART_SetConfig+0x2dc>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d004      	beq.n	80054a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054a0:	4313      	orrs	r3, r2
 80054a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80054ae:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	6812      	ldr	r2, [r2, #0]
 80054b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054b8:	430b      	orrs	r3, r1
 80054ba:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c2:	f023 010f 	bic.w	r1, r3, #15
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	430a      	orrs	r2, r1
 80054d0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a90      	ldr	r2, [pc, #576]	; (8005718 <UART_SetConfig+0x2e0>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d125      	bne.n	8005528 <UART_SetConfig+0xf0>
 80054dc:	4b8f      	ldr	r3, [pc, #572]	; (800571c <UART_SetConfig+0x2e4>)
 80054de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054e2:	f003 0303 	and.w	r3, r3, #3
 80054e6:	2b03      	cmp	r3, #3
 80054e8:	d81a      	bhi.n	8005520 <UART_SetConfig+0xe8>
 80054ea:	a201      	add	r2, pc, #4	; (adr r2, 80054f0 <UART_SetConfig+0xb8>)
 80054ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f0:	08005501 	.word	0x08005501
 80054f4:	08005511 	.word	0x08005511
 80054f8:	08005509 	.word	0x08005509
 80054fc:	08005519 	.word	0x08005519
 8005500:	2301      	movs	r3, #1
 8005502:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005506:	e116      	b.n	8005736 <UART_SetConfig+0x2fe>
 8005508:	2302      	movs	r3, #2
 800550a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800550e:	e112      	b.n	8005736 <UART_SetConfig+0x2fe>
 8005510:	2304      	movs	r3, #4
 8005512:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005516:	e10e      	b.n	8005736 <UART_SetConfig+0x2fe>
 8005518:	2308      	movs	r3, #8
 800551a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800551e:	e10a      	b.n	8005736 <UART_SetConfig+0x2fe>
 8005520:	2310      	movs	r3, #16
 8005522:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005526:	e106      	b.n	8005736 <UART_SetConfig+0x2fe>
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a7c      	ldr	r2, [pc, #496]	; (8005720 <UART_SetConfig+0x2e8>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d138      	bne.n	80055a4 <UART_SetConfig+0x16c>
 8005532:	4b7a      	ldr	r3, [pc, #488]	; (800571c <UART_SetConfig+0x2e4>)
 8005534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005538:	f003 030c 	and.w	r3, r3, #12
 800553c:	2b0c      	cmp	r3, #12
 800553e:	d82d      	bhi.n	800559c <UART_SetConfig+0x164>
 8005540:	a201      	add	r2, pc, #4	; (adr r2, 8005548 <UART_SetConfig+0x110>)
 8005542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005546:	bf00      	nop
 8005548:	0800557d 	.word	0x0800557d
 800554c:	0800559d 	.word	0x0800559d
 8005550:	0800559d 	.word	0x0800559d
 8005554:	0800559d 	.word	0x0800559d
 8005558:	0800558d 	.word	0x0800558d
 800555c:	0800559d 	.word	0x0800559d
 8005560:	0800559d 	.word	0x0800559d
 8005564:	0800559d 	.word	0x0800559d
 8005568:	08005585 	.word	0x08005585
 800556c:	0800559d 	.word	0x0800559d
 8005570:	0800559d 	.word	0x0800559d
 8005574:	0800559d 	.word	0x0800559d
 8005578:	08005595 	.word	0x08005595
 800557c:	2300      	movs	r3, #0
 800557e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005582:	e0d8      	b.n	8005736 <UART_SetConfig+0x2fe>
 8005584:	2302      	movs	r3, #2
 8005586:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800558a:	e0d4      	b.n	8005736 <UART_SetConfig+0x2fe>
 800558c:	2304      	movs	r3, #4
 800558e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005592:	e0d0      	b.n	8005736 <UART_SetConfig+0x2fe>
 8005594:	2308      	movs	r3, #8
 8005596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800559a:	e0cc      	b.n	8005736 <UART_SetConfig+0x2fe>
 800559c:	2310      	movs	r3, #16
 800559e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055a2:	e0c8      	b.n	8005736 <UART_SetConfig+0x2fe>
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a5e      	ldr	r2, [pc, #376]	; (8005724 <UART_SetConfig+0x2ec>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d125      	bne.n	80055fa <UART_SetConfig+0x1c2>
 80055ae:	4b5b      	ldr	r3, [pc, #364]	; (800571c <UART_SetConfig+0x2e4>)
 80055b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80055b8:	2b30      	cmp	r3, #48	; 0x30
 80055ba:	d016      	beq.n	80055ea <UART_SetConfig+0x1b2>
 80055bc:	2b30      	cmp	r3, #48	; 0x30
 80055be:	d818      	bhi.n	80055f2 <UART_SetConfig+0x1ba>
 80055c0:	2b20      	cmp	r3, #32
 80055c2:	d00a      	beq.n	80055da <UART_SetConfig+0x1a2>
 80055c4:	2b20      	cmp	r3, #32
 80055c6:	d814      	bhi.n	80055f2 <UART_SetConfig+0x1ba>
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d002      	beq.n	80055d2 <UART_SetConfig+0x19a>
 80055cc:	2b10      	cmp	r3, #16
 80055ce:	d008      	beq.n	80055e2 <UART_SetConfig+0x1aa>
 80055d0:	e00f      	b.n	80055f2 <UART_SetConfig+0x1ba>
 80055d2:	2300      	movs	r3, #0
 80055d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055d8:	e0ad      	b.n	8005736 <UART_SetConfig+0x2fe>
 80055da:	2302      	movs	r3, #2
 80055dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055e0:	e0a9      	b.n	8005736 <UART_SetConfig+0x2fe>
 80055e2:	2304      	movs	r3, #4
 80055e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055e8:	e0a5      	b.n	8005736 <UART_SetConfig+0x2fe>
 80055ea:	2308      	movs	r3, #8
 80055ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055f0:	e0a1      	b.n	8005736 <UART_SetConfig+0x2fe>
 80055f2:	2310      	movs	r3, #16
 80055f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055f8:	e09d      	b.n	8005736 <UART_SetConfig+0x2fe>
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a4a      	ldr	r2, [pc, #296]	; (8005728 <UART_SetConfig+0x2f0>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d125      	bne.n	8005650 <UART_SetConfig+0x218>
 8005604:	4b45      	ldr	r3, [pc, #276]	; (800571c <UART_SetConfig+0x2e4>)
 8005606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800560a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800560e:	2bc0      	cmp	r3, #192	; 0xc0
 8005610:	d016      	beq.n	8005640 <UART_SetConfig+0x208>
 8005612:	2bc0      	cmp	r3, #192	; 0xc0
 8005614:	d818      	bhi.n	8005648 <UART_SetConfig+0x210>
 8005616:	2b80      	cmp	r3, #128	; 0x80
 8005618:	d00a      	beq.n	8005630 <UART_SetConfig+0x1f8>
 800561a:	2b80      	cmp	r3, #128	; 0x80
 800561c:	d814      	bhi.n	8005648 <UART_SetConfig+0x210>
 800561e:	2b00      	cmp	r3, #0
 8005620:	d002      	beq.n	8005628 <UART_SetConfig+0x1f0>
 8005622:	2b40      	cmp	r3, #64	; 0x40
 8005624:	d008      	beq.n	8005638 <UART_SetConfig+0x200>
 8005626:	e00f      	b.n	8005648 <UART_SetConfig+0x210>
 8005628:	2300      	movs	r3, #0
 800562a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800562e:	e082      	b.n	8005736 <UART_SetConfig+0x2fe>
 8005630:	2302      	movs	r3, #2
 8005632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005636:	e07e      	b.n	8005736 <UART_SetConfig+0x2fe>
 8005638:	2304      	movs	r3, #4
 800563a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800563e:	e07a      	b.n	8005736 <UART_SetConfig+0x2fe>
 8005640:	2308      	movs	r3, #8
 8005642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005646:	e076      	b.n	8005736 <UART_SetConfig+0x2fe>
 8005648:	2310      	movs	r3, #16
 800564a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800564e:	e072      	b.n	8005736 <UART_SetConfig+0x2fe>
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a35      	ldr	r2, [pc, #212]	; (800572c <UART_SetConfig+0x2f4>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d12a      	bne.n	80056b0 <UART_SetConfig+0x278>
 800565a:	4b30      	ldr	r3, [pc, #192]	; (800571c <UART_SetConfig+0x2e4>)
 800565c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005660:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005664:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005668:	d01a      	beq.n	80056a0 <UART_SetConfig+0x268>
 800566a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800566e:	d81b      	bhi.n	80056a8 <UART_SetConfig+0x270>
 8005670:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005674:	d00c      	beq.n	8005690 <UART_SetConfig+0x258>
 8005676:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800567a:	d815      	bhi.n	80056a8 <UART_SetConfig+0x270>
 800567c:	2b00      	cmp	r3, #0
 800567e:	d003      	beq.n	8005688 <UART_SetConfig+0x250>
 8005680:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005684:	d008      	beq.n	8005698 <UART_SetConfig+0x260>
 8005686:	e00f      	b.n	80056a8 <UART_SetConfig+0x270>
 8005688:	2300      	movs	r3, #0
 800568a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800568e:	e052      	b.n	8005736 <UART_SetConfig+0x2fe>
 8005690:	2302      	movs	r3, #2
 8005692:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005696:	e04e      	b.n	8005736 <UART_SetConfig+0x2fe>
 8005698:	2304      	movs	r3, #4
 800569a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800569e:	e04a      	b.n	8005736 <UART_SetConfig+0x2fe>
 80056a0:	2308      	movs	r3, #8
 80056a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056a6:	e046      	b.n	8005736 <UART_SetConfig+0x2fe>
 80056a8:	2310      	movs	r3, #16
 80056aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056ae:	e042      	b.n	8005736 <UART_SetConfig+0x2fe>
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a17      	ldr	r2, [pc, #92]	; (8005714 <UART_SetConfig+0x2dc>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d13a      	bne.n	8005730 <UART_SetConfig+0x2f8>
 80056ba:	4b18      	ldr	r3, [pc, #96]	; (800571c <UART_SetConfig+0x2e4>)
 80056bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80056c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056c8:	d01a      	beq.n	8005700 <UART_SetConfig+0x2c8>
 80056ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056ce:	d81b      	bhi.n	8005708 <UART_SetConfig+0x2d0>
 80056d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056d4:	d00c      	beq.n	80056f0 <UART_SetConfig+0x2b8>
 80056d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056da:	d815      	bhi.n	8005708 <UART_SetConfig+0x2d0>
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d003      	beq.n	80056e8 <UART_SetConfig+0x2b0>
 80056e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056e4:	d008      	beq.n	80056f8 <UART_SetConfig+0x2c0>
 80056e6:	e00f      	b.n	8005708 <UART_SetConfig+0x2d0>
 80056e8:	2300      	movs	r3, #0
 80056ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056ee:	e022      	b.n	8005736 <UART_SetConfig+0x2fe>
 80056f0:	2302      	movs	r3, #2
 80056f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056f6:	e01e      	b.n	8005736 <UART_SetConfig+0x2fe>
 80056f8:	2304      	movs	r3, #4
 80056fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056fe:	e01a      	b.n	8005736 <UART_SetConfig+0x2fe>
 8005700:	2308      	movs	r3, #8
 8005702:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005706:	e016      	b.n	8005736 <UART_SetConfig+0x2fe>
 8005708:	2310      	movs	r3, #16
 800570a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800570e:	e012      	b.n	8005736 <UART_SetConfig+0x2fe>
 8005710:	cfff69f3 	.word	0xcfff69f3
 8005714:	40008000 	.word	0x40008000
 8005718:	40013800 	.word	0x40013800
 800571c:	40021000 	.word	0x40021000
 8005720:	40004400 	.word	0x40004400
 8005724:	40004800 	.word	0x40004800
 8005728:	40004c00 	.word	0x40004c00
 800572c:	40005000 	.word	0x40005000
 8005730:	2310      	movs	r3, #16
 8005732:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4aae      	ldr	r2, [pc, #696]	; (80059f4 <UART_SetConfig+0x5bc>)
 800573c:	4293      	cmp	r3, r2
 800573e:	f040 8097 	bne.w	8005870 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005742:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005746:	2b08      	cmp	r3, #8
 8005748:	d823      	bhi.n	8005792 <UART_SetConfig+0x35a>
 800574a:	a201      	add	r2, pc, #4	; (adr r2, 8005750 <UART_SetConfig+0x318>)
 800574c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005750:	08005775 	.word	0x08005775
 8005754:	08005793 	.word	0x08005793
 8005758:	0800577d 	.word	0x0800577d
 800575c:	08005793 	.word	0x08005793
 8005760:	08005783 	.word	0x08005783
 8005764:	08005793 	.word	0x08005793
 8005768:	08005793 	.word	0x08005793
 800576c:	08005793 	.word	0x08005793
 8005770:	0800578b 	.word	0x0800578b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005774:	f7fd fb20 	bl	8002db8 <HAL_RCC_GetPCLK1Freq>
 8005778:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800577a:	e010      	b.n	800579e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800577c:	4b9e      	ldr	r3, [pc, #632]	; (80059f8 <UART_SetConfig+0x5c0>)
 800577e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005780:	e00d      	b.n	800579e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005782:	f7fd fa83 	bl	8002c8c <HAL_RCC_GetSysClockFreq>
 8005786:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005788:	e009      	b.n	800579e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800578a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800578e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005790:	e005      	b.n	800579e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005792:	2300      	movs	r3, #0
 8005794:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800579c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800579e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f000 8130 	beq.w	8005a06 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057aa:	4a94      	ldr	r2, [pc, #592]	; (80059fc <UART_SetConfig+0x5c4>)
 80057ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057b0:	461a      	mov	r2, r3
 80057b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80057b8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	685a      	ldr	r2, [r3, #4]
 80057be:	4613      	mov	r3, r2
 80057c0:	005b      	lsls	r3, r3, #1
 80057c2:	4413      	add	r3, r2
 80057c4:	69ba      	ldr	r2, [r7, #24]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d305      	bcc.n	80057d6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80057d0:	69ba      	ldr	r2, [r7, #24]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d903      	bls.n	80057de <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80057dc:	e113      	b.n	8005a06 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e0:	2200      	movs	r2, #0
 80057e2:	60bb      	str	r3, [r7, #8]
 80057e4:	60fa      	str	r2, [r7, #12]
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ea:	4a84      	ldr	r2, [pc, #528]	; (80059fc <UART_SetConfig+0x5c4>)
 80057ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	2200      	movs	r2, #0
 80057f4:	603b      	str	r3, [r7, #0]
 80057f6:	607a      	str	r2, [r7, #4]
 80057f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005800:	f7fa fd4e 	bl	80002a0 <__aeabi_uldivmod>
 8005804:	4602      	mov	r2, r0
 8005806:	460b      	mov	r3, r1
 8005808:	4610      	mov	r0, r2
 800580a:	4619      	mov	r1, r3
 800580c:	f04f 0200 	mov.w	r2, #0
 8005810:	f04f 0300 	mov.w	r3, #0
 8005814:	020b      	lsls	r3, r1, #8
 8005816:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800581a:	0202      	lsls	r2, r0, #8
 800581c:	6979      	ldr	r1, [r7, #20]
 800581e:	6849      	ldr	r1, [r1, #4]
 8005820:	0849      	lsrs	r1, r1, #1
 8005822:	2000      	movs	r0, #0
 8005824:	460c      	mov	r4, r1
 8005826:	4605      	mov	r5, r0
 8005828:	eb12 0804 	adds.w	r8, r2, r4
 800582c:	eb43 0905 	adc.w	r9, r3, r5
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	469a      	mov	sl, r3
 8005838:	4693      	mov	fp, r2
 800583a:	4652      	mov	r2, sl
 800583c:	465b      	mov	r3, fp
 800583e:	4640      	mov	r0, r8
 8005840:	4649      	mov	r1, r9
 8005842:	f7fa fd2d 	bl	80002a0 <__aeabi_uldivmod>
 8005846:	4602      	mov	r2, r0
 8005848:	460b      	mov	r3, r1
 800584a:	4613      	mov	r3, r2
 800584c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800584e:	6a3b      	ldr	r3, [r7, #32]
 8005850:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005854:	d308      	bcc.n	8005868 <UART_SetConfig+0x430>
 8005856:	6a3b      	ldr	r3, [r7, #32]
 8005858:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800585c:	d204      	bcs.n	8005868 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	6a3a      	ldr	r2, [r7, #32]
 8005864:	60da      	str	r2, [r3, #12]
 8005866:	e0ce      	b.n	8005a06 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800586e:	e0ca      	b.n	8005a06 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	69db      	ldr	r3, [r3, #28]
 8005874:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005878:	d166      	bne.n	8005948 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800587a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800587e:	2b08      	cmp	r3, #8
 8005880:	d827      	bhi.n	80058d2 <UART_SetConfig+0x49a>
 8005882:	a201      	add	r2, pc, #4	; (adr r2, 8005888 <UART_SetConfig+0x450>)
 8005884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005888:	080058ad 	.word	0x080058ad
 800588c:	080058b5 	.word	0x080058b5
 8005890:	080058bd 	.word	0x080058bd
 8005894:	080058d3 	.word	0x080058d3
 8005898:	080058c3 	.word	0x080058c3
 800589c:	080058d3 	.word	0x080058d3
 80058a0:	080058d3 	.word	0x080058d3
 80058a4:	080058d3 	.word	0x080058d3
 80058a8:	080058cb 	.word	0x080058cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058ac:	f7fd fa84 	bl	8002db8 <HAL_RCC_GetPCLK1Freq>
 80058b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80058b2:	e014      	b.n	80058de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058b4:	f7fd fa96 	bl	8002de4 <HAL_RCC_GetPCLK2Freq>
 80058b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80058ba:	e010      	b.n	80058de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058bc:	4b4e      	ldr	r3, [pc, #312]	; (80059f8 <UART_SetConfig+0x5c0>)
 80058be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80058c0:	e00d      	b.n	80058de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058c2:	f7fd f9e3 	bl	8002c8c <HAL_RCC_GetSysClockFreq>
 80058c6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80058c8:	e009      	b.n	80058de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80058d0:	e005      	b.n	80058de <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80058d2:	2300      	movs	r3, #0
 80058d4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80058dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80058de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	f000 8090 	beq.w	8005a06 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ea:	4a44      	ldr	r2, [pc, #272]	; (80059fc <UART_SetConfig+0x5c4>)
 80058ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058f0:	461a      	mov	r2, r3
 80058f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80058f8:	005a      	lsls	r2, r3, #1
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	085b      	lsrs	r3, r3, #1
 8005900:	441a      	add	r2, r3
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	fbb2 f3f3 	udiv	r3, r2, r3
 800590a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800590c:	6a3b      	ldr	r3, [r7, #32]
 800590e:	2b0f      	cmp	r3, #15
 8005910:	d916      	bls.n	8005940 <UART_SetConfig+0x508>
 8005912:	6a3b      	ldr	r3, [r7, #32]
 8005914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005918:	d212      	bcs.n	8005940 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	b29b      	uxth	r3, r3
 800591e:	f023 030f 	bic.w	r3, r3, #15
 8005922:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005924:	6a3b      	ldr	r3, [r7, #32]
 8005926:	085b      	lsrs	r3, r3, #1
 8005928:	b29b      	uxth	r3, r3
 800592a:	f003 0307 	and.w	r3, r3, #7
 800592e:	b29a      	uxth	r2, r3
 8005930:	8bfb      	ldrh	r3, [r7, #30]
 8005932:	4313      	orrs	r3, r2
 8005934:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	8bfa      	ldrh	r2, [r7, #30]
 800593c:	60da      	str	r2, [r3, #12]
 800593e:	e062      	b.n	8005a06 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005946:	e05e      	b.n	8005a06 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005948:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800594c:	2b08      	cmp	r3, #8
 800594e:	d828      	bhi.n	80059a2 <UART_SetConfig+0x56a>
 8005950:	a201      	add	r2, pc, #4	; (adr r2, 8005958 <UART_SetConfig+0x520>)
 8005952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005956:	bf00      	nop
 8005958:	0800597d 	.word	0x0800597d
 800595c:	08005985 	.word	0x08005985
 8005960:	0800598d 	.word	0x0800598d
 8005964:	080059a3 	.word	0x080059a3
 8005968:	08005993 	.word	0x08005993
 800596c:	080059a3 	.word	0x080059a3
 8005970:	080059a3 	.word	0x080059a3
 8005974:	080059a3 	.word	0x080059a3
 8005978:	0800599b 	.word	0x0800599b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800597c:	f7fd fa1c 	bl	8002db8 <HAL_RCC_GetPCLK1Freq>
 8005980:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005982:	e014      	b.n	80059ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005984:	f7fd fa2e 	bl	8002de4 <HAL_RCC_GetPCLK2Freq>
 8005988:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800598a:	e010      	b.n	80059ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800598c:	4b1a      	ldr	r3, [pc, #104]	; (80059f8 <UART_SetConfig+0x5c0>)
 800598e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005990:	e00d      	b.n	80059ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005992:	f7fd f97b 	bl	8002c8c <HAL_RCC_GetSysClockFreq>
 8005996:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005998:	e009      	b.n	80059ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800599a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800599e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80059a0:	e005      	b.n	80059ae <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80059a2:	2300      	movs	r3, #0
 80059a4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80059ac:	bf00      	nop
    }

    if (pclk != 0U)
 80059ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d028      	beq.n	8005a06 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b8:	4a10      	ldr	r2, [pc, #64]	; (80059fc <UART_SetConfig+0x5c4>)
 80059ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059be:	461a      	mov	r2, r3
 80059c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	085b      	lsrs	r3, r3, #1
 80059cc:	441a      	add	r2, r3
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80059d6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059d8:	6a3b      	ldr	r3, [r7, #32]
 80059da:	2b0f      	cmp	r3, #15
 80059dc:	d910      	bls.n	8005a00 <UART_SetConfig+0x5c8>
 80059de:	6a3b      	ldr	r3, [r7, #32]
 80059e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059e4:	d20c      	bcs.n	8005a00 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80059e6:	6a3b      	ldr	r3, [r7, #32]
 80059e8:	b29a      	uxth	r2, r3
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	60da      	str	r2, [r3, #12]
 80059f0:	e009      	b.n	8005a06 <UART_SetConfig+0x5ce>
 80059f2:	bf00      	nop
 80059f4:	40008000 	.word	0x40008000
 80059f8:	00f42400 	.word	0x00f42400
 80059fc:	0800a124 	.word	0x0800a124
      }
      else
      {
        ret = HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005a22:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3730      	adds	r7, #48	; 0x30
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005a30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a3c:	f003 0308 	and.w	r3, r3, #8
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d00a      	beq.n	8005a5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	430a      	orrs	r2, r1
 8005a58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a5e:	f003 0301 	and.w	r3, r3, #1
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00a      	beq.n	8005a7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	430a      	orrs	r2, r1
 8005a7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a80:	f003 0302 	and.w	r3, r3, #2
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d00a      	beq.n	8005a9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	430a      	orrs	r2, r1
 8005a9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa2:	f003 0304 	and.w	r3, r3, #4
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00a      	beq.n	8005ac0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	430a      	orrs	r2, r1
 8005abe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac4:	f003 0310 	and.w	r3, r3, #16
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00a      	beq.n	8005ae2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	430a      	orrs	r2, r1
 8005ae0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae6:	f003 0320 	and.w	r3, r3, #32
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00a      	beq.n	8005b04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	430a      	orrs	r2, r1
 8005b02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d01a      	beq.n	8005b46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	430a      	orrs	r2, r1
 8005b24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b2e:	d10a      	bne.n	8005b46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	430a      	orrs	r2, r1
 8005b44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00a      	beq.n	8005b68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	430a      	orrs	r2, r1
 8005b66:	605a      	str	r2, [r3, #4]
  }
}
 8005b68:	bf00      	nop
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b098      	sub	sp, #96	; 0x60
 8005b78:	af02      	add	r7, sp, #8
 8005b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b84:	f7fb fd9a 	bl	80016bc <HAL_GetTick>
 8005b88:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0308 	and.w	r3, r3, #8
 8005b94:	2b08      	cmp	r3, #8
 8005b96:	d12f      	bne.n	8005bf8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b9c:	9300      	str	r3, [sp, #0]
 8005b9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 f88e 	bl	8005cc8 <UART_WaitOnFlagUntilTimeout>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d022      	beq.n	8005bf8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bba:	e853 3f00 	ldrex	r3, [r3]
 8005bbe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bc6:	653b      	str	r3, [r7, #80]	; 0x50
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	461a      	mov	r2, r3
 8005bce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bd0:	647b      	str	r3, [r7, #68]	; 0x44
 8005bd2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005bd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005bd8:	e841 2300 	strex	r3, r2, [r1]
 8005bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005bde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d1e6      	bne.n	8005bb2 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2220      	movs	r2, #32
 8005be8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	e063      	b.n	8005cc0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0304 	and.w	r3, r3, #4
 8005c02:	2b04      	cmp	r3, #4
 8005c04:	d149      	bne.n	8005c9a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c06:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c0a:	9300      	str	r3, [sp, #0]
 8005c0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 f857 	bl	8005cc8 <UART_WaitOnFlagUntilTimeout>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d03c      	beq.n	8005c9a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c28:	e853 3f00 	ldrex	r3, [r3]
 8005c2c:	623b      	str	r3, [r7, #32]
   return(result);
 8005c2e:	6a3b      	ldr	r3, [r7, #32]
 8005c30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c3e:	633b      	str	r3, [r7, #48]	; 0x30
 8005c40:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c46:	e841 2300 	strex	r3, r2, [r1]
 8005c4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d1e6      	bne.n	8005c20 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	3308      	adds	r3, #8
 8005c58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	e853 3f00 	ldrex	r3, [r3]
 8005c60:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f023 0301 	bic.w	r3, r3, #1
 8005c68:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	3308      	adds	r3, #8
 8005c70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c72:	61fa      	str	r2, [r7, #28]
 8005c74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c76:	69b9      	ldr	r1, [r7, #24]
 8005c78:	69fa      	ldr	r2, [r7, #28]
 8005c7a:	e841 2300 	strex	r3, r2, [r1]
 8005c7e:	617b      	str	r3, [r7, #20]
   return(result);
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1e5      	bne.n	8005c52 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2220      	movs	r2, #32
 8005c8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e012      	b.n	8005cc0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2220      	movs	r2, #32
 8005c9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2220      	movs	r2, #32
 8005ca6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3758      	adds	r7, #88	; 0x58
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	603b      	str	r3, [r7, #0]
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cd8:	e049      	b.n	8005d6e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce0:	d045      	beq.n	8005d6e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ce2:	f7fb fceb 	bl	80016bc <HAL_GetTick>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	69ba      	ldr	r2, [r7, #24]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d302      	bcc.n	8005cf8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d101      	bne.n	8005cfc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e048      	b.n	8005d8e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0304 	and.w	r3, r3, #4
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d031      	beq.n	8005d6e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	69db      	ldr	r3, [r3, #28]
 8005d10:	f003 0308 	and.w	r3, r3, #8
 8005d14:	2b08      	cmp	r3, #8
 8005d16:	d110      	bne.n	8005d3a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2208      	movs	r2, #8
 8005d1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d20:	68f8      	ldr	r0, [r7, #12]
 8005d22:	f000 f838 	bl	8005d96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2208      	movs	r2, #8
 8005d2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e029      	b.n	8005d8e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	69db      	ldr	r3, [r3, #28]
 8005d40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d48:	d111      	bne.n	8005d6e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d54:	68f8      	ldr	r0, [r7, #12]
 8005d56:	f000 f81e 	bl	8005d96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2220      	movs	r2, #32
 8005d5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	e00f      	b.n	8005d8e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	69da      	ldr	r2, [r3, #28]
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	4013      	ands	r3, r2
 8005d78:	68ba      	ldr	r2, [r7, #8]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	bf0c      	ite	eq
 8005d7e:	2301      	moveq	r3, #1
 8005d80:	2300      	movne	r3, #0
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	461a      	mov	r2, r3
 8005d86:	79fb      	ldrb	r3, [r7, #7]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d0a6      	beq.n	8005cda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3710      	adds	r7, #16
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}

08005d96 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d96:	b480      	push	{r7}
 8005d98:	b095      	sub	sp, #84	; 0x54
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005da6:	e853 3f00 	ldrex	r3, [r3]
 8005daa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005db2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	461a      	mov	r2, r3
 8005dba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dbc:	643b      	str	r3, [r7, #64]	; 0x40
 8005dbe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005dc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005dc4:	e841 2300 	strex	r3, r2, [r1]
 8005dc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1e6      	bne.n	8005d9e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	3308      	adds	r3, #8
 8005dd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd8:	6a3b      	ldr	r3, [r7, #32]
 8005dda:	e853 3f00 	ldrex	r3, [r3]
 8005dde:	61fb      	str	r3, [r7, #28]
   return(result);
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005de6:	f023 0301 	bic.w	r3, r3, #1
 8005dea:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	3308      	adds	r3, #8
 8005df2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005df4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005df6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005dfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dfc:	e841 2300 	strex	r3, r2, [r1]
 8005e00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d1e3      	bne.n	8005dd0 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d118      	bne.n	8005e42 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	e853 3f00 	ldrex	r3, [r3]
 8005e1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	f023 0310 	bic.w	r3, r3, #16
 8005e24:	647b      	str	r3, [r7, #68]	; 0x44
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e2e:	61bb      	str	r3, [r7, #24]
 8005e30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e32:	6979      	ldr	r1, [r7, #20]
 8005e34:	69ba      	ldr	r2, [r7, #24]
 8005e36:	e841 2300 	strex	r3, r2, [r1]
 8005e3a:	613b      	str	r3, [r7, #16]
   return(result);
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1e6      	bne.n	8005e10 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2220      	movs	r2, #32
 8005e46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005e56:	bf00      	nop
 8005e58:	3754      	adds	r7, #84	; 0x54
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr

08005e62 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005e62:	b480      	push	{r7}
 8005e64:	b085      	sub	sp, #20
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d101      	bne.n	8005e78 <HAL_UARTEx_DisableFifoMode+0x16>
 8005e74:	2302      	movs	r3, #2
 8005e76:	e027      	b.n	8005ec8 <HAL_UARTEx_DisableFifoMode+0x66>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2224      	movs	r2, #36	; 0x24
 8005e84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f022 0201 	bic.w	r2, r2, #1
 8005e9e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005ea6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2220      	movs	r2, #32
 8005eba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005ec6:	2300      	movs	r3, #0
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3714      	adds	r7, #20
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d101      	bne.n	8005eec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005ee8:	2302      	movs	r3, #2
 8005eea:	e02d      	b.n	8005f48 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2224      	movs	r2, #36	; 0x24
 8005ef8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f022 0201 	bic.w	r2, r2, #1
 8005f12:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	683a      	ldr	r2, [r7, #0]
 8005f24:	430a      	orrs	r2, r1
 8005f26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 f84f 	bl	8005fcc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2220      	movs	r2, #32
 8005f3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3710      	adds	r7, #16
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d101      	bne.n	8005f68 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005f64:	2302      	movs	r3, #2
 8005f66:	e02d      	b.n	8005fc4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2224      	movs	r2, #36	; 0x24
 8005f74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f022 0201 	bic.w	r2, r2, #1
 8005f8e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	683a      	ldr	r2, [r7, #0]
 8005fa0:	430a      	orrs	r2, r1
 8005fa2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 f811 	bl	8005fcc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2220      	movs	r2, #32
 8005fb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005fc2:	2300      	movs	r3, #0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3710      	adds	r7, #16
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b085      	sub	sp, #20
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d108      	bne.n	8005fee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005fec:	e031      	b.n	8006052 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005fee:	2308      	movs	r3, #8
 8005ff0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005ff2:	2308      	movs	r3, #8
 8005ff4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	0e5b      	lsrs	r3, r3, #25
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	f003 0307 	and.w	r3, r3, #7
 8006004:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	0f5b      	lsrs	r3, r3, #29
 800600e:	b2db      	uxtb	r3, r3
 8006010:	f003 0307 	and.w	r3, r3, #7
 8006014:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006016:	7bbb      	ldrb	r3, [r7, #14]
 8006018:	7b3a      	ldrb	r2, [r7, #12]
 800601a:	4911      	ldr	r1, [pc, #68]	; (8006060 <UARTEx_SetNbDataToProcess+0x94>)
 800601c:	5c8a      	ldrb	r2, [r1, r2]
 800601e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006022:	7b3a      	ldrb	r2, [r7, #12]
 8006024:	490f      	ldr	r1, [pc, #60]	; (8006064 <UARTEx_SetNbDataToProcess+0x98>)
 8006026:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006028:	fb93 f3f2 	sdiv	r3, r3, r2
 800602c:	b29a      	uxth	r2, r3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006034:	7bfb      	ldrb	r3, [r7, #15]
 8006036:	7b7a      	ldrb	r2, [r7, #13]
 8006038:	4909      	ldr	r1, [pc, #36]	; (8006060 <UARTEx_SetNbDataToProcess+0x94>)
 800603a:	5c8a      	ldrb	r2, [r1, r2]
 800603c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006040:	7b7a      	ldrb	r2, [r7, #13]
 8006042:	4908      	ldr	r1, [pc, #32]	; (8006064 <UARTEx_SetNbDataToProcess+0x98>)
 8006044:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006046:	fb93 f3f2 	sdiv	r3, r3, r2
 800604a:	b29a      	uxth	r2, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006052:	bf00      	nop
 8006054:	3714      	adds	r7, #20
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop
 8006060:	0800a13c 	.word	0x0800a13c
 8006064:	0800a144 	.word	0x0800a144

08006068 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8006068:	b480      	push	{r7}
 800606a:	b087      	sub	sp, #28
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800607c:	683a      	ldr	r2, [r7, #0]
 800607e:	6812      	ldr	r2, [r2, #0]
 8006080:	f023 0101 	bic.w	r1, r3, #1
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	2b08      	cmp	r3, #8
 8006090:	d102      	bne.n	8006098 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006092:	2340      	movs	r3, #64	; 0x40
 8006094:	617b      	str	r3, [r7, #20]
 8006096:	e001      	b.n	800609c <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8006098:	2300      	movs	r3, #0
 800609a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80060a8:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80060ae:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80060b4:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80060ba:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 80060c0:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 80060c6:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 80060cc:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 80060d2:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 80060d8:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 80060de:	4313      	orrs	r3, r2
 80060e0:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e6:	693a      	ldr	r2, [r7, #16]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060fa:	693a      	ldr	r2, [r7, #16]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006104:	693a      	ldr	r2, [r7, #16]
 8006106:	4313      	orrs	r3, r2
 8006108:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800610a:	4b23      	ldr	r3, [pc, #140]	; (8006198 <FMC_NORSRAM_Init+0x130>)
 800610c:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006114:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800611c:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8006124:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800612c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	43db      	mvns	r3, r3
 800613c:	ea02 0103 	and.w	r1, r2, r3
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	4319      	orrs	r1, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006152:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006156:	d10c      	bne.n	8006172 <FMC_NORSRAM_Init+0x10a>
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d008      	beq.n	8006172 <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800616c:	431a      	orrs	r2, r3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d006      	beq.n	8006188 <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006182:	431a      	orrs	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	371c      	adds	r7, #28
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr
 8006196:	bf00      	nop
 8006198:	0008fb7f 	.word	0x0008fb7f

0800619c <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800619c:	b480      	push	{r7}
 800619e:	b087      	sub	sp, #28
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
#if defined(FMC_BTRx_DATAHLD)
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	1c5a      	adds	r2, r3, #1
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	011b      	lsls	r3, r3, #4
 80061bc:	431a      	orrs	r2, r3
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	021b      	lsls	r3, r3, #8
 80061c4:	431a      	orrs	r2, r3
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	079b      	lsls	r3, r3, #30
 80061cc:	431a      	orrs	r2, r3
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	041b      	lsls	r3, r3, #16
 80061d4:	431a      	orrs	r2, r3
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	695b      	ldr	r3, [r3, #20]
 80061da:	3b01      	subs	r3, #1
 80061dc:	051b      	lsls	r3, r3, #20
 80061de:	431a      	orrs	r2, r3
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	699b      	ldr	r3, [r3, #24]
 80061e4:	3b02      	subs	r3, #2
 80061e6:	061b      	lsls	r3, r3, #24
 80061e8:	ea42 0103 	orr.w	r1, r2, r3
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	69db      	ldr	r3, [r3, #28]
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	3201      	adds	r2, #1
 80061f4:	4319      	orrs	r1, r3
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006204:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006208:	d113      	bne.n	8006232 <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006212:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	695b      	ldr	r3, [r3, #20]
 8006218:	3b01      	subs	r3, #1
 800621a:	051b      	lsls	r3, r3, #20
 800621c:	697a      	ldr	r2, [r7, #20]
 800621e:	4313      	orrs	r3, r2
 8006220:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	431a      	orrs	r2, r3
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006232:	2300      	movs	r3, #0
}
 8006234:	4618      	mov	r0, r3
 8006236:	371c      	adds	r7, #28
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8006240:	b480      	push	{r7}
 8006242:	b085      	sub	sp, #20
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	607a      	str	r2, [r7, #4]
 800624c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006254:	d121      	bne.n	800629a <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FMC_BTRx_DATAHLD)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800625e:	f003 627f 	and.w	r2, r3, #267386880	; 0xff00000
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	6819      	ldr	r1, [r3, #0]
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	011b      	lsls	r3, r3, #4
 800626c:	4319      	orrs	r1, r3
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	021b      	lsls	r3, r3, #8
 8006274:	4319      	orrs	r1, r3
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	079b      	lsls	r3, r3, #30
 800627c:	4319      	orrs	r1, r3
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	69db      	ldr	r3, [r3, #28]
 8006282:	4319      	orrs	r1, r3
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	041b      	lsls	r3, r3, #16
 800628a:	430b      	orrs	r3, r1
 800628c:	ea42 0103 	orr.w	r1, r2, r3
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006298:	e005      	b.n	80062a6 <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80062a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3714      	adds	r7, #20
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <ai_log_err>:

static ai_buffer* ai_input;
static ai_buffer* ai_output;

static void ai_log_err(const ai_error err, const char *fct)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d009      	beq.n	80062d8 <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 80062c4:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80062c6:	461a      	mov	r2, r3
        err.type, err.code);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80062ce:	6839      	ldr	r1, [r7, #0]
 80062d0:	4806      	ldr	r0, [pc, #24]	; (80062ec <ai_log_err+0x38>)
 80062d2:	f002 fd4b 	bl	8008d6c <iprintf>
 80062d6:	e008      	b.n	80062ea <ai_log_err+0x36>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 80062d8:	793b      	ldrb	r3, [r7, #4]
 80062da:	4619      	mov	r1, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80062e2:	461a      	mov	r2, r3
 80062e4:	4802      	ldr	r0, [pc, #8]	; (80062f0 <ai_log_err+0x3c>)
 80062e6:	f002 fd41 	bl	8008d6c <iprintf>

  do {} while (1);
 80062ea:	e7fe      	b.n	80062ea <ai_log_err+0x36>
 80062ec:	08009fc0 	.word	0x08009fc0
 80062f0:	08009ff4 	.word	0x08009ff4

080062f4 <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle *act_addr)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b086      	sub	sp, #24
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* Create and initialize an instance of the model */
  err = ai_wine_quality_create_and_init(&wine_quality, act_addr, NULL);
 80062fc:	2200      	movs	r2, #0
 80062fe:	6879      	ldr	r1, [r7, #4]
 8006300:	4828      	ldr	r0, [pc, #160]	; (80063a4 <ai_boostrap+0xb0>)
 8006302:	f000 fae5 	bl	80068d0 <ai_wine_quality_create_and_init>
 8006306:	4603      	mov	r3, r0
 8006308:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 800630a:	7b3b      	ldrb	r3, [r7, #12]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d006      	beq.n	800631e <ai_boostrap+0x2a>
    ai_log_err(err, "ai_wine_quality_create_and_init");
 8006310:	4925      	ldr	r1, [pc, #148]	; (80063a8 <ai_boostrap+0xb4>)
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f7ff ffce 	bl	80062b4 <ai_log_err>
    return -1;
 8006318:	f04f 33ff 	mov.w	r3, #4294967295
 800631c:	e03e      	b.n	800639c <ai_boostrap+0xa8>
  }

  ai_input = ai_wine_quality_inputs_get(wine_quality, NULL);
 800631e:	4b21      	ldr	r3, [pc, #132]	; (80063a4 <ai_boostrap+0xb0>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2100      	movs	r1, #0
 8006324:	4618      	mov	r0, r3
 8006326:	f000 fb47 	bl	80069b8 <ai_wine_quality_inputs_get>
 800632a:	4603      	mov	r3, r0
 800632c:	4a1f      	ldr	r2, [pc, #124]	; (80063ac <ai_boostrap+0xb8>)
 800632e:	6013      	str	r3, [r2, #0]
  ai_output = ai_wine_quality_outputs_get(wine_quality, NULL);
 8006330:	4b1c      	ldr	r3, [pc, #112]	; (80063a4 <ai_boostrap+0xb0>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2100      	movs	r1, #0
 8006336:	4618      	mov	r0, r3
 8006338:	f000 fb58 	bl	80069ec <ai_wine_quality_outputs_get>
 800633c:	4603      	mov	r3, r0
 800633e:	4a1c      	ldr	r2, [pc, #112]	; (80063b0 <ai_boostrap+0xbc>)
 8006340:	6013      	str	r3, [r2, #0]

#if defined(AI_WINE_QUALITY_INPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-inputs" option is used, memory buffer can be
   *  used from the activations buffer. This is not mandatory.
   */
  for (int idx=0; idx < AI_WINE_QUALITY_IN_NUM; idx++) {
 8006342:	2300      	movs	r3, #0
 8006344:	617b      	str	r3, [r7, #20]
 8006346:	e00f      	b.n	8006368 <ai_boostrap+0x74>
	data_ins[idx] = ai_input[idx].data;
 8006348:	4b18      	ldr	r3, [pc, #96]	; (80063ac <ai_boostrap+0xb8>)
 800634a:	6819      	ldr	r1, [r3, #0]
 800634c:	697a      	ldr	r2, [r7, #20]
 800634e:	4613      	mov	r3, r2
 8006350:	00db      	lsls	r3, r3, #3
 8006352:	1a9b      	subs	r3, r3, r2
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	440b      	add	r3, r1
 8006358:	685a      	ldr	r2, [r3, #4]
 800635a:	4916      	ldr	r1, [pc, #88]	; (80063b4 <ai_boostrap+0xc0>)
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_WINE_QUALITY_IN_NUM; idx++) {
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	3301      	adds	r3, #1
 8006366:	617b      	str	r3, [r7, #20]
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	2b00      	cmp	r3, #0
 800636c:	ddec      	ble.n	8006348 <ai_boostrap+0x54>

#if defined(AI_WINE_QUALITY_OUTPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-outputs" option is used, memory buffer can be
   *  used from the activations buffer. This is no mandatory.
   */
  for (int idx=0; idx < AI_WINE_QUALITY_OUT_NUM; idx++) {
 800636e:	2300      	movs	r3, #0
 8006370:	613b      	str	r3, [r7, #16]
 8006372:	e00f      	b.n	8006394 <ai_boostrap+0xa0>
	data_outs[idx] = ai_output[idx].data;
 8006374:	4b0e      	ldr	r3, [pc, #56]	; (80063b0 <ai_boostrap+0xbc>)
 8006376:	6819      	ldr	r1, [r3, #0]
 8006378:	693a      	ldr	r2, [r7, #16]
 800637a:	4613      	mov	r3, r2
 800637c:	00db      	lsls	r3, r3, #3
 800637e:	1a9b      	subs	r3, r3, r2
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	440b      	add	r3, r1
 8006384:	685a      	ldr	r2, [r3, #4]
 8006386:	490c      	ldr	r1, [pc, #48]	; (80063b8 <ai_boostrap+0xc4>)
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_WINE_QUALITY_OUT_NUM; idx++) {
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	3301      	adds	r3, #1
 8006392:	613b      	str	r3, [r7, #16]
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	2b00      	cmp	r3, #0
 8006398:	ddec      	ble.n	8006374 <ai_boostrap+0x80>
  for (int idx=0; idx < AI_WINE_QUALITY_OUT_NUM; idx++) {
	ai_output[idx].data = data_outs[idx];
  }
#endif

  return 0;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	3718      	adds	r7, #24
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	20000f18 	.word	0x20000f18
 80063a8:	0800a024 	.word	0x0800a024
 80063ac:	20000f1c 	.word	0x20000f1c
 80063b0:	20000f20 	.word	0x20000f20
 80063b4:	20000cb4 	.word	0x20000cb4
 80063b8:	20000cb8 	.word	0x20000cb8

080063bc <ai_run>:

static int ai_run(void)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
  ai_i32 batch;

  batch = ai_wine_quality_run(wine_quality, ai_input, ai_output);
 80063c2:	4b0f      	ldr	r3, [pc, #60]	; (8006400 <ai_run+0x44>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a0f      	ldr	r2, [pc, #60]	; (8006404 <ai_run+0x48>)
 80063c8:	6811      	ldr	r1, [r2, #0]
 80063ca:	4a0f      	ldr	r2, [pc, #60]	; (8006408 <ai_run+0x4c>)
 80063cc:	6812      	ldr	r2, [r2, #0]
 80063ce:	4618      	mov	r0, r3
 80063d0:	f000 fb62 	bl	8006a98 <ai_wine_quality_run>
 80063d4:	6078      	str	r0, [r7, #4]
  if (batch != 1) {
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d00c      	beq.n	80063f6 <ai_run+0x3a>
    ai_log_err(ai_wine_quality_get_error(wine_quality),
 80063dc:	4b08      	ldr	r3, [pc, #32]	; (8006400 <ai_run+0x44>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4618      	mov	r0, r3
 80063e2:	f000 fa53 	bl	800688c <ai_wine_quality_get_error>
 80063e6:	4603      	mov	r3, r0
 80063e8:	4908      	ldr	r1, [pc, #32]	; (800640c <ai_run+0x50>)
 80063ea:	4618      	mov	r0, r3
 80063ec:	f7ff ff62 	bl	80062b4 <ai_log_err>
        "ai_wine_quality_run");
    return -1;
 80063f0:	f04f 33ff 	mov.w	r3, #4294967295
 80063f4:	e000      	b.n	80063f8 <ai_run+0x3c>
  }

  return 0;
 80063f6:	2300      	movs	r3, #0
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3708      	adds	r7, #8
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	20000f18 	.word	0x20000f18
 8006404:	20000f1c 	.word	0x20000f1c
 8006408:	20000f20 	.word	0x20000f20
 800640c:	0800a044 	.word	0x0800a044

08006410 <acquire_and_process_data>:

/* USER CODE BEGIN 2 */
int acquire_and_process_data(ai_i8* data[])
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b086      	sub	sp, #24
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 /* fill the inputs of the c-model */
	uint8_t tmp[4] = {0};
 8006418:	2300      	movs	r3, #0
 800641a:	60fb      	str	r3, [r7, #12]
	#if _DEBUG
	float input[12] = {0}; // Stocker les valeurs d'entrée en mode Debug
	#endif

	  int i,k;
	  for (i = 0; i < 13; i++){
 800641c:	2300      	movs	r3, #0
 800641e:	617b      	str	r3, [r7, #20]
 8006420:	e01f      	b.n	8006462 <acquire_and_process_data+0x52>
		  HAL_UART_Receive(&huart2, (uint8_t *) tmp, sizeof(tmp), 100);
 8006422:	f107 010c 	add.w	r1, r7, #12
 8006426:	2364      	movs	r3, #100	; 0x64
 8006428:	2204      	movs	r2, #4
 800642a:	4812      	ldr	r0, [pc, #72]	; (8006474 <acquire_and_process_data+0x64>)
 800642c:	f7fe ff3a 	bl	80052a4 <HAL_UART_Receive>
	#if _DEBUG
	input[i] = *(float*) &tmp;
	#endif

	// Copier les bytes reçus dans le tableau de données
		  for ( k = 0; k < 4; k++){
 8006430:	2300      	movs	r3, #0
 8006432:	613b      	str	r3, [r7, #16]
 8006434:	e00f      	b.n	8006456 <acquire_and_process_data+0x46>
			((uint8_t *) data)[((i*8)*4)+k] = tmp[k];
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	015a      	lsls	r2, r3, #5
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	4413      	add	r3, r2
 800643e:	461a      	mov	r2, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4413      	add	r3, r2
 8006444:	f107 010c 	add.w	r1, r7, #12
 8006448:	693a      	ldr	r2, [r7, #16]
 800644a:	440a      	add	r2, r1
 800644c:	7812      	ldrb	r2, [r2, #0]
 800644e:	701a      	strb	r2, [r3, #0]
		  for ( k = 0; k < 4; k++){
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	3301      	adds	r3, #1
 8006454:	613b      	str	r3, [r7, #16]
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	2b03      	cmp	r3, #3
 800645a:	ddec      	ble.n	8006436 <acquire_and_process_data+0x26>
	  for (i = 0; i < 13; i++){
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	3301      	adds	r3, #1
 8006460:	617b      	str	r3, [r7, #20]
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	2b0c      	cmp	r3, #12
 8006466:	dddc      	ble.n	8006422 <acquire_and_process_data+0x12>
		HAL_UART_Transmit(&huart2, (uint8_t *) tmp, sizeof(tmp), 100);
	}

	#endif

	  return 0;
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	3718      	adds	r7, #24
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	20000b2c 	.word	0x20000b2c

08006478 <post_process>:

int post_process(ai_i8* data[])
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b086      	sub	sp, #24
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
/* process the predictions */
	  unsigned char output_to_be_tx[3] = "101";
 8006480:	4a22      	ldr	r2, [pc, #136]	; (800650c <post_process+0x94>)
 8006482:	f107 030c 	add.w	r3, r7, #12
 8006486:	6812      	ldr	r2, [r2, #0]
 8006488:	4611      	mov	r1, r2
 800648a:	8019      	strh	r1, [r3, #0]
 800648c:	3302      	adds	r3, #2
 800648e:	0c12      	lsrs	r2, r2, #16
 8006490:	701a      	strb	r2, [r3, #0]
	  uint8_t *output = data; // don't care about the signed value of ai_i8...
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	613b      	str	r3, [r7, #16]
	  int i;

	  uint8_t tmp[4] = {0};
 8006496:	2300      	movs	r3, #0
 8006498:	60bb      	str	r3, [r7, #8]

	  for (i=0; i < 4; i++){
 800649a:	2300      	movs	r3, #0
 800649c:	617b      	str	r3, [r7, #20]
 800649e:	e00c      	b.n	80064ba <post_process+0x42>
		  tmp[i] = output[i];
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	693a      	ldr	r2, [r7, #16]
 80064a4:	4413      	add	r3, r2
 80064a6:	7819      	ldrb	r1, [r3, #0]
 80064a8:	f107 0208 	add.w	r2, r7, #8
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	4413      	add	r3, r2
 80064b0:	460a      	mov	r2, r1
 80064b2:	701a      	strb	r2, [r3, #0]
	  for (i=0; i < 4; i++){
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	3301      	adds	r3, #1
 80064b8:	617b      	str	r3, [r7, #20]
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	2b03      	cmp	r3, #3
 80064be:	ddef      	ble.n	80064a0 <post_process+0x28>
	#ifdef _DEBUG
	  float predicted_quality = *(float*) &tmp;
	  printf("Predicted quality: %f\n", predicted_quality)
	#endif

	HAL_UART_Transmit(&huart2, (uint8_t *) output_to_be_tx, sizeof(output_to_be_tx),100);
 80064c0:	f107 010c 	add.w	r1, r7, #12
 80064c4:	2364      	movs	r3, #100	; 0x64
 80064c6:	2203      	movs	r2, #3
 80064c8:	4811      	ldr	r0, [pc, #68]	; (8006510 <post_process+0x98>)
 80064ca:	f7fe fe5c 	bl	8005186 <HAL_UART_Transmit>

	for (i=0; i < 4; i++){
 80064ce:	2300      	movs	r3, #0
 80064d0:	617b      	str	r3, [r7, #20]
 80064d2:	e00c      	b.n	80064ee <post_process+0x76>
		tmp[i] = output[i];
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	693a      	ldr	r2, [r7, #16]
 80064d8:	4413      	add	r3, r2
 80064da:	7819      	ldrb	r1, [r3, #0]
 80064dc:	f107 0208 	add.w	r2, r7, #8
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	4413      	add	r3, r2
 80064e4:	460a      	mov	r2, r1
 80064e6:	701a      	strb	r2, [r3, #0]
	for (i=0; i < 4; i++){
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	3301      	adds	r3, #1
 80064ec:	617b      	str	r3, [r7, #20]
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	2b03      	cmp	r3, #3
 80064f2:	ddef      	ble.n	80064d4 <post_process+0x5c>
	}
	HAL_UART_Transmit(&huart2, (uint8_t *) tmp, sizeof(tmp), 100);
 80064f4:	f107 0108 	add.w	r1, r7, #8
 80064f8:	2364      	movs	r3, #100	; 0x64
 80064fa:	2204      	movs	r2, #4
 80064fc:	4804      	ldr	r0, [pc, #16]	; (8006510 <post_process+0x98>)
 80064fe:	f7fe fe42 	bl	8005186 <HAL_UART_Transmit>
	  return 0;
 8006502:	2300      	movs	r3, #0
}
 8006504:	4618      	mov	r0, r3
 8006506:	3718      	adds	r7, #24
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}
 800650c:	0800a058 	.word	0x0800a058
 8006510:	20000b2c 	.word	0x20000b2c

08006514 <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 8006518:	4803      	ldr	r0, [pc, #12]	; (8006528 <MX_X_CUBE_AI_Init+0x14>)
 800651a:	f002 fc8d 	bl	8008e38 <puts>

  ai_boostrap(data_activations0);
 800651e:	4803      	ldr	r0, [pc, #12]	; (800652c <MX_X_CUBE_AI_Init+0x18>)
 8006520:	f7ff fee8 	bl	80062f4 <ai_boostrap>
    /* USER CODE END 5 */
}
 8006524:	bf00      	nop
 8006526:	bd80      	pop	{r7, pc}
 8006528:	0800a05c 	.word	0x0800a05c
 800652c:	2000000c 	.word	0x2000000c

08006530 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b086      	sub	sp, #24
 8006534:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 6 */
  int res = -1;
 8006536:	f04f 33ff 	mov.w	r3, #4294967295
 800653a:	617b      	str	r3, [r7, #20]
  uint8_t *in_data = NULL;
 800653c:	2300      	movs	r3, #0
 800653e:	613b      	str	r3, [r7, #16]
  uint8_t *out_data = NULL;
 8006540:	2300      	movs	r3, #0
 8006542:	60fb      	str	r3, [r7, #12]
  printf("TEMPLATE - run - main loop\r\n");
 8006544:	4828      	ldr	r0, [pc, #160]	; (80065e8 <MX_X_CUBE_AI_Process+0xb8>)
 8006546:	f002 fc77 	bl	8008e38 <puts>

  char test[3] = "101";
 800654a:	4a28      	ldr	r2, [pc, #160]	; (80065ec <MX_X_CUBE_AI_Process+0xbc>)
 800654c:	f107 0308 	add.w	r3, r7, #8
 8006550:	6812      	ldr	r2, [r2, #0]
 8006552:	4611      	mov	r1, r2
 8006554:	8019      	strh	r1, [r3, #0]
 8006556:	3302      	adds	r3, #2
 8006558:	0c12      	lsrs	r2, r2, #16
 800655a:	701a      	strb	r2, [r3, #0]
  char Rx[2];

  if (wine_quality) {
 800655c:	4b24      	ldr	r3, [pc, #144]	; (80065f0 <MX_X_CUBE_AI_Process+0xc0>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d02e      	beq.n	80065c2 <MX_X_CUBE_AI_Process+0x92>
  // set pointer on NN buffer
	#if defined(AI_WINE_QUALITY_INPUTS_IN_ACTIVATIONS)
	  in_data = ai_input[0].data;
 8006564:	4b23      	ldr	r3, [pc, #140]	; (80065f4 <MX_X_CUBE_AI_Process+0xc4>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	613b      	str	r3, [r7, #16]
	#else
	  in_data = in_data_s;
	#endif

	#if defined(AI_WINE_QUALITY_OUTPUTS_IN_ACTIVATIONS)
	  out_data = ai_output[0].data;
 800656c:	4b22      	ldr	r3, [pc, #136]	; (80065f8 <MX_X_CUBE_AI_Process+0xc8>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	60fb      	str	r3, [r7, #12]
	#else
	  out_data = out_data_s;
	#endif

    do {
    	HAL_UART_Receive(&huart2, (uint8_t *) Rx, sizeof(Rx), 100);
 8006574:	1d39      	adds	r1, r7, #4
 8006576:	2364      	movs	r3, #100	; 0x64
 8006578:	2202      	movs	r2, #2
 800657a:	4820      	ldr	r0, [pc, #128]	; (80065fc <MX_X_CUBE_AI_Process+0xcc>)
 800657c:	f7fe fe92 	bl	80052a4 <HAL_UART_Receive>

    	if (Rx[1] == 'o' && Rx[0] == 'k'){
 8006580:	797b      	ldrb	r3, [r7, #5]
 8006582:	2b6f      	cmp	r3, #111	; 0x6f
 8006584:	d109      	bne.n	800659a <MX_X_CUBE_AI_Process+0x6a>
 8006586:	793b      	ldrb	r3, [r7, #4]
 8006588:	2b6b      	cmp	r3, #107	; 0x6b
 800658a:	d106      	bne.n	800659a <MX_X_CUBE_AI_Process+0x6a>
    		HAL_UART_Transmit(&huart2, (uint8_t *) test, sizeof(test), 100);
 800658c:	f107 0108 	add.w	r1, r7, #8
 8006590:	2364      	movs	r3, #100	; 0x64
 8006592:	2203      	movs	r2, #3
 8006594:	4819      	ldr	r0, [pc, #100]	; (80065fc <MX_X_CUBE_AI_Process+0xcc>)
 8006596:	f7fe fdf6 	bl	8005186 <HAL_UART_Transmit>
    	}
      /* 1 - acquire and pre-process input data */
      res = acquire_and_process_data(data_ins);
 800659a:	4819      	ldr	r0, [pc, #100]	; (8006600 <MX_X_CUBE_AI_Process+0xd0>)
 800659c:	f7ff ff38 	bl	8006410 <acquire_and_process_data>
 80065a0:	6178      	str	r0, [r7, #20]
      /* 2 - process the data - call inference engine */
      if (res == 0)
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d102      	bne.n	80065ae <MX_X_CUBE_AI_Process+0x7e>
        res = ai_run();
 80065a8:	f7ff ff08 	bl	80063bc <ai_run>
 80065ac:	6178      	str	r0, [r7, #20]
      /* 3- post-process the predictions */
      if (res == 0)
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d103      	bne.n	80065bc <MX_X_CUBE_AI_Process+0x8c>
        res = post_process(data_outs);
 80065b4:	4813      	ldr	r0, [pc, #76]	; (8006604 <MX_X_CUBE_AI_Process+0xd4>)
 80065b6:	f7ff ff5f 	bl	8006478 <post_process>
 80065ba:	6178      	str	r0, [r7, #20]
    } while (res==0);
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d0d8      	beq.n	8006574 <MX_X_CUBE_AI_Process+0x44>
  }

  if (res) {
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d00a      	beq.n	80065de <MX_X_CUBE_AI_Process+0xae>
    ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
 80065c8:	2311      	movs	r3, #17
 80065ca:	703b      	strb	r3, [r7, #0]
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	2210      	movs	r2, #16
 80065d0:	f362 231f 	bfi	r3, r2, #8, #24
 80065d4:	603b      	str	r3, [r7, #0]
    ai_log_err(err, "Process has FAILED");
 80065d6:	490c      	ldr	r1, [pc, #48]	; (8006608 <MX_X_CUBE_AI_Process+0xd8>)
 80065d8:	6838      	ldr	r0, [r7, #0]
 80065da:	f7ff fe6b 	bl	80062b4 <ai_log_err>
  }
    /* USER CODE END 6 */
}
 80065de:	bf00      	nop
 80065e0:	3718      	adds	r7, #24
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	0800a07c 	.word	0x0800a07c
 80065ec:	0800a058 	.word	0x0800a058
 80065f0:	20000f18 	.word	0x20000f18
 80065f4:	20000f1c 	.word	0x20000f1c
 80065f8:	20000f20 	.word	0x20000f20
 80065fc:	20000b2c 	.word	0x20000b2c
 8006600:	20000cb4 	.word	0x20000cb4
 8006604:	20000cb8 	.word	0x20000cb8
 8006608:	0800a098 	.word	0x0800a098

0800660c <wine_quality_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool wine_quality_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b082      	sub	sp, #8
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_wine_quality_activations_map, 1, params)) {
 8006616:	683a      	ldr	r2, [r7, #0]
 8006618:	2101      	movs	r1, #1
 800661a:	4833      	ldr	r0, [pc, #204]	; (80066e8 <wine_quality_configure_activations+0xdc>)
 800661c:	f000 fb1a 	bl	8006c54 <ai_platform_get_activations_map>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d055      	beq.n	80066d2 <wine_quality_configure_activations+0xc6>
    /* Updating activations (byte) offsets */
    
    input_0_output_array.data = AI_PTR(g_wine_quality_activations_map[0] + 152);
 8006626:	4b30      	ldr	r3, [pc, #192]	; (80066e8 <wine_quality_configure_activations+0xdc>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	3398      	adds	r3, #152	; 0x98
 800662c:	4a2f      	ldr	r2, [pc, #188]	; (80066ec <wine_quality_configure_activations+0xe0>)
 800662e:	6093      	str	r3, [r2, #8]
    input_0_output_array.data_start = AI_PTR(g_wine_quality_activations_map[0] + 152);
 8006630:	4b2d      	ldr	r3, [pc, #180]	; (80066e8 <wine_quality_configure_activations+0xdc>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	3398      	adds	r3, #152	; 0x98
 8006636:	4a2d      	ldr	r2, [pc, #180]	; (80066ec <wine_quality_configure_activations+0xe0>)
 8006638:	60d3      	str	r3, [r2, #12]
    
    dense_4_dense_output_array.data = AI_PTR(g_wine_quality_activations_map[0] + 200);
 800663a:	4b2b      	ldr	r3, [pc, #172]	; (80066e8 <wine_quality_configure_activations+0xdc>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	33c8      	adds	r3, #200	; 0xc8
 8006640:	4a2b      	ldr	r2, [pc, #172]	; (80066f0 <wine_quality_configure_activations+0xe4>)
 8006642:	6093      	str	r3, [r2, #8]
    dense_4_dense_output_array.data_start = AI_PTR(g_wine_quality_activations_map[0] + 200);
 8006644:	4b28      	ldr	r3, [pc, #160]	; (80066e8 <wine_quality_configure_activations+0xdc>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	33c8      	adds	r3, #200	; 0xc8
 800664a:	4a29      	ldr	r2, [pc, #164]	; (80066f0 <wine_quality_configure_activations+0xe4>)
 800664c:	60d3      	str	r3, [r2, #12]
    
    dense_4_output_array.data = AI_PTR(g_wine_quality_activations_map[0] + 200);
 800664e:	4b26      	ldr	r3, [pc, #152]	; (80066e8 <wine_quality_configure_activations+0xdc>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	33c8      	adds	r3, #200	; 0xc8
 8006654:	4a27      	ldr	r2, [pc, #156]	; (80066f4 <wine_quality_configure_activations+0xe8>)
 8006656:	6093      	str	r3, [r2, #8]
    dense_4_output_array.data_start = AI_PTR(g_wine_quality_activations_map[0] + 200);
 8006658:	4b23      	ldr	r3, [pc, #140]	; (80066e8 <wine_quality_configure_activations+0xdc>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	33c8      	adds	r3, #200	; 0xc8
 800665e:	4a25      	ldr	r2, [pc, #148]	; (80066f4 <wine_quality_configure_activations+0xe8>)
 8006660:	60d3      	str	r3, [r2, #12]
    
    dense_5_dense_output_array.data = AI_PTR(g_wine_quality_activations_map[0] + 0);
 8006662:	4b21      	ldr	r3, [pc, #132]	; (80066e8 <wine_quality_configure_activations+0xdc>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a24      	ldr	r2, [pc, #144]	; (80066f8 <wine_quality_configure_activations+0xec>)
 8006668:	6093      	str	r3, [r2, #8]
    dense_5_dense_output_array.data_start = AI_PTR(g_wine_quality_activations_map[0] + 0);
 800666a:	4b1f      	ldr	r3, [pc, #124]	; (80066e8 <wine_quality_configure_activations+0xdc>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a22      	ldr	r2, [pc, #136]	; (80066f8 <wine_quality_configure_activations+0xec>)
 8006670:	60d3      	str	r3, [r2, #12]
    
    dense_5_output_array.data = AI_PTR(g_wine_quality_activations_map[0] + 200);
 8006672:	4b1d      	ldr	r3, [pc, #116]	; (80066e8 <wine_quality_configure_activations+0xdc>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	33c8      	adds	r3, #200	; 0xc8
 8006678:	4a20      	ldr	r2, [pc, #128]	; (80066fc <wine_quality_configure_activations+0xf0>)
 800667a:	6093      	str	r3, [r2, #8]
    dense_5_output_array.data_start = AI_PTR(g_wine_quality_activations_map[0] + 200);
 800667c:	4b1a      	ldr	r3, [pc, #104]	; (80066e8 <wine_quality_configure_activations+0xdc>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	33c8      	adds	r3, #200	; 0xc8
 8006682:	4a1e      	ldr	r2, [pc, #120]	; (80066fc <wine_quality_configure_activations+0xf0>)
 8006684:	60d3      	str	r3, [r2, #12]
    
    dense_6_dense_output_array.data = AI_PTR(g_wine_quality_activations_map[0] + 0);
 8006686:	4b18      	ldr	r3, [pc, #96]	; (80066e8 <wine_quality_configure_activations+0xdc>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a1d      	ldr	r2, [pc, #116]	; (8006700 <wine_quality_configure_activations+0xf4>)
 800668c:	6093      	str	r3, [r2, #8]
    dense_6_dense_output_array.data_start = AI_PTR(g_wine_quality_activations_map[0] + 0);
 800668e:	4b16      	ldr	r3, [pc, #88]	; (80066e8 <wine_quality_configure_activations+0xdc>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a1b      	ldr	r2, [pc, #108]	; (8006700 <wine_quality_configure_activations+0xf4>)
 8006694:	60d3      	str	r3, [r2, #12]
    
    dense_6_output_array.data = AI_PTR(g_wine_quality_activations_map[0] + 100);
 8006696:	4b14      	ldr	r3, [pc, #80]	; (80066e8 <wine_quality_configure_activations+0xdc>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	3364      	adds	r3, #100	; 0x64
 800669c:	4a19      	ldr	r2, [pc, #100]	; (8006704 <wine_quality_configure_activations+0xf8>)
 800669e:	6093      	str	r3, [r2, #8]
    dense_6_output_array.data_start = AI_PTR(g_wine_quality_activations_map[0] + 100);
 80066a0:	4b11      	ldr	r3, [pc, #68]	; (80066e8 <wine_quality_configure_activations+0xdc>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	3364      	adds	r3, #100	; 0x64
 80066a6:	4a17      	ldr	r2, [pc, #92]	; (8006704 <wine_quality_configure_activations+0xf8>)
 80066a8:	60d3      	str	r3, [r2, #12]
    
    dense_7_dense_output_array.data = AI_PTR(g_wine_quality_activations_map[0] + 0);
 80066aa:	4b0f      	ldr	r3, [pc, #60]	; (80066e8 <wine_quality_configure_activations+0xdc>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a16      	ldr	r2, [pc, #88]	; (8006708 <wine_quality_configure_activations+0xfc>)
 80066b0:	6093      	str	r3, [r2, #8]
    dense_7_dense_output_array.data_start = AI_PTR(g_wine_quality_activations_map[0] + 0);
 80066b2:	4b0d      	ldr	r3, [pc, #52]	; (80066e8 <wine_quality_configure_activations+0xdc>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a14      	ldr	r2, [pc, #80]	; (8006708 <wine_quality_configure_activations+0xfc>)
 80066b8:	60d3      	str	r3, [r2, #12]
    
    dense_7_output_array.data = AI_PTR(g_wine_quality_activations_map[0] + 28);
 80066ba:	4b0b      	ldr	r3, [pc, #44]	; (80066e8 <wine_quality_configure_activations+0xdc>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	331c      	adds	r3, #28
 80066c0:	4a12      	ldr	r2, [pc, #72]	; (800670c <wine_quality_configure_activations+0x100>)
 80066c2:	6093      	str	r3, [r2, #8]
    dense_7_output_array.data_start = AI_PTR(g_wine_quality_activations_map[0] + 28);
 80066c4:	4b08      	ldr	r3, [pc, #32]	; (80066e8 <wine_quality_configure_activations+0xdc>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	331c      	adds	r3, #28
 80066ca:	4a10      	ldr	r2, [pc, #64]	; (800670c <wine_quality_configure_activations+0x100>)
 80066cc:	60d3      	str	r3, [r2, #12]
    
    return true;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e005      	b.n	80066de <wine_quality_configure_activations+0xd2>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 80066d2:	2213      	movs	r2, #19
 80066d4:	2130      	movs	r1, #48	; 0x30
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 fba0 	bl	8006e1c <ai_platform_network_set_error>
  return false;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3708      	adds	r7, #8
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	20000f24 	.word	0x20000f24
 80066ec:	20000010 	.word	0x20000010
 80066f0:	20000030 	.word	0x20000030
 80066f4:	20000040 	.word	0x20000040
 80066f8:	20000060 	.word	0x20000060
 80066fc:	20000080 	.word	0x20000080
 8006700:	20000090 	.word	0x20000090
 8006704:	200000a0 	.word	0x200000a0
 8006708:	200000b0 	.word	0x200000b0
 800670c:	200000c0 	.word	0x200000c0

08006710 <wine_quality_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool wine_quality_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_wine_quality_weights_map, 1, params)) {
 800671a:	683a      	ldr	r2, [r7, #0]
 800671c:	2101      	movs	r1, #1
 800671e:	4852      	ldr	r0, [pc, #328]	; (8006868 <wine_quality_configure_weights+0x158>)
 8006720:	f000 fa44 	bl	8006bac <ai_platform_get_weights_map>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	f000 8094 	beq.w	8006854 <wine_quality_configure_weights+0x144>
    /* Updating weights (byte) offsets */
    
    dense_6_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800672c:	4b4f      	ldr	r3, [pc, #316]	; (800686c <wine_quality_configure_weights+0x15c>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006734:	4a4d      	ldr	r2, [pc, #308]	; (800686c <wine_quality_configure_weights+0x15c>)
 8006736:	6013      	str	r3, [r2, #0]
    dense_6_dense_bias_array.data = AI_PTR(g_wine_quality_weights_map[0] + 0);
 8006738:	4b4b      	ldr	r3, [pc, #300]	; (8006868 <wine_quality_configure_weights+0x158>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a4b      	ldr	r2, [pc, #300]	; (800686c <wine_quality_configure_weights+0x15c>)
 800673e:	6093      	str	r3, [r2, #8]
    dense_6_dense_bias_array.data_start = AI_PTR(g_wine_quality_weights_map[0] + 0);
 8006740:	4b49      	ldr	r3, [pc, #292]	; (8006868 <wine_quality_configure_weights+0x158>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a49      	ldr	r2, [pc, #292]	; (800686c <wine_quality_configure_weights+0x15c>)
 8006746:	60d3      	str	r3, [r2, #12]
    
    dense_7_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8006748:	4b49      	ldr	r3, [pc, #292]	; (8006870 <wine_quality_configure_weights+0x160>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006750:	4a47      	ldr	r2, [pc, #284]	; (8006870 <wine_quality_configure_weights+0x160>)
 8006752:	6013      	str	r3, [r2, #0]
    dense_7_dense_weights_array.data = AI_PTR(g_wine_quality_weights_map[0] + 100);
 8006754:	4b44      	ldr	r3, [pc, #272]	; (8006868 <wine_quality_configure_weights+0x158>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	3364      	adds	r3, #100	; 0x64
 800675a:	4a45      	ldr	r2, [pc, #276]	; (8006870 <wine_quality_configure_weights+0x160>)
 800675c:	6093      	str	r3, [r2, #8]
    dense_7_dense_weights_array.data_start = AI_PTR(g_wine_quality_weights_map[0] + 100);
 800675e:	4b42      	ldr	r3, [pc, #264]	; (8006868 <wine_quality_configure_weights+0x158>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	3364      	adds	r3, #100	; 0x64
 8006764:	4a42      	ldr	r2, [pc, #264]	; (8006870 <wine_quality_configure_weights+0x160>)
 8006766:	60d3      	str	r3, [r2, #12]
    
    dense_7_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8006768:	4b42      	ldr	r3, [pc, #264]	; (8006874 <wine_quality_configure_weights+0x164>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006770:	4a40      	ldr	r2, [pc, #256]	; (8006874 <wine_quality_configure_weights+0x164>)
 8006772:	6013      	str	r3, [r2, #0]
    dense_7_dense_bias_array.data = AI_PTR(g_wine_quality_weights_map[0] + 800);
 8006774:	4b3c      	ldr	r3, [pc, #240]	; (8006868 <wine_quality_configure_weights+0x158>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f503 7348 	add.w	r3, r3, #800	; 0x320
 800677c:	4a3d      	ldr	r2, [pc, #244]	; (8006874 <wine_quality_configure_weights+0x164>)
 800677e:	6093      	str	r3, [r2, #8]
    dense_7_dense_bias_array.data_start = AI_PTR(g_wine_quality_weights_map[0] + 800);
 8006780:	4b39      	ldr	r3, [pc, #228]	; (8006868 <wine_quality_configure_weights+0x158>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8006788:	4a3a      	ldr	r2, [pc, #232]	; (8006874 <wine_quality_configure_weights+0x164>)
 800678a:	60d3      	str	r3, [r2, #12]
    
    dense_4_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800678c:	4b3a      	ldr	r3, [pc, #232]	; (8006878 <wine_quality_configure_weights+0x168>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006794:	4a38      	ldr	r2, [pc, #224]	; (8006878 <wine_quality_configure_weights+0x168>)
 8006796:	6013      	str	r3, [r2, #0]
    dense_4_dense_weights_array.data = AI_PTR(g_wine_quality_weights_map[0] + 828);
 8006798:	4b33      	ldr	r3, [pc, #204]	; (8006868 <wine_quality_configure_weights+0x158>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 80067a0:	4a35      	ldr	r2, [pc, #212]	; (8006878 <wine_quality_configure_weights+0x168>)
 80067a2:	6093      	str	r3, [r2, #8]
    dense_4_dense_weights_array.data_start = AI_PTR(g_wine_quality_weights_map[0] + 828);
 80067a4:	4b30      	ldr	r3, [pc, #192]	; (8006868 <wine_quality_configure_weights+0x158>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 80067ac:	4a32      	ldr	r2, [pc, #200]	; (8006878 <wine_quality_configure_weights+0x168>)
 80067ae:	60d3      	str	r3, [r2, #12]
    
    dense_4_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 80067b0:	4b32      	ldr	r3, [pc, #200]	; (800687c <wine_quality_configure_weights+0x16c>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067b8:	4a30      	ldr	r2, [pc, #192]	; (800687c <wine_quality_configure_weights+0x16c>)
 80067ba:	6013      	str	r3, [r2, #0]
    dense_4_dense_bias_array.data = AI_PTR(g_wine_quality_weights_map[0] + 5628);
 80067bc:	4b2a      	ldr	r3, [pc, #168]	; (8006868 <wine_quality_configure_weights+0x158>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f503 53af 	add.w	r3, r3, #5600	; 0x15e0
 80067c4:	331c      	adds	r3, #28
 80067c6:	4a2d      	ldr	r2, [pc, #180]	; (800687c <wine_quality_configure_weights+0x16c>)
 80067c8:	6093      	str	r3, [r2, #8]
    dense_4_dense_bias_array.data_start = AI_PTR(g_wine_quality_weights_map[0] + 5628);
 80067ca:	4b27      	ldr	r3, [pc, #156]	; (8006868 <wine_quality_configure_weights+0x158>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f503 53af 	add.w	r3, r3, #5600	; 0x15e0
 80067d2:	331c      	adds	r3, #28
 80067d4:	4a29      	ldr	r2, [pc, #164]	; (800687c <wine_quality_configure_weights+0x16c>)
 80067d6:	60d3      	str	r3, [r2, #12]
    
    dense_5_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 80067d8:	4b29      	ldr	r3, [pc, #164]	; (8006880 <wine_quality_configure_weights+0x170>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067e0:	4a27      	ldr	r2, [pc, #156]	; (8006880 <wine_quality_configure_weights+0x170>)
 80067e2:	6013      	str	r3, [r2, #0]
    dense_5_dense_weights_array.data = AI_PTR(g_wine_quality_weights_map[0] + 6028);
 80067e4:	4b20      	ldr	r3, [pc, #128]	; (8006868 <wine_quality_configure_weights+0x158>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 80067ec:	330c      	adds	r3, #12
 80067ee:	4a24      	ldr	r2, [pc, #144]	; (8006880 <wine_quality_configure_weights+0x170>)
 80067f0:	6093      	str	r3, [r2, #8]
    dense_5_dense_weights_array.data_start = AI_PTR(g_wine_quality_weights_map[0] + 6028);
 80067f2:	4b1d      	ldr	r3, [pc, #116]	; (8006868 <wine_quality_configure_weights+0x158>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 80067fa:	330c      	adds	r3, #12
 80067fc:	4a20      	ldr	r2, [pc, #128]	; (8006880 <wine_quality_configure_weights+0x170>)
 80067fe:	60d3      	str	r3, [r2, #12]
    
    dense_5_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8006800:	4b20      	ldr	r3, [pc, #128]	; (8006884 <wine_quality_configure_weights+0x174>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006808:	4a1e      	ldr	r2, [pc, #120]	; (8006884 <wine_quality_configure_weights+0x174>)
 800680a:	6013      	str	r3, [r2, #0]
    dense_5_dense_bias_array.data = AI_PTR(g_wine_quality_weights_map[0] + 26028);
 800680c:	4b16      	ldr	r3, [pc, #88]	; (8006868 <wine_quality_configure_weights+0x158>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f503 43cb 	add.w	r3, r3, #25984	; 0x6580
 8006814:	332c      	adds	r3, #44	; 0x2c
 8006816:	4a1b      	ldr	r2, [pc, #108]	; (8006884 <wine_quality_configure_weights+0x174>)
 8006818:	6093      	str	r3, [r2, #8]
    dense_5_dense_bias_array.data_start = AI_PTR(g_wine_quality_weights_map[0] + 26028);
 800681a:	4b13      	ldr	r3, [pc, #76]	; (8006868 <wine_quality_configure_weights+0x158>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f503 43cb 	add.w	r3, r3, #25984	; 0x6580
 8006822:	332c      	adds	r3, #44	; 0x2c
 8006824:	4a17      	ldr	r2, [pc, #92]	; (8006884 <wine_quality_configure_weights+0x174>)
 8006826:	60d3      	str	r3, [r2, #12]
    
    dense_6_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8006828:	4b17      	ldr	r3, [pc, #92]	; (8006888 <wine_quality_configure_weights+0x178>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006830:	4a15      	ldr	r2, [pc, #84]	; (8006888 <wine_quality_configure_weights+0x178>)
 8006832:	6013      	str	r3, [r2, #0]
    dense_6_dense_weights_array.data = AI_PTR(g_wine_quality_weights_map[0] + 26228);
 8006834:	4b0c      	ldr	r3, [pc, #48]	; (8006868 <wine_quality_configure_weights+0x158>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f503 43cc 	add.w	r3, r3, #26112	; 0x6600
 800683c:	3374      	adds	r3, #116	; 0x74
 800683e:	4a12      	ldr	r2, [pc, #72]	; (8006888 <wine_quality_configure_weights+0x178>)
 8006840:	6093      	str	r3, [r2, #8]
    dense_6_dense_weights_array.data_start = AI_PTR(g_wine_quality_weights_map[0] + 26228);
 8006842:	4b09      	ldr	r3, [pc, #36]	; (8006868 <wine_quality_configure_weights+0x158>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f503 43cc 	add.w	r3, r3, #26112	; 0x6600
 800684a:	3374      	adds	r3, #116	; 0x74
 800684c:	4a0e      	ldr	r2, [pc, #56]	; (8006888 <wine_quality_configure_weights+0x178>)
 800684e:	60d3      	str	r3, [r2, #12]
    
    return true;
 8006850:	2301      	movs	r3, #1
 8006852:	e005      	b.n	8006860 <wine_quality_configure_weights+0x150>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8006854:	2212      	movs	r2, #18
 8006856:	2130      	movs	r1, #48	; 0x30
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 fadf 	bl	8006e1c <ai_platform_network_set_error>
  return false;
 800685e:	2300      	movs	r3, #0
}
 8006860:	4618      	mov	r0, r3
 8006862:	3708      	adds	r7, #8
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}
 8006868:	20000f28 	.word	0x20000f28
 800686c:	20000020 	.word	0x20000020
 8006870:	20000050 	.word	0x20000050
 8006874:	20000070 	.word	0x20000070
 8006878:	200000d0 	.word	0x200000d0
 800687c:	200000e0 	.word	0x200000e0
 8006880:	200000f0 	.word	0x200000f0
 8006884:	20000100 	.word	0x20000100
 8006888:	20000110 	.word	0x20000110

0800688c <ai_wine_quality_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_wine_quality_get_error(ai_handle network)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b082      	sub	sp, #8
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 fa53 	bl	8006d40 <ai_platform_network_get_error>
 800689a:	4603      	mov	r3, r0
}
 800689c:	4618      	mov	r0, r3
 800689e:	3708      	adds	r7, #8
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <ai_wine_quality_create>:

AI_API_ENTRY
ai_error ai_wine_quality_create(
  ai_handle* network, const ai_buffer* network_config)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af02      	add	r7, sp, #8
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 80068ae:	2300      	movs	r3, #0
 80068b0:	9301      	str	r3, [sp, #4]
 80068b2:	2305      	movs	r3, #5
 80068b4:	9300      	str	r3, [sp, #0]
 80068b6:	2301      	movs	r3, #1
 80068b8:	4a04      	ldr	r2, [pc, #16]	; (80068cc <ai_wine_quality_create+0x28>)
 80068ba:	6839      	ldr	r1, [r7, #0]
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 fc59 	bl	8007174 <ai_platform_network_create>
 80068c2:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3708      	adds	r7, #8
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	2000087c 	.word	0x2000087c

080068d0 <ai_wine_quality_create_and_init>:

AI_API_ENTRY
ai_error ai_wine_quality_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b096      	sub	sp, #88	; 0x58
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_wine_quality_create(network, AI_WINE_QUALITY_DATA_CONFIG);
 80068dc:	2100      	movs	r1, #0
 80068de:	68f8      	ldr	r0, [r7, #12]
 80068e0:	f7ff ffe0 	bl	80068a4 <ai_wine_quality_create>
 80068e4:	4603      	mov	r3, r0
 80068e6:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 80068e8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d001      	beq.n	80068f4 <ai_wine_quality_create_and_init+0x24>
        return err;
 80068f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068f2:	e05d      	b.n	80069b0 <ai_wine_quality_create_and_init+0xe0>
    if (ai_wine_quality_data_params_get(&params) != true) {
 80068f4:	f107 0314 	add.w	r3, r7, #20
 80068f8:	4618      	mov	r0, r3
 80068fa:	f000 f8dd 	bl	8006ab8 <ai_wine_quality_data_params_get>
 80068fe:	4603      	mov	r3, r0
 8006900:	f083 0301 	eor.w	r3, r3, #1
 8006904:	b2db      	uxtb	r3, r3
 8006906:	2b00      	cmp	r3, #0
 8006908:	d008      	beq.n	800691c <ai_wine_quality_create_and_init+0x4c>
        err = ai_wine_quality_get_error(*network);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4618      	mov	r0, r3
 8006910:	f7ff ffbc 	bl	800688c <ai_wine_quality_get_error>
 8006914:	4603      	mov	r3, r0
 8006916:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 8006918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800691a:	e049      	b.n	80069b0 <ai_wine_quality_create_and_init+0xe0>
    }
#if defined(AI_WINE_QUALITY_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d016      	beq.n	8006950 <ai_wine_quality_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 8006922:	2300      	movs	r3, #0
 8006924:	657b      	str	r3, [r7, #84]	; 0x54
 8006926:	e00e      	b.n	8006946 <ai_wine_quality_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8006928:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800692a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	68ba      	ldr	r2, [r7, #8]
 8006930:	4413      	add	r3, r2
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	f107 0314 	add.w	r3, r7, #20
 8006938:	330c      	adds	r3, #12
 800693a:	4618      	mov	r0, r3
 800693c:	f000 f922 	bl	8006b84 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8006940:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006942:	3301      	adds	r3, #1
 8006944:	657b      	str	r3, [r7, #84]	; 0x54
 8006946:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006948:	461a      	mov	r2, r3
 800694a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800694c:	4293      	cmp	r3, r2
 800694e:	dbeb      	blt.n	8006928 <ai_wine_quality_create_and_init+0x58>
    }
#endif
#if defined(AI_WINE_QUALITY_DATA_WEIGHTS_COUNT)
    if (weights) {
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d016      	beq.n	8006984 <ai_wine_quality_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 8006956:	2300      	movs	r3, #0
 8006958:	653b      	str	r3, [r7, #80]	; 0x50
 800695a:	e00e      	b.n	800697a <ai_wine_quality_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 800695c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800695e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	4413      	add	r3, r2
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	f107 0314 	add.w	r3, r7, #20
 800696c:	3304      	adds	r3, #4
 800696e:	4618      	mov	r0, r3
 8006970:	f000 f908 	bl	8006b84 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8006974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006976:	3301      	adds	r3, #1
 8006978:	653b      	str	r3, [r7, #80]	; 0x50
 800697a:	8b7b      	ldrh	r3, [r7, #26]
 800697c:	461a      	mov	r2, r3
 800697e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006980:	4293      	cmp	r3, r2
 8006982:	dbeb      	blt.n	800695c <ai_wine_quality_create_and_init+0x8c>
    }
#endif
    if (ai_wine_quality_init(*network, &params) != true) {
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f107 0214 	add.w	r2, r7, #20
 800698c:	4611      	mov	r1, r2
 800698e:	4618      	mov	r0, r3
 8006990:	f000 f846 	bl	8006a20 <ai_wine_quality_init>
 8006994:	4603      	mov	r3, r0
 8006996:	f083 0301 	eor.w	r3, r3, #1
 800699a:	b2db      	uxtb	r3, r3
 800699c:	2b00      	cmp	r3, #0
 800699e:	d006      	beq.n	80069ae <ai_wine_quality_create_and_init+0xde>
        err = ai_wine_quality_get_error(*network);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4618      	mov	r0, r3
 80069a6:	f7ff ff71 	bl	800688c <ai_wine_quality_get_error>
 80069aa:	4603      	mov	r3, r0
 80069ac:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 80069ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3758      	adds	r7, #88	; 0x58
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <ai_wine_quality_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_wine_quality_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d104      	bne.n	80069d2 <ai_wine_quality_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 80069c8:	4b06      	ldr	r3, [pc, #24]	; (80069e4 <ai_wine_quality_inputs_get+0x2c>)
 80069ca:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a06      	ldr	r2, [pc, #24]	; (80069e8 <ai_wine_quality_inputs_get+0x30>)
 80069d0:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 80069d2:	6839      	ldr	r1, [r7, #0]
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 fa27 	bl	8006e28 <ai_platform_inputs_get>
 80069da:	4603      	mov	r3, r0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3708      	adds	r7, #8
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}
 80069e4:	2000087c 	.word	0x2000087c
 80069e8:	a1c00100 	.word	0xa1c00100

080069ec <ai_wine_quality_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_wine_quality_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b082      	sub	sp, #8
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d104      	bne.n	8006a06 <ai_wine_quality_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 80069fc:	4b06      	ldr	r3, [pc, #24]	; (8006a18 <ai_wine_quality_outputs_get+0x2c>)
 80069fe:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4a06      	ldr	r2, [pc, #24]	; (8006a1c <ai_wine_quality_outputs_get+0x30>)
 8006a04:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8006a06:	6839      	ldr	r1, [r7, #0]
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 fae3 	bl	8006fd4 <ai_platform_outputs_get>
 8006a0e:	4603      	mov	r3, r0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3708      	adds	r7, #8
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	2000087c 	.word	0x2000087c
 8006a1c:	a1c00100 	.word	0xa1c00100

08006a20 <ai_wine_quality_init>:
}

AI_API_ENTRY
ai_bool ai_wine_quality_init(
  ai_handle network, const ai_network_params* params)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8006a2a:	6839      	ldr	r1, [r7, #0]
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 fc77 	bl	8007320 <ai_platform_network_init>
 8006a32:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d101      	bne.n	8006a3e <ai_wine_quality_init+0x1e>
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	e028      	b.n	8006a90 <ai_wine_quality_init+0x70>

  ai_bool ok = true;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	72fb      	strb	r3, [r7, #11]
  ok &= wine_quality_configure_weights(net_ctx, params);
 8006a42:	6839      	ldr	r1, [r7, #0]
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f7ff fe63 	bl	8006710 <wine_quality_configure_weights>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	7afb      	ldrb	r3, [r7, #11]
 8006a50:	4013      	ands	r3, r2
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	bf14      	ite	ne
 8006a56:	2301      	movne	r3, #1
 8006a58:	2300      	moveq	r3, #0
 8006a5a:	72fb      	strb	r3, [r7, #11]
  ok &= wine_quality_configure_activations(net_ctx, params);
 8006a5c:	6839      	ldr	r1, [r7, #0]
 8006a5e:	68f8      	ldr	r0, [r7, #12]
 8006a60:	f7ff fdd4 	bl	800660c <wine_quality_configure_activations>
 8006a64:	4603      	mov	r3, r0
 8006a66:	461a      	mov	r2, r3
 8006a68:	7afb      	ldrb	r3, [r7, #11]
 8006a6a:	4013      	ands	r3, r2
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	bf14      	ite	ne
 8006a70:	2301      	movne	r3, #1
 8006a72:	2300      	moveq	r3, #0
 8006a74:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 fd40 	bl	80074fc <ai_platform_network_post_init>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	461a      	mov	r2, r3
 8006a80:	7afb      	ldrb	r3, [r7, #11]
 8006a82:	4013      	ands	r3, r2
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	bf14      	ite	ne
 8006a88:	2301      	movne	r3, #1
 8006a8a:	2300      	moveq	r3, #0
 8006a8c:	72fb      	strb	r3, [r7, #11]

  return ok;
 8006a8e:	7afb      	ldrb	r3, [r7, #11]
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3710      	adds	r7, #16
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <ai_wine_quality_run>:


AI_API_ENTRY
ai_i32 ai_wine_quality_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	68b9      	ldr	r1, [r7, #8]
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	f000 fdaf 	bl	800760c <ai_platform_network_process>
 8006aae:	4603      	mov	r3, r0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3710      	adds	r7, #16
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <ai_wine_quality_data_params_get>:
 * @ingroup wine_quality_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_wine_quality_data_params_get(ai_network_params* params)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b086      	sub	sp, #24
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d101      	bne.n	8006aca <ai_wine_quality_data_params_get+0x12>
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	e016      	b.n	8006af8 <ai_wine_quality_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8006aca:	4a0d      	ldr	r2, [pc, #52]	; (8006b00 <ai_wine_quality_data_params_get+0x48>)
 8006acc:	f107 0310 	add.w	r3, r7, #16
 8006ad0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006ad4:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_WINE_QUALITY_DATA_ACTIVATIONS_COUNT, g_wine_quality_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8006ad8:	4a0a      	ldr	r2, [pc, #40]	; (8006b04 <ai_wine_quality_data_params_get+0x4c>)
 8006ada:	f107 0308 	add.w	r3, r7, #8
 8006ade:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006ae2:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_WINE_QUALITY_DATA_WEIGHTS_COUNT, g_wine_quality_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8006ae6:	f107 0210 	add.w	r2, r7, #16
 8006aea:	f107 0308 	add.w	r3, r7, #8
 8006aee:	4619      	mov	r1, r3
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 f903 	bl	8006cfc <ai_platform_bind_network_params>
 8006af6:	4603      	mov	r3, r0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3718      	adds	r7, #24
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	0800a0cc 	.word	0x0800a0cc
 8006b04:	0800a0d4 	.word	0x0800a0d4

08006b08 <ai_buffer_get_size>:
 8006b08:	b378      	cbz	r0, 8006b6a <ai_buffer_get_size+0x62>
 8006b0a:	b410      	push	{r4}
 8006b0c:	6803      	ldr	r3, [r0, #0]
 8006b0e:	4a17      	ldr	r2, [pc, #92]	; (8006b6c <ai_buffer_get_size+0x64>)
 8006b10:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8006b14:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d01e      	beq.n	8006b5a <ai_buffer_get_size+0x52>
 8006b1c:	6984      	ldr	r4, [r0, #24]
 8006b1e:	6862      	ldr	r2, [r4, #4]
 8006b20:	7d03      	ldrb	r3, [r0, #20]
 8006b22:	6941      	ldr	r1, [r0, #20]
 8006b24:	f1a3 0301 	sub.w	r3, r3, #1
 8006b28:	fab3 f383 	clz	r3, r3
 8006b2c:	095b      	lsrs	r3, r3, #5
 8006b2e:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8006b32:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8006b36:	da0b      	bge.n	8006b50 <ai_buffer_get_size+0x48>
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d102      	bne.n	8006b42 <ai_buffer_get_size+0x3a>
 8006b3c:	2802      	cmp	r0, #2
 8006b3e:	d007      	beq.n	8006b50 <ai_buffer_get_size+0x48>
 8006b40:	2302      	movs	r3, #2
 8006b42:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8006b46:	3301      	adds	r3, #1
 8006b48:	4298      	cmp	r0, r3
 8006b4a:	fb01 f202 	mul.w	r2, r1, r2
 8006b4e:	d1f3      	bne.n	8006b38 <ai_buffer_get_size+0x30>
 8006b50:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8006b54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b58:	4770      	bx	lr
 8006b5a:	2900      	cmp	r1, #0
 8006b5c:	d0de      	beq.n	8006b1c <ai_buffer_get_size+0x14>
 8006b5e:	6984      	ldr	r4, [r0, #24]
 8006b60:	6863      	ldr	r3, [r4, #4]
 8006b62:	331f      	adds	r3, #31
 8006b64:	f023 021f 	bic.w	r2, r3, #31
 8006b68:	e7da      	b.n	8006b20 <ai_buffer_get_size+0x18>
 8006b6a:	4770      	bx	lr
 8006b6c:	000400c0 	.word	0x000400c0

08006b70 <ai_buffer_array_sane>:
 8006b70:	b138      	cbz	r0, 8006b82 <ai_buffer_array_sane+0x12>
 8006b72:	6843      	ldr	r3, [r0, #4]
 8006b74:	b123      	cbz	r3, 8006b80 <ai_buffer_array_sane+0x10>
 8006b76:	8840      	ldrh	r0, [r0, #2]
 8006b78:	3800      	subs	r0, #0
 8006b7a:	bf18      	it	ne
 8006b7c:	2001      	movne	r0, #1
 8006b7e:	4770      	bx	lr
 8006b80:	4618      	mov	r0, r3
 8006b82:	4770      	bx	lr

08006b84 <ai_buffer_array_item_set_address>:
 8006b84:	b150      	cbz	r0, 8006b9c <ai_buffer_array_item_set_address+0x18>
 8006b86:	6843      	ldr	r3, [r0, #4]
 8006b88:	b14b      	cbz	r3, 8006b9e <ai_buffer_array_item_set_address+0x1a>
 8006b8a:	8840      	ldrh	r0, [r0, #2]
 8006b8c:	b900      	cbnz	r0, 8006b90 <ai_buffer_array_item_set_address+0xc>
 8006b8e:	4770      	bx	lr
 8006b90:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8006b94:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006b98:	2001      	movs	r0, #1
 8006b9a:	604a      	str	r2, [r1, #4]
 8006b9c:	4770      	bx	lr
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	4770      	bx	lr
 8006ba2:	bf00      	nop

08006ba4 <_ai_platform_acquire_crc>:
 8006ba4:	2001      	movs	r0, #1
 8006ba6:	4770      	bx	lr

08006ba8 <_ai_platform_release_crc>:
 8006ba8:	4770      	bx	lr
 8006baa:	bf00      	nop

08006bac <ai_platform_get_weights_map>:
 8006bac:	2a00      	cmp	r2, #0
 8006bae:	d037      	beq.n	8006c20 <ai_platform_get_weights_map+0x74>
 8006bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bb2:	4604      	mov	r4, r0
 8006bb4:	b1a0      	cbz	r0, 8006be0 <ai_platform_get_weights_map+0x34>
 8006bb6:	460f      	mov	r7, r1
 8006bb8:	b191      	cbz	r1, 8006be0 <ai_platform_get_weights_map+0x34>
 8006bba:	4b25      	ldr	r3, [pc, #148]	; (8006c50 <ai_platform_get_weights_map+0xa4>)
 8006bbc:	6810      	ldr	r0, [r2, #0]
 8006bbe:	4298      	cmp	r0, r3
 8006bc0:	4615      	mov	r5, r2
 8006bc2:	d00f      	beq.n	8006be4 <ai_platform_get_weights_map+0x38>
 8006bc4:	6855      	ldr	r5, [r2, #4]
 8006bc6:	b15d      	cbz	r5, 8006be0 <ai_platform_get_weights_map+0x34>
 8006bc8:	682e      	ldr	r6, [r5, #0]
 8006bca:	429e      	cmp	r6, r3
 8006bcc:	d02a      	beq.n	8006c24 <ai_platform_get_weights_map+0x78>
 8006bce:	f1a1 0001 	sub.w	r0, r1, #1
 8006bd2:	6025      	str	r5, [r4, #0]
 8006bd4:	fab0 f080 	clz	r0, r0
 8006bd8:	0940      	lsrs	r0, r0, #5
 8006bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bdc:	42a7      	cmp	r7, r4
 8006bde:	d034      	beq.n	8006c4a <ai_platform_get_weights_map+0x9e>
 8006be0:	2000      	movs	r0, #0
 8006be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006be4:	1d10      	adds	r0, r2, #4
 8006be6:	f7ff ffc3 	bl	8006b70 <ai_buffer_array_sane>
 8006bea:	2800      	cmp	r0, #0
 8006bec:	d0f8      	beq.n	8006be0 <ai_platform_get_weights_map+0x34>
 8006bee:	88eb      	ldrh	r3, [r5, #6]
 8006bf0:	429f      	cmp	r7, r3
 8006bf2:	d1f5      	bne.n	8006be0 <ai_platform_get_weights_map+0x34>
 8006bf4:	f04f 0e00 	mov.w	lr, #0
 8006bf8:	1f23      	subs	r3, r4, #4
 8006bfa:	4670      	mov	r0, lr
 8006bfc:	68aa      	ldr	r2, [r5, #8]
 8006bfe:	eb02 0c0e 	add.w	ip, r2, lr
 8006c02:	f10e 0e1c 	add.w	lr, lr, #28
 8006c06:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8006c0a:	b124      	cbz	r4, 8006c16 <ai_platform_get_weights_map+0x6a>
 8006c0c:	3001      	adds	r0, #1
 8006c0e:	4287      	cmp	r7, r0
 8006c10:	f843 4f04 	str.w	r4, [r3, #4]!
 8006c14:	d1f2      	bne.n	8006bfc <ai_platform_get_weights_map+0x50>
 8006c16:	1a38      	subs	r0, r7, r0
 8006c18:	fab0 f080 	clz	r0, r0
 8006c1c:	0940      	lsrs	r0, r0, #5
 8006c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c20:	2000      	movs	r0, #0
 8006c22:	4770      	bx	lr
 8006c24:	1f23      	subs	r3, r4, #4
 8006c26:	4628      	mov	r0, r5
 8006c28:	2400      	movs	r4, #0
 8006c2a:	e000      	b.n	8006c2e <ai_platform_get_weights_map+0x82>
 8006c2c:	4614      	mov	r4, r2
 8006c2e:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8006c32:	42b2      	cmp	r2, r6
 8006c34:	d0d2      	beq.n	8006bdc <ai_platform_get_weights_map+0x30>
 8006c36:	f843 2f04 	str.w	r2, [r3, #4]!
 8006c3a:	1c62      	adds	r2, r4, #1
 8006c3c:	4297      	cmp	r7, r2
 8006c3e:	d1f5      	bne.n	8006c2c <ai_platform_get_weights_map+0x80>
 8006c40:	3402      	adds	r4, #2
 8006c42:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8006c46:	42b3      	cmp	r3, r6
 8006c48:	d1ca      	bne.n	8006be0 <ai_platform_get_weights_map+0x34>
 8006c4a:	2001      	movs	r0, #1
 8006c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	a1facade 	.word	0xa1facade

08006c54 <ai_platform_get_activations_map>:
 8006c54:	2a00      	cmp	r2, #0
 8006c56:	d038      	beq.n	8006cca <ai_platform_get_activations_map+0x76>
 8006c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c5a:	4604      	mov	r4, r0
 8006c5c:	b1a0      	cbz	r0, 8006c88 <ai_platform_get_activations_map+0x34>
 8006c5e:	460f      	mov	r7, r1
 8006c60:	b191      	cbz	r1, 8006c88 <ai_platform_get_activations_map+0x34>
 8006c62:	4b25      	ldr	r3, [pc, #148]	; (8006cf8 <ai_platform_get_activations_map+0xa4>)
 8006c64:	6810      	ldr	r0, [r2, #0]
 8006c66:	4298      	cmp	r0, r3
 8006c68:	4615      	mov	r5, r2
 8006c6a:	d00f      	beq.n	8006c8c <ai_platform_get_activations_map+0x38>
 8006c6c:	6a15      	ldr	r5, [r2, #32]
 8006c6e:	b15d      	cbz	r5, 8006c88 <ai_platform_get_activations_map+0x34>
 8006c70:	682e      	ldr	r6, [r5, #0]
 8006c72:	429e      	cmp	r6, r3
 8006c74:	d02b      	beq.n	8006cce <ai_platform_get_activations_map+0x7a>
 8006c76:	f1a1 0001 	sub.w	r0, r1, #1
 8006c7a:	6025      	str	r5, [r4, #0]
 8006c7c:	fab0 f080 	clz	r0, r0
 8006c80:	0940      	lsrs	r0, r0, #5
 8006c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c84:	42a7      	cmp	r7, r4
 8006c86:	d035      	beq.n	8006cf4 <ai_platform_get_activations_map+0xa0>
 8006c88:	2000      	movs	r0, #0
 8006c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c8c:	f102 000c 	add.w	r0, r2, #12
 8006c90:	f7ff ff6e 	bl	8006b70 <ai_buffer_array_sane>
 8006c94:	2800      	cmp	r0, #0
 8006c96:	d0f7      	beq.n	8006c88 <ai_platform_get_activations_map+0x34>
 8006c98:	89eb      	ldrh	r3, [r5, #14]
 8006c9a:	429f      	cmp	r7, r3
 8006c9c:	d1f4      	bne.n	8006c88 <ai_platform_get_activations_map+0x34>
 8006c9e:	f04f 0e00 	mov.w	lr, #0
 8006ca2:	1f23      	subs	r3, r4, #4
 8006ca4:	4670      	mov	r0, lr
 8006ca6:	692a      	ldr	r2, [r5, #16]
 8006ca8:	eb02 0c0e 	add.w	ip, r2, lr
 8006cac:	f10e 0e1c 	add.w	lr, lr, #28
 8006cb0:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8006cb4:	b124      	cbz	r4, 8006cc0 <ai_platform_get_activations_map+0x6c>
 8006cb6:	3001      	adds	r0, #1
 8006cb8:	4287      	cmp	r7, r0
 8006cba:	f843 4f04 	str.w	r4, [r3, #4]!
 8006cbe:	d1f2      	bne.n	8006ca6 <ai_platform_get_activations_map+0x52>
 8006cc0:	1a38      	subs	r0, r7, r0
 8006cc2:	fab0 f080 	clz	r0, r0
 8006cc6:	0940      	lsrs	r0, r0, #5
 8006cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cca:	2000      	movs	r0, #0
 8006ccc:	4770      	bx	lr
 8006cce:	1f23      	subs	r3, r4, #4
 8006cd0:	4628      	mov	r0, r5
 8006cd2:	2400      	movs	r4, #0
 8006cd4:	e000      	b.n	8006cd8 <ai_platform_get_activations_map+0x84>
 8006cd6:	4614      	mov	r4, r2
 8006cd8:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8006cdc:	42b2      	cmp	r2, r6
 8006cde:	d0d1      	beq.n	8006c84 <ai_platform_get_activations_map+0x30>
 8006ce0:	f843 2f04 	str.w	r2, [r3, #4]!
 8006ce4:	1c62      	adds	r2, r4, #1
 8006ce6:	4297      	cmp	r7, r2
 8006ce8:	d1f5      	bne.n	8006cd6 <ai_platform_get_activations_map+0x82>
 8006cea:	3402      	adds	r4, #2
 8006cec:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8006cf0:	42b3      	cmp	r3, r6
 8006cf2:	d1c9      	bne.n	8006c88 <ai_platform_get_activations_map+0x34>
 8006cf4:	2001      	movs	r0, #1
 8006cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cf8:	a1facade 	.word	0xa1facade

08006cfc <ai_platform_bind_network_params>:
 8006cfc:	b1a0      	cbz	r0, 8006d28 <ai_platform_bind_network_params+0x2c>
 8006cfe:	b1b1      	cbz	r1, 8006d2e <ai_platform_bind_network_params+0x32>
 8006d00:	b1c2      	cbz	r2, 8006d34 <ai_platform_bind_network_params+0x38>
 8006d02:	b410      	push	{r4}
 8006d04:	4603      	mov	r3, r0
 8006d06:	4c0d      	ldr	r4, [pc, #52]	; (8006d3c <ai_platform_bind_network_params+0x40>)
 8006d08:	f843 4b04 	str.w	r4, [r3], #4
 8006d0c:	f100 0c0c 	add.w	ip, r0, #12
 8006d10:	c903      	ldmia	r1, {r0, r1}
 8006d12:	e883 0003 	stmia.w	r3, {r0, r1}
 8006d16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006d1a:	e88c 0003 	stmia.w	ip, {r0, r1}
 8006d1e:	2301      	movs	r3, #1
 8006d20:	4618      	mov	r0, r3
 8006d22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d26:	4770      	bx	lr
 8006d28:	4603      	mov	r3, r0
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	4770      	bx	lr
 8006d2e:	460b      	mov	r3, r1
 8006d30:	4618      	mov	r0, r3
 8006d32:	4770      	bx	lr
 8006d34:	4613      	mov	r3, r2
 8006d36:	4618      	mov	r0, r3
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	a1facade 	.word	0xa1facade

08006d40 <ai_platform_network_get_error>:
 8006d40:	b510      	push	{r4, lr}
 8006d42:	b1f0      	cbz	r0, 8006d82 <ai_platform_network_get_error+0x42>
 8006d44:	4b2f      	ldr	r3, [pc, #188]	; (8006e04 <ai_platform_network_get_error+0xc4>)
 8006d46:	6802      	ldr	r2, [r0, #0]
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	4604      	mov	r4, r0
 8006d4c:	d119      	bne.n	8006d82 <ai_platform_network_get_error+0x42>
 8006d4e:	f7ff ff29 	bl	8006ba4 <_ai_platform_acquire_crc>
 8006d52:	4b2d      	ldr	r3, [pc, #180]	; (8006e08 <ai_platform_network_get_error+0xc8>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d5e:	d03c      	beq.n	8006dda <ai_platform_network_get_error+0x9a>
 8006d60:	4a2a      	ldr	r2, [pc, #168]	; (8006e0c <ai_platform_network_get_error+0xcc>)
 8006d62:	2301      	movs	r3, #1
 8006d64:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006d68:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d1fb      	bne.n	8006d68 <ai_platform_network_get_error+0x28>
 8006d70:	4b27      	ldr	r3, [pc, #156]	; (8006e10 <ai_platform_network_get_error+0xd0>)
 8006d72:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006d76:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006d7a:	4b26      	ldr	r3, [pc, #152]	; (8006e14 <ai_platform_network_get_error+0xd4>)
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d038      	beq.n	8006df2 <ai_platform_network_get_error+0xb2>
 8006d80:	e7fe      	b.n	8006d80 <ai_platform_network_get_error+0x40>
 8006d82:	f7ff ff0f 	bl	8006ba4 <_ai_platform_acquire_crc>
 8006d86:	4b20      	ldr	r3, [pc, #128]	; (8006e08 <ai_platform_network_get_error+0xc8>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d92:	d010      	beq.n	8006db6 <ai_platform_network_get_error+0x76>
 8006d94:	4a1d      	ldr	r2, [pc, #116]	; (8006e0c <ai_platform_network_get_error+0xcc>)
 8006d96:	2301      	movs	r3, #1
 8006d98:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006d9c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d1fb      	bne.n	8006d9c <ai_platform_network_get_error+0x5c>
 8006da4:	4b1a      	ldr	r3, [pc, #104]	; (8006e10 <ai_platform_network_get_error+0xd0>)
 8006da6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006daa:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006dae:	4b19      	ldr	r3, [pc, #100]	; (8006e14 <ai_platform_network_get_error+0xd4>)
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d00d      	beq.n	8006dd0 <ai_platform_network_get_error+0x90>
 8006db4:	e7fe      	b.n	8006db4 <ai_platform_network_get_error+0x74>
 8006db6:	4a18      	ldr	r2, [pc, #96]	; (8006e18 <ai_platform_network_get_error+0xd8>)
 8006db8:	2301      	movs	r3, #1
 8006dba:	6093      	str	r3, [r2, #8]
 8006dbc:	6893      	ldr	r3, [r2, #8]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d1fc      	bne.n	8006dbc <ai_platform_network_get_error+0x7c>
 8006dc2:	4b13      	ldr	r3, [pc, #76]	; (8006e10 <ai_platform_network_get_error+0xd0>)
 8006dc4:	6013      	str	r3, [r2, #0]
 8006dc6:	6812      	ldr	r2, [r2, #0]
 8006dc8:	4b12      	ldr	r3, [pc, #72]	; (8006e14 <ai_platform_network_get_error+0xd4>)
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d000      	beq.n	8006dd0 <ai_platform_network_get_error+0x90>
 8006dce:	e7fe      	b.n	8006dce <ai_platform_network_get_error+0x8e>
 8006dd0:	f7ff feea 	bl	8006ba8 <_ai_platform_release_crc>
 8006dd4:	f241 0010 	movw	r0, #4112	; 0x1010
 8006dd8:	bd10      	pop	{r4, pc}
 8006dda:	4a0f      	ldr	r2, [pc, #60]	; (8006e18 <ai_platform_network_get_error+0xd8>)
 8006ddc:	2301      	movs	r3, #1
 8006dde:	6093      	str	r3, [r2, #8]
 8006de0:	6893      	ldr	r3, [r2, #8]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1fc      	bne.n	8006de0 <ai_platform_network_get_error+0xa0>
 8006de6:	4b0a      	ldr	r3, [pc, #40]	; (8006e10 <ai_platform_network_get_error+0xd0>)
 8006de8:	6013      	str	r3, [r2, #0]
 8006dea:	6812      	ldr	r2, [r2, #0]
 8006dec:	4b09      	ldr	r3, [pc, #36]	; (8006e14 <ai_platform_network_get_error+0xd4>)
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d107      	bne.n	8006e02 <ai_platform_network_get_error+0xc2>
 8006df2:	f7ff fed9 	bl	8006ba8 <_ai_platform_release_crc>
 8006df6:	f104 0010 	add.w	r0, r4, #16
 8006dfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dfe:	f000 be8b 	b.w	8007b18 <core_get_error>
 8006e02:	e7fe      	b.n	8006e02 <ai_platform_network_get_error+0xc2>
 8006e04:	a1c00100 	.word	0xa1c00100
 8006e08:	e0042000 	.word	0xe0042000
 8006e0c:	58024000 	.word	0x58024000
 8006e10:	f407a5c2 	.word	0xf407a5c2
 8006e14:	b5e8b5cd 	.word	0xb5e8b5cd
 8006e18:	40023000 	.word	0x40023000

08006e1c <ai_platform_network_set_error>:
 8006e1c:	b110      	cbz	r0, 8006e24 <ai_platform_network_set_error+0x8>
 8006e1e:	3010      	adds	r0, #16
 8006e20:	f000 be80 	b.w	8007b24 <core_set_error>
 8006e24:	4770      	bx	lr
 8006e26:	bf00      	nop

08006e28 <ai_platform_inputs_get>:
 8006e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e2c:	b085      	sub	sp, #20
 8006e2e:	9102      	str	r1, [sp, #8]
 8006e30:	b1f0      	cbz	r0, 8006e70 <ai_platform_inputs_get+0x48>
 8006e32:	4b62      	ldr	r3, [pc, #392]	; (8006fbc <ai_platform_inputs_get+0x194>)
 8006e34:	6802      	ldr	r2, [r0, #0]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	4607      	mov	r7, r0
 8006e3a:	d119      	bne.n	8006e70 <ai_platform_inputs_get+0x48>
 8006e3c:	f7ff feb2 	bl	8006ba4 <_ai_platform_acquire_crc>
 8006e40:	4b5f      	ldr	r3, [pc, #380]	; (8006fc0 <ai_platform_inputs_get+0x198>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e4c:	d03d      	beq.n	8006eca <ai_platform_inputs_get+0xa2>
 8006e4e:	4a5d      	ldr	r2, [pc, #372]	; (8006fc4 <ai_platform_inputs_get+0x19c>)
 8006e50:	2301      	movs	r3, #1
 8006e52:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006e56:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d1fb      	bne.n	8006e56 <ai_platform_inputs_get+0x2e>
 8006e5e:	4b5a      	ldr	r3, [pc, #360]	; (8006fc8 <ai_platform_inputs_get+0x1a0>)
 8006e60:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006e64:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006e68:	4b58      	ldr	r3, [pc, #352]	; (8006fcc <ai_platform_inputs_get+0x1a4>)
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d039      	beq.n	8006ee2 <ai_platform_inputs_get+0xba>
 8006e6e:	e7fe      	b.n	8006e6e <ai_platform_inputs_get+0x46>
 8006e70:	f7ff fe98 	bl	8006ba4 <_ai_platform_acquire_crc>
 8006e74:	4b52      	ldr	r3, [pc, #328]	; (8006fc0 <ai_platform_inputs_get+0x198>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e80:	d010      	beq.n	8006ea4 <ai_platform_inputs_get+0x7c>
 8006e82:	4a50      	ldr	r2, [pc, #320]	; (8006fc4 <ai_platform_inputs_get+0x19c>)
 8006e84:	2301      	movs	r3, #1
 8006e86:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006e8a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d1fb      	bne.n	8006e8a <ai_platform_inputs_get+0x62>
 8006e92:	4b4d      	ldr	r3, [pc, #308]	; (8006fc8 <ai_platform_inputs_get+0x1a0>)
 8006e94:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006e98:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006e9c:	4b4b      	ldr	r3, [pc, #300]	; (8006fcc <ai_platform_inputs_get+0x1a4>)
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d00d      	beq.n	8006ebe <ai_platform_inputs_get+0x96>
 8006ea2:	e7fe      	b.n	8006ea2 <ai_platform_inputs_get+0x7a>
 8006ea4:	4a4a      	ldr	r2, [pc, #296]	; (8006fd0 <ai_platform_inputs_get+0x1a8>)
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	6093      	str	r3, [r2, #8]
 8006eaa:	6893      	ldr	r3, [r2, #8]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d1fc      	bne.n	8006eaa <ai_platform_inputs_get+0x82>
 8006eb0:	4b45      	ldr	r3, [pc, #276]	; (8006fc8 <ai_platform_inputs_get+0x1a0>)
 8006eb2:	6013      	str	r3, [r2, #0]
 8006eb4:	6812      	ldr	r2, [r2, #0]
 8006eb6:	4b45      	ldr	r3, [pc, #276]	; (8006fcc <ai_platform_inputs_get+0x1a4>)
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d000      	beq.n	8006ebe <ai_platform_inputs_get+0x96>
 8006ebc:	e7fe      	b.n	8006ebc <ai_platform_inputs_get+0x94>
 8006ebe:	f7ff fe73 	bl	8006ba8 <_ai_platform_release_crc>
 8006ec2:	2000      	movs	r0, #0
 8006ec4:	b005      	add	sp, #20
 8006ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eca:	4a41      	ldr	r2, [pc, #260]	; (8006fd0 <ai_platform_inputs_get+0x1a8>)
 8006ecc:	2301      	movs	r3, #1
 8006ece:	6093      	str	r3, [r2, #8]
 8006ed0:	6893      	ldr	r3, [r2, #8]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1fc      	bne.n	8006ed0 <ai_platform_inputs_get+0xa8>
 8006ed6:	4b3c      	ldr	r3, [pc, #240]	; (8006fc8 <ai_platform_inputs_get+0x1a0>)
 8006ed8:	6013      	str	r3, [r2, #0]
 8006eda:	6812      	ldr	r2, [r2, #0]
 8006edc:	4b3b      	ldr	r3, [pc, #236]	; (8006fcc <ai_platform_inputs_get+0x1a4>)
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d155      	bne.n	8006f8e <ai_platform_inputs_get+0x166>
 8006ee2:	f7ff fe61 	bl	8006ba8 <_ai_platform_release_crc>
 8006ee6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d051      	beq.n	8006f90 <ai_platform_inputs_get+0x168>
 8006eec:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8006ef0:	f1ba 0f00 	cmp.w	sl, #0
 8006ef4:	d04c      	beq.n	8006f90 <ai_platform_inputs_get+0x168>
 8006ef6:	f04f 0b00 	mov.w	fp, #0
 8006efa:	465d      	mov	r5, fp
 8006efc:	9703      	str	r7, [sp, #12]
 8006efe:	e016      	b.n	8006f2e <ai_platform_inputs_get+0x106>
 8006f00:	9901      	ldr	r1, [sp, #4]
 8006f02:	2301      	movs	r3, #1
 8006f04:	507b      	str	r3, [r7, r1]
 8006f06:	69b1      	ldr	r1, [r6, #24]
 8006f08:	6849      	ldr	r1, [r1, #4]
 8006f0a:	6121      	str	r1, [r4, #16]
 8006f0c:	f04f 0301 	mov.w	r3, #1
 8006f10:	7523      	strb	r3, [r4, #20]
 8006f12:	e9c4 c200 	strd	ip, r2, [r4]
 8006f16:	6962      	ldr	r2, [r4, #20]
 8006f18:	60a0      	str	r0, [r4, #8]
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	f369 221f 	bfi	r2, r9, #8, #24
 8006f20:	f8c4 8018 	str.w	r8, [r4, #24]
 8006f24:	60e3      	str	r3, [r4, #12]
 8006f26:	3501      	adds	r5, #1
 8006f28:	f10b 0b1c 	add.w	fp, fp, #28
 8006f2c:	6162      	str	r2, [r4, #20]
 8006f2e:	f8ba 3000 	ldrh.w	r3, [sl]
 8006f32:	42ab      	cmp	r3, r5
 8006f34:	b2aa      	uxth	r2, r5
 8006f36:	d93a      	bls.n	8006fae <ai_platform_inputs_get+0x186>
 8006f38:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006f3c:	00e9      	lsls	r1, r5, #3
 8006f3e:	9101      	str	r1, [sp, #4]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d034      	beq.n	8006fae <ai_platform_inputs_get+0x186>
 8006f44:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8006f48:	2e00      	cmp	r6, #0
 8006f4a:	d030      	beq.n	8006fae <ai_platform_inputs_get+0x186>
 8006f4c:	f8da 3008 	ldr.w	r3, [sl, #8]
 8006f50:	69b2      	ldr	r2, [r6, #24]
 8006f52:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8006f56:	6810      	ldr	r0, [r2, #0]
 8006f58:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8006f5c:	68b3      	ldr	r3, [r6, #8]
 8006f5e:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8006f62:	f001 fcd1 	bl	8008908 <ai_array_to_buffer_fmt>
 8006f66:	69b1      	ldr	r1, [r6, #24]
 8006f68:	4684      	mov	ip, r0
 8006f6a:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8006f6e:	688a      	ldr	r2, [r1, #8]
 8006f70:	445c      	add	r4, fp
 8006f72:	2800      	cmp	r0, #0
 8006f74:	d0c8      	beq.n	8006f08 <ai_platform_inputs_get+0xe0>
 8006f76:	2100      	movs	r1, #0
 8006f78:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8006f7c:	6831      	ldr	r1, [r6, #0]
 8006f7e:	6041      	str	r1, [r0, #4]
 8006f80:	b111      	cbz	r1, 8006f88 <ai_platform_inputs_get+0x160>
 8006f82:	8849      	ldrh	r1, [r1, #2]
 8006f84:	2900      	cmp	r1, #0
 8006f86:	d1bb      	bne.n	8006f00 <ai_platform_inputs_get+0xd8>
 8006f88:	69b1      	ldr	r1, [r6, #24]
 8006f8a:	2000      	movs	r0, #0
 8006f8c:	e7bc      	b.n	8006f08 <ai_platform_inputs_get+0xe0>
 8006f8e:	e7fe      	b.n	8006f8e <ai_platform_inputs_get+0x166>
 8006f90:	2218      	movs	r2, #24
 8006f92:	2111      	movs	r1, #17
 8006f94:	f107 0010 	add.w	r0, r7, #16
 8006f98:	f000 fdc4 	bl	8007b24 <core_set_error>
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	4610      	mov	r0, r2
 8006fa0:	9b02      	ldr	r3, [sp, #8]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d08e      	beq.n	8006ec4 <ai_platform_inputs_get+0x9c>
 8006fa6:	801a      	strh	r2, [r3, #0]
 8006fa8:	b005      	add	sp, #20
 8006faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fae:	9f03      	ldr	r7, [sp, #12]
 8006fb0:	2a00      	cmp	r2, #0
 8006fb2:	d0ed      	beq.n	8006f90 <ai_platform_inputs_get+0x168>
 8006fb4:	f8da 3008 	ldr.w	r3, [sl, #8]
 8006fb8:	6858      	ldr	r0, [r3, #4]
 8006fba:	e7f1      	b.n	8006fa0 <ai_platform_inputs_get+0x178>
 8006fbc:	a1c00100 	.word	0xa1c00100
 8006fc0:	e0042000 	.word	0xe0042000
 8006fc4:	58024000 	.word	0x58024000
 8006fc8:	f407a5c2 	.word	0xf407a5c2
 8006fcc:	b5e8b5cd 	.word	0xb5e8b5cd
 8006fd0:	40023000 	.word	0x40023000

08006fd4 <ai_platform_outputs_get>:
 8006fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fd8:	b085      	sub	sp, #20
 8006fda:	9102      	str	r1, [sp, #8]
 8006fdc:	b1f0      	cbz	r0, 800701c <ai_platform_outputs_get+0x48>
 8006fde:	4b5f      	ldr	r3, [pc, #380]	; (800715c <ai_platform_outputs_get+0x188>)
 8006fe0:	6802      	ldr	r2, [r0, #0]
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	4607      	mov	r7, r0
 8006fe6:	d119      	bne.n	800701c <ai_platform_outputs_get+0x48>
 8006fe8:	f7ff fddc 	bl	8006ba4 <_ai_platform_acquire_crc>
 8006fec:	4b5c      	ldr	r3, [pc, #368]	; (8007160 <ai_platform_outputs_get+0x18c>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ff8:	d03d      	beq.n	8007076 <ai_platform_outputs_get+0xa2>
 8006ffa:	4a5a      	ldr	r2, [pc, #360]	; (8007164 <ai_platform_outputs_get+0x190>)
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007002:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007006:	2b00      	cmp	r3, #0
 8007008:	d1fb      	bne.n	8007002 <ai_platform_outputs_get+0x2e>
 800700a:	4b57      	ldr	r3, [pc, #348]	; (8007168 <ai_platform_outputs_get+0x194>)
 800700c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007010:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007014:	4b55      	ldr	r3, [pc, #340]	; (800716c <ai_platform_outputs_get+0x198>)
 8007016:	429a      	cmp	r2, r3
 8007018:	d039      	beq.n	800708e <ai_platform_outputs_get+0xba>
 800701a:	e7fe      	b.n	800701a <ai_platform_outputs_get+0x46>
 800701c:	f7ff fdc2 	bl	8006ba4 <_ai_platform_acquire_crc>
 8007020:	4b4f      	ldr	r3, [pc, #316]	; (8007160 <ai_platform_outputs_get+0x18c>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800702c:	d010      	beq.n	8007050 <ai_platform_outputs_get+0x7c>
 800702e:	4a4d      	ldr	r2, [pc, #308]	; (8007164 <ai_platform_outputs_get+0x190>)
 8007030:	2301      	movs	r3, #1
 8007032:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007036:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800703a:	2b00      	cmp	r3, #0
 800703c:	d1fb      	bne.n	8007036 <ai_platform_outputs_get+0x62>
 800703e:	4b4a      	ldr	r3, [pc, #296]	; (8007168 <ai_platform_outputs_get+0x194>)
 8007040:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007044:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007048:	4b48      	ldr	r3, [pc, #288]	; (800716c <ai_platform_outputs_get+0x198>)
 800704a:	429a      	cmp	r2, r3
 800704c:	d00d      	beq.n	800706a <ai_platform_outputs_get+0x96>
 800704e:	e7fe      	b.n	800704e <ai_platform_outputs_get+0x7a>
 8007050:	4a47      	ldr	r2, [pc, #284]	; (8007170 <ai_platform_outputs_get+0x19c>)
 8007052:	2301      	movs	r3, #1
 8007054:	6093      	str	r3, [r2, #8]
 8007056:	6893      	ldr	r3, [r2, #8]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d1fc      	bne.n	8007056 <ai_platform_outputs_get+0x82>
 800705c:	4b42      	ldr	r3, [pc, #264]	; (8007168 <ai_platform_outputs_get+0x194>)
 800705e:	6013      	str	r3, [r2, #0]
 8007060:	6812      	ldr	r2, [r2, #0]
 8007062:	4b42      	ldr	r3, [pc, #264]	; (800716c <ai_platform_outputs_get+0x198>)
 8007064:	429a      	cmp	r2, r3
 8007066:	d000      	beq.n	800706a <ai_platform_outputs_get+0x96>
 8007068:	e7fe      	b.n	8007068 <ai_platform_outputs_get+0x94>
 800706a:	f7ff fd9d 	bl	8006ba8 <_ai_platform_release_crc>
 800706e:	2000      	movs	r0, #0
 8007070:	b005      	add	sp, #20
 8007072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007076:	4a3e      	ldr	r2, [pc, #248]	; (8007170 <ai_platform_outputs_get+0x19c>)
 8007078:	2301      	movs	r3, #1
 800707a:	6093      	str	r3, [r2, #8]
 800707c:	6893      	ldr	r3, [r2, #8]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1fc      	bne.n	800707c <ai_platform_outputs_get+0xa8>
 8007082:	4b39      	ldr	r3, [pc, #228]	; (8007168 <ai_platform_outputs_get+0x194>)
 8007084:	6013      	str	r3, [r2, #0]
 8007086:	6812      	ldr	r2, [r2, #0]
 8007088:	4b38      	ldr	r3, [pc, #224]	; (800716c <ai_platform_outputs_get+0x198>)
 800708a:	429a      	cmp	r2, r3
 800708c:	d150      	bne.n	8007130 <ai_platform_outputs_get+0x15c>
 800708e:	f7ff fd8b 	bl	8006ba8 <_ai_platform_release_crc>
 8007092:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007094:	2b01      	cmp	r3, #1
 8007096:	d958      	bls.n	800714a <ai_platform_outputs_get+0x176>
 8007098:	f04f 0b00 	mov.w	fp, #0
 800709c:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 80070a0:	9703      	str	r7, [sp, #12]
 80070a2:	465d      	mov	r5, fp
 80070a4:	e016      	b.n	80070d4 <ai_platform_outputs_get+0x100>
 80070a6:	9901      	ldr	r1, [sp, #4]
 80070a8:	2301      	movs	r3, #1
 80070aa:	507b      	str	r3, [r7, r1]
 80070ac:	69b1      	ldr	r1, [r6, #24]
 80070ae:	6849      	ldr	r1, [r1, #4]
 80070b0:	6121      	str	r1, [r4, #16]
 80070b2:	f04f 0301 	mov.w	r3, #1
 80070b6:	7523      	strb	r3, [r4, #20]
 80070b8:	e9c4 c200 	strd	ip, r2, [r4]
 80070bc:	6962      	ldr	r2, [r4, #20]
 80070be:	60a0      	str	r0, [r4, #8]
 80070c0:	2300      	movs	r3, #0
 80070c2:	f369 221f 	bfi	r2, r9, #8, #24
 80070c6:	f8c4 8018 	str.w	r8, [r4, #24]
 80070ca:	60e3      	str	r3, [r4, #12]
 80070cc:	3501      	adds	r5, #1
 80070ce:	f10b 0b1c 	add.w	fp, fp, #28
 80070d2:	6162      	str	r2, [r4, #20]
 80070d4:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80070d8:	42ab      	cmp	r3, r5
 80070da:	b2aa      	uxth	r2, r5
 80070dc:	d929      	bls.n	8007132 <ai_platform_outputs_get+0x15e>
 80070de:	f8da 3010 	ldr.w	r3, [sl, #16]
 80070e2:	00e9      	lsls	r1, r5, #3
 80070e4:	9101      	str	r1, [sp, #4]
 80070e6:	b323      	cbz	r3, 8007132 <ai_platform_outputs_get+0x15e>
 80070e8:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80070ec:	b30e      	cbz	r6, 8007132 <ai_platform_outputs_get+0x15e>
 80070ee:	f8da 3014 	ldr.w	r3, [sl, #20]
 80070f2:	69b2      	ldr	r2, [r6, #24]
 80070f4:	f8d6 800c 	ldr.w	r8, [r6, #12]
 80070f8:	6810      	ldr	r0, [r2, #0]
 80070fa:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 80070fe:	68b3      	ldr	r3, [r6, #8]
 8007100:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8007104:	f001 fc00 	bl	8008908 <ai_array_to_buffer_fmt>
 8007108:	69b1      	ldr	r1, [r6, #24]
 800710a:	4684      	mov	ip, r0
 800710c:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8007110:	688a      	ldr	r2, [r1, #8]
 8007112:	445c      	add	r4, fp
 8007114:	2800      	cmp	r0, #0
 8007116:	d0ca      	beq.n	80070ae <ai_platform_outputs_get+0xda>
 8007118:	2100      	movs	r1, #0
 800711a:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 800711e:	6831      	ldr	r1, [r6, #0]
 8007120:	6041      	str	r1, [r0, #4]
 8007122:	b111      	cbz	r1, 800712a <ai_platform_outputs_get+0x156>
 8007124:	8849      	ldrh	r1, [r1, #2]
 8007126:	2900      	cmp	r1, #0
 8007128:	d1bd      	bne.n	80070a6 <ai_platform_outputs_get+0xd2>
 800712a:	69b1      	ldr	r1, [r6, #24]
 800712c:	2000      	movs	r0, #0
 800712e:	e7be      	b.n	80070ae <ai_platform_outputs_get+0xda>
 8007130:	e7fe      	b.n	8007130 <ai_platform_outputs_get+0x15c>
 8007132:	9f03      	ldr	r7, [sp, #12]
 8007134:	b14a      	cbz	r2, 800714a <ai_platform_outputs_get+0x176>
 8007136:	f8da 3014 	ldr.w	r3, [sl, #20]
 800713a:	6858      	ldr	r0, [r3, #4]
 800713c:	9b02      	ldr	r3, [sp, #8]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d096      	beq.n	8007070 <ai_platform_outputs_get+0x9c>
 8007142:	801a      	strh	r2, [r3, #0]
 8007144:	b005      	add	sp, #20
 8007146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800714a:	2218      	movs	r2, #24
 800714c:	2111      	movs	r1, #17
 800714e:	f107 0010 	add.w	r0, r7, #16
 8007152:	f000 fce7 	bl	8007b24 <core_set_error>
 8007156:	2200      	movs	r2, #0
 8007158:	4610      	mov	r0, r2
 800715a:	e7ef      	b.n	800713c <ai_platform_outputs_get+0x168>
 800715c:	a1c00100 	.word	0xa1c00100
 8007160:	e0042000 	.word	0xe0042000
 8007164:	58024000 	.word	0x58024000
 8007168:	f407a5c2 	.word	0xf407a5c2
 800716c:	b5e8b5cd 	.word	0xb5e8b5cd
 8007170:	40023000 	.word	0x40023000

08007174 <ai_platform_network_create>:
 8007174:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007178:	b083      	sub	sp, #12
 800717a:	4606      	mov	r6, r0
 800717c:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8007180:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8007184:	4615      	mov	r5, r2
 8007186:	461f      	mov	r7, r3
 8007188:	f7ff fd0c 	bl	8006ba4 <_ai_platform_acquire_crc>
 800718c:	b188      	cbz	r0, 80071b2 <ai_platform_network_create+0x3e>
 800718e:	4a5d      	ldr	r2, [pc, #372]	; (8007304 <ai_platform_network_create+0x190>)
 8007190:	6812      	ldr	r2, [r2, #0]
 8007192:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8007196:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800719a:	4603      	mov	r3, r0
 800719c:	d00e      	beq.n	80071bc <ai_platform_network_create+0x48>
 800719e:	4a5a      	ldr	r2, [pc, #360]	; (8007308 <ai_platform_network_create+0x194>)
 80071a0:	2118      	movs	r1, #24
 80071a2:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 80071a6:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 80071aa:	2918      	cmp	r1, #24
 80071ac:	d018      	beq.n	80071e0 <ai_platform_network_create+0x6c>
 80071ae:	f7ff fcfb 	bl	8006ba8 <_ai_platform_release_crc>
 80071b2:	f244 1033 	movw	r0, #16691	; 0x4133
 80071b6:	b003      	add	sp, #12
 80071b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80071bc:	4a53      	ldr	r2, [pc, #332]	; (800730c <ai_platform_network_create+0x198>)
 80071be:	2101      	movs	r1, #1
 80071c0:	6091      	str	r1, [r2, #8]
 80071c2:	2114      	movs	r1, #20
 80071c4:	e001      	b.n	80071ca <ai_platform_network_create+0x56>
 80071c6:	3901      	subs	r1, #1
 80071c8:	d002      	beq.n	80071d0 <ai_platform_network_create+0x5c>
 80071ca:	6894      	ldr	r4, [r2, #8]
 80071cc:	2c00      	cmp	r4, #0
 80071ce:	d1fa      	bne.n	80071c6 <ai_platform_network_create+0x52>
 80071d0:	4a4e      	ldr	r2, [pc, #312]	; (800730c <ai_platform_network_create+0x198>)
 80071d2:	6891      	ldr	r1, [r2, #8]
 80071d4:	b911      	cbnz	r1, 80071dc <ai_platform_network_create+0x68>
 80071d6:	6812      	ldr	r2, [r2, #0]
 80071d8:	3201      	adds	r2, #1
 80071da:	d008      	beq.n	80071ee <ai_platform_network_create+0x7a>
 80071dc:	4618      	mov	r0, r3
 80071de:	e7e6      	b.n	80071ae <ai_platform_network_create+0x3a>
 80071e0:	2101      	movs	r1, #1
 80071e2:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 80071e6:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 80071ea:	2900      	cmp	r1, #0
 80071ec:	d1fb      	bne.n	80071e6 <ai_platform_network_create+0x72>
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7ff fcda 	bl	8006ba8 <_ai_platform_release_crc>
 80071f4:	f7ff fcd6 	bl	8006ba4 <_ai_platform_acquire_crc>
 80071f8:	4b42      	ldr	r3, [pc, #264]	; (8007304 <ai_platform_network_create+0x190>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007200:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007204:	d010      	beq.n	8007228 <ai_platform_network_create+0xb4>
 8007206:	4b40      	ldr	r3, [pc, #256]	; (8007308 <ai_platform_network_create+0x194>)
 8007208:	2201      	movs	r2, #1
 800720a:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800720e:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 8007212:	2900      	cmp	r1, #0
 8007214:	d1fb      	bne.n	800720e <ai_platform_network_create+0x9a>
 8007216:	4a3e      	ldr	r2, [pc, #248]	; (8007310 <ai_platform_network_create+0x19c>)
 8007218:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800721c:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8007220:	4b3c      	ldr	r3, [pc, #240]	; (8007314 <ai_platform_network_create+0x1a0>)
 8007222:	429a      	cmp	r2, r3
 8007224:	d00c      	beq.n	8007240 <ai_platform_network_create+0xcc>
 8007226:	e7fe      	b.n	8007226 <ai_platform_network_create+0xb2>
 8007228:	4a38      	ldr	r2, [pc, #224]	; (800730c <ai_platform_network_create+0x198>)
 800722a:	2301      	movs	r3, #1
 800722c:	6093      	str	r3, [r2, #8]
 800722e:	6893      	ldr	r3, [r2, #8]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d1fc      	bne.n	800722e <ai_platform_network_create+0xba>
 8007234:	4b36      	ldr	r3, [pc, #216]	; (8007310 <ai_platform_network_create+0x19c>)
 8007236:	6013      	str	r3, [r2, #0]
 8007238:	6812      	ldr	r2, [r2, #0]
 800723a:	4b36      	ldr	r3, [pc, #216]	; (8007314 <ai_platform_network_create+0x1a0>)
 800723c:	429a      	cmp	r2, r3
 800723e:	d122      	bne.n	8007286 <ai_platform_network_create+0x112>
 8007240:	f7ff fcb2 	bl	8006ba8 <_ai_platform_release_crc>
 8007244:	b38e      	cbz	r6, 80072aa <ai_platform_network_create+0x136>
 8007246:	4b34      	ldr	r3, [pc, #208]	; (8007318 <ai_platform_network_create+0x1a4>)
 8007248:	602b      	str	r3, [r5, #0]
 800724a:	6035      	str	r5, [r6, #0]
 800724c:	f000 fc62 	bl	8007b14 <core_init>
 8007250:	b1d0      	cbz	r0, 8007288 <ai_platform_network_create+0x114>
 8007252:	f7ff fca7 	bl	8006ba4 <_ai_platform_acquire_crc>
 8007256:	4b2b      	ldr	r3, [pc, #172]	; (8007304 <ai_platform_network_create+0x190>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800725e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007262:	d025      	beq.n	80072b0 <ai_platform_network_create+0x13c>
 8007264:	4a28      	ldr	r2, [pc, #160]	; (8007308 <ai_platform_network_create+0x194>)
 8007266:	2301      	movs	r3, #1
 8007268:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800726c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007270:	2b00      	cmp	r3, #0
 8007272:	d1fb      	bne.n	800726c <ai_platform_network_create+0xf8>
 8007274:	4b26      	ldr	r3, [pc, #152]	; (8007310 <ai_platform_network_create+0x19c>)
 8007276:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800727a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800727e:	4b25      	ldr	r3, [pc, #148]	; (8007314 <ai_platform_network_create+0x1a0>)
 8007280:	429a      	cmp	r2, r3
 8007282:	d022      	beq.n	80072ca <ai_platform_network_create+0x156>
 8007284:	e7fe      	b.n	8007284 <ai_platform_network_create+0x110>
 8007286:	e7fe      	b.n	8007286 <ai_platform_network_create+0x112>
 8007288:	2430      	movs	r4, #48	; 0x30
 800728a:	2300      	movs	r3, #0
 800728c:	6033      	str	r3, [r6, #0]
 800728e:	2610      	movs	r6, #16
 8007290:	464a      	mov	r2, r9
 8007292:	4641      	mov	r1, r8
 8007294:	4638      	mov	r0, r7
 8007296:	f001 fbdd 	bl	8008a54 <ai_version_get>
 800729a:	4603      	mov	r3, r0
 800729c:	2000      	movs	r0, #0
 800729e:	f364 0007 	bfi	r0, r4, #0, #8
 80072a2:	64ab      	str	r3, [r5, #72]	; 0x48
 80072a4:	f366 201f 	bfi	r0, r6, #8, #24
 80072a8:	e785      	b.n	80071b6 <ai_platform_network_create+0x42>
 80072aa:	f241 0010 	movw	r0, #4112	; 0x1010
 80072ae:	e782      	b.n	80071b6 <ai_platform_network_create+0x42>
 80072b0:	4a16      	ldr	r2, [pc, #88]	; (800730c <ai_platform_network_create+0x198>)
 80072b2:	2301      	movs	r3, #1
 80072b4:	6093      	str	r3, [r2, #8]
 80072b6:	6893      	ldr	r3, [r2, #8]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d1fc      	bne.n	80072b6 <ai_platform_network_create+0x142>
 80072bc:	4b14      	ldr	r3, [pc, #80]	; (8007310 <ai_platform_network_create+0x19c>)
 80072be:	6013      	str	r3, [r2, #0]
 80072c0:	6812      	ldr	r2, [r2, #0]
 80072c2:	4b14      	ldr	r3, [pc, #80]	; (8007314 <ai_platform_network_create+0x1a0>)
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d000      	beq.n	80072ca <ai_platform_network_create+0x156>
 80072c8:	e7fe      	b.n	80072c8 <ai_platform_network_create+0x154>
 80072ca:	f7ff fc6d 	bl	8006ba8 <_ai_platform_release_crc>
 80072ce:	2200      	movs	r2, #0
 80072d0:	4641      	mov	r1, r8
 80072d2:	4638      	mov	r0, r7
 80072d4:	f001 fbbe 	bl	8008a54 <ai_version_get>
 80072d8:	2200      	movs	r2, #0
 80072da:	4604      	mov	r4, r0
 80072dc:	2105      	movs	r1, #5
 80072de:	2001      	movs	r0, #1
 80072e0:	f001 fbb8 	bl	8008a54 <ai_version_get>
 80072e4:	4284      	cmp	r4, r0
 80072e6:	d001      	beq.n	80072ec <ai_platform_network_create+0x178>
 80072e8:	2401      	movs	r4, #1
 80072ea:	e7ce      	b.n	800728a <ai_platform_network_create+0x116>
 80072ec:	4b0b      	ldr	r3, [pc, #44]	; (800731c <ai_platform_network_create+0x1a8>)
 80072ee:	9301      	str	r3, [sp, #4]
 80072f0:	a801      	add	r0, sp, #4
 80072f2:	f000 fc23 	bl	8007b3c <ai_check_custom_types>
 80072f6:	b110      	cbz	r0, 80072fe <ai_platform_network_create+0x18a>
 80072f8:	2600      	movs	r6, #0
 80072fa:	4634      	mov	r4, r6
 80072fc:	e7c8      	b.n	8007290 <ai_platform_network_create+0x11c>
 80072fe:	2402      	movs	r4, #2
 8007300:	e7c3      	b.n	800728a <ai_platform_network_create+0x116>
 8007302:	bf00      	nop
 8007304:	e0042000 	.word	0xe0042000
 8007308:	58024000 	.word	0x58024000
 800730c:	40023000 	.word	0x40023000
 8007310:	f407a5c2 	.word	0xf407a5c2
 8007314:	b5e8b5cd 	.word	0xb5e8b5cd
 8007318:	a1c00100 	.word	0xa1c00100
 800731c:	84048403 	.word	0x84048403

08007320 <ai_platform_network_init>:
 8007320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007324:	b1f8      	cbz	r0, 8007366 <ai_platform_network_init+0x46>
 8007326:	4b6e      	ldr	r3, [pc, #440]	; (80074e0 <ai_platform_network_init+0x1c0>)
 8007328:	6802      	ldr	r2, [r0, #0]
 800732a:	429a      	cmp	r2, r3
 800732c:	4604      	mov	r4, r0
 800732e:	d11a      	bne.n	8007366 <ai_platform_network_init+0x46>
 8007330:	460e      	mov	r6, r1
 8007332:	f7ff fc37 	bl	8006ba4 <_ai_platform_acquire_crc>
 8007336:	4b6b      	ldr	r3, [pc, #428]	; (80074e4 <ai_platform_network_init+0x1c4>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800733e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007342:	d03d      	beq.n	80073c0 <ai_platform_network_init+0xa0>
 8007344:	4a68      	ldr	r2, [pc, #416]	; (80074e8 <ai_platform_network_init+0x1c8>)
 8007346:	2301      	movs	r3, #1
 8007348:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800734c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007350:	2b00      	cmp	r3, #0
 8007352:	d1fb      	bne.n	800734c <ai_platform_network_init+0x2c>
 8007354:	4b65      	ldr	r3, [pc, #404]	; (80074ec <ai_platform_network_init+0x1cc>)
 8007356:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800735a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800735e:	4b64      	ldr	r3, [pc, #400]	; (80074f0 <ai_platform_network_init+0x1d0>)
 8007360:	429a      	cmp	r2, r3
 8007362:	d039      	beq.n	80073d8 <ai_platform_network_init+0xb8>
 8007364:	e7fe      	b.n	8007364 <ai_platform_network_init+0x44>
 8007366:	f7ff fc1d 	bl	8006ba4 <_ai_platform_acquire_crc>
 800736a:	4b5e      	ldr	r3, [pc, #376]	; (80074e4 <ai_platform_network_init+0x1c4>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007372:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007376:	d010      	beq.n	800739a <ai_platform_network_init+0x7a>
 8007378:	4a5b      	ldr	r2, [pc, #364]	; (80074e8 <ai_platform_network_init+0x1c8>)
 800737a:	2301      	movs	r3, #1
 800737c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007380:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007384:	2b00      	cmp	r3, #0
 8007386:	d1fb      	bne.n	8007380 <ai_platform_network_init+0x60>
 8007388:	4b58      	ldr	r3, [pc, #352]	; (80074ec <ai_platform_network_init+0x1cc>)
 800738a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800738e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007392:	4b57      	ldr	r3, [pc, #348]	; (80074f0 <ai_platform_network_init+0x1d0>)
 8007394:	429a      	cmp	r2, r3
 8007396:	d00d      	beq.n	80073b4 <ai_platform_network_init+0x94>
 8007398:	e7fe      	b.n	8007398 <ai_platform_network_init+0x78>
 800739a:	4a56      	ldr	r2, [pc, #344]	; (80074f4 <ai_platform_network_init+0x1d4>)
 800739c:	2301      	movs	r3, #1
 800739e:	6093      	str	r3, [r2, #8]
 80073a0:	6893      	ldr	r3, [r2, #8]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d1fc      	bne.n	80073a0 <ai_platform_network_init+0x80>
 80073a6:	4b51      	ldr	r3, [pc, #324]	; (80074ec <ai_platform_network_init+0x1cc>)
 80073a8:	6013      	str	r3, [r2, #0]
 80073aa:	6812      	ldr	r2, [r2, #0]
 80073ac:	4b50      	ldr	r3, [pc, #320]	; (80074f0 <ai_platform_network_init+0x1d0>)
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d000      	beq.n	80073b4 <ai_platform_network_init+0x94>
 80073b2:	e7fe      	b.n	80073b2 <ai_platform_network_init+0x92>
 80073b4:	f7ff fbf8 	bl	8006ba8 <_ai_platform_release_crc>
 80073b8:	2600      	movs	r6, #0
 80073ba:	4630      	mov	r0, r6
 80073bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073c0:	4a4c      	ldr	r2, [pc, #304]	; (80074f4 <ai_platform_network_init+0x1d4>)
 80073c2:	2301      	movs	r3, #1
 80073c4:	6093      	str	r3, [r2, #8]
 80073c6:	6893      	ldr	r3, [r2, #8]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d1fc      	bne.n	80073c6 <ai_platform_network_init+0xa6>
 80073cc:	4b47      	ldr	r3, [pc, #284]	; (80074ec <ai_platform_network_init+0x1cc>)
 80073ce:	6013      	str	r3, [r2, #0]
 80073d0:	6812      	ldr	r2, [r2, #0]
 80073d2:	4b47      	ldr	r3, [pc, #284]	; (80074f0 <ai_platform_network_init+0x1d0>)
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d11c      	bne.n	8007412 <ai_platform_network_init+0xf2>
 80073d8:	f7ff fbe6 	bl	8006ba8 <_ai_platform_release_crc>
 80073dc:	2e00      	cmp	r6, #0
 80073de:	d06f      	beq.n	80074c0 <ai_platform_network_init+0x1a0>
 80073e0:	4b45      	ldr	r3, [pc, #276]	; (80074f8 <ai_platform_network_init+0x1d8>)
 80073e2:	6832      	ldr	r2, [r6, #0]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d115      	bne.n	8007414 <ai_platform_network_init+0xf4>
 80073e8:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 80073ec:	6933      	ldr	r3, [r6, #16]
 80073ee:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 80073f2:	89f7      	ldrh	r7, [r6, #14]
 80073f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80073f6:	e9c4 2107 	strd	r2, r1, [r4, #28]
 80073fa:	2303      	movs	r3, #3
 80073fc:	84e7      	strh	r7, [r4, #38]	; 0x26
 80073fe:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 8007402:	60e3      	str	r3, [r4, #12]
 8007404:	4620      	mov	r0, r4
 8007406:	4626      	mov	r6, r4
 8007408:	f000 fbc2 	bl	8007b90 <ai_layers_init_all>
 800740c:	4630      	mov	r0, r6
 800740e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007412:	e7fe      	b.n	8007412 <ai_platform_network_init+0xf2>
 8007414:	2101      	movs	r1, #1
 8007416:	4630      	mov	r0, r6
 8007418:	4635      	mov	r5, r6
 800741a:	6876      	ldr	r6, [r6, #4]
 800741c:	f7ff fb74 	bl	8006b08 <ai_buffer_get_size>
 8007420:	f105 081c 	add.w	r8, r5, #28
 8007424:	4681      	mov	r9, r0
 8007426:	2101      	movs	r1, #1
 8007428:	4640      	mov	r0, r8
 800742a:	6a2f      	ldr	r7, [r5, #32]
 800742c:	f7ff fb6c 	bl	8006b08 <ai_buffer_get_size>
 8007430:	f1b9 0f00 	cmp.w	r9, #0
 8007434:	d025      	beq.n	8007482 <ai_platform_network_init+0x162>
 8007436:	2201      	movs	r2, #1
 8007438:	4696      	mov	lr, r2
 800743a:	bb30      	cbnz	r0, 800748a <ai_platform_network_init+0x16a>
 800743c:	4680      	mov	r8, r0
 800743e:	4607      	mov	r7, r0
 8007440:	b376      	cbz	r6, 80074a0 <ai_platform_network_init+0x180>
 8007442:	8be3      	ldrh	r3, [r4, #30]
 8007444:	4573      	cmp	r3, lr
 8007446:	d323      	bcc.n	8007490 <ai_platform_network_init+0x170>
 8007448:	b142      	cbz	r2, 800745c <ai_platform_network_init+0x13c>
 800744a:	46ac      	mov	ip, r5
 800744c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8007450:	6a25      	ldr	r5, [r4, #32]
 8007452:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007454:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8007458:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800745c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800745e:	f8a4 e01e 	strh.w	lr, [r4, #30]
 8007462:	2600      	movs	r6, #0
 8007464:	42bb      	cmp	r3, r7
 8007466:	83a6      	strh	r6, [r4, #28]
 8007468:	d323      	bcc.n	80074b2 <ai_platform_network_init+0x192>
 800746a:	b37f      	cbz	r7, 80074cc <ai_platform_network_init+0x1ac>
 800746c:	46c4      	mov	ip, r8
 800746e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8007472:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8007474:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007476:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800747a:	46b6      	mov	lr, r6
 800747c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8007480:	e7bb      	b.n	80073fa <ai_platform_network_init+0xda>
 8007482:	464a      	mov	r2, r9
 8007484:	46ce      	mov	lr, r9
 8007486:	464d      	mov	r5, r9
 8007488:	e7d7      	b.n	800743a <ai_platform_network_init+0x11a>
 800748a:	b30f      	cbz	r7, 80074d0 <ai_platform_network_init+0x1b0>
 800748c:	2701      	movs	r7, #1
 800748e:	e7d7      	b.n	8007440 <ai_platform_network_init+0x120>
 8007490:	2212      	movs	r2, #18
 8007492:	2116      	movs	r1, #22
 8007494:	f104 0010 	add.w	r0, r4, #16
 8007498:	f000 fb44 	bl	8007b24 <core_set_error>
 800749c:	2600      	movs	r6, #0
 800749e:	e78c      	b.n	80073ba <ai_platform_network_init+0x9a>
 80074a0:	f1b9 0f00 	cmp.w	r9, #0
 80074a4:	d0cd      	beq.n	8007442 <ai_platform_network_init+0x122>
 80074a6:	2110      	movs	r1, #16
 80074a8:	2212      	movs	r2, #18
 80074aa:	1860      	adds	r0, r4, r1
 80074ac:	f000 fb3a 	bl	8007b24 <core_set_error>
 80074b0:	e783      	b.n	80073ba <ai_platform_network_init+0x9a>
 80074b2:	2213      	movs	r2, #19
 80074b4:	2116      	movs	r1, #22
 80074b6:	f104 0010 	add.w	r0, r4, #16
 80074ba:	f000 fb33 	bl	8007b24 <core_set_error>
 80074be:	e77c      	b.n	80073ba <ai_platform_network_init+0x9a>
 80074c0:	2110      	movs	r1, #16
 80074c2:	2211      	movs	r2, #17
 80074c4:	1860      	adds	r0, r4, r1
 80074c6:	f000 fb2d 	bl	8007b24 <core_set_error>
 80074ca:	e776      	b.n	80073ba <ai_platform_network_init+0x9a>
 80074cc:	46be      	mov	lr, r7
 80074ce:	e794      	b.n	80073fa <ai_platform_network_init+0xda>
 80074d0:	2110      	movs	r1, #16
 80074d2:	2213      	movs	r2, #19
 80074d4:	1860      	adds	r0, r4, r1
 80074d6:	f000 fb25 	bl	8007b24 <core_set_error>
 80074da:	463e      	mov	r6, r7
 80074dc:	e76d      	b.n	80073ba <ai_platform_network_init+0x9a>
 80074de:	bf00      	nop
 80074e0:	a1c00100 	.word	0xa1c00100
 80074e4:	e0042000 	.word	0xe0042000
 80074e8:	58024000 	.word	0x58024000
 80074ec:	f407a5c2 	.word	0xf407a5c2
 80074f0:	b5e8b5cd 	.word	0xb5e8b5cd
 80074f4:	40023000 	.word	0x40023000
 80074f8:	a1facade 	.word	0xa1facade

080074fc <ai_platform_network_post_init>:
 80074fc:	b538      	push	{r3, r4, r5, lr}
 80074fe:	b1f0      	cbz	r0, 800753e <ai_platform_network_post_init+0x42>
 8007500:	4b3c      	ldr	r3, [pc, #240]	; (80075f4 <ai_platform_network_post_init+0xf8>)
 8007502:	6802      	ldr	r2, [r0, #0]
 8007504:	429a      	cmp	r2, r3
 8007506:	4604      	mov	r4, r0
 8007508:	d119      	bne.n	800753e <ai_platform_network_post_init+0x42>
 800750a:	f7ff fb4b 	bl	8006ba4 <_ai_platform_acquire_crc>
 800750e:	4b3a      	ldr	r3, [pc, #232]	; (80075f8 <ai_platform_network_post_init+0xfc>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800751a:	d03b      	beq.n	8007594 <ai_platform_network_post_init+0x98>
 800751c:	4a37      	ldr	r2, [pc, #220]	; (80075fc <ai_platform_network_post_init+0x100>)
 800751e:	2301      	movs	r3, #1
 8007520:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007524:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007528:	2b00      	cmp	r3, #0
 800752a:	d1fb      	bne.n	8007524 <ai_platform_network_post_init+0x28>
 800752c:	4b34      	ldr	r3, [pc, #208]	; (8007600 <ai_platform_network_post_init+0x104>)
 800752e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007532:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007536:	4b33      	ldr	r3, [pc, #204]	; (8007604 <ai_platform_network_post_init+0x108>)
 8007538:	429a      	cmp	r2, r3
 800753a:	d037      	beq.n	80075ac <ai_platform_network_post_init+0xb0>
 800753c:	e7fe      	b.n	800753c <ai_platform_network_post_init+0x40>
 800753e:	f7ff fb31 	bl	8006ba4 <_ai_platform_acquire_crc>
 8007542:	4b2d      	ldr	r3, [pc, #180]	; (80075f8 <ai_platform_network_post_init+0xfc>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800754a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800754e:	d010      	beq.n	8007572 <ai_platform_network_post_init+0x76>
 8007550:	4a2a      	ldr	r2, [pc, #168]	; (80075fc <ai_platform_network_post_init+0x100>)
 8007552:	2301      	movs	r3, #1
 8007554:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007558:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800755c:	2b00      	cmp	r3, #0
 800755e:	d1fb      	bne.n	8007558 <ai_platform_network_post_init+0x5c>
 8007560:	4b27      	ldr	r3, [pc, #156]	; (8007600 <ai_platform_network_post_init+0x104>)
 8007562:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007566:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800756a:	4b26      	ldr	r3, [pc, #152]	; (8007604 <ai_platform_network_post_init+0x108>)
 800756c:	429a      	cmp	r2, r3
 800756e:	d00d      	beq.n	800758c <ai_platform_network_post_init+0x90>
 8007570:	e7fe      	b.n	8007570 <ai_platform_network_post_init+0x74>
 8007572:	4a25      	ldr	r2, [pc, #148]	; (8007608 <ai_platform_network_post_init+0x10c>)
 8007574:	2301      	movs	r3, #1
 8007576:	6093      	str	r3, [r2, #8]
 8007578:	6893      	ldr	r3, [r2, #8]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d1fc      	bne.n	8007578 <ai_platform_network_post_init+0x7c>
 800757e:	4b20      	ldr	r3, [pc, #128]	; (8007600 <ai_platform_network_post_init+0x104>)
 8007580:	6013      	str	r3, [r2, #0]
 8007582:	6812      	ldr	r2, [r2, #0]
 8007584:	4b1f      	ldr	r3, [pc, #124]	; (8007604 <ai_platform_network_post_init+0x108>)
 8007586:	429a      	cmp	r2, r3
 8007588:	d000      	beq.n	800758c <ai_platform_network_post_init+0x90>
 800758a:	e7fe      	b.n	800758a <ai_platform_network_post_init+0x8e>
 800758c:	f7ff fb0c 	bl	8006ba8 <_ai_platform_release_crc>
 8007590:	2000      	movs	r0, #0
 8007592:	bd38      	pop	{r3, r4, r5, pc}
 8007594:	4a1c      	ldr	r2, [pc, #112]	; (8007608 <ai_platform_network_post_init+0x10c>)
 8007596:	2301      	movs	r3, #1
 8007598:	6093      	str	r3, [r2, #8]
 800759a:	6893      	ldr	r3, [r2, #8]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d1fc      	bne.n	800759a <ai_platform_network_post_init+0x9e>
 80075a0:	4b17      	ldr	r3, [pc, #92]	; (8007600 <ai_platform_network_post_init+0x104>)
 80075a2:	6013      	str	r3, [r2, #0]
 80075a4:	6812      	ldr	r2, [r2, #0]
 80075a6:	4b17      	ldr	r3, [pc, #92]	; (8007604 <ai_platform_network_post_init+0x108>)
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d11a      	bne.n	80075e2 <ai_platform_network_post_init+0xe6>
 80075ac:	f7ff fafc 	bl	8006ba8 <_ai_platform_release_crc>
 80075b0:	68e3      	ldr	r3, [r4, #12]
 80075b2:	f013 0502 	ands.w	r5, r3, #2
 80075b6:	d015      	beq.n	80075e4 <ai_platform_network_post_init+0xe8>
 80075b8:	4620      	mov	r0, r4
 80075ba:	f000 faf7 	bl	8007bac <ai_layers_post_init_all>
 80075be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80075c0:	b16b      	cbz	r3, 80075de <ai_platform_network_post_init+0xe2>
 80075c2:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80075c4:	e007      	b.n	80075d6 <ai_platform_network_post_init+0xda>
 80075c6:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 80075ca:	4798      	blx	r3
 80075cc:	692b      	ldr	r3, [r5, #16]
 80075ce:	42ab      	cmp	r3, r5
 80075d0:	d005      	beq.n	80075de <ai_platform_network_post_init+0xe2>
 80075d2:	b123      	cbz	r3, 80075de <ai_platform_network_post_init+0xe2>
 80075d4:	461d      	mov	r5, r3
 80075d6:	4629      	mov	r1, r5
 80075d8:	2000      	movs	r0, #0
 80075da:	2d00      	cmp	r5, #0
 80075dc:	d1f3      	bne.n	80075c6 <ai_platform_network_post_init+0xca>
 80075de:	2001      	movs	r0, #1
 80075e0:	bd38      	pop	{r3, r4, r5, pc}
 80075e2:	e7fe      	b.n	80075e2 <ai_platform_network_post_init+0xe6>
 80075e4:	2210      	movs	r2, #16
 80075e6:	2111      	movs	r1, #17
 80075e8:	18a0      	adds	r0, r4, r2
 80075ea:	f000 fa9b 	bl	8007b24 <core_set_error>
 80075ee:	4628      	mov	r0, r5
 80075f0:	bd38      	pop	{r3, r4, r5, pc}
 80075f2:	bf00      	nop
 80075f4:	a1c00100 	.word	0xa1c00100
 80075f8:	e0042000 	.word	0xe0042000
 80075fc:	58024000 	.word	0x58024000
 8007600:	f407a5c2 	.word	0xf407a5c2
 8007604:	b5e8b5cd 	.word	0xb5e8b5cd
 8007608:	40023000 	.word	0x40023000

0800760c <ai_platform_network_process>:
 800760c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007610:	460e      	mov	r6, r1
 8007612:	b085      	sub	sp, #20
 8007614:	4693      	mov	fp, r2
 8007616:	4605      	mov	r5, r0
 8007618:	b120      	cbz	r0, 8007624 <ai_platform_network_process+0x18>
 800761a:	4bb8      	ldr	r3, [pc, #736]	; (80078fc <ai_platform_network_process+0x2f0>)
 800761c:	6802      	ldr	r2, [r0, #0]
 800761e:	429a      	cmp	r2, r3
 8007620:	bf18      	it	ne
 8007622:	2500      	movne	r5, #0
 8007624:	f7ff fabe 	bl	8006ba4 <_ai_platform_acquire_crc>
 8007628:	4bb5      	ldr	r3, [pc, #724]	; (8007900 <ai_platform_network_process+0x2f4>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007630:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007634:	d010      	beq.n	8007658 <ai_platform_network_process+0x4c>
 8007636:	4ab3      	ldr	r2, [pc, #716]	; (8007904 <ai_platform_network_process+0x2f8>)
 8007638:	2301      	movs	r3, #1
 800763a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800763e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1fb      	bne.n	800763e <ai_platform_network_process+0x32>
 8007646:	4bb0      	ldr	r3, [pc, #704]	; (8007908 <ai_platform_network_process+0x2fc>)
 8007648:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800764c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007650:	4bae      	ldr	r3, [pc, #696]	; (800790c <ai_platform_network_process+0x300>)
 8007652:	429a      	cmp	r2, r3
 8007654:	d00d      	beq.n	8007672 <ai_platform_network_process+0x66>
 8007656:	e7fe      	b.n	8007656 <ai_platform_network_process+0x4a>
 8007658:	4aad      	ldr	r2, [pc, #692]	; (8007910 <ai_platform_network_process+0x304>)
 800765a:	2301      	movs	r3, #1
 800765c:	6093      	str	r3, [r2, #8]
 800765e:	6893      	ldr	r3, [r2, #8]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d1fc      	bne.n	800765e <ai_platform_network_process+0x52>
 8007664:	4ba8      	ldr	r3, [pc, #672]	; (8007908 <ai_platform_network_process+0x2fc>)
 8007666:	6013      	str	r3, [r2, #0]
 8007668:	6812      	ldr	r2, [r2, #0]
 800766a:	4ba8      	ldr	r3, [pc, #672]	; (800790c <ai_platform_network_process+0x300>)
 800766c:	429a      	cmp	r2, r3
 800766e:	f040 812c 	bne.w	80078ca <ai_platform_network_process+0x2be>
 8007672:	f7ff fa99 	bl	8006ba8 <_ai_platform_release_crc>
 8007676:	2d00      	cmp	r5, #0
 8007678:	f000 8154 	beq.w	8007924 <ai_platform_network_process+0x318>
 800767c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 800767e:	2b00      	cmp	r3, #0
 8007680:	f000 8124 	beq.w	80078cc <ai_platform_network_process+0x2c0>
 8007684:	68eb      	ldr	r3, [r5, #12]
 8007686:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 800768a:	f003 0303 	and.w	r3, r3, #3
 800768e:	2700      	movs	r7, #0
 8007690:	2b03      	cmp	r3, #3
 8007692:	616f      	str	r7, [r5, #20]
 8007694:	f040 813e 	bne.w	8007914 <ai_platform_network_process+0x308>
 8007698:	2e00      	cmp	r6, #0
 800769a:	f000 811d 	beq.w	80078d8 <ai_platform_network_process+0x2cc>
 800769e:	f1ba 0f00 	cmp.w	sl, #0
 80076a2:	f000 8119 	beq.w	80078d8 <ai_platform_network_process+0x2cc>
 80076a6:	f8ba 3000 	ldrh.w	r3, [sl]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	f000 8114 	beq.w	80078d8 <ai_platform_network_process+0x2cc>
 80076b0:	69b3      	ldr	r3, [r6, #24]
 80076b2:	f8cd b00c 	str.w	fp, [sp, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	e9cd 3501 	strd	r3, r5, [sp, #4]
 80076bc:	f8da 3004 	ldr.w	r3, [sl, #4]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d072      	beq.n	80077aa <ai_platform_network_process+0x19e>
 80076c4:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 80076c8:	2c00      	cmp	r4, #0
 80076ca:	d06e      	beq.n	80077aa <ai_platform_network_process+0x19e>
 80076cc:	f8da 3008 	ldr.w	r3, [sl, #8]
 80076d0:	f8d3 9000 	ldr.w	r9, [r3]
 80076d4:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 80076d8:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 80076dc:	f000 81de 	beq.w	8007a9c <ai_platform_network_process+0x490>
 80076e0:	69a3      	ldr	r3, [r4, #24]
 80076e2:	2101      	movs	r1, #1
 80076e4:	4630      	mov	r0, r6
 80076e6:	685d      	ldr	r5, [r3, #4]
 80076e8:	f7ff fa0e 	bl	8006b08 <ai_buffer_get_size>
 80076ec:	4285      	cmp	r5, r0
 80076ee:	f0c0 811b 	bcc.w	8007928 <ai_platform_network_process+0x31c>
 80076f2:	68e0      	ldr	r0, [r4, #12]
 80076f4:	69b1      	ldr	r1, [r6, #24]
 80076f6:	68c2      	ldr	r2, [r0, #12]
 80076f8:	68cb      	ldr	r3, [r1, #12]
 80076fa:	429a      	cmp	r2, r3
 80076fc:	f040 8114 	bne.w	8007928 <ai_platform_network_process+0x31c>
 8007700:	6882      	ldr	r2, [r0, #8]
 8007702:	688b      	ldr	r3, [r1, #8]
 8007704:	429a      	cmp	r2, r3
 8007706:	f040 810f 	bne.w	8007928 <ai_platform_network_process+0x31c>
 800770a:	6842      	ldr	r2, [r0, #4]
 800770c:	684b      	ldr	r3, [r1, #4]
 800770e:	429a      	cmp	r2, r3
 8007710:	f040 810a 	bne.w	8007928 <ai_platform_network_process+0x31c>
 8007714:	69a3      	ldr	r3, [r4, #24]
 8007716:	e9d3 0100 	ldrd	r0, r1, [r3]
 800771a:	f001 f989 	bl	8008a30 <ai_array_get_data_byte_size>
 800771e:	4605      	mov	r5, r0
 8007720:	4620      	mov	r0, r4
 8007722:	f001 f99d 	bl	8008a60 <get_tensor_byte_size>
 8007726:	4285      	cmp	r5, r0
 8007728:	f0c0 80fe 	bcc.w	8007928 <ai_platform_network_process+0x31c>
 800772c:	69a3      	ldr	r3, [r4, #24]
 800772e:	6818      	ldr	r0, [r3, #0]
 8007730:	f001 f8ea 	bl	8008908 <ai_array_to_buffer_fmt>
 8007734:	6833      	ldr	r3, [r6, #0]
 8007736:	4058      	eors	r0, r3
 8007738:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800773c:	f040 81b9 	bne.w	8007ab2 <ai_platform_network_process+0x4a6>
 8007740:	6873      	ldr	r3, [r6, #4]
 8007742:	2b00      	cmp	r3, #0
 8007744:	f000 81ac 	beq.w	8007aa0 <ai_platform_network_process+0x494>
 8007748:	69b3      	ldr	r3, [r6, #24]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2b00      	cmp	r3, #0
 800774e:	f000 819c 	beq.w	8007a8a <ai_platform_network_process+0x47e>
 8007752:	9a01      	ldr	r2, [sp, #4]
 8007754:	429a      	cmp	r2, r3
 8007756:	bf38      	it	cc
 8007758:	461a      	movcc	r2, r3
 800775a:	4620      	mov	r0, r4
 800775c:	9201      	str	r2, [sp, #4]
 800775e:	f001 f97f 	bl	8008a60 <get_tensor_byte_size>
 8007762:	f8c8 0008 	str.w	r0, [r8, #8]
 8007766:	69b3      	ldr	r3, [r6, #24]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	fb00 f303 	mul.w	r3, r0, r3
 800776e:	f8c8 300c 	str.w	r3, [r8, #12]
 8007772:	6871      	ldr	r1, [r6, #4]
 8007774:	f8c8 1004 	str.w	r1, [r8, #4]
 8007778:	440b      	add	r3, r1
 800777a:	f849 300b 	str.w	r3, [r9, fp]
 800777e:	69a0      	ldr	r0, [r4, #24]
 8007780:	6803      	ldr	r3, [r0, #0]
 8007782:	009a      	lsls	r2, r3, #2
 8007784:	f107 0701 	add.w	r7, r7, #1
 8007788:	f106 061c 	add.w	r6, r6, #28
 800778c:	f100 80af 	bmi.w	80078ee <ai_platform_network_process+0x2e2>
 8007790:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8007794:	1a9b      	subs	r3, r3, r2
 8007796:	4419      	add	r1, r3
 8007798:	6081      	str	r1, [r0, #8]
 800779a:	69a3      	ldr	r3, [r4, #24]
 800779c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80077a0:	60da      	str	r2, [r3, #12]
 80077a2:	f8ba 3000 	ldrh.w	r3, [sl]
 80077a6:	42bb      	cmp	r3, r7
 80077a8:	d888      	bhi.n	80076bc <ai_platform_network_process+0xb0>
 80077aa:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 80077ae:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 80077b0:	f1bb 0f00 	cmp.w	fp, #0
 80077b4:	f000 8186 	beq.w	8007ac4 <ai_platform_network_process+0x4b8>
 80077b8:	2a01      	cmp	r2, #1
 80077ba:	f240 815e 	bls.w	8007a7a <ai_platform_network_process+0x46e>
 80077be:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 80077c2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	f000 8157 	beq.w	8007a7a <ai_platform_network_process+0x46e>
 80077cc:	465e      	mov	r6, fp
 80077ce:	2700      	movs	r7, #0
 80077d0:	462c      	mov	r4, r5
 80077d2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	f000 80b4 	beq.w	8007944 <ai_platform_network_process+0x338>
 80077dc:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 80077e0:	2d00      	cmp	r5, #0
 80077e2:	f000 80af 	beq.w	8007944 <ai_platform_network_process+0x338>
 80077e6:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80077ea:	f8d3 8000 	ldr.w	r8, [r3]
 80077ee:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 80077f2:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 80077f6:	f000 8171 	beq.w	8007adc <ai_platform_network_process+0x4d0>
 80077fa:	69ab      	ldr	r3, [r5, #24]
 80077fc:	2101      	movs	r1, #1
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	9302      	str	r3, [sp, #8]
 8007802:	4630      	mov	r0, r6
 8007804:	f7ff f980 	bl	8006b08 <ai_buffer_get_size>
 8007808:	9b02      	ldr	r3, [sp, #8]
 800780a:	4283      	cmp	r3, r0
 800780c:	f0c0 8134 	bcc.w	8007a78 <ai_platform_network_process+0x46c>
 8007810:	68e8      	ldr	r0, [r5, #12]
 8007812:	69b1      	ldr	r1, [r6, #24]
 8007814:	68c2      	ldr	r2, [r0, #12]
 8007816:	68cb      	ldr	r3, [r1, #12]
 8007818:	429a      	cmp	r2, r3
 800781a:	f040 812d 	bne.w	8007a78 <ai_platform_network_process+0x46c>
 800781e:	6882      	ldr	r2, [r0, #8]
 8007820:	688b      	ldr	r3, [r1, #8]
 8007822:	429a      	cmp	r2, r3
 8007824:	f040 8128 	bne.w	8007a78 <ai_platform_network_process+0x46c>
 8007828:	6842      	ldr	r2, [r0, #4]
 800782a:	684b      	ldr	r3, [r1, #4]
 800782c:	429a      	cmp	r2, r3
 800782e:	f040 8123 	bne.w	8007a78 <ai_platform_network_process+0x46c>
 8007832:	69ab      	ldr	r3, [r5, #24]
 8007834:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007838:	f001 f8fa 	bl	8008a30 <ai_array_get_data_byte_size>
 800783c:	9002      	str	r0, [sp, #8]
 800783e:	4628      	mov	r0, r5
 8007840:	f001 f90e 	bl	8008a60 <get_tensor_byte_size>
 8007844:	9b02      	ldr	r3, [sp, #8]
 8007846:	4283      	cmp	r3, r0
 8007848:	f0c0 8116 	bcc.w	8007a78 <ai_platform_network_process+0x46c>
 800784c:	69ab      	ldr	r3, [r5, #24]
 800784e:	6818      	ldr	r0, [r3, #0]
 8007850:	f001 f85a 	bl	8008908 <ai_array_to_buffer_fmt>
 8007854:	6833      	ldr	r3, [r6, #0]
 8007856:	4058      	eors	r0, r3
 8007858:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800785c:	f040 8136 	bne.w	8007acc <ai_platform_network_process+0x4c0>
 8007860:	6873      	ldr	r3, [r6, #4]
 8007862:	2b00      	cmp	r3, #0
 8007864:	f000 814d 	beq.w	8007b02 <ai_platform_network_process+0x4f6>
 8007868:	69b3      	ldr	r3, [r6, #24]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	2b00      	cmp	r3, #0
 800786e:	f000 813f 	beq.w	8007af0 <ai_platform_network_process+0x4e4>
 8007872:	9a01      	ldr	r2, [sp, #4]
 8007874:	429a      	cmp	r2, r3
 8007876:	bf38      	it	cc
 8007878:	461a      	movcc	r2, r3
 800787a:	4628      	mov	r0, r5
 800787c:	9201      	str	r2, [sp, #4]
 800787e:	f001 f8ef 	bl	8008a60 <get_tensor_byte_size>
 8007882:	f8ca 0008 	str.w	r0, [sl, #8]
 8007886:	69b3      	ldr	r3, [r6, #24]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	fb00 f303 	mul.w	r3, r0, r3
 800788e:	f8ca 300c 	str.w	r3, [sl, #12]
 8007892:	6871      	ldr	r1, [r6, #4]
 8007894:	f8ca 1004 	str.w	r1, [sl, #4]
 8007898:	440b      	add	r3, r1
 800789a:	f848 300b 	str.w	r3, [r8, fp]
 800789e:	69a8      	ldr	r0, [r5, #24]
 80078a0:	6803      	ldr	r3, [r0, #0]
 80078a2:	009b      	lsls	r3, r3, #2
 80078a4:	f107 0701 	add.w	r7, r7, #1
 80078a8:	f106 061c 	add.w	r6, r6, #28
 80078ac:	d445      	bmi.n	800793a <ai_platform_network_process+0x32e>
 80078ae:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80078b2:	1a9b      	subs	r3, r3, r2
 80078b4:	4419      	add	r1, r3
 80078b6:	6081      	str	r1, [r0, #8]
 80078b8:	69ab      	ldr	r3, [r5, #24]
 80078ba:	f8da 2004 	ldr.w	r2, [sl, #4]
 80078be:	60da      	str	r2, [r3, #12]
 80078c0:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80078c4:	429f      	cmp	r7, r3
 80078c6:	d384      	bcc.n	80077d2 <ai_platform_network_process+0x1c6>
 80078c8:	e03c      	b.n	8007944 <ai_platform_network_process+0x338>
 80078ca:	e7fe      	b.n	80078ca <ai_platform_network_process+0x2be>
 80078cc:	68ea      	ldr	r2, [r5, #12]
 80078ce:	616b      	str	r3, [r5, #20]
 80078d0:	f002 0203 	and.w	r2, r2, #3
 80078d4:	2a03      	cmp	r2, #3
 80078d6:	d11d      	bne.n	8007914 <ai_platform_network_process+0x308>
 80078d8:	2217      	movs	r2, #23
 80078da:	2112      	movs	r1, #18
 80078dc:	f105 0010 	add.w	r0, r5, #16
 80078e0:	f000 f920 	bl	8007b24 <core_set_error>
 80078e4:	2400      	movs	r4, #0
 80078e6:	4620      	mov	r0, r4
 80078e8:	b005      	add	sp, #20
 80078ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078ee:	f8ba 3000 	ldrh.w	r3, [sl]
 80078f2:	429f      	cmp	r7, r3
 80078f4:	f4ff aee2 	bcc.w	80076bc <ai_platform_network_process+0xb0>
 80078f8:	e757      	b.n	80077aa <ai_platform_network_process+0x19e>
 80078fa:	bf00      	nop
 80078fc:	a1c00100 	.word	0xa1c00100
 8007900:	e0042000 	.word	0xe0042000
 8007904:	58024000 	.word	0x58024000
 8007908:	f407a5c2 	.word	0xf407a5c2
 800790c:	b5e8b5cd 	.word	0xb5e8b5cd
 8007910:	40023000 	.word	0x40023000
 8007914:	2230      	movs	r2, #48	; 0x30
 8007916:	2111      	movs	r1, #17
 8007918:	f105 0010 	add.w	r0, r5, #16
 800791c:	f000 f902 	bl	8007b24 <core_set_error>
 8007920:	2400      	movs	r4, #0
 8007922:	e7e0      	b.n	80078e6 <ai_platform_network_process+0x2da>
 8007924:	462c      	mov	r4, r5
 8007926:	e7de      	b.n	80078e6 <ai_platform_network_process+0x2da>
 8007928:	9d02      	ldr	r5, [sp, #8]
 800792a:	2218      	movs	r2, #24
 800792c:	2112      	movs	r1, #18
 800792e:	f105 0010 	add.w	r0, r5, #16
 8007932:	f000 f8f7 	bl	8007b24 <core_set_error>
 8007936:	2400      	movs	r4, #0
 8007938:	e7d5      	b.n	80078e6 <ai_platform_network_process+0x2da>
 800793a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800793e:	429f      	cmp	r7, r3
 8007940:	f4ff af47 	bcc.w	80077d2 <ai_platform_network_process+0x1c6>
 8007944:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8007948:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800794a:	82a3      	strh	r3, [r4, #20]
 800794c:	4625      	mov	r5, r4
 800794e:	2a00      	cmp	r2, #0
 8007950:	f040 808c 	bne.w	8007a6c <ai_platform_network_process+0x460>
 8007954:	4616      	mov	r6, r2
 8007956:	4617      	mov	r7, r2
 8007958:	8aec      	ldrh	r4, [r5, #22]
 800795a:	429c      	cmp	r4, r3
 800795c:	bf38      	it	cc
 800795e:	46ab      	movcc	fp, r5
 8007960:	d2c1      	bcs.n	80078e6 <ai_platform_network_process+0x2da>
 8007962:	2e00      	cmp	r6, #0
 8007964:	d030      	beq.n	80079c8 <ai_platform_network_process+0x3bc>
 8007966:	f04f 0800 	mov.w	r8, #0
 800796a:	e014      	b.n	8007996 <ai_platform_network_process+0x38a>
 800796c:	6882      	ldr	r2, [r0, #8]
 800796e:	68c5      	ldr	r5, [r0, #12]
 8007970:	6863      	ldr	r3, [r4, #4]
 8007972:	1b52      	subs	r2, r2, r5
 8007974:	4413      	add	r3, r2
 8007976:	6083      	str	r3, [r0, #8]
 8007978:	698b      	ldr	r3, [r1, #24]
 800797a:	6862      	ldr	r2, [r4, #4]
 800797c:	60da      	str	r2, [r3, #12]
 800797e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8007982:	f859 200a 	ldr.w	r2, [r9, sl]
 8007986:	440b      	add	r3, r1
 8007988:	4293      	cmp	r3, r2
 800798a:	bf24      	itt	cs
 800798c:	68e3      	ldrcs	r3, [r4, #12]
 800798e:	1ad3      	subcs	r3, r2, r3
 8007990:	6063      	str	r3, [r4, #4]
 8007992:	f108 0801 	add.w	r8, r8, #1
 8007996:	8833      	ldrh	r3, [r6, #0]
 8007998:	4543      	cmp	r3, r8
 800799a:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 800799e:	d913      	bls.n	80079c8 <ai_platform_network_process+0x3bc>
 80079a0:	6873      	ldr	r3, [r6, #4]
 80079a2:	b18b      	cbz	r3, 80079c8 <ai_platform_network_process+0x3bc>
 80079a4:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 80079a8:	b171      	cbz	r1, 80079c8 <ai_platform_network_process+0x3bc>
 80079aa:	6988      	ldr	r0, [r1, #24]
 80079ac:	68b2      	ldr	r2, [r6, #8]
 80079ae:	6803      	ldr	r3, [r0, #0]
 80079b0:	f8d2 9000 	ldr.w	r9, [r2]
 80079b4:	009d      	lsls	r5, r3, #2
 80079b6:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 80079ba:	d5d7      	bpl.n	800796c <ai_platform_network_process+0x360>
 80079bc:	6881      	ldr	r1, [r0, #8]
 80079be:	68a2      	ldr	r2, [r4, #8]
 80079c0:	6860      	ldr	r0, [r4, #4]
 80079c2:	f000 ff1b 	bl	80087fc <st_int8_copy>
 80079c6:	e7da      	b.n	800797e <ai_platform_network_process+0x372>
 80079c8:	4658      	mov	r0, fp
 80079ca:	f000 f903 	bl	8007bd4 <ai_layers_forward_all>
 80079ce:	2f00      	cmp	r7, #0
 80079d0:	d03d      	beq.n	8007a4e <ai_platform_network_process+0x442>
 80079d2:	2400      	movs	r4, #0
 80079d4:	e016      	b.n	8007a04 <ai_platform_network_process+0x3f8>
 80079d6:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 80079da:	f859 100a 	ldr.w	r1, [r9, sl]
 80079de:	4413      	add	r3, r2
 80079e0:	428b      	cmp	r3, r1
 80079e2:	bf24      	itt	cs
 80079e4:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 80079e8:	1acb      	subcs	r3, r1, r3
 80079ea:	f8c8 3004 	str.w	r3, [r8, #4]
 80079ee:	6981      	ldr	r1, [r0, #24]
 80079f0:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 80079f4:	1b52      	subs	r2, r2, r5
 80079f6:	4413      	add	r3, r2
 80079f8:	608b      	str	r3, [r1, #8]
 80079fa:	6983      	ldr	r3, [r0, #24]
 80079fc:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007a00:	60da      	str	r2, [r3, #12]
 8007a02:	3401      	adds	r4, #1
 8007a04:	883b      	ldrh	r3, [r7, #0]
 8007a06:	42a3      	cmp	r3, r4
 8007a08:	d921      	bls.n	8007a4e <ai_platform_network_process+0x442>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	b1fb      	cbz	r3, 8007a4e <ai_platform_network_process+0x442>
 8007a0e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007a12:	b1e0      	cbz	r0, 8007a4e <ai_platform_network_process+0x442>
 8007a14:	68ba      	ldr	r2, [r7, #8]
 8007a16:	6983      	ldr	r3, [r0, #24]
 8007a18:	f8d2 9000 	ldr.w	r9, [r2]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	0092      	lsls	r2, r2, #2
 8007a20:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8007a24:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8007a28:	d5d5      	bpl.n	80079d6 <ai_platform_network_process+0x3ca>
 8007a2a:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8007a2e:	6898      	ldr	r0, [r3, #8]
 8007a30:	f000 fee4 	bl	80087fc <st_int8_copy>
 8007a34:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8007a38:	f859 200a 	ldr.w	r2, [r9, sl]
 8007a3c:	440b      	add	r3, r1
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	bf24      	itt	cs
 8007a42:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8007a46:	1ad3      	subcs	r3, r2, r3
 8007a48:	f8c8 3004 	str.w	r3, [r8, #4]
 8007a4c:	e7d9      	b.n	8007a02 <ai_platform_network_process+0x3f6>
 8007a4e:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8007a52:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8007a56:	3401      	adds	r4, #1
 8007a58:	b2a4      	uxth	r4, r4
 8007a5a:	42a3      	cmp	r3, r4
 8007a5c:	f8ab 4016 	strh.w	r4, [fp, #22]
 8007a60:	f63f af7f 	bhi.w	8007962 <ai_platform_network_process+0x356>
 8007a64:	4620      	mov	r0, r4
 8007a66:	b005      	add	sp, #20
 8007a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a6c:	2a01      	cmp	r2, #1
 8007a6e:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8007a70:	d03c      	beq.n	8007aec <ai_platform_network_process+0x4e0>
 8007a72:	f106 070c 	add.w	r7, r6, #12
 8007a76:	e76f      	b.n	8007958 <ai_platform_network_process+0x34c>
 8007a78:	4625      	mov	r5, r4
 8007a7a:	2218      	movs	r2, #24
 8007a7c:	2113      	movs	r1, #19
 8007a7e:	f105 0010 	add.w	r0, r5, #16
 8007a82:	f000 f84f 	bl	8007b24 <core_set_error>
 8007a86:	2400      	movs	r4, #0
 8007a88:	e72d      	b.n	80078e6 <ai_platform_network_process+0x2da>
 8007a8a:	9d02      	ldr	r5, [sp, #8]
 8007a8c:	4604      	mov	r4, r0
 8007a8e:	2221      	movs	r2, #33	; 0x21
 8007a90:	2112      	movs	r1, #18
 8007a92:	f105 0010 	add.w	r0, r5, #16
 8007a96:	f000 f845 	bl	8007b24 <core_set_error>
 8007a9a:	e724      	b.n	80078e6 <ai_platform_network_process+0x2da>
 8007a9c:	9d02      	ldr	r5, [sp, #8]
 8007a9e:	e71b      	b.n	80078d8 <ai_platform_network_process+0x2cc>
 8007aa0:	9d02      	ldr	r5, [sp, #8]
 8007aa2:	4604      	mov	r4, r0
 8007aa4:	2217      	movs	r2, #23
 8007aa6:	2112      	movs	r1, #18
 8007aa8:	f105 0010 	add.w	r0, r5, #16
 8007aac:	f000 f83a 	bl	8007b24 <core_set_error>
 8007ab0:	e719      	b.n	80078e6 <ai_platform_network_process+0x2da>
 8007ab2:	9d02      	ldr	r5, [sp, #8]
 8007ab4:	2219      	movs	r2, #25
 8007ab6:	2112      	movs	r1, #18
 8007ab8:	f105 0010 	add.w	r0, r5, #16
 8007abc:	f000 f832 	bl	8007b24 <core_set_error>
 8007ac0:	2400      	movs	r4, #0
 8007ac2:	e710      	b.n	80078e6 <ai_platform_network_process+0x2da>
 8007ac4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8007ac8:	82ab      	strh	r3, [r5, #20]
 8007aca:	e740      	b.n	800794e <ai_platform_network_process+0x342>
 8007acc:	f104 0010 	add.w	r0, r4, #16
 8007ad0:	2219      	movs	r2, #25
 8007ad2:	2113      	movs	r1, #19
 8007ad4:	f000 f826 	bl	8007b24 <core_set_error>
 8007ad8:	2400      	movs	r4, #0
 8007ada:	e704      	b.n	80078e6 <ai_platform_network_process+0x2da>
 8007adc:	f104 0010 	add.w	r0, r4, #16
 8007ae0:	2217      	movs	r2, #23
 8007ae2:	2113      	movs	r1, #19
 8007ae4:	f000 f81e 	bl	8007b24 <core_set_error>
 8007ae8:	4654      	mov	r4, sl
 8007aea:	e6fc      	b.n	80078e6 <ai_platform_network_process+0x2da>
 8007aec:	2700      	movs	r7, #0
 8007aee:	e733      	b.n	8007958 <ai_platform_network_process+0x34c>
 8007af0:	4625      	mov	r5, r4
 8007af2:	2221      	movs	r2, #33	; 0x21
 8007af4:	4604      	mov	r4, r0
 8007af6:	2113      	movs	r1, #19
 8007af8:	f105 0010 	add.w	r0, r5, #16
 8007afc:	f000 f812 	bl	8007b24 <core_set_error>
 8007b00:	e6f1      	b.n	80078e6 <ai_platform_network_process+0x2da>
 8007b02:	4625      	mov	r5, r4
 8007b04:	2217      	movs	r2, #23
 8007b06:	4604      	mov	r4, r0
 8007b08:	2113      	movs	r1, #19
 8007b0a:	f105 0010 	add.w	r0, r5, #16
 8007b0e:	f000 f809 	bl	8007b24 <core_set_error>
 8007b12:	e6e8      	b.n	80078e6 <ai_platform_network_process+0x2da>

08007b14 <core_init>:
 8007b14:	2001      	movs	r0, #1
 8007b16:	4770      	bx	lr

08007b18 <core_get_error>:
 8007b18:	4603      	mov	r3, r0
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	6800      	ldr	r0, [r0, #0]
 8007b1e:	601a      	str	r2, [r3, #0]
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop

08007b24 <core_set_error>:
 8007b24:	4603      	mov	r3, r0
 8007b26:	7800      	ldrb	r0, [r0, #0]
 8007b28:	b108      	cbz	r0, 8007b2e <core_set_error+0xa>
 8007b2a:	2000      	movs	r0, #0
 8007b2c:	4770      	bx	lr
 8007b2e:	7019      	strb	r1, [r3, #0]
 8007b30:	6819      	ldr	r1, [r3, #0]
 8007b32:	f362 211f 	bfi	r1, r2, #8, #24
 8007b36:	2001      	movs	r0, #1
 8007b38:	6019      	str	r1, [r3, #0]
 8007b3a:	4770      	bx	lr

08007b3c <ai_check_custom_types>:
 8007b3c:	b082      	sub	sp, #8
 8007b3e:	4b13      	ldr	r3, [pc, #76]	; (8007b8c <ai_check_custom_types+0x50>)
 8007b40:	9301      	str	r3, [sp, #4]
 8007b42:	b118      	cbz	r0, 8007b4c <ai_check_custom_types+0x10>
 8007b44:	7803      	ldrb	r3, [r0, #0]
 8007b46:	2b03      	cmp	r3, #3
 8007b48:	d002      	beq.n	8007b50 <ai_check_custom_types+0x14>
 8007b4a:	2000      	movs	r0, #0
 8007b4c:	b002      	add	sp, #8
 8007b4e:	4770      	bx	lr
 8007b50:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d004      	beq.n	8007b62 <ai_check_custom_types+0x26>
 8007b58:	2001      	movs	r0, #1
 8007b5a:	f080 0001 	eor.w	r0, r0, #1
 8007b5e:	b002      	add	sp, #8
 8007b60:	4770      	bx	lr
 8007b62:	7842      	ldrb	r2, [r0, #1]
 8007b64:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	f100 0001 	add.w	r0, r0, #1
 8007b6e:	d1f3      	bne.n	8007b58 <ai_check_custom_types+0x1c>
 8007b70:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8007b74:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d1ed      	bne.n	8007b58 <ai_check_custom_types+0x1c>
 8007b7c:	7842      	ldrb	r2, [r0, #1]
 8007b7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d1e8      	bne.n	8007b58 <ai_check_custom_types+0x1c>
 8007b86:	2000      	movs	r0, #0
 8007b88:	e7e7      	b.n	8007b5a <ai_check_custom_types+0x1e>
 8007b8a:	bf00      	nop
 8007b8c:	84048403 	.word	0x84048403

08007b90 <ai_layers_init_all>:
 8007b90:	4601      	mov	r1, r0
 8007b92:	2000      	movs	r0, #0
 8007b94:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8007b96:	b143      	cbz	r3, 8007baa <ai_layers_init_all+0x1a>
 8007b98:	691a      	ldr	r2, [r3, #16]
 8007b9a:	60d9      	str	r1, [r3, #12]
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	f100 0001 	add.w	r0, r0, #1
 8007ba2:	d002      	beq.n	8007baa <ai_layers_init_all+0x1a>
 8007ba4:	b10a      	cbz	r2, 8007baa <ai_layers_init_all+0x1a>
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	e7f5      	b.n	8007b96 <ai_layers_init_all+0x6>
 8007baa:	4770      	bx	lr

08007bac <ai_layers_post_init_all>:
 8007bac:	b538      	push	{r3, r4, r5, lr}
 8007bae:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8007bb0:	2500      	movs	r5, #0
 8007bb2:	b16c      	cbz	r4, 8007bd0 <ai_layers_post_init_all+0x24>
 8007bb4:	6863      	ldr	r3, [r4, #4]
 8007bb6:	07db      	lsls	r3, r3, #31
 8007bb8:	d504      	bpl.n	8007bc4 <ai_layers_post_init_all+0x18>
 8007bba:	6a23      	ldr	r3, [r4, #32]
 8007bbc:	4620      	mov	r0, r4
 8007bbe:	b10b      	cbz	r3, 8007bc4 <ai_layers_post_init_all+0x18>
 8007bc0:	4798      	blx	r3
 8007bc2:	3501      	adds	r5, #1
 8007bc4:	6923      	ldr	r3, [r4, #16]
 8007bc6:	42a3      	cmp	r3, r4
 8007bc8:	d002      	beq.n	8007bd0 <ai_layers_post_init_all+0x24>
 8007bca:	b10b      	cbz	r3, 8007bd0 <ai_layers_post_init_all+0x24>
 8007bcc:	461c      	mov	r4, r3
 8007bce:	e7f0      	b.n	8007bb2 <ai_layers_post_init_all+0x6>
 8007bd0:	4628      	mov	r0, r5
 8007bd2:	bd38      	pop	{r3, r4, r5, pc}

08007bd4 <ai_layers_forward_all>:
 8007bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bd8:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 8007bdc:	4604      	mov	r4, r0
 8007bde:	f1b8 0f00 	cmp.w	r8, #0
 8007be2:	d02b      	beq.n	8007c3c <ai_layers_forward_all+0x68>
 8007be4:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8007be6:	6381      	str	r1, [r0, #56]	; 0x38
 8007be8:	b321      	cbz	r1, 8007c34 <ai_layers_forward_all+0x60>
 8007bea:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8007bec:	2001      	movs	r0, #1
 8007bee:	47c0      	blx	r8
 8007bf0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8007bf2:	b1fe      	cbz	r6, 8007c34 <ai_layers_forward_all+0x60>
 8007bf4:	2700      	movs	r7, #0
 8007bf6:	4631      	mov	r1, r6
 8007bf8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007bfa:	2002      	movs	r0, #2
 8007bfc:	47c0      	blx	r8
 8007bfe:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8007c00:	4628      	mov	r0, r5
 8007c02:	696b      	ldr	r3, [r5, #20]
 8007c04:	4798      	blx	r3
 8007c06:	692e      	ldr	r6, [r5, #16]
 8007c08:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007c0a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007c0c:	42b5      	cmp	r5, r6
 8007c0e:	f04f 0003 	mov.w	r0, #3
 8007c12:	d007      	beq.n	8007c24 <ai_layers_forward_all+0x50>
 8007c14:	47c0      	blx	r8
 8007c16:	3701      	adds	r7, #1
 8007c18:	63a6      	str	r6, [r4, #56]	; 0x38
 8007c1a:	2e00      	cmp	r6, #0
 8007c1c:	d1eb      	bne.n	8007bf6 <ai_layers_forward_all+0x22>
 8007c1e:	4638      	mov	r0, r7
 8007c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c24:	2003      	movs	r0, #3
 8007c26:	47c0      	blx	r8
 8007c28:	2300      	movs	r3, #0
 8007c2a:	3701      	adds	r7, #1
 8007c2c:	63a3      	str	r3, [r4, #56]	; 0x38
 8007c2e:	4638      	mov	r0, r7
 8007c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c34:	2700      	movs	r7, #0
 8007c36:	4638      	mov	r0, r7
 8007c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c3c:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8007c3e:	6385      	str	r5, [r0, #56]	; 0x38
 8007c40:	2d00      	cmp	r5, #0
 8007c42:	d0f7      	beq.n	8007c34 <ai_layers_forward_all+0x60>
 8007c44:	4647      	mov	r7, r8
 8007c46:	696b      	ldr	r3, [r5, #20]
 8007c48:	4628      	mov	r0, r5
 8007c4a:	4798      	blx	r3
 8007c4c:	462b      	mov	r3, r5
 8007c4e:	692d      	ldr	r5, [r5, #16]
 8007c50:	429d      	cmp	r5, r3
 8007c52:	d004      	beq.n	8007c5e <ai_layers_forward_all+0x8a>
 8007c54:	63a5      	str	r5, [r4, #56]	; 0x38
 8007c56:	3701      	adds	r7, #1
 8007c58:	2d00      	cmp	r5, #0
 8007c5a:	d1f4      	bne.n	8007c46 <ai_layers_forward_all+0x72>
 8007c5c:	e7df      	b.n	8007c1e <ai_layers_forward_all+0x4a>
 8007c5e:	2300      	movs	r3, #0
 8007c60:	63a3      	str	r3, [r4, #56]	; 0x38
 8007c62:	3701      	adds	r7, #1
 8007c64:	e7db      	b.n	8007c1e <ai_layers_forward_all+0x4a>
 8007c66:	bf00      	nop

08007c68 <forward_dense>:
 8007c68:	6983      	ldr	r3, [r0, #24]
 8007c6a:	881a      	ldrh	r2, [r3, #0]
 8007c6c:	2a00      	cmp	r2, #0
 8007c6e:	f000 8181 	beq.w	8007f74 <forward_dense+0x30c>
 8007c72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c76:	ed2d 8b02 	vpush	{d8}
 8007c7a:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8007c7e:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8007c82:	b095      	sub	sp, #84	; 0x54
 8007c84:	b105      	cbz	r5, 8007c88 <forward_dense+0x20>
 8007c86:	682d      	ldr	r5, [r5, #0]
 8007c88:	2a01      	cmp	r2, #1
 8007c8a:	f000 828f 	beq.w	80081ac <forward_dense+0x544>
 8007c8e:	f8dc 6010 	ldr.w	r6, [ip, #16]
 8007c92:	b106      	cbz	r6, 8007c96 <forward_dense+0x2e>
 8007c94:	6836      	ldr	r6, [r6, #0]
 8007c96:	2a02      	cmp	r2, #2
 8007c98:	f000 816e 	beq.w	8007f78 <forward_dense+0x310>
 8007c9c:	f8dc 301c 	ldr.w	r3, [ip, #28]
 8007ca0:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	f000 8274 	beq.w	8008190 <forward_dense+0x528>
 8007ca8:	4619      	mov	r1, r3
 8007caa:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 8007cae:	6809      	ldr	r1, [r1, #0]
 8007cb0:	910d      	str	r1, [sp, #52]	; 0x34
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	f240 826e 	bls.w	8008194 <forward_dense+0x52c>
 8007cb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	930b      	str	r3, [sp, #44]	; 0x2c
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	68e8      	ldr	r0, [r5, #12]
 8007cc2:	68f7      	ldr	r7, [r6, #12]
 8007cc4:	6840      	ldr	r0, [r0, #4]
 8007cc6:	6999      	ldr	r1, [r3, #24]
 8007cc8:	9013      	str	r0, [sp, #76]	; 0x4c
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	680b      	ldr	r3, [r1, #0]
 8007cce:	9012      	str	r0, [sp, #72]	; 0x48
 8007cd0:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 8007cd4:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 8007cd8:	fb00 f404 	mul.w	r4, r0, r4
 8007cdc:	f3c3 5041 	ubfx	r0, r3, #21, #2
 8007ce0:	fa4e f000 	asr.w	r0, lr, r0
 8007ce4:	2a03      	cmp	r2, #3
 8007ce6:	9010      	str	r0, [sp, #64]	; 0x40
 8007ce8:	f000 825d 	beq.w	80081a6 <forward_dense+0x53e>
 8007cec:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 8007cf0:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8007cf4:	2a00      	cmp	r2, #0
 8007cf6:	f000 8246 	beq.w	8008186 <forward_dense+0x51e>
 8007cfa:	6812      	ldr	r2, [r2, #0]
 8007cfc:	2a00      	cmp	r2, #0
 8007cfe:	f000 8242 	beq.w	8008186 <forward_dense+0x51e>
 8007d02:	2b04      	cmp	r3, #4
 8007d04:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8007d08:	f000 822c 	beq.w	8008164 <forward_dense+0x4fc>
 8007d0c:	2b08      	cmp	r3, #8
 8007d0e:	f000 8229 	beq.w	8008164 <forward_dense+0x4fc>
 8007d12:	f04f 0b00 	mov.w	fp, #0
 8007d16:	69b2      	ldr	r2, [r6, #24]
 8007d18:	69ab      	ldr	r3, [r5, #24]
 8007d1a:	6891      	ldr	r1, [r2, #8]
 8007d1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	6952      	ldr	r2, [r2, #20]
 8007d22:	9106      	str	r1, [sp, #24]
 8007d24:	fb07 f404 	mul.w	r4, r7, r4
 8007d28:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8007d2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007d2e:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8007d32:	4281      	cmp	r1, r0
 8007d34:	ea4f 0482 	mov.w	r4, r2, lsl #2
 8007d38:	900e      	str	r0, [sp, #56]	; 0x38
 8007d3a:	940c      	str	r4, [sp, #48]	; 0x30
 8007d3c:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 8007d40:	f080 8113 	bcs.w	8007f6a <forward_dense+0x302>
 8007d44:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007d46:	ed9f 8a93 	vldr	s16, [pc, #588]	; 8007f94 <forward_dense+0x32c>
 8007d4a:	f021 0201 	bic.w	r2, r1, #1
 8007d4e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8007d52:	9204      	str	r2, [sp, #16]
 8007d54:	f001 0201 	and.w	r2, r1, #1
 8007d58:	08c8      	lsrs	r0, r1, #3
 8007d5a:	9208      	str	r2, [sp, #32]
 8007d5c:	008a      	lsls	r2, r1, #2
 8007d5e:	f001 0a07 	and.w	sl, r1, #7
 8007d62:	920f      	str	r2, [sp, #60]	; 0x3c
 8007d64:	eb03 1240 	add.w	r2, r3, r0, lsl #5
 8007d68:	3320      	adds	r3, #32
 8007d6a:	465c      	mov	r4, fp
 8007d6c:	9007      	str	r0, [sp, #28]
 8007d6e:	46cb      	mov	fp, r9
 8007d70:	9205      	str	r2, [sp, #20]
 8007d72:	9302      	str	r3, [sp, #8]
 8007d74:	46c1      	mov	r9, r8
 8007d76:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8007d7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d7c:	699b      	ldr	r3, [r3, #24]
 8007d7e:	689a      	ldr	r2, [r3, #8]
 8007d80:	9b02      	ldr	r3, [sp, #8]
 8007d82:	3b20      	subs	r3, #32
 8007d84:	930a      	str	r3, [sp, #40]	; 0x28
 8007d86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d88:	b10b      	cbz	r3, 8007d8e <forward_dense+0x126>
 8007d8a:	699b      	ldr	r3, [r3, #24]
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	2c00      	cmp	r4, #0
 8007d90:	f000 81da 	beq.w	8008148 <forward_dense+0x4e0>
 8007d94:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007d96:	2904      	cmp	r1, #4
 8007d98:	9906      	ldr	r1, [sp, #24]
 8007d9a:	f000 80fd 	beq.w	8007f98 <forward_dense+0x330>
 8007d9e:	4549      	cmp	r1, r9
 8007da0:	f080 80d2 	bcs.w	8007f48 <forward_dense+0x2e0>
 8007da4:	460f      	mov	r7, r1
 8007da6:	9907      	ldr	r1, [sp, #28]
 8007da8:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007dac:	f8dd a014 	ldr.w	sl, [sp, #20]
 8007db0:	1c4e      	adds	r6, r1, #1
 8007db2:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8007db6:	4694      	mov	ip, r2
 8007db8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007dba:	468e      	mov	lr, r1
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	f000 80de 	beq.w	8007f7e <forward_dense+0x316>
 8007dc2:	ecf3 2a01 	vldmia	r3!, {s5}
 8007dc6:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8007f94 <forward_dense+0x32c>
 8007dca:	f1be 0f00 	cmp.w	lr, #0
 8007dce:	f000 80de 	beq.w	8007f8e <forward_dense+0x326>
 8007dd2:	f10c 0108 	add.w	r1, ip, #8
 8007dd6:	4640      	mov	r0, r8
 8007dd8:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8007ddc:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 8007de0:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 8007de4:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 8007de8:	ed50 4a05 	vldr	s9, [r0, #-20]	; 0xffffffec
 8007dec:	ed10 5a04 	vldr	s10, [r0, #-16]
 8007df0:	ed50 5a03 	vldr	s11, [r0, #-12]
 8007df4:	ed10 6a02 	vldr	s12, [r0, #-8]
 8007df8:	ed50 6a01 	vldr	s13, [r0, #-4]
 8007dfc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007e00:	edd5 7a00 	vldr	s15, [r5]
 8007e04:	f811 5c08 	ldrb.w	r5, [r1, #-8]
 8007e08:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007e0c:	ee67 7a83 	vmul.f32	s15, s15, s6
 8007e10:	ed95 3a00 	vldr	s6, [r5]
 8007e14:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 8007e18:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007e1c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007e20:	3108      	adds	r1, #8
 8007e22:	edd5 3a00 	vldr	s7, [r5]
 8007e26:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 8007e2a:	eee3 7a84 	vfma.f32	s15, s7, s8
 8007e2e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007e32:	3020      	adds	r0, #32
 8007e34:	ed95 4a00 	vldr	s8, [r5]
 8007e38:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8007e3c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007e40:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007e44:	edd5 4a00 	vldr	s9, [r5]
 8007e48:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8007e4c:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007e50:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007e54:	ed95 5a00 	vldr	s10, [r5]
 8007e58:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8007e5c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007e60:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007e64:	edd5 5a00 	vldr	s11, [r5]
 8007e68:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 8007e6c:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007e70:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007e74:	428e      	cmp	r6, r1
 8007e76:	ed95 6a00 	vldr	s12, [r5]
 8007e7a:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007e7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007e82:	d1a9      	bne.n	8007dd8 <forward_dense+0x170>
 8007e84:	f1a6 0108 	sub.w	r1, r6, #8
 8007e88:	4650      	mov	r0, sl
 8007e8a:	2a00      	cmp	r2, #0
 8007e8c:	d04a      	beq.n	8007f24 <forward_dense+0x2bc>
 8007e8e:	780d      	ldrb	r5, [r1, #0]
 8007e90:	edd0 6a00 	vldr	s13, [r0]
 8007e94:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007e98:	edd5 7a00 	vldr	s15, [r5]
 8007e9c:	2a01      	cmp	r2, #1
 8007e9e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007ea2:	d03f      	beq.n	8007f24 <forward_dense+0x2bc>
 8007ea4:	784d      	ldrb	r5, [r1, #1]
 8007ea6:	edd0 6a01 	vldr	s13, [r0, #4]
 8007eaa:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007eae:	edd5 7a00 	vldr	s15, [r5]
 8007eb2:	2a02      	cmp	r2, #2
 8007eb4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007eb8:	d034      	beq.n	8007f24 <forward_dense+0x2bc>
 8007eba:	788d      	ldrb	r5, [r1, #2]
 8007ebc:	edd0 6a02 	vldr	s13, [r0, #8]
 8007ec0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007ec4:	edd5 7a00 	vldr	s15, [r5]
 8007ec8:	2a03      	cmp	r2, #3
 8007eca:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007ece:	d029      	beq.n	8007f24 <forward_dense+0x2bc>
 8007ed0:	78cd      	ldrb	r5, [r1, #3]
 8007ed2:	edd0 6a03 	vldr	s13, [r0, #12]
 8007ed6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007eda:	edd5 7a00 	vldr	s15, [r5]
 8007ede:	2a04      	cmp	r2, #4
 8007ee0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007ee4:	d01e      	beq.n	8007f24 <forward_dense+0x2bc>
 8007ee6:	790d      	ldrb	r5, [r1, #4]
 8007ee8:	edd0 6a04 	vldr	s13, [r0, #16]
 8007eec:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007ef0:	edd5 7a00 	vldr	s15, [r5]
 8007ef4:	2a05      	cmp	r2, #5
 8007ef6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007efa:	d013      	beq.n	8007f24 <forward_dense+0x2bc>
 8007efc:	794d      	ldrb	r5, [r1, #5]
 8007efe:	edd0 6a05 	vldr	s13, [r0, #20]
 8007f02:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007f06:	edd5 7a00 	vldr	s15, [r5]
 8007f0a:	2a06      	cmp	r2, #6
 8007f0c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007f10:	d008      	beq.n	8007f24 <forward_dense+0x2bc>
 8007f12:	7989      	ldrb	r1, [r1, #6]
 8007f14:	edd0 7a06 	vldr	s15, [r0, #24]
 8007f18:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007f1c:	edd1 6a00 	vldr	s13, [r1]
 8007f20:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007f24:	44dc      	add	ip, fp
 8007f26:	445e      	add	r6, fp
 8007f28:	ee32 7a87 	vadd.f32	s14, s5, s14
 8007f2c:	eca7 7a01 	vstmia	r7!, {s14}
 8007f30:	454f      	cmp	r7, r9
 8007f32:	f4ff af43 	bcc.w	8007dbc <forward_dense+0x154>
 8007f36:	9a06      	ldr	r2, [sp, #24]
 8007f38:	eba9 0302 	sub.w	r3, r9, r2
 8007f3c:	3b01      	subs	r3, #1
 8007f3e:	f023 0303 	bic.w	r3, r3, #3
 8007f42:	3304      	adds	r3, #4
 8007f44:	18d3      	adds	r3, r2, r3
 8007f46:	9306      	str	r3, [sp, #24]
 8007f48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f4a:	9a05      	ldr	r2, [sp, #20]
 8007f4c:	4499      	add	r9, r3
 8007f4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f50:	441a      	add	r2, r3
 8007f52:	9205      	str	r2, [sp, #20]
 8007f54:	9a02      	ldr	r2, [sp, #8]
 8007f56:	441a      	add	r2, r3
 8007f58:	9202      	str	r2, [sp, #8]
 8007f5a:	9a04      	ldr	r2, [sp, #16]
 8007f5c:	441a      	add	r2, r3
 8007f5e:	9204      	str	r2, [sp, #16]
 8007f60:	9b06      	ldr	r3, [sp, #24]
 8007f62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f64:	4293      	cmp	r3, r2
 8007f66:	f4ff af08 	bcc.w	8007d7a <forward_dense+0x112>
 8007f6a:	b015      	add	sp, #84	; 0x54
 8007f6c:	ecbd 8b02 	vpop	{d8}
 8007f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f74:	6853      	ldr	r3, [r2, #4]
 8007f76:	deff      	udf	#255	; 0xff
 8007f78:	2300      	movs	r3, #0
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	deff      	udf	#255	; 0xff
 8007f7e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8007f94 <forward_dense+0x32c>
 8007f82:	eef0 2a48 	vmov.f32	s5, s16
 8007f86:	f1be 0f00 	cmp.w	lr, #0
 8007f8a:	f47f af22 	bne.w	8007dd2 <forward_dense+0x16a>
 8007f8e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007f90:	4661      	mov	r1, ip
 8007f92:	e77a      	b.n	8007e8a <forward_dense+0x222>
 8007f94:	00000000 	.word	0x00000000
 8007f98:	4549      	cmp	r1, r9
 8007f9a:	d2d5      	bcs.n	8007f48 <forward_dense+0x2e0>
 8007f9c:	9807      	ldr	r0, [sp, #28]
 8007f9e:	9103      	str	r1, [sp, #12]
 8007fa0:	9904      	ldr	r1, [sp, #16]
 8007fa2:	f100 0c01 	add.w	ip, r0, #1
 8007fa6:	3901      	subs	r1, #1
 8007fa8:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8007fac:	9109      	str	r1, [sp, #36]	; 0x24
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	f000 80b2 	beq.w	8008118 <forward_dense+0x4b0>
 8007fb4:	9907      	ldr	r1, [sp, #28]
 8007fb6:	ecf3 2a01 	vldmia	r3!, {s5}
 8007fba:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 8007f94 <forward_dense+0x32c>
 8007fbe:	2900      	cmp	r1, #0
 8007fc0:	f000 80b2 	beq.w	8008128 <forward_dense+0x4c0>
 8007fc4:	9902      	ldr	r1, [sp, #8]
 8007fc6:	1d10      	adds	r0, r2, #4
 8007fc8:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 8007fcc:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 8007fd0:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 8007fd4:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 8007fd8:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 8007fdc:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
 8007fe0:	ed11 5a04 	vldr	s10, [r1, #-16]
 8007fe4:	ed51 5a03 	vldr	s11, [r1, #-12]
 8007fe8:	ed11 6a02 	vldr	s12, [r1, #-8]
 8007fec:	ed51 6a01 	vldr	s13, [r1, #-4]
 8007ff0:	f006 070f 	and.w	r7, r6, #15
 8007ff4:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8007ff8:	edd7 7a00 	vldr	s15, [r7]
 8007ffc:	0936      	lsrs	r6, r6, #4
 8007ffe:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008002:	ed96 3a00 	vldr	s6, [r6]
 8008006:	ee67 7a82 	vmul.f32	s15, s15, s4
 800800a:	092e      	lsrs	r6, r5, #4
 800800c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008010:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008014:	f005 050f 	and.w	r5, r5, #15
 8008018:	edd6 3a00 	vldr	s7, [r6]
 800801c:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 8008020:	eee3 7a84 	vfma.f32	s15, s7, s8
 8008024:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008028:	0937      	lsrs	r7, r6, #4
 800802a:	ed95 4a00 	vldr	s8, [r5]
 800802e:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 8008032:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008036:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800803a:	f006 060f 	and.w	r6, r6, #15
 800803e:	edd7 4a00 	vldr	s9, [r7]
 8008042:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008046:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800804a:	3004      	adds	r0, #4
 800804c:	ed96 5a00 	vldr	s10, [r6]
 8008050:	092e      	lsrs	r6, r5, #4
 8008052:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008056:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800805a:	f005 050f 	and.w	r5, r5, #15
 800805e:	edd6 5a00 	vldr	s11, [r6]
 8008062:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008066:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800806a:	4584      	cmp	ip, r0
 800806c:	ed95 6a00 	vldr	s12, [r5]
 8008070:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008074:	f101 0120 	add.w	r1, r1, #32
 8008078:	ee37 7a27 	vadd.f32	s14, s14, s15
 800807c:	d1a4      	bne.n	8007fc8 <forward_dense+0x360>
 800807e:	f8dd e014 	ldr.w	lr, [sp, #20]
 8008082:	f1ac 0804 	sub.w	r8, ip, #4
 8008086:	9904      	ldr	r1, [sp, #16]
 8008088:	458e      	cmp	lr, r1
 800808a:	d22a      	bcs.n	80080e2 <forward_dense+0x47a>
 800808c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800808e:	eba1 070e 	sub.w	r7, r1, lr
 8008092:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
 8008096:	f10e 0008 	add.w	r0, lr, #8
 800809a:	f108 36ff 	add.w	r6, r8, #4294967295
 800809e:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 80080a2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80080a6:	ed50 5a01 	vldr	s11, [r0, #-4]
 80080aa:	ed50 6a02 	vldr	s13, [r0, #-8]
 80080ae:	f001 050f 	and.w	r5, r1, #15
 80080b2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80080b6:	edd5 7a00 	vldr	s15, [r5]
 80080ba:	0909      	lsrs	r1, r1, #4
 80080bc:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80080c0:	ed91 6a00 	vldr	s12, [r1]
 80080c4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80080c8:	42b7      	cmp	r7, r6
 80080ca:	eee6 7a26 	vfma.f32	s15, s12, s13
 80080ce:	f100 0008 	add.w	r0, r0, #8
 80080d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80080d6:	d1e4      	bne.n	80080a2 <forward_dense+0x43a>
 80080d8:	f10a 0a01 	add.w	sl, sl, #1
 80080dc:	44d0      	add	r8, sl
 80080de:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 80080e2:	9908      	ldr	r1, [sp, #32]
 80080e4:	b321      	cbz	r1, 8008130 <forward_dense+0x4c8>
 80080e6:	f898 1000 	ldrb.w	r1, [r8]
 80080ea:	edde 7a00 	vldr	s15, [lr]
 80080ee:	0909      	lsrs	r1, r1, #4
 80080f0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80080f4:	edd1 6a00 	vldr	s13, [r1]
 80080f8:	9903      	ldr	r1, [sp, #12]
 80080fa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80080fe:	445a      	add	r2, fp
 8008100:	44dc      	add	ip, fp
 8008102:	ee72 2a87 	vadd.f32	s5, s5, s14
 8008106:	ece1 2a01 	vstmia	r1!, {s5}
 800810a:	4589      	cmp	r9, r1
 800810c:	9103      	str	r1, [sp, #12]
 800810e:	f67f af12 	bls.w	8007f36 <forward_dense+0x2ce>
 8008112:	2b00      	cmp	r3, #0
 8008114:	f47f af4e 	bne.w	8007fb4 <forward_dense+0x34c>
 8008118:	9907      	ldr	r1, [sp, #28]
 800811a:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 8007f94 <forward_dense+0x32c>
 800811e:	eef0 2a48 	vmov.f32	s5, s16
 8008122:	2900      	cmp	r1, #0
 8008124:	f47f af4e 	bne.w	8007fc4 <forward_dense+0x35c>
 8008128:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 800812c:	4690      	mov	r8, r2
 800812e:	e7aa      	b.n	8008086 <forward_dense+0x41e>
 8008130:	9903      	ldr	r1, [sp, #12]
 8008132:	ee32 7a87 	vadd.f32	s14, s5, s14
 8008136:	445a      	add	r2, fp
 8008138:	eca1 7a01 	vstmia	r1!, {s14}
 800813c:	4549      	cmp	r1, r9
 800813e:	9103      	str	r1, [sp, #12]
 8008140:	44dc      	add	ip, fp
 8008142:	f4ff af34 	bcc.w	8007fae <forward_dense+0x346>
 8008146:	e6f6      	b.n	8007f36 <forward_dense+0x2ce>
 8008148:	9912      	ldr	r1, [sp, #72]	; 0x48
 800814a:	9d06      	ldr	r5, [sp, #24]
 800814c:	9101      	str	r1, [sp, #4]
 800814e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008150:	9100      	str	r1, [sp, #0]
 8008152:	4628      	mov	r0, r5
 8008154:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008156:	f000 fa2d 	bl	80085b4 <forward_lite_dense_if32of32wf32>
 800815a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800815c:	462b      	mov	r3, r5
 800815e:	4413      	add	r3, r2
 8008160:	9306      	str	r3, [sp, #24]
 8008162:	e6f1      	b.n	8007f48 <forward_dense+0x2e0>
 8008164:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8008168:	f1b9 0f00 	cmp.w	r9, #0
 800816c:	d016      	beq.n	800819c <forward_dense+0x534>
 800816e:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008172:	f000 fc35 	bl	80089e0 <ai_array_get_byte_size>
 8008176:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 800817a:	4602      	mov	r2, r0
 800817c:	4659      	mov	r1, fp
 800817e:	4640      	mov	r0, r8
 8008180:	f000 fb3c 	bl	80087fc <st_int8_copy>
 8008184:	e5c7      	b.n	8007d16 <forward_dense+0xae>
 8008186:	2b04      	cmp	r3, #4
 8008188:	d00a      	beq.n	80081a0 <forward_dense+0x538>
 800818a:	f04f 0900 	mov.w	r9, #0
 800818e:	e5bd      	b.n	8007d0c <forward_dense+0xa4>
 8008190:	930d      	str	r3, [sp, #52]	; 0x34
 8008192:	e595      	b.n	8007cc0 <forward_dense+0x58>
 8008194:	2300      	movs	r3, #0
 8008196:	930b      	str	r3, [sp, #44]	; 0x2c
 8008198:	460b      	mov	r3, r1
 800819a:	e591      	b.n	8007cc0 <forward_dense+0x58>
 800819c:	46c3      	mov	fp, r8
 800819e:	e5ba      	b.n	8007d16 <forward_dense+0xae>
 80081a0:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 80081a4:	e5b7      	b.n	8007d16 <forward_dense+0xae>
 80081a6:	2300      	movs	r3, #0
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	deff      	udf	#255	; 0xff
 80081ac:	2300      	movs	r3, #0
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	deff      	udf	#255	; 0xff
 80081b2:	bf00      	nop

080081b4 <forward_tanh>:
 80081b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081b6:	6982      	ldr	r2, [r0, #24]
 80081b8:	8813      	ldrh	r3, [r2, #0]
 80081ba:	b38b      	cbz	r3, 8008220 <forward_tanh+0x6c>
 80081bc:	6852      	ldr	r2, [r2, #4]
 80081be:	6854      	ldr	r4, [r2, #4]
 80081c0:	b104      	cbz	r4, 80081c4 <forward_tanh+0x10>
 80081c2:	6824      	ldr	r4, [r4, #0]
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d02a      	beq.n	800821e <forward_tanh+0x6a>
 80081c8:	6915      	ldr	r5, [r2, #16]
 80081ca:	b105      	cbz	r5, 80081ce <forward_tanh+0x1a>
 80081cc:	682d      	ldr	r5, [r5, #0]
 80081ce:	68a3      	ldr	r3, [r4, #8]
 80081d0:	0a1b      	lsrs	r3, r3, #8
 80081d2:	d027      	beq.n	8008224 <forward_tanh+0x70>
 80081d4:	68e0      	ldr	r0, [r4, #12]
 80081d6:	2201      	movs	r2, #1
 80081d8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80081dc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80081e0:	4298      	cmp	r0, r3
 80081e2:	fb01 f202 	mul.w	r2, r1, r2
 80081e6:	d1f9      	bne.n	80081dc <forward_tanh+0x28>
 80081e8:	69a7      	ldr	r7, [r4, #24]
 80081ea:	69a9      	ldr	r1, [r5, #24]
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	688e      	ldr	r6, [r1, #8]
 80081f0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80081f4:	3a01      	subs	r2, #1
 80081f6:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 80081fa:	42ab      	cmp	r3, r5
 80081fc:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 8008200:	d80c      	bhi.n	800821c <forward_tanh+0x68>
 8008202:	3504      	adds	r5, #4
 8008204:	3604      	adds	r6, #4
 8008206:	462c      	mov	r4, r5
 8008208:	ed35 0a01 	vldmdb	r5!, {s0}
 800820c:	f001 fc10 	bl	8009a30 <tanhf>
 8008210:	ed26 0a01 	vstmdb	r6!, {s0}
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	3c08      	subs	r4, #8
 8008218:	42a3      	cmp	r3, r4
 800821a:	d9f4      	bls.n	8008206 <forward_tanh+0x52>
 800821c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800821e:	2300      	movs	r3, #0
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	deff      	udf	#255	; 0xff
 8008224:	69ab      	ldr	r3, [r5, #24]
 8008226:	69a7      	ldr	r7, [r4, #24]
 8008228:	689e      	ldr	r6, [r3, #8]
 800822a:	68bd      	ldr	r5, [r7, #8]
 800822c:	e7e9      	b.n	8008202 <forward_tanh+0x4e>
 800822e:	bf00      	nop

08008230 <forward_relu>:
 8008230:	6982      	ldr	r2, [r0, #24]
 8008232:	8813      	ldrh	r3, [r2, #0]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d05b      	beq.n	80082f0 <forward_relu+0xc0>
 8008238:	6851      	ldr	r1, [r2, #4]
 800823a:	684a      	ldr	r2, [r1, #4]
 800823c:	b102      	cbz	r2, 8008240 <forward_relu+0x10>
 800823e:	6812      	ldr	r2, [r2, #0]
 8008240:	2b01      	cmp	r3, #1
 8008242:	f000 8123 	beq.w	800848c <forward_relu+0x25c>
 8008246:	b470      	push	{r4, r5, r6}
 8008248:	6909      	ldr	r1, [r1, #16]
 800824a:	b101      	cbz	r1, 800824e <forward_relu+0x1e>
 800824c:	6809      	ldr	r1, [r1, #0]
 800824e:	69c6      	ldr	r6, [r0, #28]
 8008250:	2e00      	cmp	r6, #0
 8008252:	f000 8097 	beq.w	8008384 <forward_relu+0x154>
 8008256:	6873      	ldr	r3, [r6, #4]
 8008258:	6988      	ldr	r0, [r1, #24]
 800825a:	6991      	ldr	r1, [r2, #24]
 800825c:	2b01      	cmp	r3, #1
 800825e:	f000 80c1 	beq.w	80083e4 <forward_relu+0x1b4>
 8008262:	6893      	ldr	r3, [r2, #8]
 8008264:	6880      	ldr	r0, [r0, #8]
 8008266:	688c      	ldr	r4, [r1, #8]
 8008268:	0a1b      	lsrs	r3, r3, #8
 800826a:	f000 80f2 	beq.w	8008452 <forward_relu+0x222>
 800826e:	68d5      	ldr	r5, [r2, #12]
 8008270:	2201      	movs	r2, #1
 8008272:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008276:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800827a:	42ab      	cmp	r3, r5
 800827c:	fb01 f202 	mul.w	r2, r1, r2
 8008280:	d1f9      	bne.n	8008276 <forward_relu+0x46>
 8008282:	68b3      	ldr	r3, [r6, #8]
 8008284:	ed93 7a02 	vldr	s14, [r3, #8]
 8008288:	edd3 6a00 	vldr	s13, [r3]
 800828c:	ed93 6a01 	vldr	s12, [r3, #4]
 8008290:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8008294:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8008298:	3a01      	subs	r2, #1
 800829a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800829e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80082a2:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80082a6:	d425      	bmi.n	80082f4 <forward_relu+0xc4>
 80082a8:	429c      	cmp	r4, r3
 80082aa:	d81f      	bhi.n	80082ec <forward_relu+0xbc>
 80082ac:	1d1a      	adds	r2, r3, #4
 80082ae:	1d01      	adds	r1, r0, #4
 80082b0:	e00d      	b.n	80082ce <forward_relu+0x9e>
 80082b2:	eef4 6ae7 	vcmpe.f32	s13, s15
 80082b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082ba:	db03      	blt.n	80082c4 <forward_relu+0x94>
 80082bc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80082c0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80082c4:	3b08      	subs	r3, #8
 80082c6:	429c      	cmp	r4, r3
 80082c8:	ed61 7a01 	vstmdb	r1!, {s15}
 80082cc:	d80e      	bhi.n	80082ec <forward_relu+0xbc>
 80082ce:	4613      	mov	r3, r2
 80082d0:	ed72 7a01 	vldmdb	r2!, {s15}
 80082d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80082d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082dc:	d9e9      	bls.n	80082b2 <forward_relu+0x82>
 80082de:	3b08      	subs	r3, #8
 80082e0:	eef0 7a47 	vmov.f32	s15, s14
 80082e4:	429c      	cmp	r4, r3
 80082e6:	ed61 7a01 	vstmdb	r1!, {s15}
 80082ea:	d9f0      	bls.n	80082ce <forward_relu+0x9e>
 80082ec:	bc70      	pop	{r4, r5, r6}
 80082ee:	4770      	bx	lr
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	deff      	udf	#255	; 0xff
 80082f4:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80082f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082fc:	d11f      	bne.n	800833e <forward_relu+0x10e>
 80082fe:	429c      	cmp	r4, r3
 8008300:	d8f4      	bhi.n	80082ec <forward_relu+0xbc>
 8008302:	1b1c      	subs	r4, r3, r4
 8008304:	f024 0403 	bic.w	r4, r4, #3
 8008308:	1d1a      	adds	r2, r3, #4
 800830a:	2500      	movs	r5, #0
 800830c:	1b1b      	subs	r3, r3, r4
 800830e:	1d01      	adds	r1, r0, #4
 8008310:	ed72 7a01 	vldmdb	r2!, {s15}
 8008314:	eef4 7ae6 	vcmpe.f32	s15, s13
 8008318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800831c:	dc0a      	bgt.n	8008334 <forward_relu+0x104>
 800831e:	429a      	cmp	r2, r3
 8008320:	f841 5d04 	str.w	r5, [r1, #-4]!
 8008324:	d0e2      	beq.n	80082ec <forward_relu+0xbc>
 8008326:	ed72 7a01 	vldmdb	r2!, {s15}
 800832a:	eef4 7ae6 	vcmpe.f32	s15, s13
 800832e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008332:	ddf4      	ble.n	800831e <forward_relu+0xee>
 8008334:	429a      	cmp	r2, r3
 8008336:	ed61 7a01 	vstmdb	r1!, {s15}
 800833a:	d1e9      	bne.n	8008310 <forward_relu+0xe0>
 800833c:	e7d6      	b.n	80082ec <forward_relu+0xbc>
 800833e:	429c      	cmp	r4, r3
 8008340:	d8d4      	bhi.n	80082ec <forward_relu+0xbc>
 8008342:	1b1c      	subs	r4, r3, r4
 8008344:	f024 0403 	bic.w	r4, r4, #3
 8008348:	1d1a      	adds	r2, r3, #4
 800834a:	1d01      	adds	r1, r0, #4
 800834c:	1b1b      	subs	r3, r3, r4
 800834e:	ed72 7a01 	vldmdb	r2!, {s15}
 8008352:	eef4 6ae7 	vcmpe.f32	s13, s15
 8008356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800835a:	db0e      	blt.n	800837a <forward_relu+0x14a>
 800835c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008360:	4293      	cmp	r3, r2
 8008362:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008366:	ed61 7a01 	vstmdb	r1!, {s15}
 800836a:	d0bf      	beq.n	80082ec <forward_relu+0xbc>
 800836c:	ed72 7a01 	vldmdb	r2!, {s15}
 8008370:	eef4 6ae7 	vcmpe.f32	s13, s15
 8008374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008378:	daf0      	bge.n	800835c <forward_relu+0x12c>
 800837a:	4293      	cmp	r3, r2
 800837c:	ed61 7a01 	vstmdb	r1!, {s15}
 8008380:	d1e5      	bne.n	800834e <forward_relu+0x11e>
 8008382:	e7b3      	b.n	80082ec <forward_relu+0xbc>
 8008384:	6893      	ldr	r3, [r2, #8]
 8008386:	6989      	ldr	r1, [r1, #24]
 8008388:	6990      	ldr	r0, [r2, #24]
 800838a:	6889      	ldr	r1, [r1, #8]
 800838c:	6884      	ldr	r4, [r0, #8]
 800838e:	0a1b      	lsrs	r3, r3, #8
 8008390:	d075      	beq.n	800847e <forward_relu+0x24e>
 8008392:	68d5      	ldr	r5, [r2, #12]
 8008394:	2201      	movs	r2, #1
 8008396:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800839a:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 800839e:	429d      	cmp	r5, r3
 80083a0:	fb00 f202 	mul.w	r2, r0, r2
 80083a4:	d1f9      	bne.n	800839a <forward_relu+0x16a>
 80083a6:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 80083aa:	3b01      	subs	r3, #1
 80083ac:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80083b0:	4294      	cmp	r4, r2
 80083b2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80083b6:	d899      	bhi.n	80082ec <forward_relu+0xbc>
 80083b8:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8008494 <forward_relu+0x264>
 80083bc:	3204      	adds	r2, #4
 80083be:	3104      	adds	r1, #4
 80083c0:	4613      	mov	r3, r2
 80083c2:	ed72 7a01 	vldmdb	r2!, {s15}
 80083c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80083ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083ce:	f1a3 0308 	sub.w	r3, r3, #8
 80083d2:	bfb8      	it	lt
 80083d4:	eef0 7a47 	vmovlt.f32	s15, s14
 80083d8:	429c      	cmp	r4, r3
 80083da:	ed61 7a01 	vstmdb	r1!, {s15}
 80083de:	d9ef      	bls.n	80083c0 <forward_relu+0x190>
 80083e0:	bc70      	pop	{r4, r5, r6}
 80083e2:	4770      	bx	lr
 80083e4:	688c      	ldr	r4, [r1, #8]
 80083e6:	6891      	ldr	r1, [r2, #8]
 80083e8:	6880      	ldr	r0, [r0, #8]
 80083ea:	0a09      	lsrs	r1, r1, #8
 80083ec:	d049      	beq.n	8008482 <forward_relu+0x252>
 80083ee:	68d5      	ldr	r5, [r2, #12]
 80083f0:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 80083f4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80083f8:	42aa      	cmp	r2, r5
 80083fa:	fb01 f303 	mul.w	r3, r1, r3
 80083fe:	d1f9      	bne.n	80083f4 <forward_relu+0x1c4>
 8008400:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8008404:	3a01      	subs	r2, #1
 8008406:	68b1      	ldr	r1, [r6, #8]
 8008408:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800840c:	429c      	cmp	r4, r3
 800840e:	ed91 7a00 	vldr	s14, [r1]
 8008412:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8008416:	f63f af69 	bhi.w	80082ec <forward_relu+0xbc>
 800841a:	2500      	movs	r5, #0
 800841c:	3304      	adds	r3, #4
 800841e:	1d02      	adds	r2, r0, #4
 8008420:	ed53 7a01 	vldr	s15, [r3, #-4]
 8008424:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800842c:	f1a3 0104 	sub.w	r1, r3, #4
 8008430:	f1a3 0308 	sub.w	r3, r3, #8
 8008434:	d406      	bmi.n	8008444 <forward_relu+0x214>
 8008436:	429c      	cmp	r4, r3
 8008438:	f842 5d04 	str.w	r5, [r2, #-4]!
 800843c:	f63f af56 	bhi.w	80082ec <forward_relu+0xbc>
 8008440:	460b      	mov	r3, r1
 8008442:	e7ed      	b.n	8008420 <forward_relu+0x1f0>
 8008444:	429c      	cmp	r4, r3
 8008446:	ed62 7a01 	vstmdb	r2!, {s15}
 800844a:	f63f af4f 	bhi.w	80082ec <forward_relu+0xbc>
 800844e:	460b      	mov	r3, r1
 8008450:	e7e6      	b.n	8008420 <forward_relu+0x1f0>
 8008452:	68b3      	ldr	r3, [r6, #8]
 8008454:	ed93 7a02 	vldr	s14, [r3, #8]
 8008458:	edd3 6a00 	vldr	s13, [r3]
 800845c:	ed93 6a01 	vldr	s12, [r3, #4]
 8008460:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8008464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008468:	d401      	bmi.n	800846e <forward_relu+0x23e>
 800846a:	4623      	mov	r3, r4
 800846c:	e71e      	b.n	80082ac <forward_relu+0x7c>
 800846e:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8008472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008476:	4623      	mov	r3, r4
 8008478:	f47f af63 	bne.w	8008342 <forward_relu+0x112>
 800847c:	e741      	b.n	8008302 <forward_relu+0xd2>
 800847e:	4622      	mov	r2, r4
 8008480:	e79a      	b.n	80083b8 <forward_relu+0x188>
 8008482:	68b2      	ldr	r2, [r6, #8]
 8008484:	4623      	mov	r3, r4
 8008486:	ed92 7a00 	vldr	s14, [r2]
 800848a:	e7c6      	b.n	800841a <forward_relu+0x1ea>
 800848c:	2300      	movs	r3, #0
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	deff      	udf	#255	; 0xff
 8008492:	bf00      	nop
 8008494:	00000000 	.word	0x00000000

08008498 <forward_sm>:
 8008498:	6982      	ldr	r2, [r0, #24]
 800849a:	8813      	ldrh	r3, [r2, #0]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d07c      	beq.n	800859a <forward_sm+0x102>
 80084a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084a4:	ed2d 8b04 	vpush	{d8-d9}
 80084a8:	6852      	ldr	r2, [r2, #4]
 80084aa:	6854      	ldr	r4, [r2, #4]
 80084ac:	b085      	sub	sp, #20
 80084ae:	b104      	cbz	r4, 80084b2 <forward_sm+0x1a>
 80084b0:	6824      	ldr	r4, [r4, #0]
 80084b2:	2b01      	cmp	r3, #1
 80084b4:	d076      	beq.n	80085a4 <forward_sm+0x10c>
 80084b6:	6913      	ldr	r3, [r2, #16]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d076      	beq.n	80085aa <forward_sm+0x112>
 80084bc:	681e      	ldr	r6, [r3, #0]
 80084be:	68a3      	ldr	r3, [r4, #8]
 80084c0:	68e0      	ldr	r0, [r4, #12]
 80084c2:	68f2      	ldr	r2, [r6, #12]
 80084c4:	6845      	ldr	r5, [r0, #4]
 80084c6:	6857      	ldr	r7, [r2, #4]
 80084c8:	0a1b      	lsrs	r3, r3, #8
 80084ca:	d068      	beq.n	800859e <forward_sm+0x106>
 80084cc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80084d0:	2201      	movs	r2, #1
 80084d2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80084d6:	4298      	cmp	r0, r3
 80084d8:	fb01 f202 	mul.w	r2, r1, r2
 80084dc:	d1f9      	bne.n	80084d2 <forward_sm+0x3a>
 80084de:	ea4f 0982 	mov.w	r9, r2, lsl #2
 80084e2:	69a2      	ldr	r2, [r4, #24]
 80084e4:	69b3      	ldr	r3, [r6, #24]
 80084e6:	6892      	ldr	r2, [r2, #8]
 80084e8:	f8d3 8008 	ldr.w	r8, [r3, #8]
 80084ec:	eb02 0309 	add.w	r3, r2, r9
 80084f0:	429a      	cmp	r2, r3
 80084f2:	9301      	str	r3, [sp, #4]
 80084f4:	d24c      	bcs.n	8008590 <forward_sm+0xf8>
 80084f6:	00bb      	lsls	r3, r7, #2
 80084f8:	9303      	str	r3, [sp, #12]
 80084fa:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 80084fe:	00ab      	lsls	r3, r5, #2
 8008500:	2d01      	cmp	r5, #1
 8008502:	ed92 8a00 	vldr	s16, [r2]
 8008506:	9302      	str	r3, [sp, #8]
 8008508:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800850c:	463e      	mov	r6, r7
 800850e:	d93c      	bls.n	800858a <forward_sm+0xf2>
 8008510:	1d13      	adds	r3, r2, #4
 8008512:	ecf3 7a01 	vldmia	r3!, {s15}
 8008516:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800851a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800851e:	bfb8      	it	lt
 8008520:	eeb0 8a67 	vmovlt.f32	s16, s15
 8008524:	429e      	cmp	r6, r3
 8008526:	d1f4      	bne.n	8008512 <forward_sm+0x7a>
 8008528:	eddf 8a21 	vldr	s17, [pc, #132]	; 80085b0 <forward_sm+0x118>
 800852c:	4692      	mov	sl, r2
 800852e:	46c3      	mov	fp, r8
 8008530:	46c1      	mov	r9, r8
 8008532:	2400      	movs	r4, #0
 8008534:	ecba 0a01 	vldmia	sl!, {s0}
 8008538:	ee30 0a48 	vsub.f32	s0, s0, s16
 800853c:	f001 fa3a 	bl	80099b4 <expf>
 8008540:	3401      	adds	r4, #1
 8008542:	42a5      	cmp	r5, r4
 8008544:	ee78 8a80 	vadd.f32	s17, s17, s0
 8008548:	eca9 0a01 	vstmia	r9!, {s0}
 800854c:	d8f2      	bhi.n	8008534 <forward_sm+0x9c>
 800854e:	eef5 8a40 	vcmp.f32	s17, #0.0
 8008552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008556:	d00b      	beq.n	8008570 <forward_sm+0xd8>
 8008558:	ee89 7a28 	vdiv.f32	s14, s18, s17
 800855c:	2300      	movs	r3, #0
 800855e:	3301      	adds	r3, #1
 8008560:	429d      	cmp	r5, r3
 8008562:	eddb 7a00 	vldr	s15, [fp]
 8008566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800856a:	eceb 7a01 	vstmia	fp!, {s15}
 800856e:	d8f6      	bhi.n	800855e <forward_sm+0xc6>
 8008570:	9b03      	ldr	r3, [sp, #12]
 8008572:	9901      	ldr	r1, [sp, #4]
 8008574:	4498      	add	r8, r3
 8008576:	9b02      	ldr	r3, [sp, #8]
 8008578:	42b9      	cmp	r1, r7
 800857a:	463a      	mov	r2, r7
 800857c:	441e      	add	r6, r3
 800857e:	d907      	bls.n	8008590 <forward_sm+0xf8>
 8008580:	2d01      	cmp	r5, #1
 8008582:	ed92 8a00 	vldr	s16, [r2]
 8008586:	441f      	add	r7, r3
 8008588:	d8c2      	bhi.n	8008510 <forward_sm+0x78>
 800858a:	2d00      	cmp	r5, #0
 800858c:	d0f0      	beq.n	8008570 <forward_sm+0xd8>
 800858e:	e7cb      	b.n	8008528 <forward_sm+0x90>
 8008590:	b005      	add	sp, #20
 8008592:	ecbd 8b04 	vpop	{d8-d9}
 8008596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	deff      	udf	#255	; 0xff
 800859e:	f04f 0904 	mov.w	r9, #4
 80085a2:	e79e      	b.n	80084e2 <forward_sm+0x4a>
 80085a4:	2300      	movs	r3, #0
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	deff      	udf	#255	; 0xff
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	deff      	udf	#255	; 0xff
 80085ae:	bf00      	nop
 80085b0:	00000000 	.word	0x00000000

080085b4 <forward_lite_dense_if32of32wf32>:
 80085b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085b8:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
 80085bc:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 80085c0:	4287      	cmp	r7, r0
 80085c2:	f240 8106 	bls.w	80087d2 <forward_lite_dense_if32of32wf32+0x21e>
 80085c6:	f1a6 0810 	sub.w	r8, r6, #16
 80085ca:	ea4f 1818 	mov.w	r8, r8, lsr #4
 80085ce:	f108 0801 	add.w	r8, r8, #1
 80085d2:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 80085d6:	ea4f 0986 	mov.w	r9, r6, lsl #2
 80085da:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 80085de:	4605      	mov	r5, r0
 80085e0:	f006 0a0f 	and.w	sl, r6, #15
 80085e4:	2e0f      	cmp	r6, #15
 80085e6:	ed9f 7a84 	vldr	s14, [pc, #528]	; 80087f8 <forward_lite_dense_if32of32wf32+0x244>
 80085ea:	f240 8101 	bls.w	80087f0 <forward_lite_dense_if32of32wf32+0x23c>
 80085ee:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 80085f2:	f102 0440 	add.w	r4, r2, #64	; 0x40
 80085f6:	46b6      	mov	lr, r6
 80085f8:	ed54 5a0f 	vldr	s11, [r4, #-60]	; 0xffffffc4
 80085fc:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 8008600:	ed1c 6a10 	vldr	s12, [ip, #-64]	; 0xffffffc0
 8008604:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 8008608:	ed5c 4a0d 	vldr	s9, [ip, #-52]	; 0xffffffcc
 800860c:	ed1c 5a0c 	vldr	s10, [ip, #-48]	; 0xffffffd0
 8008610:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
 8008614:	ed54 3a0a 	vldr	s7, [r4, #-40]	; 0xffffffd8
 8008618:	ed1c 4a09 	vldr	s8, [ip, #-36]	; 0xffffffdc
 800861c:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
 8008620:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 8008624:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 8008628:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 800862c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008630:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 8008634:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008638:	f1ae 0e10 	sub.w	lr, lr, #16
 800863c:	f1be 0f0f 	cmp.w	lr, #15
 8008640:	ed14 6a0e 	vldr	s12, [r4, #-56]	; 0xffffffc8
 8008644:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 8008648:	eee5 7a86 	vfma.f32	s15, s11, s12
 800864c:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8008650:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8008654:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
 8008658:	ed1c 6a1b 	vldr	s12, [ip, #-108]	; 0xffffff94
 800865c:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8008660:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
 8008664:	ed54 4a19 	vldr	s9, [r4, #-100]	; 0xffffff9c
 8008668:	eee5 7a25 	vfma.f32	s15, s10, s11
 800866c:	ed1c 5a18 	vldr	s10, [ip, #-96]	; 0xffffffa0
 8008670:	ed54 5a18 	vldr	s11, [r4, #-96]	; 0xffffffa0
 8008674:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008678:	ed1c 6a17 	vldr	s12, [ip, #-92]	; 0xffffffa4
 800867c:	ed54 6a17 	vldr	s13, [r4, #-92]	; 0xffffffa4
 8008680:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008684:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 8008688:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 800868c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008690:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 8008694:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 8008698:	eee5 7a25 	vfma.f32	s15, s10, s11
 800869c:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 80086a0:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 80086a4:	eee6 7a26 	vfma.f32	s15, s12, s13
 80086a8:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 80086ac:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 80086b0:	eee1 7a21 	vfma.f32	s15, s2, s3
 80086b4:	eee2 7a22 	vfma.f32	s15, s4, s5
 80086b8:	eee3 7a23 	vfma.f32	s15, s6, s7
 80086bc:	eee4 7a24 	vfma.f32	s15, s8, s9
 80086c0:	eee5 7a25 	vfma.f32	s15, s10, s11
 80086c4:	eee6 7a26 	vfma.f32	s15, s12, s13
 80086c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80086cc:	d894      	bhi.n	80085f8 <forward_lite_dense_if32of32wf32+0x44>
 80086ce:	eb02 0e0b 	add.w	lr, r2, fp
 80086d2:	4654      	mov	r4, sl
 80086d4:	46c4      	mov	ip, r8
 80086d6:	2c00      	cmp	r4, #0
 80086d8:	d075      	beq.n	80087c6 <forward_lite_dense_if32of32wf32+0x212>
 80086da:	eddc 6a00 	vldr	s13, [ip]
 80086de:	edde 7a00 	vldr	s15, [lr]
 80086e2:	2c01      	cmp	r4, #1
 80086e4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80086e8:	d06d      	beq.n	80087c6 <forward_lite_dense_if32of32wf32+0x212>
 80086ea:	eddc 6a01 	vldr	s13, [ip, #4]
 80086ee:	edde 7a01 	vldr	s15, [lr, #4]
 80086f2:	2c02      	cmp	r4, #2
 80086f4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80086f8:	d065      	beq.n	80087c6 <forward_lite_dense_if32of32wf32+0x212>
 80086fa:	eddc 6a02 	vldr	s13, [ip, #8]
 80086fe:	edde 7a02 	vldr	s15, [lr, #8]
 8008702:	2c03      	cmp	r4, #3
 8008704:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008708:	d05d      	beq.n	80087c6 <forward_lite_dense_if32of32wf32+0x212>
 800870a:	eddc 6a03 	vldr	s13, [ip, #12]
 800870e:	edde 7a03 	vldr	s15, [lr, #12]
 8008712:	2c04      	cmp	r4, #4
 8008714:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008718:	d055      	beq.n	80087c6 <forward_lite_dense_if32of32wf32+0x212>
 800871a:	eddc 6a04 	vldr	s13, [ip, #16]
 800871e:	edde 7a04 	vldr	s15, [lr, #16]
 8008722:	2c05      	cmp	r4, #5
 8008724:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008728:	d04d      	beq.n	80087c6 <forward_lite_dense_if32of32wf32+0x212>
 800872a:	eddc 6a05 	vldr	s13, [ip, #20]
 800872e:	edde 7a05 	vldr	s15, [lr, #20]
 8008732:	2c06      	cmp	r4, #6
 8008734:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008738:	d045      	beq.n	80087c6 <forward_lite_dense_if32of32wf32+0x212>
 800873a:	eddc 6a06 	vldr	s13, [ip, #24]
 800873e:	edde 7a06 	vldr	s15, [lr, #24]
 8008742:	2c07      	cmp	r4, #7
 8008744:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008748:	d03d      	beq.n	80087c6 <forward_lite_dense_if32of32wf32+0x212>
 800874a:	eddc 6a07 	vldr	s13, [ip, #28]
 800874e:	edde 7a07 	vldr	s15, [lr, #28]
 8008752:	2c08      	cmp	r4, #8
 8008754:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008758:	d035      	beq.n	80087c6 <forward_lite_dense_if32of32wf32+0x212>
 800875a:	eddc 6a08 	vldr	s13, [ip, #32]
 800875e:	edde 7a08 	vldr	s15, [lr, #32]
 8008762:	2c09      	cmp	r4, #9
 8008764:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008768:	d02d      	beq.n	80087c6 <forward_lite_dense_if32of32wf32+0x212>
 800876a:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 800876e:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 8008772:	2c0a      	cmp	r4, #10
 8008774:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008778:	d025      	beq.n	80087c6 <forward_lite_dense_if32of32wf32+0x212>
 800877a:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 800877e:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 8008782:	2c0b      	cmp	r4, #11
 8008784:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008788:	d01d      	beq.n	80087c6 <forward_lite_dense_if32of32wf32+0x212>
 800878a:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 800878e:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 8008792:	2c0c      	cmp	r4, #12
 8008794:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008798:	d015      	beq.n	80087c6 <forward_lite_dense_if32of32wf32+0x212>
 800879a:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 800879e:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 80087a2:	3c0d      	subs	r4, #13
 80087a4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80087a8:	d00d      	beq.n	80087c6 <forward_lite_dense_if32of32wf32+0x212>
 80087aa:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 80087ae:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 80087b2:	2c01      	cmp	r4, #1
 80087b4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80087b8:	d005      	beq.n	80087c6 <forward_lite_dense_if32of32wf32+0x212>
 80087ba:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 80087be:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 80087c2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80087c6:	444a      	add	r2, r9
 80087c8:	eca5 7a01 	vstmia	r5!, {s14}
 80087cc:	42af      	cmp	r7, r5
 80087ce:	f63f af09 	bhi.w	80085e4 <forward_lite_dense_if32of32wf32+0x30>
 80087d2:	b15b      	cbz	r3, 80087ec <forward_lite_dense_if32of32wf32+0x238>
 80087d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087d6:	b14a      	cbz	r2, 80087ec <forward_lite_dense_if32of32wf32+0x238>
 80087d8:	edd0 7a00 	vldr	s15, [r0]
 80087dc:	ecb3 7a01 	vldmia	r3!, {s14}
 80087e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80087e4:	ece0 7a01 	vstmia	r0!, {s15}
 80087e8:	4287      	cmp	r7, r0
 80087ea:	d1f5      	bne.n	80087d8 <forward_lite_dense_if32of32wf32+0x224>
 80087ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087f0:	4634      	mov	r4, r6
 80087f2:	4696      	mov	lr, r2
 80087f4:	468c      	mov	ip, r1
 80087f6:	e76e      	b.n	80086d6 <forward_lite_dense_if32of32wf32+0x122>
 80087f8:	00000000 	.word	0x00000000

080087fc <st_int8_copy>:
 80087fc:	4288      	cmp	r0, r1
 80087fe:	d057      	beq.n	80088b0 <st_int8_copy+0xb4>
 8008800:	2a00      	cmp	r2, #0
 8008802:	d055      	beq.n	80088b0 <st_int8_copy+0xb4>
 8008804:	4288      	cmp	r0, r1
 8008806:	d354      	bcc.n	80088b2 <st_int8_copy+0xb6>
 8008808:	078b      	lsls	r3, r1, #30
 800880a:	d102      	bne.n	8008812 <st_int8_copy+0x16>
 800880c:	e009      	b.n	8008822 <st_int8_copy+0x26>
 800880e:	2a00      	cmp	r2, #0
 8008810:	d05c      	beq.n	80088cc <st_int8_copy+0xd0>
 8008812:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8008816:	f801 3b01 	strb.w	r3, [r1], #1
 800881a:	078b      	lsls	r3, r1, #30
 800881c:	f102 32ff 	add.w	r2, r2, #4294967295
 8008820:	d1f5      	bne.n	800880e <st_int8_copy+0x12>
 8008822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008826:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 800882a:	d069      	beq.n	8008900 <st_int8_copy+0x104>
 800882c:	ea41 0300 	orr.w	r3, r1, r0
 8008830:	075b      	lsls	r3, r3, #29
 8008832:	d14c      	bne.n	80088ce <st_int8_copy+0xd2>
 8008834:	f10e 33ff 	add.w	r3, lr, #4294967295
 8008838:	2b01      	cmp	r3, #1
 800883a:	d948      	bls.n	80088ce <st_int8_copy+0xd2>
 800883c:	f100 0310 	add.w	r3, r0, #16
 8008840:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8008844:	f101 0c10 	add.w	ip, r1, #16
 8008848:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 800884c:	ed13 6b04 	vldr	d6, [r3, #-16]
 8008850:	ed13 7b02 	vldr	d7, [r3, #-8]
 8008854:	3310      	adds	r3, #16
 8008856:	4573      	cmp	r3, lr
 8008858:	ed0c 6b04 	vstr	d6, [ip, #-16]
 800885c:	ed0c 7b02 	vstr	d7, [ip, #-8]
 8008860:	f10c 0c10 	add.w	ip, ip, #16
 8008864:	d1f2      	bne.n	800884c <st_int8_copy+0x50>
 8008866:	f3c2 0381 	ubfx	r3, r2, #2, #2
 800886a:	4421      	add	r1, r4
 800886c:	4420      	add	r0, r4
 800886e:	f002 0203 	and.w	r2, r2, #3
 8008872:	b16b      	cbz	r3, 8008890 <st_int8_copy+0x94>
 8008874:	6804      	ldr	r4, [r0, #0]
 8008876:	600c      	str	r4, [r1, #0]
 8008878:	1e5c      	subs	r4, r3, #1
 800887a:	d005      	beq.n	8008888 <st_int8_copy+0x8c>
 800887c:	6845      	ldr	r5, [r0, #4]
 800887e:	604d      	str	r5, [r1, #4]
 8008880:	2c01      	cmp	r4, #1
 8008882:	bf1c      	itt	ne
 8008884:	6884      	ldrne	r4, [r0, #8]
 8008886:	608c      	strne	r4, [r1, #8]
 8008888:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800888c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8008890:	b162      	cbz	r2, 80088ac <st_int8_copy+0xb0>
 8008892:	f990 3000 	ldrsb.w	r3, [r0]
 8008896:	700b      	strb	r3, [r1, #0]
 8008898:	3a01      	subs	r2, #1
 800889a:	d007      	beq.n	80088ac <st_int8_copy+0xb0>
 800889c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 80088a0:	704b      	strb	r3, [r1, #1]
 80088a2:	2a01      	cmp	r2, #1
 80088a4:	bf1c      	itt	ne
 80088a6:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 80088aa:	708b      	strbne	r3, [r1, #2]
 80088ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088b0:	4770      	bx	lr
 80088b2:	1883      	adds	r3, r0, r2
 80088b4:	428b      	cmp	r3, r1
 80088b6:	d9a7      	bls.n	8008808 <st_int8_copy+0xc>
 80088b8:	4283      	cmp	r3, r0
 80088ba:	440a      	add	r2, r1
 80088bc:	d9f8      	bls.n	80088b0 <st_int8_copy+0xb4>
 80088be:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 80088c2:	f802 1d01 	strb.w	r1, [r2, #-1]!
 80088c6:	4283      	cmp	r3, r0
 80088c8:	d1f9      	bne.n	80088be <st_int8_copy+0xc2>
 80088ca:	4770      	bx	lr
 80088cc:	4770      	bx	lr
 80088ce:	ea4f 140e 	mov.w	r4, lr, lsl #4
 80088d2:	460b      	mov	r3, r1
 80088d4:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 80088d8:	4684      	mov	ip, r0
 80088da:	f8dc 7000 	ldr.w	r7, [ip]
 80088de:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80088e2:	f8dc 5008 	ldr.w	r5, [ip, #8]
 80088e6:	f8dc 800c 	ldr.w	r8, [ip, #12]
 80088ea:	f8c3 800c 	str.w	r8, [r3, #12]
 80088ee:	601f      	str	r7, [r3, #0]
 80088f0:	605e      	str	r6, [r3, #4]
 80088f2:	609d      	str	r5, [r3, #8]
 80088f4:	3310      	adds	r3, #16
 80088f6:	459e      	cmp	lr, r3
 80088f8:	f10c 0c10 	add.w	ip, ip, #16
 80088fc:	d1ed      	bne.n	80088da <st_int8_copy+0xde>
 80088fe:	e7b2      	b.n	8008866 <st_int8_copy+0x6a>
 8008900:	0893      	lsrs	r3, r2, #2
 8008902:	f002 0203 	and.w	r2, r2, #3
 8008906:	e7b4      	b.n	8008872 <st_int8_copy+0x76>

08008908 <ai_array_to_buffer_fmt>:
 8008908:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800890c:	2b02      	cmp	r3, #2
 800890e:	d050      	beq.n	80089b2 <ai_array_to_buffer_fmt+0xaa>
 8008910:	4b2a      	ldr	r3, [pc, #168]	; (80089bc <ai_array_to_buffer_fmt+0xb4>)
 8008912:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 8008916:	429a      	cmp	r2, r3
 8008918:	d00b      	beq.n	8008932 <ai_array_to_buffer_fmt+0x2a>
 800891a:	dc1c      	bgt.n	8008956 <ai_array_to_buffer_fmt+0x4e>
 800891c:	4b28      	ldr	r3, [pc, #160]	; (80089c0 <ai_array_to_buffer_fmt+0xb8>)
 800891e:	429a      	cmp	r2, r3
 8008920:	d007      	beq.n	8008932 <ai_array_to_buffer_fmt+0x2a>
 8008922:	dd0b      	ble.n	800893c <ai_array_to_buffer_fmt+0x34>
 8008924:	4b27      	ldr	r3, [pc, #156]	; (80089c4 <ai_array_to_buffer_fmt+0xbc>)
 8008926:	429a      	cmp	r2, r3
 8008928:	d003      	beq.n	8008932 <ai_array_to_buffer_fmt+0x2a>
 800892a:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800892e:	429a      	cmp	r2, r3
 8008930:	d131      	bne.n	8008996 <ai_array_to_buffer_fmt+0x8e>
 8008932:	4613      	mov	r3, r2
 8008934:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8008938:	4318      	orrs	r0, r3
 800893a:	4770      	bx	lr
 800893c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8008940:	429a      	cmp	r2, r3
 8008942:	d0f6      	beq.n	8008932 <ai_array_to_buffer_fmt+0x2a>
 8008944:	dd2c      	ble.n	80089a0 <ai_array_to_buffer_fmt+0x98>
 8008946:	4b20      	ldr	r3, [pc, #128]	; (80089c8 <ai_array_to_buffer_fmt+0xc0>)
 8008948:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800894c:	429a      	cmp	r2, r3
 800894e:	bf18      	it	ne
 8008950:	2340      	movne	r3, #64	; 0x40
 8008952:	4318      	orrs	r0, r3
 8008954:	4770      	bx	lr
 8008956:	4b1d      	ldr	r3, [pc, #116]	; (80089cc <ai_array_to_buffer_fmt+0xc4>)
 8008958:	429a      	cmp	r2, r3
 800895a:	d0ea      	beq.n	8008932 <ai_array_to_buffer_fmt+0x2a>
 800895c:	dd0e      	ble.n	800897c <ai_array_to_buffer_fmt+0x74>
 800895e:	4b1c      	ldr	r3, [pc, #112]	; (80089d0 <ai_array_to_buffer_fmt+0xc8>)
 8008960:	429a      	cmp	r2, r3
 8008962:	d0e6      	beq.n	8008932 <ai_array_to_buffer_fmt+0x2a>
 8008964:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8008968:	429a      	cmp	r2, r3
 800896a:	d0e2      	beq.n	8008932 <ai_array_to_buffer_fmt+0x2a>
 800896c:	4b19      	ldr	r3, [pc, #100]	; (80089d4 <ai_array_to_buffer_fmt+0xcc>)
 800896e:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8008972:	429a      	cmp	r2, r3
 8008974:	bf18      	it	ne
 8008976:	2340      	movne	r3, #64	; 0x40
 8008978:	4318      	orrs	r0, r3
 800897a:	4770      	bx	lr
 800897c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8008980:	429a      	cmp	r2, r3
 8008982:	d0d6      	beq.n	8008932 <ai_array_to_buffer_fmt+0x2a>
 8008984:	3307      	adds	r3, #7
 8008986:	429a      	cmp	r2, r3
 8008988:	d0d3      	beq.n	8008932 <ai_array_to_buffer_fmt+0x2a>
 800898a:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 800898e:	429a      	cmp	r2, r3
 8008990:	bf18      	it	ne
 8008992:	2340      	movne	r3, #64	; 0x40
 8008994:	e7ce      	b.n	8008934 <ai_array_to_buffer_fmt+0x2c>
 8008996:	4b10      	ldr	r3, [pc, #64]	; (80089d8 <ai_array_to_buffer_fmt+0xd0>)
 8008998:	429a      	cmp	r2, r3
 800899a:	bf18      	it	ne
 800899c:	2340      	movne	r3, #64	; 0x40
 800899e:	e7c9      	b.n	8008934 <ai_array_to_buffer_fmt+0x2c>
 80089a0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d0c4      	beq.n	8008932 <ai_array_to_buffer_fmt+0x2a>
 80089a8:	3380      	adds	r3, #128	; 0x80
 80089aa:	429a      	cmp	r2, r3
 80089ac:	bf18      	it	ne
 80089ae:	2340      	movne	r3, #64	; 0x40
 80089b0:	e7c0      	b.n	8008934 <ai_array_to_buffer_fmt+0x2c>
 80089b2:	4b0a      	ldr	r3, [pc, #40]	; (80089dc <ai_array_to_buffer_fmt+0xd4>)
 80089b4:	4003      	ands	r3, r0
 80089b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80089ba:	e7bb      	b.n	8008934 <ai_array_to_buffer_fmt+0x2c>
 80089bc:	00840040 	.word	0x00840040
 80089c0:	00040840 	.word	0x00040840
 80089c4:	00041040 	.word	0x00041040
 80089c8:	00040447 	.word	0x00040447
 80089cc:	00840840 	.word	0x00840840
 80089d0:	00841040 	.word	0x00841040
 80089d4:	0084084f 	.word	0x0084084f
 80089d8:	0004084f 	.word	0x0004084f
 80089dc:	00803fff 	.word	0x00803fff

080089e0 <ai_array_get_byte_size>:
 80089e0:	b319      	cbz	r1, 8008a2a <ai_array_get_byte_size+0x4a>
 80089e2:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80089e6:	fb03 f101 	mul.w	r1, r3, r1
 80089ea:	3107      	adds	r1, #7
 80089ec:	f3c0 4243 	ubfx	r2, r0, #17, #4
 80089f0:	f021 0307 	bic.w	r3, r1, #7
 80089f4:	2a04      	cmp	r2, #4
 80089f6:	f3c0 5141 	ubfx	r1, r0, #21, #2
 80089fa:	fa23 f101 	lsr.w	r1, r3, r1
 80089fe:	ea4f 10e0 	mov.w	r0, r0, asr #7
 8008a02:	d00b      	beq.n	8008a1c <ai_array_get_byte_size+0x3c>
 8008a04:	2a08      	cmp	r2, #8
 8008a06:	d002      	beq.n	8008a0e <ai_array_get_byte_size+0x2e>
 8008a08:	3107      	adds	r1, #7
 8008a0a:	08c8      	lsrs	r0, r1, #3
 8008a0c:	4770      	bx	lr
 8008a0e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8008a12:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8008a16:	3107      	adds	r1, #7
 8008a18:	08c8      	lsrs	r0, r1, #3
 8008a1a:	4770      	bx	lr
 8008a1c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8008a20:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 8008a24:	3107      	adds	r1, #7
 8008a26:	08c8      	lsrs	r0, r1, #3
 8008a28:	4770      	bx	lr
 8008a2a:	4608      	mov	r0, r1
 8008a2c:	4770      	bx	lr
 8008a2e:	bf00      	nop

08008a30 <ai_array_get_data_byte_size>:
 8008a30:	b169      	cbz	r1, 8008a4e <ai_array_get_data_byte_size+0x1e>
 8008a32:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 8008a36:	fb02 f101 	mul.w	r1, r2, r1
 8008a3a:	1dcb      	adds	r3, r1, #7
 8008a3c:	f023 0307 	bic.w	r3, r3, #7
 8008a40:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8008a44:	fa23 f000 	lsr.w	r0, r3, r0
 8008a48:	3007      	adds	r0, #7
 8008a4a:	08c0      	lsrs	r0, r0, #3
 8008a4c:	4770      	bx	lr
 8008a4e:	4608      	mov	r0, r1
 8008a50:	4770      	bx	lr
 8008a52:	bf00      	nop

08008a54 <ai_version_get>:
 8008a54:	0212      	lsls	r2, r2, #8
 8008a56:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008a5a:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8008a5e:	4770      	bx	lr

08008a60 <get_tensor_byte_size>:
 8008a60:	b410      	push	{r4}
 8008a62:	6983      	ldr	r3, [r0, #24]
 8008a64:	68c4      	ldr	r4, [r0, #12]
 8008a66:	6941      	ldr	r1, [r0, #20]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	68e0      	ldr	r0, [r4, #12]
 8008a6c:	4a07      	ldr	r2, [pc, #28]	; (8008a8c <get_tensor_byte_size+0x2c>)
 8008a6e:	68c9      	ldr	r1, [r1, #12]
 8008a70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a74:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8008a78:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008a7c:	fb01 f000 	mul.w	r0, r1, r0
 8008a80:	4293      	cmp	r3, r2
 8008a82:	bf04      	itt	eq
 8008a84:	3007      	addeq	r0, #7
 8008a86:	08c0      	lsreq	r0, r0, #3
 8008a88:	4770      	bx	lr
 8008a8a:	bf00      	nop
 8008a8c:	000400c0 	.word	0x000400c0

08008a90 <sbrk_aligned>:
 8008a90:	b570      	push	{r4, r5, r6, lr}
 8008a92:	4e0e      	ldr	r6, [pc, #56]	; (8008acc <sbrk_aligned+0x3c>)
 8008a94:	460c      	mov	r4, r1
 8008a96:	6831      	ldr	r1, [r6, #0]
 8008a98:	4605      	mov	r5, r0
 8008a9a:	b911      	cbnz	r1, 8008aa2 <sbrk_aligned+0x12>
 8008a9c:	f000 fae8 	bl	8009070 <_sbrk_r>
 8008aa0:	6030      	str	r0, [r6, #0]
 8008aa2:	4621      	mov	r1, r4
 8008aa4:	4628      	mov	r0, r5
 8008aa6:	f000 fae3 	bl	8009070 <_sbrk_r>
 8008aaa:	1c43      	adds	r3, r0, #1
 8008aac:	d00a      	beq.n	8008ac4 <sbrk_aligned+0x34>
 8008aae:	1cc4      	adds	r4, r0, #3
 8008ab0:	f024 0403 	bic.w	r4, r4, #3
 8008ab4:	42a0      	cmp	r0, r4
 8008ab6:	d007      	beq.n	8008ac8 <sbrk_aligned+0x38>
 8008ab8:	1a21      	subs	r1, r4, r0
 8008aba:	4628      	mov	r0, r5
 8008abc:	f000 fad8 	bl	8009070 <_sbrk_r>
 8008ac0:	3001      	adds	r0, #1
 8008ac2:	d101      	bne.n	8008ac8 <sbrk_aligned+0x38>
 8008ac4:	f04f 34ff 	mov.w	r4, #4294967295
 8008ac8:	4620      	mov	r0, r4
 8008aca:	bd70      	pop	{r4, r5, r6, pc}
 8008acc:	20000fc8 	.word	0x20000fc8

08008ad0 <_malloc_r>:
 8008ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ad4:	1ccd      	adds	r5, r1, #3
 8008ad6:	f025 0503 	bic.w	r5, r5, #3
 8008ada:	3508      	adds	r5, #8
 8008adc:	2d0c      	cmp	r5, #12
 8008ade:	bf38      	it	cc
 8008ae0:	250c      	movcc	r5, #12
 8008ae2:	2d00      	cmp	r5, #0
 8008ae4:	4607      	mov	r7, r0
 8008ae6:	db01      	blt.n	8008aec <_malloc_r+0x1c>
 8008ae8:	42a9      	cmp	r1, r5
 8008aea:	d905      	bls.n	8008af8 <_malloc_r+0x28>
 8008aec:	230c      	movs	r3, #12
 8008aee:	603b      	str	r3, [r7, #0]
 8008af0:	2600      	movs	r6, #0
 8008af2:	4630      	mov	r0, r6
 8008af4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008af8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008bcc <_malloc_r+0xfc>
 8008afc:	f000 f868 	bl	8008bd0 <__malloc_lock>
 8008b00:	f8d8 3000 	ldr.w	r3, [r8]
 8008b04:	461c      	mov	r4, r3
 8008b06:	bb5c      	cbnz	r4, 8008b60 <_malloc_r+0x90>
 8008b08:	4629      	mov	r1, r5
 8008b0a:	4638      	mov	r0, r7
 8008b0c:	f7ff ffc0 	bl	8008a90 <sbrk_aligned>
 8008b10:	1c43      	adds	r3, r0, #1
 8008b12:	4604      	mov	r4, r0
 8008b14:	d155      	bne.n	8008bc2 <_malloc_r+0xf2>
 8008b16:	f8d8 4000 	ldr.w	r4, [r8]
 8008b1a:	4626      	mov	r6, r4
 8008b1c:	2e00      	cmp	r6, #0
 8008b1e:	d145      	bne.n	8008bac <_malloc_r+0xdc>
 8008b20:	2c00      	cmp	r4, #0
 8008b22:	d048      	beq.n	8008bb6 <_malloc_r+0xe6>
 8008b24:	6823      	ldr	r3, [r4, #0]
 8008b26:	4631      	mov	r1, r6
 8008b28:	4638      	mov	r0, r7
 8008b2a:	eb04 0903 	add.w	r9, r4, r3
 8008b2e:	f000 fa9f 	bl	8009070 <_sbrk_r>
 8008b32:	4581      	cmp	r9, r0
 8008b34:	d13f      	bne.n	8008bb6 <_malloc_r+0xe6>
 8008b36:	6821      	ldr	r1, [r4, #0]
 8008b38:	1a6d      	subs	r5, r5, r1
 8008b3a:	4629      	mov	r1, r5
 8008b3c:	4638      	mov	r0, r7
 8008b3e:	f7ff ffa7 	bl	8008a90 <sbrk_aligned>
 8008b42:	3001      	adds	r0, #1
 8008b44:	d037      	beq.n	8008bb6 <_malloc_r+0xe6>
 8008b46:	6823      	ldr	r3, [r4, #0]
 8008b48:	442b      	add	r3, r5
 8008b4a:	6023      	str	r3, [r4, #0]
 8008b4c:	f8d8 3000 	ldr.w	r3, [r8]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d038      	beq.n	8008bc6 <_malloc_r+0xf6>
 8008b54:	685a      	ldr	r2, [r3, #4]
 8008b56:	42a2      	cmp	r2, r4
 8008b58:	d12b      	bne.n	8008bb2 <_malloc_r+0xe2>
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	605a      	str	r2, [r3, #4]
 8008b5e:	e00f      	b.n	8008b80 <_malloc_r+0xb0>
 8008b60:	6822      	ldr	r2, [r4, #0]
 8008b62:	1b52      	subs	r2, r2, r5
 8008b64:	d41f      	bmi.n	8008ba6 <_malloc_r+0xd6>
 8008b66:	2a0b      	cmp	r2, #11
 8008b68:	d917      	bls.n	8008b9a <_malloc_r+0xca>
 8008b6a:	1961      	adds	r1, r4, r5
 8008b6c:	42a3      	cmp	r3, r4
 8008b6e:	6025      	str	r5, [r4, #0]
 8008b70:	bf18      	it	ne
 8008b72:	6059      	strne	r1, [r3, #4]
 8008b74:	6863      	ldr	r3, [r4, #4]
 8008b76:	bf08      	it	eq
 8008b78:	f8c8 1000 	streq.w	r1, [r8]
 8008b7c:	5162      	str	r2, [r4, r5]
 8008b7e:	604b      	str	r3, [r1, #4]
 8008b80:	4638      	mov	r0, r7
 8008b82:	f104 060b 	add.w	r6, r4, #11
 8008b86:	f000 f829 	bl	8008bdc <__malloc_unlock>
 8008b8a:	f026 0607 	bic.w	r6, r6, #7
 8008b8e:	1d23      	adds	r3, r4, #4
 8008b90:	1af2      	subs	r2, r6, r3
 8008b92:	d0ae      	beq.n	8008af2 <_malloc_r+0x22>
 8008b94:	1b9b      	subs	r3, r3, r6
 8008b96:	50a3      	str	r3, [r4, r2]
 8008b98:	e7ab      	b.n	8008af2 <_malloc_r+0x22>
 8008b9a:	42a3      	cmp	r3, r4
 8008b9c:	6862      	ldr	r2, [r4, #4]
 8008b9e:	d1dd      	bne.n	8008b5c <_malloc_r+0x8c>
 8008ba0:	f8c8 2000 	str.w	r2, [r8]
 8008ba4:	e7ec      	b.n	8008b80 <_malloc_r+0xb0>
 8008ba6:	4623      	mov	r3, r4
 8008ba8:	6864      	ldr	r4, [r4, #4]
 8008baa:	e7ac      	b.n	8008b06 <_malloc_r+0x36>
 8008bac:	4634      	mov	r4, r6
 8008bae:	6876      	ldr	r6, [r6, #4]
 8008bb0:	e7b4      	b.n	8008b1c <_malloc_r+0x4c>
 8008bb2:	4613      	mov	r3, r2
 8008bb4:	e7cc      	b.n	8008b50 <_malloc_r+0x80>
 8008bb6:	230c      	movs	r3, #12
 8008bb8:	603b      	str	r3, [r7, #0]
 8008bba:	4638      	mov	r0, r7
 8008bbc:	f000 f80e 	bl	8008bdc <__malloc_unlock>
 8008bc0:	e797      	b.n	8008af2 <_malloc_r+0x22>
 8008bc2:	6025      	str	r5, [r4, #0]
 8008bc4:	e7dc      	b.n	8008b80 <_malloc_r+0xb0>
 8008bc6:	605b      	str	r3, [r3, #4]
 8008bc8:	deff      	udf	#255	; 0xff
 8008bca:	bf00      	nop
 8008bcc:	20000fc4 	.word	0x20000fc4

08008bd0 <__malloc_lock>:
 8008bd0:	4801      	ldr	r0, [pc, #4]	; (8008bd8 <__malloc_lock+0x8>)
 8008bd2:	f000 ba9a 	b.w	800910a <__retarget_lock_acquire_recursive>
 8008bd6:	bf00      	nop
 8008bd8:	2000110c 	.word	0x2000110c

08008bdc <__malloc_unlock>:
 8008bdc:	4801      	ldr	r0, [pc, #4]	; (8008be4 <__malloc_unlock+0x8>)
 8008bde:	f000 ba95 	b.w	800910c <__retarget_lock_release_recursive>
 8008be2:	bf00      	nop
 8008be4:	2000110c 	.word	0x2000110c

08008be8 <std>:
 8008be8:	2300      	movs	r3, #0
 8008bea:	b510      	push	{r4, lr}
 8008bec:	4604      	mov	r4, r0
 8008bee:	e9c0 3300 	strd	r3, r3, [r0]
 8008bf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008bf6:	6083      	str	r3, [r0, #8]
 8008bf8:	8181      	strh	r1, [r0, #12]
 8008bfa:	6643      	str	r3, [r0, #100]	; 0x64
 8008bfc:	81c2      	strh	r2, [r0, #14]
 8008bfe:	6183      	str	r3, [r0, #24]
 8008c00:	4619      	mov	r1, r3
 8008c02:	2208      	movs	r2, #8
 8008c04:	305c      	adds	r0, #92	; 0x5c
 8008c06:	f000 f9f7 	bl	8008ff8 <memset>
 8008c0a:	4b0d      	ldr	r3, [pc, #52]	; (8008c40 <std+0x58>)
 8008c0c:	6263      	str	r3, [r4, #36]	; 0x24
 8008c0e:	4b0d      	ldr	r3, [pc, #52]	; (8008c44 <std+0x5c>)
 8008c10:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c12:	4b0d      	ldr	r3, [pc, #52]	; (8008c48 <std+0x60>)
 8008c14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c16:	4b0d      	ldr	r3, [pc, #52]	; (8008c4c <std+0x64>)
 8008c18:	6323      	str	r3, [r4, #48]	; 0x30
 8008c1a:	4b0d      	ldr	r3, [pc, #52]	; (8008c50 <std+0x68>)
 8008c1c:	6224      	str	r4, [r4, #32]
 8008c1e:	429c      	cmp	r4, r3
 8008c20:	d006      	beq.n	8008c30 <std+0x48>
 8008c22:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008c26:	4294      	cmp	r4, r2
 8008c28:	d002      	beq.n	8008c30 <std+0x48>
 8008c2a:	33d0      	adds	r3, #208	; 0xd0
 8008c2c:	429c      	cmp	r4, r3
 8008c2e:	d105      	bne.n	8008c3c <std+0x54>
 8008c30:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008c34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c38:	f000 ba66 	b.w	8009108 <__retarget_lock_init_recursive>
 8008c3c:	bd10      	pop	{r4, pc}
 8008c3e:	bf00      	nop
 8008c40:	08008e49 	.word	0x08008e49
 8008c44:	08008e6b 	.word	0x08008e6b
 8008c48:	08008ea3 	.word	0x08008ea3
 8008c4c:	08008ec7 	.word	0x08008ec7
 8008c50:	20000fcc 	.word	0x20000fcc

08008c54 <stdio_exit_handler>:
 8008c54:	4a02      	ldr	r2, [pc, #8]	; (8008c60 <stdio_exit_handler+0xc>)
 8008c56:	4903      	ldr	r1, [pc, #12]	; (8008c64 <stdio_exit_handler+0x10>)
 8008c58:	4803      	ldr	r0, [pc, #12]	; (8008c68 <stdio_exit_handler+0x14>)
 8008c5a:	f000 b869 	b.w	8008d30 <_fwalk_sglue>
 8008c5e:	bf00      	nop
 8008c60:	20000920 	.word	0x20000920
 8008c64:	0800985d 	.word	0x0800985d
 8008c68:	2000092c 	.word	0x2000092c

08008c6c <cleanup_stdio>:
 8008c6c:	6841      	ldr	r1, [r0, #4]
 8008c6e:	4b0c      	ldr	r3, [pc, #48]	; (8008ca0 <cleanup_stdio+0x34>)
 8008c70:	4299      	cmp	r1, r3
 8008c72:	b510      	push	{r4, lr}
 8008c74:	4604      	mov	r4, r0
 8008c76:	d001      	beq.n	8008c7c <cleanup_stdio+0x10>
 8008c78:	f000 fdf0 	bl	800985c <_fflush_r>
 8008c7c:	68a1      	ldr	r1, [r4, #8]
 8008c7e:	4b09      	ldr	r3, [pc, #36]	; (8008ca4 <cleanup_stdio+0x38>)
 8008c80:	4299      	cmp	r1, r3
 8008c82:	d002      	beq.n	8008c8a <cleanup_stdio+0x1e>
 8008c84:	4620      	mov	r0, r4
 8008c86:	f000 fde9 	bl	800985c <_fflush_r>
 8008c8a:	68e1      	ldr	r1, [r4, #12]
 8008c8c:	4b06      	ldr	r3, [pc, #24]	; (8008ca8 <cleanup_stdio+0x3c>)
 8008c8e:	4299      	cmp	r1, r3
 8008c90:	d004      	beq.n	8008c9c <cleanup_stdio+0x30>
 8008c92:	4620      	mov	r0, r4
 8008c94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c98:	f000 bde0 	b.w	800985c <_fflush_r>
 8008c9c:	bd10      	pop	{r4, pc}
 8008c9e:	bf00      	nop
 8008ca0:	20000fcc 	.word	0x20000fcc
 8008ca4:	20001034 	.word	0x20001034
 8008ca8:	2000109c 	.word	0x2000109c

08008cac <global_stdio_init.part.0>:
 8008cac:	b510      	push	{r4, lr}
 8008cae:	4b0b      	ldr	r3, [pc, #44]	; (8008cdc <global_stdio_init.part.0+0x30>)
 8008cb0:	4c0b      	ldr	r4, [pc, #44]	; (8008ce0 <global_stdio_init.part.0+0x34>)
 8008cb2:	4a0c      	ldr	r2, [pc, #48]	; (8008ce4 <global_stdio_init.part.0+0x38>)
 8008cb4:	601a      	str	r2, [r3, #0]
 8008cb6:	4620      	mov	r0, r4
 8008cb8:	2200      	movs	r2, #0
 8008cba:	2104      	movs	r1, #4
 8008cbc:	f7ff ff94 	bl	8008be8 <std>
 8008cc0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008cc4:	2201      	movs	r2, #1
 8008cc6:	2109      	movs	r1, #9
 8008cc8:	f7ff ff8e 	bl	8008be8 <std>
 8008ccc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008cd0:	2202      	movs	r2, #2
 8008cd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cd6:	2112      	movs	r1, #18
 8008cd8:	f7ff bf86 	b.w	8008be8 <std>
 8008cdc:	20001104 	.word	0x20001104
 8008ce0:	20000fcc 	.word	0x20000fcc
 8008ce4:	08008c55 	.word	0x08008c55

08008ce8 <__sfp_lock_acquire>:
 8008ce8:	4801      	ldr	r0, [pc, #4]	; (8008cf0 <__sfp_lock_acquire+0x8>)
 8008cea:	f000 ba0e 	b.w	800910a <__retarget_lock_acquire_recursive>
 8008cee:	bf00      	nop
 8008cf0:	2000110d 	.word	0x2000110d

08008cf4 <__sfp_lock_release>:
 8008cf4:	4801      	ldr	r0, [pc, #4]	; (8008cfc <__sfp_lock_release+0x8>)
 8008cf6:	f000 ba09 	b.w	800910c <__retarget_lock_release_recursive>
 8008cfa:	bf00      	nop
 8008cfc:	2000110d 	.word	0x2000110d

08008d00 <__sinit>:
 8008d00:	b510      	push	{r4, lr}
 8008d02:	4604      	mov	r4, r0
 8008d04:	f7ff fff0 	bl	8008ce8 <__sfp_lock_acquire>
 8008d08:	6a23      	ldr	r3, [r4, #32]
 8008d0a:	b11b      	cbz	r3, 8008d14 <__sinit+0x14>
 8008d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d10:	f7ff bff0 	b.w	8008cf4 <__sfp_lock_release>
 8008d14:	4b04      	ldr	r3, [pc, #16]	; (8008d28 <__sinit+0x28>)
 8008d16:	6223      	str	r3, [r4, #32]
 8008d18:	4b04      	ldr	r3, [pc, #16]	; (8008d2c <__sinit+0x2c>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d1f5      	bne.n	8008d0c <__sinit+0xc>
 8008d20:	f7ff ffc4 	bl	8008cac <global_stdio_init.part.0>
 8008d24:	e7f2      	b.n	8008d0c <__sinit+0xc>
 8008d26:	bf00      	nop
 8008d28:	08008c6d 	.word	0x08008c6d
 8008d2c:	20001104 	.word	0x20001104

08008d30 <_fwalk_sglue>:
 8008d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d34:	4607      	mov	r7, r0
 8008d36:	4688      	mov	r8, r1
 8008d38:	4614      	mov	r4, r2
 8008d3a:	2600      	movs	r6, #0
 8008d3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008d40:	f1b9 0901 	subs.w	r9, r9, #1
 8008d44:	d505      	bpl.n	8008d52 <_fwalk_sglue+0x22>
 8008d46:	6824      	ldr	r4, [r4, #0]
 8008d48:	2c00      	cmp	r4, #0
 8008d4a:	d1f7      	bne.n	8008d3c <_fwalk_sglue+0xc>
 8008d4c:	4630      	mov	r0, r6
 8008d4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d52:	89ab      	ldrh	r3, [r5, #12]
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d907      	bls.n	8008d68 <_fwalk_sglue+0x38>
 8008d58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d5c:	3301      	adds	r3, #1
 8008d5e:	d003      	beq.n	8008d68 <_fwalk_sglue+0x38>
 8008d60:	4629      	mov	r1, r5
 8008d62:	4638      	mov	r0, r7
 8008d64:	47c0      	blx	r8
 8008d66:	4306      	orrs	r6, r0
 8008d68:	3568      	adds	r5, #104	; 0x68
 8008d6a:	e7e9      	b.n	8008d40 <_fwalk_sglue+0x10>

08008d6c <iprintf>:
 8008d6c:	b40f      	push	{r0, r1, r2, r3}
 8008d6e:	b507      	push	{r0, r1, r2, lr}
 8008d70:	4906      	ldr	r1, [pc, #24]	; (8008d8c <iprintf+0x20>)
 8008d72:	ab04      	add	r3, sp, #16
 8008d74:	6808      	ldr	r0, [r1, #0]
 8008d76:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d7a:	6881      	ldr	r1, [r0, #8]
 8008d7c:	9301      	str	r3, [sp, #4]
 8008d7e:	f000 fa3d 	bl	80091fc <_vfiprintf_r>
 8008d82:	b003      	add	sp, #12
 8008d84:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d88:	b004      	add	sp, #16
 8008d8a:	4770      	bx	lr
 8008d8c:	20000978 	.word	0x20000978

08008d90 <_puts_r>:
 8008d90:	6a03      	ldr	r3, [r0, #32]
 8008d92:	b570      	push	{r4, r5, r6, lr}
 8008d94:	6884      	ldr	r4, [r0, #8]
 8008d96:	4605      	mov	r5, r0
 8008d98:	460e      	mov	r6, r1
 8008d9a:	b90b      	cbnz	r3, 8008da0 <_puts_r+0x10>
 8008d9c:	f7ff ffb0 	bl	8008d00 <__sinit>
 8008da0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008da2:	07db      	lsls	r3, r3, #31
 8008da4:	d405      	bmi.n	8008db2 <_puts_r+0x22>
 8008da6:	89a3      	ldrh	r3, [r4, #12]
 8008da8:	0598      	lsls	r0, r3, #22
 8008daa:	d402      	bmi.n	8008db2 <_puts_r+0x22>
 8008dac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dae:	f000 f9ac 	bl	800910a <__retarget_lock_acquire_recursive>
 8008db2:	89a3      	ldrh	r3, [r4, #12]
 8008db4:	0719      	lsls	r1, r3, #28
 8008db6:	d513      	bpl.n	8008de0 <_puts_r+0x50>
 8008db8:	6923      	ldr	r3, [r4, #16]
 8008dba:	b18b      	cbz	r3, 8008de0 <_puts_r+0x50>
 8008dbc:	3e01      	subs	r6, #1
 8008dbe:	68a3      	ldr	r3, [r4, #8]
 8008dc0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008dc4:	3b01      	subs	r3, #1
 8008dc6:	60a3      	str	r3, [r4, #8]
 8008dc8:	b9e9      	cbnz	r1, 8008e06 <_puts_r+0x76>
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	da2e      	bge.n	8008e2c <_puts_r+0x9c>
 8008dce:	4622      	mov	r2, r4
 8008dd0:	210a      	movs	r1, #10
 8008dd2:	4628      	mov	r0, r5
 8008dd4:	f000 f87b 	bl	8008ece <__swbuf_r>
 8008dd8:	3001      	adds	r0, #1
 8008dda:	d007      	beq.n	8008dec <_puts_r+0x5c>
 8008ddc:	250a      	movs	r5, #10
 8008dde:	e007      	b.n	8008df0 <_puts_r+0x60>
 8008de0:	4621      	mov	r1, r4
 8008de2:	4628      	mov	r0, r5
 8008de4:	f000 f8b0 	bl	8008f48 <__swsetup_r>
 8008de8:	2800      	cmp	r0, #0
 8008dea:	d0e7      	beq.n	8008dbc <_puts_r+0x2c>
 8008dec:	f04f 35ff 	mov.w	r5, #4294967295
 8008df0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008df2:	07da      	lsls	r2, r3, #31
 8008df4:	d405      	bmi.n	8008e02 <_puts_r+0x72>
 8008df6:	89a3      	ldrh	r3, [r4, #12]
 8008df8:	059b      	lsls	r3, r3, #22
 8008dfa:	d402      	bmi.n	8008e02 <_puts_r+0x72>
 8008dfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dfe:	f000 f985 	bl	800910c <__retarget_lock_release_recursive>
 8008e02:	4628      	mov	r0, r5
 8008e04:	bd70      	pop	{r4, r5, r6, pc}
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	da04      	bge.n	8008e14 <_puts_r+0x84>
 8008e0a:	69a2      	ldr	r2, [r4, #24]
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	dc06      	bgt.n	8008e1e <_puts_r+0x8e>
 8008e10:	290a      	cmp	r1, #10
 8008e12:	d004      	beq.n	8008e1e <_puts_r+0x8e>
 8008e14:	6823      	ldr	r3, [r4, #0]
 8008e16:	1c5a      	adds	r2, r3, #1
 8008e18:	6022      	str	r2, [r4, #0]
 8008e1a:	7019      	strb	r1, [r3, #0]
 8008e1c:	e7cf      	b.n	8008dbe <_puts_r+0x2e>
 8008e1e:	4622      	mov	r2, r4
 8008e20:	4628      	mov	r0, r5
 8008e22:	f000 f854 	bl	8008ece <__swbuf_r>
 8008e26:	3001      	adds	r0, #1
 8008e28:	d1c9      	bne.n	8008dbe <_puts_r+0x2e>
 8008e2a:	e7df      	b.n	8008dec <_puts_r+0x5c>
 8008e2c:	6823      	ldr	r3, [r4, #0]
 8008e2e:	250a      	movs	r5, #10
 8008e30:	1c5a      	adds	r2, r3, #1
 8008e32:	6022      	str	r2, [r4, #0]
 8008e34:	701d      	strb	r5, [r3, #0]
 8008e36:	e7db      	b.n	8008df0 <_puts_r+0x60>

08008e38 <puts>:
 8008e38:	4b02      	ldr	r3, [pc, #8]	; (8008e44 <puts+0xc>)
 8008e3a:	4601      	mov	r1, r0
 8008e3c:	6818      	ldr	r0, [r3, #0]
 8008e3e:	f7ff bfa7 	b.w	8008d90 <_puts_r>
 8008e42:	bf00      	nop
 8008e44:	20000978 	.word	0x20000978

08008e48 <__sread>:
 8008e48:	b510      	push	{r4, lr}
 8008e4a:	460c      	mov	r4, r1
 8008e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e50:	f000 f8fc 	bl	800904c <_read_r>
 8008e54:	2800      	cmp	r0, #0
 8008e56:	bfab      	itete	ge
 8008e58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008e5a:	89a3      	ldrhlt	r3, [r4, #12]
 8008e5c:	181b      	addge	r3, r3, r0
 8008e5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008e62:	bfac      	ite	ge
 8008e64:	6563      	strge	r3, [r4, #84]	; 0x54
 8008e66:	81a3      	strhlt	r3, [r4, #12]
 8008e68:	bd10      	pop	{r4, pc}

08008e6a <__swrite>:
 8008e6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e6e:	461f      	mov	r7, r3
 8008e70:	898b      	ldrh	r3, [r1, #12]
 8008e72:	05db      	lsls	r3, r3, #23
 8008e74:	4605      	mov	r5, r0
 8008e76:	460c      	mov	r4, r1
 8008e78:	4616      	mov	r6, r2
 8008e7a:	d505      	bpl.n	8008e88 <__swrite+0x1e>
 8008e7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e80:	2302      	movs	r3, #2
 8008e82:	2200      	movs	r2, #0
 8008e84:	f000 f8d0 	bl	8009028 <_lseek_r>
 8008e88:	89a3      	ldrh	r3, [r4, #12]
 8008e8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e92:	81a3      	strh	r3, [r4, #12]
 8008e94:	4632      	mov	r2, r6
 8008e96:	463b      	mov	r3, r7
 8008e98:	4628      	mov	r0, r5
 8008e9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e9e:	f000 b8f7 	b.w	8009090 <_write_r>

08008ea2 <__sseek>:
 8008ea2:	b510      	push	{r4, lr}
 8008ea4:	460c      	mov	r4, r1
 8008ea6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008eaa:	f000 f8bd 	bl	8009028 <_lseek_r>
 8008eae:	1c43      	adds	r3, r0, #1
 8008eb0:	89a3      	ldrh	r3, [r4, #12]
 8008eb2:	bf15      	itete	ne
 8008eb4:	6560      	strne	r0, [r4, #84]	; 0x54
 8008eb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008eba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008ebe:	81a3      	strheq	r3, [r4, #12]
 8008ec0:	bf18      	it	ne
 8008ec2:	81a3      	strhne	r3, [r4, #12]
 8008ec4:	bd10      	pop	{r4, pc}

08008ec6 <__sclose>:
 8008ec6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008eca:	f000 b89d 	b.w	8009008 <_close_r>

08008ece <__swbuf_r>:
 8008ece:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ed0:	460e      	mov	r6, r1
 8008ed2:	4614      	mov	r4, r2
 8008ed4:	4605      	mov	r5, r0
 8008ed6:	b118      	cbz	r0, 8008ee0 <__swbuf_r+0x12>
 8008ed8:	6a03      	ldr	r3, [r0, #32]
 8008eda:	b90b      	cbnz	r3, 8008ee0 <__swbuf_r+0x12>
 8008edc:	f7ff ff10 	bl	8008d00 <__sinit>
 8008ee0:	69a3      	ldr	r3, [r4, #24]
 8008ee2:	60a3      	str	r3, [r4, #8]
 8008ee4:	89a3      	ldrh	r3, [r4, #12]
 8008ee6:	071a      	lsls	r2, r3, #28
 8008ee8:	d525      	bpl.n	8008f36 <__swbuf_r+0x68>
 8008eea:	6923      	ldr	r3, [r4, #16]
 8008eec:	b31b      	cbz	r3, 8008f36 <__swbuf_r+0x68>
 8008eee:	6823      	ldr	r3, [r4, #0]
 8008ef0:	6922      	ldr	r2, [r4, #16]
 8008ef2:	1a98      	subs	r0, r3, r2
 8008ef4:	6963      	ldr	r3, [r4, #20]
 8008ef6:	b2f6      	uxtb	r6, r6
 8008ef8:	4283      	cmp	r3, r0
 8008efa:	4637      	mov	r7, r6
 8008efc:	dc04      	bgt.n	8008f08 <__swbuf_r+0x3a>
 8008efe:	4621      	mov	r1, r4
 8008f00:	4628      	mov	r0, r5
 8008f02:	f000 fcab 	bl	800985c <_fflush_r>
 8008f06:	b9e0      	cbnz	r0, 8008f42 <__swbuf_r+0x74>
 8008f08:	68a3      	ldr	r3, [r4, #8]
 8008f0a:	3b01      	subs	r3, #1
 8008f0c:	60a3      	str	r3, [r4, #8]
 8008f0e:	6823      	ldr	r3, [r4, #0]
 8008f10:	1c5a      	adds	r2, r3, #1
 8008f12:	6022      	str	r2, [r4, #0]
 8008f14:	701e      	strb	r6, [r3, #0]
 8008f16:	6962      	ldr	r2, [r4, #20]
 8008f18:	1c43      	adds	r3, r0, #1
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d004      	beq.n	8008f28 <__swbuf_r+0x5a>
 8008f1e:	89a3      	ldrh	r3, [r4, #12]
 8008f20:	07db      	lsls	r3, r3, #31
 8008f22:	d506      	bpl.n	8008f32 <__swbuf_r+0x64>
 8008f24:	2e0a      	cmp	r6, #10
 8008f26:	d104      	bne.n	8008f32 <__swbuf_r+0x64>
 8008f28:	4621      	mov	r1, r4
 8008f2a:	4628      	mov	r0, r5
 8008f2c:	f000 fc96 	bl	800985c <_fflush_r>
 8008f30:	b938      	cbnz	r0, 8008f42 <__swbuf_r+0x74>
 8008f32:	4638      	mov	r0, r7
 8008f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f36:	4621      	mov	r1, r4
 8008f38:	4628      	mov	r0, r5
 8008f3a:	f000 f805 	bl	8008f48 <__swsetup_r>
 8008f3e:	2800      	cmp	r0, #0
 8008f40:	d0d5      	beq.n	8008eee <__swbuf_r+0x20>
 8008f42:	f04f 37ff 	mov.w	r7, #4294967295
 8008f46:	e7f4      	b.n	8008f32 <__swbuf_r+0x64>

08008f48 <__swsetup_r>:
 8008f48:	b538      	push	{r3, r4, r5, lr}
 8008f4a:	4b2a      	ldr	r3, [pc, #168]	; (8008ff4 <__swsetup_r+0xac>)
 8008f4c:	4605      	mov	r5, r0
 8008f4e:	6818      	ldr	r0, [r3, #0]
 8008f50:	460c      	mov	r4, r1
 8008f52:	b118      	cbz	r0, 8008f5c <__swsetup_r+0x14>
 8008f54:	6a03      	ldr	r3, [r0, #32]
 8008f56:	b90b      	cbnz	r3, 8008f5c <__swsetup_r+0x14>
 8008f58:	f7ff fed2 	bl	8008d00 <__sinit>
 8008f5c:	89a3      	ldrh	r3, [r4, #12]
 8008f5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f62:	0718      	lsls	r0, r3, #28
 8008f64:	d422      	bmi.n	8008fac <__swsetup_r+0x64>
 8008f66:	06d9      	lsls	r1, r3, #27
 8008f68:	d407      	bmi.n	8008f7a <__swsetup_r+0x32>
 8008f6a:	2309      	movs	r3, #9
 8008f6c:	602b      	str	r3, [r5, #0]
 8008f6e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008f72:	81a3      	strh	r3, [r4, #12]
 8008f74:	f04f 30ff 	mov.w	r0, #4294967295
 8008f78:	e034      	b.n	8008fe4 <__swsetup_r+0x9c>
 8008f7a:	0758      	lsls	r0, r3, #29
 8008f7c:	d512      	bpl.n	8008fa4 <__swsetup_r+0x5c>
 8008f7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f80:	b141      	cbz	r1, 8008f94 <__swsetup_r+0x4c>
 8008f82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f86:	4299      	cmp	r1, r3
 8008f88:	d002      	beq.n	8008f90 <__swsetup_r+0x48>
 8008f8a:	4628      	mov	r0, r5
 8008f8c:	f000 f8c0 	bl	8009110 <_free_r>
 8008f90:	2300      	movs	r3, #0
 8008f92:	6363      	str	r3, [r4, #52]	; 0x34
 8008f94:	89a3      	ldrh	r3, [r4, #12]
 8008f96:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008f9a:	81a3      	strh	r3, [r4, #12]
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	6063      	str	r3, [r4, #4]
 8008fa0:	6923      	ldr	r3, [r4, #16]
 8008fa2:	6023      	str	r3, [r4, #0]
 8008fa4:	89a3      	ldrh	r3, [r4, #12]
 8008fa6:	f043 0308 	orr.w	r3, r3, #8
 8008faa:	81a3      	strh	r3, [r4, #12]
 8008fac:	6923      	ldr	r3, [r4, #16]
 8008fae:	b94b      	cbnz	r3, 8008fc4 <__swsetup_r+0x7c>
 8008fb0:	89a3      	ldrh	r3, [r4, #12]
 8008fb2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008fb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fba:	d003      	beq.n	8008fc4 <__swsetup_r+0x7c>
 8008fbc:	4621      	mov	r1, r4
 8008fbe:	4628      	mov	r0, r5
 8008fc0:	f000 fc9a 	bl	80098f8 <__smakebuf_r>
 8008fc4:	89a0      	ldrh	r0, [r4, #12]
 8008fc6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008fca:	f010 0301 	ands.w	r3, r0, #1
 8008fce:	d00a      	beq.n	8008fe6 <__swsetup_r+0x9e>
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	60a3      	str	r3, [r4, #8]
 8008fd4:	6963      	ldr	r3, [r4, #20]
 8008fd6:	425b      	negs	r3, r3
 8008fd8:	61a3      	str	r3, [r4, #24]
 8008fda:	6923      	ldr	r3, [r4, #16]
 8008fdc:	b943      	cbnz	r3, 8008ff0 <__swsetup_r+0xa8>
 8008fde:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008fe2:	d1c4      	bne.n	8008f6e <__swsetup_r+0x26>
 8008fe4:	bd38      	pop	{r3, r4, r5, pc}
 8008fe6:	0781      	lsls	r1, r0, #30
 8008fe8:	bf58      	it	pl
 8008fea:	6963      	ldrpl	r3, [r4, #20]
 8008fec:	60a3      	str	r3, [r4, #8]
 8008fee:	e7f4      	b.n	8008fda <__swsetup_r+0x92>
 8008ff0:	2000      	movs	r0, #0
 8008ff2:	e7f7      	b.n	8008fe4 <__swsetup_r+0x9c>
 8008ff4:	20000978 	.word	0x20000978

08008ff8 <memset>:
 8008ff8:	4402      	add	r2, r0
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d100      	bne.n	8009002 <memset+0xa>
 8009000:	4770      	bx	lr
 8009002:	f803 1b01 	strb.w	r1, [r3], #1
 8009006:	e7f9      	b.n	8008ffc <memset+0x4>

08009008 <_close_r>:
 8009008:	b538      	push	{r3, r4, r5, lr}
 800900a:	4d06      	ldr	r5, [pc, #24]	; (8009024 <_close_r+0x1c>)
 800900c:	2300      	movs	r3, #0
 800900e:	4604      	mov	r4, r0
 8009010:	4608      	mov	r0, r1
 8009012:	602b      	str	r3, [r5, #0]
 8009014:	f000 ff90 	bl	8009f38 <_close>
 8009018:	1c43      	adds	r3, r0, #1
 800901a:	d102      	bne.n	8009022 <_close_r+0x1a>
 800901c:	682b      	ldr	r3, [r5, #0]
 800901e:	b103      	cbz	r3, 8009022 <_close_r+0x1a>
 8009020:	6023      	str	r3, [r4, #0]
 8009022:	bd38      	pop	{r3, r4, r5, pc}
 8009024:	20001108 	.word	0x20001108

08009028 <_lseek_r>:
 8009028:	b538      	push	{r3, r4, r5, lr}
 800902a:	4d07      	ldr	r5, [pc, #28]	; (8009048 <_lseek_r+0x20>)
 800902c:	4604      	mov	r4, r0
 800902e:	4608      	mov	r0, r1
 8009030:	4611      	mov	r1, r2
 8009032:	2200      	movs	r2, #0
 8009034:	602a      	str	r2, [r5, #0]
 8009036:	461a      	mov	r2, r3
 8009038:	f000 ff96 	bl	8009f68 <_lseek>
 800903c:	1c43      	adds	r3, r0, #1
 800903e:	d102      	bne.n	8009046 <_lseek_r+0x1e>
 8009040:	682b      	ldr	r3, [r5, #0]
 8009042:	b103      	cbz	r3, 8009046 <_lseek_r+0x1e>
 8009044:	6023      	str	r3, [r4, #0]
 8009046:	bd38      	pop	{r3, r4, r5, pc}
 8009048:	20001108 	.word	0x20001108

0800904c <_read_r>:
 800904c:	b538      	push	{r3, r4, r5, lr}
 800904e:	4d07      	ldr	r5, [pc, #28]	; (800906c <_read_r+0x20>)
 8009050:	4604      	mov	r4, r0
 8009052:	4608      	mov	r0, r1
 8009054:	4611      	mov	r1, r2
 8009056:	2200      	movs	r2, #0
 8009058:	602a      	str	r2, [r5, #0]
 800905a:	461a      	mov	r2, r3
 800905c:	f000 ff8c 	bl	8009f78 <_read>
 8009060:	1c43      	adds	r3, r0, #1
 8009062:	d102      	bne.n	800906a <_read_r+0x1e>
 8009064:	682b      	ldr	r3, [r5, #0]
 8009066:	b103      	cbz	r3, 800906a <_read_r+0x1e>
 8009068:	6023      	str	r3, [r4, #0]
 800906a:	bd38      	pop	{r3, r4, r5, pc}
 800906c:	20001108 	.word	0x20001108

08009070 <_sbrk_r>:
 8009070:	b538      	push	{r3, r4, r5, lr}
 8009072:	4d06      	ldr	r5, [pc, #24]	; (800908c <_sbrk_r+0x1c>)
 8009074:	2300      	movs	r3, #0
 8009076:	4604      	mov	r4, r0
 8009078:	4608      	mov	r0, r1
 800907a:	602b      	str	r3, [r5, #0]
 800907c:	f7f8 fa44 	bl	8001508 <_sbrk>
 8009080:	1c43      	adds	r3, r0, #1
 8009082:	d102      	bne.n	800908a <_sbrk_r+0x1a>
 8009084:	682b      	ldr	r3, [r5, #0]
 8009086:	b103      	cbz	r3, 800908a <_sbrk_r+0x1a>
 8009088:	6023      	str	r3, [r4, #0]
 800908a:	bd38      	pop	{r3, r4, r5, pc}
 800908c:	20001108 	.word	0x20001108

08009090 <_write_r>:
 8009090:	b538      	push	{r3, r4, r5, lr}
 8009092:	4d07      	ldr	r5, [pc, #28]	; (80090b0 <_write_r+0x20>)
 8009094:	4604      	mov	r4, r0
 8009096:	4608      	mov	r0, r1
 8009098:	4611      	mov	r1, r2
 800909a:	2200      	movs	r2, #0
 800909c:	602a      	str	r2, [r5, #0]
 800909e:	461a      	mov	r2, r3
 80090a0:	f000 ff72 	bl	8009f88 <_write>
 80090a4:	1c43      	adds	r3, r0, #1
 80090a6:	d102      	bne.n	80090ae <_write_r+0x1e>
 80090a8:	682b      	ldr	r3, [r5, #0]
 80090aa:	b103      	cbz	r3, 80090ae <_write_r+0x1e>
 80090ac:	6023      	str	r3, [r4, #0]
 80090ae:	bd38      	pop	{r3, r4, r5, pc}
 80090b0:	20001108 	.word	0x20001108

080090b4 <__errno>:
 80090b4:	4b01      	ldr	r3, [pc, #4]	; (80090bc <__errno+0x8>)
 80090b6:	6818      	ldr	r0, [r3, #0]
 80090b8:	4770      	bx	lr
 80090ba:	bf00      	nop
 80090bc:	20000978 	.word	0x20000978

080090c0 <__libc_init_array>:
 80090c0:	b570      	push	{r4, r5, r6, lr}
 80090c2:	4d0d      	ldr	r5, [pc, #52]	; (80090f8 <__libc_init_array+0x38>)
 80090c4:	4c0d      	ldr	r4, [pc, #52]	; (80090fc <__libc_init_array+0x3c>)
 80090c6:	1b64      	subs	r4, r4, r5
 80090c8:	10a4      	asrs	r4, r4, #2
 80090ca:	2600      	movs	r6, #0
 80090cc:	42a6      	cmp	r6, r4
 80090ce:	d109      	bne.n	80090e4 <__libc_init_array+0x24>
 80090d0:	4d0b      	ldr	r5, [pc, #44]	; (8009100 <__libc_init_array+0x40>)
 80090d2:	4c0c      	ldr	r4, [pc, #48]	; (8009104 <__libc_init_array+0x44>)
 80090d4:	f000 ff60 	bl	8009f98 <_init>
 80090d8:	1b64      	subs	r4, r4, r5
 80090da:	10a4      	asrs	r4, r4, #2
 80090dc:	2600      	movs	r6, #0
 80090de:	42a6      	cmp	r6, r4
 80090e0:	d105      	bne.n	80090ee <__libc_init_array+0x2e>
 80090e2:	bd70      	pop	{r4, r5, r6, pc}
 80090e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80090e8:	4798      	blx	r3
 80090ea:	3601      	adds	r6, #1
 80090ec:	e7ee      	b.n	80090cc <__libc_init_array+0xc>
 80090ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80090f2:	4798      	blx	r3
 80090f4:	3601      	adds	r6, #1
 80090f6:	e7f2      	b.n	80090de <__libc_init_array+0x1e>
 80090f8:	08011bf4 	.word	0x08011bf4
 80090fc:	08011bf4 	.word	0x08011bf4
 8009100:	08011bf4 	.word	0x08011bf4
 8009104:	08011bf8 	.word	0x08011bf8

08009108 <__retarget_lock_init_recursive>:
 8009108:	4770      	bx	lr

0800910a <__retarget_lock_acquire_recursive>:
 800910a:	4770      	bx	lr

0800910c <__retarget_lock_release_recursive>:
 800910c:	4770      	bx	lr
	...

08009110 <_free_r>:
 8009110:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009112:	2900      	cmp	r1, #0
 8009114:	d044      	beq.n	80091a0 <_free_r+0x90>
 8009116:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800911a:	9001      	str	r0, [sp, #4]
 800911c:	2b00      	cmp	r3, #0
 800911e:	f1a1 0404 	sub.w	r4, r1, #4
 8009122:	bfb8      	it	lt
 8009124:	18e4      	addlt	r4, r4, r3
 8009126:	f7ff fd53 	bl	8008bd0 <__malloc_lock>
 800912a:	4a1e      	ldr	r2, [pc, #120]	; (80091a4 <_free_r+0x94>)
 800912c:	9801      	ldr	r0, [sp, #4]
 800912e:	6813      	ldr	r3, [r2, #0]
 8009130:	b933      	cbnz	r3, 8009140 <_free_r+0x30>
 8009132:	6063      	str	r3, [r4, #4]
 8009134:	6014      	str	r4, [r2, #0]
 8009136:	b003      	add	sp, #12
 8009138:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800913c:	f7ff bd4e 	b.w	8008bdc <__malloc_unlock>
 8009140:	42a3      	cmp	r3, r4
 8009142:	d908      	bls.n	8009156 <_free_r+0x46>
 8009144:	6825      	ldr	r5, [r4, #0]
 8009146:	1961      	adds	r1, r4, r5
 8009148:	428b      	cmp	r3, r1
 800914a:	bf01      	itttt	eq
 800914c:	6819      	ldreq	r1, [r3, #0]
 800914e:	685b      	ldreq	r3, [r3, #4]
 8009150:	1949      	addeq	r1, r1, r5
 8009152:	6021      	streq	r1, [r4, #0]
 8009154:	e7ed      	b.n	8009132 <_free_r+0x22>
 8009156:	461a      	mov	r2, r3
 8009158:	685b      	ldr	r3, [r3, #4]
 800915a:	b10b      	cbz	r3, 8009160 <_free_r+0x50>
 800915c:	42a3      	cmp	r3, r4
 800915e:	d9fa      	bls.n	8009156 <_free_r+0x46>
 8009160:	6811      	ldr	r1, [r2, #0]
 8009162:	1855      	adds	r5, r2, r1
 8009164:	42a5      	cmp	r5, r4
 8009166:	d10b      	bne.n	8009180 <_free_r+0x70>
 8009168:	6824      	ldr	r4, [r4, #0]
 800916a:	4421      	add	r1, r4
 800916c:	1854      	adds	r4, r2, r1
 800916e:	42a3      	cmp	r3, r4
 8009170:	6011      	str	r1, [r2, #0]
 8009172:	d1e0      	bne.n	8009136 <_free_r+0x26>
 8009174:	681c      	ldr	r4, [r3, #0]
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	6053      	str	r3, [r2, #4]
 800917a:	440c      	add	r4, r1
 800917c:	6014      	str	r4, [r2, #0]
 800917e:	e7da      	b.n	8009136 <_free_r+0x26>
 8009180:	d902      	bls.n	8009188 <_free_r+0x78>
 8009182:	230c      	movs	r3, #12
 8009184:	6003      	str	r3, [r0, #0]
 8009186:	e7d6      	b.n	8009136 <_free_r+0x26>
 8009188:	6825      	ldr	r5, [r4, #0]
 800918a:	1961      	adds	r1, r4, r5
 800918c:	428b      	cmp	r3, r1
 800918e:	bf04      	itt	eq
 8009190:	6819      	ldreq	r1, [r3, #0]
 8009192:	685b      	ldreq	r3, [r3, #4]
 8009194:	6063      	str	r3, [r4, #4]
 8009196:	bf04      	itt	eq
 8009198:	1949      	addeq	r1, r1, r5
 800919a:	6021      	streq	r1, [r4, #0]
 800919c:	6054      	str	r4, [r2, #4]
 800919e:	e7ca      	b.n	8009136 <_free_r+0x26>
 80091a0:	b003      	add	sp, #12
 80091a2:	bd30      	pop	{r4, r5, pc}
 80091a4:	20000fc4 	.word	0x20000fc4

080091a8 <__sfputc_r>:
 80091a8:	6893      	ldr	r3, [r2, #8]
 80091aa:	3b01      	subs	r3, #1
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	b410      	push	{r4}
 80091b0:	6093      	str	r3, [r2, #8]
 80091b2:	da08      	bge.n	80091c6 <__sfputc_r+0x1e>
 80091b4:	6994      	ldr	r4, [r2, #24]
 80091b6:	42a3      	cmp	r3, r4
 80091b8:	db01      	blt.n	80091be <__sfputc_r+0x16>
 80091ba:	290a      	cmp	r1, #10
 80091bc:	d103      	bne.n	80091c6 <__sfputc_r+0x1e>
 80091be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091c2:	f7ff be84 	b.w	8008ece <__swbuf_r>
 80091c6:	6813      	ldr	r3, [r2, #0]
 80091c8:	1c58      	adds	r0, r3, #1
 80091ca:	6010      	str	r0, [r2, #0]
 80091cc:	7019      	strb	r1, [r3, #0]
 80091ce:	4608      	mov	r0, r1
 80091d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091d4:	4770      	bx	lr

080091d6 <__sfputs_r>:
 80091d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091d8:	4606      	mov	r6, r0
 80091da:	460f      	mov	r7, r1
 80091dc:	4614      	mov	r4, r2
 80091de:	18d5      	adds	r5, r2, r3
 80091e0:	42ac      	cmp	r4, r5
 80091e2:	d101      	bne.n	80091e8 <__sfputs_r+0x12>
 80091e4:	2000      	movs	r0, #0
 80091e6:	e007      	b.n	80091f8 <__sfputs_r+0x22>
 80091e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091ec:	463a      	mov	r2, r7
 80091ee:	4630      	mov	r0, r6
 80091f0:	f7ff ffda 	bl	80091a8 <__sfputc_r>
 80091f4:	1c43      	adds	r3, r0, #1
 80091f6:	d1f3      	bne.n	80091e0 <__sfputs_r+0xa>
 80091f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080091fc <_vfiprintf_r>:
 80091fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009200:	460d      	mov	r5, r1
 8009202:	b09d      	sub	sp, #116	; 0x74
 8009204:	4614      	mov	r4, r2
 8009206:	4698      	mov	r8, r3
 8009208:	4606      	mov	r6, r0
 800920a:	b118      	cbz	r0, 8009214 <_vfiprintf_r+0x18>
 800920c:	6a03      	ldr	r3, [r0, #32]
 800920e:	b90b      	cbnz	r3, 8009214 <_vfiprintf_r+0x18>
 8009210:	f7ff fd76 	bl	8008d00 <__sinit>
 8009214:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009216:	07d9      	lsls	r1, r3, #31
 8009218:	d405      	bmi.n	8009226 <_vfiprintf_r+0x2a>
 800921a:	89ab      	ldrh	r3, [r5, #12]
 800921c:	059a      	lsls	r2, r3, #22
 800921e:	d402      	bmi.n	8009226 <_vfiprintf_r+0x2a>
 8009220:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009222:	f7ff ff72 	bl	800910a <__retarget_lock_acquire_recursive>
 8009226:	89ab      	ldrh	r3, [r5, #12]
 8009228:	071b      	lsls	r3, r3, #28
 800922a:	d501      	bpl.n	8009230 <_vfiprintf_r+0x34>
 800922c:	692b      	ldr	r3, [r5, #16]
 800922e:	b99b      	cbnz	r3, 8009258 <_vfiprintf_r+0x5c>
 8009230:	4629      	mov	r1, r5
 8009232:	4630      	mov	r0, r6
 8009234:	f7ff fe88 	bl	8008f48 <__swsetup_r>
 8009238:	b170      	cbz	r0, 8009258 <_vfiprintf_r+0x5c>
 800923a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800923c:	07dc      	lsls	r4, r3, #31
 800923e:	d504      	bpl.n	800924a <_vfiprintf_r+0x4e>
 8009240:	f04f 30ff 	mov.w	r0, #4294967295
 8009244:	b01d      	add	sp, #116	; 0x74
 8009246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800924a:	89ab      	ldrh	r3, [r5, #12]
 800924c:	0598      	lsls	r0, r3, #22
 800924e:	d4f7      	bmi.n	8009240 <_vfiprintf_r+0x44>
 8009250:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009252:	f7ff ff5b 	bl	800910c <__retarget_lock_release_recursive>
 8009256:	e7f3      	b.n	8009240 <_vfiprintf_r+0x44>
 8009258:	2300      	movs	r3, #0
 800925a:	9309      	str	r3, [sp, #36]	; 0x24
 800925c:	2320      	movs	r3, #32
 800925e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009262:	f8cd 800c 	str.w	r8, [sp, #12]
 8009266:	2330      	movs	r3, #48	; 0x30
 8009268:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800941c <_vfiprintf_r+0x220>
 800926c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009270:	f04f 0901 	mov.w	r9, #1
 8009274:	4623      	mov	r3, r4
 8009276:	469a      	mov	sl, r3
 8009278:	f813 2b01 	ldrb.w	r2, [r3], #1
 800927c:	b10a      	cbz	r2, 8009282 <_vfiprintf_r+0x86>
 800927e:	2a25      	cmp	r2, #37	; 0x25
 8009280:	d1f9      	bne.n	8009276 <_vfiprintf_r+0x7a>
 8009282:	ebba 0b04 	subs.w	fp, sl, r4
 8009286:	d00b      	beq.n	80092a0 <_vfiprintf_r+0xa4>
 8009288:	465b      	mov	r3, fp
 800928a:	4622      	mov	r2, r4
 800928c:	4629      	mov	r1, r5
 800928e:	4630      	mov	r0, r6
 8009290:	f7ff ffa1 	bl	80091d6 <__sfputs_r>
 8009294:	3001      	adds	r0, #1
 8009296:	f000 80a9 	beq.w	80093ec <_vfiprintf_r+0x1f0>
 800929a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800929c:	445a      	add	r2, fp
 800929e:	9209      	str	r2, [sp, #36]	; 0x24
 80092a0:	f89a 3000 	ldrb.w	r3, [sl]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	f000 80a1 	beq.w	80093ec <_vfiprintf_r+0x1f0>
 80092aa:	2300      	movs	r3, #0
 80092ac:	f04f 32ff 	mov.w	r2, #4294967295
 80092b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092b4:	f10a 0a01 	add.w	sl, sl, #1
 80092b8:	9304      	str	r3, [sp, #16]
 80092ba:	9307      	str	r3, [sp, #28]
 80092bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092c0:	931a      	str	r3, [sp, #104]	; 0x68
 80092c2:	4654      	mov	r4, sl
 80092c4:	2205      	movs	r2, #5
 80092c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092ca:	4854      	ldr	r0, [pc, #336]	; (800941c <_vfiprintf_r+0x220>)
 80092cc:	f7f6 ff98 	bl	8000200 <memchr>
 80092d0:	9a04      	ldr	r2, [sp, #16]
 80092d2:	b9d8      	cbnz	r0, 800930c <_vfiprintf_r+0x110>
 80092d4:	06d1      	lsls	r1, r2, #27
 80092d6:	bf44      	itt	mi
 80092d8:	2320      	movmi	r3, #32
 80092da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092de:	0713      	lsls	r3, r2, #28
 80092e0:	bf44      	itt	mi
 80092e2:	232b      	movmi	r3, #43	; 0x2b
 80092e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092e8:	f89a 3000 	ldrb.w	r3, [sl]
 80092ec:	2b2a      	cmp	r3, #42	; 0x2a
 80092ee:	d015      	beq.n	800931c <_vfiprintf_r+0x120>
 80092f0:	9a07      	ldr	r2, [sp, #28]
 80092f2:	4654      	mov	r4, sl
 80092f4:	2000      	movs	r0, #0
 80092f6:	f04f 0c0a 	mov.w	ip, #10
 80092fa:	4621      	mov	r1, r4
 80092fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009300:	3b30      	subs	r3, #48	; 0x30
 8009302:	2b09      	cmp	r3, #9
 8009304:	d94d      	bls.n	80093a2 <_vfiprintf_r+0x1a6>
 8009306:	b1b0      	cbz	r0, 8009336 <_vfiprintf_r+0x13a>
 8009308:	9207      	str	r2, [sp, #28]
 800930a:	e014      	b.n	8009336 <_vfiprintf_r+0x13a>
 800930c:	eba0 0308 	sub.w	r3, r0, r8
 8009310:	fa09 f303 	lsl.w	r3, r9, r3
 8009314:	4313      	orrs	r3, r2
 8009316:	9304      	str	r3, [sp, #16]
 8009318:	46a2      	mov	sl, r4
 800931a:	e7d2      	b.n	80092c2 <_vfiprintf_r+0xc6>
 800931c:	9b03      	ldr	r3, [sp, #12]
 800931e:	1d19      	adds	r1, r3, #4
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	9103      	str	r1, [sp, #12]
 8009324:	2b00      	cmp	r3, #0
 8009326:	bfbb      	ittet	lt
 8009328:	425b      	neglt	r3, r3
 800932a:	f042 0202 	orrlt.w	r2, r2, #2
 800932e:	9307      	strge	r3, [sp, #28]
 8009330:	9307      	strlt	r3, [sp, #28]
 8009332:	bfb8      	it	lt
 8009334:	9204      	strlt	r2, [sp, #16]
 8009336:	7823      	ldrb	r3, [r4, #0]
 8009338:	2b2e      	cmp	r3, #46	; 0x2e
 800933a:	d10c      	bne.n	8009356 <_vfiprintf_r+0x15a>
 800933c:	7863      	ldrb	r3, [r4, #1]
 800933e:	2b2a      	cmp	r3, #42	; 0x2a
 8009340:	d134      	bne.n	80093ac <_vfiprintf_r+0x1b0>
 8009342:	9b03      	ldr	r3, [sp, #12]
 8009344:	1d1a      	adds	r2, r3, #4
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	9203      	str	r2, [sp, #12]
 800934a:	2b00      	cmp	r3, #0
 800934c:	bfb8      	it	lt
 800934e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009352:	3402      	adds	r4, #2
 8009354:	9305      	str	r3, [sp, #20]
 8009356:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800942c <_vfiprintf_r+0x230>
 800935a:	7821      	ldrb	r1, [r4, #0]
 800935c:	2203      	movs	r2, #3
 800935e:	4650      	mov	r0, sl
 8009360:	f7f6 ff4e 	bl	8000200 <memchr>
 8009364:	b138      	cbz	r0, 8009376 <_vfiprintf_r+0x17a>
 8009366:	9b04      	ldr	r3, [sp, #16]
 8009368:	eba0 000a 	sub.w	r0, r0, sl
 800936c:	2240      	movs	r2, #64	; 0x40
 800936e:	4082      	lsls	r2, r0
 8009370:	4313      	orrs	r3, r2
 8009372:	3401      	adds	r4, #1
 8009374:	9304      	str	r3, [sp, #16]
 8009376:	f814 1b01 	ldrb.w	r1, [r4], #1
 800937a:	4829      	ldr	r0, [pc, #164]	; (8009420 <_vfiprintf_r+0x224>)
 800937c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009380:	2206      	movs	r2, #6
 8009382:	f7f6 ff3d 	bl	8000200 <memchr>
 8009386:	2800      	cmp	r0, #0
 8009388:	d03f      	beq.n	800940a <_vfiprintf_r+0x20e>
 800938a:	4b26      	ldr	r3, [pc, #152]	; (8009424 <_vfiprintf_r+0x228>)
 800938c:	bb1b      	cbnz	r3, 80093d6 <_vfiprintf_r+0x1da>
 800938e:	9b03      	ldr	r3, [sp, #12]
 8009390:	3307      	adds	r3, #7
 8009392:	f023 0307 	bic.w	r3, r3, #7
 8009396:	3308      	adds	r3, #8
 8009398:	9303      	str	r3, [sp, #12]
 800939a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800939c:	443b      	add	r3, r7
 800939e:	9309      	str	r3, [sp, #36]	; 0x24
 80093a0:	e768      	b.n	8009274 <_vfiprintf_r+0x78>
 80093a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80093a6:	460c      	mov	r4, r1
 80093a8:	2001      	movs	r0, #1
 80093aa:	e7a6      	b.n	80092fa <_vfiprintf_r+0xfe>
 80093ac:	2300      	movs	r3, #0
 80093ae:	3401      	adds	r4, #1
 80093b0:	9305      	str	r3, [sp, #20]
 80093b2:	4619      	mov	r1, r3
 80093b4:	f04f 0c0a 	mov.w	ip, #10
 80093b8:	4620      	mov	r0, r4
 80093ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093be:	3a30      	subs	r2, #48	; 0x30
 80093c0:	2a09      	cmp	r2, #9
 80093c2:	d903      	bls.n	80093cc <_vfiprintf_r+0x1d0>
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d0c6      	beq.n	8009356 <_vfiprintf_r+0x15a>
 80093c8:	9105      	str	r1, [sp, #20]
 80093ca:	e7c4      	b.n	8009356 <_vfiprintf_r+0x15a>
 80093cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80093d0:	4604      	mov	r4, r0
 80093d2:	2301      	movs	r3, #1
 80093d4:	e7f0      	b.n	80093b8 <_vfiprintf_r+0x1bc>
 80093d6:	ab03      	add	r3, sp, #12
 80093d8:	9300      	str	r3, [sp, #0]
 80093da:	462a      	mov	r2, r5
 80093dc:	4b12      	ldr	r3, [pc, #72]	; (8009428 <_vfiprintf_r+0x22c>)
 80093de:	a904      	add	r1, sp, #16
 80093e0:	4630      	mov	r0, r6
 80093e2:	f3af 8000 	nop.w
 80093e6:	4607      	mov	r7, r0
 80093e8:	1c78      	adds	r0, r7, #1
 80093ea:	d1d6      	bne.n	800939a <_vfiprintf_r+0x19e>
 80093ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093ee:	07d9      	lsls	r1, r3, #31
 80093f0:	d405      	bmi.n	80093fe <_vfiprintf_r+0x202>
 80093f2:	89ab      	ldrh	r3, [r5, #12]
 80093f4:	059a      	lsls	r2, r3, #22
 80093f6:	d402      	bmi.n	80093fe <_vfiprintf_r+0x202>
 80093f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093fa:	f7ff fe87 	bl	800910c <__retarget_lock_release_recursive>
 80093fe:	89ab      	ldrh	r3, [r5, #12]
 8009400:	065b      	lsls	r3, r3, #25
 8009402:	f53f af1d 	bmi.w	8009240 <_vfiprintf_r+0x44>
 8009406:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009408:	e71c      	b.n	8009244 <_vfiprintf_r+0x48>
 800940a:	ab03      	add	r3, sp, #12
 800940c:	9300      	str	r3, [sp, #0]
 800940e:	462a      	mov	r2, r5
 8009410:	4b05      	ldr	r3, [pc, #20]	; (8009428 <_vfiprintf_r+0x22c>)
 8009412:	a904      	add	r1, sp, #16
 8009414:	4630      	mov	r0, r6
 8009416:	f000 f879 	bl	800950c <_printf_i>
 800941a:	e7e4      	b.n	80093e6 <_vfiprintf_r+0x1ea>
 800941c:	08011ba0 	.word	0x08011ba0
 8009420:	08011baa 	.word	0x08011baa
 8009424:	00000000 	.word	0x00000000
 8009428:	080091d7 	.word	0x080091d7
 800942c:	08011ba6 	.word	0x08011ba6

08009430 <_printf_common>:
 8009430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009434:	4616      	mov	r6, r2
 8009436:	4699      	mov	r9, r3
 8009438:	688a      	ldr	r2, [r1, #8]
 800943a:	690b      	ldr	r3, [r1, #16]
 800943c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009440:	4293      	cmp	r3, r2
 8009442:	bfb8      	it	lt
 8009444:	4613      	movlt	r3, r2
 8009446:	6033      	str	r3, [r6, #0]
 8009448:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800944c:	4607      	mov	r7, r0
 800944e:	460c      	mov	r4, r1
 8009450:	b10a      	cbz	r2, 8009456 <_printf_common+0x26>
 8009452:	3301      	adds	r3, #1
 8009454:	6033      	str	r3, [r6, #0]
 8009456:	6823      	ldr	r3, [r4, #0]
 8009458:	0699      	lsls	r1, r3, #26
 800945a:	bf42      	ittt	mi
 800945c:	6833      	ldrmi	r3, [r6, #0]
 800945e:	3302      	addmi	r3, #2
 8009460:	6033      	strmi	r3, [r6, #0]
 8009462:	6825      	ldr	r5, [r4, #0]
 8009464:	f015 0506 	ands.w	r5, r5, #6
 8009468:	d106      	bne.n	8009478 <_printf_common+0x48>
 800946a:	f104 0a19 	add.w	sl, r4, #25
 800946e:	68e3      	ldr	r3, [r4, #12]
 8009470:	6832      	ldr	r2, [r6, #0]
 8009472:	1a9b      	subs	r3, r3, r2
 8009474:	42ab      	cmp	r3, r5
 8009476:	dc26      	bgt.n	80094c6 <_printf_common+0x96>
 8009478:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800947c:	1e13      	subs	r3, r2, #0
 800947e:	6822      	ldr	r2, [r4, #0]
 8009480:	bf18      	it	ne
 8009482:	2301      	movne	r3, #1
 8009484:	0692      	lsls	r2, r2, #26
 8009486:	d42b      	bmi.n	80094e0 <_printf_common+0xb0>
 8009488:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800948c:	4649      	mov	r1, r9
 800948e:	4638      	mov	r0, r7
 8009490:	47c0      	blx	r8
 8009492:	3001      	adds	r0, #1
 8009494:	d01e      	beq.n	80094d4 <_printf_common+0xa4>
 8009496:	6823      	ldr	r3, [r4, #0]
 8009498:	6922      	ldr	r2, [r4, #16]
 800949a:	f003 0306 	and.w	r3, r3, #6
 800949e:	2b04      	cmp	r3, #4
 80094a0:	bf02      	ittt	eq
 80094a2:	68e5      	ldreq	r5, [r4, #12]
 80094a4:	6833      	ldreq	r3, [r6, #0]
 80094a6:	1aed      	subeq	r5, r5, r3
 80094a8:	68a3      	ldr	r3, [r4, #8]
 80094aa:	bf0c      	ite	eq
 80094ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80094b0:	2500      	movne	r5, #0
 80094b2:	4293      	cmp	r3, r2
 80094b4:	bfc4      	itt	gt
 80094b6:	1a9b      	subgt	r3, r3, r2
 80094b8:	18ed      	addgt	r5, r5, r3
 80094ba:	2600      	movs	r6, #0
 80094bc:	341a      	adds	r4, #26
 80094be:	42b5      	cmp	r5, r6
 80094c0:	d11a      	bne.n	80094f8 <_printf_common+0xc8>
 80094c2:	2000      	movs	r0, #0
 80094c4:	e008      	b.n	80094d8 <_printf_common+0xa8>
 80094c6:	2301      	movs	r3, #1
 80094c8:	4652      	mov	r2, sl
 80094ca:	4649      	mov	r1, r9
 80094cc:	4638      	mov	r0, r7
 80094ce:	47c0      	blx	r8
 80094d0:	3001      	adds	r0, #1
 80094d2:	d103      	bne.n	80094dc <_printf_common+0xac>
 80094d4:	f04f 30ff 	mov.w	r0, #4294967295
 80094d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094dc:	3501      	adds	r5, #1
 80094de:	e7c6      	b.n	800946e <_printf_common+0x3e>
 80094e0:	18e1      	adds	r1, r4, r3
 80094e2:	1c5a      	adds	r2, r3, #1
 80094e4:	2030      	movs	r0, #48	; 0x30
 80094e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80094ea:	4422      	add	r2, r4
 80094ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80094f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80094f4:	3302      	adds	r3, #2
 80094f6:	e7c7      	b.n	8009488 <_printf_common+0x58>
 80094f8:	2301      	movs	r3, #1
 80094fa:	4622      	mov	r2, r4
 80094fc:	4649      	mov	r1, r9
 80094fe:	4638      	mov	r0, r7
 8009500:	47c0      	blx	r8
 8009502:	3001      	adds	r0, #1
 8009504:	d0e6      	beq.n	80094d4 <_printf_common+0xa4>
 8009506:	3601      	adds	r6, #1
 8009508:	e7d9      	b.n	80094be <_printf_common+0x8e>
	...

0800950c <_printf_i>:
 800950c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009510:	7e0f      	ldrb	r7, [r1, #24]
 8009512:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009514:	2f78      	cmp	r7, #120	; 0x78
 8009516:	4691      	mov	r9, r2
 8009518:	4680      	mov	r8, r0
 800951a:	460c      	mov	r4, r1
 800951c:	469a      	mov	sl, r3
 800951e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009522:	d807      	bhi.n	8009534 <_printf_i+0x28>
 8009524:	2f62      	cmp	r7, #98	; 0x62
 8009526:	d80a      	bhi.n	800953e <_printf_i+0x32>
 8009528:	2f00      	cmp	r7, #0
 800952a:	f000 80d4 	beq.w	80096d6 <_printf_i+0x1ca>
 800952e:	2f58      	cmp	r7, #88	; 0x58
 8009530:	f000 80c0 	beq.w	80096b4 <_printf_i+0x1a8>
 8009534:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009538:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800953c:	e03a      	b.n	80095b4 <_printf_i+0xa8>
 800953e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009542:	2b15      	cmp	r3, #21
 8009544:	d8f6      	bhi.n	8009534 <_printf_i+0x28>
 8009546:	a101      	add	r1, pc, #4	; (adr r1, 800954c <_printf_i+0x40>)
 8009548:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800954c:	080095a5 	.word	0x080095a5
 8009550:	080095b9 	.word	0x080095b9
 8009554:	08009535 	.word	0x08009535
 8009558:	08009535 	.word	0x08009535
 800955c:	08009535 	.word	0x08009535
 8009560:	08009535 	.word	0x08009535
 8009564:	080095b9 	.word	0x080095b9
 8009568:	08009535 	.word	0x08009535
 800956c:	08009535 	.word	0x08009535
 8009570:	08009535 	.word	0x08009535
 8009574:	08009535 	.word	0x08009535
 8009578:	080096bd 	.word	0x080096bd
 800957c:	080095e5 	.word	0x080095e5
 8009580:	08009677 	.word	0x08009677
 8009584:	08009535 	.word	0x08009535
 8009588:	08009535 	.word	0x08009535
 800958c:	080096df 	.word	0x080096df
 8009590:	08009535 	.word	0x08009535
 8009594:	080095e5 	.word	0x080095e5
 8009598:	08009535 	.word	0x08009535
 800959c:	08009535 	.word	0x08009535
 80095a0:	0800967f 	.word	0x0800967f
 80095a4:	682b      	ldr	r3, [r5, #0]
 80095a6:	1d1a      	adds	r2, r3, #4
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	602a      	str	r2, [r5, #0]
 80095ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80095b4:	2301      	movs	r3, #1
 80095b6:	e09f      	b.n	80096f8 <_printf_i+0x1ec>
 80095b8:	6820      	ldr	r0, [r4, #0]
 80095ba:	682b      	ldr	r3, [r5, #0]
 80095bc:	0607      	lsls	r7, r0, #24
 80095be:	f103 0104 	add.w	r1, r3, #4
 80095c2:	6029      	str	r1, [r5, #0]
 80095c4:	d501      	bpl.n	80095ca <_printf_i+0xbe>
 80095c6:	681e      	ldr	r6, [r3, #0]
 80095c8:	e003      	b.n	80095d2 <_printf_i+0xc6>
 80095ca:	0646      	lsls	r6, r0, #25
 80095cc:	d5fb      	bpl.n	80095c6 <_printf_i+0xba>
 80095ce:	f9b3 6000 	ldrsh.w	r6, [r3]
 80095d2:	2e00      	cmp	r6, #0
 80095d4:	da03      	bge.n	80095de <_printf_i+0xd2>
 80095d6:	232d      	movs	r3, #45	; 0x2d
 80095d8:	4276      	negs	r6, r6
 80095da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095de:	485a      	ldr	r0, [pc, #360]	; (8009748 <_printf_i+0x23c>)
 80095e0:	230a      	movs	r3, #10
 80095e2:	e012      	b.n	800960a <_printf_i+0xfe>
 80095e4:	682b      	ldr	r3, [r5, #0]
 80095e6:	6820      	ldr	r0, [r4, #0]
 80095e8:	1d19      	adds	r1, r3, #4
 80095ea:	6029      	str	r1, [r5, #0]
 80095ec:	0605      	lsls	r5, r0, #24
 80095ee:	d501      	bpl.n	80095f4 <_printf_i+0xe8>
 80095f0:	681e      	ldr	r6, [r3, #0]
 80095f2:	e002      	b.n	80095fa <_printf_i+0xee>
 80095f4:	0641      	lsls	r1, r0, #25
 80095f6:	d5fb      	bpl.n	80095f0 <_printf_i+0xe4>
 80095f8:	881e      	ldrh	r6, [r3, #0]
 80095fa:	4853      	ldr	r0, [pc, #332]	; (8009748 <_printf_i+0x23c>)
 80095fc:	2f6f      	cmp	r7, #111	; 0x6f
 80095fe:	bf0c      	ite	eq
 8009600:	2308      	moveq	r3, #8
 8009602:	230a      	movne	r3, #10
 8009604:	2100      	movs	r1, #0
 8009606:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800960a:	6865      	ldr	r5, [r4, #4]
 800960c:	60a5      	str	r5, [r4, #8]
 800960e:	2d00      	cmp	r5, #0
 8009610:	bfa2      	ittt	ge
 8009612:	6821      	ldrge	r1, [r4, #0]
 8009614:	f021 0104 	bicge.w	r1, r1, #4
 8009618:	6021      	strge	r1, [r4, #0]
 800961a:	b90e      	cbnz	r6, 8009620 <_printf_i+0x114>
 800961c:	2d00      	cmp	r5, #0
 800961e:	d04b      	beq.n	80096b8 <_printf_i+0x1ac>
 8009620:	4615      	mov	r5, r2
 8009622:	fbb6 f1f3 	udiv	r1, r6, r3
 8009626:	fb03 6711 	mls	r7, r3, r1, r6
 800962a:	5dc7      	ldrb	r7, [r0, r7]
 800962c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009630:	4637      	mov	r7, r6
 8009632:	42bb      	cmp	r3, r7
 8009634:	460e      	mov	r6, r1
 8009636:	d9f4      	bls.n	8009622 <_printf_i+0x116>
 8009638:	2b08      	cmp	r3, #8
 800963a:	d10b      	bne.n	8009654 <_printf_i+0x148>
 800963c:	6823      	ldr	r3, [r4, #0]
 800963e:	07de      	lsls	r6, r3, #31
 8009640:	d508      	bpl.n	8009654 <_printf_i+0x148>
 8009642:	6923      	ldr	r3, [r4, #16]
 8009644:	6861      	ldr	r1, [r4, #4]
 8009646:	4299      	cmp	r1, r3
 8009648:	bfde      	ittt	le
 800964a:	2330      	movle	r3, #48	; 0x30
 800964c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009650:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009654:	1b52      	subs	r2, r2, r5
 8009656:	6122      	str	r2, [r4, #16]
 8009658:	f8cd a000 	str.w	sl, [sp]
 800965c:	464b      	mov	r3, r9
 800965e:	aa03      	add	r2, sp, #12
 8009660:	4621      	mov	r1, r4
 8009662:	4640      	mov	r0, r8
 8009664:	f7ff fee4 	bl	8009430 <_printf_common>
 8009668:	3001      	adds	r0, #1
 800966a:	d14a      	bne.n	8009702 <_printf_i+0x1f6>
 800966c:	f04f 30ff 	mov.w	r0, #4294967295
 8009670:	b004      	add	sp, #16
 8009672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009676:	6823      	ldr	r3, [r4, #0]
 8009678:	f043 0320 	orr.w	r3, r3, #32
 800967c:	6023      	str	r3, [r4, #0]
 800967e:	4833      	ldr	r0, [pc, #204]	; (800974c <_printf_i+0x240>)
 8009680:	2778      	movs	r7, #120	; 0x78
 8009682:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009686:	6823      	ldr	r3, [r4, #0]
 8009688:	6829      	ldr	r1, [r5, #0]
 800968a:	061f      	lsls	r7, r3, #24
 800968c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009690:	d402      	bmi.n	8009698 <_printf_i+0x18c>
 8009692:	065f      	lsls	r7, r3, #25
 8009694:	bf48      	it	mi
 8009696:	b2b6      	uxthmi	r6, r6
 8009698:	07df      	lsls	r7, r3, #31
 800969a:	bf48      	it	mi
 800969c:	f043 0320 	orrmi.w	r3, r3, #32
 80096a0:	6029      	str	r1, [r5, #0]
 80096a2:	bf48      	it	mi
 80096a4:	6023      	strmi	r3, [r4, #0]
 80096a6:	b91e      	cbnz	r6, 80096b0 <_printf_i+0x1a4>
 80096a8:	6823      	ldr	r3, [r4, #0]
 80096aa:	f023 0320 	bic.w	r3, r3, #32
 80096ae:	6023      	str	r3, [r4, #0]
 80096b0:	2310      	movs	r3, #16
 80096b2:	e7a7      	b.n	8009604 <_printf_i+0xf8>
 80096b4:	4824      	ldr	r0, [pc, #144]	; (8009748 <_printf_i+0x23c>)
 80096b6:	e7e4      	b.n	8009682 <_printf_i+0x176>
 80096b8:	4615      	mov	r5, r2
 80096ba:	e7bd      	b.n	8009638 <_printf_i+0x12c>
 80096bc:	682b      	ldr	r3, [r5, #0]
 80096be:	6826      	ldr	r6, [r4, #0]
 80096c0:	6961      	ldr	r1, [r4, #20]
 80096c2:	1d18      	adds	r0, r3, #4
 80096c4:	6028      	str	r0, [r5, #0]
 80096c6:	0635      	lsls	r5, r6, #24
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	d501      	bpl.n	80096d0 <_printf_i+0x1c4>
 80096cc:	6019      	str	r1, [r3, #0]
 80096ce:	e002      	b.n	80096d6 <_printf_i+0x1ca>
 80096d0:	0670      	lsls	r0, r6, #25
 80096d2:	d5fb      	bpl.n	80096cc <_printf_i+0x1c0>
 80096d4:	8019      	strh	r1, [r3, #0]
 80096d6:	2300      	movs	r3, #0
 80096d8:	6123      	str	r3, [r4, #16]
 80096da:	4615      	mov	r5, r2
 80096dc:	e7bc      	b.n	8009658 <_printf_i+0x14c>
 80096de:	682b      	ldr	r3, [r5, #0]
 80096e0:	1d1a      	adds	r2, r3, #4
 80096e2:	602a      	str	r2, [r5, #0]
 80096e4:	681d      	ldr	r5, [r3, #0]
 80096e6:	6862      	ldr	r2, [r4, #4]
 80096e8:	2100      	movs	r1, #0
 80096ea:	4628      	mov	r0, r5
 80096ec:	f7f6 fd88 	bl	8000200 <memchr>
 80096f0:	b108      	cbz	r0, 80096f6 <_printf_i+0x1ea>
 80096f2:	1b40      	subs	r0, r0, r5
 80096f4:	6060      	str	r0, [r4, #4]
 80096f6:	6863      	ldr	r3, [r4, #4]
 80096f8:	6123      	str	r3, [r4, #16]
 80096fa:	2300      	movs	r3, #0
 80096fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009700:	e7aa      	b.n	8009658 <_printf_i+0x14c>
 8009702:	6923      	ldr	r3, [r4, #16]
 8009704:	462a      	mov	r2, r5
 8009706:	4649      	mov	r1, r9
 8009708:	4640      	mov	r0, r8
 800970a:	47d0      	blx	sl
 800970c:	3001      	adds	r0, #1
 800970e:	d0ad      	beq.n	800966c <_printf_i+0x160>
 8009710:	6823      	ldr	r3, [r4, #0]
 8009712:	079b      	lsls	r3, r3, #30
 8009714:	d413      	bmi.n	800973e <_printf_i+0x232>
 8009716:	68e0      	ldr	r0, [r4, #12]
 8009718:	9b03      	ldr	r3, [sp, #12]
 800971a:	4298      	cmp	r0, r3
 800971c:	bfb8      	it	lt
 800971e:	4618      	movlt	r0, r3
 8009720:	e7a6      	b.n	8009670 <_printf_i+0x164>
 8009722:	2301      	movs	r3, #1
 8009724:	4632      	mov	r2, r6
 8009726:	4649      	mov	r1, r9
 8009728:	4640      	mov	r0, r8
 800972a:	47d0      	blx	sl
 800972c:	3001      	adds	r0, #1
 800972e:	d09d      	beq.n	800966c <_printf_i+0x160>
 8009730:	3501      	adds	r5, #1
 8009732:	68e3      	ldr	r3, [r4, #12]
 8009734:	9903      	ldr	r1, [sp, #12]
 8009736:	1a5b      	subs	r3, r3, r1
 8009738:	42ab      	cmp	r3, r5
 800973a:	dcf2      	bgt.n	8009722 <_printf_i+0x216>
 800973c:	e7eb      	b.n	8009716 <_printf_i+0x20a>
 800973e:	2500      	movs	r5, #0
 8009740:	f104 0619 	add.w	r6, r4, #25
 8009744:	e7f5      	b.n	8009732 <_printf_i+0x226>
 8009746:	bf00      	nop
 8009748:	08011bb1 	.word	0x08011bb1
 800974c:	08011bc2 	.word	0x08011bc2

08009750 <__sflush_r>:
 8009750:	898a      	ldrh	r2, [r1, #12]
 8009752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009756:	4605      	mov	r5, r0
 8009758:	0710      	lsls	r0, r2, #28
 800975a:	460c      	mov	r4, r1
 800975c:	d458      	bmi.n	8009810 <__sflush_r+0xc0>
 800975e:	684b      	ldr	r3, [r1, #4]
 8009760:	2b00      	cmp	r3, #0
 8009762:	dc05      	bgt.n	8009770 <__sflush_r+0x20>
 8009764:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009766:	2b00      	cmp	r3, #0
 8009768:	dc02      	bgt.n	8009770 <__sflush_r+0x20>
 800976a:	2000      	movs	r0, #0
 800976c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009770:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009772:	2e00      	cmp	r6, #0
 8009774:	d0f9      	beq.n	800976a <__sflush_r+0x1a>
 8009776:	2300      	movs	r3, #0
 8009778:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800977c:	682f      	ldr	r7, [r5, #0]
 800977e:	6a21      	ldr	r1, [r4, #32]
 8009780:	602b      	str	r3, [r5, #0]
 8009782:	d032      	beq.n	80097ea <__sflush_r+0x9a>
 8009784:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009786:	89a3      	ldrh	r3, [r4, #12]
 8009788:	075a      	lsls	r2, r3, #29
 800978a:	d505      	bpl.n	8009798 <__sflush_r+0x48>
 800978c:	6863      	ldr	r3, [r4, #4]
 800978e:	1ac0      	subs	r0, r0, r3
 8009790:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009792:	b10b      	cbz	r3, 8009798 <__sflush_r+0x48>
 8009794:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009796:	1ac0      	subs	r0, r0, r3
 8009798:	2300      	movs	r3, #0
 800979a:	4602      	mov	r2, r0
 800979c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800979e:	6a21      	ldr	r1, [r4, #32]
 80097a0:	4628      	mov	r0, r5
 80097a2:	47b0      	blx	r6
 80097a4:	1c43      	adds	r3, r0, #1
 80097a6:	89a3      	ldrh	r3, [r4, #12]
 80097a8:	d106      	bne.n	80097b8 <__sflush_r+0x68>
 80097aa:	6829      	ldr	r1, [r5, #0]
 80097ac:	291d      	cmp	r1, #29
 80097ae:	d82b      	bhi.n	8009808 <__sflush_r+0xb8>
 80097b0:	4a29      	ldr	r2, [pc, #164]	; (8009858 <__sflush_r+0x108>)
 80097b2:	410a      	asrs	r2, r1
 80097b4:	07d6      	lsls	r6, r2, #31
 80097b6:	d427      	bmi.n	8009808 <__sflush_r+0xb8>
 80097b8:	2200      	movs	r2, #0
 80097ba:	6062      	str	r2, [r4, #4]
 80097bc:	04d9      	lsls	r1, r3, #19
 80097be:	6922      	ldr	r2, [r4, #16]
 80097c0:	6022      	str	r2, [r4, #0]
 80097c2:	d504      	bpl.n	80097ce <__sflush_r+0x7e>
 80097c4:	1c42      	adds	r2, r0, #1
 80097c6:	d101      	bne.n	80097cc <__sflush_r+0x7c>
 80097c8:	682b      	ldr	r3, [r5, #0]
 80097ca:	b903      	cbnz	r3, 80097ce <__sflush_r+0x7e>
 80097cc:	6560      	str	r0, [r4, #84]	; 0x54
 80097ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097d0:	602f      	str	r7, [r5, #0]
 80097d2:	2900      	cmp	r1, #0
 80097d4:	d0c9      	beq.n	800976a <__sflush_r+0x1a>
 80097d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097da:	4299      	cmp	r1, r3
 80097dc:	d002      	beq.n	80097e4 <__sflush_r+0x94>
 80097de:	4628      	mov	r0, r5
 80097e0:	f7ff fc96 	bl	8009110 <_free_r>
 80097e4:	2000      	movs	r0, #0
 80097e6:	6360      	str	r0, [r4, #52]	; 0x34
 80097e8:	e7c0      	b.n	800976c <__sflush_r+0x1c>
 80097ea:	2301      	movs	r3, #1
 80097ec:	4628      	mov	r0, r5
 80097ee:	47b0      	blx	r6
 80097f0:	1c41      	adds	r1, r0, #1
 80097f2:	d1c8      	bne.n	8009786 <__sflush_r+0x36>
 80097f4:	682b      	ldr	r3, [r5, #0]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d0c5      	beq.n	8009786 <__sflush_r+0x36>
 80097fa:	2b1d      	cmp	r3, #29
 80097fc:	d001      	beq.n	8009802 <__sflush_r+0xb2>
 80097fe:	2b16      	cmp	r3, #22
 8009800:	d101      	bne.n	8009806 <__sflush_r+0xb6>
 8009802:	602f      	str	r7, [r5, #0]
 8009804:	e7b1      	b.n	800976a <__sflush_r+0x1a>
 8009806:	89a3      	ldrh	r3, [r4, #12]
 8009808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800980c:	81a3      	strh	r3, [r4, #12]
 800980e:	e7ad      	b.n	800976c <__sflush_r+0x1c>
 8009810:	690f      	ldr	r7, [r1, #16]
 8009812:	2f00      	cmp	r7, #0
 8009814:	d0a9      	beq.n	800976a <__sflush_r+0x1a>
 8009816:	0793      	lsls	r3, r2, #30
 8009818:	680e      	ldr	r6, [r1, #0]
 800981a:	bf08      	it	eq
 800981c:	694b      	ldreq	r3, [r1, #20]
 800981e:	600f      	str	r7, [r1, #0]
 8009820:	bf18      	it	ne
 8009822:	2300      	movne	r3, #0
 8009824:	eba6 0807 	sub.w	r8, r6, r7
 8009828:	608b      	str	r3, [r1, #8]
 800982a:	f1b8 0f00 	cmp.w	r8, #0
 800982e:	dd9c      	ble.n	800976a <__sflush_r+0x1a>
 8009830:	6a21      	ldr	r1, [r4, #32]
 8009832:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009834:	4643      	mov	r3, r8
 8009836:	463a      	mov	r2, r7
 8009838:	4628      	mov	r0, r5
 800983a:	47b0      	blx	r6
 800983c:	2800      	cmp	r0, #0
 800983e:	dc06      	bgt.n	800984e <__sflush_r+0xfe>
 8009840:	89a3      	ldrh	r3, [r4, #12]
 8009842:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009846:	81a3      	strh	r3, [r4, #12]
 8009848:	f04f 30ff 	mov.w	r0, #4294967295
 800984c:	e78e      	b.n	800976c <__sflush_r+0x1c>
 800984e:	4407      	add	r7, r0
 8009850:	eba8 0800 	sub.w	r8, r8, r0
 8009854:	e7e9      	b.n	800982a <__sflush_r+0xda>
 8009856:	bf00      	nop
 8009858:	dfbffffe 	.word	0xdfbffffe

0800985c <_fflush_r>:
 800985c:	b538      	push	{r3, r4, r5, lr}
 800985e:	690b      	ldr	r3, [r1, #16]
 8009860:	4605      	mov	r5, r0
 8009862:	460c      	mov	r4, r1
 8009864:	b913      	cbnz	r3, 800986c <_fflush_r+0x10>
 8009866:	2500      	movs	r5, #0
 8009868:	4628      	mov	r0, r5
 800986a:	bd38      	pop	{r3, r4, r5, pc}
 800986c:	b118      	cbz	r0, 8009876 <_fflush_r+0x1a>
 800986e:	6a03      	ldr	r3, [r0, #32]
 8009870:	b90b      	cbnz	r3, 8009876 <_fflush_r+0x1a>
 8009872:	f7ff fa45 	bl	8008d00 <__sinit>
 8009876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d0f3      	beq.n	8009866 <_fflush_r+0xa>
 800987e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009880:	07d0      	lsls	r0, r2, #31
 8009882:	d404      	bmi.n	800988e <_fflush_r+0x32>
 8009884:	0599      	lsls	r1, r3, #22
 8009886:	d402      	bmi.n	800988e <_fflush_r+0x32>
 8009888:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800988a:	f7ff fc3e 	bl	800910a <__retarget_lock_acquire_recursive>
 800988e:	4628      	mov	r0, r5
 8009890:	4621      	mov	r1, r4
 8009892:	f7ff ff5d 	bl	8009750 <__sflush_r>
 8009896:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009898:	07da      	lsls	r2, r3, #31
 800989a:	4605      	mov	r5, r0
 800989c:	d4e4      	bmi.n	8009868 <_fflush_r+0xc>
 800989e:	89a3      	ldrh	r3, [r4, #12]
 80098a0:	059b      	lsls	r3, r3, #22
 80098a2:	d4e1      	bmi.n	8009868 <_fflush_r+0xc>
 80098a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098a6:	f7ff fc31 	bl	800910c <__retarget_lock_release_recursive>
 80098aa:	e7dd      	b.n	8009868 <_fflush_r+0xc>

080098ac <__swhatbuf_r>:
 80098ac:	b570      	push	{r4, r5, r6, lr}
 80098ae:	460c      	mov	r4, r1
 80098b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098b4:	2900      	cmp	r1, #0
 80098b6:	b096      	sub	sp, #88	; 0x58
 80098b8:	4615      	mov	r5, r2
 80098ba:	461e      	mov	r6, r3
 80098bc:	da0d      	bge.n	80098da <__swhatbuf_r+0x2e>
 80098be:	89a3      	ldrh	r3, [r4, #12]
 80098c0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80098c4:	f04f 0100 	mov.w	r1, #0
 80098c8:	bf0c      	ite	eq
 80098ca:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80098ce:	2340      	movne	r3, #64	; 0x40
 80098d0:	2000      	movs	r0, #0
 80098d2:	6031      	str	r1, [r6, #0]
 80098d4:	602b      	str	r3, [r5, #0]
 80098d6:	b016      	add	sp, #88	; 0x58
 80098d8:	bd70      	pop	{r4, r5, r6, pc}
 80098da:	466a      	mov	r2, sp
 80098dc:	f000 f848 	bl	8009970 <_fstat_r>
 80098e0:	2800      	cmp	r0, #0
 80098e2:	dbec      	blt.n	80098be <__swhatbuf_r+0x12>
 80098e4:	9901      	ldr	r1, [sp, #4]
 80098e6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80098ea:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80098ee:	4259      	negs	r1, r3
 80098f0:	4159      	adcs	r1, r3
 80098f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098f6:	e7eb      	b.n	80098d0 <__swhatbuf_r+0x24>

080098f8 <__smakebuf_r>:
 80098f8:	898b      	ldrh	r3, [r1, #12]
 80098fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80098fc:	079d      	lsls	r5, r3, #30
 80098fe:	4606      	mov	r6, r0
 8009900:	460c      	mov	r4, r1
 8009902:	d507      	bpl.n	8009914 <__smakebuf_r+0x1c>
 8009904:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009908:	6023      	str	r3, [r4, #0]
 800990a:	6123      	str	r3, [r4, #16]
 800990c:	2301      	movs	r3, #1
 800990e:	6163      	str	r3, [r4, #20]
 8009910:	b002      	add	sp, #8
 8009912:	bd70      	pop	{r4, r5, r6, pc}
 8009914:	ab01      	add	r3, sp, #4
 8009916:	466a      	mov	r2, sp
 8009918:	f7ff ffc8 	bl	80098ac <__swhatbuf_r>
 800991c:	9900      	ldr	r1, [sp, #0]
 800991e:	4605      	mov	r5, r0
 8009920:	4630      	mov	r0, r6
 8009922:	f7ff f8d5 	bl	8008ad0 <_malloc_r>
 8009926:	b948      	cbnz	r0, 800993c <__smakebuf_r+0x44>
 8009928:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800992c:	059a      	lsls	r2, r3, #22
 800992e:	d4ef      	bmi.n	8009910 <__smakebuf_r+0x18>
 8009930:	f023 0303 	bic.w	r3, r3, #3
 8009934:	f043 0302 	orr.w	r3, r3, #2
 8009938:	81a3      	strh	r3, [r4, #12]
 800993a:	e7e3      	b.n	8009904 <__smakebuf_r+0xc>
 800993c:	89a3      	ldrh	r3, [r4, #12]
 800993e:	6020      	str	r0, [r4, #0]
 8009940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009944:	81a3      	strh	r3, [r4, #12]
 8009946:	9b00      	ldr	r3, [sp, #0]
 8009948:	6163      	str	r3, [r4, #20]
 800994a:	9b01      	ldr	r3, [sp, #4]
 800994c:	6120      	str	r0, [r4, #16]
 800994e:	b15b      	cbz	r3, 8009968 <__smakebuf_r+0x70>
 8009950:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009954:	4630      	mov	r0, r6
 8009956:	f000 f81d 	bl	8009994 <_isatty_r>
 800995a:	b128      	cbz	r0, 8009968 <__smakebuf_r+0x70>
 800995c:	89a3      	ldrh	r3, [r4, #12]
 800995e:	f023 0303 	bic.w	r3, r3, #3
 8009962:	f043 0301 	orr.w	r3, r3, #1
 8009966:	81a3      	strh	r3, [r4, #12]
 8009968:	89a3      	ldrh	r3, [r4, #12]
 800996a:	431d      	orrs	r5, r3
 800996c:	81a5      	strh	r5, [r4, #12]
 800996e:	e7cf      	b.n	8009910 <__smakebuf_r+0x18>

08009970 <_fstat_r>:
 8009970:	b538      	push	{r3, r4, r5, lr}
 8009972:	4d07      	ldr	r5, [pc, #28]	; (8009990 <_fstat_r+0x20>)
 8009974:	2300      	movs	r3, #0
 8009976:	4604      	mov	r4, r0
 8009978:	4608      	mov	r0, r1
 800997a:	4611      	mov	r1, r2
 800997c:	602b      	str	r3, [r5, #0]
 800997e:	f000 fae3 	bl	8009f48 <_fstat>
 8009982:	1c43      	adds	r3, r0, #1
 8009984:	d102      	bne.n	800998c <_fstat_r+0x1c>
 8009986:	682b      	ldr	r3, [r5, #0]
 8009988:	b103      	cbz	r3, 800998c <_fstat_r+0x1c>
 800998a:	6023      	str	r3, [r4, #0]
 800998c:	bd38      	pop	{r3, r4, r5, pc}
 800998e:	bf00      	nop
 8009990:	20001108 	.word	0x20001108

08009994 <_isatty_r>:
 8009994:	b538      	push	{r3, r4, r5, lr}
 8009996:	4d06      	ldr	r5, [pc, #24]	; (80099b0 <_isatty_r+0x1c>)
 8009998:	2300      	movs	r3, #0
 800999a:	4604      	mov	r4, r0
 800999c:	4608      	mov	r0, r1
 800999e:	602b      	str	r3, [r5, #0]
 80099a0:	f000 fada 	bl	8009f58 <_isatty>
 80099a4:	1c43      	adds	r3, r0, #1
 80099a6:	d102      	bne.n	80099ae <_isatty_r+0x1a>
 80099a8:	682b      	ldr	r3, [r5, #0]
 80099aa:	b103      	cbz	r3, 80099ae <_isatty_r+0x1a>
 80099ac:	6023      	str	r3, [r4, #0]
 80099ae:	bd38      	pop	{r3, r4, r5, pc}
 80099b0:	20001108 	.word	0x20001108

080099b4 <expf>:
 80099b4:	b508      	push	{r3, lr}
 80099b6:	ed2d 8b02 	vpush	{d8}
 80099ba:	eef0 8a40 	vmov.f32	s17, s0
 80099be:	f000 f9ed 	bl	8009d9c <__ieee754_expf>
 80099c2:	eeb0 8a40 	vmov.f32	s16, s0
 80099c6:	eeb0 0a68 	vmov.f32	s0, s17
 80099ca:	f000 f899 	bl	8009b00 <finitef>
 80099ce:	b160      	cbz	r0, 80099ea <expf+0x36>
 80099d0:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8009a10 <expf+0x5c>
 80099d4:	eef4 8ae7 	vcmpe.f32	s17, s15
 80099d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099dc:	dd0a      	ble.n	80099f4 <expf+0x40>
 80099de:	f7ff fb69 	bl	80090b4 <__errno>
 80099e2:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8009a14 <expf+0x60>
 80099e6:	2322      	movs	r3, #34	; 0x22
 80099e8:	6003      	str	r3, [r0, #0]
 80099ea:	eeb0 0a48 	vmov.f32	s0, s16
 80099ee:	ecbd 8b02 	vpop	{d8}
 80099f2:	bd08      	pop	{r3, pc}
 80099f4:	eddf 7a08 	vldr	s15, [pc, #32]	; 8009a18 <expf+0x64>
 80099f8:	eef4 8ae7 	vcmpe.f32	s17, s15
 80099fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a00:	d5f3      	bpl.n	80099ea <expf+0x36>
 8009a02:	f7ff fb57 	bl	80090b4 <__errno>
 8009a06:	2322      	movs	r3, #34	; 0x22
 8009a08:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8009a1c <expf+0x68>
 8009a0c:	6003      	str	r3, [r0, #0]
 8009a0e:	e7ec      	b.n	80099ea <expf+0x36>
 8009a10:	42b17217 	.word	0x42b17217
 8009a14:	7f800000 	.word	0x7f800000
 8009a18:	c2cff1b5 	.word	0xc2cff1b5
 8009a1c:	00000000 	.word	0x00000000

08009a20 <fabsf>:
 8009a20:	ee10 3a10 	vmov	r3, s0
 8009a24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009a28:	ee00 3a10 	vmov	s0, r3
 8009a2c:	4770      	bx	lr
	...

08009a30 <tanhf>:
 8009a30:	b538      	push	{r3, r4, r5, lr}
 8009a32:	ee10 5a10 	vmov	r5, s0
 8009a36:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009a3a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009a3e:	ed2d 8b02 	vpush	{d8}
 8009a42:	db0f      	blt.n	8009a64 <tanhf+0x34>
 8009a44:	4b2a      	ldr	r3, [pc, #168]	; (8009af0 <tanhf+0xc0>)
 8009a46:	ed93 6a00 	vldr	s12, [r3]
 8009a4a:	edd3 6a00 	vldr	s13, [r3]
 8009a4e:	eec6 7a00 	vdiv.f32	s15, s12, s0
 8009a52:	2d00      	cmp	r5, #0
 8009a54:	bfac      	ite	ge
 8009a56:	ee37 0aa6 	vaddge.f32	s0, s15, s13
 8009a5a:	ee37 0ae6 	vsublt.f32	s0, s15, s13
 8009a5e:	ecbd 8b02 	vpop	{d8}
 8009a62:	bd38      	pop	{r3, r4, r5, pc}
 8009a64:	4a23      	ldr	r2, [pc, #140]	; (8009af4 <tanhf+0xc4>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	dc39      	bgt.n	8009ade <tanhf+0xae>
 8009a6a:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 8009a6e:	da07      	bge.n	8009a80 <tanhf+0x50>
 8009a70:	4b1f      	ldr	r3, [pc, #124]	; (8009af0 <tanhf+0xc0>)
 8009a72:	edd3 7a00 	vldr	s15, [r3]
 8009a76:	ee77 7a80 	vadd.f32	s15, s15, s0
 8009a7a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009a7e:	e7ee      	b.n	8009a5e <tanhf+0x2e>
 8009a80:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8009a84:	4c1c      	ldr	r4, [pc, #112]	; (8009af8 <tanhf+0xc8>)
 8009a86:	db19      	blt.n	8009abc <tanhf+0x8c>
 8009a88:	f7ff ffca 	bl	8009a20 <fabsf>
 8009a8c:	edd4 7a00 	vldr	s15, [r4]
 8009a90:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009a94:	f000 f842 	bl	8009b1c <expm1f>
 8009a98:	4b15      	ldr	r3, [pc, #84]	; (8009af0 <tanhf+0xc0>)
 8009a9a:	edd3 7a00 	vldr	s15, [r3]
 8009a9e:	edd4 6a00 	vldr	s13, [r4]
 8009aa2:	ed94 7a00 	vldr	s14, [r4]
 8009aa6:	ee37 0a00 	vadd.f32	s0, s14, s0
 8009aaa:	ee86 7a80 	vdiv.f32	s14, s13, s0
 8009aae:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8009ab2:	2d00      	cmp	r5, #0
 8009ab4:	bfb8      	it	lt
 8009ab6:	eeb1 0a40 	vneglt.f32	s0, s0
 8009aba:	e7d0      	b.n	8009a5e <tanhf+0x2e>
 8009abc:	ed94 8a00 	vldr	s16, [r4]
 8009ac0:	f7ff ffae 	bl	8009a20 <fabsf>
 8009ac4:	ee28 0a40 	vnmul.f32	s0, s16, s0
 8009ac8:	f000 f828 	bl	8009b1c <expm1f>
 8009acc:	edd4 7a00 	vldr	s15, [r4]
 8009ad0:	ee77 7a80 	vadd.f32	s15, s15, s0
 8009ad4:	eeb1 7a40 	vneg.f32	s14, s0
 8009ad8:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8009adc:	e7e9      	b.n	8009ab2 <tanhf+0x82>
 8009ade:	4b04      	ldr	r3, [pc, #16]	; (8009af0 <tanhf+0xc0>)
 8009ae0:	ed93 0a00 	vldr	s0, [r3]
 8009ae4:	4b05      	ldr	r3, [pc, #20]	; (8009afc <tanhf+0xcc>)
 8009ae6:	edd3 7a00 	vldr	s15, [r3]
 8009aea:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009aee:	e7e0      	b.n	8009ab2 <tanhf+0x82>
 8009af0:	2000097c 	.word	0x2000097c
 8009af4:	41afffff 	.word	0x41afffff
 8009af8:	20000984 	.word	0x20000984
 8009afc:	20000980 	.word	0x20000980

08009b00 <finitef>:
 8009b00:	b082      	sub	sp, #8
 8009b02:	ed8d 0a01 	vstr	s0, [sp, #4]
 8009b06:	9801      	ldr	r0, [sp, #4]
 8009b08:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009b0c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8009b10:	bfac      	ite	ge
 8009b12:	2000      	movge	r0, #0
 8009b14:	2001      	movlt	r0, #1
 8009b16:	b002      	add	sp, #8
 8009b18:	4770      	bx	lr
	...

08009b1c <expm1f>:
 8009b1c:	ee10 2a10 	vmov	r2, s0
 8009b20:	497e      	ldr	r1, [pc, #504]	; (8009d1c <expm1f+0x200>)
 8009b22:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8009b26:	428b      	cmp	r3, r1
 8009b28:	d921      	bls.n	8009b6e <expm1f+0x52>
 8009b2a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009b2e:	d902      	bls.n	8009b36 <expm1f+0x1a>
 8009b30:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009b34:	4770      	bx	lr
 8009b36:	d106      	bne.n	8009b46 <expm1f+0x2a>
 8009b38:	2a00      	cmp	r2, #0
 8009b3a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8009b3e:	bfb8      	it	lt
 8009b40:	eeb0 0a67 	vmovlt.f32	s0, s15
 8009b44:	4770      	bx	lr
 8009b46:	2a00      	cmp	r2, #0
 8009b48:	db05      	blt.n	8009b56 <expm1f+0x3a>
 8009b4a:	4975      	ldr	r1, [pc, #468]	; (8009d20 <expm1f+0x204>)
 8009b4c:	428b      	cmp	r3, r1
 8009b4e:	d95c      	bls.n	8009c0a <expm1f+0xee>
 8009b50:	2000      	movs	r0, #0
 8009b52:	f000 b91d 	b.w	8009d90 <__math_oflowf>
 8009b56:	eddf 7a73 	vldr	s15, [pc, #460]	; 8009d24 <expm1f+0x208>
 8009b5a:	ee70 7a27 	vadd.f32	s15, s0, s15
 8009b5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b66:	d550      	bpl.n	8009c0a <expm1f+0xee>
 8009b68:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8009b6c:	4770      	bx	lr
 8009b6e:	496e      	ldr	r1, [pc, #440]	; (8009d28 <expm1f+0x20c>)
 8009b70:	428b      	cmp	r3, r1
 8009b72:	d967      	bls.n	8009c44 <expm1f+0x128>
 8009b74:	496d      	ldr	r1, [pc, #436]	; (8009d2c <expm1f+0x210>)
 8009b76:	428b      	cmp	r3, r1
 8009b78:	d847      	bhi.n	8009c0a <expm1f+0xee>
 8009b7a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8009d30 <expm1f+0x214>
 8009b7e:	2a00      	cmp	r2, #0
 8009b80:	bfa7      	ittee	ge
 8009b82:	ee30 7a47 	vsubge.f32	s14, s0, s14
 8009b86:	eddf 6a6b 	vldrge	s13, [pc, #428]	; 8009d34 <expm1f+0x218>
 8009b8a:	eddf 6a6b 	vldrlt	s13, [pc, #428]	; 8009d38 <expm1f+0x21c>
 8009b8e:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 8009b92:	bfac      	ite	ge
 8009b94:	2301      	movge	r3, #1
 8009b96:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b9a:	ee37 0a66 	vsub.f32	s0, s14, s13
 8009b9e:	ee77 7a40 	vsub.f32	s15, s14, s0
 8009ba2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009ba6:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8009baa:	ee20 4a25 	vmul.f32	s8, s0, s11
 8009bae:	ed9f 6a63 	vldr	s12, [pc, #396]	; 8009d3c <expm1f+0x220>
 8009bb2:	eddf 6a63 	vldr	s13, [pc, #396]	; 8009d40 <expm1f+0x224>
 8009bb6:	ed9f 5a63 	vldr	s10, [pc, #396]	; 8009d44 <expm1f+0x228>
 8009bba:	ee20 7a04 	vmul.f32	s14, s0, s8
 8009bbe:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 8009bc2:	eee7 6a06 	vfma.f32	s13, s14, s12
 8009bc6:	ed9f 6a60 	vldr	s12, [pc, #384]	; 8009d48 <expm1f+0x22c>
 8009bca:	eea6 6a87 	vfma.f32	s12, s13, s14
 8009bce:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009d4c <expm1f+0x230>
 8009bd2:	eee6 6a07 	vfma.f32	s13, s12, s14
 8009bd6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009bda:	eea6 5a87 	vfma.f32	s10, s13, s14
 8009bde:	eef0 6a46 	vmov.f32	s13, s12
 8009be2:	eee5 6a07 	vfma.f32	s13, s10, s14
 8009be6:	eee4 4a66 	vfms.f32	s9, s8, s13
 8009bea:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 8009bee:	eea0 4a64 	vfms.f32	s8, s0, s9
 8009bf2:	ee36 5ae4 	vsub.f32	s10, s13, s9
 8009bf6:	eec5 6a04 	vdiv.f32	s13, s10, s8
 8009bfa:	ee66 6a87 	vmul.f32	s13, s13, s14
 8009bfe:	bb7b      	cbnz	r3, 8009c60 <expm1f+0x144>
 8009c00:	ee90 7a26 	vfnms.f32	s14, s0, s13
 8009c04:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009c08:	4770      	bx	lr
 8009c0a:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8009c0e:	2a00      	cmp	r2, #0
 8009c10:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8009c14:	bfb8      	it	lt
 8009c16:	eef0 7a47 	vmovlt.f32	s15, s14
 8009c1a:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8009d50 <expm1f+0x234>
 8009c1e:	ee40 7a07 	vmla.f32	s15, s0, s14
 8009c22:	eeb0 7a40 	vmov.f32	s14, s0
 8009c26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009c2a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009c2e:	ee17 3a90 	vmov	r3, s15
 8009c32:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8009d30 <expm1f+0x214>
 8009c36:	eea6 7ae7 	vfms.f32	s14, s13, s15
 8009c3a:	eddf 7a3e 	vldr	s15, [pc, #248]	; 8009d34 <expm1f+0x218>
 8009c3e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8009c42:	e7aa      	b.n	8009b9a <expm1f+0x7e>
 8009c44:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 8009c48:	d208      	bcs.n	8009c5c <expm1f+0x140>
 8009c4a:	eddf 7a42 	vldr	s15, [pc, #264]	; 8009d54 <expm1f+0x238>
 8009c4e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8009c52:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8009c56:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009c5a:	4770      	bx	lr
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	e7a2      	b.n	8009ba6 <expm1f+0x8a>
 8009c60:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8009c64:	1c5a      	adds	r2, r3, #1
 8009c66:	eed6 7a80 	vfnms.f32	s15, s13, s0
 8009c6a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009c6e:	d106      	bne.n	8009c7e <expm1f+0x162>
 8009c70:	ee70 7a67 	vsub.f32	s15, s0, s15
 8009c74:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8009c78:	eea7 0aa5 	vfma.f32	s0, s15, s11
 8009c7c:	4770      	bx	lr
 8009c7e:	2b01      	cmp	r3, #1
 8009c80:	d118      	bne.n	8009cb4 <expm1f+0x198>
 8009c82:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 8009c86:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8009c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c8e:	bf5b      	ittet	pl
 8009c90:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 8009c94:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
 8009c98:	ee70 5a25 	vaddmi.f32	s11, s0, s11
 8009c9c:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 8009ca0:	bf43      	ittte	mi
 8009ca2:	ee77 7ae5 	vsubmi.f32	s15, s15, s11
 8009ca6:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
 8009caa:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 8009cae:	eeb0 0a46 	vmovpl.f32	s0, s12
 8009cb2:	4770      	bx	lr
 8009cb4:	1c5a      	adds	r2, r3, #1
 8009cb6:	2a39      	cmp	r2, #57	; 0x39
 8009cb8:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 8009cbc:	d90b      	bls.n	8009cd6 <expm1f+0x1ba>
 8009cbe:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009cc2:	ee76 7a67 	vsub.f32	s15, s12, s15
 8009cc6:	ee17 3a90 	vmov	r3, s15
 8009cca:	4419      	add	r1, r3
 8009ccc:	ee07 1a90 	vmov	s15, r1
 8009cd0:	ee37 0ac6 	vsub.f32	s0, s15, s12
 8009cd4:	4770      	bx	lr
 8009cd6:	2b16      	cmp	r3, #22
 8009cd8:	dc11      	bgt.n	8009cfe <expm1f+0x1e2>
 8009cda:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009cde:	fa42 f303 	asr.w	r3, r2, r3
 8009ce2:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 8009ce6:	ee07 3a10 	vmov	s14, r3
 8009cea:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009cee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009cf2:	ee17 3a90 	vmov	r3, s15
 8009cf6:	440b      	add	r3, r1
 8009cf8:	ee00 3a10 	vmov	s0, r3
 8009cfc:	4770      	bx	lr
 8009cfe:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8009d02:	05db      	lsls	r3, r3, #23
 8009d04:	ee07 3a10 	vmov	s14, r3
 8009d08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009d0c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8009d10:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009d14:	ee17 3a90 	vmov	r3, s15
 8009d18:	e7ed      	b.n	8009cf6 <expm1f+0x1da>
 8009d1a:	bf00      	nop
 8009d1c:	4195b843 	.word	0x4195b843
 8009d20:	42b17217 	.word	0x42b17217
 8009d24:	0da24260 	.word	0x0da24260
 8009d28:	3eb17218 	.word	0x3eb17218
 8009d2c:	3f851591 	.word	0x3f851591
 8009d30:	3f317180 	.word	0x3f317180
 8009d34:	3717f7d1 	.word	0x3717f7d1
 8009d38:	b717f7d1 	.word	0xb717f7d1
 8009d3c:	b457edbb 	.word	0xb457edbb
 8009d40:	36867e54 	.word	0x36867e54
 8009d44:	bd088889 	.word	0xbd088889
 8009d48:	b8a670cd 	.word	0xb8a670cd
 8009d4c:	3ad00d01 	.word	0x3ad00d01
 8009d50:	3fb8aa3b 	.word	0x3fb8aa3b
 8009d54:	7149f2ca 	.word	0x7149f2ca

08009d58 <with_errnof>:
 8009d58:	b513      	push	{r0, r1, r4, lr}
 8009d5a:	4604      	mov	r4, r0
 8009d5c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8009d60:	f7ff f9a8 	bl	80090b4 <__errno>
 8009d64:	ed9d 0a01 	vldr	s0, [sp, #4]
 8009d68:	6004      	str	r4, [r0, #0]
 8009d6a:	b002      	add	sp, #8
 8009d6c:	bd10      	pop	{r4, pc}

08009d6e <xflowf>:
 8009d6e:	b130      	cbz	r0, 8009d7e <xflowf+0x10>
 8009d70:	eef1 7a40 	vneg.f32	s15, s0
 8009d74:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009d78:	2022      	movs	r0, #34	; 0x22
 8009d7a:	f7ff bfed 	b.w	8009d58 <with_errnof>
 8009d7e:	eef0 7a40 	vmov.f32	s15, s0
 8009d82:	e7f7      	b.n	8009d74 <xflowf+0x6>

08009d84 <__math_uflowf>:
 8009d84:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009d8c <__math_uflowf+0x8>
 8009d88:	f7ff bff1 	b.w	8009d6e <xflowf>
 8009d8c:	10000000 	.word	0x10000000

08009d90 <__math_oflowf>:
 8009d90:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009d98 <__math_oflowf+0x8>
 8009d94:	f7ff bfeb 	b.w	8009d6e <xflowf>
 8009d98:	70000000 	.word	0x70000000

08009d9c <__ieee754_expf>:
 8009d9c:	ee10 2a10 	vmov	r2, s0
 8009da0:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8009da4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009da8:	d902      	bls.n	8009db0 <__ieee754_expf+0x14>
 8009daa:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009dae:	4770      	bx	lr
 8009db0:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8009db4:	d106      	bne.n	8009dc4 <__ieee754_expf+0x28>
 8009db6:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8009ef0 <__ieee754_expf+0x154>
 8009dba:	2900      	cmp	r1, #0
 8009dbc:	bf18      	it	ne
 8009dbe:	eeb0 0a67 	vmovne.f32	s0, s15
 8009dc2:	4770      	bx	lr
 8009dc4:	484b      	ldr	r0, [pc, #300]	; (8009ef4 <__ieee754_expf+0x158>)
 8009dc6:	4282      	cmp	r2, r0
 8009dc8:	dd02      	ble.n	8009dd0 <__ieee754_expf+0x34>
 8009dca:	2000      	movs	r0, #0
 8009dcc:	f7ff bfe0 	b.w	8009d90 <__math_oflowf>
 8009dd0:	2a00      	cmp	r2, #0
 8009dd2:	da05      	bge.n	8009de0 <__ieee754_expf+0x44>
 8009dd4:	4a48      	ldr	r2, [pc, #288]	; (8009ef8 <__ieee754_expf+0x15c>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d902      	bls.n	8009de0 <__ieee754_expf+0x44>
 8009dda:	2000      	movs	r0, #0
 8009ddc:	f7ff bfd2 	b.w	8009d84 <__math_uflowf>
 8009de0:	4a46      	ldr	r2, [pc, #280]	; (8009efc <__ieee754_expf+0x160>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8009de8:	d952      	bls.n	8009e90 <__ieee754_expf+0xf4>
 8009dea:	4a45      	ldr	r2, [pc, #276]	; (8009f00 <__ieee754_expf+0x164>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8009df2:	d834      	bhi.n	8009e5e <__ieee754_expf+0xc2>
 8009df4:	4b43      	ldr	r3, [pc, #268]	; (8009f04 <__ieee754_expf+0x168>)
 8009df6:	4413      	add	r3, r2
 8009df8:	ed93 7a00 	vldr	s14, [r3]
 8009dfc:	4b42      	ldr	r3, [pc, #264]	; (8009f08 <__ieee754_expf+0x16c>)
 8009dfe:	4413      	add	r3, r2
 8009e00:	ee30 7a47 	vsub.f32	s14, s0, s14
 8009e04:	f1c1 0201 	rsb	r2, r1, #1
 8009e08:	edd3 7a00 	vldr	s15, [r3]
 8009e0c:	1a52      	subs	r2, r2, r1
 8009e0e:	ee37 0a67 	vsub.f32	s0, s14, s15
 8009e12:	ee20 6a00 	vmul.f32	s12, s0, s0
 8009e16:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8009f0c <__ieee754_expf+0x170>
 8009e1a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009f10 <__ieee754_expf+0x174>
 8009e1e:	eee6 6a05 	vfma.f32	s13, s12, s10
 8009e22:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8009f14 <__ieee754_expf+0x178>
 8009e26:	eea6 5a86 	vfma.f32	s10, s13, s12
 8009e2a:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009f18 <__ieee754_expf+0x17c>
 8009e2e:	eee5 6a06 	vfma.f32	s13, s10, s12
 8009e32:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8009f1c <__ieee754_expf+0x180>
 8009e36:	eea6 5a86 	vfma.f32	s10, s13, s12
 8009e3a:	eef0 6a40 	vmov.f32	s13, s0
 8009e3e:	eee5 6a46 	vfms.f32	s13, s10, s12
 8009e42:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8009e46:	ee20 5a26 	vmul.f32	s10, s0, s13
 8009e4a:	bb92      	cbnz	r2, 8009eb2 <__ieee754_expf+0x116>
 8009e4c:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8009e50:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8009e54:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8009e58:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8009e5c:	4770      	bx	lr
 8009e5e:	4b30      	ldr	r3, [pc, #192]	; (8009f20 <__ieee754_expf+0x184>)
 8009e60:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8009f24 <__ieee754_expf+0x188>
 8009e64:	eddf 6a30 	vldr	s13, [pc, #192]	; 8009f28 <__ieee754_expf+0x18c>
 8009e68:	4413      	add	r3, r2
 8009e6a:	edd3 7a00 	vldr	s15, [r3]
 8009e6e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009e72:	eeb0 7a40 	vmov.f32	s14, s0
 8009e76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009e7a:	ee17 2a90 	vmov	r2, s15
 8009e7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e82:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8009e86:	eddf 6a29 	vldr	s13, [pc, #164]	; 8009f2c <__ieee754_expf+0x190>
 8009e8a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009e8e:	e7be      	b.n	8009e0e <__ieee754_expf+0x72>
 8009e90:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 8009e94:	d20b      	bcs.n	8009eae <__ieee754_expf+0x112>
 8009e96:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009f30 <__ieee754_expf+0x194>
 8009e9a:	ee70 6a26 	vadd.f32	s13, s0, s13
 8009e9e:	eef4 6ae5 	vcmpe.f32	s13, s11
 8009ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ea6:	dd02      	ble.n	8009eae <__ieee754_expf+0x112>
 8009ea8:	ee30 0a25 	vadd.f32	s0, s0, s11
 8009eac:	4770      	bx	lr
 8009eae:	2200      	movs	r2, #0
 8009eb0:	e7af      	b.n	8009e12 <__ieee754_expf+0x76>
 8009eb2:	ee36 6a66 	vsub.f32	s12, s12, s13
 8009eb6:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8009eba:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8009ebe:	bfb8      	it	lt
 8009ec0:	3264      	addlt	r2, #100	; 0x64
 8009ec2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009ec6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009eca:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8009ece:	ee17 3a90 	vmov	r3, s15
 8009ed2:	bfab      	itete	ge
 8009ed4:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8009ed8:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8009edc:	ee00 3a10 	vmovge	s0, r3
 8009ee0:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8009f34 <__ieee754_expf+0x198>
 8009ee4:	bfbc      	itt	lt
 8009ee6:	ee00 3a10 	vmovlt	s0, r3
 8009eea:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8009eee:	4770      	bx	lr
 8009ef0:	00000000 	.word	0x00000000
 8009ef4:	42b17217 	.word	0x42b17217
 8009ef8:	42cff1b5 	.word	0x42cff1b5
 8009efc:	3eb17218 	.word	0x3eb17218
 8009f00:	3f851591 	.word	0x3f851591
 8009f04:	08011bdc 	.word	0x08011bdc
 8009f08:	08011be4 	.word	0x08011be4
 8009f0c:	3331bb4c 	.word	0x3331bb4c
 8009f10:	b5ddea0e 	.word	0xb5ddea0e
 8009f14:	388ab355 	.word	0x388ab355
 8009f18:	bb360b61 	.word	0xbb360b61
 8009f1c:	3e2aaaab 	.word	0x3e2aaaab
 8009f20:	08011bd4 	.word	0x08011bd4
 8009f24:	3fb8aa3b 	.word	0x3fb8aa3b
 8009f28:	3f317180 	.word	0x3f317180
 8009f2c:	3717f7d1 	.word	0x3717f7d1
 8009f30:	7149f2ca 	.word	0x7149f2ca
 8009f34:	0d800000 	.word	0x0d800000

08009f38 <_close>:
 8009f38:	4b02      	ldr	r3, [pc, #8]	; (8009f44 <_close+0xc>)
 8009f3a:	2258      	movs	r2, #88	; 0x58
 8009f3c:	601a      	str	r2, [r3, #0]
 8009f3e:	f04f 30ff 	mov.w	r0, #4294967295
 8009f42:	4770      	bx	lr
 8009f44:	20001108 	.word	0x20001108

08009f48 <_fstat>:
 8009f48:	4b02      	ldr	r3, [pc, #8]	; (8009f54 <_fstat+0xc>)
 8009f4a:	2258      	movs	r2, #88	; 0x58
 8009f4c:	601a      	str	r2, [r3, #0]
 8009f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8009f52:	4770      	bx	lr
 8009f54:	20001108 	.word	0x20001108

08009f58 <_isatty>:
 8009f58:	4b02      	ldr	r3, [pc, #8]	; (8009f64 <_isatty+0xc>)
 8009f5a:	2258      	movs	r2, #88	; 0x58
 8009f5c:	601a      	str	r2, [r3, #0]
 8009f5e:	2000      	movs	r0, #0
 8009f60:	4770      	bx	lr
 8009f62:	bf00      	nop
 8009f64:	20001108 	.word	0x20001108

08009f68 <_lseek>:
 8009f68:	4b02      	ldr	r3, [pc, #8]	; (8009f74 <_lseek+0xc>)
 8009f6a:	2258      	movs	r2, #88	; 0x58
 8009f6c:	601a      	str	r2, [r3, #0]
 8009f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8009f72:	4770      	bx	lr
 8009f74:	20001108 	.word	0x20001108

08009f78 <_read>:
 8009f78:	4b02      	ldr	r3, [pc, #8]	; (8009f84 <_read+0xc>)
 8009f7a:	2258      	movs	r2, #88	; 0x58
 8009f7c:	601a      	str	r2, [r3, #0]
 8009f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8009f82:	4770      	bx	lr
 8009f84:	20001108 	.word	0x20001108

08009f88 <_write>:
 8009f88:	4b02      	ldr	r3, [pc, #8]	; (8009f94 <_write+0xc>)
 8009f8a:	2258      	movs	r2, #88	; 0x58
 8009f8c:	601a      	str	r2, [r3, #0]
 8009f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8009f92:	4770      	bx	lr
 8009f94:	20001108 	.word	0x20001108

08009f98 <_init>:
 8009f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f9a:	bf00      	nop
 8009f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f9e:	bc08      	pop	{r3}
 8009fa0:	469e      	mov	lr, r3
 8009fa2:	4770      	bx	lr

08009fa4 <_fini>:
 8009fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fa6:	bf00      	nop
 8009fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009faa:	bc08      	pop	{r3}
 8009fac:	469e      	mov	lr, r3
 8009fae:	4770      	bx	lr
