
Wine_prediction_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be0c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00017330  0800bfe0  0800bfe0  0001bfe0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08023310  08023310  00040984  2**0
                  CONTENTS
  4 .ARM          00000008  08023310  08023310  00033310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08023318  08023318  00040984  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08023318  08023318  00033318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802331c  0802331c  0003331c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000984  20000000  08023320  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ddc  200009a0  08023ca4  000409a0  2**5
                  ALLOC
 10 ._user_heap_stack 00001004  2000177c  08023ca4  0004177c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040984  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021a09  00000000  00000000  000409b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041da  00000000  00000000  000623bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a60  00000000  00000000  00066598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018a8  00000000  00000000  00067ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00036b16  00000000  00000000  000698a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000228b0  00000000  00000000  000a03b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013ea17  00000000  00000000  000c2c66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0020167d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007918  00000000  00000000  002016d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000009c  00000000  00000000  00208fe8  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000014d  00000000  00000000  00209084  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200009a0 	.word	0x200009a0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800bfb4 	.word	0x0800bfb4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200009a4 	.word	0x200009a4
 80001fc:	0800bfb4 	.word	0x0800bfb4

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a8:	f001 f987 	bl	80018ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ac:	f000 f819 	bl	80005e2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b0:	f000 fac0 	bl	8000b34 <MX_GPIO_Init>
  MX_CRC_Init();
 80005b4:	f000 f868 	bl	8000688 <MX_CRC_Init>
  MX_FMC_Init();
 80005b8:	f000 fa56 	bl	8000a68 <MX_FMC_Init>
  MX_I2C1_Init();
 80005bc:	f000 f886 	bl	80006cc <MX_I2C1_Init>
  MX_SAI1_Init();
 80005c0:	f000 f8c4 	bl	800074c <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 80005c4:	f000 f92a 	bl	800081c <MX_SDMMC1_SD_Init>
  MX_SPI2_Init();
 80005c8:	f000 f94e 	bl	8000868 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80005cc:	f000 f98a 	bl	80008e4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80005d0:	f000 f9d4 	bl	800097c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005d4:	f000 fa1e 	bl	8000a14 <MX_USB_OTG_FS_PCD_Init>
  MX_X_CUBE_AI_Init();
 80005d8:	f008 f8f8 	bl	80087cc <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_X_CUBE_AI_Process();
 80005dc:	f008 f904 	bl	80087e8 <MX_X_CUBE_AI_Process>
 80005e0:	e7fc      	b.n	80005dc <main+0x38>

080005e2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b096      	sub	sp, #88	; 0x58
 80005e6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e8:	f107 0314 	add.w	r3, r7, #20
 80005ec:	2244      	movs	r2, #68	; 0x44
 80005ee:	2100      	movs	r1, #0
 80005f0:	4618      	mov	r0, r3
 80005f2:	f00a fb6f 	bl	800acd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000604:	2000      	movs	r0, #0
 8000606:	f001 fff9 	bl	80025fc <HAL_PWREx_ControlVoltageScaling>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000610:	f000 fcae 	bl	8000f70 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
 8000614:	2330      	movs	r3, #48	; 0x30
 8000616:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000618:	2301      	movs	r3, #1
 800061a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800061c:	2301      	movs	r3, #1
 800061e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000624:	2360      	movs	r3, #96	; 0x60
 8000626:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000628:	2302      	movs	r3, #2
 800062a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800062c:	2301      	movs	r3, #1
 800062e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000630:	2301      	movs	r3, #1
 8000632:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000634:	233c      	movs	r3, #60	; 0x3c
 8000636:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 8000638:	2305      	movs	r3, #5
 800063a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800063c:	2302      	movs	r3, #2
 800063e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000640:	2302      	movs	r3, #2
 8000642:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000644:	f107 0314 	add.w	r3, r7, #20
 8000648:	4618      	mov	r0, r3
 800064a:	f002 f89b 	bl	8002784 <HAL_RCC_OscConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000654:	f000 fc8c 	bl	8000f70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000658:	230f      	movs	r3, #15
 800065a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065c:	2303      	movs	r3, #3
 800065e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800066c:	463b      	mov	r3, r7
 800066e:	2105      	movs	r1, #5
 8000670:	4618      	mov	r0, r3
 8000672:	f002 fca1 	bl	8002fb8 <HAL_RCC_ClockConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800067c:	f000 fc78 	bl	8000f70 <Error_Handler>
  }
}
 8000680:	bf00      	nop
 8000682:	3758      	adds	r7, #88	; 0x58
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800068c:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <MX_CRC_Init+0x3c>)
 800068e:	4a0e      	ldr	r2, [pc, #56]	; (80006c8 <MX_CRC_Init+0x40>)
 8000690:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000692:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <MX_CRC_Init+0x3c>)
 8000694:	2200      	movs	r2, #0
 8000696:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000698:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <MX_CRC_Init+0x3c>)
 800069a:	2200      	movs	r2, #0
 800069c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <MX_CRC_Init+0x3c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80006a4:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <MX_CRC_Init+0x3c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80006aa:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_CRC_Init+0x3c>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006b0:	4804      	ldr	r0, [pc, #16]	; (80006c4 <MX_CRC_Init+0x3c>)
 80006b2:	f001 fa81 	bl	8001bb8 <HAL_CRC_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80006bc:	f000 fc58 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	200009bc 	.word	0x200009bc
 80006c8:	40023000 	.word	0x40023000

080006cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006d0:	4b1b      	ldr	r3, [pc, #108]	; (8000740 <MX_I2C1_Init+0x74>)
 80006d2:	4a1c      	ldr	r2, [pc, #112]	; (8000744 <MX_I2C1_Init+0x78>)
 80006d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80006d6:	4b1a      	ldr	r3, [pc, #104]	; (8000740 <MX_I2C1_Init+0x74>)
 80006d8:	4a1b      	ldr	r2, [pc, #108]	; (8000748 <MX_I2C1_Init+0x7c>)
 80006da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006dc:	4b18      	ldr	r3, [pc, #96]	; (8000740 <MX_I2C1_Init+0x74>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006e2:	4b17      	ldr	r3, [pc, #92]	; (8000740 <MX_I2C1_Init+0x74>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e8:	4b15      	ldr	r3, [pc, #84]	; (8000740 <MX_I2C1_Init+0x74>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006ee:	4b14      	ldr	r3, [pc, #80]	; (8000740 <MX_I2C1_Init+0x74>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006f4:	4b12      	ldr	r3, [pc, #72]	; (8000740 <MX_I2C1_Init+0x74>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006fa:	4b11      	ldr	r3, [pc, #68]	; (8000740 <MX_I2C1_Init+0x74>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000700:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <MX_I2C1_Init+0x74>)
 8000702:	2200      	movs	r2, #0
 8000704:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000706:	480e      	ldr	r0, [pc, #56]	; (8000740 <MX_I2C1_Init+0x74>)
 8000708:	f001 fcea 	bl	80020e0 <HAL_I2C_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000712:	f000 fc2d 	bl	8000f70 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000716:	2100      	movs	r1, #0
 8000718:	4809      	ldr	r0, [pc, #36]	; (8000740 <MX_I2C1_Init+0x74>)
 800071a:	f001 fd70 	bl	80021fe <HAL_I2CEx_ConfigAnalogFilter>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000724:	f000 fc24 	bl	8000f70 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000728:	2100      	movs	r1, #0
 800072a:	4805      	ldr	r0, [pc, #20]	; (8000740 <MX_I2C1_Init+0x74>)
 800072c:	f001 fdb2 	bl	8002294 <HAL_I2CEx_ConfigDigitalFilter>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000736:	f000 fc1b 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	200009e0 	.word	0x200009e0
 8000744:	40005400 	.word	0x40005400
 8000748:	307075b1 	.word	0x307075b1

0800074c <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000750:	4b2f      	ldr	r3, [pc, #188]	; (8000810 <MX_SAI1_Init+0xc4>)
 8000752:	4a30      	ldr	r2, [pc, #192]	; (8000814 <MX_SAI1_Init+0xc8>)
 8000754:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000756:	4b2e      	ldr	r3, [pc, #184]	; (8000810 <MX_SAI1_Init+0xc4>)
 8000758:	2200      	movs	r2, #0
 800075a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800075c:	4b2c      	ldr	r3, [pc, #176]	; (8000810 <MX_SAI1_Init+0xc4>)
 800075e:	2200      	movs	r2, #0
 8000760:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000762:	4b2b      	ldr	r3, [pc, #172]	; (8000810 <MX_SAI1_Init+0xc4>)
 8000764:	2240      	movs	r2, #64	; 0x40
 8000766:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000768:	4b29      	ldr	r3, [pc, #164]	; (8000810 <MX_SAI1_Init+0xc4>)
 800076a:	2200      	movs	r2, #0
 800076c:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800076e:	4b28      	ldr	r3, [pc, #160]	; (8000810 <MX_SAI1_Init+0xc4>)
 8000770:	2200      	movs	r2, #0
 8000772:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000774:	4b26      	ldr	r3, [pc, #152]	; (8000810 <MX_SAI1_Init+0xc4>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800077a:	4b25      	ldr	r3, [pc, #148]	; (8000810 <MX_SAI1_Init+0xc4>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000780:	4b23      	ldr	r3, [pc, #140]	; (8000810 <MX_SAI1_Init+0xc4>)
 8000782:	2200      	movs	r2, #0
 8000784:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8000786:	4b22      	ldr	r3, [pc, #136]	; (8000810 <MX_SAI1_Init+0xc4>)
 8000788:	2200      	movs	r2, #0
 800078a:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800078c:	4b20      	ldr	r3, [pc, #128]	; (8000810 <MX_SAI1_Init+0xc4>)
 800078e:	2200      	movs	r2, #0
 8000790:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000792:	4b1f      	ldr	r3, [pc, #124]	; (8000810 <MX_SAI1_Init+0xc4>)
 8000794:	4a20      	ldr	r2, [pc, #128]	; (8000818 <MX_SAI1_Init+0xcc>)
 8000796:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000798:	4b1d      	ldr	r3, [pc, #116]	; (8000810 <MX_SAI1_Init+0xc4>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800079e:	4b1c      	ldr	r3, [pc, #112]	; (8000810 <MX_SAI1_Init+0xc4>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80007a4:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <MX_SAI1_Init+0xc4>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80007aa:	4b19      	ldr	r3, [pc, #100]	; (8000810 <MX_SAI1_Init+0xc4>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 80007b0:	4b17      	ldr	r3, [pc, #92]	; (8000810 <MX_SAI1_Init+0xc4>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 0;
 80007b8:	4b15      	ldr	r3, [pc, #84]	; (8000810 <MX_SAI1_Init+0xc4>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80007be:	4b14      	ldr	r3, [pc, #80]	; (8000810 <MX_SAI1_Init+0xc4>)
 80007c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007c4:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 80007c6:	4b12      	ldr	r3, [pc, #72]	; (8000810 <MX_SAI1_Init+0xc4>)
 80007c8:	2208      	movs	r2, #8
 80007ca:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 80007cc:	4b10      	ldr	r3, [pc, #64]	; (8000810 <MX_SAI1_Init+0xc4>)
 80007ce:	2201      	movs	r2, #1
 80007d0:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80007d2:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <MX_SAI1_Init+0xc4>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80007d8:	4b0d      	ldr	r3, [pc, #52]	; (8000810 <MX_SAI1_Init+0xc4>)
 80007da:	2200      	movs	r2, #0
 80007dc:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80007de:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <MX_SAI1_Init+0xc4>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 80007e4:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <MX_SAI1_Init+0xc4>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80007ea:	4b09      	ldr	r3, [pc, #36]	; (8000810 <MX_SAI1_Init+0xc4>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 80007f0:	4b07      	ldr	r3, [pc, #28]	; (8000810 <MX_SAI1_Init+0xc4>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 80007f6:	4b06      	ldr	r3, [pc, #24]	; (8000810 <MX_SAI1_Init+0xc4>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 80007fc:	4804      	ldr	r0, [pc, #16]	; (8000810 <MX_SAI1_Init+0xc4>)
 80007fe:	f004 fc3f 	bl	8005080 <HAL_SAI_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 8000808:	f000 fbb2 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000a34 	.word	0x20000a34
 8000814:	40015404 	.word	0x40015404
 8000818:	0002ee00 	.word	0x0002ee00

0800081c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <MX_SDMMC1_SD_Init+0x44>)
 8000822:	4a10      	ldr	r2, [pc, #64]	; (8000864 <MX_SDMMC1_SD_Init+0x48>)
 8000824:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_SDMMC1_SD_Init+0x44>)
 8000828:	2200      	movs	r2, #0
 800082a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <MX_SDMMC1_SD_Init+0x44>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <MX_SDMMC1_SD_Init+0x44>)
 8000834:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000838:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <MX_SDMMC1_SD_Init+0x44>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000840:	4b07      	ldr	r3, [pc, #28]	; (8000860 <MX_SDMMC1_SD_Init+0x44>)
 8000842:	2200      	movs	r2, #0
 8000844:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <MX_SDMMC1_SD_Init+0x44>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 800084c:	4804      	ldr	r0, [pc, #16]	; (8000860 <MX_SDMMC1_SD_Init+0x44>)
 800084e:	f004 fe2f 	bl	80054b0 <HAL_SD_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_SDMMC1_SD_Init+0x40>
  {
    Error_Handler();
 8000858:	f000 fb8a 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000ac8 	.word	0x20000ac8
 8000864:	50062400 	.word	0x50062400

08000868 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800086c:	4b1b      	ldr	r3, [pc, #108]	; (80008dc <MX_SPI2_Init+0x74>)
 800086e:	4a1c      	ldr	r2, [pc, #112]	; (80008e0 <MX_SPI2_Init+0x78>)
 8000870:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000872:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <MX_SPI2_Init+0x74>)
 8000874:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000878:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800087a:	4b18      	ldr	r3, [pc, #96]	; (80008dc <MX_SPI2_Init+0x74>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000880:	4b16      	ldr	r3, [pc, #88]	; (80008dc <MX_SPI2_Init+0x74>)
 8000882:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000886:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000888:	4b14      	ldr	r3, [pc, #80]	; (80008dc <MX_SPI2_Init+0x74>)
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800088e:	4b13      	ldr	r3, [pc, #76]	; (80008dc <MX_SPI2_Init+0x74>)
 8000890:	2200      	movs	r2, #0
 8000892:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000894:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_SPI2_Init+0x74>)
 8000896:	f44f 7200 	mov.w	r2, #512	; 0x200
 800089a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800089c:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <MX_SPI2_Init+0x74>)
 800089e:	2208      	movs	r2, #8
 80008a0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <MX_SPI2_Init+0x74>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <MX_SPI2_Init+0x74>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <MX_SPI2_Init+0x74>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80008b4:	4b09      	ldr	r3, [pc, #36]	; (80008dc <MX_SPI2_Init+0x74>)
 80008b6:	2207      	movs	r2, #7
 80008b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008ba:	4b08      	ldr	r3, [pc, #32]	; (80008dc <MX_SPI2_Init+0x74>)
 80008bc:	2200      	movs	r2, #0
 80008be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <MX_SPI2_Init+0x74>)
 80008c2:	2208      	movs	r2, #8
 80008c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_SPI2_Init+0x74>)
 80008c8:	f005 fedd 	bl	8006686 <HAL_SPI_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80008d2:	f000 fb4d 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000b48 	.word	0x20000b48
 80008e0:	40003800 	.word	0x40003800

080008e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008e8:	4b22      	ldr	r3, [pc, #136]	; (8000974 <MX_USART2_UART_Init+0x90>)
 80008ea:	4a23      	ldr	r2, [pc, #140]	; (8000978 <MX_USART2_UART_Init+0x94>)
 80008ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ee:	4b21      	ldr	r3, [pc, #132]	; (8000974 <MX_USART2_UART_Init+0x90>)
 80008f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008f6:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <MX_USART2_UART_Init+0x90>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008fc:	4b1d      	ldr	r3, [pc, #116]	; (8000974 <MX_USART2_UART_Init+0x90>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000902:	4b1c      	ldr	r3, [pc, #112]	; (8000974 <MX_USART2_UART_Init+0x90>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000908:	4b1a      	ldr	r3, [pc, #104]	; (8000974 <MX_USART2_UART_Init+0x90>)
 800090a:	220c      	movs	r2, #12
 800090c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090e:	4b19      	ldr	r3, [pc, #100]	; (8000974 <MX_USART2_UART_Init+0x90>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000914:	4b17      	ldr	r3, [pc, #92]	; (8000974 <MX_USART2_UART_Init+0x90>)
 8000916:	2200      	movs	r2, #0
 8000918:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800091a:	4b16      	ldr	r3, [pc, #88]	; (8000974 <MX_USART2_UART_Init+0x90>)
 800091c:	2200      	movs	r2, #0
 800091e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000920:	4b14      	ldr	r3, [pc, #80]	; (8000974 <MX_USART2_UART_Init+0x90>)
 8000922:	2200      	movs	r2, #0
 8000924:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000926:	4b13      	ldr	r3, [pc, #76]	; (8000974 <MX_USART2_UART_Init+0x90>)
 8000928:	2200      	movs	r2, #0
 800092a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800092c:	4811      	ldr	r0, [pc, #68]	; (8000974 <MX_USART2_UART_Init+0x90>)
 800092e:	f005 ff95 	bl	800685c <HAL_UART_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000938:	f000 fb1a 	bl	8000f70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800093c:	2100      	movs	r1, #0
 800093e:	480d      	ldr	r0, [pc, #52]	; (8000974 <MX_USART2_UART_Init+0x90>)
 8000940:	f006 fcc6 	bl	80072d0 <HAL_UARTEx_SetTxFifoThreshold>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800094a:	f000 fb11 	bl	8000f70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800094e:	2100      	movs	r1, #0
 8000950:	4808      	ldr	r0, [pc, #32]	; (8000974 <MX_USART2_UART_Init+0x90>)
 8000952:	f006 fcfb 	bl	800734c <HAL_UARTEx_SetRxFifoThreshold>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800095c:	f000 fb08 	bl	8000f70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000960:	4804      	ldr	r0, [pc, #16]	; (8000974 <MX_USART2_UART_Init+0x90>)
 8000962:	f006 fc7c 	bl	800725e <HAL_UARTEx_DisableFifoMode>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800096c:	f000 fb00 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000bac 	.word	0x20000bac
 8000978:	40004400 	.word	0x40004400

0800097c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000980:	4b22      	ldr	r3, [pc, #136]	; (8000a0c <MX_USART3_UART_Init+0x90>)
 8000982:	4a23      	ldr	r2, [pc, #140]	; (8000a10 <MX_USART3_UART_Init+0x94>)
 8000984:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000986:	4b21      	ldr	r3, [pc, #132]	; (8000a0c <MX_USART3_UART_Init+0x90>)
 8000988:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800098c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800098e:	4b1f      	ldr	r3, [pc, #124]	; (8000a0c <MX_USART3_UART_Init+0x90>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000994:	4b1d      	ldr	r3, [pc, #116]	; (8000a0c <MX_USART3_UART_Init+0x90>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800099a:	4b1c      	ldr	r3, [pc, #112]	; (8000a0c <MX_USART3_UART_Init+0x90>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009a0:	4b1a      	ldr	r3, [pc, #104]	; (8000a0c <MX_USART3_UART_Init+0x90>)
 80009a2:	220c      	movs	r2, #12
 80009a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a6:	4b19      	ldr	r3, [pc, #100]	; (8000a0c <MX_USART3_UART_Init+0x90>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ac:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <MX_USART3_UART_Init+0x90>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009b2:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <MX_USART3_UART_Init+0x90>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009b8:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <MX_USART3_UART_Init+0x90>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009be:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <MX_USART3_UART_Init+0x90>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009c4:	4811      	ldr	r0, [pc, #68]	; (8000a0c <MX_USART3_UART_Init+0x90>)
 80009c6:	f005 ff49 	bl	800685c <HAL_UART_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009d0:	f000 face 	bl	8000f70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d4:	2100      	movs	r1, #0
 80009d6:	480d      	ldr	r0, [pc, #52]	; (8000a0c <MX_USART3_UART_Init+0x90>)
 80009d8:	f006 fc7a 	bl	80072d0 <HAL_UARTEx_SetTxFifoThreshold>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009e2:	f000 fac5 	bl	8000f70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e6:	2100      	movs	r1, #0
 80009e8:	4808      	ldr	r0, [pc, #32]	; (8000a0c <MX_USART3_UART_Init+0x90>)
 80009ea:	f006 fcaf 	bl	800734c <HAL_UARTEx_SetRxFifoThreshold>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009f4:	f000 fabc 	bl	8000f70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009f8:	4804      	ldr	r0, [pc, #16]	; (8000a0c <MX_USART3_UART_Init+0x90>)
 80009fa:	f006 fc30 	bl	800725e <HAL_UARTEx_DisableFifoMode>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a04:	f000 fab4 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20000c3c 	.word	0x20000c3c
 8000a10:	40004800 	.word	0x40004800

08000a14 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a18:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a1a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a1e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a20:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a22:	2206      	movs	r2, #6
 8000a24:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a26:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a28:	2202      	movs	r2, #2
 8000a2a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000a2c:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a32:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a38:	4b0a      	ldr	r3, [pc, #40]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000a3e:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a44:	4b07      	ldr	r3, [pc, #28]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000a4a:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a50:	4804      	ldr	r0, [pc, #16]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a52:	f001 fc6b 	bl	800232c <HAL_PCD_Init>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 8000a5c:	f000 fa88 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20000ccc 	.word	0x20000ccc

08000a68 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b088      	sub	sp, #32
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000a6e:	463b      	mov	r3, r7
 8000a70:	2220      	movs	r2, #32
 8000a72:	2100      	movs	r1, #0
 8000a74:	4618      	mov	r0, r3
 8000a76:	f00a f92d 	bl	800acd4 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000a7a:	4b2c      	ldr	r3, [pc, #176]	; (8000b2c <MX_FMC_Init+0xc4>)
 8000a7c:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000a80:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000a82:	4b2a      	ldr	r3, [pc, #168]	; (8000b2c <MX_FMC_Init+0xc4>)
 8000a84:	4a2a      	ldr	r2, [pc, #168]	; (8000b30 <MX_FMC_Init+0xc8>)
 8000a86:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000a88:	4b28      	ldr	r3, [pc, #160]	; (8000b2c <MX_FMC_Init+0xc4>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000a8e:	4b27      	ldr	r3, [pc, #156]	; (8000b2c <MX_FMC_Init+0xc4>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_PSRAM;
 8000a94:	4b25      	ldr	r3, [pc, #148]	; (8000b2c <MX_FMC_Init+0xc4>)
 8000a96:	2204      	movs	r2, #4
 8000a98:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000a9a:	4b24      	ldr	r3, [pc, #144]	; (8000b2c <MX_FMC_Init+0xc4>)
 8000a9c:	2210      	movs	r2, #16
 8000a9e:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_ENABLE;
 8000aa0:	4b22      	ldr	r3, [pc, #136]	; (8000b2c <MX_FMC_Init+0xc4>)
 8000aa2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000aa6:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000aa8:	4b20      	ldr	r3, [pc, #128]	; (8000b2c <MX_FMC_Init+0xc4>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000aae:	4b1f      	ldr	r3, [pc, #124]	; (8000b2c <MX_FMC_Init+0xc4>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8000ab4:	4b1d      	ldr	r3, [pc, #116]	; (8000b2c <MX_FMC_Init+0xc4>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_ENABLE;
 8000aba:	4b1c      	ldr	r3, [pc, #112]	; (8000b2c <MX_FMC_Init+0xc4>)
 8000abc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ac0:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000ac2:	4b1a      	ldr	r3, [pc, #104]	; (8000b2c <MX_FMC_Init+0xc4>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000ac8:	4b18      	ldr	r3, [pc, #96]	; (8000b2c <MX_FMC_Init+0xc4>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_ENABLE;
 8000ace:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <MX_FMC_Init+0xc4>)
 8000ad0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000ad4:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000ad6:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <MX_FMC_Init+0xc4>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000adc:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <MX_FMC_Init+0xc4>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 8000ae2:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <MX_FMC_Init+0xc4>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	645a      	str	r2, [r3, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000ae8:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <MX_FMC_Init+0xc4>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000aee:	230f      	movs	r3, #15
 8000af0:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8000af2:	230f      	movs	r3, #15
 8000af4:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8000af6:	23ff      	movs	r3, #255	; 0xff
 8000af8:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000afe:	230f      	movs	r3, #15
 8000b00:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000b02:	2310      	movs	r3, #16
 8000b04:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 2;
 8000b06:	2302      	movs	r3, #2
 8000b08:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000b0e:	463b      	mov	r3, r7
 8000b10:	2200      	movs	r2, #0
 8000b12:	4619      	mov	r1, r3
 8000b14:	4805      	ldr	r0, [pc, #20]	; (8000b2c <MX_FMC_Init+0xc4>)
 8000b16:	f005 fe59 	bl	80067cc <HAL_SRAM_Init>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_FMC_Init+0xbc>
  {
    Error_Handler( );
 8000b20:	f000 fa26 	bl	8000f70 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000b24:	bf00      	nop
 8000b26:	3720      	adds	r7, #32
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	200011d8 	.word	0x200011d8
 8000b30:	a0000104 	.word	0xa0000104

08000b34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08e      	sub	sp, #56	; 0x38
 8000b38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]
 8000b48:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000b4a:	4bb2      	ldr	r3, [pc, #712]	; (8000e14 <MX_GPIO_Init+0x2e0>)
 8000b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4e:	4ab1      	ldr	r2, [pc, #708]	; (8000e14 <MX_GPIO_Init+0x2e0>)
 8000b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b56:	4baf      	ldr	r3, [pc, #700]	; (8000e14 <MX_GPIO_Init+0x2e0>)
 8000b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b5e:	623b      	str	r3, [r7, #32]
 8000b60:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b62:	4bac      	ldr	r3, [pc, #688]	; (8000e14 <MX_GPIO_Init+0x2e0>)
 8000b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b66:	4aab      	ldr	r2, [pc, #684]	; (8000e14 <MX_GPIO_Init+0x2e0>)
 8000b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b6e:	4ba9      	ldr	r3, [pc, #676]	; (8000e14 <MX_GPIO_Init+0x2e0>)
 8000b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b76:	61fb      	str	r3, [r7, #28]
 8000b78:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b7a:	4ba6      	ldr	r3, [pc, #664]	; (8000e14 <MX_GPIO_Init+0x2e0>)
 8000b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7e:	4aa5      	ldr	r2, [pc, #660]	; (8000e14 <MX_GPIO_Init+0x2e0>)
 8000b80:	f043 0310 	orr.w	r3, r3, #16
 8000b84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b86:	4ba3      	ldr	r3, [pc, #652]	; (8000e14 <MX_GPIO_Init+0x2e0>)
 8000b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8a:	f003 0310 	and.w	r3, r3, #16
 8000b8e:	61bb      	str	r3, [r7, #24]
 8000b90:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b92:	4ba0      	ldr	r3, [pc, #640]	; (8000e14 <MX_GPIO_Init+0x2e0>)
 8000b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b96:	4a9f      	ldr	r2, [pc, #636]	; (8000e14 <MX_GPIO_Init+0x2e0>)
 8000b98:	f043 0302 	orr.w	r3, r3, #2
 8000b9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b9e:	4b9d      	ldr	r3, [pc, #628]	; (8000e14 <MX_GPIO_Init+0x2e0>)
 8000ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba2:	f003 0302 	and.w	r3, r3, #2
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	4b9a      	ldr	r3, [pc, #616]	; (8000e14 <MX_GPIO_Init+0x2e0>)
 8000bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bae:	4a99      	ldr	r2, [pc, #612]	; (8000e14 <MX_GPIO_Init+0x2e0>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb6:	4b97      	ldr	r3, [pc, #604]	; (8000e14 <MX_GPIO_Init+0x2e0>)
 8000bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bc2:	4b94      	ldr	r3, [pc, #592]	; (8000e14 <MX_GPIO_Init+0x2e0>)
 8000bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc6:	4a93      	ldr	r2, [pc, #588]	; (8000e14 <MX_GPIO_Init+0x2e0>)
 8000bc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bce:	4b91      	ldr	r3, [pc, #580]	; (8000e14 <MX_GPIO_Init+0x2e0>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 8000bda:	f001 fdc3 	bl	8002764 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bde:	4b8d      	ldr	r3, [pc, #564]	; (8000e14 <MX_GPIO_Init+0x2e0>)
 8000be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be2:	4a8c      	ldr	r2, [pc, #560]	; (8000e14 <MX_GPIO_Init+0x2e0>)
 8000be4:	f043 0308 	orr.w	r3, r3, #8
 8000be8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bea:	4b8a      	ldr	r3, [pc, #552]	; (8000e14 <MX_GPIO_Init+0x2e0>)
 8000bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bee:	f003 0308 	and.w	r3, r3, #8
 8000bf2:	60bb      	str	r3, [r7, #8]
 8000bf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf6:	4b87      	ldr	r3, [pc, #540]	; (8000e14 <MX_GPIO_Init+0x2e0>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfa:	4a86      	ldr	r2, [pc, #536]	; (8000e14 <MX_GPIO_Init+0x2e0>)
 8000bfc:	f043 0304 	orr.w	r3, r3, #4
 8000c00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c02:	4b84      	ldr	r3, [pc, #528]	; (8000e14 <MX_GPIO_Init+0x2e0>)
 8000c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c06:	f003 0304 	and.w	r3, r3, #4
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c0e:	4b81      	ldr	r3, [pc, #516]	; (8000e14 <MX_GPIO_Init+0x2e0>)
 8000c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c12:	4a80      	ldr	r2, [pc, #512]	; (8000e14 <MX_GPIO_Init+0x2e0>)
 8000c14:	f043 0320 	orr.w	r3, r3, #32
 8000c18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c1a:	4b7e      	ldr	r3, [pc, #504]	; (8000e14 <MX_GPIO_Init+0x2e0>)
 8000c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1e:	f003 0320 	and.w	r3, r3, #32
 8000c22:	603b      	str	r3, [r7, #0]
 8000c24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	f244 0114 	movw	r1, #16404	; 0x4014
 8000c2c:	487a      	ldr	r0, [pc, #488]	; (8000e18 <MX_GPIO_Init+0x2e4>)
 8000c2e:	f001 fa3f 	bl	80020b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(JOY_SEL_GPIO_Port, JOY_SEL_Pin, GPIO_PIN_RESET);
 8000c32:	2200      	movs	r2, #0
 8000c34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c38:	4878      	ldr	r0, [pc, #480]	; (8000e1c <MX_GPIO_Init+0x2e8>)
 8000c3a:	f001 fa39 	bl	80020b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2140      	movs	r1, #64	; 0x40
 8000c42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c46:	f001 fa33 	bl	80020b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_Port, MFX_WAKEUP_Pin, GPIO_PIN_RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2104      	movs	r1, #4
 8000c4e:	4874      	ldr	r0, [pc, #464]	; (8000e20 <MX_GPIO_Init+0x2ec>)
 8000c50:	f001 fa2e 	bl	80020b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OCTOSPIM_P2_IO1_Pin OCTOSPIM_P2_IO2_Pin OCTOSPIM_P2_CLK_Pin OCTOSPIM_P2_IO0_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO1_Pin|OCTOSPIM_P2_IO2_Pin|OCTOSPIM_P2_CLK_Pin|OCTOSPIM_P2_IO0_Pin;
 8000c54:	f44f 6364 	mov.w	r3, #3648	; 0xe40
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c62:	2303      	movs	r3, #3
 8000c64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000c66:	2305      	movs	r3, #5
 8000c68:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6e:	4619      	mov	r1, r3
 8000c70:	486c      	ldr	r0, [pc, #432]	; (8000e24 <MX_GPIO_Init+0x2f0>)
 8000c72:	f001 f88b 	bl	8001d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : MIC_VDD_Pin DSI_SPI_USART_CS_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin;
 8000c76:	f244 0314 	movw	r3, #16404	; 0x4014
 8000c7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c84:	2300      	movs	r3, #0
 8000c86:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4862      	ldr	r0, [pc, #392]	; (8000e18 <MX_GPIO_Init+0x2e4>)
 8000c90:	f001 f87c 	bl	8001d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000c94:	2310      	movs	r3, #16
 8000c96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000ca8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cac:	4619      	mov	r1, r3
 8000cae:	485c      	ldr	r0, [pc, #368]	; (8000e20 <MX_GPIO_Init+0x2ec>)
 8000cb0:	f001 f86c 	bl	8001d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D7_Pin DCMI_D5_Pin DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 8000cb4:	23b0      	movs	r3, #176	; 0xb0
 8000cb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000cc4:	230a      	movs	r3, #10
 8000cc6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000cc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4855      	ldr	r0, [pc, #340]	; (8000e24 <MX_GPIO_Init+0x2f0>)
 8000cd0:	f001 f85c 	bl	8001d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOSPIM_P2_IO6_Pin OCTOSPIM_P2_DQS_Pin OCTOSPIM_P2_IO7_Pin OCTOSPIM_P2_CS_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO6_Pin|OCTOSPIM_P2_DQS_Pin|OCTOSPIM_P2_IO7_Pin|OCTOSPIM_P2_CS_Pin;
 8000cd4:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000ce6:	2305      	movs	r3, #5
 8000ce8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cee:	4619      	mov	r1, r3
 8000cf0:	484d      	ldr	r0, [pc, #308]	; (8000e28 <MX_GPIO_Init+0x2f4>)
 8000cf2:	f001 f84b 	bl	8001d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cfa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8000d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4846      	ldr	r0, [pc, #280]	; (8000e24 <MX_GPIO_Init+0x2f0>)
 8000d0c:	f001 f83e 	bl	8001d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D3_Pin DCMI_PIXCLK_Pin DCMI_D2_Pin */
  GPIO_InitStruct.Pin = DCMI_D3_Pin|DCMI_PIXCLK_Pin|DCMI_D2_Pin;
 8000d10:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 8000d14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d16:	2302      	movs	r3, #2
 8000d18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000d22:	230a      	movs	r3, #10
 8000d24:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	483a      	ldr	r0, [pc, #232]	; (8000e18 <MX_GPIO_Init+0x2e4>)
 8000d2e:	f001 f82d 	bl	8001d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 8000d32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d40:	2300      	movs	r3, #0
 8000d42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000d44:	2303      	movs	r3, #3
 8000d46:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8000d48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4832      	ldr	r0, [pc, #200]	; (8000e18 <MX_GPIO_Init+0x2e4>)
 8000d50:	f001 f81c 	bl	8001d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOPSIM_P2_IO4_Pin OCTOSPIM_P2_IO5_Pin OCTOSPI_P2_IO3_Pin */
  GPIO_InitStruct.Pin = OCTOPSIM_P2_IO4_Pin|OCTOSPIM_P2_IO5_Pin|OCTOSPI_P2_IO3_Pin;
 8000d54:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d62:	2303      	movs	r3, #3
 8000d64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000d66:	2305      	movs	r3, #5
 8000d68:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4829      	ldr	r0, [pc, #164]	; (8000e18 <MX_GPIO_Init+0x2e4>)
 8000d72:	f001 f80b 	bl	8001d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_SEL_Pin;
 8000d76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d84:	2300      	movs	r3, #0
 8000d86:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 8000d88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4823      	ldr	r0, [pc, #140]	; (8000e1c <MX_GPIO_Init+0x2e8>)
 8000d90:	f000 fffc 	bl	8001d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_14_Pin ARD_15_Pin */
  GPIO_InitStruct.Pin = ARD_14_Pin|ARD_15_Pin;
 8000d94:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d9a:	2312      	movs	r3, #18
 8000d9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da2:	2303      	movs	r3, #3
 8000da4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000da6:	2304      	movs	r3, #4
 8000da8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000daa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dae:	4619      	mov	r1, r3
 8000db0:	481d      	ldr	r0, [pc, #116]	; (8000e28 <MX_GPIO_Init+0x2f4>)
 8000db2:	f000 ffeb 	bl	8001d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_INT_Pin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 8000db6:	2340      	movs	r3, #64	; 0x40
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000dbe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 8000dc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4814      	ldr	r0, [pc, #80]	; (8000e1c <MX_GPIO_Init+0x2e8>)
 8000dcc:	f000 ffde 	bl	8001d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : DFDATIN3_Pin DF_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFDATIN3_Pin|DF_CKOUT_Pin;
 8000dd0:	2384      	movs	r3, #132	; 0x84
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000de0:	2306      	movs	r3, #6
 8000de2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de8:	4619      	mov	r1, r3
 8000dea:	480c      	ldr	r0, [pc, #48]	; (8000e1c <MX_GPIO_Init+0x2e8>)
 8000dec:	f000 ffce 	bl	8001d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D0_Pin ARD_D1_Pin */
  GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8000df0:	2303      	movs	r3, #3
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df4:	2302      	movs	r3, #2
 8000df6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000e00:	2308      	movs	r3, #8
 8000e02:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4804      	ldr	r0, [pc, #16]	; (8000e1c <MX_GPIO_Init+0x2e8>)
 8000e0c:	f000 ffbe 	bl	8001d8c <HAL_GPIO_Init>
 8000e10:	e00c      	b.n	8000e2c <MX_GPIO_Init+0x2f8>
 8000e12:	bf00      	nop
 8000e14:	40021000 	.word	0x40021000
 8000e18:	48001c00 	.word	0x48001c00
 8000e1c:	48000800 	.word	0x48000800
 8000e20:	48000400 	.word	0x48000400
 8000e24:	48002000 	.word	0x48002000
 8000e28:	48001800 	.word	0x48001800

  /*Configure GPIO pins : ARD_A2_Pin ARD_A1_Pin */
  GPIO_InitStruct.Pin = ARD_A2_Pin|ARD_A1_Pin;
 8000e2c:	2318      	movs	r3, #24
 8000e2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e30:	230b      	movs	r3, #11
 8000e32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4849      	ldr	r0, [pc, #292]	; (8000f64 <MX_GPIO_Init+0x430>)
 8000e40:	f000 ffa4 	bl	8001d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A4_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A4_Pin|ARD_A0_Pin;
 8000e44:	2381      	movs	r3, #129	; 0x81
 8000e46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e48:	230b      	movs	r3, #11
 8000e4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e54:	4619      	mov	r1, r3
 8000e56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e5a:	f000 ff97 	bl	8001d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_PWM_Pin */
  GPIO_InitStruct.Pin = STMOD_PWM_Pin;
 8000e5e:	2320      	movs	r3, #32
 8000e60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e62:	2302      	movs	r3, #2
 8000e64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(STMOD_PWM_GPIO_Port, &GPIO_InitStruct);
 8000e72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e76:	4619      	mov	r1, r3
 8000e78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e7c:	f000 ff86 	bl	8001d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8000e80:	2340      	movs	r3, #64	; 0x40
 8000e82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e84:	2301      	movs	r3, #1
 8000e86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8000e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e94:	4619      	mov	r1, r3
 8000e96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e9a:	f000 ff77 	bl	8001d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8000eb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ebc:	f000 ff66 	bl	8001d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_TE_Pin */
  GPIO_InitStruct.Pin = DSI_TE_Pin;
 8000ec0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_DSI;
 8000ed2:	230b      	movs	r3, #11
 8000ed4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 8000ed6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eda:	4619      	mov	r1, r3
 8000edc:	4822      	ldr	r0, [pc, #136]	; (8000f68 <MX_GPIO_Init+0x434>)
 8000ede:	f000 ff55 	bl	8001d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_HSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin;
 8000ee2:	2310      	movs	r3, #16
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000ef2:	230a      	movs	r3, #10
 8000ef4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8000ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efa:	4619      	mov	r1, r3
 8000efc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f00:	f000 ff44 	bl	8001d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_A3_Pin */
  GPIO_InitStruct.Pin = ARD_A3_Pin;
 8000f04:	2301      	movs	r3, #1
 8000f06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f08:	230b      	movs	r3, #11
 8000f0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 8000f10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f14:	4619      	mov	r1, r3
 8000f16:	4815      	ldr	r0, [pc, #84]	; (8000f6c <MX_GPIO_Init+0x438>)
 8000f18:	f000 ff38 	bl	8001d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8000f1c:	2304      	movs	r3, #4
 8000f1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f20:	2301      	movs	r3, #1
 8000f22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000f2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f30:	4619      	mov	r1, r3
 8000f32:	480e      	ldr	r0, [pc, #56]	; (8000f6c <MX_GPIO_Init+0x438>)
 8000f34:	f000 ff2a 	bl	8001d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : DFDATIN1_Pin */
  GPIO_InitStruct.Pin = DFDATIN1_Pin;
 8000f38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f46:	2300      	movs	r3, #0
 8000f48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000f4a:	2306      	movs	r3, #6
 8000f4c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 8000f4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f52:	4619      	mov	r1, r3
 8000f54:	4805      	ldr	r0, [pc, #20]	; (8000f6c <MX_GPIO_Init+0x438>)
 8000f56:	f000 ff19 	bl	8001d8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f5a:	bf00      	nop
 8000f5c:	3738      	adds	r7, #56	; 0x38
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	48000800 	.word	0x48000800
 8000f68:	48001400 	.word	0x48001400
 8000f6c:	48000400 	.word	0x48000400

08000f70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f74:	b672      	cpsid	i
}
 8000f76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <Error_Handler+0x8>
	...

08000f7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f82:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <HAL_MspInit+0x44>)
 8000f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f86:	4a0e      	ldr	r2, [pc, #56]	; (8000fc0 <HAL_MspInit+0x44>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <HAL_MspInit+0x44>)
 8000f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	607b      	str	r3, [r7, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f9a:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <HAL_MspInit+0x44>)
 8000f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f9e:	4a08      	ldr	r2, [pc, #32]	; (8000fc0 <HAL_MspInit+0x44>)
 8000fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa4:	6593      	str	r3, [r2, #88]	; 0x58
 8000fa6:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <HAL_MspInit+0x44>)
 8000fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fae:	603b      	str	r3, [r7, #0]
 8000fb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	40021000 	.word	0x40021000

08000fc4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a0a      	ldr	r2, [pc, #40]	; (8000ffc <HAL_CRC_MspInit+0x38>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d10b      	bne.n	8000fee <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000fd6:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <HAL_CRC_MspInit+0x3c>)
 8000fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fda:	4a09      	ldr	r2, [pc, #36]	; (8001000 <HAL_CRC_MspInit+0x3c>)
 8000fdc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fe0:	6493      	str	r3, [r2, #72]	; 0x48
 8000fe2:	4b07      	ldr	r3, [pc, #28]	; (8001000 <HAL_CRC_MspInit+0x3c>)
 8000fe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fe6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000fee:	bf00      	nop
 8000ff0:	3714      	adds	r7, #20
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	40023000 	.word	0x40023000
 8001000:	40021000 	.word	0x40021000

08001004 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b0b2      	sub	sp, #200	; 0xc8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800101c:	f107 0318 	add.w	r3, r7, #24
 8001020:	229c      	movs	r2, #156	; 0x9c
 8001022:	2100      	movs	r1, #0
 8001024:	4618      	mov	r0, r3
 8001026:	f009 fe55 	bl	800acd4 <memset>
  if(hi2c->Instance==I2C1)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a33      	ldr	r2, [pc, #204]	; (80010fc <HAL_I2C_MspInit+0xf8>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d15e      	bne.n	80010f2 <HAL_I2C_MspInit+0xee>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001034:	2340      	movs	r3, #64	; 0x40
 8001036:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001038:	2300      	movs	r3, #0
 800103a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800103c:	f107 0318 	add.w	r3, r7, #24
 8001040:	4618      	mov	r0, r3
 8001042:	f002 fa73 	bl	800352c <HAL_RCCEx_PeriphCLKConfig>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800104c:	f7ff ff90 	bl	8000f70 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001050:	4b2b      	ldr	r3, [pc, #172]	; (8001100 <HAL_I2C_MspInit+0xfc>)
 8001052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001054:	4a2a      	ldr	r2, [pc, #168]	; (8001100 <HAL_I2C_MspInit+0xfc>)
 8001056:	f043 0302 	orr.w	r3, r3, #2
 800105a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800105c:	4b28      	ldr	r3, [pc, #160]	; (8001100 <HAL_I2C_MspInit+0xfc>)
 800105e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001060:	f003 0302 	and.w	r3, r3, #2
 8001064:	617b      	str	r3, [r7, #20]
 8001066:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001068:	4b25      	ldr	r3, [pc, #148]	; (8001100 <HAL_I2C_MspInit+0xfc>)
 800106a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106c:	4a24      	ldr	r2, [pc, #144]	; (8001100 <HAL_I2C_MspInit+0xfc>)
 800106e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001072:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001074:	4b22      	ldr	r3, [pc, #136]	; (8001100 <HAL_I2C_MspInit+0xfc>)
 8001076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800107c:	613b      	str	r3, [r7, #16]
 800107e:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8001080:	f001 fb70 	bl	8002764 <HAL_PWREx_EnableVddIO2>
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PG13     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin;
 8001084:	2340      	movs	r3, #64	; 0x40
 8001086:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800108a:	2312      	movs	r3, #18
 800108c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001090:	2301      	movs	r3, #1
 8001092:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001096:	2303      	movs	r3, #3
 8001098:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800109c:	2304      	movs	r3, #4
 800109e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(I2C1_SCL_GPIO_Port, &GPIO_InitStruct);
 80010a2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80010a6:	4619      	mov	r1, r3
 80010a8:	4816      	ldr	r0, [pc, #88]	; (8001104 <HAL_I2C_MspInit+0x100>)
 80010aa:	f000 fe6f 	bl	8001d8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C1_SDA_Pin;
 80010ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010b6:	2312      	movs	r3, #18
 80010b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010bc:	2301      	movs	r3, #1
 80010be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c2:	2303      	movs	r3, #3
 80010c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010c8:	2304      	movs	r3, #4
 80010ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStruct);
 80010ce:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80010d2:	4619      	mov	r1, r3
 80010d4:	480c      	ldr	r0, [pc, #48]	; (8001108 <HAL_I2C_MspInit+0x104>)
 80010d6:	f000 fe59 	bl	8001d8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <HAL_I2C_MspInit+0xfc>)
 80010dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010de:	4a08      	ldr	r2, [pc, #32]	; (8001100 <HAL_I2C_MspInit+0xfc>)
 80010e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010e4:	6593      	str	r3, [r2, #88]	; 0x58
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <HAL_I2C_MspInit+0xfc>)
 80010e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010f2:	bf00      	nop
 80010f4:	37c8      	adds	r7, #200	; 0xc8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40005400 	.word	0x40005400
 8001100:	40021000 	.word	0x40021000
 8001104:	48000400 	.word	0x48000400
 8001108:	48001800 	.word	0x48001800

0800110c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b0b2      	sub	sp, #200	; 0xc8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001124:	f107 0318 	add.w	r3, r7, #24
 8001128:	229c      	movs	r2, #156	; 0x9c
 800112a:	2100      	movs	r1, #0
 800112c:	4618      	mov	r0, r3
 800112e:	f009 fdd1 	bl	800acd4 <memset>
  if(hsd->Instance==SDMMC1)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a33      	ldr	r2, [pc, #204]	; (8001204 <HAL_SD_MspInit+0xf8>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d15f      	bne.n	80011fc <HAL_SD_MspInit+0xf0>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 800113c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001140:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 8001142:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001146:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800114a:	f107 0318 	add.w	r3, r7, #24
 800114e:	4618      	mov	r0, r3
 8001150:	f002 f9ec 	bl	800352c <HAL_RCCEx_PeriphCLKConfig>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 800115a:	f7ff ff09 	bl	8000f70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800115e:	4b2a      	ldr	r3, [pc, #168]	; (8001208 <HAL_SD_MspInit+0xfc>)
 8001160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001162:	4a29      	ldr	r2, [pc, #164]	; (8001208 <HAL_SD_MspInit+0xfc>)
 8001164:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001168:	64d3      	str	r3, [r2, #76]	; 0x4c
 800116a:	4b27      	ldr	r3, [pc, #156]	; (8001208 <HAL_SD_MspInit+0xfc>)
 800116c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001172:	617b      	str	r3, [r7, #20]
 8001174:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001176:	4b24      	ldr	r3, [pc, #144]	; (8001208 <HAL_SD_MspInit+0xfc>)
 8001178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117a:	4a23      	ldr	r2, [pc, #140]	; (8001208 <HAL_SD_MspInit+0xfc>)
 800117c:	f043 0308 	orr.w	r3, r3, #8
 8001180:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001182:	4b21      	ldr	r3, [pc, #132]	; (8001208 <HAL_SD_MspInit+0xfc>)
 8001184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001186:	f003 0308 	and.w	r3, r3, #8
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800118e:	4b1e      	ldr	r3, [pc, #120]	; (8001208 <HAL_SD_MspInit+0xfc>)
 8001190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001192:	4a1d      	ldr	r2, [pc, #116]	; (8001208 <HAL_SD_MspInit+0xfc>)
 8001194:	f043 0304 	orr.w	r3, r3, #4
 8001198:	64d3      	str	r3, [r2, #76]	; 0x4c
 800119a:	4b1b      	ldr	r3, [pc, #108]	; (8001208 <HAL_SD_MspInit+0xfc>)
 800119c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119e:	f003 0304 	and.w	r3, r3, #4
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 80011a6:	2304      	movs	r3, #4
 80011a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ac:	2302      	movs	r3, #2
 80011ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b8:	2303      	movs	r3, #3
 80011ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80011be:	230c      	movs	r3, #12
 80011c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 80011c4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80011c8:	4619      	mov	r1, r3
 80011ca:	4810      	ldr	r0, [pc, #64]	; (800120c <HAL_SD_MspInit+0x100>)
 80011cc:	f000 fdde 	bl	8001d8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D0_Pin
 80011d0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80011d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                          |uSD_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d8:	2302      	movs	r3, #2
 80011da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e4:	2303      	movs	r3, #3
 80011e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80011ea:	230c      	movs	r3, #12
 80011ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80011f4:	4619      	mov	r1, r3
 80011f6:	4806      	ldr	r0, [pc, #24]	; (8001210 <HAL_SD_MspInit+0x104>)
 80011f8:	f000 fdc8 	bl	8001d8c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80011fc:	bf00      	nop
 80011fe:	37c8      	adds	r7, #200	; 0xc8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	50062400 	.word	0x50062400
 8001208:	40021000 	.word	0x40021000
 800120c:	48000c00 	.word	0x48000c00
 8001210:	48000800 	.word	0x48000800

08001214 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08a      	sub	sp, #40	; 0x28
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a25      	ldr	r2, [pc, #148]	; (80012c8 <HAL_SPI_MspInit+0xb4>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d144      	bne.n	80012c0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001236:	4b25      	ldr	r3, [pc, #148]	; (80012cc <HAL_SPI_MspInit+0xb8>)
 8001238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800123a:	4a24      	ldr	r2, [pc, #144]	; (80012cc <HAL_SPI_MspInit+0xb8>)
 800123c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001240:	6593      	str	r3, [r2, #88]	; 0x58
 8001242:	4b22      	ldr	r3, [pc, #136]	; (80012cc <HAL_SPI_MspInit+0xb8>)
 8001244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001246:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800124e:	4b1f      	ldr	r3, [pc, #124]	; (80012cc <HAL_SPI_MspInit+0xb8>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001252:	4a1e      	ldr	r2, [pc, #120]	; (80012cc <HAL_SPI_MspInit+0xb8>)
 8001254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001258:	64d3      	str	r3, [r2, #76]	; 0x4c
 800125a:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <HAL_SPI_MspInit+0xb8>)
 800125c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001266:	4b19      	ldr	r3, [pc, #100]	; (80012cc <HAL_SPI_MspInit+0xb8>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126a:	4a18      	ldr	r2, [pc, #96]	; (80012cc <HAL_SPI_MspInit+0xb8>)
 800126c:	f043 0302 	orr.w	r3, r3, #2
 8001270:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001272:	4b16      	ldr	r3, [pc, #88]	; (80012cc <HAL_SPI_MspInit+0xb8>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	60bb      	str	r3, [r7, #8]
 800127c:	68bb      	ldr	r3, [r7, #8]
    PI0     ------> SPI2_NSS
    PB15     ------> SPI2_MOSI
    PB14     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = ARD_10_Pin;
 800127e:	2301      	movs	r3, #1
 8001280:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001282:	2302      	movs	r3, #2
 8001284:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128a:	2303      	movs	r3, #3
 800128c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800128e:	2305      	movs	r3, #5
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_10_GPIO_Port, &GPIO_InitStruct);
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	4619      	mov	r1, r3
 8001298:	480d      	ldr	r0, [pc, #52]	; (80012d0 <HAL_SPI_MspInit+0xbc>)
 800129a:	f000 fd77 	bl	8001d8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_MOSI_Pin|SPI2_MISO_Pin|SPI2_CLK_Pin;
 800129e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80012a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a4:	2302      	movs	r3, #2
 80012a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ac:	2303      	movs	r3, #3
 80012ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012b0:	2305      	movs	r3, #5
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	4619      	mov	r1, r3
 80012ba:	4806      	ldr	r0, [pc, #24]	; (80012d4 <HAL_SPI_MspInit+0xc0>)
 80012bc:	f000 fd66 	bl	8001d8c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80012c0:	bf00      	nop
 80012c2:	3728      	adds	r7, #40	; 0x28
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40003800 	.word	0x40003800
 80012cc:	40021000 	.word	0x40021000
 80012d0:	48002000 	.word	0x48002000
 80012d4:	48000400 	.word	0x48000400

080012d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b0b4      	sub	sp, #208	; 0xd0
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012f0:	f107 0320 	add.w	r3, r7, #32
 80012f4:	229c      	movs	r2, #156	; 0x9c
 80012f6:	2100      	movs	r1, #0
 80012f8:	4618      	mov	r0, r3
 80012fa:	f009 fceb 	bl	800acd4 <memset>
  if(huart->Instance==USART2)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a54      	ldr	r2, [pc, #336]	; (8001454 <HAL_UART_MspInit+0x17c>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d13c      	bne.n	8001382 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001308:	2302      	movs	r3, #2
 800130a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800130c:	2300      	movs	r3, #0
 800130e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001310:	f107 0320 	add.w	r3, r7, #32
 8001314:	4618      	mov	r0, r3
 8001316:	f002 f909 	bl	800352c <HAL_RCCEx_PeriphCLKConfig>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001320:	f7ff fe26 	bl	8000f70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001324:	4b4c      	ldr	r3, [pc, #304]	; (8001458 <HAL_UART_MspInit+0x180>)
 8001326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001328:	4a4b      	ldr	r2, [pc, #300]	; (8001458 <HAL_UART_MspInit+0x180>)
 800132a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800132e:	6593      	str	r3, [r2, #88]	; 0x58
 8001330:	4b49      	ldr	r3, [pc, #292]	; (8001458 <HAL_UART_MspInit+0x180>)
 8001332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001338:	61fb      	str	r3, [r7, #28]
 800133a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800133c:	4b46      	ldr	r3, [pc, #280]	; (8001458 <HAL_UART_MspInit+0x180>)
 800133e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001340:	4a45      	ldr	r2, [pc, #276]	; (8001458 <HAL_UART_MspInit+0x180>)
 8001342:	f043 0301 	orr.w	r3, r3, #1
 8001346:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001348:	4b43      	ldr	r3, [pc, #268]	; (8001458 <HAL_UART_MspInit+0x180>)
 800134a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134c:	f003 0301 	and.w	r3, r3, #1
 8001350:	61bb      	str	r3, [r7, #24]
 8001352:	69bb      	ldr	r3, [r7, #24]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_TX_Pin;
 8001354:	230c      	movs	r3, #12
 8001356:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135a:	2302      	movs	r3, #2
 800135c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001366:	2303      	movs	r3, #3
 8001368:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800136c:	2307      	movs	r3, #7
 800136e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001372:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001376:	4619      	mov	r1, r3
 8001378:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800137c:	f000 fd06 	bl	8001d8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001380:	e063      	b.n	800144a <HAL_UART_MspInit+0x172>
  else if(huart->Instance==USART3)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a35      	ldr	r2, [pc, #212]	; (800145c <HAL_UART_MspInit+0x184>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d15e      	bne.n	800144a <HAL_UART_MspInit+0x172>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800138c:	2304      	movs	r3, #4
 800138e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001390:	2300      	movs	r3, #0
 8001392:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001394:	f107 0320 	add.w	r3, r7, #32
 8001398:	4618      	mov	r0, r3
 800139a:	f002 f8c7 	bl	800352c <HAL_RCCEx_PeriphCLKConfig>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 80013a4:	f7ff fde4 	bl	8000f70 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80013a8:	4b2b      	ldr	r3, [pc, #172]	; (8001458 <HAL_UART_MspInit+0x180>)
 80013aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ac:	4a2a      	ldr	r2, [pc, #168]	; (8001458 <HAL_UART_MspInit+0x180>)
 80013ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013b2:	6593      	str	r3, [r2, #88]	; 0x58
 80013b4:	4b28      	ldr	r3, [pc, #160]	; (8001458 <HAL_UART_MspInit+0x180>)
 80013b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013bc:	617b      	str	r3, [r7, #20]
 80013be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c0:	4b25      	ldr	r3, [pc, #148]	; (8001458 <HAL_UART_MspInit+0x180>)
 80013c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c4:	4a24      	ldr	r2, [pc, #144]	; (8001458 <HAL_UART_MspInit+0x180>)
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013cc:	4b22      	ldr	r3, [pc, #136]	; (8001458 <HAL_UART_MspInit+0x180>)
 80013ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	613b      	str	r3, [r7, #16]
 80013d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d8:	4b1f      	ldr	r3, [pc, #124]	; (8001458 <HAL_UART_MspInit+0x180>)
 80013da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013dc:	4a1e      	ldr	r2, [pc, #120]	; (8001458 <HAL_UART_MspInit+0x180>)
 80013de:	f043 0302 	orr.w	r3, r3, #2
 80013e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013e4:	4b1c      	ldr	r3, [pc, #112]	; (8001458 <HAL_UART_MspInit+0x180>)
 80013e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART3_RTS_Pin;
 80013f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f8:	2302      	movs	r3, #2
 80013fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001404:	2303      	movs	r3, #3
 8001406:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800140a:	2307      	movs	r3, #7
 800140c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(USART3_RTS_GPIO_Port, &GPIO_InitStruct);
 8001410:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001414:	4619      	mov	r1, r3
 8001416:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800141a:	f000 fcb7 	bl	8001d8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART3_RX_Pin|USART3_TX_Pin;
 800141e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001422:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001426:	2302      	movs	r3, #2
 8001428:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001432:	2303      	movs	r3, #3
 8001434:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001438:	2307      	movs	r3, #7
 800143a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001442:	4619      	mov	r1, r3
 8001444:	4806      	ldr	r0, [pc, #24]	; (8001460 <HAL_UART_MspInit+0x188>)
 8001446:	f000 fca1 	bl	8001d8c <HAL_GPIO_Init>
}
 800144a:	bf00      	nop
 800144c:	37d0      	adds	r7, #208	; 0xd0
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40004400 	.word	0x40004400
 8001458:	40021000 	.word	0x40021000
 800145c:	40004800 	.word	0x40004800
 8001460:	48000400 	.word	0x48000400

08001464 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b0b2      	sub	sp, #200	; 0xc8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800147c:	f107 0318 	add.w	r3, r7, #24
 8001480:	229c      	movs	r2, #156	; 0x9c
 8001482:	2100      	movs	r1, #0
 8001484:	4618      	mov	r0, r3
 8001486:	f009 fc25 	bl	800acd4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001492:	d16c      	bne.n	800156e <HAL_PCD_MspInit+0x10a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001494:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001498:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800149a:	2300      	movs	r3, #0
 800149c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014a0:	f107 0318 	add.w	r3, r7, #24
 80014a4:	4618      	mov	r0, r3
 80014a6:	f002 f841 	bl	800352c <HAL_RCCEx_PeriphCLKConfig>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80014b0:	f7ff fd5e 	bl	8000f70 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b4:	4b30      	ldr	r3, [pc, #192]	; (8001578 <HAL_PCD_MspInit+0x114>)
 80014b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b8:	4a2f      	ldr	r2, [pc, #188]	; (8001578 <HAL_PCD_MspInit+0x114>)
 80014ba:	f043 0301 	orr.w	r3, r3, #1
 80014be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014c0:	4b2d      	ldr	r3, [pc, #180]	; (8001578 <HAL_PCD_MspInit+0x114>)
 80014c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c4:	f003 0301 	and.w	r3, r3, #1
 80014c8:	617b      	str	r3, [r7, #20]
 80014ca:	697b      	ldr	r3, [r7, #20]
    PA10     ------> USB_OTG_FS_ID
    PA12     ------> USB_OTG_FS_DP
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = USB_OTGFS_ID_Pin|USB_OTG_FS_DP_Pin|USB_OTGFS_DM_Pin;
 80014cc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80014d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d4:	2302      	movs	r3, #2
 80014d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e0:	2303      	movs	r3, #3
 80014e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80014e6:	230a      	movs	r3, #10
 80014e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ec:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80014f0:	4619      	mov	r1, r3
 80014f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014f6:	f000 fc49 	bl	8001d8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTGFS_VBUS_Pin;
 80014fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001502:	2300      	movs	r3, #0
 8001504:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(USB_OTGFS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800150e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001512:	4619      	mov	r1, r3
 8001514:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001518:	f000 fc38 	bl	8001d8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800151c:	4b16      	ldr	r3, [pc, #88]	; (8001578 <HAL_PCD_MspInit+0x114>)
 800151e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001520:	4a15      	ldr	r2, [pc, #84]	; (8001578 <HAL_PCD_MspInit+0x114>)
 8001522:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001526:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001528:	4b13      	ldr	r3, [pc, #76]	; (8001578 <HAL_PCD_MspInit+0x114>)
 800152a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001530:	613b      	str	r3, [r7, #16]
 8001532:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001534:	4b10      	ldr	r3, [pc, #64]	; (8001578 <HAL_PCD_MspInit+0x114>)
 8001536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d114      	bne.n	800156a <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001540:	4b0d      	ldr	r3, [pc, #52]	; (8001578 <HAL_PCD_MspInit+0x114>)
 8001542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001544:	4a0c      	ldr	r2, [pc, #48]	; (8001578 <HAL_PCD_MspInit+0x114>)
 8001546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800154a:	6593      	str	r3, [r2, #88]	; 0x58
 800154c:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <HAL_PCD_MspInit+0x114>)
 800154e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001558:	f001 f8f4 	bl	8002744 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <HAL_PCD_MspInit+0x114>)
 800155e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001560:	4a05      	ldr	r2, [pc, #20]	; (8001578 <HAL_PCD_MspInit+0x114>)
 8001562:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001566:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001568:	e001      	b.n	800156e <HAL_PCD_MspInit+0x10a>
      HAL_PWREx_EnableVddUSB();
 800156a:	f001 f8eb 	bl	8002744 <HAL_PWREx_EnableVddUSB>
}
 800156e:	bf00      	nop
 8001570:	37c8      	adds	r7, #200	; 0xc8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40021000 	.word	0x40021000

0800157c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001590:	4b32      	ldr	r3, [pc, #200]	; (800165c <HAL_FMC_MspInit+0xe0>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d15d      	bne.n	8001654 <HAL_FMC_MspInit+0xd8>
    return;
  }
  FMC_Initialized = 1;
 8001598:	4b30      	ldr	r3, [pc, #192]	; (800165c <HAL_FMC_MspInit+0xe0>)
 800159a:	2201      	movs	r2, #1
 800159c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800159e:	4b30      	ldr	r3, [pc, #192]	; (8001660 <HAL_FMC_MspInit+0xe4>)
 80015a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015a2:	4a2f      	ldr	r2, [pc, #188]	; (8001660 <HAL_FMC_MspInit+0xe4>)
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	6513      	str	r3, [r2, #80]	; 0x50
 80015aa:	4b2d      	ldr	r3, [pc, #180]	; (8001660 <HAL_FMC_MspInit+0xe4>)
 80015ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	603b      	str	r3, [r7, #0]
 80015b4:	683b      	ldr	r3, [r7, #0]
  PF13   ------> FMC_A7
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|PSRAM_A20_Pin|PSRAM_A19_Pin
 80015b6:	f64f 739b 	movw	r3, #65435	; 0xff9b
 80015ba:	607b      	str	r3, [r7, #4]
                          |D7_Pin|D6_Pin|D12_Pin|D5_Pin
                          |D11_Pin|D4_Pin|D10_Pin|D9_Pin
                          |D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015bc:	2302      	movs	r3, #2
 80015be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c4:	2303      	movs	r3, #3
 80015c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015c8:	230c      	movs	r3, #12
 80015ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015cc:	1d3b      	adds	r3, r7, #4
 80015ce:	4619      	mov	r1, r3
 80015d0:	4824      	ldr	r0, [pc, #144]	; (8001664 <HAL_FMC_MspInit+0xe8>)
 80015d2:	f000 fbdb 	bl	8001d8c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|PSRAM_OE_Pin|D3_Pin|PSRAM_WE_Pin
 80015d6:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 80015da:	607b      	str	r3, [r7, #4]
                          |PSRAM_WAIT_Pin|PSRAM_CLK_Pin|PSRAM_NE1_Pin|PSRAM_A18_Pin
                          |D1_Pin|D0_Pin|PSRAM_A17_Pin|PSRAM_A16_Pin
                          |D15_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015dc:	2302      	movs	r3, #2
 80015de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e4:	2303      	movs	r3, #3
 80015e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015e8:	230c      	movs	r3, #12
 80015ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015ec:	1d3b      	adds	r3, r7, #4
 80015ee:	4619      	mov	r1, r3
 80015f0:	481d      	ldr	r0, [pc, #116]	; (8001668 <HAL_FMC_MspInit+0xec>)
 80015f2:	f000 fbcb 	bl	8001d8c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_ADV_Pin;
 80015f6:	2380      	movs	r3, #128	; 0x80
 80015f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fa:	2302      	movs	r3, #2
 80015fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001602:	2303      	movs	r3, #3
 8001604:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001606:	230c      	movs	r3, #12
 8001608:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PSRAM_ADV_GPIO_Port, &GPIO_InitStruct);
 800160a:	1d3b      	adds	r3, r7, #4
 800160c:	4619      	mov	r1, r3
 800160e:	4817      	ldr	r0, [pc, #92]	; (800166c <HAL_FMC_MspInit+0xf0>)
 8001610:	f000 fbbc 	bl	8001d8c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 8001614:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001618:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161a:	2302      	movs	r3, #2
 800161c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001622:	2303      	movs	r3, #3
 8001624:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001626:	230c      	movs	r3, #12
 8001628:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800162a:	1d3b      	adds	r3, r7, #4
 800162c:	4619      	mov	r1, r3
 800162e:	4810      	ldr	r0, [pc, #64]	; (8001670 <HAL_FMC_MspInit+0xf4>)
 8001630:	f000 fbac 	bl	8001d8c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A15_Pin|PSRAM_A11_Pin
 8001634:	233f      	movs	r3, #63	; 0x3f
 8001636:	607b      	str	r3, [r7, #4]
                          |PSRAM_A12_Pin|PSRAM_A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001638:	2302      	movs	r3, #2
 800163a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001640:	2303      	movs	r3, #3
 8001642:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001644:	230c      	movs	r3, #12
 8001646:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001648:	1d3b      	adds	r3, r7, #4
 800164a:	4619      	mov	r1, r3
 800164c:	4809      	ldr	r0, [pc, #36]	; (8001674 <HAL_FMC_MspInit+0xf8>)
 800164e:	f000 fb9d 	bl	8001d8c <HAL_GPIO_Init>
 8001652:	e000      	b.n	8001656 <HAL_FMC_MspInit+0xda>
    return;
 8001654:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001656:	3718      	adds	r7, #24
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20001228 	.word	0x20001228
 8001660:	40021000 	.word	0x40021000
 8001664:	48001000 	.word	0x48001000
 8001668:	48000c00 	.word	0x48000c00
 800166c:	48000400 	.word	0x48000400
 8001670:	48001400 	.word	0x48001400
 8001674:	48001800 	.word	0x48001800

08001678 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001680:	f7ff ff7c 	bl	800157c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001684:	bf00      	nop
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b0b0      	sub	sp, #192	; 0xc0
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001694:	f107 0310 	add.w	r3, r7, #16
 8001698:	229c      	movs	r2, #156	; 0x9c
 800169a:	2100      	movs	r1, #0
 800169c:	4618      	mov	r0, r3
 800169e:	f009 fb19 	bl	800acd4 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a32      	ldr	r2, [pc, #200]	; (8001770 <HAL_SAI_MspInit+0xe4>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d15d      	bne.n	8001768 <HAL_SAI_MspInit+0xdc>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80016ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016b0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80016b2:	2300      	movs	r3, #0
 80016b4:	67fb      	str	r3, [r7, #124]	; 0x7c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80016b6:	2301      	movs	r3, #1
 80016b8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80016ba:	2301      	movs	r3, #1
 80016bc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80016be:	2310      	movs	r3, #16
 80016c0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80016c2:	2302      	movs	r3, #2
 80016c4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80016c6:	2302      	movs	r3, #2
 80016c8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80016ca:	2302      	movs	r3, #2
 80016cc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 80016ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016d4:	f107 0310 	add.w	r3, r7, #16
 80016d8:	4618      	mov	r0, r3
 80016da:	f001 ff27 	bl	800352c <HAL_RCCEx_PeriphCLKConfig>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <HAL_SAI_MspInit+0x5c>
    {
      Error_Handler();
 80016e4:	f7ff fc44 	bl	8000f70 <Error_Handler>
    }

    if (SAI1_client == 0)
 80016e8:	4b22      	ldr	r3, [pc, #136]	; (8001774 <HAL_SAI_MspInit+0xe8>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d10b      	bne.n	8001708 <HAL_SAI_MspInit+0x7c>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80016f0:	4b21      	ldr	r3, [pc, #132]	; (8001778 <HAL_SAI_MspInit+0xec>)
 80016f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016f4:	4a20      	ldr	r2, [pc, #128]	; (8001778 <HAL_SAI_MspInit+0xec>)
 80016f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016fa:	6613      	str	r3, [r2, #96]	; 0x60
 80016fc:	4b1e      	ldr	r3, [pc, #120]	; (8001778 <HAL_SAI_MspInit+0xec>)
 80016fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001700:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 8001708:	4b1a      	ldr	r3, [pc, #104]	; (8001774 <HAL_SAI_MspInit+0xe8>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	3301      	adds	r3, #1
 800170e:	4a19      	ldr	r2, [pc, #100]	; (8001774 <HAL_SAI_MspInit+0xe8>)
 8001710:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PB9     ------> SAI1_FS_A
    PE6     ------> SAI1_SD_A
    PE5     ------> SAI1_SCK_A
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin|SAI1_FSA_Pin;
 8001712:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001716:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171a:	2302      	movs	r3, #2
 800171c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001726:	2300      	movs	r3, #0
 8001728:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800172c:	230d      	movs	r3, #13
 800172e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001732:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001736:	4619      	mov	r1, r3
 8001738:	4810      	ldr	r0, [pc, #64]	; (800177c <HAL_SAI_MspInit+0xf0>)
 800173a:	f000 fb27 	bl	8001d8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCKA_Pin|SAI1_SDA_Pin|SAI1_SCKA_Pin;
 800173e:	2364      	movs	r3, #100	; 0x64
 8001740:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001744:	2302      	movs	r3, #2
 8001746:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001750:	2300      	movs	r3, #0
 8001752:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001756:	230d      	movs	r3, #13
 8001758:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800175c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001760:	4619      	mov	r1, r3
 8001762:	4807      	ldr	r0, [pc, #28]	; (8001780 <HAL_SAI_MspInit+0xf4>)
 8001764:	f000 fb12 	bl	8001d8c <HAL_GPIO_Init>

    }
}
 8001768:	bf00      	nop
 800176a:	37c0      	adds	r7, #192	; 0xc0
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40015404 	.word	0x40015404
 8001774:	2000122c 	.word	0x2000122c
 8001778:	40021000 	.word	0x40021000
 800177c:	48000400 	.word	0x48000400
 8001780:	48001000 	.word	0x48001000

08001784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001788:	e7fe      	b.n	8001788 <NMI_Handler+0x4>

0800178a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800178e:	e7fe      	b.n	800178e <HardFault_Handler+0x4>

08001790 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001794:	e7fe      	b.n	8001794 <MemManage_Handler+0x4>

08001796 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800179a:	e7fe      	b.n	800179a <BusFault_Handler+0x4>

0800179c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a0:	e7fe      	b.n	80017a0 <UsageFault_Handler+0x4>

080017a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr

080017be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017be:	b480      	push	{r7}
 80017c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017d0:	f000 f8c8 	bl	8001964 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017d4:	bf00      	nop
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017e0:	4a14      	ldr	r2, [pc, #80]	; (8001834 <_sbrk+0x5c>)
 80017e2:	4b15      	ldr	r3, [pc, #84]	; (8001838 <_sbrk+0x60>)
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017ec:	4b13      	ldr	r3, [pc, #76]	; (800183c <_sbrk+0x64>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d102      	bne.n	80017fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017f4:	4b11      	ldr	r3, [pc, #68]	; (800183c <_sbrk+0x64>)
 80017f6:	4a12      	ldr	r2, [pc, #72]	; (8001840 <_sbrk+0x68>)
 80017f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017fa:	4b10      	ldr	r3, [pc, #64]	; (800183c <_sbrk+0x64>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4413      	add	r3, r2
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	429a      	cmp	r2, r3
 8001806:	d207      	bcs.n	8001818 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001808:	f009 fa3a 	bl	800ac80 <__errno>
 800180c:	4603      	mov	r3, r0
 800180e:	220c      	movs	r2, #12
 8001810:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001812:	f04f 33ff 	mov.w	r3, #4294967295
 8001816:	e009      	b.n	800182c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001818:	4b08      	ldr	r3, [pc, #32]	; (800183c <_sbrk+0x64>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800181e:	4b07      	ldr	r3, [pc, #28]	; (800183c <_sbrk+0x64>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4413      	add	r3, r2
 8001826:	4a05      	ldr	r2, [pc, #20]	; (800183c <_sbrk+0x64>)
 8001828:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800182a:	68fb      	ldr	r3, [r7, #12]
}
 800182c:	4618      	mov	r0, r3
 800182e:	3718      	adds	r7, #24
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	200a0000 	.word	0x200a0000
 8001838:	00000800 	.word	0x00000800
 800183c:	20001230 	.word	0x20001230
 8001840:	20001780 	.word	0x20001780

08001844 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001848:	4b06      	ldr	r3, [pc, #24]	; (8001864 <SystemInit+0x20>)
 800184a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800184e:	4a05      	ldr	r2, [pc, #20]	; (8001864 <SystemInit+0x20>)
 8001850:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001854:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001868:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018a0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800186c:	f7ff ffea 	bl	8001844 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001870:	480c      	ldr	r0, [pc, #48]	; (80018a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001872:	490d      	ldr	r1, [pc, #52]	; (80018a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001874:	4a0d      	ldr	r2, [pc, #52]	; (80018ac <LoopForever+0xe>)
  movs r3, #0
 8001876:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001878:	e002      	b.n	8001880 <LoopCopyDataInit>

0800187a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800187a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800187c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800187e:	3304      	adds	r3, #4

08001880 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001880:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001882:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001884:	d3f9      	bcc.n	800187a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001886:	4a0a      	ldr	r2, [pc, #40]	; (80018b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001888:	4c0a      	ldr	r4, [pc, #40]	; (80018b4 <LoopForever+0x16>)
  movs r3, #0
 800188a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800188c:	e001      	b.n	8001892 <LoopFillZerobss>

0800188e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800188e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001890:	3204      	adds	r2, #4

08001892 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001892:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001894:	d3fb      	bcc.n	800188e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001896:	f009 f9f9 	bl	800ac8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800189a:	f7fe fe83 	bl	80005a4 <main>

0800189e <LoopForever>:

LoopForever:
    b LoopForever
 800189e:	e7fe      	b.n	800189e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80018a0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80018a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018a8:	20000984 	.word	0x20000984
  ldr r2, =_sidata
 80018ac:	08023320 	.word	0x08023320
  ldr r2, =_sbss
 80018b0:	200009a0 	.word	0x200009a0
  ldr r4, =_ebss
 80018b4:	2000177c 	.word	0x2000177c

080018b8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018b8:	e7fe      	b.n	80018b8 <ADC1_IRQHandler>

080018ba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018c0:	2300      	movs	r3, #0
 80018c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018c4:	2003      	movs	r0, #3
 80018c6:	f000 f943 	bl	8001b50 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018ca:	2000      	movs	r0, #0
 80018cc:	f000 f80e 	bl	80018ec <HAL_InitTick>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d002      	beq.n	80018dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	71fb      	strb	r3, [r7, #7]
 80018da:	e001      	b.n	80018e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018dc:	f7ff fb4e 	bl	8000f7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018e0:	79fb      	ldrb	r3, [r7, #7]
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
	...

080018ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018f4:	2300      	movs	r3, #0
 80018f6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80018f8:	4b17      	ldr	r3, [pc, #92]	; (8001958 <HAL_InitTick+0x6c>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d023      	beq.n	8001948 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001900:	4b16      	ldr	r3, [pc, #88]	; (800195c <HAL_InitTick+0x70>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	4b14      	ldr	r3, [pc, #80]	; (8001958 <HAL_InitTick+0x6c>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	4619      	mov	r1, r3
 800190a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800190e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001912:	fbb2 f3f3 	udiv	r3, r2, r3
 8001916:	4618      	mov	r0, r3
 8001918:	f000 f941 	bl	8001b9e <HAL_SYSTICK_Config>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d10f      	bne.n	8001942 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b0f      	cmp	r3, #15
 8001926:	d809      	bhi.n	800193c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001928:	2200      	movs	r2, #0
 800192a:	6879      	ldr	r1, [r7, #4]
 800192c:	f04f 30ff 	mov.w	r0, #4294967295
 8001930:	f000 f919 	bl	8001b66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001934:	4a0a      	ldr	r2, [pc, #40]	; (8001960 <HAL_InitTick+0x74>)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6013      	str	r3, [r2, #0]
 800193a:	e007      	b.n	800194c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	73fb      	strb	r3, [r7, #15]
 8001940:	e004      	b.n	800194c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	73fb      	strb	r3, [r7, #15]
 8001946:	e001      	b.n	800194c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800194c:	7bfb      	ldrb	r3, [r7, #15]
}
 800194e:	4618      	mov	r0, r3
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000008 	.word	0x20000008
 800195c:	20000000 	.word	0x20000000
 8001960:	20000004 	.word	0x20000004

08001964 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001968:	4b06      	ldr	r3, [pc, #24]	; (8001984 <HAL_IncTick+0x20>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	461a      	mov	r2, r3
 800196e:	4b06      	ldr	r3, [pc, #24]	; (8001988 <HAL_IncTick+0x24>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4413      	add	r3, r2
 8001974:	4a04      	ldr	r2, [pc, #16]	; (8001988 <HAL_IncTick+0x24>)
 8001976:	6013      	str	r3, [r2, #0]
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	20000008 	.word	0x20000008
 8001988:	20001234 	.word	0x20001234

0800198c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  return uwTick;
 8001990:	4b03      	ldr	r3, [pc, #12]	; (80019a0 <HAL_GetTick+0x14>)
 8001992:	681b      	ldr	r3, [r3, #0]
}
 8001994:	4618      	mov	r0, r3
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	20001234 	.word	0x20001234

080019a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019ac:	f7ff ffee 	bl	800198c <HAL_GetTick>
 80019b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019bc:	d005      	beq.n	80019ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80019be:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <HAL_Delay+0x44>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	461a      	mov	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	4413      	add	r3, r2
 80019c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019ca:	bf00      	nop
 80019cc:	f7ff ffde 	bl	800198c <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d8f7      	bhi.n	80019cc <HAL_Delay+0x28>
  {
  }
}
 80019dc:	bf00      	nop
 80019de:	bf00      	nop
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000008 	.word	0x20000008

080019ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019fc:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <__NVIC_SetPriorityGrouping+0x44>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a02:	68ba      	ldr	r2, [r7, #8]
 8001a04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a08:	4013      	ands	r3, r2
 8001a0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a1e:	4a04      	ldr	r2, [pc, #16]	; (8001a30 <__NVIC_SetPriorityGrouping+0x44>)
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	60d3      	str	r3, [r2, #12]
}
 8001a24:	bf00      	nop
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a38:	4b04      	ldr	r3, [pc, #16]	; (8001a4c <__NVIC_GetPriorityGrouping+0x18>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	0a1b      	lsrs	r3, r3, #8
 8001a3e:	f003 0307 	and.w	r3, r3, #7
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	e000ed00 	.word	0xe000ed00

08001a50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	6039      	str	r1, [r7, #0]
 8001a5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	db0a      	blt.n	8001a7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	490c      	ldr	r1, [pc, #48]	; (8001a9c <__NVIC_SetPriority+0x4c>)
 8001a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6e:	0112      	lsls	r2, r2, #4
 8001a70:	b2d2      	uxtb	r2, r2
 8001a72:	440b      	add	r3, r1
 8001a74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a78:	e00a      	b.n	8001a90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	b2da      	uxtb	r2, r3
 8001a7e:	4908      	ldr	r1, [pc, #32]	; (8001aa0 <__NVIC_SetPriority+0x50>)
 8001a80:	79fb      	ldrb	r3, [r7, #7]
 8001a82:	f003 030f 	and.w	r3, r3, #15
 8001a86:	3b04      	subs	r3, #4
 8001a88:	0112      	lsls	r2, r2, #4
 8001a8a:	b2d2      	uxtb	r2, r2
 8001a8c:	440b      	add	r3, r1
 8001a8e:	761a      	strb	r2, [r3, #24]
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	e000e100 	.word	0xe000e100
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b089      	sub	sp, #36	; 0x24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	f1c3 0307 	rsb	r3, r3, #7
 8001abe:	2b04      	cmp	r3, #4
 8001ac0:	bf28      	it	cs
 8001ac2:	2304      	movcs	r3, #4
 8001ac4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	3304      	adds	r3, #4
 8001aca:	2b06      	cmp	r3, #6
 8001acc:	d902      	bls.n	8001ad4 <NVIC_EncodePriority+0x30>
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	3b03      	subs	r3, #3
 8001ad2:	e000      	b.n	8001ad6 <NVIC_EncodePriority+0x32>
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	43da      	mvns	r2, r3
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	401a      	ands	r2, r3
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aec:	f04f 31ff 	mov.w	r1, #4294967295
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	fa01 f303 	lsl.w	r3, r1, r3
 8001af6:	43d9      	mvns	r1, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001afc:	4313      	orrs	r3, r2
         );
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3724      	adds	r7, #36	; 0x24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
	...

08001b0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3b01      	subs	r3, #1
 8001b18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b1c:	d301      	bcc.n	8001b22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e00f      	b.n	8001b42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b22:	4a0a      	ldr	r2, [pc, #40]	; (8001b4c <SysTick_Config+0x40>)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3b01      	subs	r3, #1
 8001b28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b2a:	210f      	movs	r1, #15
 8001b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b30:	f7ff ff8e 	bl	8001a50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b34:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <SysTick_Config+0x40>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b3a:	4b04      	ldr	r3, [pc, #16]	; (8001b4c <SysTick_Config+0x40>)
 8001b3c:	2207      	movs	r2, #7
 8001b3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	e000e010 	.word	0xe000e010

08001b50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f7ff ff47 	bl	80019ec <__NVIC_SetPriorityGrouping>
}
 8001b5e:	bf00      	nop
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b086      	sub	sp, #24
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	60b9      	str	r1, [r7, #8]
 8001b70:	607a      	str	r2, [r7, #4]
 8001b72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b78:	f7ff ff5c 	bl	8001a34 <__NVIC_GetPriorityGrouping>
 8001b7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	68b9      	ldr	r1, [r7, #8]
 8001b82:	6978      	ldr	r0, [r7, #20]
 8001b84:	f7ff ff8e 	bl	8001aa4 <NVIC_EncodePriority>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b8e:	4611      	mov	r1, r2
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff ff5d 	bl	8001a50 <__NVIC_SetPriority>
}
 8001b96:	bf00      	nop
 8001b98:	3718      	adds	r7, #24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b082      	sub	sp, #8
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7ff ffb0 	bl	8001b0c <SysTick_Config>
 8001bac:	4603      	mov	r3, r0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
	...

08001bb8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e054      	b.n	8001c74 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	7f5b      	ldrb	r3, [r3, #29]
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d105      	bne.n	8001be0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7ff f9f2 	bl	8000fc4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2202      	movs	r2, #2
 8001be4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	791b      	ldrb	r3, [r3, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d10c      	bne.n	8001c08 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a22      	ldr	r2, [pc, #136]	; (8001c7c <HAL_CRC_Init+0xc4>)
 8001bf4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	689a      	ldr	r2, [r3, #8]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f022 0218 	bic.w	r2, r2, #24
 8001c04:	609a      	str	r2, [r3, #8]
 8001c06:	e00c      	b.n	8001c22 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6899      	ldr	r1, [r3, #8]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	461a      	mov	r2, r3
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 f834 	bl	8001c80 <HAL_CRCEx_Polynomial_Set>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e028      	b.n	8001c74 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	795b      	ldrb	r3, [r3, #5]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d105      	bne.n	8001c36 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f04f 32ff 	mov.w	r2, #4294967295
 8001c32:	611a      	str	r2, [r3, #16]
 8001c34:	e004      	b.n	8001c40 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	6912      	ldr	r2, [r2, #16]
 8001c3e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	695a      	ldr	r2, [r3, #20]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	430a      	orrs	r2, r1
 8001c54:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	699a      	ldr	r2, [r3, #24]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	04c11db7 	.word	0x04c11db7

08001c80 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b087      	sub	sp, #28
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001c90:	231f      	movs	r3, #31
 8001c92:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001c94:	bf00      	nop
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1e5a      	subs	r2, r3, #1
 8001c9a:	613a      	str	r2, [r7, #16]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d009      	beq.n	8001cb4 <HAL_CRCEx_Polynomial_Set+0x34>
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	f003 031f 	and.w	r3, r3, #31
 8001ca6:	68ba      	ldr	r2, [r7, #8]
 8001ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cac:	f003 0301 	and.w	r3, r3, #1
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d0f0      	beq.n	8001c96 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2b18      	cmp	r3, #24
 8001cb8:	d846      	bhi.n	8001d48 <HAL_CRCEx_Polynomial_Set+0xc8>
 8001cba:	a201      	add	r2, pc, #4	; (adr r2, 8001cc0 <HAL_CRCEx_Polynomial_Set+0x40>)
 8001cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc0:	08001d4f 	.word	0x08001d4f
 8001cc4:	08001d49 	.word	0x08001d49
 8001cc8:	08001d49 	.word	0x08001d49
 8001ccc:	08001d49 	.word	0x08001d49
 8001cd0:	08001d49 	.word	0x08001d49
 8001cd4:	08001d49 	.word	0x08001d49
 8001cd8:	08001d49 	.word	0x08001d49
 8001cdc:	08001d49 	.word	0x08001d49
 8001ce0:	08001d3d 	.word	0x08001d3d
 8001ce4:	08001d49 	.word	0x08001d49
 8001ce8:	08001d49 	.word	0x08001d49
 8001cec:	08001d49 	.word	0x08001d49
 8001cf0:	08001d49 	.word	0x08001d49
 8001cf4:	08001d49 	.word	0x08001d49
 8001cf8:	08001d49 	.word	0x08001d49
 8001cfc:	08001d49 	.word	0x08001d49
 8001d00:	08001d31 	.word	0x08001d31
 8001d04:	08001d49 	.word	0x08001d49
 8001d08:	08001d49 	.word	0x08001d49
 8001d0c:	08001d49 	.word	0x08001d49
 8001d10:	08001d49 	.word	0x08001d49
 8001d14:	08001d49 	.word	0x08001d49
 8001d18:	08001d49 	.word	0x08001d49
 8001d1c:	08001d49 	.word	0x08001d49
 8001d20:	08001d25 	.word	0x08001d25
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	2b06      	cmp	r3, #6
 8001d28:	d913      	bls.n	8001d52 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001d2e:	e010      	b.n	8001d52 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	2b07      	cmp	r3, #7
 8001d34:	d90f      	bls.n	8001d56 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001d3a:	e00c      	b.n	8001d56 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	2b0f      	cmp	r3, #15
 8001d40:	d90b      	bls.n	8001d5a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001d46:	e008      	b.n	8001d5a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	75fb      	strb	r3, [r7, #23]
      break;
 8001d4c:	e006      	b.n	8001d5c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001d4e:	bf00      	nop
 8001d50:	e004      	b.n	8001d5c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001d52:	bf00      	nop
 8001d54:	e002      	b.n	8001d5c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001d56:	bf00      	nop
 8001d58:	e000      	b.n	8001d5c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001d5a:	bf00      	nop
  }
  if (status == HAL_OK)
 8001d5c:	7dfb      	ldrb	r3, [r7, #23]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d10d      	bne.n	8001d7e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68ba      	ldr	r2, [r7, #8]
 8001d68:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f023 0118 	bic.w	r1, r3, #24
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	371c      	adds	r7, #28
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b087      	sub	sp, #28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d96:	2300      	movs	r3, #0
 8001d98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d9a:	e166      	b.n	800206a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	2101      	movs	r1, #1
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	fa01 f303 	lsl.w	r3, r1, r3
 8001da8:	4013      	ands	r3, r2
 8001daa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f000 8158 	beq.w	8002064 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f003 0303 	and.w	r3, r3, #3
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d005      	beq.n	8001dcc <HAL_GPIO_Init+0x40>
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f003 0303 	and.w	r3, r3, #3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d130      	bne.n	8001e2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	2203      	movs	r2, #3
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	4013      	ands	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	68da      	ldr	r2, [r3, #12]
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e02:	2201      	movs	r2, #1
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	091b      	lsrs	r3, r3, #4
 8001e18:	f003 0201 	and.w	r2, r3, #1
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f003 0303 	and.w	r3, r3, #3
 8001e36:	2b03      	cmp	r3, #3
 8001e38:	d017      	beq.n	8001e6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	2203      	movs	r2, #3
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	689a      	ldr	r2, [r3, #8]
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f003 0303 	and.w	r3, r3, #3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d123      	bne.n	8001ebe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	08da      	lsrs	r2, r3, #3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	3208      	adds	r2, #8
 8001e7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	f003 0307 	and.w	r3, r3, #7
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	220f      	movs	r2, #15
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	43db      	mvns	r3, r3
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	4013      	ands	r3, r2
 8001e98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	691a      	ldr	r2, [r3, #16]
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	f003 0307 	and.w	r3, r3, #7
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	08da      	lsrs	r2, r3, #3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3208      	adds	r2, #8
 8001eb8:	6939      	ldr	r1, [r7, #16]
 8001eba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	2203      	movs	r2, #3
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f003 0203 	and.w	r2, r3, #3
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f000 80b2 	beq.w	8002064 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f00:	4b61      	ldr	r3, [pc, #388]	; (8002088 <HAL_GPIO_Init+0x2fc>)
 8001f02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f04:	4a60      	ldr	r2, [pc, #384]	; (8002088 <HAL_GPIO_Init+0x2fc>)
 8001f06:	f043 0301 	orr.w	r3, r3, #1
 8001f0a:	6613      	str	r3, [r2, #96]	; 0x60
 8001f0c:	4b5e      	ldr	r3, [pc, #376]	; (8002088 <HAL_GPIO_Init+0x2fc>)
 8001f0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	60bb      	str	r3, [r7, #8]
 8001f16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f18:	4a5c      	ldr	r2, [pc, #368]	; (800208c <HAL_GPIO_Init+0x300>)
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	089b      	lsrs	r3, r3, #2
 8001f1e:	3302      	adds	r3, #2
 8001f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	f003 0303 	and.w	r3, r3, #3
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	220f      	movs	r2, #15
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	43db      	mvns	r3, r3
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f42:	d02b      	beq.n	8001f9c <HAL_GPIO_Init+0x210>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a52      	ldr	r2, [pc, #328]	; (8002090 <HAL_GPIO_Init+0x304>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d025      	beq.n	8001f98 <HAL_GPIO_Init+0x20c>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a51      	ldr	r2, [pc, #324]	; (8002094 <HAL_GPIO_Init+0x308>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d01f      	beq.n	8001f94 <HAL_GPIO_Init+0x208>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a50      	ldr	r2, [pc, #320]	; (8002098 <HAL_GPIO_Init+0x30c>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d019      	beq.n	8001f90 <HAL_GPIO_Init+0x204>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a4f      	ldr	r2, [pc, #316]	; (800209c <HAL_GPIO_Init+0x310>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d013      	beq.n	8001f8c <HAL_GPIO_Init+0x200>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a4e      	ldr	r2, [pc, #312]	; (80020a0 <HAL_GPIO_Init+0x314>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d00d      	beq.n	8001f88 <HAL_GPIO_Init+0x1fc>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a4d      	ldr	r2, [pc, #308]	; (80020a4 <HAL_GPIO_Init+0x318>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d007      	beq.n	8001f84 <HAL_GPIO_Init+0x1f8>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a4c      	ldr	r2, [pc, #304]	; (80020a8 <HAL_GPIO_Init+0x31c>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d101      	bne.n	8001f80 <HAL_GPIO_Init+0x1f4>
 8001f7c:	2307      	movs	r3, #7
 8001f7e:	e00e      	b.n	8001f9e <HAL_GPIO_Init+0x212>
 8001f80:	2308      	movs	r3, #8
 8001f82:	e00c      	b.n	8001f9e <HAL_GPIO_Init+0x212>
 8001f84:	2306      	movs	r3, #6
 8001f86:	e00a      	b.n	8001f9e <HAL_GPIO_Init+0x212>
 8001f88:	2305      	movs	r3, #5
 8001f8a:	e008      	b.n	8001f9e <HAL_GPIO_Init+0x212>
 8001f8c:	2304      	movs	r3, #4
 8001f8e:	e006      	b.n	8001f9e <HAL_GPIO_Init+0x212>
 8001f90:	2303      	movs	r3, #3
 8001f92:	e004      	b.n	8001f9e <HAL_GPIO_Init+0x212>
 8001f94:	2302      	movs	r3, #2
 8001f96:	e002      	b.n	8001f9e <HAL_GPIO_Init+0x212>
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e000      	b.n	8001f9e <HAL_GPIO_Init+0x212>
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	697a      	ldr	r2, [r7, #20]
 8001fa0:	f002 0203 	and.w	r2, r2, #3
 8001fa4:	0092      	lsls	r2, r2, #2
 8001fa6:	4093      	lsls	r3, r2
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fae:	4937      	ldr	r1, [pc, #220]	; (800208c <HAL_GPIO_Init+0x300>)
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	089b      	lsrs	r3, r3, #2
 8001fb4:	3302      	adds	r3, #2
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fbc:	4b3b      	ldr	r3, [pc, #236]	; (80020ac <HAL_GPIO_Init+0x320>)
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d003      	beq.n	8001fe0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fe0:	4a32      	ldr	r2, [pc, #200]	; (80020ac <HAL_GPIO_Init+0x320>)
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001fe6:	4b31      	ldr	r3, [pc, #196]	; (80020ac <HAL_GPIO_Init+0x320>)
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4313      	orrs	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800200a:	4a28      	ldr	r2, [pc, #160]	; (80020ac <HAL_GPIO_Init+0x320>)
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002010:	4b26      	ldr	r3, [pc, #152]	; (80020ac <HAL_GPIO_Init+0x320>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	43db      	mvns	r3, r3
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	4013      	ands	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d003      	beq.n	8002034 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	4313      	orrs	r3, r2
 8002032:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002034:	4a1d      	ldr	r2, [pc, #116]	; (80020ac <HAL_GPIO_Init+0x320>)
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800203a:	4b1c      	ldr	r3, [pc, #112]	; (80020ac <HAL_GPIO_Init+0x320>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	43db      	mvns	r3, r3
 8002044:	693a      	ldr	r2, [r7, #16]
 8002046:	4013      	ands	r3, r2
 8002048:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	4313      	orrs	r3, r2
 800205c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800205e:	4a13      	ldr	r2, [pc, #76]	; (80020ac <HAL_GPIO_Init+0x320>)
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	3301      	adds	r3, #1
 8002068:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	fa22 f303 	lsr.w	r3, r2, r3
 8002074:	2b00      	cmp	r3, #0
 8002076:	f47f ae91 	bne.w	8001d9c <HAL_GPIO_Init+0x10>
  }
}
 800207a:	bf00      	nop
 800207c:	bf00      	nop
 800207e:	371c      	adds	r7, #28
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	40021000 	.word	0x40021000
 800208c:	40010000 	.word	0x40010000
 8002090:	48000400 	.word	0x48000400
 8002094:	48000800 	.word	0x48000800
 8002098:	48000c00 	.word	0x48000c00
 800209c:	48001000 	.word	0x48001000
 80020a0:	48001400 	.word	0x48001400
 80020a4:	48001800 	.word	0x48001800
 80020a8:	48001c00 	.word	0x48001c00
 80020ac:	40010400 	.word	0x40010400

080020b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	460b      	mov	r3, r1
 80020ba:	807b      	strh	r3, [r7, #2]
 80020bc:	4613      	mov	r3, r2
 80020be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020c0:	787b      	ldrb	r3, [r7, #1]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020c6:	887a      	ldrh	r2, [r7, #2]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020cc:	e002      	b.n	80020d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020ce:	887a      	ldrh	r2, [r7, #2]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e081      	b.n	80021f6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d106      	bne.n	800210c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7fe ff7c 	bl	8001004 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2224      	movs	r2, #36	; 0x24
 8002110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f022 0201 	bic.w	r2, r2, #1
 8002122:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002130:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002140:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d107      	bne.n	800215a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	689a      	ldr	r2, [r3, #8]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002156:	609a      	str	r2, [r3, #8]
 8002158:	e006      	b.n	8002168 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002166:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	2b02      	cmp	r3, #2
 800216e:	d104      	bne.n	800217a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002178:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	6812      	ldr	r2, [r2, #0]
 8002184:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002188:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800218c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68da      	ldr	r2, [r3, #12]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800219c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	691a      	ldr	r2, [r3, #16]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	430a      	orrs	r2, r1
 80021b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	69d9      	ldr	r1, [r3, #28]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a1a      	ldr	r2, [r3, #32]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	430a      	orrs	r2, r1
 80021c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f042 0201 	orr.w	r2, r2, #1
 80021d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2220      	movs	r2, #32
 80021e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
 8002206:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2b20      	cmp	r3, #32
 8002212:	d138      	bne.n	8002286 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800221a:	2b01      	cmp	r3, #1
 800221c:	d101      	bne.n	8002222 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800221e:	2302      	movs	r3, #2
 8002220:	e032      	b.n	8002288 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2201      	movs	r2, #1
 8002226:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2224      	movs	r2, #36	; 0x24
 800222e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f022 0201 	bic.w	r2, r2, #1
 8002240:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002250:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6819      	ldr	r1, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	430a      	orrs	r2, r1
 8002260:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f042 0201 	orr.w	r2, r2, #1
 8002270:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2220      	movs	r2, #32
 8002276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002282:	2300      	movs	r3, #0
 8002284:	e000      	b.n	8002288 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002286:	2302      	movs	r3, #2
  }
}
 8002288:	4618      	mov	r0, r3
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b20      	cmp	r3, #32
 80022a8:	d139      	bne.n	800231e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d101      	bne.n	80022b8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80022b4:	2302      	movs	r3, #2
 80022b6:	e033      	b.n	8002320 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2224      	movs	r2, #36	; 0x24
 80022c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 0201 	bic.w	r2, r2, #1
 80022d6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80022e6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	021b      	lsls	r3, r3, #8
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f042 0201 	orr.w	r2, r2, #1
 8002308:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2220      	movs	r2, #32
 800230e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800231a:	2300      	movs	r3, #0
 800231c:	e000      	b.n	8002320 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800231e:	2302      	movs	r3, #2
  }
}
 8002320:	4618      	mov	r0, r3
 8002322:	3714      	adds	r7, #20
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800232c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800232e:	b08f      	sub	sp, #60	; 0x3c
 8002330:	af0a      	add	r7, sp, #40	; 0x28
 8002332:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e116      	b.n	800256c <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800234a:	b2db      	uxtb	r3, r3
 800234c:	2b00      	cmp	r3, #0
 800234e:	d106      	bne.n	800235e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f7ff f883 	bl	8001464 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2203      	movs	r2, #3
 8002362:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800236a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236e:	2b00      	cmp	r3, #0
 8002370:	d102      	bne.n	8002378 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4618      	mov	r0, r3
 800237e:	f005 fed7 	bl	8008130 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	603b      	str	r3, [r7, #0]
 8002388:	687e      	ldr	r6, [r7, #4]
 800238a:	466d      	mov	r5, sp
 800238c:	f106 0410 	add.w	r4, r6, #16
 8002390:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002392:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002394:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002396:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002398:	e894 0003 	ldmia.w	r4, {r0, r1}
 800239c:	e885 0003 	stmia.w	r5, {r0, r1}
 80023a0:	1d33      	adds	r3, r6, #4
 80023a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023a4:	6838      	ldr	r0, [r7, #0]
 80023a6:	f005 fe97 	bl	80080d8 <USB_CoreInit>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d005      	beq.n	80023bc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2202      	movs	r2, #2
 80023b4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e0d7      	b.n	800256c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2100      	movs	r1, #0
 80023c2:	4618      	mov	r0, r3
 80023c4:	f005 fec5 	bl	8008152 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023c8:	2300      	movs	r3, #0
 80023ca:	73fb      	strb	r3, [r7, #15]
 80023cc:	e04a      	b.n	8002464 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023ce:	7bfa      	ldrb	r2, [r7, #15]
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	4613      	mov	r3, r2
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	4413      	add	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	440b      	add	r3, r1
 80023dc:	333d      	adds	r3, #61	; 0x3d
 80023de:	2201      	movs	r2, #1
 80023e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80023e2:	7bfa      	ldrb	r2, [r7, #15]
 80023e4:	6879      	ldr	r1, [r7, #4]
 80023e6:	4613      	mov	r3, r2
 80023e8:	00db      	lsls	r3, r3, #3
 80023ea:	4413      	add	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	440b      	add	r3, r1
 80023f0:	333c      	adds	r3, #60	; 0x3c
 80023f2:	7bfa      	ldrb	r2, [r7, #15]
 80023f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80023f6:	7bfa      	ldrb	r2, [r7, #15]
 80023f8:	7bfb      	ldrb	r3, [r7, #15]
 80023fa:	b298      	uxth	r0, r3
 80023fc:	6879      	ldr	r1, [r7, #4]
 80023fe:	4613      	mov	r3, r2
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	4413      	add	r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	440b      	add	r3, r1
 8002408:	3344      	adds	r3, #68	; 0x44
 800240a:	4602      	mov	r2, r0
 800240c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800240e:	7bfa      	ldrb	r2, [r7, #15]
 8002410:	6879      	ldr	r1, [r7, #4]
 8002412:	4613      	mov	r3, r2
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	4413      	add	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	440b      	add	r3, r1
 800241c:	3340      	adds	r3, #64	; 0x40
 800241e:	2200      	movs	r2, #0
 8002420:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002422:	7bfa      	ldrb	r2, [r7, #15]
 8002424:	6879      	ldr	r1, [r7, #4]
 8002426:	4613      	mov	r3, r2
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	4413      	add	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	440b      	add	r3, r1
 8002430:	3348      	adds	r3, #72	; 0x48
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002436:	7bfa      	ldrb	r2, [r7, #15]
 8002438:	6879      	ldr	r1, [r7, #4]
 800243a:	4613      	mov	r3, r2
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	4413      	add	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	440b      	add	r3, r1
 8002444:	334c      	adds	r3, #76	; 0x4c
 8002446:	2200      	movs	r2, #0
 8002448:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800244a:	7bfa      	ldrb	r2, [r7, #15]
 800244c:	6879      	ldr	r1, [r7, #4]
 800244e:	4613      	mov	r3, r2
 8002450:	00db      	lsls	r3, r3, #3
 8002452:	4413      	add	r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	440b      	add	r3, r1
 8002458:	3354      	adds	r3, #84	; 0x54
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800245e:	7bfb      	ldrb	r3, [r7, #15]
 8002460:	3301      	adds	r3, #1
 8002462:	73fb      	strb	r3, [r7, #15]
 8002464:	7bfa      	ldrb	r2, [r7, #15]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	429a      	cmp	r2, r3
 800246c:	d3af      	bcc.n	80023ce <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800246e:	2300      	movs	r3, #0
 8002470:	73fb      	strb	r3, [r7, #15]
 8002472:	e044      	b.n	80024fe <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002474:	7bfa      	ldrb	r2, [r7, #15]
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	4613      	mov	r3, r2
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	4413      	add	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	440b      	add	r3, r1
 8002482:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002486:	2200      	movs	r2, #0
 8002488:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800248a:	7bfa      	ldrb	r2, [r7, #15]
 800248c:	6879      	ldr	r1, [r7, #4]
 800248e:	4613      	mov	r3, r2
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	4413      	add	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	440b      	add	r3, r1
 8002498:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800249c:	7bfa      	ldrb	r2, [r7, #15]
 800249e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024a0:	7bfa      	ldrb	r2, [r7, #15]
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	4613      	mov	r3, r2
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	4413      	add	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	440b      	add	r3, r1
 80024ae:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80024b2:	2200      	movs	r2, #0
 80024b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024b6:	7bfa      	ldrb	r2, [r7, #15]
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	4613      	mov	r3, r2
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	4413      	add	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	440b      	add	r3, r1
 80024c4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024cc:	7bfa      	ldrb	r2, [r7, #15]
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	4613      	mov	r3, r2
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	4413      	add	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	440b      	add	r3, r1
 80024da:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80024de:	2200      	movs	r2, #0
 80024e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80024e2:	7bfa      	ldrb	r2, [r7, #15]
 80024e4:	6879      	ldr	r1, [r7, #4]
 80024e6:	4613      	mov	r3, r2
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	4413      	add	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	440b      	add	r3, r1
 80024f0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
 80024fa:	3301      	adds	r3, #1
 80024fc:	73fb      	strb	r3, [r7, #15]
 80024fe:	7bfa      	ldrb	r2, [r7, #15]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	429a      	cmp	r2, r3
 8002506:	d3b5      	bcc.n	8002474 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	603b      	str	r3, [r7, #0]
 800250e:	687e      	ldr	r6, [r7, #4]
 8002510:	466d      	mov	r5, sp
 8002512:	f106 0410 	add.w	r4, r6, #16
 8002516:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002518:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800251a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800251c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800251e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002522:	e885 0003 	stmia.w	r5, {r0, r1}
 8002526:	1d33      	adds	r3, r6, #4
 8002528:	cb0e      	ldmia	r3, {r1, r2, r3}
 800252a:	6838      	ldr	r0, [r7, #0]
 800252c:	f005 fe5e 	bl	80081ec <USB_DevInit>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d005      	beq.n	8002542 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2202      	movs	r2, #2
 800253a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e014      	b.n	800256c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002556:	2b01      	cmp	r3, #1
 8002558:	d102      	bne.n	8002560 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f80a 	bl	8002574 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f006 f80a 	bl	800857e <USB_DevDisconnect>

  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002574 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025a6:	f043 0303 	orr.w	r3, r3, #3
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3714      	adds	r7, #20
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80025c0:	4b0d      	ldr	r3, [pc, #52]	; (80025f8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025cc:	d102      	bne.n	80025d4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80025ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025d2:	e00b      	b.n	80025ec <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80025d4:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80025d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025e2:	d102      	bne.n	80025ea <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80025e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025e8:	e000      	b.n	80025ec <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80025ea:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	40007000 	.word	0x40007000

080025fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d141      	bne.n	800268e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800260a:	4b4b      	ldr	r3, [pc, #300]	; (8002738 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002616:	d131      	bne.n	800267c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002618:	4b47      	ldr	r3, [pc, #284]	; (8002738 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800261a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800261e:	4a46      	ldr	r2, [pc, #280]	; (8002738 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002620:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002624:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002628:	4b43      	ldr	r3, [pc, #268]	; (8002738 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002630:	4a41      	ldr	r2, [pc, #260]	; (8002738 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002632:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002636:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002638:	4b40      	ldr	r3, [pc, #256]	; (800273c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2232      	movs	r2, #50	; 0x32
 800263e:	fb02 f303 	mul.w	r3, r2, r3
 8002642:	4a3f      	ldr	r2, [pc, #252]	; (8002740 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002644:	fba2 2303 	umull	r2, r3, r2, r3
 8002648:	0c9b      	lsrs	r3, r3, #18
 800264a:	3301      	adds	r3, #1
 800264c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800264e:	e002      	b.n	8002656 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	3b01      	subs	r3, #1
 8002654:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002656:	4b38      	ldr	r3, [pc, #224]	; (8002738 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800265e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002662:	d102      	bne.n	800266a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1f2      	bne.n	8002650 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800266a:	4b33      	ldr	r3, [pc, #204]	; (8002738 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002676:	d158      	bne.n	800272a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e057      	b.n	800272c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800267c:	4b2e      	ldr	r3, [pc, #184]	; (8002738 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800267e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002682:	4a2d      	ldr	r2, [pc, #180]	; (8002738 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002684:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002688:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800268c:	e04d      	b.n	800272a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002694:	d141      	bne.n	800271a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002696:	4b28      	ldr	r3, [pc, #160]	; (8002738 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800269e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026a2:	d131      	bne.n	8002708 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026a4:	4b24      	ldr	r3, [pc, #144]	; (8002738 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026aa:	4a23      	ldr	r2, [pc, #140]	; (8002738 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026b4:	4b20      	ldr	r3, [pc, #128]	; (8002738 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026bc:	4a1e      	ldr	r2, [pc, #120]	; (8002738 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80026c4:	4b1d      	ldr	r3, [pc, #116]	; (800273c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2232      	movs	r2, #50	; 0x32
 80026ca:	fb02 f303 	mul.w	r3, r2, r3
 80026ce:	4a1c      	ldr	r2, [pc, #112]	; (8002740 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80026d0:	fba2 2303 	umull	r2, r3, r2, r3
 80026d4:	0c9b      	lsrs	r3, r3, #18
 80026d6:	3301      	adds	r3, #1
 80026d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026da:	e002      	b.n	80026e2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	3b01      	subs	r3, #1
 80026e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026e2:	4b15      	ldr	r3, [pc, #84]	; (8002738 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026ee:	d102      	bne.n	80026f6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1f2      	bne.n	80026dc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026f6:	4b10      	ldr	r3, [pc, #64]	; (8002738 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002702:	d112      	bne.n	800272a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e011      	b.n	800272c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002708:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800270a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800270e:	4a0a      	ldr	r2, [pc, #40]	; (8002738 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002714:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002718:	e007      	b.n	800272a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800271a:	4b07      	ldr	r3, [pc, #28]	; (8002738 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002722:	4a05      	ldr	r2, [pc, #20]	; (8002738 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002724:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002728:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3714      	adds	r7, #20
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	40007000 	.word	0x40007000
 800273c:	20000000 	.word	0x20000000
 8002740:	431bde83 	.word	0x431bde83

08002744 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002748:	4b05      	ldr	r3, [pc, #20]	; (8002760 <HAL_PWREx_EnableVddUSB+0x1c>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	4a04      	ldr	r2, [pc, #16]	; (8002760 <HAL_PWREx_EnableVddUSB+0x1c>)
 800274e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002752:	6053      	str	r3, [r2, #4]
}
 8002754:	bf00      	nop
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	40007000 	.word	0x40007000

08002764 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002768:	4b05      	ldr	r3, [pc, #20]	; (8002780 <HAL_PWREx_EnableVddIO2+0x1c>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	4a04      	ldr	r2, [pc, #16]	; (8002780 <HAL_PWREx_EnableVddIO2+0x1c>)
 800276e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002772:	6053      	str	r3, [r2, #4]
}
 8002774:	bf00      	nop
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	40007000 	.word	0x40007000

08002784 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b088      	sub	sp, #32
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d102      	bne.n	8002798 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	f000 bc08 	b.w	8002fa8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002798:	4b96      	ldr	r3, [pc, #600]	; (80029f4 <HAL_RCC_OscConfig+0x270>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f003 030c 	and.w	r3, r3, #12
 80027a0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027a2:	4b94      	ldr	r3, [pc, #592]	; (80029f4 <HAL_RCC_OscConfig+0x270>)
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	f003 0303 	and.w	r3, r3, #3
 80027aa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0310 	and.w	r3, r3, #16
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f000 80e4 	beq.w	8002982 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d007      	beq.n	80027d0 <HAL_RCC_OscConfig+0x4c>
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	2b0c      	cmp	r3, #12
 80027c4:	f040 808b 	bne.w	80028de <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	f040 8087 	bne.w	80028de <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027d0:	4b88      	ldr	r3, [pc, #544]	; (80029f4 <HAL_RCC_OscConfig+0x270>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d005      	beq.n	80027e8 <HAL_RCC_OscConfig+0x64>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d101      	bne.n	80027e8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e3df      	b.n	8002fa8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a1a      	ldr	r2, [r3, #32]
 80027ec:	4b81      	ldr	r3, [pc, #516]	; (80029f4 <HAL_RCC_OscConfig+0x270>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0308 	and.w	r3, r3, #8
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d004      	beq.n	8002802 <HAL_RCC_OscConfig+0x7e>
 80027f8:	4b7e      	ldr	r3, [pc, #504]	; (80029f4 <HAL_RCC_OscConfig+0x270>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002800:	e005      	b.n	800280e <HAL_RCC_OscConfig+0x8a>
 8002802:	4b7c      	ldr	r3, [pc, #496]	; (80029f4 <HAL_RCC_OscConfig+0x270>)
 8002804:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002808:	091b      	lsrs	r3, r3, #4
 800280a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800280e:	4293      	cmp	r3, r2
 8002810:	d223      	bcs.n	800285a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	4618      	mov	r0, r3
 8002818:	f000 fdca 	bl	80033b0 <RCC_SetFlashLatencyFromMSIRange>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e3c0      	b.n	8002fa8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002826:	4b73      	ldr	r3, [pc, #460]	; (80029f4 <HAL_RCC_OscConfig+0x270>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a72      	ldr	r2, [pc, #456]	; (80029f4 <HAL_RCC_OscConfig+0x270>)
 800282c:	f043 0308 	orr.w	r3, r3, #8
 8002830:	6013      	str	r3, [r2, #0]
 8002832:	4b70      	ldr	r3, [pc, #448]	; (80029f4 <HAL_RCC_OscConfig+0x270>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	496d      	ldr	r1, [pc, #436]	; (80029f4 <HAL_RCC_OscConfig+0x270>)
 8002840:	4313      	orrs	r3, r2
 8002842:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002844:	4b6b      	ldr	r3, [pc, #428]	; (80029f4 <HAL_RCC_OscConfig+0x270>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	69db      	ldr	r3, [r3, #28]
 8002850:	021b      	lsls	r3, r3, #8
 8002852:	4968      	ldr	r1, [pc, #416]	; (80029f4 <HAL_RCC_OscConfig+0x270>)
 8002854:	4313      	orrs	r3, r2
 8002856:	604b      	str	r3, [r1, #4]
 8002858:	e025      	b.n	80028a6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800285a:	4b66      	ldr	r3, [pc, #408]	; (80029f4 <HAL_RCC_OscConfig+0x270>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a65      	ldr	r2, [pc, #404]	; (80029f4 <HAL_RCC_OscConfig+0x270>)
 8002860:	f043 0308 	orr.w	r3, r3, #8
 8002864:	6013      	str	r3, [r2, #0]
 8002866:	4b63      	ldr	r3, [pc, #396]	; (80029f4 <HAL_RCC_OscConfig+0x270>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	4960      	ldr	r1, [pc, #384]	; (80029f4 <HAL_RCC_OscConfig+0x270>)
 8002874:	4313      	orrs	r3, r2
 8002876:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002878:	4b5e      	ldr	r3, [pc, #376]	; (80029f4 <HAL_RCC_OscConfig+0x270>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	69db      	ldr	r3, [r3, #28]
 8002884:	021b      	lsls	r3, r3, #8
 8002886:	495b      	ldr	r1, [pc, #364]	; (80029f4 <HAL_RCC_OscConfig+0x270>)
 8002888:	4313      	orrs	r3, r2
 800288a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d109      	bne.n	80028a6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a1b      	ldr	r3, [r3, #32]
 8002896:	4618      	mov	r0, r3
 8002898:	f000 fd8a 	bl	80033b0 <RCC_SetFlashLatencyFromMSIRange>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e380      	b.n	8002fa8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028a6:	f000 fcc1 	bl	800322c <HAL_RCC_GetSysClockFreq>
 80028aa:	4602      	mov	r2, r0
 80028ac:	4b51      	ldr	r3, [pc, #324]	; (80029f4 <HAL_RCC_OscConfig+0x270>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	091b      	lsrs	r3, r3, #4
 80028b2:	f003 030f 	and.w	r3, r3, #15
 80028b6:	4950      	ldr	r1, [pc, #320]	; (80029f8 <HAL_RCC_OscConfig+0x274>)
 80028b8:	5ccb      	ldrb	r3, [r1, r3]
 80028ba:	f003 031f 	and.w	r3, r3, #31
 80028be:	fa22 f303 	lsr.w	r3, r2, r3
 80028c2:	4a4e      	ldr	r2, [pc, #312]	; (80029fc <HAL_RCC_OscConfig+0x278>)
 80028c4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80028c6:	4b4e      	ldr	r3, [pc, #312]	; (8002a00 <HAL_RCC_OscConfig+0x27c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff f80e 	bl	80018ec <HAL_InitTick>
 80028d0:	4603      	mov	r3, r0
 80028d2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d052      	beq.n	8002980 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80028da:	7bfb      	ldrb	r3, [r7, #15]
 80028dc:	e364      	b.n	8002fa8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d032      	beq.n	800294c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80028e6:	4b43      	ldr	r3, [pc, #268]	; (80029f4 <HAL_RCC_OscConfig+0x270>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a42      	ldr	r2, [pc, #264]	; (80029f4 <HAL_RCC_OscConfig+0x270>)
 80028ec:	f043 0301 	orr.w	r3, r3, #1
 80028f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028f2:	f7ff f84b 	bl	800198c <HAL_GetTick>
 80028f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028f8:	e008      	b.n	800290c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028fa:	f7ff f847 	bl	800198c <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d901      	bls.n	800290c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e34d      	b.n	8002fa8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800290c:	4b39      	ldr	r3, [pc, #228]	; (80029f4 <HAL_RCC_OscConfig+0x270>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d0f0      	beq.n	80028fa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002918:	4b36      	ldr	r3, [pc, #216]	; (80029f4 <HAL_RCC_OscConfig+0x270>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a35      	ldr	r2, [pc, #212]	; (80029f4 <HAL_RCC_OscConfig+0x270>)
 800291e:	f043 0308 	orr.w	r3, r3, #8
 8002922:	6013      	str	r3, [r2, #0]
 8002924:	4b33      	ldr	r3, [pc, #204]	; (80029f4 <HAL_RCC_OscConfig+0x270>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	4930      	ldr	r1, [pc, #192]	; (80029f4 <HAL_RCC_OscConfig+0x270>)
 8002932:	4313      	orrs	r3, r2
 8002934:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002936:	4b2f      	ldr	r3, [pc, #188]	; (80029f4 <HAL_RCC_OscConfig+0x270>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	69db      	ldr	r3, [r3, #28]
 8002942:	021b      	lsls	r3, r3, #8
 8002944:	492b      	ldr	r1, [pc, #172]	; (80029f4 <HAL_RCC_OscConfig+0x270>)
 8002946:	4313      	orrs	r3, r2
 8002948:	604b      	str	r3, [r1, #4]
 800294a:	e01a      	b.n	8002982 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800294c:	4b29      	ldr	r3, [pc, #164]	; (80029f4 <HAL_RCC_OscConfig+0x270>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a28      	ldr	r2, [pc, #160]	; (80029f4 <HAL_RCC_OscConfig+0x270>)
 8002952:	f023 0301 	bic.w	r3, r3, #1
 8002956:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002958:	f7ff f818 	bl	800198c <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002960:	f7ff f814 	bl	800198c <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e31a      	b.n	8002fa8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002972:	4b20      	ldr	r3, [pc, #128]	; (80029f4 <HAL_RCC_OscConfig+0x270>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1f0      	bne.n	8002960 <HAL_RCC_OscConfig+0x1dc>
 800297e:	e000      	b.n	8002982 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002980:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b00      	cmp	r3, #0
 800298c:	d073      	beq.n	8002a76 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	2b08      	cmp	r3, #8
 8002992:	d005      	beq.n	80029a0 <HAL_RCC_OscConfig+0x21c>
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	2b0c      	cmp	r3, #12
 8002998:	d10e      	bne.n	80029b8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	2b03      	cmp	r3, #3
 800299e:	d10b      	bne.n	80029b8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a0:	4b14      	ldr	r3, [pc, #80]	; (80029f4 <HAL_RCC_OscConfig+0x270>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d063      	beq.n	8002a74 <HAL_RCC_OscConfig+0x2f0>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d15f      	bne.n	8002a74 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e2f7      	b.n	8002fa8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029c0:	d106      	bne.n	80029d0 <HAL_RCC_OscConfig+0x24c>
 80029c2:	4b0c      	ldr	r3, [pc, #48]	; (80029f4 <HAL_RCC_OscConfig+0x270>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a0b      	ldr	r2, [pc, #44]	; (80029f4 <HAL_RCC_OscConfig+0x270>)
 80029c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029cc:	6013      	str	r3, [r2, #0]
 80029ce:	e025      	b.n	8002a1c <HAL_RCC_OscConfig+0x298>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029d8:	d114      	bne.n	8002a04 <HAL_RCC_OscConfig+0x280>
 80029da:	4b06      	ldr	r3, [pc, #24]	; (80029f4 <HAL_RCC_OscConfig+0x270>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a05      	ldr	r2, [pc, #20]	; (80029f4 <HAL_RCC_OscConfig+0x270>)
 80029e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	4b03      	ldr	r3, [pc, #12]	; (80029f4 <HAL_RCC_OscConfig+0x270>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a02      	ldr	r2, [pc, #8]	; (80029f4 <HAL_RCC_OscConfig+0x270>)
 80029ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029f0:	6013      	str	r3, [r2, #0]
 80029f2:	e013      	b.n	8002a1c <HAL_RCC_OscConfig+0x298>
 80029f4:	40021000 	.word	0x40021000
 80029f8:	0800c0f8 	.word	0x0800c0f8
 80029fc:	20000000 	.word	0x20000000
 8002a00:	20000004 	.word	0x20000004
 8002a04:	4ba0      	ldr	r3, [pc, #640]	; (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a9f      	ldr	r2, [pc, #636]	; (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002a0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a0e:	6013      	str	r3, [r2, #0]
 8002a10:	4b9d      	ldr	r3, [pc, #628]	; (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a9c      	ldr	r2, [pc, #624]	; (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002a16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d013      	beq.n	8002a4c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a24:	f7fe ffb2 	bl	800198c <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a2c:	f7fe ffae 	bl	800198c <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b64      	cmp	r3, #100	; 0x64
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e2b4      	b.n	8002fa8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a3e:	4b92      	ldr	r3, [pc, #584]	; (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d0f0      	beq.n	8002a2c <HAL_RCC_OscConfig+0x2a8>
 8002a4a:	e014      	b.n	8002a76 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4c:	f7fe ff9e 	bl	800198c <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a54:	f7fe ff9a 	bl	800198c <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b64      	cmp	r3, #100	; 0x64
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e2a0      	b.n	8002fa8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a66:	4b88      	ldr	r3, [pc, #544]	; (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1f0      	bne.n	8002a54 <HAL_RCC_OscConfig+0x2d0>
 8002a72:	e000      	b.n	8002a76 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d060      	beq.n	8002b44 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	2b04      	cmp	r3, #4
 8002a86:	d005      	beq.n	8002a94 <HAL_RCC_OscConfig+0x310>
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	2b0c      	cmp	r3, #12
 8002a8c:	d119      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d116      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a94:	4b7c      	ldr	r3, [pc, #496]	; (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d005      	beq.n	8002aac <HAL_RCC_OscConfig+0x328>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d101      	bne.n	8002aac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e27d      	b.n	8002fa8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aac:	4b76      	ldr	r3, [pc, #472]	; (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	061b      	lsls	r3, r3, #24
 8002aba:	4973      	ldr	r1, [pc, #460]	; (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ac0:	e040      	b.n	8002b44 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d023      	beq.n	8002b12 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002aca:	4b6f      	ldr	r3, [pc, #444]	; (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a6e      	ldr	r2, [pc, #440]	; (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002ad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad6:	f7fe ff59 	bl	800198c <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002adc:	e008      	b.n	8002af0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ade:	f7fe ff55 	bl	800198c <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e25b      	b.n	8002fa8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002af0:	4b65      	ldr	r3, [pc, #404]	; (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0f0      	beq.n	8002ade <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002afc:	4b62      	ldr	r3, [pc, #392]	; (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	061b      	lsls	r3, r3, #24
 8002b0a:	495f      	ldr	r1, [pc, #380]	; (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	604b      	str	r3, [r1, #4]
 8002b10:	e018      	b.n	8002b44 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b12:	4b5d      	ldr	r3, [pc, #372]	; (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a5c      	ldr	r2, [pc, #368]	; (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002b18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1e:	f7fe ff35 	bl	800198c <HAL_GetTick>
 8002b22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b24:	e008      	b.n	8002b38 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b26:	f7fe ff31 	bl	800198c <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d901      	bls.n	8002b38 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e237      	b.n	8002fa8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b38:	4b53      	ldr	r3, [pc, #332]	; (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1f0      	bne.n	8002b26 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0308 	and.w	r3, r3, #8
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d03c      	beq.n	8002bca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d01c      	beq.n	8002b92 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b58:	4b4b      	ldr	r3, [pc, #300]	; (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002b5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b5e:	4a4a      	ldr	r2, [pc, #296]	; (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002b60:	f043 0301 	orr.w	r3, r3, #1
 8002b64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b68:	f7fe ff10 	bl	800198c <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b70:	f7fe ff0c 	bl	800198c <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e212      	b.n	8002fa8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b82:	4b41      	ldr	r3, [pc, #260]	; (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002b84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d0ef      	beq.n	8002b70 <HAL_RCC_OscConfig+0x3ec>
 8002b90:	e01b      	b.n	8002bca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b92:	4b3d      	ldr	r3, [pc, #244]	; (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002b94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b98:	4a3b      	ldr	r2, [pc, #236]	; (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002b9a:	f023 0301 	bic.w	r3, r3, #1
 8002b9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba2:	f7fe fef3 	bl	800198c <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ba8:	e008      	b.n	8002bbc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002baa:	f7fe feef 	bl	800198c <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e1f5      	b.n	8002fa8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bbc:	4b32      	ldr	r3, [pc, #200]	; (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1ef      	bne.n	8002baa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0304 	and.w	r3, r3, #4
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f000 80a6 	beq.w	8002d24 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002bdc:	4b2a      	ldr	r3, [pc, #168]	; (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10d      	bne.n	8002c04 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002be8:	4b27      	ldr	r3, [pc, #156]	; (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bec:	4a26      	ldr	r2, [pc, #152]	; (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002bee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bf2:	6593      	str	r3, [r2, #88]	; 0x58
 8002bf4:	4b24      	ldr	r3, [pc, #144]	; (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfc:	60bb      	str	r3, [r7, #8]
 8002bfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c00:	2301      	movs	r3, #1
 8002c02:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c04:	4b21      	ldr	r3, [pc, #132]	; (8002c8c <HAL_RCC_OscConfig+0x508>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d118      	bne.n	8002c42 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c10:	4b1e      	ldr	r3, [pc, #120]	; (8002c8c <HAL_RCC_OscConfig+0x508>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a1d      	ldr	r2, [pc, #116]	; (8002c8c <HAL_RCC_OscConfig+0x508>)
 8002c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c1c:	f7fe feb6 	bl	800198c <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c24:	f7fe feb2 	bl	800198c <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e1b8      	b.n	8002fa8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c36:	4b15      	ldr	r3, [pc, #84]	; (8002c8c <HAL_RCC_OscConfig+0x508>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d0f0      	beq.n	8002c24 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d108      	bne.n	8002c5c <HAL_RCC_OscConfig+0x4d8>
 8002c4a:	4b0f      	ldr	r3, [pc, #60]	; (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c50:	4a0d      	ldr	r2, [pc, #52]	; (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002c52:	f043 0301 	orr.w	r3, r3, #1
 8002c56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c5a:	e029      	b.n	8002cb0 <HAL_RCC_OscConfig+0x52c>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	2b05      	cmp	r3, #5
 8002c62:	d115      	bne.n	8002c90 <HAL_RCC_OscConfig+0x50c>
 8002c64:	4b08      	ldr	r3, [pc, #32]	; (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c6a:	4a07      	ldr	r2, [pc, #28]	; (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002c6c:	f043 0304 	orr.w	r3, r3, #4
 8002c70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c74:	4b04      	ldr	r3, [pc, #16]	; (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c7a:	4a03      	ldr	r2, [pc, #12]	; (8002c88 <HAL_RCC_OscConfig+0x504>)
 8002c7c:	f043 0301 	orr.w	r3, r3, #1
 8002c80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c84:	e014      	b.n	8002cb0 <HAL_RCC_OscConfig+0x52c>
 8002c86:	bf00      	nop
 8002c88:	40021000 	.word	0x40021000
 8002c8c:	40007000 	.word	0x40007000
 8002c90:	4b9d      	ldr	r3, [pc, #628]	; (8002f08 <HAL_RCC_OscConfig+0x784>)
 8002c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c96:	4a9c      	ldr	r2, [pc, #624]	; (8002f08 <HAL_RCC_OscConfig+0x784>)
 8002c98:	f023 0301 	bic.w	r3, r3, #1
 8002c9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ca0:	4b99      	ldr	r3, [pc, #612]	; (8002f08 <HAL_RCC_OscConfig+0x784>)
 8002ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca6:	4a98      	ldr	r2, [pc, #608]	; (8002f08 <HAL_RCC_OscConfig+0x784>)
 8002ca8:	f023 0304 	bic.w	r3, r3, #4
 8002cac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d016      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb8:	f7fe fe68 	bl	800198c <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cbe:	e00a      	b.n	8002cd6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cc0:	f7fe fe64 	bl	800198c <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e168      	b.n	8002fa8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cd6:	4b8c      	ldr	r3, [pc, #560]	; (8002f08 <HAL_RCC_OscConfig+0x784>)
 8002cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d0ed      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x53c>
 8002ce4:	e015      	b.n	8002d12 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce6:	f7fe fe51 	bl	800198c <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cec:	e00a      	b.n	8002d04 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cee:	f7fe fe4d 	bl	800198c <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e151      	b.n	8002fa8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d04:	4b80      	ldr	r3, [pc, #512]	; (8002f08 <HAL_RCC_OscConfig+0x784>)
 8002d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1ed      	bne.n	8002cee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d12:	7ffb      	ldrb	r3, [r7, #31]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d105      	bne.n	8002d24 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d18:	4b7b      	ldr	r3, [pc, #492]	; (8002f08 <HAL_RCC_OscConfig+0x784>)
 8002d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d1c:	4a7a      	ldr	r2, [pc, #488]	; (8002f08 <HAL_RCC_OscConfig+0x784>)
 8002d1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d22:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0320 	and.w	r3, r3, #32
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d03c      	beq.n	8002daa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d01c      	beq.n	8002d72 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d38:	4b73      	ldr	r3, [pc, #460]	; (8002f08 <HAL_RCC_OscConfig+0x784>)
 8002d3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d3e:	4a72      	ldr	r2, [pc, #456]	; (8002f08 <HAL_RCC_OscConfig+0x784>)
 8002d40:	f043 0301 	orr.w	r3, r3, #1
 8002d44:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d48:	f7fe fe20 	bl	800198c <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d50:	f7fe fe1c 	bl	800198c <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e122      	b.n	8002fa8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d62:	4b69      	ldr	r3, [pc, #420]	; (8002f08 <HAL_RCC_OscConfig+0x784>)
 8002d64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d0ef      	beq.n	8002d50 <HAL_RCC_OscConfig+0x5cc>
 8002d70:	e01b      	b.n	8002daa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d72:	4b65      	ldr	r3, [pc, #404]	; (8002f08 <HAL_RCC_OscConfig+0x784>)
 8002d74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d78:	4a63      	ldr	r2, [pc, #396]	; (8002f08 <HAL_RCC_OscConfig+0x784>)
 8002d7a:	f023 0301 	bic.w	r3, r3, #1
 8002d7e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d82:	f7fe fe03 	bl	800198c <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d88:	e008      	b.n	8002d9c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d8a:	f7fe fdff 	bl	800198c <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e105      	b.n	8002fa8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d9c:	4b5a      	ldr	r3, [pc, #360]	; (8002f08 <HAL_RCC_OscConfig+0x784>)
 8002d9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1ef      	bne.n	8002d8a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f000 80f9 	beq.w	8002fa6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	f040 80cf 	bne.w	8002f5c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002dbe:	4b52      	ldr	r3, [pc, #328]	; (8002f08 <HAL_RCC_OscConfig+0x784>)
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	f003 0203 	and.w	r2, r3, #3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d12c      	bne.n	8002e2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d123      	bne.n	8002e2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dee:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d11b      	bne.n	8002e2c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d113      	bne.n	8002e2c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e0e:	085b      	lsrs	r3, r3, #1
 8002e10:	3b01      	subs	r3, #1
 8002e12:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d109      	bne.n	8002e2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	085b      	lsrs	r3, r3, #1
 8002e24:	3b01      	subs	r3, #1
 8002e26:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d071      	beq.n	8002f10 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	2b0c      	cmp	r3, #12
 8002e30:	d068      	beq.n	8002f04 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002e32:	4b35      	ldr	r3, [pc, #212]	; (8002f08 <HAL_RCC_OscConfig+0x784>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d105      	bne.n	8002e4a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002e3e:	4b32      	ldr	r3, [pc, #200]	; (8002f08 <HAL_RCC_OscConfig+0x784>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e0ac      	b.n	8002fa8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e4e:	4b2e      	ldr	r3, [pc, #184]	; (8002f08 <HAL_RCC_OscConfig+0x784>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a2d      	ldr	r2, [pc, #180]	; (8002f08 <HAL_RCC_OscConfig+0x784>)
 8002e54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e58:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e5a:	f7fe fd97 	bl	800198c <HAL_GetTick>
 8002e5e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e60:	e008      	b.n	8002e74 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e62:	f7fe fd93 	bl	800198c <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e099      	b.n	8002fa8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e74:	4b24      	ldr	r3, [pc, #144]	; (8002f08 <HAL_RCC_OscConfig+0x784>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1f0      	bne.n	8002e62 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e80:	4b21      	ldr	r3, [pc, #132]	; (8002f08 <HAL_RCC_OscConfig+0x784>)
 8002e82:	68da      	ldr	r2, [r3, #12]
 8002e84:	4b21      	ldr	r3, [pc, #132]	; (8002f0c <HAL_RCC_OscConfig+0x788>)
 8002e86:	4013      	ands	r3, r2
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e90:	3a01      	subs	r2, #1
 8002e92:	0112      	lsls	r2, r2, #4
 8002e94:	4311      	orrs	r1, r2
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e9a:	0212      	lsls	r2, r2, #8
 8002e9c:	4311      	orrs	r1, r2
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ea2:	0852      	lsrs	r2, r2, #1
 8002ea4:	3a01      	subs	r2, #1
 8002ea6:	0552      	lsls	r2, r2, #21
 8002ea8:	4311      	orrs	r1, r2
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002eae:	0852      	lsrs	r2, r2, #1
 8002eb0:	3a01      	subs	r2, #1
 8002eb2:	0652      	lsls	r2, r2, #25
 8002eb4:	4311      	orrs	r1, r2
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002eba:	06d2      	lsls	r2, r2, #27
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	4912      	ldr	r1, [pc, #72]	; (8002f08 <HAL_RCC_OscConfig+0x784>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ec4:	4b10      	ldr	r3, [pc, #64]	; (8002f08 <HAL_RCC_OscConfig+0x784>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a0f      	ldr	r2, [pc, #60]	; (8002f08 <HAL_RCC_OscConfig+0x784>)
 8002eca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ece:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ed0:	4b0d      	ldr	r3, [pc, #52]	; (8002f08 <HAL_RCC_OscConfig+0x784>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	4a0c      	ldr	r2, [pc, #48]	; (8002f08 <HAL_RCC_OscConfig+0x784>)
 8002ed6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002eda:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002edc:	f7fe fd56 	bl	800198c <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ee4:	f7fe fd52 	bl	800198c <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e058      	b.n	8002fa8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ef6:	4b04      	ldr	r3, [pc, #16]	; (8002f08 <HAL_RCC_OscConfig+0x784>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d0f0      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f02:	e050      	b.n	8002fa6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e04f      	b.n	8002fa8 <HAL_RCC_OscConfig+0x824>
 8002f08:	40021000 	.word	0x40021000
 8002f0c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f10:	4b27      	ldr	r3, [pc, #156]	; (8002fb0 <HAL_RCC_OscConfig+0x82c>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d144      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002f1c:	4b24      	ldr	r3, [pc, #144]	; (8002fb0 <HAL_RCC_OscConfig+0x82c>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a23      	ldr	r2, [pc, #140]	; (8002fb0 <HAL_RCC_OscConfig+0x82c>)
 8002f22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f26:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f28:	4b21      	ldr	r3, [pc, #132]	; (8002fb0 <HAL_RCC_OscConfig+0x82c>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	4a20      	ldr	r2, [pc, #128]	; (8002fb0 <HAL_RCC_OscConfig+0x82c>)
 8002f2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f32:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f34:	f7fe fd2a 	bl	800198c <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f3c:	f7fe fd26 	bl	800198c <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e02c      	b.n	8002fa8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f4e:	4b18      	ldr	r3, [pc, #96]	; (8002fb0 <HAL_RCC_OscConfig+0x82c>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d0f0      	beq.n	8002f3c <HAL_RCC_OscConfig+0x7b8>
 8002f5a:	e024      	b.n	8002fa6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	2b0c      	cmp	r3, #12
 8002f60:	d01f      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f62:	4b13      	ldr	r3, [pc, #76]	; (8002fb0 <HAL_RCC_OscConfig+0x82c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a12      	ldr	r2, [pc, #72]	; (8002fb0 <HAL_RCC_OscConfig+0x82c>)
 8002f68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6e:	f7fe fd0d 	bl	800198c <HAL_GetTick>
 8002f72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f74:	e008      	b.n	8002f88 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f76:	f7fe fd09 	bl	800198c <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e00f      	b.n	8002fa8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f88:	4b09      	ldr	r3, [pc, #36]	; (8002fb0 <HAL_RCC_OscConfig+0x82c>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d1f0      	bne.n	8002f76 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002f94:	4b06      	ldr	r3, [pc, #24]	; (8002fb0 <HAL_RCC_OscConfig+0x82c>)
 8002f96:	68da      	ldr	r2, [r3, #12]
 8002f98:	4905      	ldr	r1, [pc, #20]	; (8002fb0 <HAL_RCC_OscConfig+0x82c>)
 8002f9a:	4b06      	ldr	r3, [pc, #24]	; (8002fb4 <HAL_RCC_OscConfig+0x830>)
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	60cb      	str	r3, [r1, #12]
 8002fa0:	e001      	b.n	8002fa6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e000      	b.n	8002fa8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3720      	adds	r7, #32
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	feeefffc 	.word	0xfeeefffc

08002fb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e11d      	b.n	800320c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fd0:	4b90      	ldr	r3, [pc, #576]	; (8003214 <HAL_RCC_ClockConfig+0x25c>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 030f 	and.w	r3, r3, #15
 8002fd8:	683a      	ldr	r2, [r7, #0]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d910      	bls.n	8003000 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fde:	4b8d      	ldr	r3, [pc, #564]	; (8003214 <HAL_RCC_ClockConfig+0x25c>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f023 020f 	bic.w	r2, r3, #15
 8002fe6:	498b      	ldr	r1, [pc, #556]	; (8003214 <HAL_RCC_ClockConfig+0x25c>)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fee:	4b89      	ldr	r3, [pc, #548]	; (8003214 <HAL_RCC_ClockConfig+0x25c>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 030f 	and.w	r3, r3, #15
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d001      	beq.n	8003000 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e105      	b.n	800320c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d010      	beq.n	800302e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	4b81      	ldr	r3, [pc, #516]	; (8003218 <HAL_RCC_ClockConfig+0x260>)
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003018:	429a      	cmp	r2, r3
 800301a:	d908      	bls.n	800302e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800301c:	4b7e      	ldr	r3, [pc, #504]	; (8003218 <HAL_RCC_ClockConfig+0x260>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	497b      	ldr	r1, [pc, #492]	; (8003218 <HAL_RCC_ClockConfig+0x260>)
 800302a:	4313      	orrs	r3, r2
 800302c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b00      	cmp	r3, #0
 8003038:	d079      	beq.n	800312e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2b03      	cmp	r3, #3
 8003040:	d11e      	bne.n	8003080 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003042:	4b75      	ldr	r3, [pc, #468]	; (8003218 <HAL_RCC_ClockConfig+0x260>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e0dc      	b.n	800320c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003052:	f000 fa07 	bl	8003464 <RCC_GetSysClockFreqFromPLLSource>
 8003056:	4603      	mov	r3, r0
 8003058:	4a70      	ldr	r2, [pc, #448]	; (800321c <HAL_RCC_ClockConfig+0x264>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d946      	bls.n	80030ec <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800305e:	4b6e      	ldr	r3, [pc, #440]	; (8003218 <HAL_RCC_ClockConfig+0x260>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d140      	bne.n	80030ec <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800306a:	4b6b      	ldr	r3, [pc, #428]	; (8003218 <HAL_RCC_ClockConfig+0x260>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003072:	4a69      	ldr	r2, [pc, #420]	; (8003218 <HAL_RCC_ClockConfig+0x260>)
 8003074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003078:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800307a:	2380      	movs	r3, #128	; 0x80
 800307c:	617b      	str	r3, [r7, #20]
 800307e:	e035      	b.n	80030ec <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	2b02      	cmp	r3, #2
 8003086:	d107      	bne.n	8003098 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003088:	4b63      	ldr	r3, [pc, #396]	; (8003218 <HAL_RCC_ClockConfig+0x260>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d115      	bne.n	80030c0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e0b9      	b.n	800320c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d107      	bne.n	80030b0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030a0:	4b5d      	ldr	r3, [pc, #372]	; (8003218 <HAL_RCC_ClockConfig+0x260>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d109      	bne.n	80030c0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e0ad      	b.n	800320c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030b0:	4b59      	ldr	r3, [pc, #356]	; (8003218 <HAL_RCC_ClockConfig+0x260>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d101      	bne.n	80030c0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e0a5      	b.n	800320c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80030c0:	f000 f8b4 	bl	800322c <HAL_RCC_GetSysClockFreq>
 80030c4:	4603      	mov	r3, r0
 80030c6:	4a55      	ldr	r2, [pc, #340]	; (800321c <HAL_RCC_ClockConfig+0x264>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d90f      	bls.n	80030ec <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80030cc:	4b52      	ldr	r3, [pc, #328]	; (8003218 <HAL_RCC_ClockConfig+0x260>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d109      	bne.n	80030ec <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80030d8:	4b4f      	ldr	r3, [pc, #316]	; (8003218 <HAL_RCC_ClockConfig+0x260>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030e0:	4a4d      	ldr	r2, [pc, #308]	; (8003218 <HAL_RCC_ClockConfig+0x260>)
 80030e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030e6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80030e8:	2380      	movs	r3, #128	; 0x80
 80030ea:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030ec:	4b4a      	ldr	r3, [pc, #296]	; (8003218 <HAL_RCC_ClockConfig+0x260>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f023 0203 	bic.w	r2, r3, #3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	4947      	ldr	r1, [pc, #284]	; (8003218 <HAL_RCC_ClockConfig+0x260>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030fe:	f7fe fc45 	bl	800198c <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003104:	e00a      	b.n	800311c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003106:	f7fe fc41 	bl	800198c <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	f241 3288 	movw	r2, #5000	; 0x1388
 8003114:	4293      	cmp	r3, r2
 8003116:	d901      	bls.n	800311c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e077      	b.n	800320c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800311c:	4b3e      	ldr	r3, [pc, #248]	; (8003218 <HAL_RCC_ClockConfig+0x260>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f003 020c 	and.w	r2, r3, #12
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	429a      	cmp	r2, r3
 800312c:	d1eb      	bne.n	8003106 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	2b80      	cmp	r3, #128	; 0x80
 8003132:	d105      	bne.n	8003140 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003134:	4b38      	ldr	r3, [pc, #224]	; (8003218 <HAL_RCC_ClockConfig+0x260>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	4a37      	ldr	r2, [pc, #220]	; (8003218 <HAL_RCC_ClockConfig+0x260>)
 800313a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800313e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d010      	beq.n	800316e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	4b31      	ldr	r3, [pc, #196]	; (8003218 <HAL_RCC_ClockConfig+0x260>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003158:	429a      	cmp	r2, r3
 800315a:	d208      	bcs.n	800316e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800315c:	4b2e      	ldr	r3, [pc, #184]	; (8003218 <HAL_RCC_ClockConfig+0x260>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	492b      	ldr	r1, [pc, #172]	; (8003218 <HAL_RCC_ClockConfig+0x260>)
 800316a:	4313      	orrs	r3, r2
 800316c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800316e:	4b29      	ldr	r3, [pc, #164]	; (8003214 <HAL_RCC_ClockConfig+0x25c>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 030f 	and.w	r3, r3, #15
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	429a      	cmp	r2, r3
 800317a:	d210      	bcs.n	800319e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800317c:	4b25      	ldr	r3, [pc, #148]	; (8003214 <HAL_RCC_ClockConfig+0x25c>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f023 020f 	bic.w	r2, r3, #15
 8003184:	4923      	ldr	r1, [pc, #140]	; (8003214 <HAL_RCC_ClockConfig+0x25c>)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	4313      	orrs	r3, r2
 800318a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800318c:	4b21      	ldr	r3, [pc, #132]	; (8003214 <HAL_RCC_ClockConfig+0x25c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 030f 	and.w	r3, r3, #15
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	429a      	cmp	r2, r3
 8003198:	d001      	beq.n	800319e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e036      	b.n	800320c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0304 	and.w	r3, r3, #4
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d008      	beq.n	80031bc <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031aa:	4b1b      	ldr	r3, [pc, #108]	; (8003218 <HAL_RCC_ClockConfig+0x260>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	4918      	ldr	r1, [pc, #96]	; (8003218 <HAL_RCC_ClockConfig+0x260>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0308 	and.w	r3, r3, #8
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d009      	beq.n	80031dc <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031c8:	4b13      	ldr	r3, [pc, #76]	; (8003218 <HAL_RCC_ClockConfig+0x260>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	4910      	ldr	r1, [pc, #64]	; (8003218 <HAL_RCC_ClockConfig+0x260>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031dc:	f000 f826 	bl	800322c <HAL_RCC_GetSysClockFreq>
 80031e0:	4602      	mov	r2, r0
 80031e2:	4b0d      	ldr	r3, [pc, #52]	; (8003218 <HAL_RCC_ClockConfig+0x260>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	091b      	lsrs	r3, r3, #4
 80031e8:	f003 030f 	and.w	r3, r3, #15
 80031ec:	490c      	ldr	r1, [pc, #48]	; (8003220 <HAL_RCC_ClockConfig+0x268>)
 80031ee:	5ccb      	ldrb	r3, [r1, r3]
 80031f0:	f003 031f 	and.w	r3, r3, #31
 80031f4:	fa22 f303 	lsr.w	r3, r2, r3
 80031f8:	4a0a      	ldr	r2, [pc, #40]	; (8003224 <HAL_RCC_ClockConfig+0x26c>)
 80031fa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80031fc:	4b0a      	ldr	r3, [pc, #40]	; (8003228 <HAL_RCC_ClockConfig+0x270>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4618      	mov	r0, r3
 8003202:	f7fe fb73 	bl	80018ec <HAL_InitTick>
 8003206:	4603      	mov	r3, r0
 8003208:	73fb      	strb	r3, [r7, #15]

  return status;
 800320a:	7bfb      	ldrb	r3, [r7, #15]
}
 800320c:	4618      	mov	r0, r3
 800320e:	3718      	adds	r7, #24
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	40022000 	.word	0x40022000
 8003218:	40021000 	.word	0x40021000
 800321c:	04c4b400 	.word	0x04c4b400
 8003220:	0800c0f8 	.word	0x0800c0f8
 8003224:	20000000 	.word	0x20000000
 8003228:	20000004 	.word	0x20000004

0800322c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800322c:	b480      	push	{r7}
 800322e:	b089      	sub	sp, #36	; 0x24
 8003230:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003232:	2300      	movs	r3, #0
 8003234:	61fb      	str	r3, [r7, #28]
 8003236:	2300      	movs	r3, #0
 8003238:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800323a:	4b3e      	ldr	r3, [pc, #248]	; (8003334 <HAL_RCC_GetSysClockFreq+0x108>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f003 030c 	and.w	r3, r3, #12
 8003242:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003244:	4b3b      	ldr	r3, [pc, #236]	; (8003334 <HAL_RCC_GetSysClockFreq+0x108>)
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	f003 0303 	and.w	r3, r3, #3
 800324c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d005      	beq.n	8003260 <HAL_RCC_GetSysClockFreq+0x34>
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	2b0c      	cmp	r3, #12
 8003258:	d121      	bne.n	800329e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d11e      	bne.n	800329e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003260:	4b34      	ldr	r3, [pc, #208]	; (8003334 <HAL_RCC_GetSysClockFreq+0x108>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0308 	and.w	r3, r3, #8
 8003268:	2b00      	cmp	r3, #0
 800326a:	d107      	bne.n	800327c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800326c:	4b31      	ldr	r3, [pc, #196]	; (8003334 <HAL_RCC_GetSysClockFreq+0x108>)
 800326e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003272:	0a1b      	lsrs	r3, r3, #8
 8003274:	f003 030f 	and.w	r3, r3, #15
 8003278:	61fb      	str	r3, [r7, #28]
 800327a:	e005      	b.n	8003288 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800327c:	4b2d      	ldr	r3, [pc, #180]	; (8003334 <HAL_RCC_GetSysClockFreq+0x108>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	091b      	lsrs	r3, r3, #4
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003288:	4a2b      	ldr	r2, [pc, #172]	; (8003338 <HAL_RCC_GetSysClockFreq+0x10c>)
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003290:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d10d      	bne.n	80032b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800329c:	e00a      	b.n	80032b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	2b04      	cmp	r3, #4
 80032a2:	d102      	bne.n	80032aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80032a4:	4b25      	ldr	r3, [pc, #148]	; (800333c <HAL_RCC_GetSysClockFreq+0x110>)
 80032a6:	61bb      	str	r3, [r7, #24]
 80032a8:	e004      	b.n	80032b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	d101      	bne.n	80032b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80032b0:	4b22      	ldr	r3, [pc, #136]	; (800333c <HAL_RCC_GetSysClockFreq+0x110>)
 80032b2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	2b0c      	cmp	r3, #12
 80032b8:	d134      	bne.n	8003324 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80032ba:	4b1e      	ldr	r3, [pc, #120]	; (8003334 <HAL_RCC_GetSysClockFreq+0x108>)
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	f003 0303 	and.w	r3, r3, #3
 80032c2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d003      	beq.n	80032d2 <HAL_RCC_GetSysClockFreq+0xa6>
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	2b03      	cmp	r3, #3
 80032ce:	d003      	beq.n	80032d8 <HAL_RCC_GetSysClockFreq+0xac>
 80032d0:	e005      	b.n	80032de <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80032d2:	4b1a      	ldr	r3, [pc, #104]	; (800333c <HAL_RCC_GetSysClockFreq+0x110>)
 80032d4:	617b      	str	r3, [r7, #20]
      break;
 80032d6:	e005      	b.n	80032e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80032d8:	4b18      	ldr	r3, [pc, #96]	; (800333c <HAL_RCC_GetSysClockFreq+0x110>)
 80032da:	617b      	str	r3, [r7, #20]
      break;
 80032dc:	e002      	b.n	80032e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	617b      	str	r3, [r7, #20]
      break;
 80032e2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032e4:	4b13      	ldr	r3, [pc, #76]	; (8003334 <HAL_RCC_GetSysClockFreq+0x108>)
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	091b      	lsrs	r3, r3, #4
 80032ea:	f003 030f 	and.w	r3, r3, #15
 80032ee:	3301      	adds	r3, #1
 80032f0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80032f2:	4b10      	ldr	r3, [pc, #64]	; (8003334 <HAL_RCC_GetSysClockFreq+0x108>)
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	0a1b      	lsrs	r3, r3, #8
 80032f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032fc:	697a      	ldr	r2, [r7, #20]
 80032fe:	fb03 f202 	mul.w	r2, r3, r2
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	fbb2 f3f3 	udiv	r3, r2, r3
 8003308:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800330a:	4b0a      	ldr	r3, [pc, #40]	; (8003334 <HAL_RCC_GetSysClockFreq+0x108>)
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	0e5b      	lsrs	r3, r3, #25
 8003310:	f003 0303 	and.w	r3, r3, #3
 8003314:	3301      	adds	r3, #1
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003322:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003324:	69bb      	ldr	r3, [r7, #24]
}
 8003326:	4618      	mov	r0, r3
 8003328:	3724      	adds	r7, #36	; 0x24
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	40021000 	.word	0x40021000
 8003338:	0800c110 	.word	0x0800c110
 800333c:	00f42400 	.word	0x00f42400

08003340 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003344:	4b03      	ldr	r3, [pc, #12]	; (8003354 <HAL_RCC_GetHCLKFreq+0x14>)
 8003346:	681b      	ldr	r3, [r3, #0]
}
 8003348:	4618      	mov	r0, r3
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	20000000 	.word	0x20000000

08003358 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800335c:	f7ff fff0 	bl	8003340 <HAL_RCC_GetHCLKFreq>
 8003360:	4602      	mov	r2, r0
 8003362:	4b06      	ldr	r3, [pc, #24]	; (800337c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	0a1b      	lsrs	r3, r3, #8
 8003368:	f003 0307 	and.w	r3, r3, #7
 800336c:	4904      	ldr	r1, [pc, #16]	; (8003380 <HAL_RCC_GetPCLK1Freq+0x28>)
 800336e:	5ccb      	ldrb	r3, [r1, r3]
 8003370:	f003 031f 	and.w	r3, r3, #31
 8003374:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003378:	4618      	mov	r0, r3
 800337a:	bd80      	pop	{r7, pc}
 800337c:	40021000 	.word	0x40021000
 8003380:	0800c108 	.word	0x0800c108

08003384 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003388:	f7ff ffda 	bl	8003340 <HAL_RCC_GetHCLKFreq>
 800338c:	4602      	mov	r2, r0
 800338e:	4b06      	ldr	r3, [pc, #24]	; (80033a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	0adb      	lsrs	r3, r3, #11
 8003394:	f003 0307 	and.w	r3, r3, #7
 8003398:	4904      	ldr	r1, [pc, #16]	; (80033ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800339a:	5ccb      	ldrb	r3, [r1, r3]
 800339c:	f003 031f 	and.w	r3, r3, #31
 80033a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	40021000 	.word	0x40021000
 80033ac:	0800c108 	.word	0x0800c108

080033b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80033b8:	2300      	movs	r3, #0
 80033ba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80033bc:	4b27      	ldr	r3, [pc, #156]	; (800345c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80033be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d003      	beq.n	80033d0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80033c8:	f7ff f8f8 	bl	80025bc <HAL_PWREx_GetVoltageRange>
 80033cc:	6178      	str	r0, [r7, #20]
 80033ce:	e014      	b.n	80033fa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80033d0:	4b22      	ldr	r3, [pc, #136]	; (800345c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80033d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d4:	4a21      	ldr	r2, [pc, #132]	; (800345c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80033d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033da:	6593      	str	r3, [r2, #88]	; 0x58
 80033dc:	4b1f      	ldr	r3, [pc, #124]	; (800345c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80033de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e4:	60fb      	str	r3, [r7, #12]
 80033e6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80033e8:	f7ff f8e8 	bl	80025bc <HAL_PWREx_GetVoltageRange>
 80033ec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80033ee:	4b1b      	ldr	r3, [pc, #108]	; (800345c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80033f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f2:	4a1a      	ldr	r2, [pc, #104]	; (800345c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80033f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033f8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003400:	d10b      	bne.n	800341a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2b80      	cmp	r3, #128	; 0x80
 8003406:	d913      	bls.n	8003430 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2ba0      	cmp	r3, #160	; 0xa0
 800340c:	d902      	bls.n	8003414 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800340e:	2302      	movs	r3, #2
 8003410:	613b      	str	r3, [r7, #16]
 8003412:	e00d      	b.n	8003430 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003414:	2301      	movs	r3, #1
 8003416:	613b      	str	r3, [r7, #16]
 8003418:	e00a      	b.n	8003430 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2b7f      	cmp	r3, #127	; 0x7f
 800341e:	d902      	bls.n	8003426 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003420:	2302      	movs	r3, #2
 8003422:	613b      	str	r3, [r7, #16]
 8003424:	e004      	b.n	8003430 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2b70      	cmp	r3, #112	; 0x70
 800342a:	d101      	bne.n	8003430 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800342c:	2301      	movs	r3, #1
 800342e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003430:	4b0b      	ldr	r3, [pc, #44]	; (8003460 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f023 020f 	bic.w	r2, r3, #15
 8003438:	4909      	ldr	r1, [pc, #36]	; (8003460 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	4313      	orrs	r3, r2
 800343e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003440:	4b07      	ldr	r3, [pc, #28]	; (8003460 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 030f 	and.w	r3, r3, #15
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	429a      	cmp	r2, r3
 800344c:	d001      	beq.n	8003452 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e000      	b.n	8003454 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3718      	adds	r7, #24
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	40021000 	.word	0x40021000
 8003460:	40022000 	.word	0x40022000

08003464 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003464:	b480      	push	{r7}
 8003466:	b087      	sub	sp, #28
 8003468:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800346a:	4b2d      	ldr	r3, [pc, #180]	; (8003520 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	f003 0303 	and.w	r3, r3, #3
 8003472:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2b03      	cmp	r3, #3
 8003478:	d00b      	beq.n	8003492 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2b03      	cmp	r3, #3
 800347e:	d825      	bhi.n	80034cc <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d008      	beq.n	8003498 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2b02      	cmp	r3, #2
 800348a:	d11f      	bne.n	80034cc <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800348c:	4b25      	ldr	r3, [pc, #148]	; (8003524 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800348e:	613b      	str	r3, [r7, #16]
    break;
 8003490:	e01f      	b.n	80034d2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003492:	4b24      	ldr	r3, [pc, #144]	; (8003524 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003494:	613b      	str	r3, [r7, #16]
    break;
 8003496:	e01c      	b.n	80034d2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003498:	4b21      	ldr	r3, [pc, #132]	; (8003520 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0308 	and.w	r3, r3, #8
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d107      	bne.n	80034b4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80034a4:	4b1e      	ldr	r3, [pc, #120]	; (8003520 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80034a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034aa:	0a1b      	lsrs	r3, r3, #8
 80034ac:	f003 030f 	and.w	r3, r3, #15
 80034b0:	617b      	str	r3, [r7, #20]
 80034b2:	e005      	b.n	80034c0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80034b4:	4b1a      	ldr	r3, [pc, #104]	; (8003520 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	091b      	lsrs	r3, r3, #4
 80034ba:	f003 030f 	and.w	r3, r3, #15
 80034be:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80034c0:	4a19      	ldr	r2, [pc, #100]	; (8003528 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034c8:	613b      	str	r3, [r7, #16]
    break;
 80034ca:	e002      	b.n	80034d2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80034cc:	2300      	movs	r3, #0
 80034ce:	613b      	str	r3, [r7, #16]
    break;
 80034d0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034d2:	4b13      	ldr	r3, [pc, #76]	; (8003520 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	091b      	lsrs	r3, r3, #4
 80034d8:	f003 030f 	and.w	r3, r3, #15
 80034dc:	3301      	adds	r3, #1
 80034de:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80034e0:	4b0f      	ldr	r3, [pc, #60]	; (8003520 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	0a1b      	lsrs	r3, r3, #8
 80034e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	fb03 f202 	mul.w	r2, r3, r2
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034f8:	4b09      	ldr	r3, [pc, #36]	; (8003520 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	0e5b      	lsrs	r3, r3, #25
 80034fe:	f003 0303 	and.w	r3, r3, #3
 8003502:	3301      	adds	r3, #1
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003510:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003512:	683b      	ldr	r3, [r7, #0]
}
 8003514:	4618      	mov	r0, r3
 8003516:	371c      	adds	r7, #28
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr
 8003520:	40021000 	.word	0x40021000
 8003524:	00f42400 	.word	0x00f42400
 8003528:	0800c110 	.word	0x0800c110

0800352c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003534:	2300      	movs	r3, #0
 8003536:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003538:	2300      	movs	r3, #0
 800353a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003544:	2b00      	cmp	r3, #0
 8003546:	d040      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800354c:	2b80      	cmp	r3, #128	; 0x80
 800354e:	d02a      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003550:	2b80      	cmp	r3, #128	; 0x80
 8003552:	d825      	bhi.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003554:	2b60      	cmp	r3, #96	; 0x60
 8003556:	d026      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003558:	2b60      	cmp	r3, #96	; 0x60
 800355a:	d821      	bhi.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800355c:	2b40      	cmp	r3, #64	; 0x40
 800355e:	d006      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003560:	2b40      	cmp	r3, #64	; 0x40
 8003562:	d81d      	bhi.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003564:	2b00      	cmp	r3, #0
 8003566:	d009      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003568:	2b20      	cmp	r3, #32
 800356a:	d010      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800356c:	e018      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800356e:	4b89      	ldr	r3, [pc, #548]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	4a88      	ldr	r2, [pc, #544]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003578:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800357a:	e015      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	3304      	adds	r3, #4
 8003580:	2100      	movs	r1, #0
 8003582:	4618      	mov	r0, r3
 8003584:	f001 fa82 	bl	8004a8c <RCCEx_PLLSAI1_Config>
 8003588:	4603      	mov	r3, r0
 800358a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800358c:	e00c      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	3320      	adds	r3, #32
 8003592:	2100      	movs	r1, #0
 8003594:	4618      	mov	r0, r3
 8003596:	f001 fb6d 	bl	8004c74 <RCCEx_PLLSAI2_Config>
 800359a:	4603      	mov	r3, r0
 800359c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800359e:	e003      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	74fb      	strb	r3, [r7, #19]
      break;
 80035a4:	e000      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80035a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035a8:	7cfb      	ldrb	r3, [r7, #19]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10b      	bne.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035ae:	4b79      	ldr	r3, [pc, #484]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80035b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035b4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035bc:	4975      	ldr	r1, [pc, #468]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80035c4:	e001      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c6:	7cfb      	ldrb	r3, [r7, #19]
 80035c8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d047      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035de:	d030      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80035e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035e4:	d82a      	bhi.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80035e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035ea:	d02a      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80035ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035f0:	d824      	bhi.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80035f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035f6:	d008      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0xde>
 80035f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035fc:	d81e      	bhi.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00a      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003602:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003606:	d010      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003608:	e018      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800360a:	4b62      	ldr	r3, [pc, #392]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	4a61      	ldr	r2, [pc, #388]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003614:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003616:	e015      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3304      	adds	r3, #4
 800361c:	2100      	movs	r1, #0
 800361e:	4618      	mov	r0, r3
 8003620:	f001 fa34 	bl	8004a8c <RCCEx_PLLSAI1_Config>
 8003624:	4603      	mov	r3, r0
 8003626:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003628:	e00c      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	3320      	adds	r3, #32
 800362e:	2100      	movs	r1, #0
 8003630:	4618      	mov	r0, r3
 8003632:	f001 fb1f 	bl	8004c74 <RCCEx_PLLSAI2_Config>
 8003636:	4603      	mov	r3, r0
 8003638:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800363a:	e003      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	74fb      	strb	r3, [r7, #19]
      break;
 8003640:	e000      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003642:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003644:	7cfb      	ldrb	r3, [r7, #19]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d10b      	bne.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800364a:	4b52      	ldr	r3, [pc, #328]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800364c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003650:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003658:	494e      	ldr	r1, [pc, #312]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800365a:	4313      	orrs	r3, r2
 800365c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003660:	e001      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003662:	7cfb      	ldrb	r3, [r7, #19]
 8003664:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 809f 	beq.w	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003674:	2300      	movs	r3, #0
 8003676:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003678:	4b46      	ldr	r3, [pc, #280]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800367a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d101      	bne.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003684:	2301      	movs	r3, #1
 8003686:	e000      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003688:	2300      	movs	r3, #0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00d      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800368e:	4b41      	ldr	r3, [pc, #260]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003692:	4a40      	ldr	r2, [pc, #256]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003698:	6593      	str	r3, [r2, #88]	; 0x58
 800369a:	4b3e      	ldr	r3, [pc, #248]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800369c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800369e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a2:	60bb      	str	r3, [r7, #8]
 80036a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036a6:	2301      	movs	r3, #1
 80036a8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036aa:	4b3b      	ldr	r3, [pc, #236]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a3a      	ldr	r2, [pc, #232]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80036b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036b6:	f7fe f969 	bl	800198c <HAL_GetTick>
 80036ba:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036bc:	e009      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036be:	f7fe f965 	bl	800198c <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d902      	bls.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	74fb      	strb	r3, [r7, #19]
        break;
 80036d0:	e005      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036d2:	4b31      	ldr	r3, [pc, #196]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d0ef      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80036de:	7cfb      	ldrb	r3, [r7, #19]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d15b      	bne.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80036e4:	4b2b      	ldr	r3, [pc, #172]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80036e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ee:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d01f      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d019      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003702:	4b24      	ldr	r3, [pc, #144]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003708:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800370c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800370e:	4b21      	ldr	r3, [pc, #132]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003714:	4a1f      	ldr	r2, [pc, #124]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003716:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800371a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800371e:	4b1d      	ldr	r3, [pc, #116]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003724:	4a1b      	ldr	r2, [pc, #108]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003726:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800372a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800372e:	4a19      	ldr	r2, [pc, #100]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	2b00      	cmp	r3, #0
 800373e:	d016      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003740:	f7fe f924 	bl	800198c <HAL_GetTick>
 8003744:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003746:	e00b      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003748:	f7fe f920 	bl	800198c <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	f241 3288 	movw	r2, #5000	; 0x1388
 8003756:	4293      	cmp	r3, r2
 8003758:	d902      	bls.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	74fb      	strb	r3, [r7, #19]
            break;
 800375e:	e006      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003760:	4b0c      	ldr	r3, [pc, #48]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d0ec      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800376e:	7cfb      	ldrb	r3, [r7, #19]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d10c      	bne.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003774:	4b07      	ldr	r3, [pc, #28]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800377a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003784:	4903      	ldr	r1, [pc, #12]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003786:	4313      	orrs	r3, r2
 8003788:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800378c:	e008      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800378e:	7cfb      	ldrb	r3, [r7, #19]
 8003790:	74bb      	strb	r3, [r7, #18]
 8003792:	e005      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003794:	40021000 	.word	0x40021000
 8003798:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800379c:	7cfb      	ldrb	r3, [r7, #19]
 800379e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037a0:	7c7b      	ldrb	r3, [r7, #17]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d105      	bne.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037a6:	4ba0      	ldr	r3, [pc, #640]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037aa:	4a9f      	ldr	r2, [pc, #636]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00a      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037be:	4b9a      	ldr	r3, [pc, #616]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c4:	f023 0203 	bic.w	r2, r3, #3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037cc:	4996      	ldr	r1, [pc, #600]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00a      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037e0:	4b91      	ldr	r3, [pc, #580]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e6:	f023 020c 	bic.w	r2, r3, #12
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	498e      	ldr	r1, [pc, #568]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0304 	and.w	r3, r3, #4
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00a      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003802:	4b89      	ldr	r3, [pc, #548]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003808:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003810:	4985      	ldr	r1, [pc, #532]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003812:	4313      	orrs	r3, r2
 8003814:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0308 	and.w	r3, r3, #8
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00a      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003824:	4b80      	ldr	r3, [pc, #512]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800382a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003832:	497d      	ldr	r1, [pc, #500]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003834:	4313      	orrs	r3, r2
 8003836:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0310 	and.w	r3, r3, #16
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00a      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003846:	4b78      	ldr	r3, [pc, #480]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003854:	4974      	ldr	r1, [pc, #464]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003856:	4313      	orrs	r3, r2
 8003858:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0320 	and.w	r3, r3, #32
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00a      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003868:	4b6f      	ldr	r3, [pc, #444]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800386a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003876:	496c      	ldr	r1, [pc, #432]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003878:	4313      	orrs	r3, r2
 800387a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00a      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800388a:	4b67      	ldr	r3, [pc, #412]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800388c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003890:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003898:	4963      	ldr	r1, [pc, #396]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800389a:	4313      	orrs	r3, r2
 800389c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00a      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80038ac:	4b5e      	ldr	r3, [pc, #376]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038ba:	495b      	ldr	r1, [pc, #364]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00a      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038ce:	4b56      	ldr	r3, [pc, #344]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038dc:	4952      	ldr	r1, [pc, #328]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00a      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038f0:	4b4d      	ldr	r3, [pc, #308]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038fe:	494a      	ldr	r1, [pc, #296]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003900:	4313      	orrs	r3, r2
 8003902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00a      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003912:	4b45      	ldr	r3, [pc, #276]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003918:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003920:	4941      	ldr	r1, [pc, #260]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003922:	4313      	orrs	r3, r2
 8003924:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00a      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003934:	4b3c      	ldr	r3, [pc, #240]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003936:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800393a:	f023 0203 	bic.w	r2, r3, #3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003942:	4939      	ldr	r1, [pc, #228]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003944:	4313      	orrs	r3, r2
 8003946:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d028      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003956:	4b34      	ldr	r3, [pc, #208]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800395c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003964:	4930      	ldr	r1, [pc, #192]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003966:	4313      	orrs	r3, r2
 8003968:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003970:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003974:	d106      	bne.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003976:	4b2c      	ldr	r3, [pc, #176]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	4a2b      	ldr	r2, [pc, #172]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800397c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003980:	60d3      	str	r3, [r2, #12]
 8003982:	e011      	b.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003988:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800398c:	d10c      	bne.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	3304      	adds	r3, #4
 8003992:	2101      	movs	r1, #1
 8003994:	4618      	mov	r0, r3
 8003996:	f001 f879 	bl	8004a8c <RCCEx_PLLSAI1_Config>
 800399a:	4603      	mov	r3, r0
 800399c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800399e:	7cfb      	ldrb	r3, [r7, #19]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80039a4:	7cfb      	ldrb	r3, [r7, #19]
 80039a6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d04d      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039bc:	d108      	bne.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80039be:	4b1a      	ldr	r3, [pc, #104]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039c4:	4a18      	ldr	r2, [pc, #96]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039ca:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80039ce:	e012      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80039d0:	4b15      	ldr	r3, [pc, #84]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039d6:	4a14      	ldr	r2, [pc, #80]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039dc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80039e0:	4b11      	ldr	r3, [pc, #68]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039ee:	490e      	ldr	r1, [pc, #56]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039fe:	d106      	bne.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a00:	4b09      	ldr	r3, [pc, #36]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	4a08      	ldr	r2, [pc, #32]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a0a:	60d3      	str	r3, [r2, #12]
 8003a0c:	e020      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a16:	d109      	bne.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a18:	4b03      	ldr	r3, [pc, #12]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	4a02      	ldr	r2, [pc, #8]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a22:	60d3      	str	r3, [r2, #12]
 8003a24:	e014      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003a26:	bf00      	nop
 8003a28:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a34:	d10c      	bne.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	3304      	adds	r3, #4
 8003a3a:	2101      	movs	r1, #1
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f001 f825 	bl	8004a8c <RCCEx_PLLSAI1_Config>
 8003a42:	4603      	mov	r3, r0
 8003a44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a46:	7cfb      	ldrb	r3, [r7, #19]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d001      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003a4c:	7cfb      	ldrb	r3, [r7, #19]
 8003a4e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d028      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a5c:	4b7a      	ldr	r3, [pc, #488]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a6a:	4977      	ldr	r1, [pc, #476]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a7a:	d106      	bne.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a7c:	4b72      	ldr	r3, [pc, #456]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	4a71      	ldr	r2, [pc, #452]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003a82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a86:	60d3      	str	r3, [r2, #12]
 8003a88:	e011      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a8e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a92:	d10c      	bne.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	3304      	adds	r3, #4
 8003a98:	2101      	movs	r1, #1
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 fff6 	bl	8004a8c <RCCEx_PLLSAI1_Config>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003aa4:	7cfb      	ldrb	r3, [r7, #19]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003aaa:	7cfb      	ldrb	r3, [r7, #19]
 8003aac:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d01e      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003aba:	4b63      	ldr	r3, [pc, #396]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003aca:	495f      	ldr	r1, [pc, #380]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ad8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003adc:	d10c      	bne.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	3304      	adds	r3, #4
 8003ae2:	2102      	movs	r1, #2
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 ffd1 	bl	8004a8c <RCCEx_PLLSAI1_Config>
 8003aea:	4603      	mov	r3, r0
 8003aec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003aee:	7cfb      	ldrb	r3, [r7, #19]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d001      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003af4:	7cfb      	ldrb	r3, [r7, #19]
 8003af6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00b      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b04:	4b50      	ldr	r3, [pc, #320]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003b06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b0a:	f023 0204 	bic.w	r2, r3, #4
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b14:	494c      	ldr	r1, [pc, #304]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00b      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003b28:	4b47      	ldr	r3, [pc, #284]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003b2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b2e:	f023 0218 	bic.w	r2, r3, #24
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b38:	4943      	ldr	r1, [pc, #268]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d035      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003b4c:	4b3e      	ldr	r3, [pc, #248]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a3d      	ldr	r2, [pc, #244]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003b52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b58:	f7fd ff18 	bl	800198c <HAL_GetTick>
 8003b5c:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b5e:	e009      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b60:	f7fd ff14 	bl	800198c <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d902      	bls.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	74fb      	strb	r3, [r7, #19]
        break;
 8003b72:	e005      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b74:	4b34      	ldr	r3, [pc, #208]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1ef      	bne.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8003b80:	7cfb      	ldrb	r3, [r7, #19]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d113      	bne.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8003b86:	4b30      	ldr	r3, [pc, #192]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003b88:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b96:	492c      	ldr	r1, [pc, #176]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	3320      	adds	r3, #32
 8003ba2:	2102      	movs	r1, #2
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f001 f865 	bl	8004c74 <RCCEx_PLLSAI2_Config>
 8003baa:	4603      	mov	r3, r0
 8003bac:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8003bae:	7cfb      	ldrb	r3, [r7, #19]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d001      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8003bb4:	7cfb      	ldrb	r3, [r7, #19]
 8003bb6:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d01e      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8003bc4:	4b20      	ldr	r3, [pc, #128]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003bc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003bca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd4:	491c      	ldr	r1, [pc, #112]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003be6:	d10c      	bne.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	3320      	adds	r3, #32
 8003bec:	2101      	movs	r1, #1
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f001 f840 	bl	8004c74 <RCCEx_PLLSAI2_Config>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bf8:	7cfb      	ldrb	r3, [r7, #19]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 8003bfe:	7cfb      	ldrb	r3, [r7, #19]
 8003c00:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d017      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003c0e:	4b0e      	ldr	r3, [pc, #56]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003c10:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c1e:	490a      	ldr	r1, [pc, #40]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c30:	d105      	bne.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c32:	4b05      	ldr	r3, [pc, #20]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	4a04      	ldr	r2, [pc, #16]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003c38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c3c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003c3e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3718      	adds	r7, #24
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	40021000 	.word	0x40021000

08003c4c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b088      	sub	sp, #32
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8003c54:	2300      	movs	r3, #0
 8003c56:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c5e:	d13e      	bne.n	8003cde <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003c60:	4bb6      	ldr	r3, [pc, #728]	; (8003f3c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c6a:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c72:	d028      	beq.n	8003cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c7a:	f200 86f2 	bhi.w	8004a62 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c84:	d005      	beq.n	8003c92 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c8c:	d00e      	beq.n	8003cac <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8003c8e:	f000 bee8 	b.w	8004a62 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003c92:	4baa      	ldr	r3, [pc, #680]	; (8003f3c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	f040 86e2 	bne.w	8004a66 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
        frequency = LSE_VALUE;
 8003ca2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ca6:	61fb      	str	r3, [r7, #28]
      break;
 8003ca8:	f000 bedd 	b.w	8004a66 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003cac:	4ba3      	ldr	r3, [pc, #652]	; (8003f3c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	f040 86d7 	bne.w	8004a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = LSI_VALUE;
 8003cbc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8003cc0:	61fb      	str	r3, [r7, #28]
      break;
 8003cc2:	f000 bed2 	b.w	8004a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003cc6:	4b9d      	ldr	r3, [pc, #628]	; (8003f3c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cd2:	f040 86cc 	bne.w	8004a6e <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
        frequency = HSE_VALUE / 32U;
 8003cd6:	4b9a      	ldr	r3, [pc, #616]	; (8003f40 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003cd8:	61fb      	str	r3, [r7, #28]
      break;
 8003cda:	f000 bec8 	b.w	8004a6e <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cde:	4b97      	ldr	r3, [pc, #604]	; (8003f3c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	f003 0303 	and.w	r3, r3, #3
 8003ce6:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	2b03      	cmp	r3, #3
 8003cec:	d036      	beq.n	8003d5c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	2b03      	cmp	r3, #3
 8003cf2:	d840      	bhi.n	8003d76 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d003      	beq.n	8003d02 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d020      	beq.n	8003d42 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8003d00:	e039      	b.n	8003d76 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003d02:	4b8e      	ldr	r3, [pc, #568]	; (8003f3c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d116      	bne.n	8003d3c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003d0e:	4b8b      	ldr	r3, [pc, #556]	; (8003f3c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0308 	and.w	r3, r3, #8
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d005      	beq.n	8003d26 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8003d1a:	4b88      	ldr	r3, [pc, #544]	; (8003f3c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	091b      	lsrs	r3, r3, #4
 8003d20:	f003 030f 	and.w	r3, r3, #15
 8003d24:	e005      	b.n	8003d32 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8003d26:	4b85      	ldr	r3, [pc, #532]	; (8003f3c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003d28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d2c:	0a1b      	lsrs	r3, r3, #8
 8003d2e:	f003 030f 	and.w	r3, r3, #15
 8003d32:	4a84      	ldr	r2, [pc, #528]	; (8003f44 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d38:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003d3a:	e01f      	b.n	8003d7c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	61bb      	str	r3, [r7, #24]
      break;
 8003d40:	e01c      	b.n	8003d7c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003d42:	4b7e      	ldr	r3, [pc, #504]	; (8003f3c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d4e:	d102      	bne.n	8003d56 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8003d50:	4b7d      	ldr	r3, [pc, #500]	; (8003f48 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003d52:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003d54:	e012      	b.n	8003d7c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003d56:	2300      	movs	r3, #0
 8003d58:	61bb      	str	r3, [r7, #24]
      break;
 8003d5a:	e00f      	b.n	8003d7c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003d5c:	4b77      	ldr	r3, [pc, #476]	; (8003f3c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d68:	d102      	bne.n	8003d70 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8003d6a:	4b77      	ldr	r3, [pc, #476]	; (8003f48 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003d6c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003d6e:	e005      	b.n	8003d7c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003d70:	2300      	movs	r3, #0
 8003d72:	61bb      	str	r3, [r7, #24]
      break;
 8003d74:	e002      	b.n	8003d7c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8003d76:	2300      	movs	r3, #0
 8003d78:	61bb      	str	r3, [r7, #24]
      break;
 8003d7a:	bf00      	nop
    }

    switch(PeriphClk)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d82:	f000 8604 	beq.w	800498e <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d8c:	f200 8671 	bhi.w	8004a72 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d96:	f000 8467 	beq.w	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003da0:	f200 8667 	bhi.w	8004a72 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003daa:	f000 852f 	beq.w	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003db4:	f200 865d 	bhi.w	8004a72 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003dbe:	f000 8185 	beq.w	80040cc <HAL_RCCEx_GetPeriphCLKFreq+0x480>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003dc8:	f200 8653 	bhi.w	8004a72 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003dd2:	f000 80cb 	beq.w	8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ddc:	f200 8649 	bhi.w	8004a72 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003de6:	f000 842e 	beq.w	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003df0:	f200 863f 	bhi.w	8004a72 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dfa:	f000 83e2 	beq.w	80045c2 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e04:	f200 8635 	bhi.w	8004a72 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e0e:	f000 80ad 	beq.w	8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e18:	f200 862b 	bhi.w	8004a72 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e22:	f000 809b 	beq.w	8003f5c <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e2c:	f200 8621 	bhi.w	8004a72 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e36:	f000 8089 	beq.w	8003f4c <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e40:	f200 8617 	bhi.w	8004a72 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e4a:	f000 8552 	beq.w	80048f2 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e54:	f200 860d 	bhi.w	8004a72 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e5e:	f000 84fe 	beq.w	800485e <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e68:	f200 8603 	bhi.w	8004a72 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e72:	f000 849f 	beq.w	80047b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e7c:	f200 85f9 	bhi.w	8004a72 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2b80      	cmp	r3, #128	; 0x80
 8003e84:	f000 846a 	beq.w	800475c <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b80      	cmp	r3, #128	; 0x80
 8003e8c:	f200 85f1 	bhi.w	8004a72 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2b20      	cmp	r3, #32
 8003e94:	d84c      	bhi.n	8003f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f000 85ea 	beq.w	8004a72 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	2b1f      	cmp	r3, #31
 8003ea4:	f200 85e5 	bhi.w	8004a72 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003ea8:	a201      	add	r2, pc, #4	; (adr r2, 8003eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8003eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eae:	bf00      	nop
 8003eb0:	080042c1 	.word	0x080042c1
 8003eb4:	0800432f 	.word	0x0800432f
 8003eb8:	08004a73 	.word	0x08004a73
 8003ebc:	080043c3 	.word	0x080043c3
 8003ec0:	08004a73 	.word	0x08004a73
 8003ec4:	08004a73 	.word	0x08004a73
 8003ec8:	08004a73 	.word	0x08004a73
 8003ecc:	0800443b 	.word	0x0800443b
 8003ed0:	08004a73 	.word	0x08004a73
 8003ed4:	08004a73 	.word	0x08004a73
 8003ed8:	08004a73 	.word	0x08004a73
 8003edc:	08004a73 	.word	0x08004a73
 8003ee0:	08004a73 	.word	0x08004a73
 8003ee4:	08004a73 	.word	0x08004a73
 8003ee8:	08004a73 	.word	0x08004a73
 8003eec:	080044bf 	.word	0x080044bf
 8003ef0:	08004a73 	.word	0x08004a73
 8003ef4:	08004a73 	.word	0x08004a73
 8003ef8:	08004a73 	.word	0x08004a73
 8003efc:	08004a73 	.word	0x08004a73
 8003f00:	08004a73 	.word	0x08004a73
 8003f04:	08004a73 	.word	0x08004a73
 8003f08:	08004a73 	.word	0x08004a73
 8003f0c:	08004a73 	.word	0x08004a73
 8003f10:	08004a73 	.word	0x08004a73
 8003f14:	08004a73 	.word	0x08004a73
 8003f18:	08004a73 	.word	0x08004a73
 8003f1c:	08004a73 	.word	0x08004a73
 8003f20:	08004a73 	.word	0x08004a73
 8003f24:	08004a73 	.word	0x08004a73
 8003f28:	08004a73 	.word	0x08004a73
 8003f2c:	08004541 	.word	0x08004541
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b40      	cmp	r3, #64	; 0x40
 8003f34:	f000 83e6 	beq.w	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8003f38:	f000 bd9b 	b.w	8004a72 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003f3c:	40021000 	.word	0x40021000
 8003f40:	0007a120 	.word	0x0007a120
 8003f44:	0800c110 	.word	0x0800c110
 8003f48:	00f42400 	.word	0x00f42400
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8003f4c:	69b9      	ldr	r1, [r7, #24]
 8003f4e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003f52:	f000 ff83 	bl	8004e5c <RCCEx_GetSAIxPeriphCLKFreq>
 8003f56:	61f8      	str	r0, [r7, #28]
      break;
 8003f58:	f000 bd8e 	b.w	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8003f5c:	69b9      	ldr	r1, [r7, #24]
 8003f5e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003f62:	f000 ff7b 	bl	8004e5c <RCCEx_GetSAIxPeriphCLKFreq>
 8003f66:	61f8      	str	r0, [r7, #28]
      break;
 8003f68:	f000 bd86 	b.w	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8003f6c:	4b9a      	ldr	r3, [pc, #616]	; (80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f72:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8003f76:	60fb      	str	r3, [r7, #12]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003f7e:	d015      	beq.n	8003fac <HAL_RCCEx_GetPeriphCLKFreq+0x360>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003f86:	f200 8092 	bhi.w	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f90:	d029      	beq.n	8003fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f98:	f200 8089 	bhi.w	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d07b      	beq.n	800409a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fa8:	d04a      	beq.n	8004040 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
          break;
 8003faa:	e080      	b.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x462>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003fac:	4b8a      	ldr	r3, [pc, #552]	; (80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d17d      	bne.n	80040b4 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003fb8:	4b87      	ldr	r3, [pc, #540]	; (80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0308 	and.w	r3, r3, #8
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d005      	beq.n	8003fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
 8003fc4:	4b84      	ldr	r3, [pc, #528]	; (80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	091b      	lsrs	r3, r3, #4
 8003fca:	f003 030f 	and.w	r3, r3, #15
 8003fce:	e005      	b.n	8003fdc <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 8003fd0:	4b81      	ldr	r3, [pc, #516]	; (80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fd6:	0a1b      	lsrs	r3, r3, #8
 8003fd8:	f003 030f 	and.w	r3, r3, #15
 8003fdc:	4a7f      	ldr	r2, [pc, #508]	; (80041dc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8003fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fe2:	61fb      	str	r3, [r7, #28]
          break;
 8003fe4:	e066      	b.n	80040b4 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003fe6:	4b7c      	ldr	r3, [pc, #496]	; (80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ff2:	d162      	bne.n	80040ba <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8003ff4:	4b78      	ldr	r3, [pc, #480]	; (80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ffc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004000:	d15b      	bne.n	80040ba <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004002:	4b75      	ldr	r3, [pc, #468]	; (80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	0a1b      	lsrs	r3, r3, #8
 8004008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800400c:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	68ba      	ldr	r2, [r7, #8]
 8004012:	fb03 f202 	mul.w	r2, r3, r2
 8004016:	4b70      	ldr	r3, [pc, #448]	; (80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	091b      	lsrs	r3, r3, #4
 800401c:	f003 030f 	and.w	r3, r3, #15
 8004020:	3301      	adds	r3, #1
 8004022:	fbb2 f3f3 	udiv	r3, r2, r3
 8004026:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004028:	4b6b      	ldr	r3, [pc, #428]	; (80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	0d5b      	lsrs	r3, r3, #21
 800402e:	f003 0303 	and.w	r3, r3, #3
 8004032:	3301      	adds	r3, #1
 8004034:	005b      	lsls	r3, r3, #1
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	fbb2 f3f3 	udiv	r3, r2, r3
 800403c:	61fb      	str	r3, [r7, #28]
          break;
 800403e:	e03c      	b.n	80040ba <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8004040:	4b65      	ldr	r3, [pc, #404]	; (80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004048:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800404c:	d138      	bne.n	80040c0 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800404e:	4b62      	ldr	r3, [pc, #392]	; (80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004056:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800405a:	d131      	bne.n	80040c0 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800405c:	4b5e      	ldr	r3, [pc, #376]	; (80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	0a1b      	lsrs	r3, r3, #8
 8004062:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004066:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	68ba      	ldr	r2, [r7, #8]
 800406c:	fb03 f202 	mul.w	r2, r3, r2
 8004070:	4b59      	ldr	r3, [pc, #356]	; (80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	091b      	lsrs	r3, r3, #4
 8004076:	f003 030f 	and.w	r3, r3, #15
 800407a:	3301      	adds	r3, #1
 800407c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004080:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8004082:	4b55      	ldr	r3, [pc, #340]	; (80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	0d5b      	lsrs	r3, r3, #21
 8004088:	f003 0303 	and.w	r3, r3, #3
 800408c:	3301      	adds	r3, #1
 800408e:	005b      	lsls	r3, r3, #1
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	fbb2 f3f3 	udiv	r3, r2, r3
 8004096:	61fb      	str	r3, [r7, #28]
          break;
 8004098:	e012      	b.n	80040c0 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800409a:	4b4f      	ldr	r3, [pc, #316]	; (80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800409c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d10e      	bne.n	80040c6 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI48_VALUE;
 80040a8:	4b4d      	ldr	r3, [pc, #308]	; (80041e0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80040aa:	61fb      	str	r3, [r7, #28]
          break;
 80040ac:	e00b      	b.n	80040c6 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          break;
 80040ae:	bf00      	nop
 80040b0:	f000 bce2 	b.w	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80040b4:	bf00      	nop
 80040b6:	f000 bcdf 	b.w	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80040ba:	bf00      	nop
 80040bc:	f000 bcdc 	b.w	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80040c0:	bf00      	nop
 80040c2:	f000 bcd9 	b.w	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80040c6:	bf00      	nop
        break;
 80040c8:	f000 bcd6 	b.w	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 80040cc:	4b42      	ldr	r3, [pc, #264]	; (80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80040ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040da:	d13d      	bne.n	8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80040dc:	4b3e      	ldr	r3, [pc, #248]	; (80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040e8:	f040 84c5 	bne.w	8004a76 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 80040ec:	4b3a      	ldr	r3, [pc, #232]	; (80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040f8:	f040 84bd 	bne.w	8004a76 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80040fc:	4b36      	ldr	r3, [pc, #216]	; (80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	0a1b      	lsrs	r3, r3, #8
 8004102:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004106:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	68ba      	ldr	r2, [r7, #8]
 800410c:	fb03 f202 	mul.w	r2, r3, r2
 8004110:	4b31      	ldr	r3, [pc, #196]	; (80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	091b      	lsrs	r3, r3, #4
 8004116:	f003 030f 	and.w	r3, r3, #15
 800411a:	3301      	adds	r3, #1
 800411c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004120:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8004122:	4b2d      	ldr	r3, [pc, #180]	; (80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	0edb      	lsrs	r3, r3, #27
 8004128:	f003 031f 	and.w	r3, r3, #31
 800412c:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10a      	bne.n	800414a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004134:	4b28      	ldr	r3, [pc, #160]	; (80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d002      	beq.n	8004146 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
                pllp = 17U;
 8004140:	2311      	movs	r3, #17
 8004142:	617b      	str	r3, [r7, #20]
 8004144:	e001      	b.n	800414a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 7U;
 8004146:	2307      	movs	r3, #7
 8004148:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004152:	61fb      	str	r3, [r7, #28]
      break;
 8004154:	f000 bc8f 	b.w	8004a76 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8004158:	4b1f      	ldr	r3, [pc, #124]	; (80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800415a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800415e:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004162:	60fb      	str	r3, [r7, #12]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800416a:	d016      	beq.n	800419a <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004172:	f200 809b 	bhi.w	80042ac <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800417c:	d032      	beq.n	80041e4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004184:	f200 8092 	bhi.w	80042ac <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2b00      	cmp	r3, #0
 800418c:	f000 8084 	beq.w	8004298 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004196:	d052      	beq.n	800423e <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
          break;
 8004198:	e088      	b.n	80042ac <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800419a:	4b0f      	ldr	r3, [pc, #60]	; (80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	f040 8084 	bne.w	80042b0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80041a8:	4b0b      	ldr	r3, [pc, #44]	; (80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0308 	and.w	r3, r3, #8
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d005      	beq.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 80041b4:	4b08      	ldr	r3, [pc, #32]	; (80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	091b      	lsrs	r3, r3, #4
 80041ba:	f003 030f 	and.w	r3, r3, #15
 80041be:	e005      	b.n	80041cc <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 80041c0:	4b05      	ldr	r3, [pc, #20]	; (80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80041c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041c6:	0a1b      	lsrs	r3, r3, #8
 80041c8:	f003 030f 	and.w	r3, r3, #15
 80041cc:	4a03      	ldr	r2, [pc, #12]	; (80041dc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80041ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041d2:	61fb      	str	r3, [r7, #28]
          break;
 80041d4:	e06c      	b.n	80042b0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 80041d6:	bf00      	nop
 80041d8:	40021000 	.word	0x40021000
 80041dc:	0800c110 	.word	0x0800c110
 80041e0:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80041e4:	4ba5      	ldr	r3, [pc, #660]	; (800447c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041f0:	d160      	bne.n	80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80041f2:	4ba2      	ldr	r3, [pc, #648]	; (800447c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041fe:	d159      	bne.n	80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004200:	4b9e      	ldr	r3, [pc, #632]	; (800447c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	0a1b      	lsrs	r3, r3, #8
 8004206:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800420a:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	68ba      	ldr	r2, [r7, #8]
 8004210:	fb03 f202 	mul.w	r2, r3, r2
 8004214:	4b99      	ldr	r3, [pc, #612]	; (800447c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	091b      	lsrs	r3, r3, #4
 800421a:	f003 030f 	and.w	r3, r3, #15
 800421e:	3301      	adds	r3, #1
 8004220:	fbb2 f3f3 	udiv	r3, r2, r3
 8004224:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004226:	4b95      	ldr	r3, [pc, #596]	; (800447c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	0d5b      	lsrs	r3, r3, #21
 800422c:	f003 0303 	and.w	r3, r3, #3
 8004230:	3301      	adds	r3, #1
 8004232:	005b      	lsls	r3, r3, #1
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	fbb2 f3f3 	udiv	r3, r2, r3
 800423a:	61fb      	str	r3, [r7, #28]
          break;
 800423c:	e03a      	b.n	80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800423e:	4b8f      	ldr	r3, [pc, #572]	; (800447c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004246:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800424a:	d135      	bne.n	80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800424c:	4b8b      	ldr	r3, [pc, #556]	; (800447c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004254:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004258:	d12e      	bne.n	80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800425a:	4b88      	ldr	r3, [pc, #544]	; (800447c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	0a1b      	lsrs	r3, r3, #8
 8004260:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004264:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	68ba      	ldr	r2, [r7, #8]
 800426a:	fb03 f202 	mul.w	r2, r3, r2
 800426e:	4b83      	ldr	r3, [pc, #524]	; (800447c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	091b      	lsrs	r3, r3, #4
 8004274:	f003 030f 	and.w	r3, r3, #15
 8004278:	3301      	adds	r3, #1
 800427a:	fbb2 f3f3 	udiv	r3, r2, r3
 800427e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8004280:	4b7e      	ldr	r3, [pc, #504]	; (800447c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	0d5b      	lsrs	r3, r3, #21
 8004286:	f003 0303 	and.w	r3, r3, #3
 800428a:	3301      	adds	r3, #1
 800428c:	005b      	lsls	r3, r3, #1
 800428e:	69ba      	ldr	r2, [r7, #24]
 8004290:	fbb2 f3f3 	udiv	r3, r2, r3
 8004294:	61fb      	str	r3, [r7, #28]
          break;
 8004296:	e00f      	b.n	80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8004298:	4b78      	ldr	r3, [pc, #480]	; (800447c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800429a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d10a      	bne.n	80042bc <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            frequency = HSI48_VALUE;
 80042a6:	4b76      	ldr	r3, [pc, #472]	; (8004480 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80042a8:	61fb      	str	r3, [r7, #28]
          break;
 80042aa:	e007      	b.n	80042bc <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          break;
 80042ac:	bf00      	nop
 80042ae:	e3e2      	b.n	8004a76 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 80042b0:	bf00      	nop
 80042b2:	e3e0      	b.n	8004a76 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 80042b4:	bf00      	nop
 80042b6:	e3de      	b.n	8004a76 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 80042b8:	bf00      	nop
 80042ba:	e3dc      	b.n	8004a76 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 80042bc:	bf00      	nop
      break;
 80042be:	e3da      	b.n	8004a76 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80042c0:	4b6e      	ldr	r3, [pc, #440]	; (800447c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80042c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c6:	f003 0303 	and.w	r3, r3, #3
 80042ca:	60fb      	str	r3, [r7, #12]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2b03      	cmp	r3, #3
 80042d0:	d827      	bhi.n	8004322 <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
 80042d2:	a201      	add	r2, pc, #4	; (adr r2, 80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 80042d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d8:	080042e9 	.word	0x080042e9
 80042dc:	080042f1 	.word	0x080042f1
 80042e0:	080042f9 	.word	0x080042f9
 80042e4:	0800430d 	.word	0x0800430d
          frequency = HAL_RCC_GetPCLK2Freq();
 80042e8:	f7ff f84c 	bl	8003384 <HAL_RCC_GetPCLK2Freq>
 80042ec:	61f8      	str	r0, [r7, #28]
          break;
 80042ee:	e01d      	b.n	800432c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          frequency = HAL_RCC_GetSysClockFreq();
 80042f0:	f7fe ff9c 	bl	800322c <HAL_RCC_GetSysClockFreq>
 80042f4:	61f8      	str	r0, [r7, #28]
          break;
 80042f6:	e019      	b.n	800432c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80042f8:	4b60      	ldr	r3, [pc, #384]	; (800447c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004300:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004304:	d10f      	bne.n	8004326 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
            frequency = HSI_VALUE;
 8004306:	4b5f      	ldr	r3, [pc, #380]	; (8004484 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004308:	61fb      	str	r3, [r7, #28]
          break;
 800430a:	e00c      	b.n	8004326 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800430c:	4b5b      	ldr	r3, [pc, #364]	; (800447c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800430e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b02      	cmp	r3, #2
 8004318:	d107      	bne.n	800432a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = LSE_VALUE;
 800431a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800431e:	61fb      	str	r3, [r7, #28]
          break;
 8004320:	e003      	b.n	800432a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          break;
 8004322:	bf00      	nop
 8004324:	e3a8      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004326:	bf00      	nop
 8004328:	e3a6      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800432a:	bf00      	nop
        break;
 800432c:	e3a4      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800432e:	4b53      	ldr	r3, [pc, #332]	; (800447c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004334:	f003 030c 	and.w	r3, r3, #12
 8004338:	60fb      	str	r3, [r7, #12]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2b0c      	cmp	r3, #12
 800433e:	d83a      	bhi.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 8004340:	a201      	add	r2, pc, #4	; (adr r2, 8004348 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>)
 8004342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004346:	bf00      	nop
 8004348:	0800437d 	.word	0x0800437d
 800434c:	080043b7 	.word	0x080043b7
 8004350:	080043b7 	.word	0x080043b7
 8004354:	080043b7 	.word	0x080043b7
 8004358:	08004385 	.word	0x08004385
 800435c:	080043b7 	.word	0x080043b7
 8004360:	080043b7 	.word	0x080043b7
 8004364:	080043b7 	.word	0x080043b7
 8004368:	0800438d 	.word	0x0800438d
 800436c:	080043b7 	.word	0x080043b7
 8004370:	080043b7 	.word	0x080043b7
 8004374:	080043b7 	.word	0x080043b7
 8004378:	080043a1 	.word	0x080043a1
          frequency = HAL_RCC_GetPCLK1Freq();
 800437c:	f7fe ffec 	bl	8003358 <HAL_RCC_GetPCLK1Freq>
 8004380:	61f8      	str	r0, [r7, #28]
          break;
 8004382:	e01d      	b.n	80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          frequency = HAL_RCC_GetSysClockFreq();
 8004384:	f7fe ff52 	bl	800322c <HAL_RCC_GetSysClockFreq>
 8004388:	61f8      	str	r0, [r7, #28]
          break;
 800438a:	e019      	b.n	80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800438c:	4b3b      	ldr	r3, [pc, #236]	; (800447c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004394:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004398:	d10f      	bne.n	80043ba <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
            frequency = HSI_VALUE;
 800439a:	4b3a      	ldr	r3, [pc, #232]	; (8004484 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800439c:	61fb      	str	r3, [r7, #28]
          break;
 800439e:	e00c      	b.n	80043ba <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80043a0:	4b36      	ldr	r3, [pc, #216]	; (800447c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80043a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d107      	bne.n	80043be <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = LSE_VALUE;
 80043ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043b2:	61fb      	str	r3, [r7, #28]
          break;
 80043b4:	e003      	b.n	80043be <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          break;
 80043b6:	bf00      	nop
 80043b8:	e35e      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80043ba:	bf00      	nop
 80043bc:	e35c      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80043be:	bf00      	nop
        break;
 80043c0:	e35a      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80043c2:	4b2e      	ldr	r3, [pc, #184]	; (800447c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80043c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80043cc:	60fb      	str	r3, [r7, #12]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2b30      	cmp	r3, #48	; 0x30
 80043d2:	d021      	beq.n	8004418 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2b30      	cmp	r3, #48	; 0x30
 80043d8:	d829      	bhi.n	800442e <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2b20      	cmp	r3, #32
 80043de:	d011      	beq.n	8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2b20      	cmp	r3, #32
 80043e4:	d823      	bhi.n	800442e <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d003      	beq.n	80043f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2b10      	cmp	r3, #16
 80043f0:	d004      	beq.n	80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
          break;
 80043f2:	e01c      	b.n	800442e <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 80043f4:	f7fe ffb0 	bl	8003358 <HAL_RCC_GetPCLK1Freq>
 80043f8:	61f8      	str	r0, [r7, #28]
          break;
 80043fa:	e01d      	b.n	8004438 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          frequency = HAL_RCC_GetSysClockFreq();
 80043fc:	f7fe ff16 	bl	800322c <HAL_RCC_GetSysClockFreq>
 8004400:	61f8      	str	r0, [r7, #28]
          break;
 8004402:	e019      	b.n	8004438 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004404:	4b1d      	ldr	r3, [pc, #116]	; (800447c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800440c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004410:	d10f      	bne.n	8004432 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
            frequency = HSI_VALUE;
 8004412:	4b1c      	ldr	r3, [pc, #112]	; (8004484 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004414:	61fb      	str	r3, [r7, #28]
          break;
 8004416:	e00c      	b.n	8004432 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004418:	4b18      	ldr	r3, [pc, #96]	; (800447c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800441a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b02      	cmp	r3, #2
 8004424:	d107      	bne.n	8004436 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = LSE_VALUE;
 8004426:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800442a:	61fb      	str	r3, [r7, #28]
          break;
 800442c:	e003      	b.n	8004436 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          break;
 800442e:	bf00      	nop
 8004430:	e322      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004432:	bf00      	nop
 8004434:	e320      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004436:	bf00      	nop
        break;
 8004438:	e31e      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800443a:	4b10      	ldr	r3, [pc, #64]	; (800447c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800443c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004440:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004444:	60fb      	str	r3, [r7, #12]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2bc0      	cmp	r3, #192	; 0xc0
 800444a:	d027      	beq.n	800449c <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2bc0      	cmp	r3, #192	; 0xc0
 8004450:	d82f      	bhi.n	80044b2 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2b80      	cmp	r3, #128	; 0x80
 8004456:	d017      	beq.n	8004488 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2b80      	cmp	r3, #128	; 0x80
 800445c:	d829      	bhi.n	80044b2 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d003      	beq.n	800446c <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2b40      	cmp	r3, #64	; 0x40
 8004468:	d004      	beq.n	8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
          break;
 800446a:	e022      	b.n	80044b2 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
          frequency = HAL_RCC_GetPCLK1Freq();
 800446c:	f7fe ff74 	bl	8003358 <HAL_RCC_GetPCLK1Freq>
 8004470:	61f8      	str	r0, [r7, #28]
          break;
 8004472:	e023      	b.n	80044bc <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          frequency = HAL_RCC_GetSysClockFreq();
 8004474:	f7fe feda 	bl	800322c <HAL_RCC_GetSysClockFreq>
 8004478:	61f8      	str	r0, [r7, #28]
          break;
 800447a:	e01f      	b.n	80044bc <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 800447c:	40021000 	.word	0x40021000
 8004480:	02dc6c00 	.word	0x02dc6c00
 8004484:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004488:	4b9b      	ldr	r3, [pc, #620]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004490:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004494:	d10f      	bne.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
            frequency = HSI_VALUE;
 8004496:	4b99      	ldr	r3, [pc, #612]	; (80046fc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004498:	61fb      	str	r3, [r7, #28]
          break;
 800449a:	e00c      	b.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800449c:	4b96      	ldr	r3, [pc, #600]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800449e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d107      	bne.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = LSE_VALUE;
 80044aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044ae:	61fb      	str	r3, [r7, #28]
          break;
 80044b0:	e003      	b.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 80044b2:	bf00      	nop
 80044b4:	e2e0      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80044b6:	bf00      	nop
 80044b8:	e2de      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80044ba:	bf00      	nop
        break;
 80044bc:	e2dc      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80044be:	4b8e      	ldr	r3, [pc, #568]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80044c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044c8:	60fb      	str	r3, [r7, #12]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044d0:	d025      	beq.n	800451e <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044d8:	d82c      	bhi.n	8004534 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044e0:	d013      	beq.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044e8:	d824      	bhi.n	8004534 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d004      	beq.n	80044fa <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044f6:	d004      	beq.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
          break;
 80044f8:	e01c      	b.n	8004534 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 80044fa:	f7fe ff2d 	bl	8003358 <HAL_RCC_GetPCLK1Freq>
 80044fe:	61f8      	str	r0, [r7, #28]
          break;
 8004500:	e01d      	b.n	800453e <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 8004502:	f7fe fe93 	bl	800322c <HAL_RCC_GetSysClockFreq>
 8004506:	61f8      	str	r0, [r7, #28]
          break;
 8004508:	e019      	b.n	800453e <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800450a:	4b7b      	ldr	r3, [pc, #492]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004512:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004516:	d10f      	bne.n	8004538 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
            frequency = HSI_VALUE;
 8004518:	4b78      	ldr	r3, [pc, #480]	; (80046fc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800451a:	61fb      	str	r3, [r7, #28]
          break;
 800451c:	e00c      	b.n	8004538 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800451e:	4b76      	ldr	r3, [pc, #472]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004524:	f003 0302 	and.w	r3, r3, #2
 8004528:	2b02      	cmp	r3, #2
 800452a:	d107      	bne.n	800453c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = LSE_VALUE;
 800452c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004530:	61fb      	str	r3, [r7, #28]
          break;
 8004532:	e003      	b.n	800453c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 8004534:	bf00      	nop
 8004536:	e29f      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004538:	bf00      	nop
 800453a:	e29d      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800453c:	bf00      	nop
        break;
 800453e:	e29b      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004540:	4b6d      	ldr	r3, [pc, #436]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004546:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800454a:	60fb      	str	r3, [r7, #12]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004552:	d025      	beq.n	80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800455a:	d82c      	bhi.n	80045b6 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004562:	d013      	beq.n	800458c <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800456a:	d824      	bhi.n	80045b6 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d004      	beq.n	800457c <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004578:	d004      	beq.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
          break;
 800457a:	e01c      	b.n	80045b6 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800457c:	f7fe feec 	bl	8003358 <HAL_RCC_GetPCLK1Freq>
 8004580:	61f8      	str	r0, [r7, #28]
          break;
 8004582:	e01d      	b.n	80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = HAL_RCC_GetSysClockFreq();
 8004584:	f7fe fe52 	bl	800322c <HAL_RCC_GetSysClockFreq>
 8004588:	61f8      	str	r0, [r7, #28]
          break;
 800458a:	e019      	b.n	80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800458c:	4b5a      	ldr	r3, [pc, #360]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004594:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004598:	d10f      	bne.n	80045ba <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
            frequency = HSI_VALUE;
 800459a:	4b58      	ldr	r3, [pc, #352]	; (80046fc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800459c:	61fb      	str	r3, [r7, #28]
          break;
 800459e:	e00c      	b.n	80045ba <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80045a0:	4b55      	ldr	r3, [pc, #340]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80045a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a6:	f003 0302 	and.w	r3, r3, #2
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d107      	bne.n	80045be <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = LSE_VALUE;
 80045ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045b2:	61fb      	str	r3, [r7, #28]
          break;
 80045b4:	e003      	b.n	80045be <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          break;
 80045b6:	bf00      	nop
 80045b8:	e25e      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80045ba:	bf00      	nop
 80045bc:	e25c      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80045be:	bf00      	nop
        break;
 80045c0:	e25a      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80045c2:	4b4d      	ldr	r3, [pc, #308]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80045c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80045cc:	60fb      	str	r3, [r7, #12]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045d4:	d007      	beq.n	80045e6 <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80045dc:	d12f      	bne.n	800463e <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          frequency = HAL_RCC_GetSysClockFreq();
 80045de:	f7fe fe25 	bl	800322c <HAL_RCC_GetSysClockFreq>
 80045e2:	61f8      	str	r0, [r7, #28]
          break;
 80045e4:	e02e      	b.n	8004644 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80045e6:	4b44      	ldr	r3, [pc, #272]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045f2:	d126      	bne.n	8004642 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
 80045f4:	4b40      	ldr	r3, [pc, #256]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d020      	beq.n	8004642 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004600:	4b3d      	ldr	r3, [pc, #244]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	0a1b      	lsrs	r3, r3, #8
 8004606:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800460a:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	fb03 f202 	mul.w	r2, r3, r2
 8004614:	4b38      	ldr	r3, [pc, #224]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	091b      	lsrs	r3, r3, #4
 800461a:	f003 030f 	and.w	r3, r3, #15
 800461e:	3301      	adds	r3, #1
 8004620:	fbb2 f3f3 	udiv	r3, r2, r3
 8004624:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8004626:	4b34      	ldr	r3, [pc, #208]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	0e5b      	lsrs	r3, r3, #25
 800462c:	f003 0303 	and.w	r3, r3, #3
 8004630:	3301      	adds	r3, #1
 8004632:	005b      	lsls	r3, r3, #1
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	fbb2 f3f3 	udiv	r3, r2, r3
 800463a:	61fb      	str	r3, [r7, #28]
          break;
 800463c:	e001      	b.n	8004642 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          break;
 800463e:	bf00      	nop
 8004640:	e21a      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004642:	bf00      	nop
        break;
 8004644:	e218      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8004646:	4b2c      	ldr	r3, [pc, #176]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004648:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800464c:	f003 0304 	and.w	r3, r3, #4
 8004650:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d103      	bne.n	8004660 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>
          frequency = HAL_RCC_GetPCLK2Freq();
 8004658:	f7fe fe94 	bl	8003384 <HAL_RCC_GetPCLK2Freq>
 800465c:	61f8      	str	r0, [r7, #28]
        break;
 800465e:	e20b      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          frequency = HAL_RCC_GetSysClockFreq();
 8004660:	f7fe fde4 	bl	800322c <HAL_RCC_GetSysClockFreq>
 8004664:	61f8      	str	r0, [r7, #28]
        break;
 8004666:	e207      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8004668:	4b23      	ldr	r3, [pc, #140]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800466a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800466e:	f003 0318 	and.w	r3, r3, #24
 8004672:	60fb      	str	r3, [r7, #12]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2b10      	cmp	r3, #16
 8004678:	d010      	beq.n	800469c <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2b10      	cmp	r3, #16
 800467e:	d834      	bhi.n	80046ea <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d003      	beq.n	800468e <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2b08      	cmp	r3, #8
 800468a:	d024      	beq.n	80046d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          break;
 800468c:	e02d      	b.n	80046ea <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800468e:	69b9      	ldr	r1, [r7, #24]
 8004690:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004694:	f000 fbe2 	bl	8004e5c <RCCEx_GetSAIxPeriphCLKFreq>
 8004698:	61f8      	str	r0, [r7, #28]
          break;
 800469a:	e02b      	b.n	80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800469c:	4b16      	ldr	r3, [pc, #88]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0302 	and.w	r3, r3, #2
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d122      	bne.n	80046ee <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80046a8:	4b13      	ldr	r3, [pc, #76]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0308 	and.w	r3, r3, #8
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d005      	beq.n	80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 80046b4:	4b10      	ldr	r3, [pc, #64]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	091b      	lsrs	r3, r3, #4
 80046ba:	f003 030f 	and.w	r3, r3, #15
 80046be:	e005      	b.n	80046cc <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80046c0:	4b0d      	ldr	r3, [pc, #52]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80046c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046c6:	0a1b      	lsrs	r3, r3, #8
 80046c8:	f003 030f 	and.w	r3, r3, #15
 80046cc:	4a0c      	ldr	r2, [pc, #48]	; (8004700 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80046ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046d2:	61fb      	str	r3, [r7, #28]
          break;
 80046d4:	e00b      	b.n	80046ee <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80046d6:	4b08      	ldr	r3, [pc, #32]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046e2:	d106      	bne.n	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = HSI_VALUE;
 80046e4:	4b05      	ldr	r3, [pc, #20]	; (80046fc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80046e6:	61fb      	str	r3, [r7, #28]
          break;
 80046e8:	e003      	b.n	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          break;
 80046ea:	bf00      	nop
 80046ec:	e1c4      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80046ee:	bf00      	nop
 80046f0:	e1c2      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80046f2:	bf00      	nop
        break;
 80046f4:	e1c0      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 80046f6:	bf00      	nop
 80046f8:	40021000 	.word	0x40021000
 80046fc:	00f42400 	.word	0x00f42400
 8004700:	0800c110 	.word	0x0800c110
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004704:	4b96      	ldr	r3, [pc, #600]	; (8004960 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800470a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800470e:	60fb      	str	r3, [r7, #12]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004716:	d013      	beq.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800471e:	d819      	bhi.n	8004754 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d004      	beq.n	8004730 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800472c:	d004      	beq.n	8004738 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
          break;
 800472e:	e011      	b.n	8004754 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004730:	f7fe fe12 	bl	8003358 <HAL_RCC_GetPCLK1Freq>
 8004734:	61f8      	str	r0, [r7, #28]
          break;
 8004736:	e010      	b.n	800475a <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8004738:	f7fe fd78 	bl	800322c <HAL_RCC_GetSysClockFreq>
 800473c:	61f8      	str	r0, [r7, #28]
          break;
 800473e:	e00c      	b.n	800475a <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004740:	4b87      	ldr	r3, [pc, #540]	; (8004960 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004748:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800474c:	d104      	bne.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = HSI_VALUE;
 800474e:	4b85      	ldr	r3, [pc, #532]	; (8004964 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004750:	61fb      	str	r3, [r7, #28]
          break;
 8004752:	e001      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 8004754:	bf00      	nop
 8004756:	e18f      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004758:	bf00      	nop
        break;
 800475a:	e18d      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800475c:	4b80      	ldr	r3, [pc, #512]	; (8004960 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800475e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004762:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004766:	60fb      	str	r3, [r7, #12]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800476e:	d013      	beq.n	8004798 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004776:	d819      	bhi.n	80047ac <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d004      	beq.n	8004788 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004784:	d004      	beq.n	8004790 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>
          break;
 8004786:	e011      	b.n	80047ac <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004788:	f7fe fde6 	bl	8003358 <HAL_RCC_GetPCLK1Freq>
 800478c:	61f8      	str	r0, [r7, #28]
          break;
 800478e:	e010      	b.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          frequency = HAL_RCC_GetSysClockFreq();
 8004790:	f7fe fd4c 	bl	800322c <HAL_RCC_GetSysClockFreq>
 8004794:	61f8      	str	r0, [r7, #28]
          break;
 8004796:	e00c      	b.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004798:	4b71      	ldr	r3, [pc, #452]	; (8004960 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047a4:	d104      	bne.n	80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
            frequency = HSI_VALUE;
 80047a6:	4b6f      	ldr	r3, [pc, #444]	; (8004964 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80047a8:	61fb      	str	r3, [r7, #28]
          break;
 80047aa:	e001      	b.n	80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          break;
 80047ac:	bf00      	nop
 80047ae:	e163      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80047b0:	bf00      	nop
        break;
 80047b2:	e161      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80047b4:	4b6a      	ldr	r3, [pc, #424]	; (8004960 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80047b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047be:	60fb      	str	r3, [r7, #12]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047c6:	d013      	beq.n	80047f0 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047ce:	d819      	bhi.n	8004804 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d004      	beq.n	80047e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047dc:	d004      	beq.n	80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
          break;
 80047de:	e011      	b.n	8004804 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
          frequency = HAL_RCC_GetPCLK1Freq();
 80047e0:	f7fe fdba 	bl	8003358 <HAL_RCC_GetPCLK1Freq>
 80047e4:	61f8      	str	r0, [r7, #28]
          break;
 80047e6:	e010      	b.n	800480a <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          frequency = HAL_RCC_GetSysClockFreq();
 80047e8:	f7fe fd20 	bl	800322c <HAL_RCC_GetSysClockFreq>
 80047ec:	61f8      	str	r0, [r7, #28]
          break;
 80047ee:	e00c      	b.n	800480a <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80047f0:	4b5b      	ldr	r3, [pc, #364]	; (8004960 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047fc:	d104      	bne.n	8004808 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
            frequency = HSI_VALUE;
 80047fe:	4b59      	ldr	r3, [pc, #356]	; (8004964 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004800:	61fb      	str	r3, [r7, #28]
          break;
 8004802:	e001      	b.n	8004808 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          break;
 8004804:	bf00      	nop
 8004806:	e137      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004808:	bf00      	nop
        break;
 800480a:	e135      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800480c:	4b54      	ldr	r3, [pc, #336]	; (8004960 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800480e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004812:	f003 0303 	and.w	r3, r3, #3
 8004816:	60fb      	str	r3, [r7, #12]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2b02      	cmp	r3, #2
 800481c:	d011      	beq.n	8004842 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2b02      	cmp	r3, #2
 8004822:	d818      	bhi.n	8004856 <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d003      	beq.n	8004832 <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d004      	beq.n	800483a <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
          break;
 8004830:	e011      	b.n	8004856 <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004832:	f7fe fd91 	bl	8003358 <HAL_RCC_GetPCLK1Freq>
 8004836:	61f8      	str	r0, [r7, #28]
          break;
 8004838:	e010      	b.n	800485c <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          frequency = HAL_RCC_GetSysClockFreq();
 800483a:	f7fe fcf7 	bl	800322c <HAL_RCC_GetSysClockFreq>
 800483e:	61f8      	str	r0, [r7, #28]
          break;
 8004840:	e00c      	b.n	800485c <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004842:	4b47      	ldr	r3, [pc, #284]	; (8004960 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800484a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800484e:	d104      	bne.n	800485a <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
            frequency = HSI_VALUE;
 8004850:	4b44      	ldr	r3, [pc, #272]	; (8004964 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004852:	61fb      	str	r3, [r7, #28]
          break;
 8004854:	e001      	b.n	800485a <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          break;
 8004856:	bf00      	nop
 8004858:	e10e      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800485a:	bf00      	nop
        break;
 800485c:	e10c      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800485e:	4b40      	ldr	r3, [pc, #256]	; (8004960 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004864:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004868:	60fb      	str	r3, [r7, #12]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004870:	d02c      	beq.n	80048cc <HAL_RCCEx_GetPeriphCLKFreq+0xc80>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004878:	d833      	bhi.n	80048e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004880:	d01a      	beq.n	80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0xc6c>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004888:	d82b      	bhi.n	80048e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d004      	beq.n	800489a <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004896:	d004      	beq.n	80048a2 <HAL_RCCEx_GetPeriphCLKFreq+0xc56>
          break;
 8004898:	e023      	b.n	80048e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
          frequency = HAL_RCC_GetPCLK1Freq();
 800489a:	f7fe fd5d 	bl	8003358 <HAL_RCC_GetPCLK1Freq>
 800489e:	61f8      	str	r0, [r7, #28]
          break;
 80048a0:	e026      	b.n	80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80048a2:	4b2f      	ldr	r3, [pc, #188]	; (8004960 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80048a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048a8:	f003 0302 	and.w	r3, r3, #2
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d11a      	bne.n	80048e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
              frequency = LSI_VALUE;
 80048b0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80048b4:	61fb      	str	r3, [r7, #28]
          break;
 80048b6:	e016      	b.n	80048e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80048b8:	4b29      	ldr	r3, [pc, #164]	; (8004960 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048c4:	d111      	bne.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
            frequency = HSI_VALUE;
 80048c6:	4b27      	ldr	r3, [pc, #156]	; (8004964 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80048c8:	61fb      	str	r3, [r7, #28]
          break;
 80048ca:	e00e      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80048cc:	4b24      	ldr	r3, [pc, #144]	; (8004960 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80048ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d109      	bne.n	80048ee <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = LSE_VALUE;
 80048da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048de:	61fb      	str	r3, [r7, #28]
          break;
 80048e0:	e005      	b.n	80048ee <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          break;
 80048e2:	bf00      	nop
 80048e4:	e0c8      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80048e6:	bf00      	nop
 80048e8:	e0c6      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80048ea:	bf00      	nop
 80048ec:	e0c4      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80048ee:	bf00      	nop
        break;
 80048f0:	e0c2      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80048f2:	4b1b      	ldr	r3, [pc, #108]	; (8004960 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80048f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80048fc:	60fb      	str	r3, [r7, #12]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004904:	d030      	beq.n	8004968 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800490c:	d837      	bhi.n	800497e <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004914:	d01a      	beq.n	800494c <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800491c:	d82f      	bhi.n	800497e <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d004      	beq.n	800492e <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800492a:	d004      	beq.n	8004936 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          break;
 800492c:	e027      	b.n	800497e <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = HAL_RCC_GetPCLK1Freq();
 800492e:	f7fe fd13 	bl	8003358 <HAL_RCC_GetPCLK1Freq>
 8004932:	61f8      	str	r0, [r7, #28]
          break;
 8004934:	e02a      	b.n	800498c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004936:	4b0a      	ldr	r3, [pc, #40]	; (8004960 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004938:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800493c:	f003 0302 	and.w	r3, r3, #2
 8004940:	2b02      	cmp	r3, #2
 8004942:	d11e      	bne.n	8004982 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
              frequency = LSI_VALUE;
 8004944:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004948:	61fb      	str	r3, [r7, #28]
          break;
 800494a:	e01a      	b.n	8004982 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800494c:	4b04      	ldr	r3, [pc, #16]	; (8004960 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004954:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004958:	d115      	bne.n	8004986 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
            frequency = HSI_VALUE;
 800495a:	4b02      	ldr	r3, [pc, #8]	; (8004964 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800495c:	61fb      	str	r3, [r7, #28]
          break;
 800495e:	e012      	b.n	8004986 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8004960:	40021000 	.word	0x40021000
 8004964:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004968:	4b46      	ldr	r3, [pc, #280]	; (8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800496a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800496e:	f003 0302 	and.w	r3, r3, #2
 8004972:	2b02      	cmp	r3, #2
 8004974:	d109      	bne.n	800498a <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = LSE_VALUE;
 8004976:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800497a:	61fb      	str	r3, [r7, #28]
          break;
 800497c:	e005      	b.n	800498a <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
          break;
 800497e:	bf00      	nop
 8004980:	e07a      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004982:	bf00      	nop
 8004984:	e078      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004986:	bf00      	nop
 8004988:	e076      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800498a:	bf00      	nop
        break;
 800498c:	e074      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800498e:	4b3d      	ldr	r3, [pc, #244]	; (8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004990:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004994:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004998:	60fb      	str	r3, [r7, #12]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049a0:	d02c      	beq.n	80049fc <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049a8:	d855      	bhi.n	8004a56 <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d004      	beq.n	80049ba <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049b6:	d004      	beq.n	80049c2 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
          break;
 80049b8:	e04d      	b.n	8004a56 <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
          frequency = HAL_RCC_GetSysClockFreq();
 80049ba:	f7fe fc37 	bl	800322c <HAL_RCC_GetSysClockFreq>
 80049be:	61f8      	str	r0, [r7, #28]
          break;
 80049c0:	e04e      	b.n	8004a60 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80049c2:	4b30      	ldr	r3, [pc, #192]	; (8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d145      	bne.n	8004a5a <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80049ce:	4b2d      	ldr	r3, [pc, #180]	; (8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0308 	and.w	r3, r3, #8
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d005      	beq.n	80049e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd9a>
 80049da:	4b2a      	ldr	r3, [pc, #168]	; (8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	091b      	lsrs	r3, r3, #4
 80049e0:	f003 030f 	and.w	r3, r3, #15
 80049e4:	e005      	b.n	80049f2 <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
 80049e6:	4b27      	ldr	r3, [pc, #156]	; (8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80049e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049ec:	0a1b      	lsrs	r3, r3, #8
 80049ee:	f003 030f 	and.w	r3, r3, #15
 80049f2:	4a25      	ldr	r2, [pc, #148]	; (8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80049f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049f8:	61fb      	str	r3, [r7, #28]
          break;
 80049fa:	e02e      	b.n	8004a5a <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80049fc:	4b21      	ldr	r3, [pc, #132]	; (8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a08:	d129      	bne.n	8004a5e <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004a0a:	4b1e      	ldr	r3, [pc, #120]	; (8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a16:	d122      	bne.n	8004a5e <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004a18:	4b1a      	ldr	r3, [pc, #104]	; (8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	0a1b      	lsrs	r3, r3, #8
 8004a1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a22:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	fb03 f202 	mul.w	r2, r3, r2
 8004a2c:	4b15      	ldr	r3, [pc, #84]	; (8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	091b      	lsrs	r3, r3, #4
 8004a32:	f003 030f 	and.w	r3, r3, #15
 8004a36:	3301      	adds	r3, #1
 8004a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a3c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004a3e:	4b11      	ldr	r3, [pc, #68]	; (8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	0d5b      	lsrs	r3, r3, #21
 8004a44:	f003 0303 	and.w	r3, r3, #3
 8004a48:	3301      	adds	r3, #1
 8004a4a:	005b      	lsls	r3, r3, #1
 8004a4c:	69ba      	ldr	r2, [r7, #24]
 8004a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a52:	61fb      	str	r3, [r7, #28]
          break;
 8004a54:	e003      	b.n	8004a5e <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          break;
 8004a56:	bf00      	nop
 8004a58:	e00e      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004a5a:	bf00      	nop
 8004a5c:	e00c      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004a5e:	bf00      	nop
        break;
 8004a60:	e00a      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8004a62:	bf00      	nop
 8004a64:	e008      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8004a66:	bf00      	nop
 8004a68:	e006      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8004a6a:	bf00      	nop
 8004a6c:	e004      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8004a6e:	bf00      	nop
 8004a70:	e002      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8004a72:	bf00      	nop
 8004a74:	e000      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8004a76:	bf00      	nop
    }
  }

  return(frequency);
 8004a78:	69fb      	ldr	r3, [r7, #28]
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3720      	adds	r7, #32
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	40021000 	.word	0x40021000
 8004a88:	0800c110 	.word	0x0800c110

08004a8c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a96:	2300      	movs	r3, #0
 8004a98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a9a:	4b72      	ldr	r3, [pc, #456]	; (8004c64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	f003 0303 	and.w	r3, r3, #3
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00e      	beq.n	8004ac4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004aa6:	4b6f      	ldr	r3, [pc, #444]	; (8004c64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	f003 0203 	and.w	r2, r3, #3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d103      	bne.n	8004abe <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
       ||
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d142      	bne.n	8004b44 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	73fb      	strb	r3, [r7, #15]
 8004ac2:	e03f      	b.n	8004b44 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2b03      	cmp	r3, #3
 8004aca:	d018      	beq.n	8004afe <RCCEx_PLLSAI1_Config+0x72>
 8004acc:	2b03      	cmp	r3, #3
 8004ace:	d825      	bhi.n	8004b1c <RCCEx_PLLSAI1_Config+0x90>
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d002      	beq.n	8004ada <RCCEx_PLLSAI1_Config+0x4e>
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d009      	beq.n	8004aec <RCCEx_PLLSAI1_Config+0x60>
 8004ad8:	e020      	b.n	8004b1c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ada:	4b62      	ldr	r3, [pc, #392]	; (8004c64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d11d      	bne.n	8004b22 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004aea:	e01a      	b.n	8004b22 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004aec:	4b5d      	ldr	r3, [pc, #372]	; (8004c64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d116      	bne.n	8004b26 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004afc:	e013      	b.n	8004b26 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004afe:	4b59      	ldr	r3, [pc, #356]	; (8004c64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10f      	bne.n	8004b2a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b0a:	4b56      	ldr	r3, [pc, #344]	; (8004c64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d109      	bne.n	8004b2a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b1a:	e006      	b.n	8004b2a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b20:	e004      	b.n	8004b2c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004b22:	bf00      	nop
 8004b24:	e002      	b.n	8004b2c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004b26:	bf00      	nop
 8004b28:	e000      	b.n	8004b2c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004b2a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b2c:	7bfb      	ldrb	r3, [r7, #15]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d108      	bne.n	8004b44 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004b32:	4b4c      	ldr	r3, [pc, #304]	; (8004c64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	f023 0203 	bic.w	r2, r3, #3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4949      	ldr	r1, [pc, #292]	; (8004c64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004b44:	7bfb      	ldrb	r3, [r7, #15]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	f040 8086 	bne.w	8004c58 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004b4c:	4b45      	ldr	r3, [pc, #276]	; (8004c64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a44      	ldr	r2, [pc, #272]	; (8004c64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b58:	f7fc ff18 	bl	800198c <HAL_GetTick>
 8004b5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b5e:	e009      	b.n	8004b74 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b60:	f7fc ff14 	bl	800198c <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d902      	bls.n	8004b74 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	73fb      	strb	r3, [r7, #15]
        break;
 8004b72:	e005      	b.n	8004b80 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b74:	4b3b      	ldr	r3, [pc, #236]	; (8004c64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1ef      	bne.n	8004b60 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004b80:	7bfb      	ldrb	r3, [r7, #15]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d168      	bne.n	8004c58 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d113      	bne.n	8004bb4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b8c:	4b35      	ldr	r3, [pc, #212]	; (8004c64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b8e:	691a      	ldr	r2, [r3, #16]
 8004b90:	4b35      	ldr	r3, [pc, #212]	; (8004c68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b92:	4013      	ands	r3, r2
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	6892      	ldr	r2, [r2, #8]
 8004b98:	0211      	lsls	r1, r2, #8
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	68d2      	ldr	r2, [r2, #12]
 8004b9e:	06d2      	lsls	r2, r2, #27
 8004ba0:	4311      	orrs	r1, r2
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	6852      	ldr	r2, [r2, #4]
 8004ba6:	3a01      	subs	r2, #1
 8004ba8:	0112      	lsls	r2, r2, #4
 8004baa:	430a      	orrs	r2, r1
 8004bac:	492d      	ldr	r1, [pc, #180]	; (8004c64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	610b      	str	r3, [r1, #16]
 8004bb2:	e02d      	b.n	8004c10 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d115      	bne.n	8004be6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bba:	4b2a      	ldr	r3, [pc, #168]	; (8004c64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004bbc:	691a      	ldr	r2, [r3, #16]
 8004bbe:	4b2b      	ldr	r3, [pc, #172]	; (8004c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	6892      	ldr	r2, [r2, #8]
 8004bc6:	0211      	lsls	r1, r2, #8
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	6912      	ldr	r2, [r2, #16]
 8004bcc:	0852      	lsrs	r2, r2, #1
 8004bce:	3a01      	subs	r2, #1
 8004bd0:	0552      	lsls	r2, r2, #21
 8004bd2:	4311      	orrs	r1, r2
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	6852      	ldr	r2, [r2, #4]
 8004bd8:	3a01      	subs	r2, #1
 8004bda:	0112      	lsls	r2, r2, #4
 8004bdc:	430a      	orrs	r2, r1
 8004bde:	4921      	ldr	r1, [pc, #132]	; (8004c64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	610b      	str	r3, [r1, #16]
 8004be4:	e014      	b.n	8004c10 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004be6:	4b1f      	ldr	r3, [pc, #124]	; (8004c64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004be8:	691a      	ldr	r2, [r3, #16]
 8004bea:	4b21      	ldr	r3, [pc, #132]	; (8004c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bec:	4013      	ands	r3, r2
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	6892      	ldr	r2, [r2, #8]
 8004bf2:	0211      	lsls	r1, r2, #8
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	6952      	ldr	r2, [r2, #20]
 8004bf8:	0852      	lsrs	r2, r2, #1
 8004bfa:	3a01      	subs	r2, #1
 8004bfc:	0652      	lsls	r2, r2, #25
 8004bfe:	4311      	orrs	r1, r2
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	6852      	ldr	r2, [r2, #4]
 8004c04:	3a01      	subs	r2, #1
 8004c06:	0112      	lsls	r2, r2, #4
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	4916      	ldr	r1, [pc, #88]	; (8004c64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004c10:	4b14      	ldr	r3, [pc, #80]	; (8004c64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a13      	ldr	r2, [pc, #76]	; (8004c64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c1a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c1c:	f7fc feb6 	bl	800198c <HAL_GetTick>
 8004c20:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c22:	e009      	b.n	8004c38 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c24:	f7fc feb2 	bl	800198c <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d902      	bls.n	8004c38 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	73fb      	strb	r3, [r7, #15]
          break;
 8004c36:	e005      	b.n	8004c44 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c38:	4b0a      	ldr	r3, [pc, #40]	; (8004c64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d0ef      	beq.n	8004c24 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004c44:	7bfb      	ldrb	r3, [r7, #15]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d106      	bne.n	8004c58 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004c4a:	4b06      	ldr	r3, [pc, #24]	; (8004c64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c4c:	691a      	ldr	r2, [r3, #16]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	4904      	ldr	r1, [pc, #16]	; (8004c64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3710      	adds	r7, #16
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	40021000 	.word	0x40021000
 8004c68:	07ff800f 	.word	0x07ff800f
 8004c6c:	ff9f800f 	.word	0xff9f800f
 8004c70:	f9ff800f 	.word	0xf9ff800f

08004c74 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c82:	4b72      	ldr	r3, [pc, #456]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	f003 0303 	and.w	r3, r3, #3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00e      	beq.n	8004cac <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004c8e:	4b6f      	ldr	r3, [pc, #444]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	f003 0203 	and.w	r2, r3, #3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d103      	bne.n	8004ca6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
       ||
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d142      	bne.n	8004d2c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	73fb      	strb	r3, [r7, #15]
 8004caa:	e03f      	b.n	8004d2c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2b03      	cmp	r3, #3
 8004cb2:	d018      	beq.n	8004ce6 <RCCEx_PLLSAI2_Config+0x72>
 8004cb4:	2b03      	cmp	r3, #3
 8004cb6:	d825      	bhi.n	8004d04 <RCCEx_PLLSAI2_Config+0x90>
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d002      	beq.n	8004cc2 <RCCEx_PLLSAI2_Config+0x4e>
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d009      	beq.n	8004cd4 <RCCEx_PLLSAI2_Config+0x60>
 8004cc0:	e020      	b.n	8004d04 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004cc2:	4b62      	ldr	r3, [pc, #392]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d11d      	bne.n	8004d0a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cd2:	e01a      	b.n	8004d0a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004cd4:	4b5d      	ldr	r3, [pc, #372]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d116      	bne.n	8004d0e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ce4:	e013      	b.n	8004d0e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004ce6:	4b59      	ldr	r3, [pc, #356]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d10f      	bne.n	8004d12 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004cf2:	4b56      	ldr	r3, [pc, #344]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d109      	bne.n	8004d12 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d02:	e006      	b.n	8004d12 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	73fb      	strb	r3, [r7, #15]
      break;
 8004d08:	e004      	b.n	8004d14 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004d0a:	bf00      	nop
 8004d0c:	e002      	b.n	8004d14 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004d0e:	bf00      	nop
 8004d10:	e000      	b.n	8004d14 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004d12:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d14:	7bfb      	ldrb	r3, [r7, #15]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d108      	bne.n	8004d2c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004d1a:	4b4c      	ldr	r3, [pc, #304]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	f023 0203 	bic.w	r2, r3, #3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4949      	ldr	r1, [pc, #292]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004d2c:	7bfb      	ldrb	r3, [r7, #15]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f040 8086 	bne.w	8004e40 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004d34:	4b45      	ldr	r3, [pc, #276]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a44      	ldr	r2, [pc, #272]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d40:	f7fc fe24 	bl	800198c <HAL_GetTick>
 8004d44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d46:	e009      	b.n	8004d5c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d48:	f7fc fe20 	bl	800198c <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d902      	bls.n	8004d5c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	73fb      	strb	r3, [r7, #15]
        break;
 8004d5a:	e005      	b.n	8004d68 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d5c:	4b3b      	ldr	r3, [pc, #236]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d1ef      	bne.n	8004d48 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004d68:	7bfb      	ldrb	r3, [r7, #15]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d168      	bne.n	8004e40 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d113      	bne.n	8004d9c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d74:	4b35      	ldr	r3, [pc, #212]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d76:	695a      	ldr	r2, [r3, #20]
 8004d78:	4b35      	ldr	r3, [pc, #212]	; (8004e50 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	6892      	ldr	r2, [r2, #8]
 8004d80:	0211      	lsls	r1, r2, #8
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	68d2      	ldr	r2, [r2, #12]
 8004d86:	06d2      	lsls	r2, r2, #27
 8004d88:	4311      	orrs	r1, r2
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	6852      	ldr	r2, [r2, #4]
 8004d8e:	3a01      	subs	r2, #1
 8004d90:	0112      	lsls	r2, r2, #4
 8004d92:	430a      	orrs	r2, r1
 8004d94:	492d      	ldr	r1, [pc, #180]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	614b      	str	r3, [r1, #20]
 8004d9a:	e02d      	b.n	8004df8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d115      	bne.n	8004dce <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004da2:	4b2a      	ldr	r3, [pc, #168]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004da4:	695a      	ldr	r2, [r3, #20]
 8004da6:	4b2b      	ldr	r3, [pc, #172]	; (8004e54 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004da8:	4013      	ands	r3, r2
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	6892      	ldr	r2, [r2, #8]
 8004dae:	0211      	lsls	r1, r2, #8
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	6912      	ldr	r2, [r2, #16]
 8004db4:	0852      	lsrs	r2, r2, #1
 8004db6:	3a01      	subs	r2, #1
 8004db8:	0552      	lsls	r2, r2, #21
 8004dba:	4311      	orrs	r1, r2
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	6852      	ldr	r2, [r2, #4]
 8004dc0:	3a01      	subs	r2, #1
 8004dc2:	0112      	lsls	r2, r2, #4
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	4921      	ldr	r1, [pc, #132]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	614b      	str	r3, [r1, #20]
 8004dcc:	e014      	b.n	8004df8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004dce:	4b1f      	ldr	r3, [pc, #124]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004dd0:	695a      	ldr	r2, [r3, #20]
 8004dd2:	4b21      	ldr	r3, [pc, #132]	; (8004e58 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	6892      	ldr	r2, [r2, #8]
 8004dda:	0211      	lsls	r1, r2, #8
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	6952      	ldr	r2, [r2, #20]
 8004de0:	0852      	lsrs	r2, r2, #1
 8004de2:	3a01      	subs	r2, #1
 8004de4:	0652      	lsls	r2, r2, #25
 8004de6:	4311      	orrs	r1, r2
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	6852      	ldr	r2, [r2, #4]
 8004dec:	3a01      	subs	r2, #1
 8004dee:	0112      	lsls	r2, r2, #4
 8004df0:	430a      	orrs	r2, r1
 8004df2:	4916      	ldr	r1, [pc, #88]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004df8:	4b14      	ldr	r3, [pc, #80]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a13      	ldr	r2, [pc, #76]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004dfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e02:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e04:	f7fc fdc2 	bl	800198c <HAL_GetTick>
 8004e08:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e0a:	e009      	b.n	8004e20 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e0c:	f7fc fdbe 	bl	800198c <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d902      	bls.n	8004e20 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	73fb      	strb	r3, [r7, #15]
          break;
 8004e1e:	e005      	b.n	8004e2c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e20:	4b0a      	ldr	r3, [pc, #40]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d0ef      	beq.n	8004e0c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004e2c:	7bfb      	ldrb	r3, [r7, #15]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d106      	bne.n	8004e40 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004e32:	4b06      	ldr	r3, [pc, #24]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e34:	695a      	ldr	r2, [r3, #20]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	4904      	ldr	r1, [pc, #16]	; (8004e4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3710      	adds	r7, #16
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	40021000 	.word	0x40021000
 8004e50:	07ff800f 	.word	0x07ff800f
 8004e54:	ff9f800f 	.word	0xff9f800f
 8004e58:	f9ff800f 	.word	0xf9ff800f

08004e5c <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b089      	sub	sp, #36	; 0x24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8004e66:	2300      	movs	r3, #0
 8004e68:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e78:	d10b      	bne.n	8004e92 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004e7a:	4b7e      	ldr	r3, [pc, #504]	; (8005074 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004e7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e80:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8004e84:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	2b60      	cmp	r3, #96	; 0x60
 8004e8a:	d112      	bne.n	8004eb2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004e8c:	4b7a      	ldr	r3, [pc, #488]	; (8005078 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8004e8e:	61fb      	str	r3, [r7, #28]
 8004e90:	e00f      	b.n	8004eb2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e98:	d10b      	bne.n	8004eb2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8004e9a:	4b76      	ldr	r3, [pc, #472]	; (8005074 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004e9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ea0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ea4:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004eac:	d101      	bne.n	8004eb2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8004eae:	4b72      	ldr	r3, [pc, #456]	; (8005078 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8004eb0:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f040 80d6 	bne.w	8005066 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	2b40      	cmp	r3, #64	; 0x40
 8004ec2:	d003      	beq.n	8004ecc <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004eca:	d13b      	bne.n	8004f44 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004ecc:	4b69      	ldr	r3, [pc, #420]	; (8005074 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ed4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ed8:	f040 80c4 	bne.w	8005064 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8004edc:	4b65      	ldr	r3, [pc, #404]	; (8005074 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	f000 80bd 	beq.w	8005064 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004eea:	4b62      	ldr	r3, [pc, #392]	; (8005074 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	091b      	lsrs	r3, r3, #4
 8004ef0:	f003 030f 	and.w	r3, r3, #15
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004efc:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004efe:	4b5d      	ldr	r3, [pc, #372]	; (8005074 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	0a1b      	lsrs	r3, r3, #8
 8004f04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f08:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8004f0a:	4b5a      	ldr	r3, [pc, #360]	; (8005074 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	0edb      	lsrs	r3, r3, #27
 8004f10:	f003 031f 	and.w	r3, r3, #31
 8004f14:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d10a      	bne.n	8004f32 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004f1c:	4b55      	ldr	r3, [pc, #340]	; (8005074 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d002      	beq.n	8004f2e <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8004f28:	2311      	movs	r3, #17
 8004f2a:	617b      	str	r3, [r7, #20]
 8004f2c:	e001      	b.n	8004f32 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8004f2e:	2307      	movs	r3, #7
 8004f30:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	fb03 f202 	mul.w	r2, r3, r2
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f40:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004f42:	e08f      	b.n	8005064 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d13a      	bne.n	8004fc0 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8004f4a:	4b4a      	ldr	r3, [pc, #296]	; (8005074 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f56:	f040 8086 	bne.w	8005066 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8004f5a:	4b46      	ldr	r3, [pc, #280]	; (8005074 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d07f      	beq.n	8005066 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004f66:	4b43      	ldr	r3, [pc, #268]	; (8005074 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	091b      	lsrs	r3, r3, #4
 8004f6c:	f003 030f 	and.w	r3, r3, #15
 8004f70:	3301      	adds	r3, #1
 8004f72:	693a      	ldr	r2, [r7, #16]
 8004f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f78:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004f7a:	4b3e      	ldr	r3, [pc, #248]	; (8005074 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	0a1b      	lsrs	r3, r3, #8
 8004f80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f84:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8004f86:	4b3b      	ldr	r3, [pc, #236]	; (8005074 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	0edb      	lsrs	r3, r3, #27
 8004f8c:	f003 031f 	and.w	r3, r3, #31
 8004f90:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d10a      	bne.n	8004fae <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8004f98:	4b36      	ldr	r3, [pc, #216]	; (8005074 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d002      	beq.n	8004faa <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8004fa4:	2311      	movs	r3, #17
 8004fa6:	617b      	str	r3, [r7, #20]
 8004fa8:	e001      	b.n	8004fae <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8004faa:	2307      	movs	r3, #7
 8004fac:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	fb03 f202 	mul.w	r2, r3, r2
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fbc:	61fb      	str	r3, [r7, #28]
 8004fbe:	e052      	b.n	8005066 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	2b80      	cmp	r3, #128	; 0x80
 8004fc4:	d003      	beq.n	8004fce <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fcc:	d109      	bne.n	8004fe2 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004fce:	4b29      	ldr	r3, [pc, #164]	; (8005074 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fda:	d144      	bne.n	8005066 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8004fdc:	4b27      	ldr	r3, [pc, #156]	; (800507c <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8004fde:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004fe0:	e041      	b.n	8005066 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	2b20      	cmp	r3, #32
 8004fe6:	d003      	beq.n	8004ff0 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fee:	d13a      	bne.n	8005066 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8004ff0:	4b20      	ldr	r3, [pc, #128]	; (8005074 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ff8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ffc:	d133      	bne.n	8005066 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8004ffe:	4b1d      	ldr	r3, [pc, #116]	; (8005074 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d02d      	beq.n	8005066 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800500a:	4b1a      	ldr	r3, [pc, #104]	; (8005074 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	091b      	lsrs	r3, r3, #4
 8005010:	f003 030f 	and.w	r3, r3, #15
 8005014:	3301      	adds	r3, #1
 8005016:	693a      	ldr	r2, [r7, #16]
 8005018:	fbb2 f3f3 	udiv	r3, r2, r3
 800501c:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800501e:	4b15      	ldr	r3, [pc, #84]	; (8005074 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	0a1b      	lsrs	r3, r3, #8
 8005024:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005028:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800502a:	4b12      	ldr	r3, [pc, #72]	; (8005074 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	0edb      	lsrs	r3, r3, #27
 8005030:	f003 031f 	and.w	r3, r3, #31
 8005034:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d10a      	bne.n	8005052 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800503c:	4b0d      	ldr	r3, [pc, #52]	; (8005074 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800503e:	695b      	ldr	r3, [r3, #20]
 8005040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d002      	beq.n	800504e <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8005048:	2311      	movs	r3, #17
 800504a:	617b      	str	r3, [r7, #20]
 800504c:	e001      	b.n	8005052 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 800504e:	2307      	movs	r3, #7
 8005050:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	fb03 f202 	mul.w	r2, r3, r2
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005060:	61fb      	str	r3, [r7, #28]
 8005062:	e000      	b.n	8005066 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005064:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8005066:	69fb      	ldr	r3, [r7, #28]
}
 8005068:	4618      	mov	r0, r3
 800506a:	3724      	adds	r7, #36	; 0x24
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr
 8005074:	40021000 	.word	0x40021000
 8005078:	001fff68 	.word	0x001fff68
 800507c:	00f42400 	.word	0x00f42400

08005080 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b08a      	sub	sp, #40	; 0x28
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d101      	bne.n	8005092 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e1c7      	b.n	8005422 <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005098:	2b01      	cmp	r3, #1
 800509a:	d10e      	bne.n	80050ba <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a81      	ldr	r2, [pc, #516]	; (80052a8 <HAL_SAI_Init+0x228>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d107      	bne.n	80050b6 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d103      	bne.n	80050b6 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d001      	beq.n	80050ba <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e1b3      	b.n	8005422 <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d106      	bne.n	80050d4 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f7fc fadc 	bl	800168c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f000 f9b1 	bl	800543c <SAI_Disable>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d001      	beq.n	80050e4 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e19e      	b.n	8005422 <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2202      	movs	r2, #2
 80050e8:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d00c      	beq.n	800510e <HAL_SAI_Init+0x8e>
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d80d      	bhi.n	8005114 <HAL_SAI_Init+0x94>
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d002      	beq.n	8005102 <HAL_SAI_Init+0x82>
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d003      	beq.n	8005108 <HAL_SAI_Init+0x88>
 8005100:	e008      	b.n	8005114 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8005102:	2300      	movs	r3, #0
 8005104:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8005106:	e008      	b.n	800511a <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8005108:	2310      	movs	r3, #16
 800510a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800510c:	e005      	b.n	800511a <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800510e:	2320      	movs	r3, #32
 8005110:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8005112:	e002      	b.n	800511a <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8005114:	2300      	movs	r3, #0
 8005116:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8005118:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	2b03      	cmp	r3, #3
 8005120:	d81d      	bhi.n	800515e <HAL_SAI_Init+0xde>
 8005122:	a201      	add	r2, pc, #4	; (adr r2, 8005128 <HAL_SAI_Init+0xa8>)
 8005124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005128:	08005139 	.word	0x08005139
 800512c:	0800513f 	.word	0x0800513f
 8005130:	08005147 	.word	0x08005147
 8005134:	0800514f 	.word	0x0800514f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8005138:	2300      	movs	r3, #0
 800513a:	61fb      	str	r3, [r7, #28]
      break;
 800513c:	e012      	b.n	8005164 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800513e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005142:	61fb      	str	r3, [r7, #28]
      break;
 8005144:	e00e      	b.n	8005164 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005146:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800514a:	61fb      	str	r3, [r7, #28]
      break;
 800514c:	e00a      	b.n	8005164 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800514e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005152:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005156:	f043 0301 	orr.w	r3, r3, #1
 800515a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800515c:	e002      	b.n	8005164 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800515e:	2300      	movs	r3, #0
 8005160:	61fb      	str	r3, [r7, #28]
      break;
 8005162:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a4f      	ldr	r2, [pc, #316]	; (80052a8 <HAL_SAI_Init+0x228>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d004      	beq.n	8005178 <HAL_SAI_Init+0xf8>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a4e      	ldr	r2, [pc, #312]	; (80052ac <HAL_SAI_Init+0x22c>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d103      	bne.n	8005180 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 8005178:	4a4d      	ldr	r2, [pc, #308]	; (80052b0 <HAL_SAI_Init+0x230>)
 800517a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517c:	6013      	str	r3, [r2, #0]
 800517e:	e002      	b.n	8005186 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8005180:	4a4c      	ldr	r2, [pc, #304]	; (80052b4 <HAL_SAI_Init+0x234>)
 8005182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005184:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	69db      	ldr	r3, [r3, #28]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d073      	beq.n	8005276 <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a45      	ldr	r2, [pc, #276]	; (80052a8 <HAL_SAI_Init+0x228>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d004      	beq.n	80051a2 <HAL_SAI_Init+0x122>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a43      	ldr	r2, [pc, #268]	; (80052ac <HAL_SAI_Init+0x22c>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d105      	bne.n	80051ae <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80051a2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80051a6:	f7fe fd51 	bl	8003c4c <HAL_RCCEx_GetPeriphCLKFreq>
 80051aa:	61b8      	str	r0, [r7, #24]
 80051ac:	e004      	b.n	80051b8 <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80051ae:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80051b2:	f7fe fd4b 	bl	8003c4c <HAL_RCCEx_GetPeriphCLKFreq>
 80051b6:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	695b      	ldr	r3, [r3, #20]
 80051bc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80051c0:	d120      	bne.n	8005204 <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c6:	2b04      	cmp	r3, #4
 80051c8:	d102      	bne.n	80051d0 <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 80051ca:	2340      	movs	r3, #64	; 0x40
 80051cc:	613b      	str	r3, [r7, #16]
 80051ce:	e00a      	b.n	80051e6 <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d4:	2b08      	cmp	r3, #8
 80051d6:	d103      	bne.n	80051e0 <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 80051d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80051dc:	613b      	str	r3, [r7, #16]
 80051de:	e002      	b.n	80051e6 <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051e4:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 80051e6:	69ba      	ldr	r2, [r7, #24]
 80051e8:	4613      	mov	r3, r2
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	4413      	add	r3, r2
 80051ee:	005b      	lsls	r3, r3, #1
 80051f0:	4619      	mov	r1, r3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	69db      	ldr	r3, [r3, #28]
 80051f6:	693a      	ldr	r2, [r7, #16]
 80051f8:	fb02 f303 	mul.w	r3, r2, r3
 80051fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8005200:	617b      	str	r3, [r7, #20]
 8005202:	e017      	b.n	8005234 <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005208:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800520c:	d101      	bne.n	8005212 <HAL_SAI_Init+0x192>
 800520e:	2302      	movs	r3, #2
 8005210:	e000      	b.n	8005214 <HAL_SAI_Init+0x194>
 8005212:	2301      	movs	r3, #1
 8005214:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8005216:	69ba      	ldr	r2, [r7, #24]
 8005218:	4613      	mov	r3, r2
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	4413      	add	r3, r2
 800521e:	005b      	lsls	r3, r3, #1
 8005220:	4619      	mov	r1, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	69db      	ldr	r3, [r3, #28]
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	fb02 f303 	mul.w	r3, r2, r3
 800522c:	021b      	lsls	r3, r3, #8
 800522e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005232:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	4a20      	ldr	r2, [pc, #128]	; (80052b8 <HAL_SAI_Init+0x238>)
 8005238:	fba2 2303 	umull	r2, r3, r2, r3
 800523c:	08da      	lsrs	r2, r3, #3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8005242:	6979      	ldr	r1, [r7, #20]
 8005244:	4b1c      	ldr	r3, [pc, #112]	; (80052b8 <HAL_SAI_Init+0x238>)
 8005246:	fba3 2301 	umull	r2, r3, r3, r1
 800524a:	08da      	lsrs	r2, r3, #3
 800524c:	4613      	mov	r3, r2
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	4413      	add	r3, r2
 8005252:	005b      	lsls	r3, r3, #1
 8005254:	1aca      	subs	r2, r1, r3
 8005256:	2a08      	cmp	r2, #8
 8005258:	d904      	bls.n	8005264 <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	1c5a      	adds	r2, r3, #1
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005268:	2b04      	cmp	r3, #4
 800526a:	d104      	bne.n	8005276 <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a1b      	ldr	r3, [r3, #32]
 8005270:	085a      	lsrs	r2, r3, #1
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d003      	beq.n	8005286 <HAL_SAI_Init+0x206>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	2b02      	cmp	r3, #2
 8005284:	d109      	bne.n	800529a <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800528a:	2b01      	cmp	r3, #1
 800528c:	d101      	bne.n	8005292 <HAL_SAI_Init+0x212>
 800528e:	2300      	movs	r3, #0
 8005290:	e001      	b.n	8005296 <HAL_SAI_Init+0x216>
 8005292:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005296:	623b      	str	r3, [r7, #32]
 8005298:	e012      	b.n	80052c0 <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d10c      	bne.n	80052bc <HAL_SAI_Init+0x23c>
 80052a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052a6:	e00a      	b.n	80052be <HAL_SAI_Init+0x23e>
 80052a8:	40015404 	.word	0x40015404
 80052ac:	40015424 	.word	0x40015424
 80052b0:	40015400 	.word	0x40015400
 80052b4:	40015800 	.word	0x40015800
 80052b8:	cccccccd 	.word	0xcccccccd
 80052bc:	2300      	movs	r3, #0
 80052be:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	6819      	ldr	r1, [r3, #0]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	4b58      	ldr	r3, [pc, #352]	; (800542c <HAL_SAI_Init+0x3ac>)
 80052cc:	400b      	ands	r3, r1
 80052ce:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6819      	ldr	r1, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685a      	ldr	r2, [r3, #4]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052de:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80052e4:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052ea:	431a      	orrs	r2, r3
 80052ec:	6a3b      	ldr	r3, [r7, #32]
 80052ee:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 80052f8:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005304:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a1b      	ldr	r3, [r3, #32]
 800530a:	051b      	lsls	r3, r3, #20
 800530c:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8005312:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	430a      	orrs	r2, r1
 800531a:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	6812      	ldr	r2, [r2, #0]
 8005326:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800532a:	f023 030f 	bic.w	r3, r3, #15
 800532e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	6859      	ldr	r1, [r3, #4]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	699a      	ldr	r2, [r3, #24]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533e:	431a      	orrs	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005344:	431a      	orrs	r2, r3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	430a      	orrs	r2, r1
 800534c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	6899      	ldr	r1, [r3, #8]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	4b35      	ldr	r3, [pc, #212]	; (8005430 <HAL_SAI_Init+0x3b0>)
 800535a:	400b      	ands	r3, r1
 800535c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	6899      	ldr	r1, [r3, #8]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005368:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800536e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
                           hsai->FrameInit.FSOffset |
 8005374:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSDefinition |
 800537a:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005380:	3b01      	subs	r3, #1
 8005382:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8005384:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	430a      	orrs	r2, r1
 800538c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68d9      	ldr	r1, [r3, #12]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	f24f 0320 	movw	r3, #61472	; 0xf020
 800539c:	400b      	ands	r3, r1
 800539e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68d9      	ldr	r1, [r3, #12]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053ae:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b4:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80053b6:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053bc:	3b01      	subs	r3, #1
 80053be:	021b      	lsls	r3, r3, #8
 80053c0:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	430a      	orrs	r2, r1
 80053c8:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a19      	ldr	r2, [pc, #100]	; (8005434 <HAL_SAI_Init+0x3b4>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d119      	bne.n	8005408 <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 80053d4:	4b18      	ldr	r3, [pc, #96]	; (8005438 <HAL_SAI_Init+0x3b8>)
 80053d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d8:	4a17      	ldr	r2, [pc, #92]	; (8005438 <HAL_SAI_Init+0x3b8>)
 80053da:	f023 0301 	bic.w	r3, r3, #1
 80053de:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d10e      	bne.n	8005408 <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f2:	3b01      	subs	r3, #1
 80053f4:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80053f6:	4910      	ldr	r1, [pc, #64]	; (8005438 <HAL_SAI_Init+0x3b8>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 80053fc:	4b0e      	ldr	r3, [pc, #56]	; (8005438 <HAL_SAI_Init+0x3b8>)
 80053fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005400:	4a0d      	ldr	r2, [pc, #52]	; (8005438 <HAL_SAI_Init+0x3b8>)
 8005402:	f043 0301 	orr.w	r3, r3, #1
 8005406:	6453      	str	r3, [r2, #68]	; 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3728      	adds	r7, #40	; 0x28
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	f805c010 	.word	0xf805c010
 8005430:	fff88000 	.word	0xfff88000
 8005434:	40015404 	.word	0x40015404
 8005438:	40015400 	.word	0x40015400

0800543c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005444:	4b18      	ldr	r3, [pc, #96]	; (80054a8 <SAI_Disable+0x6c>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a18      	ldr	r2, [pc, #96]	; (80054ac <SAI_Disable+0x70>)
 800544a:	fba2 2303 	umull	r2, r3, r2, r3
 800544e:	0b1b      	lsrs	r3, r3, #12
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005454:	2300      	movs	r3, #0
 8005456:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005466:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d10a      	bne.n	8005484 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005474:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      status = HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	72fb      	strb	r3, [r7, #11]
      break;
 8005482:	e009      	b.n	8005498 <SAI_Disable+0x5c>
    }
    count--;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	3b01      	subs	r3, #1
 8005488:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d1e7      	bne.n	8005468 <SAI_Disable+0x2c>

  return status;
 8005498:	7afb      	ldrb	r3, [r7, #11]
}
 800549a:	4618      	mov	r0, r3
 800549c:	3714      	adds	r7, #20
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	20000000 	.word	0x20000000
 80054ac:	95cbec1b 	.word	0x95cbec1b

080054b0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b08a      	sub	sp, #40	; 0x28
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d101      	bne.n	80054c2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e078      	b.n	80055b4 <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d105      	bne.n	80054da <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f7fb fe19 	bl	800110c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2203      	movs	r2, #3
 80054de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f86a 	bl	80055bc <HAL_SD_InitCard>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d001      	beq.n	80054f2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e060      	b.n	80055b4 <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80054f2:	f107 0308 	add.w	r3, r7, #8
 80054f6:	4619      	mov	r1, r3
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 faa5 	bl	8005a48 <HAL_SD_GetCardStatus>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d001      	beq.n	8005508 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e055      	b.n	80055b4 <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8005508:	7e3b      	ldrb	r3, [r7, #24]
 800550a:	b2db      	uxtb	r3, r3
 800550c:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800550e:	7e7b      	ldrb	r3, [r7, #25]
 8005510:	b2db      	uxtb	r3, r3
 8005512:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005518:	2b01      	cmp	r3, #1
 800551a:	d10a      	bne.n	8005532 <HAL_SD_Init+0x82>
 800551c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551e:	2b00      	cmp	r3, #0
 8005520:	d102      	bne.n	8005528 <HAL_SD_Init+0x78>
 8005522:	6a3b      	ldr	r3, [r7, #32]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d004      	beq.n	8005532 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800552e:	65da      	str	r2, [r3, #92]	; 0x5c
 8005530:	e00b      	b.n	800554a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005536:	2b01      	cmp	r3, #1
 8005538:	d104      	bne.n	8005544 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005540:	65da      	str	r2, [r3, #92]	; 0x5c
 8005542:	e002      	b.n	800554a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	4619      	mov	r1, r3
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 fb2f 	bl	8005bb4 <HAL_SD_ConfigWideBusOperation>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d001      	beq.n	8005560 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e029      	b.n	80055b4 <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8005560:	f7fc fa14 	bl	800198c <HAL_GetTick>
 8005564:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005566:	e014      	b.n	8005592 <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8005568:	f7fc fa10 	bl	800198c <HAL_GetTick>
 800556c:	4602      	mov	r2, r0
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005576:	d10c      	bne.n	8005592 <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800557e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e010      	b.n	80055b4 <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 fc22 	bl	8005ddc <HAL_SD_GetCardState>
 8005598:	4603      	mov	r3, r0
 800559a:	2b04      	cmp	r3, #4
 800559c:	d1e4      	bne.n	8005568 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2201      	movs	r2, #1
 80055ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3728      	adds	r7, #40	; 0x28
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80055bc:	b5b0      	push	{r4, r5, r7, lr}
 80055be:	b08e      	sub	sp, #56	; 0x38
 80055c0:	af04      	add	r7, sp, #16
 80055c2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80055c4:	2300      	movs	r3, #0
 80055c6:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80055c8:	2300      	movs	r3, #0
 80055ca:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80055cc:	2300      	movs	r3, #0
 80055ce:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80055d0:	2300      	movs	r3, #0
 80055d2:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80055d4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80055d8:	f7fe fb38 	bl	8003c4c <HAL_RCCEx_GetPeriphCLKFreq>
 80055dc:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 80055de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d109      	bne.n	80055f8 <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80055f2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e079      	b.n	80056ec <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80055f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fa:	0a1b      	lsrs	r3, r3, #8
 80055fc:	4a3d      	ldr	r2, [pc, #244]	; (80056f4 <HAL_SD_InitCard+0x138>)
 80055fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005602:	091b      	lsrs	r3, r3, #4
 8005604:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	699b      	ldr	r3, [r3, #24]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d107      	bne.n	8005624 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f042 0210 	orr.w	r2, r2, #16
 8005622:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681d      	ldr	r5, [r3, #0]
 8005628:	466c      	mov	r4, sp
 800562a:	f107 0314 	add.w	r3, r7, #20
 800562e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005632:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005636:	f107 0308 	add.w	r3, r7, #8
 800563a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800563c:	4628      	mov	r0, r5
 800563e:	f002 f837 	bl	80076b0 <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4618      	mov	r0, r3
 8005648:	f002 f869 	bl	800771e <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	005b      	lsls	r3, r3, #1
 8005650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005652:	fbb2 f3f3 	udiv	r3, r2, r3
 8005656:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8005658:	4a27      	ldr	r2, [pc, #156]	; (80056f8 <HAL_SD_InitCard+0x13c>)
 800565a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005660:	3301      	adds	r3, #1
 8005662:	4618      	mov	r0, r3
 8005664:	f7fc f99e 	bl	80019a4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 fc97 	bl	8005f9c <SD_PowerON>
 800566e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005670:	6a3b      	ldr	r3, [r7, #32]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00b      	beq.n	800568e <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2201      	movs	r2, #1
 800567a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005682:	6a3b      	ldr	r3, [r7, #32]
 8005684:	431a      	orrs	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e02e      	b.n	80056ec <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 fbc4 	bl	8005e1c <SD_InitCard>
 8005694:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005696:	6a3b      	ldr	r3, [r7, #32]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00b      	beq.n	80056b4 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056a8:	6a3b      	ldr	r3, [r7, #32]
 80056aa:	431a      	orrs	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e01b      	b.n	80056ec <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80056bc:	4618      	mov	r0, r3
 80056be:	f002 f8c5 	bl	800784c <SDMMC_CmdBlockLength>
 80056c2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80056c4:	6a3b      	ldr	r3, [r7, #32]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00f      	beq.n	80056ea <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a0b      	ldr	r2, [pc, #44]	; (80056fc <HAL_SD_InitCard+0x140>)
 80056d0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056d6:	6a3b      	ldr	r3, [r7, #32]
 80056d8:	431a      	orrs	r2, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2201      	movs	r2, #1
 80056e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e000      	b.n	80056ec <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 80056ea:	2300      	movs	r3, #0
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3728      	adds	r7, #40	; 0x28
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bdb0      	pop	{r4, r5, r7, pc}
 80056f4:	014f8b59 	.word	0x014f8b59
 80056f8:	00012110 	.word	0x00012110
 80056fc:	1fe00fff 	.word	0x1fe00fff

08005700 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800570e:	0f9b      	lsrs	r3, r3, #30
 8005710:	b2da      	uxtb	r2, r3
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800571a:	0e9b      	lsrs	r3, r3, #26
 800571c:	b2db      	uxtb	r3, r3
 800571e:	f003 030f 	and.w	r3, r3, #15
 8005722:	b2da      	uxtb	r2, r3
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800572c:	0e1b      	lsrs	r3, r3, #24
 800572e:	b2db      	uxtb	r3, r3
 8005730:	f003 0303 	and.w	r3, r3, #3
 8005734:	b2da      	uxtb	r2, r3
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800573e:	0c1b      	lsrs	r3, r3, #16
 8005740:	b2da      	uxtb	r2, r3
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800574a:	0a1b      	lsrs	r3, r3, #8
 800574c:	b2da      	uxtb	r2, r3
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005756:	b2da      	uxtb	r2, r3
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005760:	0d1b      	lsrs	r3, r3, #20
 8005762:	b29a      	uxth	r2, r3
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800576c:	0c1b      	lsrs	r3, r3, #16
 800576e:	b2db      	uxtb	r3, r3
 8005770:	f003 030f 	and.w	r3, r3, #15
 8005774:	b2da      	uxtb	r2, r3
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800577e:	0bdb      	lsrs	r3, r3, #15
 8005780:	b2db      	uxtb	r3, r3
 8005782:	f003 0301 	and.w	r3, r3, #1
 8005786:	b2da      	uxtb	r2, r3
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005790:	0b9b      	lsrs	r3, r3, #14
 8005792:	b2db      	uxtb	r3, r3
 8005794:	f003 0301 	and.w	r3, r3, #1
 8005798:	b2da      	uxtb	r2, r3
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057a2:	0b5b      	lsrs	r3, r3, #13
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	f003 0301 	and.w	r3, r3, #1
 80057aa:	b2da      	uxtb	r2, r3
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057b4:	0b1b      	lsrs	r3, r3, #12
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	f003 0301 	and.w	r3, r3, #1
 80057bc:	b2da      	uxtb	r2, r3
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	2200      	movs	r2, #0
 80057c6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d163      	bne.n	8005898 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057d4:	009a      	lsls	r2, r3, #2
 80057d6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80057da:	4013      	ands	r3, r2
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80057e0:	0f92      	lsrs	r2, r2, #30
 80057e2:	431a      	orrs	r2, r3
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057ec:	0edb      	lsrs	r3, r3, #27
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	f003 0307 	and.w	r3, r3, #7
 80057f4:	b2da      	uxtb	r2, r3
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057fe:	0e1b      	lsrs	r3, r3, #24
 8005800:	b2db      	uxtb	r3, r3
 8005802:	f003 0307 	and.w	r3, r3, #7
 8005806:	b2da      	uxtb	r2, r3
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005810:	0d5b      	lsrs	r3, r3, #21
 8005812:	b2db      	uxtb	r3, r3
 8005814:	f003 0307 	and.w	r3, r3, #7
 8005818:	b2da      	uxtb	r2, r3
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005822:	0c9b      	lsrs	r3, r3, #18
 8005824:	b2db      	uxtb	r3, r3
 8005826:	f003 0307 	and.w	r3, r3, #7
 800582a:	b2da      	uxtb	r2, r3
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005834:	0bdb      	lsrs	r3, r3, #15
 8005836:	b2db      	uxtb	r3, r3
 8005838:	f003 0307 	and.w	r3, r3, #7
 800583c:	b2da      	uxtb	r2, r3
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	1c5a      	adds	r2, r3, #1
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	7e1b      	ldrb	r3, [r3, #24]
 8005850:	b2db      	uxtb	r3, r3
 8005852:	f003 0307 	and.w	r3, r3, #7
 8005856:	3302      	adds	r3, #2
 8005858:	2201      	movs	r2, #1
 800585a:	fa02 f303 	lsl.w	r3, r2, r3
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005862:	fb03 f202 	mul.w	r2, r3, r2
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	7a1b      	ldrb	r3, [r3, #8]
 800586e:	b2db      	uxtb	r3, r3
 8005870:	f003 030f 	and.w	r3, r3, #15
 8005874:	2201      	movs	r2, #1
 8005876:	409a      	lsls	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005884:	0a52      	lsrs	r2, r2, #9
 8005886:	fb03 f202 	mul.w	r2, r3, r2
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005894:	659a      	str	r2, [r3, #88]	; 0x58
 8005896:	e031      	b.n	80058fc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800589c:	2b01      	cmp	r3, #1
 800589e:	d11d      	bne.n	80058dc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058a4:	041b      	lsls	r3, r3, #16
 80058a6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058ae:	0c1b      	lsrs	r3, r3, #16
 80058b0:	431a      	orrs	r2, r3
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	3301      	adds	r3, #1
 80058bc:	029a      	lsls	r2, r3, #10
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058d0:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	659a      	str	r2, [r3, #88]	; 0x58
 80058da:	e00f      	b.n	80058fc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a58      	ldr	r2, [pc, #352]	; (8005a44 <HAL_SD_GetCardCSD+0x344>)
 80058e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e09d      	b.n	8005a38 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005900:	0b9b      	lsrs	r3, r3, #14
 8005902:	b2db      	uxtb	r3, r3
 8005904:	f003 0301 	and.w	r3, r3, #1
 8005908:	b2da      	uxtb	r2, r3
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005912:	09db      	lsrs	r3, r3, #7
 8005914:	b2db      	uxtb	r3, r3
 8005916:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800591a:	b2da      	uxtb	r2, r3
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005924:	b2db      	uxtb	r3, r3
 8005926:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800592a:	b2da      	uxtb	r2, r3
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005934:	0fdb      	lsrs	r3, r3, #31
 8005936:	b2da      	uxtb	r2, r3
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005940:	0f5b      	lsrs	r3, r3, #29
 8005942:	b2db      	uxtb	r3, r3
 8005944:	f003 0303 	and.w	r3, r3, #3
 8005948:	b2da      	uxtb	r2, r3
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005952:	0e9b      	lsrs	r3, r3, #26
 8005954:	b2db      	uxtb	r3, r3
 8005956:	f003 0307 	and.w	r3, r3, #7
 800595a:	b2da      	uxtb	r2, r3
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005964:	0d9b      	lsrs	r3, r3, #22
 8005966:	b2db      	uxtb	r3, r3
 8005968:	f003 030f 	and.w	r3, r3, #15
 800596c:	b2da      	uxtb	r2, r3
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005976:	0d5b      	lsrs	r3, r3, #21
 8005978:	b2db      	uxtb	r3, r3
 800597a:	f003 0301 	and.w	r3, r3, #1
 800597e:	b2da      	uxtb	r2, r3
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005992:	0c1b      	lsrs	r3, r3, #16
 8005994:	b2db      	uxtb	r3, r3
 8005996:	f003 0301 	and.w	r3, r3, #1
 800599a:	b2da      	uxtb	r2, r3
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059a6:	0bdb      	lsrs	r3, r3, #15
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	b2da      	uxtb	r2, r3
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059ba:	0b9b      	lsrs	r3, r3, #14
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	f003 0301 	and.w	r3, r3, #1
 80059c2:	b2da      	uxtb	r2, r3
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059ce:	0b5b      	lsrs	r3, r3, #13
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	f003 0301 	and.w	r3, r3, #1
 80059d6:	b2da      	uxtb	r2, r3
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059e2:	0b1b      	lsrs	r3, r3, #12
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	f003 0301 	and.w	r3, r3, #1
 80059ea:	b2da      	uxtb	r2, r3
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059f6:	0a9b      	lsrs	r3, r3, #10
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	f003 0303 	and.w	r3, r3, #3
 80059fe:	b2da      	uxtb	r2, r3
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a0a:	0a1b      	lsrs	r3, r3, #8
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	f003 0303 	and.w	r3, r3, #3
 8005a12:	b2da      	uxtb	r2, r3
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a1e:	085b      	lsrs	r3, r3, #1
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a26:	b2da      	uxtb	r2, r3
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr
 8005a44:	1fe00fff 	.word	0x1fe00fff

08005a48 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b094      	sub	sp, #80	; 0x50
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005a52:	2300      	movs	r3, #0
 8005a54:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8005a58:	f107 0308 	add.w	r3, r7, #8
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 fba8 	bl	80061b4 <SD_SendSDStatus>
 8005a64:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d011      	beq.n	8005a90 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a4f      	ldr	r2, [pc, #316]	; (8005bb0 <HAL_SD_GetCardStatus+0x168>)
 8005a72:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a7a:	431a      	orrs	r2, r3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005a8e:	e070      	b.n	8005b72 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	099b      	lsrs	r3, r3, #6
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	f003 0303 	and.w	r3, r3, #3
 8005a9a:	b2da      	uxtb	r2, r3
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	095b      	lsrs	r3, r3, #5
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	f003 0301 	and.w	r3, r3, #1
 8005aaa:	b2da      	uxtb	r2, r3
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	0a1b      	lsrs	r3, r3, #8
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005aba:	b29a      	uxth	r2, r3
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	0e1b      	lsrs	r3, r3, #24
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	b29a      	uxth	r2, r3
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	061a      	lsls	r2, r3, #24
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	021b      	lsls	r3, r3, #8
 8005ad2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005ad6:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	0a1b      	lsrs	r3, r3, #8
 8005adc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005ae0:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	0e1b      	lsrs	r3, r3, #24
 8005ae6:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	b2da      	uxtb	r2, r3
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	0a1b      	lsrs	r3, r3, #8
 8005af8:	b2da      	uxtb	r2, r3
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	0d1b      	lsrs	r3, r3, #20
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	f003 030f 	and.w	r3, r3, #15
 8005b08:	b2da      	uxtb	r2, r3
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	0c1b      	lsrs	r3, r3, #16
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005b18:	b29a      	uxth	r2, r3
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	4313      	orrs	r3, r2
 8005b24:	b29a      	uxth	r2, r3
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	0a9b      	lsrs	r3, r3, #10
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b34:	b2da      	uxtb	r2, r3
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	0a1b      	lsrs	r3, r3, #8
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	f003 0303 	and.w	r3, r3, #3
 8005b44:	b2da      	uxtb	r2, r3
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	091b      	lsrs	r3, r3, #4
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	f003 030f 	and.w	r3, r3, #15
 8005b54:	b2da      	uxtb	r2, r3
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	f003 030f 	and.w	r3, r3, #15
 8005b62:	b2da      	uxtb	r2, r3
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	0e1b      	lsrs	r3, r3, #24
 8005b6c:	b2da      	uxtb	r2, r3
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f001 fe66 	bl	800784c <SDMMC_CmdBlockLength>
 8005b80:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d00d      	beq.n	8005ba4 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a08      	ldr	r2, [pc, #32]	; (8005bb0 <HAL_SD_GetCardStatus+0x168>)
 8005b8e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b94:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8005ba4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3750      	adds	r7, #80	; 0x50
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	1fe00fff 	.word	0x1fe00fff

08005bb4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005bb4:	b5b0      	push	{r4, r5, r7, lr}
 8005bb6:	b090      	sub	sp, #64	; 0x40
 8005bb8:	af04      	add	r7, sp, #16
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2203      	movs	r2, #3
 8005bc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bd0:	2b03      	cmp	r3, #3
 8005bd2:	d02e      	beq.n	8005c32 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bda:	d106      	bne.n	8005bea <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	639a      	str	r2, [r3, #56]	; 0x38
 8005be8:	e029      	b.n	8005c3e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bf0:	d10a      	bne.n	8005c08 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 fbd6 	bl	80063a4 <SD_WideBus_Enable>
 8005bf8:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c00:	431a      	orrs	r2, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	639a      	str	r2, [r3, #56]	; 0x38
 8005c06:	e01a      	b.n	8005c3e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d10a      	bne.n	8005c24 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 fc13 	bl	800643a <SD_WideBus_Disable>
 8005c14:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1c:	431a      	orrs	r2, r3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	639a      	str	r2, [r3, #56]	; 0x38
 8005c22:	e00c      	b.n	8005c3e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c28:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	639a      	str	r2, [r3, #56]	; 0x38
 8005c30:	e005      	b.n	8005c3e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c36:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d007      	beq.n	8005c56 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a60      	ldr	r2, [pc, #384]	; (8005dcc <HAL_SD_ConfigWideBusOperation+0x218>)
 8005c4c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005c54:	e097      	b.n	8005d86 <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8005c56:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005c5a:	f7fd fff7 	bl	8003c4c <HAL_RCCEx_GetPeriphCLKFreq>
 8005c5e:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8005c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	f000 8086 	beq.w	8005d74 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	695a      	ldr	r2, [r3, #20]
 8005c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c84:	4952      	ldr	r1, [pc, #328]	; (8005dd0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005c86:	fba1 1303 	umull	r1, r3, r1, r3
 8005c8a:	0e1b      	lsrs	r3, r3, #24
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d303      	bcc.n	8005c98 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	695b      	ldr	r3, [r3, #20]
 8005c94:	61fb      	str	r3, [r7, #28]
 8005c96:	e05a      	b.n	8005d4e <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ca0:	d103      	bne.n	8005caa <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	695b      	ldr	r3, [r3, #20]
 8005ca6:	61fb      	str	r3, [r7, #28]
 8005ca8:	e051      	b.n	8005d4e <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cb2:	d126      	bne.n	8005d02 <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	695b      	ldr	r3, [r3, #20]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d10e      	bne.n	8005cda <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8005cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbe:	4a45      	ldr	r2, [pc, #276]	; (8005dd4 <HAL_SD_ConfigWideBusOperation+0x220>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d906      	bls.n	8005cd2 <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc6:	4a42      	ldr	r2, [pc, #264]	; (8005dd0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8005ccc:	0e5b      	lsrs	r3, r3, #25
 8005cce:	61fb      	str	r3, [r7, #28]
 8005cd0:	e03d      	b.n	8005d4e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	695b      	ldr	r3, [r3, #20]
 8005cd6:	61fb      	str	r3, [r7, #28]
 8005cd8:	e039      	b.n	8005d4e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	005b      	lsls	r3, r3, #1
 8005ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce6:	4a3b      	ldr	r2, [pc, #236]	; (8005dd4 <HAL_SD_ConfigWideBusOperation+0x220>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d906      	bls.n	8005cfa <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8005cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cee:	4a38      	ldr	r2, [pc, #224]	; (8005dd0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf4:	0e5b      	lsrs	r3, r3, #25
 8005cf6:	61fb      	str	r3, [r7, #28]
 8005cf8:	e029      	b.n	8005d4e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	695b      	ldr	r3, [r3, #20]
 8005cfe:	61fb      	str	r3, [r7, #28]
 8005d00:	e025      	b.n	8005d4e <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	695b      	ldr	r3, [r3, #20]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d10e      	bne.n	8005d28 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8005d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0c:	4a32      	ldr	r2, [pc, #200]	; (8005dd8 <HAL_SD_ConfigWideBusOperation+0x224>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d906      	bls.n	8005d20 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8005d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d14:	4a2e      	ldr	r2, [pc, #184]	; (8005dd0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005d16:	fba2 2303 	umull	r2, r3, r2, r3
 8005d1a:	0e1b      	lsrs	r3, r3, #24
 8005d1c:	61fb      	str	r3, [r7, #28]
 8005d1e:	e016      	b.n	8005d4e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	695b      	ldr	r3, [r3, #20]
 8005d24:	61fb      	str	r3, [r7, #28]
 8005d26:	e012      	b.n	8005d4e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	695b      	ldr	r3, [r3, #20]
 8005d2c:	005b      	lsls	r3, r3, #1
 8005d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d34:	4a28      	ldr	r2, [pc, #160]	; (8005dd8 <HAL_SD_ConfigWideBusOperation+0x224>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d906      	bls.n	8005d48 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3c:	4a24      	ldr	r2, [pc, #144]	; (8005dd0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d42:	0e1b      	lsrs	r3, r3, #24
 8005d44:	61fb      	str	r3, [r7, #28]
 8005d46:	e002      	b.n	8005d4e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	695b      	ldr	r3, [r3, #20]
 8005d4c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	699b      	ldr	r3, [r3, #24]
 8005d52:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681d      	ldr	r5, [r3, #0]
 8005d58:	466c      	mov	r4, sp
 8005d5a:	f107 0318 	add.w	r3, r7, #24
 8005d5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005d62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005d66:	f107 030c 	add.w	r3, r7, #12
 8005d6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d6c:	4628      	mov	r0, r5
 8005d6e:	f001 fc9f 	bl	80076b0 <SDMMC_Init>
 8005d72:	e008      	b.n	8005d86 <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d78:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f001 fd5c 	bl	800784c <SDMMC_CmdBlockLength>
 8005d94:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00c      	beq.n	8005db6 <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a0a      	ldr	r2, [pc, #40]	; (8005dcc <HAL_SD_ConfigWideBusOperation+0x218>)
 8005da2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005daa:	431a      	orrs	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8005dbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3730      	adds	r7, #48	; 0x30
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bdb0      	pop	{r4, r5, r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	1fe00fff 	.word	0x1fe00fff
 8005dd0:	55e63b89 	.word	0x55e63b89
 8005dd4:	02faf080 	.word	0x02faf080
 8005dd8:	017d7840 	.word	0x017d7840

08005ddc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b086      	sub	sp, #24
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005de4:	2300      	movs	r3, #0
 8005de6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005de8:	f107 030c 	add.w	r3, r7, #12
 8005dec:	4619      	mov	r1, r3
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 fab0 	bl	8006354 <SD_SendStatus>
 8005df4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d005      	beq.n	8005e08 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	431a      	orrs	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	0a5b      	lsrs	r3, r3, #9
 8005e0c:	f003 030f 	and.w	r3, r3, #15
 8005e10:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005e12:	693b      	ldr	r3, [r7, #16]
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3718      	adds	r7, #24
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005e1c:	b5b0      	push	{r4, r5, r7, lr}
 8005e1e:	b090      	sub	sp, #64	; 0x40
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005e24:	2301      	movs	r3, #1
 8005e26:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f001 fc88 	bl	8007742 <SDMMC_GetPowerState>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d102      	bne.n	8005e3e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005e38:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005e3c:	e0a9      	b.n	8005f92 <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e42:	2b03      	cmp	r3, #3
 8005e44:	d02e      	beq.n	8005ea4 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f001 fe0b 	bl	8007a66 <SDMMC_CmdSendCID>
 8005e50:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d001      	beq.n	8005e5c <SD_InitCard+0x40>
    {
      return errorstate;
 8005e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e5a:	e09a      	b.n	8005f92 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2100      	movs	r1, #0
 8005e62:	4618      	mov	r0, r3
 8005e64:	f001 fcb3 	bl	80077ce <SDMMC_GetResponse>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2104      	movs	r1, #4
 8005e74:	4618      	mov	r0, r3
 8005e76:	f001 fcaa 	bl	80077ce <SDMMC_GetResponse>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2108      	movs	r1, #8
 8005e86:	4618      	mov	r0, r3
 8005e88:	f001 fca1 	bl	80077ce <SDMMC_GetResponse>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	210c      	movs	r1, #12
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f001 fc98 	bl	80077ce <SDMMC_GetResponse>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ea8:	2b03      	cmp	r3, #3
 8005eaa:	d00d      	beq.n	8005ec8 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f107 020e 	add.w	r2, r7, #14
 8005eb4:	4611      	mov	r1, r2
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f001 fe14 	bl	8007ae4 <SDMMC_CmdSetRelAdd>
 8005ebc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d001      	beq.n	8005ec8 <SD_InitCard+0xac>
    {
      return errorstate;
 8005ec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ec6:	e064      	b.n	8005f92 <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ecc:	2b03      	cmp	r3, #3
 8005ece:	d036      	beq.n	8005f3e <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005ed0:	89fb      	ldrh	r3, [r7, #14]
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ee0:	041b      	lsls	r3, r3, #16
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	4610      	mov	r0, r2
 8005ee6:	f001 fddd 	bl	8007aa4 <SDMMC_CmdSendCSD>
 8005eea:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d001      	beq.n	8005ef6 <SD_InitCard+0xda>
    {
      return errorstate;
 8005ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ef4:	e04d      	b.n	8005f92 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2100      	movs	r1, #0
 8005efc:	4618      	mov	r0, r3
 8005efe:	f001 fc66 	bl	80077ce <SDMMC_GetResponse>
 8005f02:	4602      	mov	r2, r0
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2104      	movs	r1, #4
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f001 fc5d 	bl	80077ce <SDMMC_GetResponse>
 8005f14:	4602      	mov	r2, r0
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2108      	movs	r1, #8
 8005f20:	4618      	mov	r0, r3
 8005f22:	f001 fc54 	bl	80077ce <SDMMC_GetResponse>
 8005f26:	4602      	mov	r2, r0
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	210c      	movs	r1, #12
 8005f32:	4618      	mov	r0, r3
 8005f34:	f001 fc4b 	bl	80077ce <SDMMC_GetResponse>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2104      	movs	r1, #4
 8005f44:	4618      	mov	r0, r3
 8005f46:	f001 fc42 	bl	80077ce <SDMMC_GetResponse>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	0d1a      	lsrs	r2, r3, #20
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005f52:	f107 0310 	add.w	r3, r7, #16
 8005f56:	4619      	mov	r1, r3
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f7ff fbd1 	bl	8005700 <HAL_SD_GetCardCSD>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d002      	beq.n	8005f6a <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005f64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005f68:	e013      	b.n	8005f92 <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6819      	ldr	r1, [r3, #0]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f72:	041b      	lsls	r3, r3, #16
 8005f74:	2200      	movs	r2, #0
 8005f76:	461c      	mov	r4, r3
 8005f78:	4615      	mov	r5, r2
 8005f7a:	4622      	mov	r2, r4
 8005f7c:	462b      	mov	r3, r5
 8005f7e:	4608      	mov	r0, r1
 8005f80:	f001 fc87 	bl	8007892 <SDMMC_CmdSelDesel>
 8005f84:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d001      	beq.n	8005f90 <SD_InitCard+0x174>
  {
    return errorstate;
 8005f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f8e:	e000      	b.n	8005f92 <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3740      	adds	r7, #64	; 0x40
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005f9c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b088      	sub	sp, #32
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	61fb      	str	r3, [r7, #28]
 8005fac:	2300      	movs	r3, #0
 8005fae:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 8005fb0:	f7fb fcec 	bl	800198c <HAL_GetTick>
 8005fb4:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f001 fc8d 	bl	80078da <SDMMC_CmdGoIdleState>
 8005fc0:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d001      	beq.n	8005fcc <SD_PowerON+0x30>
  {
    return errorstate;
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	e0ed      	b.n	80061a8 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f001 fca0 	bl	8007916 <SDMMC_CmdOperCond>
 8005fd6:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d00d      	beq.n	8005ffa <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f001 fc76 	bl	80078da <SDMMC_CmdGoIdleState>
 8005fee:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d004      	beq.n	8006000 <SD_PowerON+0x64>
    {
      return errorstate;
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	e0d6      	b.n	80061a8 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006004:	2b01      	cmp	r3, #1
 8006006:	d137      	bne.n	8006078 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2100      	movs	r1, #0
 800600e:	4618      	mov	r0, r3
 8006010:	f001 fca1 	bl	8007956 <SDMMC_CmdAppCommand>
 8006014:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d02d      	beq.n	8006078 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800601c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006020:	e0c2      	b.n	80061a8 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2100      	movs	r1, #0
 8006028:	4618      	mov	r0, r3
 800602a:	f001 fc94 	bl	8007956 <SDMMC_CmdAppCommand>
 800602e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d001      	beq.n	800603a <SD_PowerON+0x9e>
    {
      return errorstate;
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	e0b6      	b.n	80061a8 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	495c      	ldr	r1, [pc, #368]	; (80061b0 <SD_PowerON+0x214>)
 8006040:	4618      	mov	r0, r3
 8006042:	f001 fcab 	bl	800799c <SDMMC_CmdAppOperCommand>
 8006046:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d002      	beq.n	8006054 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800604e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006052:	e0a9      	b.n	80061a8 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2100      	movs	r1, #0
 800605a:	4618      	mov	r0, r3
 800605c:	f001 fbb7 	bl	80077ce <SDMMC_GetResponse>
 8006060:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	0fdb      	lsrs	r3, r3, #31
 8006066:	2b01      	cmp	r3, #1
 8006068:	d101      	bne.n	800606e <SD_PowerON+0xd2>
 800606a:	2301      	movs	r3, #1
 800606c:	e000      	b.n	8006070 <SD_PowerON+0xd4>
 800606e:	2300      	movs	r3, #0
 8006070:	61bb      	str	r3, [r7, #24]

    count++;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	3301      	adds	r3, #1
 8006076:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800607e:	4293      	cmp	r3, r2
 8006080:	d802      	bhi.n	8006088 <SD_PowerON+0xec>
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d0cc      	beq.n	8006022 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800608e:	4293      	cmp	r3, r2
 8006090:	d902      	bls.n	8006098 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006092:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006096:	e087      	b.n	80061a8 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d07e      	beq.n	80061a0 <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2201      	movs	r2, #1
 80060a6:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	699b      	ldr	r3, [r3, #24]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d17a      	bne.n	80061a6 <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d075      	beq.n	80061a6 <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060c0:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f042 0208 	orr.w	r2, r2, #8
 80060d0:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4618      	mov	r0, r3
 80060d8:	f001 fd6b 	bl	8007bb2 <SDMMC_CmdVoltageSwitch>
 80060dc:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00c      	beq.n	80060fe <SD_PowerON+0x162>
        {
          return errorstate;
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	e05f      	b.n	80061a8 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80060e8:	f7fb fc50 	bl	800198c <HAL_GetTick>
 80060ec:	4602      	mov	r2, r0
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f6:	d102      	bne.n	80060fe <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 80060f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80060fc:	e054      	b.n	80061a8 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006104:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006108:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800610c:	d1ec      	bne.n	80060e8 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006116:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800611e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006122:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006126:	d002      	beq.n	800612e <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8006128:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800612c:	e03c      	b.n	80061a8 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 800612e:	2001      	movs	r0, #1
 8006130:	f000 fa9e 	bl	8006670 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f042 0204 	orr.w	r2, r2, #4
 8006142:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8006144:	e00a      	b.n	800615c <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006146:	f7fb fc21 	bl	800198c <HAL_GetTick>
 800614a:	4602      	mov	r2, r0
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006154:	d102      	bne.n	800615c <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8006156:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800615a:	e025      	b.n	80061a8 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006166:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800616a:	d1ec      	bne.n	8006146 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006174:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800617c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006180:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006184:	d102      	bne.n	800618c <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006186:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800618a:	e00d      	b.n	80061a8 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2213      	movs	r2, #19
 8006192:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f04f 32ff 	mov.w	r2, #4294967295
 800619c:	639a      	str	r2, [r3, #56]	; 0x38
 800619e:	e002      	b.n	80061a6 <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3720      	adds	r7, #32
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	c1100000 	.word	0xc1100000

080061b4 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b08c      	sub	sp, #48	; 0x30
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80061be:	f7fb fbe5 	bl	800198c <HAL_GetTick>
 80061c2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2100      	movs	r1, #0
 80061ce:	4618      	mov	r0, r3
 80061d0:	f001 fafd 	bl	80077ce <SDMMC_GetResponse>
 80061d4:	4603      	mov	r3, r0
 80061d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061de:	d102      	bne.n	80061e6 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80061e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80061e4:	e0b0      	b.n	8006348 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2140      	movs	r1, #64	; 0x40
 80061ec:	4618      	mov	r0, r3
 80061ee:	f001 fb2d 	bl	800784c <SDMMC_CmdBlockLength>
 80061f2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80061f4:	6a3b      	ldr	r3, [r7, #32]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d005      	beq.n	8006206 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8006202:	6a3b      	ldr	r3, [r7, #32]
 8006204:	e0a0      	b.n	8006348 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800620e:	041b      	lsls	r3, r3, #16
 8006210:	4619      	mov	r1, r3
 8006212:	4610      	mov	r0, r2
 8006214:	f001 fb9f 	bl	8007956 <SDMMC_CmdAppCommand>
 8006218:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800621a:	6a3b      	ldr	r3, [r7, #32]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d005      	beq.n	800622c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8006228:	6a3b      	ldr	r3, [r7, #32]
 800622a:	e08d      	b.n	8006348 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800622c:	f04f 33ff 	mov.w	r3, #4294967295
 8006230:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8006232:	2340      	movs	r3, #64	; 0x40
 8006234:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8006236:	2360      	movs	r3, #96	; 0x60
 8006238:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800623a:	2302      	movs	r3, #2
 800623c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800623e:	2300      	movs	r3, #0
 8006240:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006242:	2301      	movs	r3, #1
 8006244:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f107 0208 	add.w	r2, r7, #8
 800624e:	4611      	mov	r1, r2
 8006250:	4618      	mov	r0, r3
 8006252:	f001 facf 	bl	80077f4 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4618      	mov	r0, r3
 800625c:	f001 fc87 	bl	8007b6e <SDMMC_CmdStatusRegister>
 8006260:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006262:	6a3b      	ldr	r3, [r7, #32]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d02b      	beq.n	80062c0 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8006270:	6a3b      	ldr	r3, [r7, #32]
 8006272:	e069      	b.n	8006348 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800627a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800627e:	2b00      	cmp	r3, #0
 8006280:	d013      	beq.n	80062aa <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8006282:	2300      	movs	r3, #0
 8006284:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006286:	e00d      	b.n	80062a4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4618      	mov	r0, r3
 800628e:	f001 fa39 	bl	8007704 <SDMMC_ReadFIFO>
 8006292:	4602      	mov	r2, r0
 8006294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006296:	601a      	str	r2, [r3, #0]
        pData++;
 8006298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629a:	3304      	adds	r3, #4
 800629c:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800629e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a0:	3301      	adds	r3, #1
 80062a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a6:	2b07      	cmp	r3, #7
 80062a8:	d9ee      	bls.n	8006288 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80062aa:	f7fb fb6f 	bl	800198c <HAL_GetTick>
 80062ae:	4602      	mov	r2, r0
 80062b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b2:	1ad3      	subs	r3, r2, r3
 80062b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b8:	d102      	bne.n	80062c0 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80062ba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80062be:	e043      	b.n	8006348 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062c6:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d0d2      	beq.n	8006274 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062d4:	f003 0308 	and.w	r3, r3, #8
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d001      	beq.n	80062e0 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80062dc:	2308      	movs	r3, #8
 80062de:	e033      	b.n	8006348 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062e6:	f003 0302 	and.w	r3, r3, #2
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d001      	beq.n	80062f2 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80062ee:	2302      	movs	r3, #2
 80062f0:	e02a      	b.n	8006348 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062f8:	f003 0320 	and.w	r3, r3, #32
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d017      	beq.n	8006330 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8006300:	2320      	movs	r3, #32
 8006302:	e021      	b.n	8006348 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4618      	mov	r0, r3
 800630a:	f001 f9fb 	bl	8007704 <SDMMC_ReadFIFO>
 800630e:	4602      	mov	r2, r0
 8006310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006312:	601a      	str	r2, [r3, #0]
    pData++;
 8006314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006316:	3304      	adds	r3, #4
 8006318:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800631a:	f7fb fb37 	bl	800198c <HAL_GetTick>
 800631e:	4602      	mov	r2, r0
 8006320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006322:	1ad3      	subs	r3, r2, r3
 8006324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006328:	d102      	bne.n	8006330 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800632a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800632e:	e00b      	b.n	8006348 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006336:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d1e2      	bne.n	8006304 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a03      	ldr	r2, [pc, #12]	; (8006350 <SD_SendSDStatus+0x19c>)
 8006344:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8006346:	2300      	movs	r3, #0
}
 8006348:	4618      	mov	r0, r3
 800634a:	3730      	adds	r7, #48	; 0x30
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}
 8006350:	18000f3a 	.word	0x18000f3a

08006354 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d102      	bne.n	800636a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006364:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006368:	e018      	b.n	800639c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006372:	041b      	lsls	r3, r3, #16
 8006374:	4619      	mov	r1, r3
 8006376:	4610      	mov	r0, r2
 8006378:	f001 fbd6 	bl	8007b28 <SDMMC_CmdSendStatus>
 800637c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d001      	beq.n	8006388 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	e009      	b.n	800639c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2100      	movs	r1, #0
 800638e:	4618      	mov	r0, r3
 8006390:	f001 fa1d 	bl	80077ce <SDMMC_GetResponse>
 8006394:	4602      	mov	r2, r0
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	3710      	adds	r7, #16
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b086      	sub	sp, #24
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80063ac:	2300      	movs	r3, #0
 80063ae:	60fb      	str	r3, [r7, #12]
 80063b0:	2300      	movs	r3, #0
 80063b2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	2100      	movs	r1, #0
 80063ba:	4618      	mov	r0, r3
 80063bc:	f001 fa07 	bl	80077ce <SDMMC_GetResponse>
 80063c0:	4603      	mov	r3, r0
 80063c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063ca:	d102      	bne.n	80063d2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80063cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80063d0:	e02f      	b.n	8006432 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80063d2:	f107 030c 	add.w	r3, r7, #12
 80063d6:	4619      	mov	r1, r3
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 f879 	bl	80064d0 <SD_FindSCR>
 80063de:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d001      	beq.n	80063ea <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	e023      	b.n	8006432 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d01c      	beq.n	800642e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063fc:	041b      	lsls	r3, r3, #16
 80063fe:	4619      	mov	r1, r3
 8006400:	4610      	mov	r0, r2
 8006402:	f001 faa8 	bl	8007956 <SDMMC_CmdAppCommand>
 8006406:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d001      	beq.n	8006412 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	e00f      	b.n	8006432 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2102      	movs	r1, #2
 8006418:	4618      	mov	r0, r3
 800641a:	f001 fadf 	bl	80079dc <SDMMC_CmdBusWidth>
 800641e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d001      	beq.n	800642a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	e003      	b.n	8006432 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800642a:	2300      	movs	r3, #0
 800642c:	e001      	b.n	8006432 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800642e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006432:	4618      	mov	r0, r3
 8006434:	3718      	adds	r7, #24
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}

0800643a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800643a:	b580      	push	{r7, lr}
 800643c:	b086      	sub	sp, #24
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006442:	2300      	movs	r3, #0
 8006444:	60fb      	str	r3, [r7, #12]
 8006446:	2300      	movs	r3, #0
 8006448:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2100      	movs	r1, #0
 8006450:	4618      	mov	r0, r3
 8006452:	f001 f9bc 	bl	80077ce <SDMMC_GetResponse>
 8006456:	4603      	mov	r3, r0
 8006458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800645c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006460:	d102      	bne.n	8006468 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006462:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006466:	e02f      	b.n	80064c8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006468:	f107 030c 	add.w	r3, r7, #12
 800646c:	4619      	mov	r1, r3
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 f82e 	bl	80064d0 <SD_FindSCR>
 8006474:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d001      	beq.n	8006480 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	e023      	b.n	80064c8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006486:	2b00      	cmp	r3, #0
 8006488:	d01c      	beq.n	80064c4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006492:	041b      	lsls	r3, r3, #16
 8006494:	4619      	mov	r1, r3
 8006496:	4610      	mov	r0, r2
 8006498:	f001 fa5d 	bl	8007956 <SDMMC_CmdAppCommand>
 800649c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d001      	beq.n	80064a8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	e00f      	b.n	80064c8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2100      	movs	r1, #0
 80064ae:	4618      	mov	r0, r3
 80064b0:	f001 fa94 	bl	80079dc <SDMMC_CmdBusWidth>
 80064b4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d001      	beq.n	80064c0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	e003      	b.n	80064c8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80064c0:	2300      	movs	r3, #0
 80064c2:	e001      	b.n	80064c8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80064c4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3718      	adds	r7, #24
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b08e      	sub	sp, #56	; 0x38
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80064da:	f7fb fa57 	bl	800198c <HAL_GetTick>
 80064de:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80064e0:	2300      	movs	r3, #0
 80064e2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80064e4:	2300      	movs	r3, #0
 80064e6:	60bb      	str	r3, [r7, #8]
 80064e8:	2300      	movs	r3, #0
 80064ea:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2108      	movs	r1, #8
 80064f6:	4618      	mov	r0, r3
 80064f8:	f001 f9a8 	bl	800784c <SDMMC_CmdBlockLength>
 80064fc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80064fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006500:	2b00      	cmp	r3, #0
 8006502:	d001      	beq.n	8006508 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006506:	e0ad      	b.n	8006664 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006510:	041b      	lsls	r3, r3, #16
 8006512:	4619      	mov	r1, r3
 8006514:	4610      	mov	r0, r2
 8006516:	f001 fa1e 	bl	8007956 <SDMMC_CmdAppCommand>
 800651a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800651c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651e:	2b00      	cmp	r3, #0
 8006520:	d001      	beq.n	8006526 <SD_FindSCR+0x56>
  {
    return errorstate;
 8006522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006524:	e09e      	b.n	8006664 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006526:	f04f 33ff 	mov.w	r3, #4294967295
 800652a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800652c:	2308      	movs	r3, #8
 800652e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8006530:	2330      	movs	r3, #48	; 0x30
 8006532:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006534:	2302      	movs	r3, #2
 8006536:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006538:	2300      	movs	r3, #0
 800653a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800653c:	2301      	movs	r3, #1
 800653e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f107 0210 	add.w	r2, r7, #16
 8006548:	4611      	mov	r1, r2
 800654a:	4618      	mov	r0, r3
 800654c:	f001 f952 	bl	80077f4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4618      	mov	r0, r3
 8006556:	f001 fa64 	bl	8007a22 <SDMMC_CmdSendSCR>
 800655a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800655c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800655e:	2b00      	cmp	r3, #0
 8006560:	d027      	beq.n	80065b2 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8006562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006564:	e07e      	b.n	8006664 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800656c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006570:	2b00      	cmp	r3, #0
 8006572:	d113      	bne.n	800659c <SD_FindSCR+0xcc>
 8006574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006576:	2b00      	cmp	r3, #0
 8006578:	d110      	bne.n	800659c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4618      	mov	r0, r3
 8006580:	f001 f8c0 	bl	8007704 <SDMMC_ReadFIFO>
 8006584:	4603      	mov	r3, r0
 8006586:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4618      	mov	r0, r3
 800658e:	f001 f8b9 	bl	8007704 <SDMMC_ReadFIFO>
 8006592:	4603      	mov	r3, r0
 8006594:	60fb      	str	r3, [r7, #12]
      index++;
 8006596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006598:	3301      	adds	r3, #1
 800659a:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800659c:	f7fb f9f6 	bl	800198c <HAL_GetTick>
 80065a0:	4602      	mov	r2, r0
 80065a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065aa:	d102      	bne.n	80065b2 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80065ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80065b0:	e058      	b.n	8006664 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065b8:	f240 532a 	movw	r3, #1322	; 0x52a
 80065bc:	4013      	ands	r3, r2
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d0d1      	beq.n	8006566 <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065c8:	f003 0308 	and.w	r3, r3, #8
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d005      	beq.n	80065dc <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2208      	movs	r2, #8
 80065d6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80065d8:	2308      	movs	r3, #8
 80065da:	e043      	b.n	8006664 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065e2:	f003 0302 	and.w	r3, r3, #2
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d005      	beq.n	80065f6 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2202      	movs	r2, #2
 80065f0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80065f2:	2302      	movs	r3, #2
 80065f4:	e036      	b.n	8006664 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065fc:	f003 0320 	and.w	r3, r3, #32
 8006600:	2b00      	cmp	r3, #0
 8006602:	d005      	beq.n	8006610 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	2220      	movs	r2, #32
 800660a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800660c:	2320      	movs	r3, #32
 800660e:	e029      	b.n	8006664 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a15      	ldr	r2, [pc, #84]	; (800666c <SD_FindSCR+0x19c>)
 8006616:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	061a      	lsls	r2, r3, #24
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	021b      	lsls	r3, r3, #8
 8006620:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006624:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	0a1b      	lsrs	r3, r3, #8
 800662a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800662e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	0e1b      	lsrs	r3, r3, #24
 8006634:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006638:	601a      	str	r2, [r3, #0]
    scr++;
 800663a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663c:	3304      	adds	r3, #4
 800663e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	061a      	lsls	r2, r3, #24
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	021b      	lsls	r3, r3, #8
 8006648:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800664c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	0a1b      	lsrs	r3, r3, #8
 8006652:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006656:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	0e1b      	lsrs	r3, r3, #24
 800665c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800665e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006660:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006662:	2300      	movs	r3, #0
}
 8006664:	4618      	mov	r0, r3
 8006666:	3738      	adds	r7, #56	; 0x38
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}
 800666c:	18000f3a 	.word	0x18000f3a

08006670 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	4603      	mov	r3, r0
 8006678:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 800667a:	bf00      	nop
 800667c:	370c      	adds	r7, #12
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr

08006686 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006686:	b580      	push	{r7, lr}
 8006688:	b084      	sub	sp, #16
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d101      	bne.n	8006698 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	e095      	b.n	80067c4 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669c:	2b00      	cmp	r3, #0
 800669e:	d108      	bne.n	80066b2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066a8:	d009      	beq.n	80066be <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	61da      	str	r2, [r3, #28]
 80066b0:	e005      	b.n	80066be <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d106      	bne.n	80066de <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f7fa fd9b 	bl	8001214 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2202      	movs	r2, #2
 80066e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066f4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80066fe:	d902      	bls.n	8006706 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006700:	2300      	movs	r3, #0
 8006702:	60fb      	str	r3, [r7, #12]
 8006704:	e002      	b.n	800670c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006706:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800670a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006714:	d007      	beq.n	8006726 <HAL_SPI_Init+0xa0>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800671e:	d002      	beq.n	8006726 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006736:	431a      	orrs	r2, r3
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	f003 0302 	and.w	r3, r3, #2
 8006740:	431a      	orrs	r2, r3
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	695b      	ldr	r3, [r3, #20]
 8006746:	f003 0301 	and.w	r3, r3, #1
 800674a:	431a      	orrs	r2, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	699b      	ldr	r3, [r3, #24]
 8006750:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006754:	431a      	orrs	r2, r3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	69db      	ldr	r3, [r3, #28]
 800675a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800675e:	431a      	orrs	r2, r3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a1b      	ldr	r3, [r3, #32]
 8006764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006768:	ea42 0103 	orr.w	r1, r2, r3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006770:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	430a      	orrs	r2, r1
 800677a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	699b      	ldr	r3, [r3, #24]
 8006780:	0c1b      	lsrs	r3, r3, #16
 8006782:	f003 0204 	and.w	r2, r3, #4
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678a:	f003 0310 	and.w	r3, r3, #16
 800678e:	431a      	orrs	r2, r3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006794:	f003 0308 	and.w	r3, r3, #8
 8006798:	431a      	orrs	r2, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80067a2:	ea42 0103 	orr.w	r1, r2, r3
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	430a      	orrs	r2, r1
 80067b2:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2201      	movs	r2, #1
 80067be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80067c2:	2300      	movs	r3, #0
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3710      	adds	r7, #16
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d101      	bne.n	80067e2 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e038      	b.n	8006854 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d106      	bne.n	80067fc <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80067f6:	68f8      	ldr	r0, [r7, #12]
 80067f8:	f7fa ff3e 	bl	8001678 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	3308      	adds	r3, #8
 8006804:	4619      	mov	r1, r3
 8006806:	4610      	mov	r0, r2
 8006808:	f000 fe2c 	bl	8007464 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6818      	ldr	r0, [r3, #0]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	461a      	mov	r2, r3
 8006816:	68b9      	ldr	r1, [r7, #8]
 8006818:	f000 febe 	bl	8007598 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6858      	ldr	r0, [r3, #4]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	689a      	ldr	r2, [r3, #8]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006828:	6879      	ldr	r1, [r7, #4]
 800682a:	f000 ff07 	bl	800763c <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	6892      	ldr	r2, [r2, #8]
 8006836:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	6892      	ldr	r2, [r2, #8]
 8006842:	f041 0101 	orr.w	r1, r1, #1
 8006846:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8006852:	2300      	movs	r3, #0
}
 8006854:	4618      	mov	r0, r3
 8006856:	3710      	adds	r7, #16
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d101      	bne.n	800686e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e042      	b.n	80068f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006874:	2b00      	cmp	r3, #0
 8006876:	d106      	bne.n	8006886 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f7fa fd29 	bl	80012d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2224      	movs	r2, #36	; 0x24
 800688a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f022 0201 	bic.w	r2, r2, #1
 800689c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 f82c 	bl	80068fc <UART_SetConfig>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d101      	bne.n	80068ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e022      	b.n	80068f4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d002      	beq.n	80068bc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 fb1c 	bl	8006ef4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	685a      	ldr	r2, [r3, #4]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	689a      	ldr	r2, [r3, #8]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f042 0201 	orr.w	r2, r2, #1
 80068ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 fba3 	bl	8007038 <UART_CheckIdleState>
 80068f2:	4603      	mov	r3, r0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3708      	adds	r7, #8
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006900:	b08c      	sub	sp, #48	; 0x30
 8006902:	af00      	add	r7, sp, #0
 8006904:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006906:	2300      	movs	r3, #0
 8006908:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	689a      	ldr	r2, [r3, #8]
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	691b      	ldr	r3, [r3, #16]
 8006914:	431a      	orrs	r2, r3
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	695b      	ldr	r3, [r3, #20]
 800691a:	431a      	orrs	r2, r3
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	69db      	ldr	r3, [r3, #28]
 8006920:	4313      	orrs	r3, r2
 8006922:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	4baa      	ldr	r3, [pc, #680]	; (8006bd4 <UART_SetConfig+0x2d8>)
 800692c:	4013      	ands	r3, r2
 800692e:	697a      	ldr	r2, [r7, #20]
 8006930:	6812      	ldr	r2, [r2, #0]
 8006932:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006934:	430b      	orrs	r3, r1
 8006936:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	68da      	ldr	r2, [r3, #12]
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	430a      	orrs	r2, r1
 800694c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	699b      	ldr	r3, [r3, #24]
 8006952:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a9f      	ldr	r2, [pc, #636]	; (8006bd8 <UART_SetConfig+0x2dc>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d004      	beq.n	8006968 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	6a1b      	ldr	r3, [r3, #32]
 8006962:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006964:	4313      	orrs	r3, r2
 8006966:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006972:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006976:	697a      	ldr	r2, [r7, #20]
 8006978:	6812      	ldr	r2, [r2, #0]
 800697a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800697c:	430b      	orrs	r3, r1
 800697e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006986:	f023 010f 	bic.w	r1, r3, #15
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	430a      	orrs	r2, r1
 8006994:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a90      	ldr	r2, [pc, #576]	; (8006bdc <UART_SetConfig+0x2e0>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d125      	bne.n	80069ec <UART_SetConfig+0xf0>
 80069a0:	4b8f      	ldr	r3, [pc, #572]	; (8006be0 <UART_SetConfig+0x2e4>)
 80069a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069a6:	f003 0303 	and.w	r3, r3, #3
 80069aa:	2b03      	cmp	r3, #3
 80069ac:	d81a      	bhi.n	80069e4 <UART_SetConfig+0xe8>
 80069ae:	a201      	add	r2, pc, #4	; (adr r2, 80069b4 <UART_SetConfig+0xb8>)
 80069b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b4:	080069c5 	.word	0x080069c5
 80069b8:	080069d5 	.word	0x080069d5
 80069bc:	080069cd 	.word	0x080069cd
 80069c0:	080069dd 	.word	0x080069dd
 80069c4:	2301      	movs	r3, #1
 80069c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069ca:	e116      	b.n	8006bfa <UART_SetConfig+0x2fe>
 80069cc:	2302      	movs	r3, #2
 80069ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069d2:	e112      	b.n	8006bfa <UART_SetConfig+0x2fe>
 80069d4:	2304      	movs	r3, #4
 80069d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069da:	e10e      	b.n	8006bfa <UART_SetConfig+0x2fe>
 80069dc:	2308      	movs	r3, #8
 80069de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069e2:	e10a      	b.n	8006bfa <UART_SetConfig+0x2fe>
 80069e4:	2310      	movs	r3, #16
 80069e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069ea:	e106      	b.n	8006bfa <UART_SetConfig+0x2fe>
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a7c      	ldr	r2, [pc, #496]	; (8006be4 <UART_SetConfig+0x2e8>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d138      	bne.n	8006a68 <UART_SetConfig+0x16c>
 80069f6:	4b7a      	ldr	r3, [pc, #488]	; (8006be0 <UART_SetConfig+0x2e4>)
 80069f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069fc:	f003 030c 	and.w	r3, r3, #12
 8006a00:	2b0c      	cmp	r3, #12
 8006a02:	d82d      	bhi.n	8006a60 <UART_SetConfig+0x164>
 8006a04:	a201      	add	r2, pc, #4	; (adr r2, 8006a0c <UART_SetConfig+0x110>)
 8006a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a0a:	bf00      	nop
 8006a0c:	08006a41 	.word	0x08006a41
 8006a10:	08006a61 	.word	0x08006a61
 8006a14:	08006a61 	.word	0x08006a61
 8006a18:	08006a61 	.word	0x08006a61
 8006a1c:	08006a51 	.word	0x08006a51
 8006a20:	08006a61 	.word	0x08006a61
 8006a24:	08006a61 	.word	0x08006a61
 8006a28:	08006a61 	.word	0x08006a61
 8006a2c:	08006a49 	.word	0x08006a49
 8006a30:	08006a61 	.word	0x08006a61
 8006a34:	08006a61 	.word	0x08006a61
 8006a38:	08006a61 	.word	0x08006a61
 8006a3c:	08006a59 	.word	0x08006a59
 8006a40:	2300      	movs	r3, #0
 8006a42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a46:	e0d8      	b.n	8006bfa <UART_SetConfig+0x2fe>
 8006a48:	2302      	movs	r3, #2
 8006a4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a4e:	e0d4      	b.n	8006bfa <UART_SetConfig+0x2fe>
 8006a50:	2304      	movs	r3, #4
 8006a52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a56:	e0d0      	b.n	8006bfa <UART_SetConfig+0x2fe>
 8006a58:	2308      	movs	r3, #8
 8006a5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a5e:	e0cc      	b.n	8006bfa <UART_SetConfig+0x2fe>
 8006a60:	2310      	movs	r3, #16
 8006a62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a66:	e0c8      	b.n	8006bfa <UART_SetConfig+0x2fe>
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a5e      	ldr	r2, [pc, #376]	; (8006be8 <UART_SetConfig+0x2ec>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d125      	bne.n	8006abe <UART_SetConfig+0x1c2>
 8006a72:	4b5b      	ldr	r3, [pc, #364]	; (8006be0 <UART_SetConfig+0x2e4>)
 8006a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a78:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006a7c:	2b30      	cmp	r3, #48	; 0x30
 8006a7e:	d016      	beq.n	8006aae <UART_SetConfig+0x1b2>
 8006a80:	2b30      	cmp	r3, #48	; 0x30
 8006a82:	d818      	bhi.n	8006ab6 <UART_SetConfig+0x1ba>
 8006a84:	2b20      	cmp	r3, #32
 8006a86:	d00a      	beq.n	8006a9e <UART_SetConfig+0x1a2>
 8006a88:	2b20      	cmp	r3, #32
 8006a8a:	d814      	bhi.n	8006ab6 <UART_SetConfig+0x1ba>
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d002      	beq.n	8006a96 <UART_SetConfig+0x19a>
 8006a90:	2b10      	cmp	r3, #16
 8006a92:	d008      	beq.n	8006aa6 <UART_SetConfig+0x1aa>
 8006a94:	e00f      	b.n	8006ab6 <UART_SetConfig+0x1ba>
 8006a96:	2300      	movs	r3, #0
 8006a98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a9c:	e0ad      	b.n	8006bfa <UART_SetConfig+0x2fe>
 8006a9e:	2302      	movs	r3, #2
 8006aa0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006aa4:	e0a9      	b.n	8006bfa <UART_SetConfig+0x2fe>
 8006aa6:	2304      	movs	r3, #4
 8006aa8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006aac:	e0a5      	b.n	8006bfa <UART_SetConfig+0x2fe>
 8006aae:	2308      	movs	r3, #8
 8006ab0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ab4:	e0a1      	b.n	8006bfa <UART_SetConfig+0x2fe>
 8006ab6:	2310      	movs	r3, #16
 8006ab8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006abc:	e09d      	b.n	8006bfa <UART_SetConfig+0x2fe>
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a4a      	ldr	r2, [pc, #296]	; (8006bec <UART_SetConfig+0x2f0>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d125      	bne.n	8006b14 <UART_SetConfig+0x218>
 8006ac8:	4b45      	ldr	r3, [pc, #276]	; (8006be0 <UART_SetConfig+0x2e4>)
 8006aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ace:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006ad2:	2bc0      	cmp	r3, #192	; 0xc0
 8006ad4:	d016      	beq.n	8006b04 <UART_SetConfig+0x208>
 8006ad6:	2bc0      	cmp	r3, #192	; 0xc0
 8006ad8:	d818      	bhi.n	8006b0c <UART_SetConfig+0x210>
 8006ada:	2b80      	cmp	r3, #128	; 0x80
 8006adc:	d00a      	beq.n	8006af4 <UART_SetConfig+0x1f8>
 8006ade:	2b80      	cmp	r3, #128	; 0x80
 8006ae0:	d814      	bhi.n	8006b0c <UART_SetConfig+0x210>
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d002      	beq.n	8006aec <UART_SetConfig+0x1f0>
 8006ae6:	2b40      	cmp	r3, #64	; 0x40
 8006ae8:	d008      	beq.n	8006afc <UART_SetConfig+0x200>
 8006aea:	e00f      	b.n	8006b0c <UART_SetConfig+0x210>
 8006aec:	2300      	movs	r3, #0
 8006aee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006af2:	e082      	b.n	8006bfa <UART_SetConfig+0x2fe>
 8006af4:	2302      	movs	r3, #2
 8006af6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006afa:	e07e      	b.n	8006bfa <UART_SetConfig+0x2fe>
 8006afc:	2304      	movs	r3, #4
 8006afe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b02:	e07a      	b.n	8006bfa <UART_SetConfig+0x2fe>
 8006b04:	2308      	movs	r3, #8
 8006b06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b0a:	e076      	b.n	8006bfa <UART_SetConfig+0x2fe>
 8006b0c:	2310      	movs	r3, #16
 8006b0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b12:	e072      	b.n	8006bfa <UART_SetConfig+0x2fe>
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a35      	ldr	r2, [pc, #212]	; (8006bf0 <UART_SetConfig+0x2f4>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d12a      	bne.n	8006b74 <UART_SetConfig+0x278>
 8006b1e:	4b30      	ldr	r3, [pc, #192]	; (8006be0 <UART_SetConfig+0x2e4>)
 8006b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b2c:	d01a      	beq.n	8006b64 <UART_SetConfig+0x268>
 8006b2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b32:	d81b      	bhi.n	8006b6c <UART_SetConfig+0x270>
 8006b34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b38:	d00c      	beq.n	8006b54 <UART_SetConfig+0x258>
 8006b3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b3e:	d815      	bhi.n	8006b6c <UART_SetConfig+0x270>
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d003      	beq.n	8006b4c <UART_SetConfig+0x250>
 8006b44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b48:	d008      	beq.n	8006b5c <UART_SetConfig+0x260>
 8006b4a:	e00f      	b.n	8006b6c <UART_SetConfig+0x270>
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b52:	e052      	b.n	8006bfa <UART_SetConfig+0x2fe>
 8006b54:	2302      	movs	r3, #2
 8006b56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b5a:	e04e      	b.n	8006bfa <UART_SetConfig+0x2fe>
 8006b5c:	2304      	movs	r3, #4
 8006b5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b62:	e04a      	b.n	8006bfa <UART_SetConfig+0x2fe>
 8006b64:	2308      	movs	r3, #8
 8006b66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b6a:	e046      	b.n	8006bfa <UART_SetConfig+0x2fe>
 8006b6c:	2310      	movs	r3, #16
 8006b6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b72:	e042      	b.n	8006bfa <UART_SetConfig+0x2fe>
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a17      	ldr	r2, [pc, #92]	; (8006bd8 <UART_SetConfig+0x2dc>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d13a      	bne.n	8006bf4 <UART_SetConfig+0x2f8>
 8006b7e:	4b18      	ldr	r3, [pc, #96]	; (8006be0 <UART_SetConfig+0x2e4>)
 8006b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b84:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006b88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b8c:	d01a      	beq.n	8006bc4 <UART_SetConfig+0x2c8>
 8006b8e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b92:	d81b      	bhi.n	8006bcc <UART_SetConfig+0x2d0>
 8006b94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b98:	d00c      	beq.n	8006bb4 <UART_SetConfig+0x2b8>
 8006b9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b9e:	d815      	bhi.n	8006bcc <UART_SetConfig+0x2d0>
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d003      	beq.n	8006bac <UART_SetConfig+0x2b0>
 8006ba4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ba8:	d008      	beq.n	8006bbc <UART_SetConfig+0x2c0>
 8006baa:	e00f      	b.n	8006bcc <UART_SetConfig+0x2d0>
 8006bac:	2300      	movs	r3, #0
 8006bae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bb2:	e022      	b.n	8006bfa <UART_SetConfig+0x2fe>
 8006bb4:	2302      	movs	r3, #2
 8006bb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bba:	e01e      	b.n	8006bfa <UART_SetConfig+0x2fe>
 8006bbc:	2304      	movs	r3, #4
 8006bbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bc2:	e01a      	b.n	8006bfa <UART_SetConfig+0x2fe>
 8006bc4:	2308      	movs	r3, #8
 8006bc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bca:	e016      	b.n	8006bfa <UART_SetConfig+0x2fe>
 8006bcc:	2310      	movs	r3, #16
 8006bce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bd2:	e012      	b.n	8006bfa <UART_SetConfig+0x2fe>
 8006bd4:	cfff69f3 	.word	0xcfff69f3
 8006bd8:	40008000 	.word	0x40008000
 8006bdc:	40013800 	.word	0x40013800
 8006be0:	40021000 	.word	0x40021000
 8006be4:	40004400 	.word	0x40004400
 8006be8:	40004800 	.word	0x40004800
 8006bec:	40004c00 	.word	0x40004c00
 8006bf0:	40005000 	.word	0x40005000
 8006bf4:	2310      	movs	r3, #16
 8006bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4aae      	ldr	r2, [pc, #696]	; (8006eb8 <UART_SetConfig+0x5bc>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	f040 8097 	bne.w	8006d34 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006c0a:	2b08      	cmp	r3, #8
 8006c0c:	d823      	bhi.n	8006c56 <UART_SetConfig+0x35a>
 8006c0e:	a201      	add	r2, pc, #4	; (adr r2, 8006c14 <UART_SetConfig+0x318>)
 8006c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c14:	08006c39 	.word	0x08006c39
 8006c18:	08006c57 	.word	0x08006c57
 8006c1c:	08006c41 	.word	0x08006c41
 8006c20:	08006c57 	.word	0x08006c57
 8006c24:	08006c47 	.word	0x08006c47
 8006c28:	08006c57 	.word	0x08006c57
 8006c2c:	08006c57 	.word	0x08006c57
 8006c30:	08006c57 	.word	0x08006c57
 8006c34:	08006c4f 	.word	0x08006c4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c38:	f7fc fb8e 	bl	8003358 <HAL_RCC_GetPCLK1Freq>
 8006c3c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006c3e:	e010      	b.n	8006c62 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c40:	4b9e      	ldr	r3, [pc, #632]	; (8006ebc <UART_SetConfig+0x5c0>)
 8006c42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006c44:	e00d      	b.n	8006c62 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c46:	f7fc faf1 	bl	800322c <HAL_RCC_GetSysClockFreq>
 8006c4a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006c4c:	e009      	b.n	8006c62 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006c54:	e005      	b.n	8006c62 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006c56:	2300      	movs	r3, #0
 8006c58:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006c60:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f000 8130 	beq.w	8006eca <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6e:	4a94      	ldr	r2, [pc, #592]	; (8006ec0 <UART_SetConfig+0x5c4>)
 8006c70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c74:	461a      	mov	r2, r3
 8006c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c78:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c7c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	685a      	ldr	r2, [r3, #4]
 8006c82:	4613      	mov	r3, r2
 8006c84:	005b      	lsls	r3, r3, #1
 8006c86:	4413      	add	r3, r2
 8006c88:	69ba      	ldr	r2, [r7, #24]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d305      	bcc.n	8006c9a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c94:	69ba      	ldr	r2, [r7, #24]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d903      	bls.n	8006ca2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006ca0:	e113      	b.n	8006eca <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	60bb      	str	r3, [r7, #8]
 8006ca8:	60fa      	str	r2, [r7, #12]
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cae:	4a84      	ldr	r2, [pc, #528]	; (8006ec0 <UART_SetConfig+0x5c4>)
 8006cb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	603b      	str	r3, [r7, #0]
 8006cba:	607a      	str	r2, [r7, #4]
 8006cbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cc0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006cc4:	f7f9 faec 	bl	80002a0 <__aeabi_uldivmod>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	460b      	mov	r3, r1
 8006ccc:	4610      	mov	r0, r2
 8006cce:	4619      	mov	r1, r3
 8006cd0:	f04f 0200 	mov.w	r2, #0
 8006cd4:	f04f 0300 	mov.w	r3, #0
 8006cd8:	020b      	lsls	r3, r1, #8
 8006cda:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006cde:	0202      	lsls	r2, r0, #8
 8006ce0:	6979      	ldr	r1, [r7, #20]
 8006ce2:	6849      	ldr	r1, [r1, #4]
 8006ce4:	0849      	lsrs	r1, r1, #1
 8006ce6:	2000      	movs	r0, #0
 8006ce8:	460c      	mov	r4, r1
 8006cea:	4605      	mov	r5, r0
 8006cec:	eb12 0804 	adds.w	r8, r2, r4
 8006cf0:	eb43 0905 	adc.w	r9, r3, r5
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	469a      	mov	sl, r3
 8006cfc:	4693      	mov	fp, r2
 8006cfe:	4652      	mov	r2, sl
 8006d00:	465b      	mov	r3, fp
 8006d02:	4640      	mov	r0, r8
 8006d04:	4649      	mov	r1, r9
 8006d06:	f7f9 facb 	bl	80002a0 <__aeabi_uldivmod>
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	4613      	mov	r3, r2
 8006d10:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d12:	6a3b      	ldr	r3, [r7, #32]
 8006d14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d18:	d308      	bcc.n	8006d2c <UART_SetConfig+0x430>
 8006d1a:	6a3b      	ldr	r3, [r7, #32]
 8006d1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d20:	d204      	bcs.n	8006d2c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	6a3a      	ldr	r2, [r7, #32]
 8006d28:	60da      	str	r2, [r3, #12]
 8006d2a:	e0ce      	b.n	8006eca <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006d32:	e0ca      	b.n	8006eca <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	69db      	ldr	r3, [r3, #28]
 8006d38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d3c:	d166      	bne.n	8006e0c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006d3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006d42:	2b08      	cmp	r3, #8
 8006d44:	d827      	bhi.n	8006d96 <UART_SetConfig+0x49a>
 8006d46:	a201      	add	r2, pc, #4	; (adr r2, 8006d4c <UART_SetConfig+0x450>)
 8006d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d4c:	08006d71 	.word	0x08006d71
 8006d50:	08006d79 	.word	0x08006d79
 8006d54:	08006d81 	.word	0x08006d81
 8006d58:	08006d97 	.word	0x08006d97
 8006d5c:	08006d87 	.word	0x08006d87
 8006d60:	08006d97 	.word	0x08006d97
 8006d64:	08006d97 	.word	0x08006d97
 8006d68:	08006d97 	.word	0x08006d97
 8006d6c:	08006d8f 	.word	0x08006d8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d70:	f7fc faf2 	bl	8003358 <HAL_RCC_GetPCLK1Freq>
 8006d74:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006d76:	e014      	b.n	8006da2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d78:	f7fc fb04 	bl	8003384 <HAL_RCC_GetPCLK2Freq>
 8006d7c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006d7e:	e010      	b.n	8006da2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d80:	4b4e      	ldr	r3, [pc, #312]	; (8006ebc <UART_SetConfig+0x5c0>)
 8006d82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006d84:	e00d      	b.n	8006da2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d86:	f7fc fa51 	bl	800322c <HAL_RCC_GetSysClockFreq>
 8006d8a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006d8c:	e009      	b.n	8006da2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006d94:	e005      	b.n	8006da2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006d96:	2300      	movs	r3, #0
 8006d98:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006da0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	f000 8090 	beq.w	8006eca <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dae:	4a44      	ldr	r2, [pc, #272]	; (8006ec0 <UART_SetConfig+0x5c4>)
 8006db0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006db4:	461a      	mov	r2, r3
 8006db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006dbc:	005a      	lsls	r2, r3, #1
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	085b      	lsrs	r3, r3, #1
 8006dc4:	441a      	add	r2, r3
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dce:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dd0:	6a3b      	ldr	r3, [r7, #32]
 8006dd2:	2b0f      	cmp	r3, #15
 8006dd4:	d916      	bls.n	8006e04 <UART_SetConfig+0x508>
 8006dd6:	6a3b      	ldr	r3, [r7, #32]
 8006dd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ddc:	d212      	bcs.n	8006e04 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006dde:	6a3b      	ldr	r3, [r7, #32]
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	f023 030f 	bic.w	r3, r3, #15
 8006de6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006de8:	6a3b      	ldr	r3, [r7, #32]
 8006dea:	085b      	lsrs	r3, r3, #1
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	f003 0307 	and.w	r3, r3, #7
 8006df2:	b29a      	uxth	r2, r3
 8006df4:	8bfb      	ldrh	r3, [r7, #30]
 8006df6:	4313      	orrs	r3, r2
 8006df8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	8bfa      	ldrh	r2, [r7, #30]
 8006e00:	60da      	str	r2, [r3, #12]
 8006e02:	e062      	b.n	8006eca <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006e0a:	e05e      	b.n	8006eca <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e0c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006e10:	2b08      	cmp	r3, #8
 8006e12:	d828      	bhi.n	8006e66 <UART_SetConfig+0x56a>
 8006e14:	a201      	add	r2, pc, #4	; (adr r2, 8006e1c <UART_SetConfig+0x520>)
 8006e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e1a:	bf00      	nop
 8006e1c:	08006e41 	.word	0x08006e41
 8006e20:	08006e49 	.word	0x08006e49
 8006e24:	08006e51 	.word	0x08006e51
 8006e28:	08006e67 	.word	0x08006e67
 8006e2c:	08006e57 	.word	0x08006e57
 8006e30:	08006e67 	.word	0x08006e67
 8006e34:	08006e67 	.word	0x08006e67
 8006e38:	08006e67 	.word	0x08006e67
 8006e3c:	08006e5f 	.word	0x08006e5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e40:	f7fc fa8a 	bl	8003358 <HAL_RCC_GetPCLK1Freq>
 8006e44:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e46:	e014      	b.n	8006e72 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e48:	f7fc fa9c 	bl	8003384 <HAL_RCC_GetPCLK2Freq>
 8006e4c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e4e:	e010      	b.n	8006e72 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e50:	4b1a      	ldr	r3, [pc, #104]	; (8006ebc <UART_SetConfig+0x5c0>)
 8006e52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e54:	e00d      	b.n	8006e72 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e56:	f7fc f9e9 	bl	800322c <HAL_RCC_GetSysClockFreq>
 8006e5a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e5c:	e009      	b.n	8006e72 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e64:	e005      	b.n	8006e72 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006e66:	2300      	movs	r3, #0
 8006e68:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006e70:	bf00      	nop
    }

    if (pclk != 0U)
 8006e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d028      	beq.n	8006eca <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7c:	4a10      	ldr	r2, [pc, #64]	; (8006ec0 <UART_SetConfig+0x5c4>)
 8006e7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e82:	461a      	mov	r2, r3
 8006e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e86:	fbb3 f2f2 	udiv	r2, r3, r2
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	085b      	lsrs	r3, r3, #1
 8006e90:	441a      	add	r2, r3
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e9a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e9c:	6a3b      	ldr	r3, [r7, #32]
 8006e9e:	2b0f      	cmp	r3, #15
 8006ea0:	d910      	bls.n	8006ec4 <UART_SetConfig+0x5c8>
 8006ea2:	6a3b      	ldr	r3, [r7, #32]
 8006ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ea8:	d20c      	bcs.n	8006ec4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006eaa:	6a3b      	ldr	r3, [r7, #32]
 8006eac:	b29a      	uxth	r2, r3
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	60da      	str	r2, [r3, #12]
 8006eb4:	e009      	b.n	8006eca <UART_SetConfig+0x5ce>
 8006eb6:	bf00      	nop
 8006eb8:	40008000 	.word	0x40008000
 8006ebc:	00f42400 	.word	0x00f42400
 8006ec0:	0800c140 	.word	0x0800c140
      }
      else
      {
        ret = HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	2200      	movs	r2, #0
 8006ede:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006ee6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3730      	adds	r7, #48	; 0x30
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006ef4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f00:	f003 0301 	and.w	r3, r3, #1
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d00a      	beq.n	8006f1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	430a      	orrs	r2, r1
 8006f1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f22:	f003 0302 	and.w	r3, r3, #2
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00a      	beq.n	8006f40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	430a      	orrs	r2, r1
 8006f3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f44:	f003 0304 	and.w	r3, r3, #4
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d00a      	beq.n	8006f62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	430a      	orrs	r2, r1
 8006f60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f66:	f003 0308 	and.w	r3, r3, #8
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d00a      	beq.n	8006f84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	430a      	orrs	r2, r1
 8006f82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f88:	f003 0310 	and.w	r3, r3, #16
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d00a      	beq.n	8006fa6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	430a      	orrs	r2, r1
 8006fa4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006faa:	f003 0320 	and.w	r3, r3, #32
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d00a      	beq.n	8006fc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	430a      	orrs	r2, r1
 8006fc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d01a      	beq.n	800700a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	430a      	orrs	r2, r1
 8006fe8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ff2:	d10a      	bne.n	800700a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	430a      	orrs	r2, r1
 8007008:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800700e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007012:	2b00      	cmp	r3, #0
 8007014:	d00a      	beq.n	800702c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	430a      	orrs	r2, r1
 800702a:	605a      	str	r2, [r3, #4]
  }
}
 800702c:	bf00      	nop
 800702e:	370c      	adds	r7, #12
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b086      	sub	sp, #24
 800703c:	af02      	add	r7, sp, #8
 800703e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007048:	f7fa fca0 	bl	800198c <HAL_GetTick>
 800704c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 0308 	and.w	r3, r3, #8
 8007058:	2b08      	cmp	r3, #8
 800705a:	d10e      	bne.n	800707a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800705c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007060:	9300      	str	r3, [sp, #0]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2200      	movs	r2, #0
 8007066:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 f82f 	bl	80070ce <UART_WaitOnFlagUntilTimeout>
 8007070:	4603      	mov	r3, r0
 8007072:	2b00      	cmp	r3, #0
 8007074:	d001      	beq.n	800707a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007076:	2303      	movs	r3, #3
 8007078:	e025      	b.n	80070c6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f003 0304 	and.w	r3, r3, #4
 8007084:	2b04      	cmp	r3, #4
 8007086:	d10e      	bne.n	80070a6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007088:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800708c:	9300      	str	r3, [sp, #0]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2200      	movs	r2, #0
 8007092:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 f819 	bl	80070ce <UART_WaitOnFlagUntilTimeout>
 800709c:	4603      	mov	r3, r0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d001      	beq.n	80070a6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070a2:	2303      	movs	r3, #3
 80070a4:	e00f      	b.n	80070c6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2220      	movs	r2, #32
 80070aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2220      	movs	r2, #32
 80070b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80070c4:	2300      	movs	r3, #0
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3710      	adds	r7, #16
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}

080070ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80070ce:	b580      	push	{r7, lr}
 80070d0:	b09c      	sub	sp, #112	; 0x70
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	60f8      	str	r0, [r7, #12]
 80070d6:	60b9      	str	r1, [r7, #8]
 80070d8:	603b      	str	r3, [r7, #0]
 80070da:	4613      	mov	r3, r2
 80070dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070de:	e0a9      	b.n	8007234 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070e6:	f000 80a5 	beq.w	8007234 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070ea:	f7fa fc4f 	bl	800198c <HAL_GetTick>
 80070ee:	4602      	mov	r2, r0
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	1ad3      	subs	r3, r2, r3
 80070f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d302      	bcc.n	8007100 <UART_WaitOnFlagUntilTimeout+0x32>
 80070fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d140      	bne.n	8007182 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007106:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007108:	e853 3f00 	ldrex	r3, [r3]
 800710c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800710e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007110:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007114:	667b      	str	r3, [r7, #100]	; 0x64
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	461a      	mov	r2, r3
 800711c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800711e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007120:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007122:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007124:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007126:	e841 2300 	strex	r3, r2, [r1]
 800712a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800712c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800712e:	2b00      	cmp	r3, #0
 8007130:	d1e6      	bne.n	8007100 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	3308      	adds	r3, #8
 8007138:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800713c:	e853 3f00 	ldrex	r3, [r3]
 8007140:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007144:	f023 0301 	bic.w	r3, r3, #1
 8007148:	663b      	str	r3, [r7, #96]	; 0x60
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	3308      	adds	r3, #8
 8007150:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007152:	64ba      	str	r2, [r7, #72]	; 0x48
 8007154:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007156:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007158:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800715a:	e841 2300 	strex	r3, r2, [r1]
 800715e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007160:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007162:	2b00      	cmp	r3, #0
 8007164:	d1e5      	bne.n	8007132 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2220      	movs	r2, #32
 800716a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2220      	movs	r2, #32
 8007172:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2200      	movs	r2, #0
 800717a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	e069      	b.n	8007256 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f003 0304 	and.w	r3, r3, #4
 800718c:	2b00      	cmp	r3, #0
 800718e:	d051      	beq.n	8007234 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	69db      	ldr	r3, [r3, #28]
 8007196:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800719a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800719e:	d149      	bne.n	8007234 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071a8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b2:	e853 3f00 	ldrex	r3, [r3]
 80071b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80071be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	461a      	mov	r2, r3
 80071c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071c8:	637b      	str	r3, [r7, #52]	; 0x34
 80071ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80071ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071d0:	e841 2300 	strex	r3, r2, [r1]
 80071d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80071d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d1e6      	bne.n	80071aa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	3308      	adds	r3, #8
 80071e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	e853 3f00 	ldrex	r3, [r3]
 80071ea:	613b      	str	r3, [r7, #16]
   return(result);
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	f023 0301 	bic.w	r3, r3, #1
 80071f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	3308      	adds	r3, #8
 80071fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80071fc:	623a      	str	r2, [r7, #32]
 80071fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007200:	69f9      	ldr	r1, [r7, #28]
 8007202:	6a3a      	ldr	r2, [r7, #32]
 8007204:	e841 2300 	strex	r3, r2, [r1]
 8007208:	61bb      	str	r3, [r7, #24]
   return(result);
 800720a:	69bb      	ldr	r3, [r7, #24]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d1e5      	bne.n	80071dc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2220      	movs	r2, #32
 8007214:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2220      	movs	r2, #32
 800721c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2220      	movs	r2, #32
 8007224:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2200      	movs	r2, #0
 800722c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007230:	2303      	movs	r3, #3
 8007232:	e010      	b.n	8007256 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	69da      	ldr	r2, [r3, #28]
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	4013      	ands	r3, r2
 800723e:	68ba      	ldr	r2, [r7, #8]
 8007240:	429a      	cmp	r2, r3
 8007242:	bf0c      	ite	eq
 8007244:	2301      	moveq	r3, #1
 8007246:	2300      	movne	r3, #0
 8007248:	b2db      	uxtb	r3, r3
 800724a:	461a      	mov	r2, r3
 800724c:	79fb      	ldrb	r3, [r7, #7]
 800724e:	429a      	cmp	r2, r3
 8007250:	f43f af46 	beq.w	80070e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3770      	adds	r7, #112	; 0x70
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}

0800725e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800725e:	b480      	push	{r7}
 8007260:	b085      	sub	sp, #20
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800726c:	2b01      	cmp	r3, #1
 800726e:	d101      	bne.n	8007274 <HAL_UARTEx_DisableFifoMode+0x16>
 8007270:	2302      	movs	r3, #2
 8007272:	e027      	b.n	80072c4 <HAL_UARTEx_DisableFifoMode+0x66>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2201      	movs	r2, #1
 8007278:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2224      	movs	r2, #36	; 0x24
 8007280:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f022 0201 	bic.w	r2, r2, #1
 800729a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80072a2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2220      	movs	r2, #32
 80072b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80072c2:	2300      	movs	r3, #0
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3714      	adds	r7, #20
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d101      	bne.n	80072e8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80072e4:	2302      	movs	r3, #2
 80072e6:	e02d      	b.n	8007344 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2224      	movs	r2, #36	; 0x24
 80072f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f022 0201 	bic.w	r2, r2, #1
 800730e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	683a      	ldr	r2, [r7, #0]
 8007320:	430a      	orrs	r2, r1
 8007322:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 f84f 	bl	80073c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	68fa      	ldr	r2, [r7, #12]
 8007330:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2220      	movs	r2, #32
 8007336:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007342:	2300      	movs	r3, #0
}
 8007344:	4618      	mov	r0, r3
 8007346:	3710      	adds	r7, #16
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800735c:	2b01      	cmp	r3, #1
 800735e:	d101      	bne.n	8007364 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007360:	2302      	movs	r3, #2
 8007362:	e02d      	b.n	80073c0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2224      	movs	r2, #36	; 0x24
 8007370:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f022 0201 	bic.w	r2, r2, #1
 800738a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	683a      	ldr	r2, [r7, #0]
 800739c:	430a      	orrs	r2, r1
 800739e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 f811 	bl	80073c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	68fa      	ldr	r2, [r7, #12]
 80073ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2220      	movs	r2, #32
 80073b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80073be:	2300      	movs	r3, #0
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3710      	adds	r7, #16
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b085      	sub	sp, #20
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d108      	bne.n	80073ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2201      	movs	r2, #1
 80073dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80073e8:	e031      	b.n	800744e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80073ea:	2308      	movs	r3, #8
 80073ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80073ee:	2308      	movs	r3, #8
 80073f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	0e5b      	lsrs	r3, r3, #25
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	f003 0307 	and.w	r3, r3, #7
 8007400:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	0f5b      	lsrs	r3, r3, #29
 800740a:	b2db      	uxtb	r3, r3
 800740c:	f003 0307 	and.w	r3, r3, #7
 8007410:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007412:	7bbb      	ldrb	r3, [r7, #14]
 8007414:	7b3a      	ldrb	r2, [r7, #12]
 8007416:	4911      	ldr	r1, [pc, #68]	; (800745c <UARTEx_SetNbDataToProcess+0x94>)
 8007418:	5c8a      	ldrb	r2, [r1, r2]
 800741a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800741e:	7b3a      	ldrb	r2, [r7, #12]
 8007420:	490f      	ldr	r1, [pc, #60]	; (8007460 <UARTEx_SetNbDataToProcess+0x98>)
 8007422:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007424:	fb93 f3f2 	sdiv	r3, r3, r2
 8007428:	b29a      	uxth	r2, r3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007430:	7bfb      	ldrb	r3, [r7, #15]
 8007432:	7b7a      	ldrb	r2, [r7, #13]
 8007434:	4909      	ldr	r1, [pc, #36]	; (800745c <UARTEx_SetNbDataToProcess+0x94>)
 8007436:	5c8a      	ldrb	r2, [r1, r2]
 8007438:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800743c:	7b7a      	ldrb	r2, [r7, #13]
 800743e:	4908      	ldr	r1, [pc, #32]	; (8007460 <UARTEx_SetNbDataToProcess+0x98>)
 8007440:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007442:	fb93 f3f2 	sdiv	r3, r3, r2
 8007446:	b29a      	uxth	r2, r3
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800744e:	bf00      	nop
 8007450:	3714      	adds	r7, #20
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr
 800745a:	bf00      	nop
 800745c:	0800c158 	.word	0x0800c158
 8007460:	0800c160 	.word	0x0800c160

08007464 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8007464:	b480      	push	{r7}
 8007466:	b087      	sub	sp, #28
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007478:	683a      	ldr	r2, [r7, #0]
 800747a:	6812      	ldr	r2, [r2, #0]
 800747c:	f023 0101 	bic.w	r1, r3, #1
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	2b08      	cmp	r3, #8
 800748c:	d102      	bne.n	8007494 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800748e:	2340      	movs	r3, #64	; 0x40
 8007490:	617b      	str	r3, [r7, #20]
 8007492:	e001      	b.n	8007498 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8007494:	2300      	movs	r3, #0
 8007496:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80074a4:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80074aa:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80074b0:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80074b6:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 80074bc:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 80074c2:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 80074c8:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 80074ce:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 80074d4:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 80074da:	4313      	orrs	r3, r2
 80074dc:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e2:	693a      	ldr	r2, [r7, #16]
 80074e4:	4313      	orrs	r3, r2
 80074e6:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074ec:	693a      	ldr	r2, [r7, #16]
 80074ee:	4313      	orrs	r3, r2
 80074f0:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074f6:	693a      	ldr	r2, [r7, #16]
 80074f8:	4313      	orrs	r3, r2
 80074fa:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007500:	693a      	ldr	r2, [r7, #16]
 8007502:	4313      	orrs	r3, r2
 8007504:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 8007506:	4b23      	ldr	r3, [pc, #140]	; (8007594 <FMC_NORSRAM_Init+0x130>)
 8007508:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007510:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007518:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8007520:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8007528:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	43db      	mvns	r3, r3
 8007538:	ea02 0103 	and.w	r1, r2, r3
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	4319      	orrs	r1, r3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800754e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007552:	d10c      	bne.n	800756e <FMC_NORSRAM_Init+0x10a>
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d008      	beq.n	800756e <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007568:	431a      	orrs	r2, r3
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d006      	beq.n	8007584 <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800757e:	431a      	orrs	r2, r3
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	371c      	adds	r7, #28
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr
 8007592:	bf00      	nop
 8007594:	0008fb7f 	.word	0x0008fb7f

08007598 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007598:	b480      	push	{r7}
 800759a:	b087      	sub	sp, #28
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
#if defined(FMC_BTRx_DATAHLD)
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	1c5a      	adds	r2, r3, #1
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	011b      	lsls	r3, r3, #4
 80075b8:	431a      	orrs	r2, r3
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	021b      	lsls	r3, r3, #8
 80075c0:	431a      	orrs	r2, r3
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	68db      	ldr	r3, [r3, #12]
 80075c6:	079b      	lsls	r3, r3, #30
 80075c8:	431a      	orrs	r2, r3
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	041b      	lsls	r3, r3, #16
 80075d0:	431a      	orrs	r2, r3
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	695b      	ldr	r3, [r3, #20]
 80075d6:	3b01      	subs	r3, #1
 80075d8:	051b      	lsls	r3, r3, #20
 80075da:	431a      	orrs	r2, r3
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	699b      	ldr	r3, [r3, #24]
 80075e0:	3b02      	subs	r3, #2
 80075e2:	061b      	lsls	r3, r3, #24
 80075e4:	ea42 0103 	orr.w	r1, r2, r3
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	69db      	ldr	r3, [r3, #28]
 80075ec:	687a      	ldr	r2, [r7, #4]
 80075ee:	3201      	adds	r2, #1
 80075f0:	4319      	orrs	r1, r3
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007600:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007604:	d113      	bne.n	800762e <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800760e:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	695b      	ldr	r3, [r3, #20]
 8007614:	3b01      	subs	r3, #1
 8007616:	051b      	lsls	r3, r3, #20
 8007618:	697a      	ldr	r2, [r7, #20]
 800761a:	4313      	orrs	r3, r2
 800761c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	431a      	orrs	r2, r3
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800762e:	2300      	movs	r3, #0
}
 8007630:	4618      	mov	r0, r3
 8007632:	371c      	adds	r7, #28
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800763c:	b480      	push	{r7}
 800763e:	b085      	sub	sp, #20
 8007640:	af00      	add	r7, sp, #0
 8007642:	60f8      	str	r0, [r7, #12]
 8007644:	60b9      	str	r1, [r7, #8]
 8007646:	607a      	str	r2, [r7, #4]
 8007648:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007650:	d121      	bne.n	8007696 <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FMC_BTRx_DATAHLD)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800765a:	f003 627f 	and.w	r2, r3, #267386880	; 0xff00000
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	6819      	ldr	r1, [r3, #0]
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	011b      	lsls	r3, r3, #4
 8007668:	4319      	orrs	r1, r3
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	021b      	lsls	r3, r3, #8
 8007670:	4319      	orrs	r1, r3
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	079b      	lsls	r3, r3, #30
 8007678:	4319      	orrs	r1, r3
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	69db      	ldr	r3, [r3, #28]
 800767e:	4319      	orrs	r1, r3
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	691b      	ldr	r3, [r3, #16]
 8007684:	041b      	lsls	r3, r3, #16
 8007686:	430b      	orrs	r3, r1
 8007688:	ea42 0103 	orr.w	r1, r2, r3
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007694:	e005      	b.n	80076a2 <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800769e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80076a2:	2300      	movs	r3, #0
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3714      	adds	r7, #20
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80076b0:	b084      	sub	sp, #16
 80076b2:	b480      	push	{r7}
 80076b4:	b085      	sub	sp, #20
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
 80076ba:	f107 001c 	add.w	r0, r7, #28
 80076be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80076c2:	2300      	movs	r3, #0
 80076c4:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 80076c6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 80076c8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80076ca:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80076cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 80076ce:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80076d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 80076d2:	431a      	orrs	r2, r3
             Init.ClockDiv
 80076d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 80076d6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80076d8:	68fa      	ldr	r2, [r7, #12]
 80076da:	4313      	orrs	r3, r2
 80076dc:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	685a      	ldr	r2, [r3, #4]
 80076e2:	4b07      	ldr	r3, [pc, #28]	; (8007700 <SDMMC_Init+0x50>)
 80076e4:	4013      	ands	r3, r2
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	431a      	orrs	r2, r3
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80076ee:	2300      	movs	r3, #0
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3714      	adds	r7, #20
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	b004      	add	sp, #16
 80076fc:	4770      	bx	lr
 80076fe:	bf00      	nop
 8007700:	ffc02c00 	.word	0xffc02c00

08007704 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8007704:	b480      	push	{r7}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007712:	4618      	mov	r0, r3
 8007714:	370c      	adds	r7, #12
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr

0800771e <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800771e:	b580      	push	{r7, lr}
 8007720:	b082      	sub	sp, #8
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f043 0203 	orr.w	r2, r3, #3
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8007732:	2002      	movs	r0, #2
 8007734:	f7fa f936 	bl	80019a4 <HAL_Delay>

  return HAL_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	3708      	adds	r7, #8
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8007742:	b480      	push	{r7}
 8007744:	b083      	sub	sp, #12
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f003 0303 	and.w	r3, r3, #3
}
 8007752:	4618      	mov	r0, r3
 8007754:	370c      	adds	r7, #12
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr
	...

08007760 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8007760:	b480      	push	{r7}
 8007762:	b085      	sub	sp, #20
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800776a:	2300      	movs	r3, #0
 800776c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800777e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007784:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800778a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800778c:	68fa      	ldr	r2, [r7, #12]
 800778e:	4313      	orrs	r3, r2
 8007790:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	68da      	ldr	r2, [r3, #12]
 8007796:	4b06      	ldr	r3, [pc, #24]	; (80077b0 <SDMMC_SendCommand+0x50>)
 8007798:	4013      	ands	r3, r2
 800779a:	68fa      	ldr	r2, [r7, #12]
 800779c:	431a      	orrs	r2, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80077a2:	2300      	movs	r3, #0
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3714      	adds	r7, #20
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr
 80077b0:	fffee0c0 	.word	0xfffee0c0

080077b4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	691b      	ldr	r3, [r3, #16]
 80077c0:	b2db      	uxtb	r3, r3
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	370c      	adds	r7, #12
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr

080077ce <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80077ce:	b480      	push	{r7}
 80077d0:	b085      	sub	sp, #20
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
 80077d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	3314      	adds	r3, #20
 80077dc:	461a      	mov	r2, r3
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	4413      	add	r3, r2
 80077e2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3714      	adds	r7, #20
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80077fe:	2300      	movs	r3, #0
 8007800:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	685a      	ldr	r2, [r3, #4]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800781a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007820:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007826:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007828:	68fa      	ldr	r2, [r7, #12]
 800782a:	4313      	orrs	r3, r2
 800782c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007832:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	431a      	orrs	r2, r3
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800783e:	2300      	movs	r3, #0

}
 8007840:	4618      	mov	r0, r3
 8007842:	3714      	adds	r7, #20
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr

0800784c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b088      	sub	sp, #32
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800785a:	2310      	movs	r3, #16
 800785c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800785e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007862:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007864:	2300      	movs	r3, #0
 8007866:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007868:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800786c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800786e:	f107 0308 	add.w	r3, r7, #8
 8007872:	4619      	mov	r1, r3
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f7ff ff73 	bl	8007760 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800787a:	f241 3288 	movw	r2, #5000	; 0x1388
 800787e:	2110      	movs	r1, #16
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 f9b9 	bl	8007bf8 <SDMMC_GetCmdResp1>
 8007886:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007888:	69fb      	ldr	r3, [r7, #28]
}
 800788a:	4618      	mov	r0, r3
 800788c:	3720      	adds	r7, #32
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b08a      	sub	sp, #40	; 0x28
 8007896:	af00      	add	r7, sp, #0
 8007898:	60f8      	str	r0, [r7, #12]
 800789a:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80078a2:	2307      	movs	r3, #7
 80078a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80078a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80078aa:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80078ac:	2300      	movs	r3, #0
 80078ae:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80078b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80078b4:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80078b6:	f107 0310 	add.w	r3, r7, #16
 80078ba:	4619      	mov	r1, r3
 80078bc:	68f8      	ldr	r0, [r7, #12]
 80078be:	f7ff ff4f 	bl	8007760 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80078c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80078c6:	2107      	movs	r1, #7
 80078c8:	68f8      	ldr	r0, [r7, #12]
 80078ca:	f000 f995 	bl	8007bf8 <SDMMC_GetCmdResp1>
 80078ce:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80078d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3728      	adds	r7, #40	; 0x28
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}

080078da <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80078da:	b580      	push	{r7, lr}
 80078dc:	b088      	sub	sp, #32
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80078e2:	2300      	movs	r3, #0
 80078e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80078e6:	2300      	movs	r3, #0
 80078e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80078ea:	2300      	movs	r3, #0
 80078ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80078ee:	2300      	movs	r3, #0
 80078f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80078f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80078f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80078f8:	f107 0308 	add.w	r3, r7, #8
 80078fc:	4619      	mov	r1, r3
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f7ff ff2e 	bl	8007760 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 fbb9 	bl	800807c <SDMMC_GetCmdError>
 800790a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800790c:	69fb      	ldr	r3, [r7, #28]
}
 800790e:	4618      	mov	r0, r3
 8007910:	3720      	adds	r7, #32
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8007916:	b580      	push	{r7, lr}
 8007918:	b088      	sub	sp, #32
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800791e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007922:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007924:	2308      	movs	r3, #8
 8007926:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007928:	f44f 7380 	mov.w	r3, #256	; 0x100
 800792c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800792e:	2300      	movs	r3, #0
 8007930:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007932:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007936:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007938:	f107 0308 	add.w	r3, r7, #8
 800793c:	4619      	mov	r1, r3
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f7ff ff0e 	bl	8007760 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 fb4b 	bl	8007fe0 <SDMMC_GetCmdResp7>
 800794a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800794c:	69fb      	ldr	r3, [r7, #28]
}
 800794e:	4618      	mov	r0, r3
 8007950:	3720      	adds	r7, #32
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007956:	b580      	push	{r7, lr}
 8007958:	b088      	sub	sp, #32
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
 800795e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007964:	2337      	movs	r3, #55	; 0x37
 8007966:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007968:	f44f 7380 	mov.w	r3, #256	; 0x100
 800796c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800796e:	2300      	movs	r3, #0
 8007970:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007972:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007976:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007978:	f107 0308 	add.w	r3, r7, #8
 800797c:	4619      	mov	r1, r3
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f7ff feee 	bl	8007760 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8007984:	f241 3288 	movw	r2, #5000	; 0x1388
 8007988:	2137      	movs	r1, #55	; 0x37
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 f934 	bl	8007bf8 <SDMMC_GetCmdResp1>
 8007990:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007992:	69fb      	ldr	r3, [r7, #28]
}
 8007994:	4618      	mov	r0, r3
 8007996:	3720      	adds	r7, #32
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b088      	sub	sp, #32
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80079aa:	2329      	movs	r3, #41	; 0x29
 80079ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80079ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80079b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80079b4:	2300      	movs	r3, #0
 80079b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80079b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80079bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80079be:	f107 0308 	add.w	r3, r7, #8
 80079c2:	4619      	mov	r1, r3
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f7ff fecb 	bl	8007760 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 fa50 	bl	8007e70 <SDMMC_GetCmdResp3>
 80079d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80079d2:	69fb      	ldr	r3, [r7, #28]
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3720      	adds	r7, #32
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b088      	sub	sp, #32
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80079ea:	2306      	movs	r3, #6
 80079ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80079ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80079f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80079f4:	2300      	movs	r3, #0
 80079f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80079f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80079fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80079fe:	f107 0308 	add.w	r3, r7, #8
 8007a02:	4619      	mov	r1, r3
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f7ff feab 	bl	8007760 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8007a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a0e:	2106      	movs	r1, #6
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 f8f1 	bl	8007bf8 <SDMMC_GetCmdResp1>
 8007a16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a18:	69fb      	ldr	r3, [r7, #28]
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3720      	adds	r7, #32
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}

08007a22 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8007a22:	b580      	push	{r7, lr}
 8007a24:	b088      	sub	sp, #32
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007a2e:	2333      	movs	r3, #51	; 0x33
 8007a30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007a32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007a36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007a3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007a40:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007a42:	f107 0308 	add.w	r3, r7, #8
 8007a46:	4619      	mov	r1, r3
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f7ff fe89 	bl	8007760 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8007a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a52:	2133      	movs	r1, #51	; 0x33
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 f8cf 	bl	8007bf8 <SDMMC_GetCmdResp1>
 8007a5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a5c:	69fb      	ldr	r3, [r7, #28]
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3720      	adds	r7, #32
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}

08007a66 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8007a66:	b580      	push	{r7, lr}
 8007a68:	b088      	sub	sp, #32
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007a72:	2302      	movs	r3, #2
 8007a74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007a76:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007a7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007a80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007a84:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007a86:	f107 0308 	add.w	r3, r7, #8
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f7ff fe67 	bl	8007760 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 f9a2 	bl	8007ddc <SDMMC_GetCmdResp2>
 8007a98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a9a:	69fb      	ldr	r3, [r7, #28]
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3720      	adds	r7, #32
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b088      	sub	sp, #32
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007ab2:	2309      	movs	r3, #9
 8007ab4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007ab6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007aba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007abc:	2300      	movs	r3, #0
 8007abe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007ac4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007ac6:	f107 0308 	add.w	r3, r7, #8
 8007aca:	4619      	mov	r1, r3
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f7ff fe47 	bl	8007760 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 f982 	bl	8007ddc <SDMMC_GetCmdResp2>
 8007ad8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ada:	69fb      	ldr	r3, [r7, #28]
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3720      	adds	r7, #32
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b088      	sub	sp, #32
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007aee:	2300      	movs	r3, #0
 8007af0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007af2:	2303      	movs	r3, #3
 8007af4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007af6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007afa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007afc:	2300      	movs	r3, #0
 8007afe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007b00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b04:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007b06:	f107 0308 	add.w	r3, r7, #8
 8007b0a:	4619      	mov	r1, r3
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f7ff fe27 	bl	8007760 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007b12:	683a      	ldr	r2, [r7, #0]
 8007b14:	2103      	movs	r1, #3
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 f9ea 	bl	8007ef0 <SDMMC_GetCmdResp6>
 8007b1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b1e:	69fb      	ldr	r3, [r7, #28]
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3720      	adds	r7, #32
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b088      	sub	sp, #32
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007b36:	230d      	movs	r3, #13
 8007b38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007b3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007b40:	2300      	movs	r3, #0
 8007b42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007b44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b48:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007b4a:	f107 0308 	add.w	r3, r7, #8
 8007b4e:	4619      	mov	r1, r3
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f7ff fe05 	bl	8007760 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8007b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b5a:	210d      	movs	r1, #13
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 f84b 	bl	8007bf8 <SDMMC_GetCmdResp1>
 8007b62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b64:	69fb      	ldr	r3, [r7, #28]
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3720      	adds	r7, #32
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}

08007b6e <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8007b6e:	b580      	push	{r7, lr}
 8007b70:	b088      	sub	sp, #32
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8007b76:	2300      	movs	r3, #0
 8007b78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8007b7a:	230d      	movs	r3, #13
 8007b7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007b7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007b84:	2300      	movs	r3, #0
 8007b86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007b88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b8c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007b8e:	f107 0308 	add.w	r3, r7, #8
 8007b92:	4619      	mov	r1, r3
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f7ff fde3 	bl	8007760 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8007b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b9e:	210d      	movs	r1, #13
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 f829 	bl	8007bf8 <SDMMC_GetCmdResp1>
 8007ba6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ba8:	69fb      	ldr	r3, [r7, #28]
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3720      	adds	r7, #32
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}

08007bb2 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b088      	sub	sp, #32
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8007bbe:	230b      	movs	r3, #11
 8007bc0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007bc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007bc6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007bd0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007bd2:	f107 0308 	add.w	r3, r7, #8
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f7ff fdc1 	bl	8007760 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8007bde:	f241 3288 	movw	r2, #5000	; 0x1388
 8007be2:	210b      	movs	r1, #11
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 f807 	bl	8007bf8 <SDMMC_GetCmdResp1>
 8007bea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007bec:	69fb      	ldr	r3, [r7, #28]
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3720      	adds	r7, #32
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
	...

08007bf8 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b088      	sub	sp, #32
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	460b      	mov	r3, r1
 8007c02:	607a      	str	r2, [r7, #4]
 8007c04:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007c06:	4b70      	ldr	r3, [pc, #448]	; (8007dc8 <SDMMC_GetCmdResp1+0x1d0>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a70      	ldr	r2, [pc, #448]	; (8007dcc <SDMMC_GetCmdResp1+0x1d4>)
 8007c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8007c10:	0a5a      	lsrs	r2, r3, #9
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	fb02 f303 	mul.w	r3, r2, r3
 8007c18:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8007c1a:	69fb      	ldr	r3, [r7, #28]
 8007c1c:	1e5a      	subs	r2, r3, #1
 8007c1e:	61fa      	str	r2, [r7, #28]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d102      	bne.n	8007c2a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007c24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007c28:	e0c9      	b.n	8007dbe <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c2e:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8007c30:	69ba      	ldr	r2, [r7, #24]
 8007c32:	4b67      	ldr	r3, [pc, #412]	; (8007dd0 <SDMMC_GetCmdResp1+0x1d8>)
 8007c34:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d0ef      	beq.n	8007c1a <SDMMC_GetCmdResp1+0x22>
 8007c3a:	69bb      	ldr	r3, [r7, #24]
 8007c3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d1ea      	bne.n	8007c1a <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c48:	f003 0304 	and.w	r3, r3, #4
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d004      	beq.n	8007c5a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2204      	movs	r2, #4
 8007c54:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007c56:	2304      	movs	r3, #4
 8007c58:	e0b1      	b.n	8007dbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c5e:	f003 0301 	and.w	r3, r3, #1
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d004      	beq.n	8007c70 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2201      	movs	r2, #1
 8007c6a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	e0a6      	b.n	8007dbe <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	4a58      	ldr	r2, [pc, #352]	; (8007dd4 <SDMMC_GetCmdResp1+0x1dc>)
 8007c74:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007c76:	68f8      	ldr	r0, [r7, #12]
 8007c78:	f7ff fd9c 	bl	80077b4 <SDMMC_GetCommandResponse>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	461a      	mov	r2, r3
 8007c80:	7afb      	ldrb	r3, [r7, #11]
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d001      	beq.n	8007c8a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007c86:	2301      	movs	r3, #1
 8007c88:	e099      	b.n	8007dbe <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007c8a:	2100      	movs	r1, #0
 8007c8c:	68f8      	ldr	r0, [r7, #12]
 8007c8e:	f7ff fd9e 	bl	80077ce <SDMMC_GetResponse>
 8007c92:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007c94:	697a      	ldr	r2, [r7, #20]
 8007c96:	4b50      	ldr	r3, [pc, #320]	; (8007dd8 <SDMMC_GetCmdResp1+0x1e0>)
 8007c98:	4013      	ands	r3, r2
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d101      	bne.n	8007ca2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	e08d      	b.n	8007dbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	da02      	bge.n	8007cae <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007ca8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007cac:	e087      	b.n	8007dbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d001      	beq.n	8007cbc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007cb8:	2340      	movs	r3, #64	; 0x40
 8007cba:	e080      	b.n	8007dbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d001      	beq.n	8007cca <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007cc6:	2380      	movs	r3, #128	; 0x80
 8007cc8:	e079      	b.n	8007dbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d002      	beq.n	8007cda <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007cd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007cd8:	e071      	b.n	8007dbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d002      	beq.n	8007cea <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007ce4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ce8:	e069      	b.n	8007dbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d002      	beq.n	8007cfa <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007cf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cf8:	e061      	b.n	8007dbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d002      	beq.n	8007d0a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007d04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007d08:	e059      	b.n	8007dbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d002      	beq.n	8007d1a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007d14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007d18:	e051      	b.n	8007dbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d002      	beq.n	8007d2a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007d24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007d28:	e049      	b.n	8007dbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d002      	beq.n	8007d3a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007d34:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007d38:	e041      	b.n	8007dbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d002      	beq.n	8007d4a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007d44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d48:	e039      	b.n	8007dbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d002      	beq.n	8007d5a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007d54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007d58:	e031      	b.n	8007dbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d002      	beq.n	8007d6a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007d64:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007d68:	e029      	b.n	8007dbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d002      	beq.n	8007d7a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007d74:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007d78:	e021      	b.n	8007dbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d002      	beq.n	8007d8a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007d84:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007d88:	e019      	b.n	8007dbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d002      	beq.n	8007d9a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007d94:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007d98:	e011      	b.n	8007dbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d002      	beq.n	8007daa <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007da4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007da8:	e009      	b.n	8007dbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	f003 0308 	and.w	r3, r3, #8
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d002      	beq.n	8007dba <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007db4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007db8:	e001      	b.n	8007dbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007dba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3720      	adds	r7, #32
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
 8007dc6:	bf00      	nop
 8007dc8:	20000000 	.word	0x20000000
 8007dcc:	10624dd3 	.word	0x10624dd3
 8007dd0:	00200045 	.word	0x00200045
 8007dd4:	002000c5 	.word	0x002000c5
 8007dd8:	fdffe008 	.word	0xfdffe008

08007ddc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b085      	sub	sp, #20
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007de4:	4b1f      	ldr	r3, [pc, #124]	; (8007e64 <SDMMC_GetCmdResp2+0x88>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a1f      	ldr	r2, [pc, #124]	; (8007e68 <SDMMC_GetCmdResp2+0x8c>)
 8007dea:	fba2 2303 	umull	r2, r3, r2, r3
 8007dee:	0a5b      	lsrs	r3, r3, #9
 8007df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007df4:	fb02 f303 	mul.w	r3, r2, r3
 8007df8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	1e5a      	subs	r2, r3, #1
 8007dfe:	60fa      	str	r2, [r7, #12]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d102      	bne.n	8007e0a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007e04:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007e08:	e026      	b.n	8007e58 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e0e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d0ef      	beq.n	8007dfa <SDMMC_GetCmdResp2+0x1e>
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d1ea      	bne.n	8007dfa <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e28:	f003 0304 	and.w	r3, r3, #4
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d004      	beq.n	8007e3a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2204      	movs	r2, #4
 8007e34:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007e36:	2304      	movs	r3, #4
 8007e38:	e00e      	b.n	8007e58 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e3e:	f003 0301 	and.w	r3, r3, #1
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d004      	beq.n	8007e50 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2201      	movs	r2, #1
 8007e4a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	e003      	b.n	8007e58 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	4a06      	ldr	r2, [pc, #24]	; (8007e6c <SDMMC_GetCmdResp2+0x90>)
 8007e54:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007e56:	2300      	movs	r3, #0
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3714      	adds	r7, #20
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr
 8007e64:	20000000 	.word	0x20000000
 8007e68:	10624dd3 	.word	0x10624dd3
 8007e6c:	002000c5 	.word	0x002000c5

08007e70 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b085      	sub	sp, #20
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007e78:	4b1a      	ldr	r3, [pc, #104]	; (8007ee4 <SDMMC_GetCmdResp3+0x74>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a1a      	ldr	r2, [pc, #104]	; (8007ee8 <SDMMC_GetCmdResp3+0x78>)
 8007e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e82:	0a5b      	lsrs	r3, r3, #9
 8007e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e88:	fb02 f303 	mul.w	r3, r2, r3
 8007e8c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	1e5a      	subs	r2, r3, #1
 8007e92:	60fa      	str	r2, [r7, #12]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d102      	bne.n	8007e9e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007e98:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007e9c:	e01b      	b.n	8007ed6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ea2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d0ef      	beq.n	8007e8e <SDMMC_GetCmdResp3+0x1e>
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d1ea      	bne.n	8007e8e <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ebc:	f003 0304 	and.w	r3, r3, #4
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d004      	beq.n	8007ece <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2204      	movs	r2, #4
 8007ec8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007eca:	2304      	movs	r3, #4
 8007ecc:	e003      	b.n	8007ed6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	4a06      	ldr	r2, [pc, #24]	; (8007eec <SDMMC_GetCmdResp3+0x7c>)
 8007ed2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3714      	adds	r7, #20
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr
 8007ee2:	bf00      	nop
 8007ee4:	20000000 	.word	0x20000000
 8007ee8:	10624dd3 	.word	0x10624dd3
 8007eec:	002000c5 	.word	0x002000c5

08007ef0 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b088      	sub	sp, #32
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	460b      	mov	r3, r1
 8007efa:	607a      	str	r2, [r7, #4]
 8007efc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007efe:	4b35      	ldr	r3, [pc, #212]	; (8007fd4 <SDMMC_GetCmdResp6+0xe4>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a35      	ldr	r2, [pc, #212]	; (8007fd8 <SDMMC_GetCmdResp6+0xe8>)
 8007f04:	fba2 2303 	umull	r2, r3, r2, r3
 8007f08:	0a5b      	lsrs	r3, r3, #9
 8007f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f0e:	fb02 f303 	mul.w	r3, r2, r3
 8007f12:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	1e5a      	subs	r2, r3, #1
 8007f18:	61fa      	str	r2, [r7, #28]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d102      	bne.n	8007f24 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007f1e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007f22:	e052      	b.n	8007fca <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f28:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007f2a:	69bb      	ldr	r3, [r7, #24]
 8007f2c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d0ef      	beq.n	8007f14 <SDMMC_GetCmdResp6+0x24>
 8007f34:	69bb      	ldr	r3, [r7, #24]
 8007f36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d1ea      	bne.n	8007f14 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f42:	f003 0304 	and.w	r3, r3, #4
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d004      	beq.n	8007f54 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2204      	movs	r2, #4
 8007f4e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007f50:	2304      	movs	r3, #4
 8007f52:	e03a      	b.n	8007fca <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f58:	f003 0301 	and.w	r3, r3, #1
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d004      	beq.n	8007f6a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2201      	movs	r2, #1
 8007f64:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007f66:	2301      	movs	r3, #1
 8007f68:	e02f      	b.n	8007fca <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007f6a:	68f8      	ldr	r0, [r7, #12]
 8007f6c:	f7ff fc22 	bl	80077b4 <SDMMC_GetCommandResponse>
 8007f70:	4603      	mov	r3, r0
 8007f72:	461a      	mov	r2, r3
 8007f74:	7afb      	ldrb	r3, [r7, #11]
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d001      	beq.n	8007f7e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e025      	b.n	8007fca <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	4a16      	ldr	r2, [pc, #88]	; (8007fdc <SDMMC_GetCmdResp6+0xec>)
 8007f82:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007f84:	2100      	movs	r1, #0
 8007f86:	68f8      	ldr	r0, [r7, #12]
 8007f88:	f7ff fc21 	bl	80077ce <SDMMC_GetResponse>
 8007f8c:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d106      	bne.n	8007fa6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	0c1b      	lsrs	r3, r3, #16
 8007f9c:	b29a      	uxth	r2, r3
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	e011      	b.n	8007fca <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d002      	beq.n	8007fb6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007fb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007fb4:	e009      	b.n	8007fca <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d002      	beq.n	8007fc6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007fc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007fc4:	e001      	b.n	8007fca <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007fc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3720      	adds	r7, #32
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
 8007fd2:	bf00      	nop
 8007fd4:	20000000 	.word	0x20000000
 8007fd8:	10624dd3 	.word	0x10624dd3
 8007fdc:	002000c5 	.word	0x002000c5

08007fe0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b085      	sub	sp, #20
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007fe8:	4b22      	ldr	r3, [pc, #136]	; (8008074 <SDMMC_GetCmdResp7+0x94>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a22      	ldr	r2, [pc, #136]	; (8008078 <SDMMC_GetCmdResp7+0x98>)
 8007fee:	fba2 2303 	umull	r2, r3, r2, r3
 8007ff2:	0a5b      	lsrs	r3, r3, #9
 8007ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ff8:	fb02 f303 	mul.w	r3, r2, r3
 8007ffc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	1e5a      	subs	r2, r3, #1
 8008002:	60fa      	str	r2, [r7, #12]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d102      	bne.n	800800e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008008:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800800c:	e02c      	b.n	8008068 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008012:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800801a:	2b00      	cmp	r3, #0
 800801c:	d0ef      	beq.n	8007ffe <SDMMC_GetCmdResp7+0x1e>
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008024:	2b00      	cmp	r3, #0
 8008026:	d1ea      	bne.n	8007ffe <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800802c:	f003 0304 	and.w	r3, r3, #4
 8008030:	2b00      	cmp	r3, #0
 8008032:	d004      	beq.n	800803e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2204      	movs	r2, #4
 8008038:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800803a:	2304      	movs	r3, #4
 800803c:	e014      	b.n	8008068 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008042:	f003 0301 	and.w	r3, r3, #1
 8008046:	2b00      	cmp	r3, #0
 8008048:	d004      	beq.n	8008054 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2201      	movs	r2, #1
 800804e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008050:	2301      	movs	r3, #1
 8008052:	e009      	b.n	8008068 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800805c:	2b00      	cmp	r3, #0
 800805e:	d002      	beq.n	8008066 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2240      	movs	r2, #64	; 0x40
 8008064:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008066:	2300      	movs	r3, #0

}
 8008068:	4618      	mov	r0, r3
 800806a:	3714      	adds	r7, #20
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr
 8008074:	20000000 	.word	0x20000000
 8008078:	10624dd3 	.word	0x10624dd3

0800807c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800807c:	b480      	push	{r7}
 800807e:	b085      	sub	sp, #20
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008084:	4b11      	ldr	r3, [pc, #68]	; (80080cc <SDMMC_GetCmdError+0x50>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a11      	ldr	r2, [pc, #68]	; (80080d0 <SDMMC_GetCmdError+0x54>)
 800808a:	fba2 2303 	umull	r2, r3, r2, r3
 800808e:	0a5b      	lsrs	r3, r3, #9
 8008090:	f241 3288 	movw	r2, #5000	; 0x1388
 8008094:	fb02 f303 	mul.w	r3, r2, r3
 8008098:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	1e5a      	subs	r2, r3, #1
 800809e:	60fa      	str	r2, [r7, #12]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d102      	bne.n	80080aa <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80080a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80080a8:	e009      	b.n	80080be <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d0f1      	beq.n	800809a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	4a06      	ldr	r2, [pc, #24]	; (80080d4 <SDMMC_GetCmdError+0x58>)
 80080ba:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80080bc:	2300      	movs	r3, #0
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3714      	adds	r7, #20
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr
 80080ca:	bf00      	nop
 80080cc:	20000000 	.word	0x20000000
 80080d0:	10624dd3 	.word	0x10624dd3
 80080d4:	002000c5 	.word	0x002000c5

080080d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80080d8:	b084      	sub	sp, #16
 80080da:	b580      	push	{r7, lr}
 80080dc:	b084      	sub	sp, #16
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
 80080e2:	f107 001c 	add.w	r0, r7, #28
 80080e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 fa70 	bl	80085dc <USB_CoreReset>
 80080fc:	4603      	mov	r3, r0
 80080fe:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8008100:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008102:	2b00      	cmp	r3, #0
 8008104:	d106      	bne.n	8008114 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800810a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	639a      	str	r2, [r3, #56]	; 0x38
 8008112:	e005      	b.n	8008120 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008118:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8008120:	7bfb      	ldrb	r3, [r7, #15]
}
 8008122:	4618      	mov	r0, r3
 8008124:	3710      	adds	r7, #16
 8008126:	46bd      	mov	sp, r7
 8008128:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800812c:	b004      	add	sp, #16
 800812e:	4770      	bx	lr

08008130 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008130:	b480      	push	{r7}
 8008132:	b083      	sub	sp, #12
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	f023 0201 	bic.w	r2, r3, #1
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	370c      	adds	r7, #12
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr

08008152 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8008152:	b580      	push	{r7, lr}
 8008154:	b084      	sub	sp, #16
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
 800815a:	460b      	mov	r3, r1
 800815c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800815e:	2300      	movs	r3, #0
 8008160:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	68db      	ldr	r3, [r3, #12]
 8008166:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800816e:	78fb      	ldrb	r3, [r7, #3]
 8008170:	2b01      	cmp	r3, #1
 8008172:	d115      	bne.n	80081a0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	68db      	ldr	r3, [r3, #12]
 8008178:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008180:	2001      	movs	r0, #1
 8008182:	f7f9 fc0f 	bl	80019a4 <HAL_Delay>
      ms++;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	3301      	adds	r3, #1
 800818a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 fa17 	bl	80085c0 <USB_GetMode>
 8008192:	4603      	mov	r3, r0
 8008194:	2b01      	cmp	r3, #1
 8008196:	d01e      	beq.n	80081d6 <USB_SetCurrentMode+0x84>
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2b31      	cmp	r3, #49	; 0x31
 800819c:	d9f0      	bls.n	8008180 <USB_SetCurrentMode+0x2e>
 800819e:	e01a      	b.n	80081d6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80081a0:	78fb      	ldrb	r3, [r7, #3]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d115      	bne.n	80081d2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	68db      	ldr	r3, [r3, #12]
 80081aa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80081b2:	2001      	movs	r0, #1
 80081b4:	f7f9 fbf6 	bl	80019a4 <HAL_Delay>
      ms++;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	3301      	adds	r3, #1
 80081bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 f9fe 	bl	80085c0 <USB_GetMode>
 80081c4:	4603      	mov	r3, r0
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d005      	beq.n	80081d6 <USB_SetCurrentMode+0x84>
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2b31      	cmp	r3, #49	; 0x31
 80081ce:	d9f0      	bls.n	80081b2 <USB_SetCurrentMode+0x60>
 80081d0:	e001      	b.n	80081d6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80081d2:	2301      	movs	r3, #1
 80081d4:	e005      	b.n	80081e2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2b32      	cmp	r3, #50	; 0x32
 80081da:	d101      	bne.n	80081e0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80081dc:	2301      	movs	r3, #1
 80081de:	e000      	b.n	80081e2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3710      	adds	r7, #16
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
	...

080081ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80081ec:	b084      	sub	sp, #16
 80081ee:	b580      	push	{r7, lr}
 80081f0:	b086      	sub	sp, #24
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
 80081f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80081fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80081fe:	2300      	movs	r3, #0
 8008200:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008206:	2300      	movs	r3, #0
 8008208:	613b      	str	r3, [r7, #16]
 800820a:	e009      	b.n	8008220 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800820c:	687a      	ldr	r2, [r7, #4]
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	3340      	adds	r3, #64	; 0x40
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	4413      	add	r3, r2
 8008216:	2200      	movs	r2, #0
 8008218:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	3301      	adds	r3, #1
 800821e:	613b      	str	r3, [r7, #16]
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	2b0e      	cmp	r3, #14
 8008224:	d9f2      	bls.n	800820c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008228:	2b00      	cmp	r3, #0
 800822a:	d11c      	bne.n	8008266 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	68fa      	ldr	r2, [r7, #12]
 8008236:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800823a:	f043 0302 	orr.w	r3, r3, #2
 800823e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008244:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	601a      	str	r2, [r3, #0]
 8008264:	e005      	b.n	8008272 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800826a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008278:	461a      	mov	r2, r3
 800827a:	2300      	movs	r3, #0
 800827c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008284:	4619      	mov	r1, r3
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800828c:	461a      	mov	r2, r3
 800828e:	680b      	ldr	r3, [r1, #0]
 8008290:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008292:	2103      	movs	r1, #3
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 f959 	bl	800854c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800829a:	2110      	movs	r1, #16
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 f8f1 	bl	8008484 <USB_FlushTxFifo>
 80082a2:	4603      	mov	r3, r0
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d001      	beq.n	80082ac <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80082a8:	2301      	movs	r3, #1
 80082aa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 f91d 	bl	80084ec <USB_FlushRxFifo>
 80082b2:	4603      	mov	r3, r0
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d001      	beq.n	80082bc <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80082b8:	2301      	movs	r3, #1
 80082ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082c2:	461a      	mov	r2, r3
 80082c4:	2300      	movs	r3, #0
 80082c6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082ce:	461a      	mov	r2, r3
 80082d0:	2300      	movs	r3, #0
 80082d2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082da:	461a      	mov	r2, r3
 80082dc:	2300      	movs	r3, #0
 80082de:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80082e0:	2300      	movs	r3, #0
 80082e2:	613b      	str	r3, [r7, #16]
 80082e4:	e043      	b.n	800836e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	015a      	lsls	r2, r3, #5
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	4413      	add	r3, r2
 80082ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80082f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082fc:	d118      	bne.n	8008330 <USB_DevInit+0x144>
    {
      if (i == 0U)
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d10a      	bne.n	800831a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	015a      	lsls	r2, r3, #5
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	4413      	add	r3, r2
 800830c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008310:	461a      	mov	r2, r3
 8008312:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008316:	6013      	str	r3, [r2, #0]
 8008318:	e013      	b.n	8008342 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	015a      	lsls	r2, r3, #5
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	4413      	add	r3, r2
 8008322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008326:	461a      	mov	r2, r3
 8008328:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800832c:	6013      	str	r3, [r2, #0]
 800832e:	e008      	b.n	8008342 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	015a      	lsls	r2, r3, #5
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	4413      	add	r3, r2
 8008338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800833c:	461a      	mov	r2, r3
 800833e:	2300      	movs	r3, #0
 8008340:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	015a      	lsls	r2, r3, #5
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	4413      	add	r3, r2
 800834a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800834e:	461a      	mov	r2, r3
 8008350:	2300      	movs	r3, #0
 8008352:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	015a      	lsls	r2, r3, #5
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	4413      	add	r3, r2
 800835c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008360:	461a      	mov	r2, r3
 8008362:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008366:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	3301      	adds	r3, #1
 800836c:	613b      	str	r3, [r7, #16]
 800836e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008370:	693a      	ldr	r2, [r7, #16]
 8008372:	429a      	cmp	r2, r3
 8008374:	d3b7      	bcc.n	80082e6 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008376:	2300      	movs	r3, #0
 8008378:	613b      	str	r3, [r7, #16]
 800837a:	e043      	b.n	8008404 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	015a      	lsls	r2, r3, #5
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	4413      	add	r3, r2
 8008384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800838e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008392:	d118      	bne.n	80083c6 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d10a      	bne.n	80083b0 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	015a      	lsls	r2, r3, #5
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	4413      	add	r3, r2
 80083a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083a6:	461a      	mov	r2, r3
 80083a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80083ac:	6013      	str	r3, [r2, #0]
 80083ae:	e013      	b.n	80083d8 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	015a      	lsls	r2, r3, #5
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	4413      	add	r3, r2
 80083b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083bc:	461a      	mov	r2, r3
 80083be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80083c2:	6013      	str	r3, [r2, #0]
 80083c4:	e008      	b.n	80083d8 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	015a      	lsls	r2, r3, #5
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	4413      	add	r3, r2
 80083ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083d2:	461a      	mov	r2, r3
 80083d4:	2300      	movs	r3, #0
 80083d6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	015a      	lsls	r2, r3, #5
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	4413      	add	r3, r2
 80083e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083e4:	461a      	mov	r2, r3
 80083e6:	2300      	movs	r3, #0
 80083e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	015a      	lsls	r2, r3, #5
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	4413      	add	r3, r2
 80083f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083f6:	461a      	mov	r2, r3
 80083f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80083fc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	3301      	adds	r3, #1
 8008402:	613b      	str	r3, [r7, #16]
 8008404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008406:	693a      	ldr	r2, [r7, #16]
 8008408:	429a      	cmp	r2, r3
 800840a:	d3b7      	bcc.n	800837c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008412:	691b      	ldr	r3, [r3, #16]
 8008414:	68fa      	ldr	r2, [r7, #12]
 8008416:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800841a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800841e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800842c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	699b      	ldr	r3, [r3, #24]
 8008432:	f043 0210 	orr.w	r2, r3, #16
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	699a      	ldr	r2, [r3, #24]
 800843e:	4b10      	ldr	r3, [pc, #64]	; (8008480 <USB_DevInit+0x294>)
 8008440:	4313      	orrs	r3, r2
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008448:	2b00      	cmp	r3, #0
 800844a:	d005      	beq.n	8008458 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	699b      	ldr	r3, [r3, #24]
 8008450:	f043 0208 	orr.w	r2, r3, #8
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800845a:	2b01      	cmp	r3, #1
 800845c:	d107      	bne.n	800846e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	699b      	ldr	r3, [r3, #24]
 8008462:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008466:	f043 0304 	orr.w	r3, r3, #4
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800846e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008470:	4618      	mov	r0, r3
 8008472:	3718      	adds	r7, #24
 8008474:	46bd      	mov	sp, r7
 8008476:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800847a:	b004      	add	sp, #16
 800847c:	4770      	bx	lr
 800847e:	bf00      	nop
 8008480:	803c3800 	.word	0x803c3800

08008484 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008484:	b480      	push	{r7}
 8008486:	b085      	sub	sp, #20
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800848e:	2300      	movs	r3, #0
 8008490:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	3301      	adds	r3, #1
 8008496:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	4a13      	ldr	r2, [pc, #76]	; (80084e8 <USB_FlushTxFifo+0x64>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d901      	bls.n	80084a4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80084a0:	2303      	movs	r3, #3
 80084a2:	e01b      	b.n	80084dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	691b      	ldr	r3, [r3, #16]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	daf2      	bge.n	8008492 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80084ac:	2300      	movs	r3, #0
 80084ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	019b      	lsls	r3, r3, #6
 80084b4:	f043 0220 	orr.w	r2, r3, #32
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	3301      	adds	r3, #1
 80084c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	4a08      	ldr	r2, [pc, #32]	; (80084e8 <USB_FlushTxFifo+0x64>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d901      	bls.n	80084ce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80084ca:	2303      	movs	r3, #3
 80084cc:	e006      	b.n	80084dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	691b      	ldr	r3, [r3, #16]
 80084d2:	f003 0320 	and.w	r3, r3, #32
 80084d6:	2b20      	cmp	r3, #32
 80084d8:	d0f0      	beq.n	80084bc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80084da:	2300      	movs	r3, #0
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3714      	adds	r7, #20
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr
 80084e8:	00030d40 	.word	0x00030d40

080084ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b085      	sub	sp, #20
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80084f4:	2300      	movs	r3, #0
 80084f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	3301      	adds	r3, #1
 80084fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	4a11      	ldr	r2, [pc, #68]	; (8008548 <USB_FlushRxFifo+0x5c>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d901      	bls.n	800850a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008506:	2303      	movs	r3, #3
 8008508:	e018      	b.n	800853c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	691b      	ldr	r3, [r3, #16]
 800850e:	2b00      	cmp	r3, #0
 8008510:	daf2      	bge.n	80084f8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008512:	2300      	movs	r3, #0
 8008514:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2210      	movs	r2, #16
 800851a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	3301      	adds	r3, #1
 8008520:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	4a08      	ldr	r2, [pc, #32]	; (8008548 <USB_FlushRxFifo+0x5c>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d901      	bls.n	800852e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800852a:	2303      	movs	r3, #3
 800852c:	e006      	b.n	800853c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	691b      	ldr	r3, [r3, #16]
 8008532:	f003 0310 	and.w	r3, r3, #16
 8008536:	2b10      	cmp	r3, #16
 8008538:	d0f0      	beq.n	800851c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800853a:	2300      	movs	r3, #0
}
 800853c:	4618      	mov	r0, r3
 800853e:	3714      	adds	r7, #20
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr
 8008548:	00030d40 	.word	0x00030d40

0800854c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800854c:	b480      	push	{r7}
 800854e:	b085      	sub	sp, #20
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	460b      	mov	r3, r1
 8008556:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	78fb      	ldrb	r3, [r7, #3]
 8008566:	68f9      	ldr	r1, [r7, #12]
 8008568:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800856c:	4313      	orrs	r3, r2
 800856e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008570:	2300      	movs	r3, #0
}
 8008572:	4618      	mov	r0, r3
 8008574:	3714      	adds	r7, #20
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr

0800857e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800857e:	b480      	push	{r7}
 8008580:	b085      	sub	sp, #20
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	68fa      	ldr	r2, [r7, #12]
 8008594:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008598:	f023 0303 	bic.w	r3, r3, #3
 800859c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	68fa      	ldr	r2, [r7, #12]
 80085a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085ac:	f043 0302 	orr.w	r3, r3, #2
 80085b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80085b2:	2300      	movs	r3, #0
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3714      	adds	r7, #20
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr

080085c0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b083      	sub	sp, #12
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	695b      	ldr	r3, [r3, #20]
 80085cc:	f003 0301 	and.w	r3, r3, #1
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80085dc:	b480      	push	{r7}
 80085de:	b085      	sub	sp, #20
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80085e4:	2300      	movs	r3, #0
 80085e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	3301      	adds	r3, #1
 80085ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	4a13      	ldr	r2, [pc, #76]	; (8008640 <USB_CoreReset+0x64>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d901      	bls.n	80085fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80085f6:	2303      	movs	r3, #3
 80085f8:	e01b      	b.n	8008632 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	691b      	ldr	r3, [r3, #16]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	daf2      	bge.n	80085e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008602:	2300      	movs	r3, #0
 8008604:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	691b      	ldr	r3, [r3, #16]
 800860a:	f043 0201 	orr.w	r2, r3, #1
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	3301      	adds	r3, #1
 8008616:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	4a09      	ldr	r2, [pc, #36]	; (8008640 <USB_CoreReset+0x64>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d901      	bls.n	8008624 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008620:	2303      	movs	r3, #3
 8008622:	e006      	b.n	8008632 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	691b      	ldr	r3, [r3, #16]
 8008628:	f003 0301 	and.w	r3, r3, #1
 800862c:	2b01      	cmp	r3, #1
 800862e:	d0f0      	beq.n	8008612 <USB_CoreReset+0x36>

  return HAL_OK;
 8008630:	2300      	movs	r3, #0
}
 8008632:	4618      	mov	r0, r3
 8008634:	3714      	adds	r7, #20
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr
 800863e:	bf00      	nop
 8008640:	00030d40 	.word	0x00030d40

08008644 <ai_log_err>:

static ai_buffer* ai_input;
static ai_buffer* ai_output;

static void ai_log_err(const ai_error err, const char *fct)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b082      	sub	sp, #8
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d009      	beq.n	8008668 <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 8008654:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8008656:	461a      	mov	r2, r3
        err.type, err.code);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800865e:	6839      	ldr	r1, [r7, #0]
 8008660:	4806      	ldr	r0, [pc, #24]	; (800867c <ai_log_err+0x38>)
 8008662:	f002 fc1f 	bl	800aea4 <iprintf>
 8008666:	e008      	b.n	800867a <ai_log_err+0x36>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8008668:	793b      	ldrb	r3, [r7, #4]
 800866a:	4619      	mov	r1, r3
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8008672:	461a      	mov	r2, r3
 8008674:	4802      	ldr	r0, [pc, #8]	; (8008680 <ai_log_err+0x3c>)
 8008676:	f002 fc15 	bl	800aea4 <iprintf>

  do {} while (1);
 800867a:	e7fe      	b.n	800867a <ai_log_err+0x36>
 800867c:	0800bfe0 	.word	0x0800bfe0
 8008680:	0800c014 	.word	0x0800c014

08008684 <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle *act_addr)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b086      	sub	sp, #24
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* Create and initialize an instance of the model */
  err = ai_wine_quality_create_and_init(&wine_quality, act_addr, NULL);
 800868c:	2200      	movs	r2, #0
 800868e:	6879      	ldr	r1, [r7, #4]
 8008690:	4828      	ldr	r0, [pc, #160]	; (8008734 <ai_boostrap+0xb0>)
 8008692:	f000 fa53 	bl	8008b3c <ai_wine_quality_create_and_init>
 8008696:	4603      	mov	r3, r0
 8008698:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 800869a:	7b3b      	ldrb	r3, [r7, #12]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d006      	beq.n	80086ae <ai_boostrap+0x2a>
    ai_log_err(err, "ai_wine_quality_create_and_init");
 80086a0:	4925      	ldr	r1, [pc, #148]	; (8008738 <ai_boostrap+0xb4>)
 80086a2:	68f8      	ldr	r0, [r7, #12]
 80086a4:	f7ff ffce 	bl	8008644 <ai_log_err>
    return -1;
 80086a8:	f04f 33ff 	mov.w	r3, #4294967295
 80086ac:	e03e      	b.n	800872c <ai_boostrap+0xa8>
  }

  ai_input = ai_wine_quality_inputs_get(wine_quality, NULL);
 80086ae:	4b21      	ldr	r3, [pc, #132]	; (8008734 <ai_boostrap+0xb0>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	2100      	movs	r1, #0
 80086b4:	4618      	mov	r0, r3
 80086b6:	f000 fab5 	bl	8008c24 <ai_wine_quality_inputs_get>
 80086ba:	4603      	mov	r3, r0
 80086bc:	4a1f      	ldr	r2, [pc, #124]	; (800873c <ai_boostrap+0xb8>)
 80086be:	6013      	str	r3, [r2, #0]
  ai_output = ai_wine_quality_outputs_get(wine_quality, NULL);
 80086c0:	4b1c      	ldr	r3, [pc, #112]	; (8008734 <ai_boostrap+0xb0>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	2100      	movs	r1, #0
 80086c6:	4618      	mov	r0, r3
 80086c8:	f000 fac6 	bl	8008c58 <ai_wine_quality_outputs_get>
 80086cc:	4603      	mov	r3, r0
 80086ce:	4a1c      	ldr	r2, [pc, #112]	; (8008740 <ai_boostrap+0xbc>)
 80086d0:	6013      	str	r3, [r2, #0]

#if defined(AI_WINE_QUALITY_INPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-inputs" option is used, memory buffer can be
   *  used from the activations buffer. This is not mandatory.
   */
  for (int idx=0; idx < AI_WINE_QUALITY_IN_NUM; idx++) {
 80086d2:	2300      	movs	r3, #0
 80086d4:	617b      	str	r3, [r7, #20]
 80086d6:	e00f      	b.n	80086f8 <ai_boostrap+0x74>
	data_ins[idx] = ai_input[idx].data;
 80086d8:	4b18      	ldr	r3, [pc, #96]	; (800873c <ai_boostrap+0xb8>)
 80086da:	6819      	ldr	r1, [r3, #0]
 80086dc:	697a      	ldr	r2, [r7, #20]
 80086de:	4613      	mov	r3, r2
 80086e0:	00db      	lsls	r3, r3, #3
 80086e2:	1a9b      	subs	r3, r3, r2
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	440b      	add	r3, r1
 80086e8:	685a      	ldr	r2, [r3, #4]
 80086ea:	4916      	ldr	r1, [pc, #88]	; (8008744 <ai_boostrap+0xc0>)
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_WINE_QUALITY_IN_NUM; idx++) {
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	3301      	adds	r3, #1
 80086f6:	617b      	str	r3, [r7, #20]
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	ddec      	ble.n	80086d8 <ai_boostrap+0x54>

#if defined(AI_WINE_QUALITY_OUTPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-outputs" option is used, memory buffer can be
   *  used from the activations buffer. This is no mandatory.
   */
  for (int idx=0; idx < AI_WINE_QUALITY_OUT_NUM; idx++) {
 80086fe:	2300      	movs	r3, #0
 8008700:	613b      	str	r3, [r7, #16]
 8008702:	e00f      	b.n	8008724 <ai_boostrap+0xa0>
	data_outs[idx] = ai_output[idx].data;
 8008704:	4b0e      	ldr	r3, [pc, #56]	; (8008740 <ai_boostrap+0xbc>)
 8008706:	6819      	ldr	r1, [r3, #0]
 8008708:	693a      	ldr	r2, [r7, #16]
 800870a:	4613      	mov	r3, r2
 800870c:	00db      	lsls	r3, r3, #3
 800870e:	1a9b      	subs	r3, r3, r2
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	440b      	add	r3, r1
 8008714:	685a      	ldr	r2, [r3, #4]
 8008716:	490c      	ldr	r1, [pc, #48]	; (8008748 <ai_boostrap+0xc4>)
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_WINE_QUALITY_OUT_NUM; idx++) {
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	3301      	adds	r3, #1
 8008722:	613b      	str	r3, [r7, #16]
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	2b00      	cmp	r3, #0
 8008728:	ddec      	ble.n	8008704 <ai_boostrap+0x80>
  for (int idx=0; idx < AI_WINE_QUALITY_OUT_NUM; idx++) {
	ai_output[idx].data = data_outs[idx];
  }
#endif

  return 0;
 800872a:	2300      	movs	r3, #0
}
 800872c:	4618      	mov	r0, r3
 800872e:	3718      	adds	r7, #24
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}
 8008734:	200016c0 	.word	0x200016c0
 8008738:	0800c044 	.word	0x0800c044
 800873c:	200016c4 	.word	0x200016c4
 8008740:	200016c8 	.word	0x200016c8
 8008744:	20001238 	.word	0x20001238
 8008748:	2000123c 	.word	0x2000123c

0800874c <ai_run>:

static int ai_run(void)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b082      	sub	sp, #8
 8008750:	af00      	add	r7, sp, #0
  ai_i32 batch;

  batch = ai_wine_quality_run(wine_quality, ai_input, ai_output);
 8008752:	4b0f      	ldr	r3, [pc, #60]	; (8008790 <ai_run+0x44>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a0f      	ldr	r2, [pc, #60]	; (8008794 <ai_run+0x48>)
 8008758:	6811      	ldr	r1, [r2, #0]
 800875a:	4a0f      	ldr	r2, [pc, #60]	; (8008798 <ai_run+0x4c>)
 800875c:	6812      	ldr	r2, [r2, #0]
 800875e:	4618      	mov	r0, r3
 8008760:	f000 fad0 	bl	8008d04 <ai_wine_quality_run>
 8008764:	6078      	str	r0, [r7, #4]
  if (batch != 1) {
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2b01      	cmp	r3, #1
 800876a:	d00c      	beq.n	8008786 <ai_run+0x3a>
    ai_log_err(ai_wine_quality_get_error(wine_quality),
 800876c:	4b08      	ldr	r3, [pc, #32]	; (8008790 <ai_run+0x44>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4618      	mov	r0, r3
 8008772:	f000 f9c1 	bl	8008af8 <ai_wine_quality_get_error>
 8008776:	4603      	mov	r3, r0
 8008778:	4908      	ldr	r1, [pc, #32]	; (800879c <ai_run+0x50>)
 800877a:	4618      	mov	r0, r3
 800877c:	f7ff ff62 	bl	8008644 <ai_log_err>
        "ai_wine_quality_run");
    return -1;
 8008780:	f04f 33ff 	mov.w	r3, #4294967295
 8008784:	e000      	b.n	8008788 <ai_run+0x3c>
  }

  return 0;
 8008786:	2300      	movs	r3, #0
}
 8008788:	4618      	mov	r0, r3
 800878a:	3708      	adds	r7, #8
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}
 8008790:	200016c0 	.word	0x200016c0
 8008794:	200016c4 	.word	0x200016c4
 8008798:	200016c8 	.word	0x200016c8
 800879c:	0800c064 	.word	0x0800c064

080087a0 <acquire_and_process_data>:

/* USER CODE BEGIN 2 */
int acquire_and_process_data(ai_i8* data[])
{
 80087a0:	b480      	push	{r7}
 80087a2:	b083      	sub	sp, #12
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  {
      data[idx] = ....
  }

  */
  return 0;
 80087a8:	2300      	movs	r3, #0
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	370c      	adds	r7, #12
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr

080087b6 <post_process>:

int post_process(ai_i8* data[])
{
 80087b6:	b480      	push	{r7}
 80087b8:	b083      	sub	sp, #12
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
  {
      data[idx] = ....
  }

  */
  return 0;
 80087be:	2300      	movs	r3, #0
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	370c      	adds	r7, #12
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr

080087cc <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 80087d0:	4803      	ldr	r0, [pc, #12]	; (80087e0 <MX_X_CUBE_AI_Init+0x14>)
 80087d2:	f002 fbed 	bl	800afb0 <puts>

  ai_boostrap(data_activations0);
 80087d6:	4803      	ldr	r0, [pc, #12]	; (80087e4 <MX_X_CUBE_AI_Init+0x18>)
 80087d8:	f7ff ff54 	bl	8008684 <ai_boostrap>
    /* USER CODE END 5 */
}
 80087dc:	bf00      	nop
 80087de:	bd80      	pop	{r7, pc}
 80087e0:	0800c078 	.word	0x0800c078
 80087e4:	2000000c 	.word	0x2000000c

080087e8 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 6 */
  int res = -1;
 80087ee:	f04f 33ff 	mov.w	r3, #4294967295
 80087f2:	607b      	str	r3, [r7, #4]

  printf("TEMPLATE - run - main loop\r\n");
 80087f4:	4816      	ldr	r0, [pc, #88]	; (8008850 <MX_X_CUBE_AI_Process+0x68>)
 80087f6:	f002 fbdb 	bl	800afb0 <puts>

  if (wine_quality) {
 80087fa:	4b16      	ldr	r3, [pc, #88]	; (8008854 <MX_X_CUBE_AI_Process+0x6c>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d013      	beq.n	800882a <MX_X_CUBE_AI_Process+0x42>

    do {
      /* 1 - acquire and pre-process input data */
      res = acquire_and_process_data(data_ins);
 8008802:	4815      	ldr	r0, [pc, #84]	; (8008858 <MX_X_CUBE_AI_Process+0x70>)
 8008804:	f7ff ffcc 	bl	80087a0 <acquire_and_process_data>
 8008808:	6078      	str	r0, [r7, #4]
      /* 2 - process the data - call inference engine */
      if (res == 0)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d102      	bne.n	8008816 <MX_X_CUBE_AI_Process+0x2e>
        res = ai_run();
 8008810:	f7ff ff9c 	bl	800874c <ai_run>
 8008814:	6078      	str	r0, [r7, #4]
      /* 3- post-process the predictions */
      if (res == 0)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d103      	bne.n	8008824 <MX_X_CUBE_AI_Process+0x3c>
        res = post_process(data_outs);
 800881c:	480f      	ldr	r0, [pc, #60]	; (800885c <MX_X_CUBE_AI_Process+0x74>)
 800881e:	f7ff ffca 	bl	80087b6 <post_process>
 8008822:	6078      	str	r0, [r7, #4]
    } while (res==0);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d0eb      	beq.n	8008802 <MX_X_CUBE_AI_Process+0x1a>
  }

  if (res) {
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d00a      	beq.n	8008846 <MX_X_CUBE_AI_Process+0x5e>
    ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
 8008830:	2311      	movs	r3, #17
 8008832:	703b      	strb	r3, [r7, #0]
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	2210      	movs	r2, #16
 8008838:	f362 231f 	bfi	r3, r2, #8, #24
 800883c:	603b      	str	r3, [r7, #0]
    ai_log_err(err, "Process has FAILED");
 800883e:	4908      	ldr	r1, [pc, #32]	; (8008860 <MX_X_CUBE_AI_Process+0x78>)
 8008840:	6838      	ldr	r0, [r7, #0]
 8008842:	f7ff feff 	bl	8008644 <ai_log_err>
  }
    /* USER CODE END 6 */
}
 8008846:	bf00      	nop
 8008848:	3708      	adds	r7, #8
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
 800884e:	bf00      	nop
 8008850:	0800c098 	.word	0x0800c098
 8008854:	200016c0 	.word	0x200016c0
 8008858:	20001238 	.word	0x20001238
 800885c:	2000123c 	.word	0x2000123c
 8008860:	0800c0b4 	.word	0x0800c0b4

08008864 <wine_quality_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool wine_quality_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b082      	sub	sp, #8
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_wine_quality_activations_map, 1, params)) {
 800886e:	683a      	ldr	r2, [r7, #0]
 8008870:	2101      	movs	r1, #1
 8008872:	4837      	ldr	r0, [pc, #220]	; (8008950 <wine_quality_configure_activations+0xec>)
 8008874:	f000 fb24 	bl	8008ec0 <ai_platform_get_activations_map>
 8008878:	4603      	mov	r3, r0
 800887a:	2b00      	cmp	r3, #0
 800887c:	d05d      	beq.n	800893a <wine_quality_configure_activations+0xd6>
    /* Updating activations (byte) offsets */
    
    input_0_output_array.data = AI_PTR(g_wine_quality_activations_map[0] + 352);
 800887e:	4b34      	ldr	r3, [pc, #208]	; (8008950 <wine_quality_configure_activations+0xec>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8008886:	4a33      	ldr	r2, [pc, #204]	; (8008954 <wine_quality_configure_activations+0xf0>)
 8008888:	6093      	str	r3, [r2, #8]
    input_0_output_array.data_start = AI_PTR(g_wine_quality_activations_map[0] + 352);
 800888a:	4b31      	ldr	r3, [pc, #196]	; (8008950 <wine_quality_configure_activations+0xec>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8008892:	4a30      	ldr	r2, [pc, #192]	; (8008954 <wine_quality_configure_activations+0xf0>)
 8008894:	60d3      	str	r3, [r2, #12]
    
    dense_12_dense_output_array.data = AI_PTR(g_wine_quality_activations_map[0] + 384);
 8008896:	4b2e      	ldr	r3, [pc, #184]	; (8008950 <wine_quality_configure_activations+0xec>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800889e:	4a2e      	ldr	r2, [pc, #184]	; (8008958 <wine_quality_configure_activations+0xf4>)
 80088a0:	6093      	str	r3, [r2, #8]
    dense_12_dense_output_array.data_start = AI_PTR(g_wine_quality_activations_map[0] + 384);
 80088a2:	4b2b      	ldr	r3, [pc, #172]	; (8008950 <wine_quality_configure_activations+0xec>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80088aa:	4a2b      	ldr	r2, [pc, #172]	; (8008958 <wine_quality_configure_activations+0xf4>)
 80088ac:	60d3      	str	r3, [r2, #12]
    
    dense_12_output_array.data = AI_PTR(g_wine_quality_activations_map[0] + 384);
 80088ae:	4b28      	ldr	r3, [pc, #160]	; (8008950 <wine_quality_configure_activations+0xec>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80088b6:	4a29      	ldr	r2, [pc, #164]	; (800895c <wine_quality_configure_activations+0xf8>)
 80088b8:	6093      	str	r3, [r2, #8]
    dense_12_output_array.data_start = AI_PTR(g_wine_quality_activations_map[0] + 384);
 80088ba:	4b25      	ldr	r3, [pc, #148]	; (8008950 <wine_quality_configure_activations+0xec>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80088c2:	4a26      	ldr	r2, [pc, #152]	; (800895c <wine_quality_configure_activations+0xf8>)
 80088c4:	60d3      	str	r3, [r2, #12]
    
    dense_13_dense_output_array.data = AI_PTR(g_wine_quality_activations_map[0] + 0);
 80088c6:	4b22      	ldr	r3, [pc, #136]	; (8008950 <wine_quality_configure_activations+0xec>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a25      	ldr	r2, [pc, #148]	; (8008960 <wine_quality_configure_activations+0xfc>)
 80088cc:	6093      	str	r3, [r2, #8]
    dense_13_dense_output_array.data_start = AI_PTR(g_wine_quality_activations_map[0] + 0);
 80088ce:	4b20      	ldr	r3, [pc, #128]	; (8008950 <wine_quality_configure_activations+0xec>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a23      	ldr	r2, [pc, #140]	; (8008960 <wine_quality_configure_activations+0xfc>)
 80088d4:	60d3      	str	r3, [r2, #12]
    
    dense_13_output_array.data = AI_PTR(g_wine_quality_activations_map[0] + 384);
 80088d6:	4b1e      	ldr	r3, [pc, #120]	; (8008950 <wine_quality_configure_activations+0xec>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80088de:	4a21      	ldr	r2, [pc, #132]	; (8008964 <wine_quality_configure_activations+0x100>)
 80088e0:	6093      	str	r3, [r2, #8]
    dense_13_output_array.data_start = AI_PTR(g_wine_quality_activations_map[0] + 384);
 80088e2:	4b1b      	ldr	r3, [pc, #108]	; (8008950 <wine_quality_configure_activations+0xec>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80088ea:	4a1e      	ldr	r2, [pc, #120]	; (8008964 <wine_quality_configure_activations+0x100>)
 80088ec:	60d3      	str	r3, [r2, #12]
    
    dense_14_dense_output_array.data = AI_PTR(g_wine_quality_activations_map[0] + 0);
 80088ee:	4b18      	ldr	r3, [pc, #96]	; (8008950 <wine_quality_configure_activations+0xec>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a1d      	ldr	r2, [pc, #116]	; (8008968 <wine_quality_configure_activations+0x104>)
 80088f4:	6093      	str	r3, [r2, #8]
    dense_14_dense_output_array.data_start = AI_PTR(g_wine_quality_activations_map[0] + 0);
 80088f6:	4b16      	ldr	r3, [pc, #88]	; (8008950 <wine_quality_configure_activations+0xec>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4a1b      	ldr	r2, [pc, #108]	; (8008968 <wine_quality_configure_activations+0x104>)
 80088fc:	60d3      	str	r3, [r2, #12]
    
    dense_14_output_array.data = AI_PTR(g_wine_quality_activations_map[0] + 128);
 80088fe:	4b14      	ldr	r3, [pc, #80]	; (8008950 <wine_quality_configure_activations+0xec>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	3380      	adds	r3, #128	; 0x80
 8008904:	4a19      	ldr	r2, [pc, #100]	; (800896c <wine_quality_configure_activations+0x108>)
 8008906:	6093      	str	r3, [r2, #8]
    dense_14_output_array.data_start = AI_PTR(g_wine_quality_activations_map[0] + 128);
 8008908:	4b11      	ldr	r3, [pc, #68]	; (8008950 <wine_quality_configure_activations+0xec>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	3380      	adds	r3, #128	; 0x80
 800890e:	4a17      	ldr	r2, [pc, #92]	; (800896c <wine_quality_configure_activations+0x108>)
 8008910:	60d3      	str	r3, [r2, #12]
    
    dense_15_dense_output_array.data = AI_PTR(g_wine_quality_activations_map[0] + 0);
 8008912:	4b0f      	ldr	r3, [pc, #60]	; (8008950 <wine_quality_configure_activations+0xec>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4a16      	ldr	r2, [pc, #88]	; (8008970 <wine_quality_configure_activations+0x10c>)
 8008918:	6093      	str	r3, [r2, #8]
    dense_15_dense_output_array.data_start = AI_PTR(g_wine_quality_activations_map[0] + 0);
 800891a:	4b0d      	ldr	r3, [pc, #52]	; (8008950 <wine_quality_configure_activations+0xec>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a14      	ldr	r2, [pc, #80]	; (8008970 <wine_quality_configure_activations+0x10c>)
 8008920:	60d3      	str	r3, [r2, #12]
    
    activation_3_output_array.data = AI_PTR(g_wine_quality_activations_map[0] + 28);
 8008922:	4b0b      	ldr	r3, [pc, #44]	; (8008950 <wine_quality_configure_activations+0xec>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	331c      	adds	r3, #28
 8008928:	4a12      	ldr	r2, [pc, #72]	; (8008974 <wine_quality_configure_activations+0x110>)
 800892a:	6093      	str	r3, [r2, #8]
    activation_3_output_array.data_start = AI_PTR(g_wine_quality_activations_map[0] + 28);
 800892c:	4b08      	ldr	r3, [pc, #32]	; (8008950 <wine_quality_configure_activations+0xec>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	331c      	adds	r3, #28
 8008932:	4a10      	ldr	r2, [pc, #64]	; (8008974 <wine_quality_configure_activations+0x110>)
 8008934:	60d3      	str	r3, [r2, #12]
    
    return true;
 8008936:	2301      	movs	r3, #1
 8008938:	e005      	b.n	8008946 <wine_quality_configure_activations+0xe2>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800893a:	2213      	movs	r2, #19
 800893c:	2130      	movs	r1, #48	; 0x30
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 fba2 	bl	8009088 <ai_platform_network_set_error>
  return false;
 8008944:	2300      	movs	r3, #0
}
 8008946:	4618      	mov	r0, r3
 8008948:	3708      	adds	r7, #8
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	200016cc 	.word	0x200016cc
 8008954:	20000010 	.word	0x20000010
 8008958:	20000030 	.word	0x20000030
 800895c:	20000040 	.word	0x20000040
 8008960:	20000060 	.word	0x20000060
 8008964:	20000080 	.word	0x20000080
 8008968:	20000090 	.word	0x20000090
 800896c:	200000a0 	.word	0x200000a0
 8008970:	200000b0 	.word	0x200000b0
 8008974:	200000c0 	.word	0x200000c0

08008978 <wine_quality_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool wine_quality_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b082      	sub	sp, #8
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_wine_quality_weights_map, 1, params)) {
 8008982:	683a      	ldr	r2, [r7, #0]
 8008984:	2101      	movs	r1, #1
 8008986:	4853      	ldr	r0, [pc, #332]	; (8008ad4 <wine_quality_configure_weights+0x15c>)
 8008988:	f000 fa46 	bl	8008e18 <ai_platform_get_weights_map>
 800898c:	4603      	mov	r3, r0
 800898e:	2b00      	cmp	r3, #0
 8008990:	f000 8096 	beq.w	8008ac0 <wine_quality_configure_weights+0x148>
    /* Updating weights (byte) offsets */
    
    dense_14_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8008994:	4b50      	ldr	r3, [pc, #320]	; (8008ad8 <wine_quality_configure_weights+0x160>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800899c:	4a4e      	ldr	r2, [pc, #312]	; (8008ad8 <wine_quality_configure_weights+0x160>)
 800899e:	6013      	str	r3, [r2, #0]
    dense_14_dense_bias_array.data = AI_PTR(g_wine_quality_weights_map[0] + 0);
 80089a0:	4b4c      	ldr	r3, [pc, #304]	; (8008ad4 <wine_quality_configure_weights+0x15c>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a4c      	ldr	r2, [pc, #304]	; (8008ad8 <wine_quality_configure_weights+0x160>)
 80089a6:	6093      	str	r3, [r2, #8]
    dense_14_dense_bias_array.data_start = AI_PTR(g_wine_quality_weights_map[0] + 0);
 80089a8:	4b4a      	ldr	r3, [pc, #296]	; (8008ad4 <wine_quality_configure_weights+0x15c>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a4a      	ldr	r2, [pc, #296]	; (8008ad8 <wine_quality_configure_weights+0x160>)
 80089ae:	60d3      	str	r3, [r2, #12]
    
    dense_15_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 80089b0:	4b4a      	ldr	r3, [pc, #296]	; (8008adc <wine_quality_configure_weights+0x164>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089b8:	4a48      	ldr	r2, [pc, #288]	; (8008adc <wine_quality_configure_weights+0x164>)
 80089ba:	6013      	str	r3, [r2, #0]
    dense_15_dense_weights_array.data = AI_PTR(g_wine_quality_weights_map[0] + 128);
 80089bc:	4b45      	ldr	r3, [pc, #276]	; (8008ad4 <wine_quality_configure_weights+0x15c>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	3380      	adds	r3, #128	; 0x80
 80089c2:	4a46      	ldr	r2, [pc, #280]	; (8008adc <wine_quality_configure_weights+0x164>)
 80089c4:	6093      	str	r3, [r2, #8]
    dense_15_dense_weights_array.data_start = AI_PTR(g_wine_quality_weights_map[0] + 128);
 80089c6:	4b43      	ldr	r3, [pc, #268]	; (8008ad4 <wine_quality_configure_weights+0x15c>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	3380      	adds	r3, #128	; 0x80
 80089cc:	4a43      	ldr	r2, [pc, #268]	; (8008adc <wine_quality_configure_weights+0x164>)
 80089ce:	60d3      	str	r3, [r2, #12]
    
    dense_15_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 80089d0:	4b43      	ldr	r3, [pc, #268]	; (8008ae0 <wine_quality_configure_weights+0x168>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089d8:	4a41      	ldr	r2, [pc, #260]	; (8008ae0 <wine_quality_configure_weights+0x168>)
 80089da:	6013      	str	r3, [r2, #0]
    dense_15_dense_bias_array.data = AI_PTR(g_wine_quality_weights_map[0] + 1024);
 80089dc:	4b3d      	ldr	r3, [pc, #244]	; (8008ad4 <wine_quality_configure_weights+0x15c>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089e4:	4a3e      	ldr	r2, [pc, #248]	; (8008ae0 <wine_quality_configure_weights+0x168>)
 80089e6:	6093      	str	r3, [r2, #8]
    dense_15_dense_bias_array.data_start = AI_PTR(g_wine_quality_weights_map[0] + 1024);
 80089e8:	4b3a      	ldr	r3, [pc, #232]	; (8008ad4 <wine_quality_configure_weights+0x15c>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089f0:	4a3b      	ldr	r2, [pc, #236]	; (8008ae0 <wine_quality_configure_weights+0x168>)
 80089f2:	60d3      	str	r3, [r2, #12]
    
    dense_12_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 80089f4:	4b3b      	ldr	r3, [pc, #236]	; (8008ae4 <wine_quality_configure_weights+0x16c>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089fc:	4a39      	ldr	r2, [pc, #228]	; (8008ae4 <wine_quality_configure_weights+0x16c>)
 80089fe:	6013      	str	r3, [r2, #0]
    dense_12_dense_weights_array.data = AI_PTR(g_wine_quality_weights_map[0] + 1052);
 8008a00:	4b34      	ldr	r3, [pc, #208]	; (8008ad4 <wine_quality_configure_weights+0x15c>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8008a08:	4a36      	ldr	r2, [pc, #216]	; (8008ae4 <wine_quality_configure_weights+0x16c>)
 8008a0a:	6093      	str	r3, [r2, #8]
    dense_12_dense_weights_array.data_start = AI_PTR(g_wine_quality_weights_map[0] + 1052);
 8008a0c:	4b31      	ldr	r3, [pc, #196]	; (8008ad4 <wine_quality_configure_weights+0x15c>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8008a14:	4a33      	ldr	r2, [pc, #204]	; (8008ae4 <wine_quality_configure_weights+0x16c>)
 8008a16:	60d3      	str	r3, [r2, #12]
    
    dense_12_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8008a18:	4b33      	ldr	r3, [pc, #204]	; (8008ae8 <wine_quality_configure_weights+0x170>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a20:	4a31      	ldr	r2, [pc, #196]	; (8008ae8 <wine_quality_configure_weights+0x170>)
 8008a22:	6013      	str	r3, [r2, #0]
    dense_12_dense_bias_array.data = AI_PTR(g_wine_quality_weights_map[0] + 7196);
 8008a24:	4b2b      	ldr	r3, [pc, #172]	; (8008ad4 <wine_quality_configure_weights+0x15c>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8008a2c:	331c      	adds	r3, #28
 8008a2e:	4a2e      	ldr	r2, [pc, #184]	; (8008ae8 <wine_quality_configure_weights+0x170>)
 8008a30:	6093      	str	r3, [r2, #8]
    dense_12_dense_bias_array.data_start = AI_PTR(g_wine_quality_weights_map[0] + 7196);
 8008a32:	4b28      	ldr	r3, [pc, #160]	; (8008ad4 <wine_quality_configure_weights+0x15c>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8008a3a:	331c      	adds	r3, #28
 8008a3c:	4a2a      	ldr	r2, [pc, #168]	; (8008ae8 <wine_quality_configure_weights+0x170>)
 8008a3e:	60d3      	str	r3, [r2, #12]
    
    dense_13_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8008a40:	4b2a      	ldr	r3, [pc, #168]	; (8008aec <wine_quality_configure_weights+0x174>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a48:	4a28      	ldr	r2, [pc, #160]	; (8008aec <wine_quality_configure_weights+0x174>)
 8008a4a:	6013      	str	r3, [r2, #0]
    dense_13_dense_weights_array.data = AI_PTR(g_wine_quality_weights_map[0] + 7964);
 8008a4c:	4b21      	ldr	r3, [pc, #132]	; (8008ad4 <wine_quality_configure_weights+0x15c>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8008a54:	331c      	adds	r3, #28
 8008a56:	4a25      	ldr	r2, [pc, #148]	; (8008aec <wine_quality_configure_weights+0x174>)
 8008a58:	6093      	str	r3, [r2, #8]
    dense_13_dense_weights_array.data_start = AI_PTR(g_wine_quality_weights_map[0] + 7964);
 8008a5a:	4b1e      	ldr	r3, [pc, #120]	; (8008ad4 <wine_quality_configure_weights+0x15c>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8008a62:	331c      	adds	r3, #28
 8008a64:	4a21      	ldr	r2, [pc, #132]	; (8008aec <wine_quality_configure_weights+0x174>)
 8008a66:	60d3      	str	r3, [r2, #12]
    
    dense_13_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8008a68:	4b21      	ldr	r3, [pc, #132]	; (8008af0 <wine_quality_configure_weights+0x178>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a70:	4a1f      	ldr	r2, [pc, #124]	; (8008af0 <wine_quality_configure_weights+0x178>)
 8008a72:	6013      	str	r3, [r2, #0]
    dense_13_dense_bias_array.data = AI_PTR(g_wine_quality_weights_map[0] + 81692);
 8008a74:	4b17      	ldr	r3, [pc, #92]	; (8008ad4 <wine_quality_configure_weights+0x15c>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f503 339f 	add.w	r3, r3, #81408	; 0x13e00
 8008a7c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008a80:	4a1b      	ldr	r2, [pc, #108]	; (8008af0 <wine_quality_configure_weights+0x178>)
 8008a82:	6093      	str	r3, [r2, #8]
    dense_13_dense_bias_array.data_start = AI_PTR(g_wine_quality_weights_map[0] + 81692);
 8008a84:	4b13      	ldr	r3, [pc, #76]	; (8008ad4 <wine_quality_configure_weights+0x15c>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f503 339f 	add.w	r3, r3, #81408	; 0x13e00
 8008a8c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008a90:	4a17      	ldr	r2, [pc, #92]	; (8008af0 <wine_quality_configure_weights+0x178>)
 8008a92:	60d3      	str	r3, [r2, #12]
    
    dense_14_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8008a94:	4b17      	ldr	r3, [pc, #92]	; (8008af4 <wine_quality_configure_weights+0x17c>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a9c:	4a15      	ldr	r2, [pc, #84]	; (8008af4 <wine_quality_configure_weights+0x17c>)
 8008a9e:	6013      	str	r3, [r2, #0]
    dense_14_dense_weights_array.data = AI_PTR(g_wine_quality_weights_map[0] + 82076);
 8008aa0:	4b0c      	ldr	r3, [pc, #48]	; (8008ad4 <wine_quality_configure_weights+0x15c>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
 8008aa8:	339c      	adds	r3, #156	; 0x9c
 8008aaa:	4a12      	ldr	r2, [pc, #72]	; (8008af4 <wine_quality_configure_weights+0x17c>)
 8008aac:	6093      	str	r3, [r2, #8]
    dense_14_dense_weights_array.data_start = AI_PTR(g_wine_quality_weights_map[0] + 82076);
 8008aae:	4b09      	ldr	r3, [pc, #36]	; (8008ad4 <wine_quality_configure_weights+0x15c>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
 8008ab6:	339c      	adds	r3, #156	; 0x9c
 8008ab8:	4a0e      	ldr	r2, [pc, #56]	; (8008af4 <wine_quality_configure_weights+0x17c>)
 8008aba:	60d3      	str	r3, [r2, #12]
    
    return true;
 8008abc:	2301      	movs	r3, #1
 8008abe:	e005      	b.n	8008acc <wine_quality_configure_weights+0x154>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8008ac0:	2212      	movs	r2, #18
 8008ac2:	2130      	movs	r1, #48	; 0x30
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 fadf 	bl	8009088 <ai_platform_network_set_error>
  return false;
 8008aca:	2300      	movs	r3, #0
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3708      	adds	r7, #8
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}
 8008ad4:	200016d0 	.word	0x200016d0
 8008ad8:	20000020 	.word	0x20000020
 8008adc:	20000050 	.word	0x20000050
 8008ae0:	20000070 	.word	0x20000070
 8008ae4:	200000d0 	.word	0x200000d0
 8008ae8:	200000e0 	.word	0x200000e0
 8008aec:	200000f0 	.word	0x200000f0
 8008af0:	20000100 	.word	0x20000100
 8008af4:	20000110 	.word	0x20000110

08008af8 <ai_wine_quality_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_wine_quality_get_error(ai_handle network)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b082      	sub	sp, #8
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f000 fa53 	bl	8008fac <ai_platform_network_get_error>
 8008b06:	4603      	mov	r3, r0
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3708      	adds	r7, #8
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}

08008b10 <ai_wine_quality_create>:

AI_API_ENTRY
ai_error ai_wine_quality_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af02      	add	r7, sp, #8
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	9301      	str	r3, [sp, #4]
 8008b1e:	2305      	movs	r3, #5
 8008b20:	9300      	str	r3, [sp, #0]
 8008b22:	2301      	movs	r3, #1
 8008b24:	4a04      	ldr	r2, [pc, #16]	; (8008b38 <ai_wine_quality_create+0x28>)
 8008b26:	6839      	ldr	r1, [r7, #0]
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 fc59 	bl	80093e0 <ai_platform_network_create>
 8008b2e:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3708      	adds	r7, #8
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}
 8008b38:	2000087c 	.word	0x2000087c

08008b3c <ai_wine_quality_create_and_init>:

AI_API_ENTRY
ai_error ai_wine_quality_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b096      	sub	sp, #88	; 0x58
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	60f8      	str	r0, [r7, #12]
 8008b44:	60b9      	str	r1, [r7, #8]
 8008b46:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_wine_quality_create(network, AI_WINE_QUALITY_DATA_CONFIG);
 8008b48:	2100      	movs	r1, #0
 8008b4a:	68f8      	ldr	r0, [r7, #12]
 8008b4c:	f7ff ffe0 	bl	8008b10 <ai_wine_quality_create>
 8008b50:	4603      	mov	r3, r0
 8008b52:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 8008b54:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d001      	beq.n	8008b60 <ai_wine_quality_create_and_init+0x24>
        return err;
 8008b5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b5e:	e05d      	b.n	8008c1c <ai_wine_quality_create_and_init+0xe0>
    if (ai_wine_quality_data_params_get(&params) != true) {
 8008b60:	f107 0314 	add.w	r3, r7, #20
 8008b64:	4618      	mov	r0, r3
 8008b66:	f000 f8dd 	bl	8008d24 <ai_wine_quality_data_params_get>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	f083 0301 	eor.w	r3, r3, #1
 8008b70:	b2db      	uxtb	r3, r3
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d008      	beq.n	8008b88 <ai_wine_quality_create_and_init+0x4c>
        err = ai_wine_quality_get_error(*network);
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f7ff ffbc 	bl	8008af8 <ai_wine_quality_get_error>
 8008b80:	4603      	mov	r3, r0
 8008b82:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 8008b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b86:	e049      	b.n	8008c1c <ai_wine_quality_create_and_init+0xe0>
    }
#if defined(AI_WINE_QUALITY_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d016      	beq.n	8008bbc <ai_wine_quality_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 8008b8e:	2300      	movs	r3, #0
 8008b90:	657b      	str	r3, [r7, #84]	; 0x54
 8008b92:	e00e      	b.n	8008bb2 <ai_wine_quality_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8008b94:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008b96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b98:	009b      	lsls	r3, r3, #2
 8008b9a:	68ba      	ldr	r2, [r7, #8]
 8008b9c:	4413      	add	r3, r2
 8008b9e:	681a      	ldr	r2, [r3, #0]
 8008ba0:	f107 0314 	add.w	r3, r7, #20
 8008ba4:	330c      	adds	r3, #12
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f000 f922 	bl	8008df0 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8008bac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bae:	3301      	adds	r3, #1
 8008bb0:	657b      	str	r3, [r7, #84]	; 0x54
 8008bb2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	dbeb      	blt.n	8008b94 <ai_wine_quality_create_and_init+0x58>
    }
#endif
#if defined(AI_WINE_QUALITY_DATA_WEIGHTS_COUNT)
    if (weights) {
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d016      	beq.n	8008bf0 <ai_wine_quality_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	653b      	str	r3, [r7, #80]	; 0x50
 8008bc6:	e00e      	b.n	8008be6 <ai_wine_quality_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8008bc8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008bca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	4413      	add	r3, r2
 8008bd2:	681a      	ldr	r2, [r3, #0]
 8008bd4:	f107 0314 	add.w	r3, r7, #20
 8008bd8:	3304      	adds	r3, #4
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f000 f908 	bl	8008df0 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8008be0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008be2:	3301      	adds	r3, #1
 8008be4:	653b      	str	r3, [r7, #80]	; 0x50
 8008be6:	8b7b      	ldrh	r3, [r7, #26]
 8008be8:	461a      	mov	r2, r3
 8008bea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bec:	4293      	cmp	r3, r2
 8008bee:	dbeb      	blt.n	8008bc8 <ai_wine_quality_create_and_init+0x8c>
    }
#endif
    if (ai_wine_quality_init(*network, &params) != true) {
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f107 0214 	add.w	r2, r7, #20
 8008bf8:	4611      	mov	r1, r2
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f000 f846 	bl	8008c8c <ai_wine_quality_init>
 8008c00:	4603      	mov	r3, r0
 8008c02:	f083 0301 	eor.w	r3, r3, #1
 8008c06:	b2db      	uxtb	r3, r3
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d006      	beq.n	8008c1a <ai_wine_quality_create_and_init+0xde>
        err = ai_wine_quality_get_error(*network);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4618      	mov	r0, r3
 8008c12:	f7ff ff71 	bl	8008af8 <ai_wine_quality_get_error>
 8008c16:	4603      	mov	r3, r0
 8008c18:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 8008c1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3758      	adds	r7, #88	; 0x58
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <ai_wine_quality_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_wine_quality_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b082      	sub	sp, #8
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d104      	bne.n	8008c3e <ai_wine_quality_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8008c34:	4b06      	ldr	r3, [pc, #24]	; (8008c50 <ai_wine_quality_inputs_get+0x2c>)
 8008c36:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	4a06      	ldr	r2, [pc, #24]	; (8008c54 <ai_wine_quality_inputs_get+0x30>)
 8008c3c:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8008c3e:	6839      	ldr	r1, [r7, #0]
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 fa27 	bl	8009094 <ai_platform_inputs_get>
 8008c46:	4603      	mov	r3, r0
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3708      	adds	r7, #8
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}
 8008c50:	2000087c 	.word	0x2000087c
 8008c54:	a1c00100 	.word	0xa1c00100

08008c58 <ai_wine_quality_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_wine_quality_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d104      	bne.n	8008c72 <ai_wine_quality_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8008c68:	4b06      	ldr	r3, [pc, #24]	; (8008c84 <ai_wine_quality_outputs_get+0x2c>)
 8008c6a:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	4a06      	ldr	r2, [pc, #24]	; (8008c88 <ai_wine_quality_outputs_get+0x30>)
 8008c70:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8008c72:	6839      	ldr	r1, [r7, #0]
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f000 fae3 	bl	8009240 <ai_platform_outputs_get>
 8008c7a:	4603      	mov	r3, r0
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3708      	adds	r7, #8
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}
 8008c84:	2000087c 	.word	0x2000087c
 8008c88:	a1c00100 	.word	0xa1c00100

08008c8c <ai_wine_quality_init>:
}

AI_API_ENTRY
ai_bool ai_wine_quality_init(
  ai_handle network, const ai_network_params* params)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b084      	sub	sp, #16
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
 8008c94:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8008c96:	6839      	ldr	r1, [r7, #0]
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f000 fc77 	bl	800958c <ai_platform_network_init>
 8008c9e:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d101      	bne.n	8008caa <ai_wine_quality_init+0x1e>
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	e028      	b.n	8008cfc <ai_wine_quality_init+0x70>

  ai_bool ok = true;
 8008caa:	2301      	movs	r3, #1
 8008cac:	72fb      	strb	r3, [r7, #11]
  ok &= wine_quality_configure_weights(net_ctx, params);
 8008cae:	6839      	ldr	r1, [r7, #0]
 8008cb0:	68f8      	ldr	r0, [r7, #12]
 8008cb2:	f7ff fe61 	bl	8008978 <wine_quality_configure_weights>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	461a      	mov	r2, r3
 8008cba:	7afb      	ldrb	r3, [r7, #11]
 8008cbc:	4013      	ands	r3, r2
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	bf14      	ite	ne
 8008cc2:	2301      	movne	r3, #1
 8008cc4:	2300      	moveq	r3, #0
 8008cc6:	72fb      	strb	r3, [r7, #11]
  ok &= wine_quality_configure_activations(net_ctx, params);
 8008cc8:	6839      	ldr	r1, [r7, #0]
 8008cca:	68f8      	ldr	r0, [r7, #12]
 8008ccc:	f7ff fdca 	bl	8008864 <wine_quality_configure_activations>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	7afb      	ldrb	r3, [r7, #11]
 8008cd6:	4013      	ands	r3, r2
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	bf14      	ite	ne
 8008cdc:	2301      	movne	r3, #1
 8008cde:	2300      	moveq	r3, #0
 8008ce0:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 fd40 	bl	8009768 <ai_platform_network_post_init>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	461a      	mov	r2, r3
 8008cec:	7afb      	ldrb	r3, [r7, #11]
 8008cee:	4013      	ands	r3, r2
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	bf14      	ite	ne
 8008cf4:	2301      	movne	r3, #1
 8008cf6:	2300      	moveq	r3, #0
 8008cf8:	72fb      	strb	r3, [r7, #11]

  return ok;
 8008cfa:	7afb      	ldrb	r3, [r7, #11]
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3710      	adds	r7, #16
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <ai_wine_quality_run>:


AI_API_ENTRY
ai_i32 ai_wine_quality_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b084      	sub	sp, #16
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	60f8      	str	r0, [r7, #12]
 8008d0c:	60b9      	str	r1, [r7, #8]
 8008d0e:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8008d10:	687a      	ldr	r2, [r7, #4]
 8008d12:	68b9      	ldr	r1, [r7, #8]
 8008d14:	68f8      	ldr	r0, [r7, #12]
 8008d16:	f000 fdaf 	bl	8009878 <ai_platform_network_process>
 8008d1a:	4603      	mov	r3, r0
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3710      	adds	r7, #16
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <ai_wine_quality_data_params_get>:
 * @ingroup wine_quality_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_wine_quality_data_params_get(ai_network_params* params)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b086      	sub	sp, #24
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d101      	bne.n	8008d36 <ai_wine_quality_data_params_get+0x12>
 8008d32:	2300      	movs	r3, #0
 8008d34:	e016      	b.n	8008d64 <ai_wine_quality_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8008d36:	4a0d      	ldr	r2, [pc, #52]	; (8008d6c <ai_wine_quality_data_params_get+0x48>)
 8008d38:	f107 0310 	add.w	r3, r7, #16
 8008d3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008d40:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_WINE_QUALITY_DATA_ACTIVATIONS_COUNT, g_wine_quality_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8008d44:	4a0a      	ldr	r2, [pc, #40]	; (8008d70 <ai_wine_quality_data_params_get+0x4c>)
 8008d46:	f107 0308 	add.w	r3, r7, #8
 8008d4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008d4e:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_WINE_QUALITY_DATA_WEIGHTS_COUNT, g_wine_quality_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8008d52:	f107 0210 	add.w	r2, r7, #16
 8008d56:	f107 0308 	add.w	r3, r7, #8
 8008d5a:	4619      	mov	r1, r3
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 f903 	bl	8008f68 <ai_platform_bind_network_params>
 8008d62:	4603      	mov	r3, r0
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3718      	adds	r7, #24
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}
 8008d6c:	0800c0e8 	.word	0x0800c0e8
 8008d70:	0800c0f0 	.word	0x0800c0f0

08008d74 <ai_buffer_get_size>:
 8008d74:	b378      	cbz	r0, 8008dd6 <ai_buffer_get_size+0x62>
 8008d76:	b410      	push	{r4}
 8008d78:	6803      	ldr	r3, [r0, #0]
 8008d7a:	4a17      	ldr	r2, [pc, #92]	; (8008dd8 <ai_buffer_get_size+0x64>)
 8008d7c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8008d80:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d01e      	beq.n	8008dc6 <ai_buffer_get_size+0x52>
 8008d88:	6984      	ldr	r4, [r0, #24]
 8008d8a:	6862      	ldr	r2, [r4, #4]
 8008d8c:	7d03      	ldrb	r3, [r0, #20]
 8008d8e:	6941      	ldr	r1, [r0, #20]
 8008d90:	f1a3 0301 	sub.w	r3, r3, #1
 8008d94:	fab3 f383 	clz	r3, r3
 8008d98:	095b      	lsrs	r3, r3, #5
 8008d9a:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8008d9e:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8008da2:	da0b      	bge.n	8008dbc <ai_buffer_get_size+0x48>
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	d102      	bne.n	8008dae <ai_buffer_get_size+0x3a>
 8008da8:	2802      	cmp	r0, #2
 8008daa:	d007      	beq.n	8008dbc <ai_buffer_get_size+0x48>
 8008dac:	2302      	movs	r3, #2
 8008dae:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8008db2:	3301      	adds	r3, #1
 8008db4:	4298      	cmp	r0, r3
 8008db6:	fb01 f202 	mul.w	r2, r1, r2
 8008dba:	d1f3      	bne.n	8008da4 <ai_buffer_get_size+0x30>
 8008dbc:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8008dc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008dc4:	4770      	bx	lr
 8008dc6:	2900      	cmp	r1, #0
 8008dc8:	d0de      	beq.n	8008d88 <ai_buffer_get_size+0x14>
 8008dca:	6984      	ldr	r4, [r0, #24]
 8008dcc:	6863      	ldr	r3, [r4, #4]
 8008dce:	331f      	adds	r3, #31
 8008dd0:	f023 021f 	bic.w	r2, r3, #31
 8008dd4:	e7da      	b.n	8008d8c <ai_buffer_get_size+0x18>
 8008dd6:	4770      	bx	lr
 8008dd8:	000400c0 	.word	0x000400c0

08008ddc <ai_buffer_array_sane>:
 8008ddc:	b138      	cbz	r0, 8008dee <ai_buffer_array_sane+0x12>
 8008dde:	6843      	ldr	r3, [r0, #4]
 8008de0:	b123      	cbz	r3, 8008dec <ai_buffer_array_sane+0x10>
 8008de2:	8840      	ldrh	r0, [r0, #2]
 8008de4:	3800      	subs	r0, #0
 8008de6:	bf18      	it	ne
 8008de8:	2001      	movne	r0, #1
 8008dea:	4770      	bx	lr
 8008dec:	4618      	mov	r0, r3
 8008dee:	4770      	bx	lr

08008df0 <ai_buffer_array_item_set_address>:
 8008df0:	b150      	cbz	r0, 8008e08 <ai_buffer_array_item_set_address+0x18>
 8008df2:	6843      	ldr	r3, [r0, #4]
 8008df4:	b14b      	cbz	r3, 8008e0a <ai_buffer_array_item_set_address+0x1a>
 8008df6:	8840      	ldrh	r0, [r0, #2]
 8008df8:	b900      	cbnz	r0, 8008dfc <ai_buffer_array_item_set_address+0xc>
 8008dfa:	4770      	bx	lr
 8008dfc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8008e00:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8008e04:	2001      	movs	r0, #1
 8008e06:	604a      	str	r2, [r1, #4]
 8008e08:	4770      	bx	lr
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	4770      	bx	lr
 8008e0e:	bf00      	nop

08008e10 <_ai_platform_acquire_crc>:
 8008e10:	2001      	movs	r0, #1
 8008e12:	4770      	bx	lr

08008e14 <_ai_platform_release_crc>:
 8008e14:	4770      	bx	lr
 8008e16:	bf00      	nop

08008e18 <ai_platform_get_weights_map>:
 8008e18:	2a00      	cmp	r2, #0
 8008e1a:	d037      	beq.n	8008e8c <ai_platform_get_weights_map+0x74>
 8008e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e1e:	4604      	mov	r4, r0
 8008e20:	b1a0      	cbz	r0, 8008e4c <ai_platform_get_weights_map+0x34>
 8008e22:	460f      	mov	r7, r1
 8008e24:	b191      	cbz	r1, 8008e4c <ai_platform_get_weights_map+0x34>
 8008e26:	4b25      	ldr	r3, [pc, #148]	; (8008ebc <ai_platform_get_weights_map+0xa4>)
 8008e28:	6810      	ldr	r0, [r2, #0]
 8008e2a:	4298      	cmp	r0, r3
 8008e2c:	4615      	mov	r5, r2
 8008e2e:	d00f      	beq.n	8008e50 <ai_platform_get_weights_map+0x38>
 8008e30:	6855      	ldr	r5, [r2, #4]
 8008e32:	b15d      	cbz	r5, 8008e4c <ai_platform_get_weights_map+0x34>
 8008e34:	682e      	ldr	r6, [r5, #0]
 8008e36:	429e      	cmp	r6, r3
 8008e38:	d02a      	beq.n	8008e90 <ai_platform_get_weights_map+0x78>
 8008e3a:	f1a1 0001 	sub.w	r0, r1, #1
 8008e3e:	6025      	str	r5, [r4, #0]
 8008e40:	fab0 f080 	clz	r0, r0
 8008e44:	0940      	lsrs	r0, r0, #5
 8008e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e48:	42a7      	cmp	r7, r4
 8008e4a:	d034      	beq.n	8008eb6 <ai_platform_get_weights_map+0x9e>
 8008e4c:	2000      	movs	r0, #0
 8008e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e50:	1d10      	adds	r0, r2, #4
 8008e52:	f7ff ffc3 	bl	8008ddc <ai_buffer_array_sane>
 8008e56:	2800      	cmp	r0, #0
 8008e58:	d0f8      	beq.n	8008e4c <ai_platform_get_weights_map+0x34>
 8008e5a:	88eb      	ldrh	r3, [r5, #6]
 8008e5c:	429f      	cmp	r7, r3
 8008e5e:	d1f5      	bne.n	8008e4c <ai_platform_get_weights_map+0x34>
 8008e60:	f04f 0e00 	mov.w	lr, #0
 8008e64:	1f23      	subs	r3, r4, #4
 8008e66:	4670      	mov	r0, lr
 8008e68:	68aa      	ldr	r2, [r5, #8]
 8008e6a:	eb02 0c0e 	add.w	ip, r2, lr
 8008e6e:	f10e 0e1c 	add.w	lr, lr, #28
 8008e72:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8008e76:	b124      	cbz	r4, 8008e82 <ai_platform_get_weights_map+0x6a>
 8008e78:	3001      	adds	r0, #1
 8008e7a:	4287      	cmp	r7, r0
 8008e7c:	f843 4f04 	str.w	r4, [r3, #4]!
 8008e80:	d1f2      	bne.n	8008e68 <ai_platform_get_weights_map+0x50>
 8008e82:	1a38      	subs	r0, r7, r0
 8008e84:	fab0 f080 	clz	r0, r0
 8008e88:	0940      	lsrs	r0, r0, #5
 8008e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e8c:	2000      	movs	r0, #0
 8008e8e:	4770      	bx	lr
 8008e90:	1f23      	subs	r3, r4, #4
 8008e92:	4628      	mov	r0, r5
 8008e94:	2400      	movs	r4, #0
 8008e96:	e000      	b.n	8008e9a <ai_platform_get_weights_map+0x82>
 8008e98:	4614      	mov	r4, r2
 8008e9a:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8008e9e:	42b2      	cmp	r2, r6
 8008ea0:	d0d2      	beq.n	8008e48 <ai_platform_get_weights_map+0x30>
 8008ea2:	f843 2f04 	str.w	r2, [r3, #4]!
 8008ea6:	1c62      	adds	r2, r4, #1
 8008ea8:	4297      	cmp	r7, r2
 8008eaa:	d1f5      	bne.n	8008e98 <ai_platform_get_weights_map+0x80>
 8008eac:	3402      	adds	r4, #2
 8008eae:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8008eb2:	42b3      	cmp	r3, r6
 8008eb4:	d1ca      	bne.n	8008e4c <ai_platform_get_weights_map+0x34>
 8008eb6:	2001      	movs	r0, #1
 8008eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008eba:	bf00      	nop
 8008ebc:	a1facade 	.word	0xa1facade

08008ec0 <ai_platform_get_activations_map>:
 8008ec0:	2a00      	cmp	r2, #0
 8008ec2:	d038      	beq.n	8008f36 <ai_platform_get_activations_map+0x76>
 8008ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ec6:	4604      	mov	r4, r0
 8008ec8:	b1a0      	cbz	r0, 8008ef4 <ai_platform_get_activations_map+0x34>
 8008eca:	460f      	mov	r7, r1
 8008ecc:	b191      	cbz	r1, 8008ef4 <ai_platform_get_activations_map+0x34>
 8008ece:	4b25      	ldr	r3, [pc, #148]	; (8008f64 <ai_platform_get_activations_map+0xa4>)
 8008ed0:	6810      	ldr	r0, [r2, #0]
 8008ed2:	4298      	cmp	r0, r3
 8008ed4:	4615      	mov	r5, r2
 8008ed6:	d00f      	beq.n	8008ef8 <ai_platform_get_activations_map+0x38>
 8008ed8:	6a15      	ldr	r5, [r2, #32]
 8008eda:	b15d      	cbz	r5, 8008ef4 <ai_platform_get_activations_map+0x34>
 8008edc:	682e      	ldr	r6, [r5, #0]
 8008ede:	429e      	cmp	r6, r3
 8008ee0:	d02b      	beq.n	8008f3a <ai_platform_get_activations_map+0x7a>
 8008ee2:	f1a1 0001 	sub.w	r0, r1, #1
 8008ee6:	6025      	str	r5, [r4, #0]
 8008ee8:	fab0 f080 	clz	r0, r0
 8008eec:	0940      	lsrs	r0, r0, #5
 8008eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ef0:	42a7      	cmp	r7, r4
 8008ef2:	d035      	beq.n	8008f60 <ai_platform_get_activations_map+0xa0>
 8008ef4:	2000      	movs	r0, #0
 8008ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ef8:	f102 000c 	add.w	r0, r2, #12
 8008efc:	f7ff ff6e 	bl	8008ddc <ai_buffer_array_sane>
 8008f00:	2800      	cmp	r0, #0
 8008f02:	d0f7      	beq.n	8008ef4 <ai_platform_get_activations_map+0x34>
 8008f04:	89eb      	ldrh	r3, [r5, #14]
 8008f06:	429f      	cmp	r7, r3
 8008f08:	d1f4      	bne.n	8008ef4 <ai_platform_get_activations_map+0x34>
 8008f0a:	f04f 0e00 	mov.w	lr, #0
 8008f0e:	1f23      	subs	r3, r4, #4
 8008f10:	4670      	mov	r0, lr
 8008f12:	692a      	ldr	r2, [r5, #16]
 8008f14:	eb02 0c0e 	add.w	ip, r2, lr
 8008f18:	f10e 0e1c 	add.w	lr, lr, #28
 8008f1c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8008f20:	b124      	cbz	r4, 8008f2c <ai_platform_get_activations_map+0x6c>
 8008f22:	3001      	adds	r0, #1
 8008f24:	4287      	cmp	r7, r0
 8008f26:	f843 4f04 	str.w	r4, [r3, #4]!
 8008f2a:	d1f2      	bne.n	8008f12 <ai_platform_get_activations_map+0x52>
 8008f2c:	1a38      	subs	r0, r7, r0
 8008f2e:	fab0 f080 	clz	r0, r0
 8008f32:	0940      	lsrs	r0, r0, #5
 8008f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f36:	2000      	movs	r0, #0
 8008f38:	4770      	bx	lr
 8008f3a:	1f23      	subs	r3, r4, #4
 8008f3c:	4628      	mov	r0, r5
 8008f3e:	2400      	movs	r4, #0
 8008f40:	e000      	b.n	8008f44 <ai_platform_get_activations_map+0x84>
 8008f42:	4614      	mov	r4, r2
 8008f44:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8008f48:	42b2      	cmp	r2, r6
 8008f4a:	d0d1      	beq.n	8008ef0 <ai_platform_get_activations_map+0x30>
 8008f4c:	f843 2f04 	str.w	r2, [r3, #4]!
 8008f50:	1c62      	adds	r2, r4, #1
 8008f52:	4297      	cmp	r7, r2
 8008f54:	d1f5      	bne.n	8008f42 <ai_platform_get_activations_map+0x82>
 8008f56:	3402      	adds	r4, #2
 8008f58:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8008f5c:	42b3      	cmp	r3, r6
 8008f5e:	d1c9      	bne.n	8008ef4 <ai_platform_get_activations_map+0x34>
 8008f60:	2001      	movs	r0, #1
 8008f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f64:	a1facade 	.word	0xa1facade

08008f68 <ai_platform_bind_network_params>:
 8008f68:	b1a0      	cbz	r0, 8008f94 <ai_platform_bind_network_params+0x2c>
 8008f6a:	b1b1      	cbz	r1, 8008f9a <ai_platform_bind_network_params+0x32>
 8008f6c:	b1c2      	cbz	r2, 8008fa0 <ai_platform_bind_network_params+0x38>
 8008f6e:	b410      	push	{r4}
 8008f70:	4603      	mov	r3, r0
 8008f72:	4c0d      	ldr	r4, [pc, #52]	; (8008fa8 <ai_platform_bind_network_params+0x40>)
 8008f74:	f843 4b04 	str.w	r4, [r3], #4
 8008f78:	f100 0c0c 	add.w	ip, r0, #12
 8008f7c:	c903      	ldmia	r1, {r0, r1}
 8008f7e:	e883 0003 	stmia.w	r3, {r0, r1}
 8008f82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008f86:	e88c 0003 	stmia.w	ip, {r0, r1}
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f92:	4770      	bx	lr
 8008f94:	4603      	mov	r3, r0
 8008f96:	4618      	mov	r0, r3
 8008f98:	4770      	bx	lr
 8008f9a:	460b      	mov	r3, r1
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	4770      	bx	lr
 8008fa0:	4613      	mov	r3, r2
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	4770      	bx	lr
 8008fa6:	bf00      	nop
 8008fa8:	a1facade 	.word	0xa1facade

08008fac <ai_platform_network_get_error>:
 8008fac:	b510      	push	{r4, lr}
 8008fae:	b1f0      	cbz	r0, 8008fee <ai_platform_network_get_error+0x42>
 8008fb0:	4b2f      	ldr	r3, [pc, #188]	; (8009070 <ai_platform_network_get_error+0xc4>)
 8008fb2:	6802      	ldr	r2, [r0, #0]
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	4604      	mov	r4, r0
 8008fb8:	d119      	bne.n	8008fee <ai_platform_network_get_error+0x42>
 8008fba:	f7ff ff29 	bl	8008e10 <_ai_platform_acquire_crc>
 8008fbe:	4b2d      	ldr	r3, [pc, #180]	; (8009074 <ai_platform_network_get_error+0xc8>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fca:	d03c      	beq.n	8009046 <ai_platform_network_get_error+0x9a>
 8008fcc:	4a2a      	ldr	r2, [pc, #168]	; (8009078 <ai_platform_network_get_error+0xcc>)
 8008fce:	2301      	movs	r3, #1
 8008fd0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008fd4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d1fb      	bne.n	8008fd4 <ai_platform_network_get_error+0x28>
 8008fdc:	4b27      	ldr	r3, [pc, #156]	; (800907c <ai_platform_network_get_error+0xd0>)
 8008fde:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8008fe2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008fe6:	4b26      	ldr	r3, [pc, #152]	; (8009080 <ai_platform_network_get_error+0xd4>)
 8008fe8:	429a      	cmp	r2, r3
 8008fea:	d038      	beq.n	800905e <ai_platform_network_get_error+0xb2>
 8008fec:	e7fe      	b.n	8008fec <ai_platform_network_get_error+0x40>
 8008fee:	f7ff ff0f 	bl	8008e10 <_ai_platform_acquire_crc>
 8008ff2:	4b20      	ldr	r3, [pc, #128]	; (8009074 <ai_platform_network_get_error+0xc8>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008ffa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ffe:	d010      	beq.n	8009022 <ai_platform_network_get_error+0x76>
 8009000:	4a1d      	ldr	r2, [pc, #116]	; (8009078 <ai_platform_network_get_error+0xcc>)
 8009002:	2301      	movs	r3, #1
 8009004:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009008:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800900c:	2b00      	cmp	r3, #0
 800900e:	d1fb      	bne.n	8009008 <ai_platform_network_get_error+0x5c>
 8009010:	4b1a      	ldr	r3, [pc, #104]	; (800907c <ai_platform_network_get_error+0xd0>)
 8009012:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8009016:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800901a:	4b19      	ldr	r3, [pc, #100]	; (8009080 <ai_platform_network_get_error+0xd4>)
 800901c:	429a      	cmp	r2, r3
 800901e:	d00d      	beq.n	800903c <ai_platform_network_get_error+0x90>
 8009020:	e7fe      	b.n	8009020 <ai_platform_network_get_error+0x74>
 8009022:	4a18      	ldr	r2, [pc, #96]	; (8009084 <ai_platform_network_get_error+0xd8>)
 8009024:	2301      	movs	r3, #1
 8009026:	6093      	str	r3, [r2, #8]
 8009028:	6893      	ldr	r3, [r2, #8]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d1fc      	bne.n	8009028 <ai_platform_network_get_error+0x7c>
 800902e:	4b13      	ldr	r3, [pc, #76]	; (800907c <ai_platform_network_get_error+0xd0>)
 8009030:	6013      	str	r3, [r2, #0]
 8009032:	6812      	ldr	r2, [r2, #0]
 8009034:	4b12      	ldr	r3, [pc, #72]	; (8009080 <ai_platform_network_get_error+0xd4>)
 8009036:	429a      	cmp	r2, r3
 8009038:	d000      	beq.n	800903c <ai_platform_network_get_error+0x90>
 800903a:	e7fe      	b.n	800903a <ai_platform_network_get_error+0x8e>
 800903c:	f7ff feea 	bl	8008e14 <_ai_platform_release_crc>
 8009040:	f241 0010 	movw	r0, #4112	; 0x1010
 8009044:	bd10      	pop	{r4, pc}
 8009046:	4a0f      	ldr	r2, [pc, #60]	; (8009084 <ai_platform_network_get_error+0xd8>)
 8009048:	2301      	movs	r3, #1
 800904a:	6093      	str	r3, [r2, #8]
 800904c:	6893      	ldr	r3, [r2, #8]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d1fc      	bne.n	800904c <ai_platform_network_get_error+0xa0>
 8009052:	4b0a      	ldr	r3, [pc, #40]	; (800907c <ai_platform_network_get_error+0xd0>)
 8009054:	6013      	str	r3, [r2, #0]
 8009056:	6812      	ldr	r2, [r2, #0]
 8009058:	4b09      	ldr	r3, [pc, #36]	; (8009080 <ai_platform_network_get_error+0xd4>)
 800905a:	429a      	cmp	r2, r3
 800905c:	d107      	bne.n	800906e <ai_platform_network_get_error+0xc2>
 800905e:	f7ff fed9 	bl	8008e14 <_ai_platform_release_crc>
 8009062:	f104 0010 	add.w	r0, r4, #16
 8009066:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800906a:	f000 be8b 	b.w	8009d84 <core_get_error>
 800906e:	e7fe      	b.n	800906e <ai_platform_network_get_error+0xc2>
 8009070:	a1c00100 	.word	0xa1c00100
 8009074:	e0042000 	.word	0xe0042000
 8009078:	58024000 	.word	0x58024000
 800907c:	f407a5c2 	.word	0xf407a5c2
 8009080:	b5e8b5cd 	.word	0xb5e8b5cd
 8009084:	40023000 	.word	0x40023000

08009088 <ai_platform_network_set_error>:
 8009088:	b110      	cbz	r0, 8009090 <ai_platform_network_set_error+0x8>
 800908a:	3010      	adds	r0, #16
 800908c:	f000 be80 	b.w	8009d90 <core_set_error>
 8009090:	4770      	bx	lr
 8009092:	bf00      	nop

08009094 <ai_platform_inputs_get>:
 8009094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009098:	b085      	sub	sp, #20
 800909a:	9102      	str	r1, [sp, #8]
 800909c:	b1f0      	cbz	r0, 80090dc <ai_platform_inputs_get+0x48>
 800909e:	4b62      	ldr	r3, [pc, #392]	; (8009228 <ai_platform_inputs_get+0x194>)
 80090a0:	6802      	ldr	r2, [r0, #0]
 80090a2:	429a      	cmp	r2, r3
 80090a4:	4607      	mov	r7, r0
 80090a6:	d119      	bne.n	80090dc <ai_platform_inputs_get+0x48>
 80090a8:	f7ff feb2 	bl	8008e10 <_ai_platform_acquire_crc>
 80090ac:	4b5f      	ldr	r3, [pc, #380]	; (800922c <ai_platform_inputs_get+0x198>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80090b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090b8:	d03d      	beq.n	8009136 <ai_platform_inputs_get+0xa2>
 80090ba:	4a5d      	ldr	r2, [pc, #372]	; (8009230 <ai_platform_inputs_get+0x19c>)
 80090bc:	2301      	movs	r3, #1
 80090be:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80090c2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d1fb      	bne.n	80090c2 <ai_platform_inputs_get+0x2e>
 80090ca:	4b5a      	ldr	r3, [pc, #360]	; (8009234 <ai_platform_inputs_get+0x1a0>)
 80090cc:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80090d0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80090d4:	4b58      	ldr	r3, [pc, #352]	; (8009238 <ai_platform_inputs_get+0x1a4>)
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d039      	beq.n	800914e <ai_platform_inputs_get+0xba>
 80090da:	e7fe      	b.n	80090da <ai_platform_inputs_get+0x46>
 80090dc:	f7ff fe98 	bl	8008e10 <_ai_platform_acquire_crc>
 80090e0:	4b52      	ldr	r3, [pc, #328]	; (800922c <ai_platform_inputs_get+0x198>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80090e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090ec:	d010      	beq.n	8009110 <ai_platform_inputs_get+0x7c>
 80090ee:	4a50      	ldr	r2, [pc, #320]	; (8009230 <ai_platform_inputs_get+0x19c>)
 80090f0:	2301      	movs	r3, #1
 80090f2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80090f6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d1fb      	bne.n	80090f6 <ai_platform_inputs_get+0x62>
 80090fe:	4b4d      	ldr	r3, [pc, #308]	; (8009234 <ai_platform_inputs_get+0x1a0>)
 8009100:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8009104:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009108:	4b4b      	ldr	r3, [pc, #300]	; (8009238 <ai_platform_inputs_get+0x1a4>)
 800910a:	429a      	cmp	r2, r3
 800910c:	d00d      	beq.n	800912a <ai_platform_inputs_get+0x96>
 800910e:	e7fe      	b.n	800910e <ai_platform_inputs_get+0x7a>
 8009110:	4a4a      	ldr	r2, [pc, #296]	; (800923c <ai_platform_inputs_get+0x1a8>)
 8009112:	2301      	movs	r3, #1
 8009114:	6093      	str	r3, [r2, #8]
 8009116:	6893      	ldr	r3, [r2, #8]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d1fc      	bne.n	8009116 <ai_platform_inputs_get+0x82>
 800911c:	4b45      	ldr	r3, [pc, #276]	; (8009234 <ai_platform_inputs_get+0x1a0>)
 800911e:	6013      	str	r3, [r2, #0]
 8009120:	6812      	ldr	r2, [r2, #0]
 8009122:	4b45      	ldr	r3, [pc, #276]	; (8009238 <ai_platform_inputs_get+0x1a4>)
 8009124:	429a      	cmp	r2, r3
 8009126:	d000      	beq.n	800912a <ai_platform_inputs_get+0x96>
 8009128:	e7fe      	b.n	8009128 <ai_platform_inputs_get+0x94>
 800912a:	f7ff fe73 	bl	8008e14 <_ai_platform_release_crc>
 800912e:	2000      	movs	r0, #0
 8009130:	b005      	add	sp, #20
 8009132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009136:	4a41      	ldr	r2, [pc, #260]	; (800923c <ai_platform_inputs_get+0x1a8>)
 8009138:	2301      	movs	r3, #1
 800913a:	6093      	str	r3, [r2, #8]
 800913c:	6893      	ldr	r3, [r2, #8]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d1fc      	bne.n	800913c <ai_platform_inputs_get+0xa8>
 8009142:	4b3c      	ldr	r3, [pc, #240]	; (8009234 <ai_platform_inputs_get+0x1a0>)
 8009144:	6013      	str	r3, [r2, #0]
 8009146:	6812      	ldr	r2, [r2, #0]
 8009148:	4b3b      	ldr	r3, [pc, #236]	; (8009238 <ai_platform_inputs_get+0x1a4>)
 800914a:	429a      	cmp	r2, r3
 800914c:	d155      	bne.n	80091fa <ai_platform_inputs_get+0x166>
 800914e:	f7ff fe61 	bl	8008e14 <_ai_platform_release_crc>
 8009152:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009154:	2b00      	cmp	r3, #0
 8009156:	d051      	beq.n	80091fc <ai_platform_inputs_get+0x168>
 8009158:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 800915c:	f1ba 0f00 	cmp.w	sl, #0
 8009160:	d04c      	beq.n	80091fc <ai_platform_inputs_get+0x168>
 8009162:	f04f 0b00 	mov.w	fp, #0
 8009166:	465d      	mov	r5, fp
 8009168:	9703      	str	r7, [sp, #12]
 800916a:	e016      	b.n	800919a <ai_platform_inputs_get+0x106>
 800916c:	9901      	ldr	r1, [sp, #4]
 800916e:	2301      	movs	r3, #1
 8009170:	507b      	str	r3, [r7, r1]
 8009172:	69b1      	ldr	r1, [r6, #24]
 8009174:	6849      	ldr	r1, [r1, #4]
 8009176:	6121      	str	r1, [r4, #16]
 8009178:	f04f 0301 	mov.w	r3, #1
 800917c:	7523      	strb	r3, [r4, #20]
 800917e:	e9c4 c200 	strd	ip, r2, [r4]
 8009182:	6962      	ldr	r2, [r4, #20]
 8009184:	60a0      	str	r0, [r4, #8]
 8009186:	2300      	movs	r3, #0
 8009188:	f369 221f 	bfi	r2, r9, #8, #24
 800918c:	f8c4 8018 	str.w	r8, [r4, #24]
 8009190:	60e3      	str	r3, [r4, #12]
 8009192:	3501      	adds	r5, #1
 8009194:	f10b 0b1c 	add.w	fp, fp, #28
 8009198:	6162      	str	r2, [r4, #20]
 800919a:	f8ba 3000 	ldrh.w	r3, [sl]
 800919e:	42ab      	cmp	r3, r5
 80091a0:	b2aa      	uxth	r2, r5
 80091a2:	d93a      	bls.n	800921a <ai_platform_inputs_get+0x186>
 80091a4:	f8da 3004 	ldr.w	r3, [sl, #4]
 80091a8:	00e9      	lsls	r1, r5, #3
 80091aa:	9101      	str	r1, [sp, #4]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d034      	beq.n	800921a <ai_platform_inputs_get+0x186>
 80091b0:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80091b4:	2e00      	cmp	r6, #0
 80091b6:	d030      	beq.n	800921a <ai_platform_inputs_get+0x186>
 80091b8:	f8da 3008 	ldr.w	r3, [sl, #8]
 80091bc:	69b2      	ldr	r2, [r6, #24]
 80091be:	f8d6 800c 	ldr.w	r8, [r6, #12]
 80091c2:	6810      	ldr	r0, [r2, #0]
 80091c4:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 80091c8:	68b3      	ldr	r3, [r6, #8]
 80091ca:	f3c3 2917 	ubfx	r9, r3, #8, #24
 80091ce:	f001 fc93 	bl	800aaf8 <ai_array_to_buffer_fmt>
 80091d2:	69b1      	ldr	r1, [r6, #24]
 80091d4:	4684      	mov	ip, r0
 80091d6:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 80091da:	688a      	ldr	r2, [r1, #8]
 80091dc:	445c      	add	r4, fp
 80091de:	2800      	cmp	r0, #0
 80091e0:	d0c8      	beq.n	8009174 <ai_platform_inputs_get+0xe0>
 80091e2:	2100      	movs	r1, #0
 80091e4:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 80091e8:	6831      	ldr	r1, [r6, #0]
 80091ea:	6041      	str	r1, [r0, #4]
 80091ec:	b111      	cbz	r1, 80091f4 <ai_platform_inputs_get+0x160>
 80091ee:	8849      	ldrh	r1, [r1, #2]
 80091f0:	2900      	cmp	r1, #0
 80091f2:	d1bb      	bne.n	800916c <ai_platform_inputs_get+0xd8>
 80091f4:	69b1      	ldr	r1, [r6, #24]
 80091f6:	2000      	movs	r0, #0
 80091f8:	e7bc      	b.n	8009174 <ai_platform_inputs_get+0xe0>
 80091fa:	e7fe      	b.n	80091fa <ai_platform_inputs_get+0x166>
 80091fc:	2218      	movs	r2, #24
 80091fe:	2111      	movs	r1, #17
 8009200:	f107 0010 	add.w	r0, r7, #16
 8009204:	f000 fdc4 	bl	8009d90 <core_set_error>
 8009208:	2200      	movs	r2, #0
 800920a:	4610      	mov	r0, r2
 800920c:	9b02      	ldr	r3, [sp, #8]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d08e      	beq.n	8009130 <ai_platform_inputs_get+0x9c>
 8009212:	801a      	strh	r2, [r3, #0]
 8009214:	b005      	add	sp, #20
 8009216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800921a:	9f03      	ldr	r7, [sp, #12]
 800921c:	2a00      	cmp	r2, #0
 800921e:	d0ed      	beq.n	80091fc <ai_platform_inputs_get+0x168>
 8009220:	f8da 3008 	ldr.w	r3, [sl, #8]
 8009224:	6858      	ldr	r0, [r3, #4]
 8009226:	e7f1      	b.n	800920c <ai_platform_inputs_get+0x178>
 8009228:	a1c00100 	.word	0xa1c00100
 800922c:	e0042000 	.word	0xe0042000
 8009230:	58024000 	.word	0x58024000
 8009234:	f407a5c2 	.word	0xf407a5c2
 8009238:	b5e8b5cd 	.word	0xb5e8b5cd
 800923c:	40023000 	.word	0x40023000

08009240 <ai_platform_outputs_get>:
 8009240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009244:	b085      	sub	sp, #20
 8009246:	9102      	str	r1, [sp, #8]
 8009248:	b1f0      	cbz	r0, 8009288 <ai_platform_outputs_get+0x48>
 800924a:	4b5f      	ldr	r3, [pc, #380]	; (80093c8 <ai_platform_outputs_get+0x188>)
 800924c:	6802      	ldr	r2, [r0, #0]
 800924e:	429a      	cmp	r2, r3
 8009250:	4607      	mov	r7, r0
 8009252:	d119      	bne.n	8009288 <ai_platform_outputs_get+0x48>
 8009254:	f7ff fddc 	bl	8008e10 <_ai_platform_acquire_crc>
 8009258:	4b5c      	ldr	r3, [pc, #368]	; (80093cc <ai_platform_outputs_get+0x18c>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009260:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009264:	d03d      	beq.n	80092e2 <ai_platform_outputs_get+0xa2>
 8009266:	4a5a      	ldr	r2, [pc, #360]	; (80093d0 <ai_platform_outputs_get+0x190>)
 8009268:	2301      	movs	r3, #1
 800926a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800926e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009272:	2b00      	cmp	r3, #0
 8009274:	d1fb      	bne.n	800926e <ai_platform_outputs_get+0x2e>
 8009276:	4b57      	ldr	r3, [pc, #348]	; (80093d4 <ai_platform_outputs_get+0x194>)
 8009278:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800927c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009280:	4b55      	ldr	r3, [pc, #340]	; (80093d8 <ai_platform_outputs_get+0x198>)
 8009282:	429a      	cmp	r2, r3
 8009284:	d039      	beq.n	80092fa <ai_platform_outputs_get+0xba>
 8009286:	e7fe      	b.n	8009286 <ai_platform_outputs_get+0x46>
 8009288:	f7ff fdc2 	bl	8008e10 <_ai_platform_acquire_crc>
 800928c:	4b4f      	ldr	r3, [pc, #316]	; (80093cc <ai_platform_outputs_get+0x18c>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009294:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009298:	d010      	beq.n	80092bc <ai_platform_outputs_get+0x7c>
 800929a:	4a4d      	ldr	r2, [pc, #308]	; (80093d0 <ai_platform_outputs_get+0x190>)
 800929c:	2301      	movs	r3, #1
 800929e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80092a2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d1fb      	bne.n	80092a2 <ai_platform_outputs_get+0x62>
 80092aa:	4b4a      	ldr	r3, [pc, #296]	; (80093d4 <ai_platform_outputs_get+0x194>)
 80092ac:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80092b0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80092b4:	4b48      	ldr	r3, [pc, #288]	; (80093d8 <ai_platform_outputs_get+0x198>)
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d00d      	beq.n	80092d6 <ai_platform_outputs_get+0x96>
 80092ba:	e7fe      	b.n	80092ba <ai_platform_outputs_get+0x7a>
 80092bc:	4a47      	ldr	r2, [pc, #284]	; (80093dc <ai_platform_outputs_get+0x19c>)
 80092be:	2301      	movs	r3, #1
 80092c0:	6093      	str	r3, [r2, #8]
 80092c2:	6893      	ldr	r3, [r2, #8]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d1fc      	bne.n	80092c2 <ai_platform_outputs_get+0x82>
 80092c8:	4b42      	ldr	r3, [pc, #264]	; (80093d4 <ai_platform_outputs_get+0x194>)
 80092ca:	6013      	str	r3, [r2, #0]
 80092cc:	6812      	ldr	r2, [r2, #0]
 80092ce:	4b42      	ldr	r3, [pc, #264]	; (80093d8 <ai_platform_outputs_get+0x198>)
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d000      	beq.n	80092d6 <ai_platform_outputs_get+0x96>
 80092d4:	e7fe      	b.n	80092d4 <ai_platform_outputs_get+0x94>
 80092d6:	f7ff fd9d 	bl	8008e14 <_ai_platform_release_crc>
 80092da:	2000      	movs	r0, #0
 80092dc:	b005      	add	sp, #20
 80092de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092e2:	4a3e      	ldr	r2, [pc, #248]	; (80093dc <ai_platform_outputs_get+0x19c>)
 80092e4:	2301      	movs	r3, #1
 80092e6:	6093      	str	r3, [r2, #8]
 80092e8:	6893      	ldr	r3, [r2, #8]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d1fc      	bne.n	80092e8 <ai_platform_outputs_get+0xa8>
 80092ee:	4b39      	ldr	r3, [pc, #228]	; (80093d4 <ai_platform_outputs_get+0x194>)
 80092f0:	6013      	str	r3, [r2, #0]
 80092f2:	6812      	ldr	r2, [r2, #0]
 80092f4:	4b38      	ldr	r3, [pc, #224]	; (80093d8 <ai_platform_outputs_get+0x198>)
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d150      	bne.n	800939c <ai_platform_outputs_get+0x15c>
 80092fa:	f7ff fd8b 	bl	8008e14 <_ai_platform_release_crc>
 80092fe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009300:	2b01      	cmp	r3, #1
 8009302:	d958      	bls.n	80093b6 <ai_platform_outputs_get+0x176>
 8009304:	f04f 0b00 	mov.w	fp, #0
 8009308:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 800930c:	9703      	str	r7, [sp, #12]
 800930e:	465d      	mov	r5, fp
 8009310:	e016      	b.n	8009340 <ai_platform_outputs_get+0x100>
 8009312:	9901      	ldr	r1, [sp, #4]
 8009314:	2301      	movs	r3, #1
 8009316:	507b      	str	r3, [r7, r1]
 8009318:	69b1      	ldr	r1, [r6, #24]
 800931a:	6849      	ldr	r1, [r1, #4]
 800931c:	6121      	str	r1, [r4, #16]
 800931e:	f04f 0301 	mov.w	r3, #1
 8009322:	7523      	strb	r3, [r4, #20]
 8009324:	e9c4 c200 	strd	ip, r2, [r4]
 8009328:	6962      	ldr	r2, [r4, #20]
 800932a:	60a0      	str	r0, [r4, #8]
 800932c:	2300      	movs	r3, #0
 800932e:	f369 221f 	bfi	r2, r9, #8, #24
 8009332:	f8c4 8018 	str.w	r8, [r4, #24]
 8009336:	60e3      	str	r3, [r4, #12]
 8009338:	3501      	adds	r5, #1
 800933a:	f10b 0b1c 	add.w	fp, fp, #28
 800933e:	6162      	str	r2, [r4, #20]
 8009340:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8009344:	42ab      	cmp	r3, r5
 8009346:	b2aa      	uxth	r2, r5
 8009348:	d929      	bls.n	800939e <ai_platform_outputs_get+0x15e>
 800934a:	f8da 3010 	ldr.w	r3, [sl, #16]
 800934e:	00e9      	lsls	r1, r5, #3
 8009350:	9101      	str	r1, [sp, #4]
 8009352:	b323      	cbz	r3, 800939e <ai_platform_outputs_get+0x15e>
 8009354:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8009358:	b30e      	cbz	r6, 800939e <ai_platform_outputs_get+0x15e>
 800935a:	f8da 3014 	ldr.w	r3, [sl, #20]
 800935e:	69b2      	ldr	r2, [r6, #24]
 8009360:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8009364:	6810      	ldr	r0, [r2, #0]
 8009366:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800936a:	68b3      	ldr	r3, [r6, #8]
 800936c:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8009370:	f001 fbc2 	bl	800aaf8 <ai_array_to_buffer_fmt>
 8009374:	69b1      	ldr	r1, [r6, #24]
 8009376:	4684      	mov	ip, r0
 8009378:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 800937c:	688a      	ldr	r2, [r1, #8]
 800937e:	445c      	add	r4, fp
 8009380:	2800      	cmp	r0, #0
 8009382:	d0ca      	beq.n	800931a <ai_platform_outputs_get+0xda>
 8009384:	2100      	movs	r1, #0
 8009386:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 800938a:	6831      	ldr	r1, [r6, #0]
 800938c:	6041      	str	r1, [r0, #4]
 800938e:	b111      	cbz	r1, 8009396 <ai_platform_outputs_get+0x156>
 8009390:	8849      	ldrh	r1, [r1, #2]
 8009392:	2900      	cmp	r1, #0
 8009394:	d1bd      	bne.n	8009312 <ai_platform_outputs_get+0xd2>
 8009396:	69b1      	ldr	r1, [r6, #24]
 8009398:	2000      	movs	r0, #0
 800939a:	e7be      	b.n	800931a <ai_platform_outputs_get+0xda>
 800939c:	e7fe      	b.n	800939c <ai_platform_outputs_get+0x15c>
 800939e:	9f03      	ldr	r7, [sp, #12]
 80093a0:	b14a      	cbz	r2, 80093b6 <ai_platform_outputs_get+0x176>
 80093a2:	f8da 3014 	ldr.w	r3, [sl, #20]
 80093a6:	6858      	ldr	r0, [r3, #4]
 80093a8:	9b02      	ldr	r3, [sp, #8]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d096      	beq.n	80092dc <ai_platform_outputs_get+0x9c>
 80093ae:	801a      	strh	r2, [r3, #0]
 80093b0:	b005      	add	sp, #20
 80093b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093b6:	2218      	movs	r2, #24
 80093b8:	2111      	movs	r1, #17
 80093ba:	f107 0010 	add.w	r0, r7, #16
 80093be:	f000 fce7 	bl	8009d90 <core_set_error>
 80093c2:	2200      	movs	r2, #0
 80093c4:	4610      	mov	r0, r2
 80093c6:	e7ef      	b.n	80093a8 <ai_platform_outputs_get+0x168>
 80093c8:	a1c00100 	.word	0xa1c00100
 80093cc:	e0042000 	.word	0xe0042000
 80093d0:	58024000 	.word	0x58024000
 80093d4:	f407a5c2 	.word	0xf407a5c2
 80093d8:	b5e8b5cd 	.word	0xb5e8b5cd
 80093dc:	40023000 	.word	0x40023000

080093e0 <ai_platform_network_create>:
 80093e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80093e4:	b083      	sub	sp, #12
 80093e6:	4606      	mov	r6, r0
 80093e8:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 80093ec:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 80093f0:	4615      	mov	r5, r2
 80093f2:	461f      	mov	r7, r3
 80093f4:	f7ff fd0c 	bl	8008e10 <_ai_platform_acquire_crc>
 80093f8:	b188      	cbz	r0, 800941e <ai_platform_network_create+0x3e>
 80093fa:	4a5d      	ldr	r2, [pc, #372]	; (8009570 <ai_platform_network_create+0x190>)
 80093fc:	6812      	ldr	r2, [r2, #0]
 80093fe:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8009402:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8009406:	4603      	mov	r3, r0
 8009408:	d00e      	beq.n	8009428 <ai_platform_network_create+0x48>
 800940a:	4a5a      	ldr	r2, [pc, #360]	; (8009574 <ai_platform_network_create+0x194>)
 800940c:	2118      	movs	r1, #24
 800940e:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8009412:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8009416:	2918      	cmp	r1, #24
 8009418:	d018      	beq.n	800944c <ai_platform_network_create+0x6c>
 800941a:	f7ff fcfb 	bl	8008e14 <_ai_platform_release_crc>
 800941e:	f244 1033 	movw	r0, #16691	; 0x4133
 8009422:	b003      	add	sp, #12
 8009424:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009428:	4a53      	ldr	r2, [pc, #332]	; (8009578 <ai_platform_network_create+0x198>)
 800942a:	2101      	movs	r1, #1
 800942c:	6091      	str	r1, [r2, #8]
 800942e:	2114      	movs	r1, #20
 8009430:	e001      	b.n	8009436 <ai_platform_network_create+0x56>
 8009432:	3901      	subs	r1, #1
 8009434:	d002      	beq.n	800943c <ai_platform_network_create+0x5c>
 8009436:	6894      	ldr	r4, [r2, #8]
 8009438:	2c00      	cmp	r4, #0
 800943a:	d1fa      	bne.n	8009432 <ai_platform_network_create+0x52>
 800943c:	4a4e      	ldr	r2, [pc, #312]	; (8009578 <ai_platform_network_create+0x198>)
 800943e:	6891      	ldr	r1, [r2, #8]
 8009440:	b911      	cbnz	r1, 8009448 <ai_platform_network_create+0x68>
 8009442:	6812      	ldr	r2, [r2, #0]
 8009444:	3201      	adds	r2, #1
 8009446:	d008      	beq.n	800945a <ai_platform_network_create+0x7a>
 8009448:	4618      	mov	r0, r3
 800944a:	e7e6      	b.n	800941a <ai_platform_network_create+0x3a>
 800944c:	2101      	movs	r1, #1
 800944e:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8009452:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8009456:	2900      	cmp	r1, #0
 8009458:	d1fb      	bne.n	8009452 <ai_platform_network_create+0x72>
 800945a:	4618      	mov	r0, r3
 800945c:	f7ff fcda 	bl	8008e14 <_ai_platform_release_crc>
 8009460:	f7ff fcd6 	bl	8008e10 <_ai_platform_acquire_crc>
 8009464:	4b42      	ldr	r3, [pc, #264]	; (8009570 <ai_platform_network_create+0x190>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800946c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009470:	d010      	beq.n	8009494 <ai_platform_network_create+0xb4>
 8009472:	4b40      	ldr	r3, [pc, #256]	; (8009574 <ai_platform_network_create+0x194>)
 8009474:	2201      	movs	r2, #1
 8009476:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800947a:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 800947e:	2900      	cmp	r1, #0
 8009480:	d1fb      	bne.n	800947a <ai_platform_network_create+0x9a>
 8009482:	4a3e      	ldr	r2, [pc, #248]	; (800957c <ai_platform_network_create+0x19c>)
 8009484:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8009488:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 800948c:	4b3c      	ldr	r3, [pc, #240]	; (8009580 <ai_platform_network_create+0x1a0>)
 800948e:	429a      	cmp	r2, r3
 8009490:	d00c      	beq.n	80094ac <ai_platform_network_create+0xcc>
 8009492:	e7fe      	b.n	8009492 <ai_platform_network_create+0xb2>
 8009494:	4a38      	ldr	r2, [pc, #224]	; (8009578 <ai_platform_network_create+0x198>)
 8009496:	2301      	movs	r3, #1
 8009498:	6093      	str	r3, [r2, #8]
 800949a:	6893      	ldr	r3, [r2, #8]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d1fc      	bne.n	800949a <ai_platform_network_create+0xba>
 80094a0:	4b36      	ldr	r3, [pc, #216]	; (800957c <ai_platform_network_create+0x19c>)
 80094a2:	6013      	str	r3, [r2, #0]
 80094a4:	6812      	ldr	r2, [r2, #0]
 80094a6:	4b36      	ldr	r3, [pc, #216]	; (8009580 <ai_platform_network_create+0x1a0>)
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d122      	bne.n	80094f2 <ai_platform_network_create+0x112>
 80094ac:	f7ff fcb2 	bl	8008e14 <_ai_platform_release_crc>
 80094b0:	b38e      	cbz	r6, 8009516 <ai_platform_network_create+0x136>
 80094b2:	4b34      	ldr	r3, [pc, #208]	; (8009584 <ai_platform_network_create+0x1a4>)
 80094b4:	602b      	str	r3, [r5, #0]
 80094b6:	6035      	str	r5, [r6, #0]
 80094b8:	f000 fc62 	bl	8009d80 <core_init>
 80094bc:	b1d0      	cbz	r0, 80094f4 <ai_platform_network_create+0x114>
 80094be:	f7ff fca7 	bl	8008e10 <_ai_platform_acquire_crc>
 80094c2:	4b2b      	ldr	r3, [pc, #172]	; (8009570 <ai_platform_network_create+0x190>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80094ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094ce:	d025      	beq.n	800951c <ai_platform_network_create+0x13c>
 80094d0:	4a28      	ldr	r2, [pc, #160]	; (8009574 <ai_platform_network_create+0x194>)
 80094d2:	2301      	movs	r3, #1
 80094d4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80094d8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d1fb      	bne.n	80094d8 <ai_platform_network_create+0xf8>
 80094e0:	4b26      	ldr	r3, [pc, #152]	; (800957c <ai_platform_network_create+0x19c>)
 80094e2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80094e6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80094ea:	4b25      	ldr	r3, [pc, #148]	; (8009580 <ai_platform_network_create+0x1a0>)
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d022      	beq.n	8009536 <ai_platform_network_create+0x156>
 80094f0:	e7fe      	b.n	80094f0 <ai_platform_network_create+0x110>
 80094f2:	e7fe      	b.n	80094f2 <ai_platform_network_create+0x112>
 80094f4:	2430      	movs	r4, #48	; 0x30
 80094f6:	2300      	movs	r3, #0
 80094f8:	6033      	str	r3, [r6, #0]
 80094fa:	2610      	movs	r6, #16
 80094fc:	464a      	mov	r2, r9
 80094fe:	4641      	mov	r1, r8
 8009500:	4638      	mov	r0, r7
 8009502:	f001 fb9f 	bl	800ac44 <ai_version_get>
 8009506:	4603      	mov	r3, r0
 8009508:	2000      	movs	r0, #0
 800950a:	f364 0007 	bfi	r0, r4, #0, #8
 800950e:	64ab      	str	r3, [r5, #72]	; 0x48
 8009510:	f366 201f 	bfi	r0, r6, #8, #24
 8009514:	e785      	b.n	8009422 <ai_platform_network_create+0x42>
 8009516:	f241 0010 	movw	r0, #4112	; 0x1010
 800951a:	e782      	b.n	8009422 <ai_platform_network_create+0x42>
 800951c:	4a16      	ldr	r2, [pc, #88]	; (8009578 <ai_platform_network_create+0x198>)
 800951e:	2301      	movs	r3, #1
 8009520:	6093      	str	r3, [r2, #8]
 8009522:	6893      	ldr	r3, [r2, #8]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d1fc      	bne.n	8009522 <ai_platform_network_create+0x142>
 8009528:	4b14      	ldr	r3, [pc, #80]	; (800957c <ai_platform_network_create+0x19c>)
 800952a:	6013      	str	r3, [r2, #0]
 800952c:	6812      	ldr	r2, [r2, #0]
 800952e:	4b14      	ldr	r3, [pc, #80]	; (8009580 <ai_platform_network_create+0x1a0>)
 8009530:	429a      	cmp	r2, r3
 8009532:	d000      	beq.n	8009536 <ai_platform_network_create+0x156>
 8009534:	e7fe      	b.n	8009534 <ai_platform_network_create+0x154>
 8009536:	f7ff fc6d 	bl	8008e14 <_ai_platform_release_crc>
 800953a:	2200      	movs	r2, #0
 800953c:	4641      	mov	r1, r8
 800953e:	4638      	mov	r0, r7
 8009540:	f001 fb80 	bl	800ac44 <ai_version_get>
 8009544:	2200      	movs	r2, #0
 8009546:	4604      	mov	r4, r0
 8009548:	2105      	movs	r1, #5
 800954a:	2001      	movs	r0, #1
 800954c:	f001 fb7a 	bl	800ac44 <ai_version_get>
 8009550:	4284      	cmp	r4, r0
 8009552:	d001      	beq.n	8009558 <ai_platform_network_create+0x178>
 8009554:	2401      	movs	r4, #1
 8009556:	e7ce      	b.n	80094f6 <ai_platform_network_create+0x116>
 8009558:	4b0b      	ldr	r3, [pc, #44]	; (8009588 <ai_platform_network_create+0x1a8>)
 800955a:	9301      	str	r3, [sp, #4]
 800955c:	a801      	add	r0, sp, #4
 800955e:	f000 fc23 	bl	8009da8 <ai_check_custom_types>
 8009562:	b110      	cbz	r0, 800956a <ai_platform_network_create+0x18a>
 8009564:	2600      	movs	r6, #0
 8009566:	4634      	mov	r4, r6
 8009568:	e7c8      	b.n	80094fc <ai_platform_network_create+0x11c>
 800956a:	2402      	movs	r4, #2
 800956c:	e7c3      	b.n	80094f6 <ai_platform_network_create+0x116>
 800956e:	bf00      	nop
 8009570:	e0042000 	.word	0xe0042000
 8009574:	58024000 	.word	0x58024000
 8009578:	40023000 	.word	0x40023000
 800957c:	f407a5c2 	.word	0xf407a5c2
 8009580:	b5e8b5cd 	.word	0xb5e8b5cd
 8009584:	a1c00100 	.word	0xa1c00100
 8009588:	84048403 	.word	0x84048403

0800958c <ai_platform_network_init>:
 800958c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009590:	b1f8      	cbz	r0, 80095d2 <ai_platform_network_init+0x46>
 8009592:	4b6e      	ldr	r3, [pc, #440]	; (800974c <ai_platform_network_init+0x1c0>)
 8009594:	6802      	ldr	r2, [r0, #0]
 8009596:	429a      	cmp	r2, r3
 8009598:	4604      	mov	r4, r0
 800959a:	d11a      	bne.n	80095d2 <ai_platform_network_init+0x46>
 800959c:	460e      	mov	r6, r1
 800959e:	f7ff fc37 	bl	8008e10 <_ai_platform_acquire_crc>
 80095a2:	4b6b      	ldr	r3, [pc, #428]	; (8009750 <ai_platform_network_init+0x1c4>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80095aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095ae:	d03d      	beq.n	800962c <ai_platform_network_init+0xa0>
 80095b0:	4a68      	ldr	r2, [pc, #416]	; (8009754 <ai_platform_network_init+0x1c8>)
 80095b2:	2301      	movs	r3, #1
 80095b4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80095b8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d1fb      	bne.n	80095b8 <ai_platform_network_init+0x2c>
 80095c0:	4b65      	ldr	r3, [pc, #404]	; (8009758 <ai_platform_network_init+0x1cc>)
 80095c2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80095c6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80095ca:	4b64      	ldr	r3, [pc, #400]	; (800975c <ai_platform_network_init+0x1d0>)
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d039      	beq.n	8009644 <ai_platform_network_init+0xb8>
 80095d0:	e7fe      	b.n	80095d0 <ai_platform_network_init+0x44>
 80095d2:	f7ff fc1d 	bl	8008e10 <_ai_platform_acquire_crc>
 80095d6:	4b5e      	ldr	r3, [pc, #376]	; (8009750 <ai_platform_network_init+0x1c4>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80095de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095e2:	d010      	beq.n	8009606 <ai_platform_network_init+0x7a>
 80095e4:	4a5b      	ldr	r2, [pc, #364]	; (8009754 <ai_platform_network_init+0x1c8>)
 80095e6:	2301      	movs	r3, #1
 80095e8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80095ec:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d1fb      	bne.n	80095ec <ai_platform_network_init+0x60>
 80095f4:	4b58      	ldr	r3, [pc, #352]	; (8009758 <ai_platform_network_init+0x1cc>)
 80095f6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80095fa:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80095fe:	4b57      	ldr	r3, [pc, #348]	; (800975c <ai_platform_network_init+0x1d0>)
 8009600:	429a      	cmp	r2, r3
 8009602:	d00d      	beq.n	8009620 <ai_platform_network_init+0x94>
 8009604:	e7fe      	b.n	8009604 <ai_platform_network_init+0x78>
 8009606:	4a56      	ldr	r2, [pc, #344]	; (8009760 <ai_platform_network_init+0x1d4>)
 8009608:	2301      	movs	r3, #1
 800960a:	6093      	str	r3, [r2, #8]
 800960c:	6893      	ldr	r3, [r2, #8]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d1fc      	bne.n	800960c <ai_platform_network_init+0x80>
 8009612:	4b51      	ldr	r3, [pc, #324]	; (8009758 <ai_platform_network_init+0x1cc>)
 8009614:	6013      	str	r3, [r2, #0]
 8009616:	6812      	ldr	r2, [r2, #0]
 8009618:	4b50      	ldr	r3, [pc, #320]	; (800975c <ai_platform_network_init+0x1d0>)
 800961a:	429a      	cmp	r2, r3
 800961c:	d000      	beq.n	8009620 <ai_platform_network_init+0x94>
 800961e:	e7fe      	b.n	800961e <ai_platform_network_init+0x92>
 8009620:	f7ff fbf8 	bl	8008e14 <_ai_platform_release_crc>
 8009624:	2600      	movs	r6, #0
 8009626:	4630      	mov	r0, r6
 8009628:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800962c:	4a4c      	ldr	r2, [pc, #304]	; (8009760 <ai_platform_network_init+0x1d4>)
 800962e:	2301      	movs	r3, #1
 8009630:	6093      	str	r3, [r2, #8]
 8009632:	6893      	ldr	r3, [r2, #8]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d1fc      	bne.n	8009632 <ai_platform_network_init+0xa6>
 8009638:	4b47      	ldr	r3, [pc, #284]	; (8009758 <ai_platform_network_init+0x1cc>)
 800963a:	6013      	str	r3, [r2, #0]
 800963c:	6812      	ldr	r2, [r2, #0]
 800963e:	4b47      	ldr	r3, [pc, #284]	; (800975c <ai_platform_network_init+0x1d0>)
 8009640:	429a      	cmp	r2, r3
 8009642:	d11c      	bne.n	800967e <ai_platform_network_init+0xf2>
 8009644:	f7ff fbe6 	bl	8008e14 <_ai_platform_release_crc>
 8009648:	2e00      	cmp	r6, #0
 800964a:	d06f      	beq.n	800972c <ai_platform_network_init+0x1a0>
 800964c:	4b45      	ldr	r3, [pc, #276]	; (8009764 <ai_platform_network_init+0x1d8>)
 800964e:	6832      	ldr	r2, [r6, #0]
 8009650:	429a      	cmp	r2, r3
 8009652:	d115      	bne.n	8009680 <ai_platform_network_init+0xf4>
 8009654:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8009658:	6933      	ldr	r3, [r6, #16]
 800965a:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 800965e:	89f7      	ldrh	r7, [r6, #14]
 8009660:	62a3      	str	r3, [r4, #40]	; 0x28
 8009662:	e9c4 2107 	strd	r2, r1, [r4, #28]
 8009666:	2303      	movs	r3, #3
 8009668:	84e7      	strh	r7, [r4, #38]	; 0x26
 800966a:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 800966e:	60e3      	str	r3, [r4, #12]
 8009670:	4620      	mov	r0, r4
 8009672:	4626      	mov	r6, r4
 8009674:	f000 fbc2 	bl	8009dfc <ai_layers_init_all>
 8009678:	4630      	mov	r0, r6
 800967a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800967e:	e7fe      	b.n	800967e <ai_platform_network_init+0xf2>
 8009680:	2101      	movs	r1, #1
 8009682:	4630      	mov	r0, r6
 8009684:	4635      	mov	r5, r6
 8009686:	6876      	ldr	r6, [r6, #4]
 8009688:	f7ff fb74 	bl	8008d74 <ai_buffer_get_size>
 800968c:	f105 081c 	add.w	r8, r5, #28
 8009690:	4681      	mov	r9, r0
 8009692:	2101      	movs	r1, #1
 8009694:	4640      	mov	r0, r8
 8009696:	6a2f      	ldr	r7, [r5, #32]
 8009698:	f7ff fb6c 	bl	8008d74 <ai_buffer_get_size>
 800969c:	f1b9 0f00 	cmp.w	r9, #0
 80096a0:	d025      	beq.n	80096ee <ai_platform_network_init+0x162>
 80096a2:	2201      	movs	r2, #1
 80096a4:	4696      	mov	lr, r2
 80096a6:	bb30      	cbnz	r0, 80096f6 <ai_platform_network_init+0x16a>
 80096a8:	4680      	mov	r8, r0
 80096aa:	4607      	mov	r7, r0
 80096ac:	b376      	cbz	r6, 800970c <ai_platform_network_init+0x180>
 80096ae:	8be3      	ldrh	r3, [r4, #30]
 80096b0:	4573      	cmp	r3, lr
 80096b2:	d323      	bcc.n	80096fc <ai_platform_network_init+0x170>
 80096b4:	b142      	cbz	r2, 80096c8 <ai_platform_network_init+0x13c>
 80096b6:	46ac      	mov	ip, r5
 80096b8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80096bc:	6a25      	ldr	r5, [r4, #32]
 80096be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80096c0:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80096c4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80096c8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80096ca:	f8a4 e01e 	strh.w	lr, [r4, #30]
 80096ce:	2600      	movs	r6, #0
 80096d0:	42bb      	cmp	r3, r7
 80096d2:	83a6      	strh	r6, [r4, #28]
 80096d4:	d323      	bcc.n	800971e <ai_platform_network_init+0x192>
 80096d6:	b37f      	cbz	r7, 8009738 <ai_platform_network_init+0x1ac>
 80096d8:	46c4      	mov	ip, r8
 80096da:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80096de:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80096e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80096e2:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80096e6:	46b6      	mov	lr, r6
 80096e8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80096ec:	e7bb      	b.n	8009666 <ai_platform_network_init+0xda>
 80096ee:	464a      	mov	r2, r9
 80096f0:	46ce      	mov	lr, r9
 80096f2:	464d      	mov	r5, r9
 80096f4:	e7d7      	b.n	80096a6 <ai_platform_network_init+0x11a>
 80096f6:	b30f      	cbz	r7, 800973c <ai_platform_network_init+0x1b0>
 80096f8:	2701      	movs	r7, #1
 80096fa:	e7d7      	b.n	80096ac <ai_platform_network_init+0x120>
 80096fc:	2212      	movs	r2, #18
 80096fe:	2116      	movs	r1, #22
 8009700:	f104 0010 	add.w	r0, r4, #16
 8009704:	f000 fb44 	bl	8009d90 <core_set_error>
 8009708:	2600      	movs	r6, #0
 800970a:	e78c      	b.n	8009626 <ai_platform_network_init+0x9a>
 800970c:	f1b9 0f00 	cmp.w	r9, #0
 8009710:	d0cd      	beq.n	80096ae <ai_platform_network_init+0x122>
 8009712:	2110      	movs	r1, #16
 8009714:	2212      	movs	r2, #18
 8009716:	1860      	adds	r0, r4, r1
 8009718:	f000 fb3a 	bl	8009d90 <core_set_error>
 800971c:	e783      	b.n	8009626 <ai_platform_network_init+0x9a>
 800971e:	2213      	movs	r2, #19
 8009720:	2116      	movs	r1, #22
 8009722:	f104 0010 	add.w	r0, r4, #16
 8009726:	f000 fb33 	bl	8009d90 <core_set_error>
 800972a:	e77c      	b.n	8009626 <ai_platform_network_init+0x9a>
 800972c:	2110      	movs	r1, #16
 800972e:	2211      	movs	r2, #17
 8009730:	1860      	adds	r0, r4, r1
 8009732:	f000 fb2d 	bl	8009d90 <core_set_error>
 8009736:	e776      	b.n	8009626 <ai_platform_network_init+0x9a>
 8009738:	46be      	mov	lr, r7
 800973a:	e794      	b.n	8009666 <ai_platform_network_init+0xda>
 800973c:	2110      	movs	r1, #16
 800973e:	2213      	movs	r2, #19
 8009740:	1860      	adds	r0, r4, r1
 8009742:	f000 fb25 	bl	8009d90 <core_set_error>
 8009746:	463e      	mov	r6, r7
 8009748:	e76d      	b.n	8009626 <ai_platform_network_init+0x9a>
 800974a:	bf00      	nop
 800974c:	a1c00100 	.word	0xa1c00100
 8009750:	e0042000 	.word	0xe0042000
 8009754:	58024000 	.word	0x58024000
 8009758:	f407a5c2 	.word	0xf407a5c2
 800975c:	b5e8b5cd 	.word	0xb5e8b5cd
 8009760:	40023000 	.word	0x40023000
 8009764:	a1facade 	.word	0xa1facade

08009768 <ai_platform_network_post_init>:
 8009768:	b538      	push	{r3, r4, r5, lr}
 800976a:	b1f0      	cbz	r0, 80097aa <ai_platform_network_post_init+0x42>
 800976c:	4b3c      	ldr	r3, [pc, #240]	; (8009860 <ai_platform_network_post_init+0xf8>)
 800976e:	6802      	ldr	r2, [r0, #0]
 8009770:	429a      	cmp	r2, r3
 8009772:	4604      	mov	r4, r0
 8009774:	d119      	bne.n	80097aa <ai_platform_network_post_init+0x42>
 8009776:	f7ff fb4b 	bl	8008e10 <_ai_platform_acquire_crc>
 800977a:	4b3a      	ldr	r3, [pc, #232]	; (8009864 <ai_platform_network_post_init+0xfc>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009782:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009786:	d03b      	beq.n	8009800 <ai_platform_network_post_init+0x98>
 8009788:	4a37      	ldr	r2, [pc, #220]	; (8009868 <ai_platform_network_post_init+0x100>)
 800978a:	2301      	movs	r3, #1
 800978c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009790:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009794:	2b00      	cmp	r3, #0
 8009796:	d1fb      	bne.n	8009790 <ai_platform_network_post_init+0x28>
 8009798:	4b34      	ldr	r3, [pc, #208]	; (800986c <ai_platform_network_post_init+0x104>)
 800979a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800979e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80097a2:	4b33      	ldr	r3, [pc, #204]	; (8009870 <ai_platform_network_post_init+0x108>)
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d037      	beq.n	8009818 <ai_platform_network_post_init+0xb0>
 80097a8:	e7fe      	b.n	80097a8 <ai_platform_network_post_init+0x40>
 80097aa:	f7ff fb31 	bl	8008e10 <_ai_platform_acquire_crc>
 80097ae:	4b2d      	ldr	r3, [pc, #180]	; (8009864 <ai_platform_network_post_init+0xfc>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80097b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097ba:	d010      	beq.n	80097de <ai_platform_network_post_init+0x76>
 80097bc:	4a2a      	ldr	r2, [pc, #168]	; (8009868 <ai_platform_network_post_init+0x100>)
 80097be:	2301      	movs	r3, #1
 80097c0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80097c4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d1fb      	bne.n	80097c4 <ai_platform_network_post_init+0x5c>
 80097cc:	4b27      	ldr	r3, [pc, #156]	; (800986c <ai_platform_network_post_init+0x104>)
 80097ce:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80097d2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80097d6:	4b26      	ldr	r3, [pc, #152]	; (8009870 <ai_platform_network_post_init+0x108>)
 80097d8:	429a      	cmp	r2, r3
 80097da:	d00d      	beq.n	80097f8 <ai_platform_network_post_init+0x90>
 80097dc:	e7fe      	b.n	80097dc <ai_platform_network_post_init+0x74>
 80097de:	4a25      	ldr	r2, [pc, #148]	; (8009874 <ai_platform_network_post_init+0x10c>)
 80097e0:	2301      	movs	r3, #1
 80097e2:	6093      	str	r3, [r2, #8]
 80097e4:	6893      	ldr	r3, [r2, #8]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d1fc      	bne.n	80097e4 <ai_platform_network_post_init+0x7c>
 80097ea:	4b20      	ldr	r3, [pc, #128]	; (800986c <ai_platform_network_post_init+0x104>)
 80097ec:	6013      	str	r3, [r2, #0]
 80097ee:	6812      	ldr	r2, [r2, #0]
 80097f0:	4b1f      	ldr	r3, [pc, #124]	; (8009870 <ai_platform_network_post_init+0x108>)
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d000      	beq.n	80097f8 <ai_platform_network_post_init+0x90>
 80097f6:	e7fe      	b.n	80097f6 <ai_platform_network_post_init+0x8e>
 80097f8:	f7ff fb0c 	bl	8008e14 <_ai_platform_release_crc>
 80097fc:	2000      	movs	r0, #0
 80097fe:	bd38      	pop	{r3, r4, r5, pc}
 8009800:	4a1c      	ldr	r2, [pc, #112]	; (8009874 <ai_platform_network_post_init+0x10c>)
 8009802:	2301      	movs	r3, #1
 8009804:	6093      	str	r3, [r2, #8]
 8009806:	6893      	ldr	r3, [r2, #8]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d1fc      	bne.n	8009806 <ai_platform_network_post_init+0x9e>
 800980c:	4b17      	ldr	r3, [pc, #92]	; (800986c <ai_platform_network_post_init+0x104>)
 800980e:	6013      	str	r3, [r2, #0]
 8009810:	6812      	ldr	r2, [r2, #0]
 8009812:	4b17      	ldr	r3, [pc, #92]	; (8009870 <ai_platform_network_post_init+0x108>)
 8009814:	429a      	cmp	r2, r3
 8009816:	d11a      	bne.n	800984e <ai_platform_network_post_init+0xe6>
 8009818:	f7ff fafc 	bl	8008e14 <_ai_platform_release_crc>
 800981c:	68e3      	ldr	r3, [r4, #12]
 800981e:	f013 0502 	ands.w	r5, r3, #2
 8009822:	d015      	beq.n	8009850 <ai_platform_network_post_init+0xe8>
 8009824:	4620      	mov	r0, r4
 8009826:	f000 faf7 	bl	8009e18 <ai_layers_post_init_all>
 800982a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800982c:	b16b      	cbz	r3, 800984a <ai_platform_network_post_init+0xe2>
 800982e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8009830:	e007      	b.n	8009842 <ai_platform_network_post_init+0xda>
 8009832:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8009836:	4798      	blx	r3
 8009838:	692b      	ldr	r3, [r5, #16]
 800983a:	42ab      	cmp	r3, r5
 800983c:	d005      	beq.n	800984a <ai_platform_network_post_init+0xe2>
 800983e:	b123      	cbz	r3, 800984a <ai_platform_network_post_init+0xe2>
 8009840:	461d      	mov	r5, r3
 8009842:	4629      	mov	r1, r5
 8009844:	2000      	movs	r0, #0
 8009846:	2d00      	cmp	r5, #0
 8009848:	d1f3      	bne.n	8009832 <ai_platform_network_post_init+0xca>
 800984a:	2001      	movs	r0, #1
 800984c:	bd38      	pop	{r3, r4, r5, pc}
 800984e:	e7fe      	b.n	800984e <ai_platform_network_post_init+0xe6>
 8009850:	2210      	movs	r2, #16
 8009852:	2111      	movs	r1, #17
 8009854:	18a0      	adds	r0, r4, r2
 8009856:	f000 fa9b 	bl	8009d90 <core_set_error>
 800985a:	4628      	mov	r0, r5
 800985c:	bd38      	pop	{r3, r4, r5, pc}
 800985e:	bf00      	nop
 8009860:	a1c00100 	.word	0xa1c00100
 8009864:	e0042000 	.word	0xe0042000
 8009868:	58024000 	.word	0x58024000
 800986c:	f407a5c2 	.word	0xf407a5c2
 8009870:	b5e8b5cd 	.word	0xb5e8b5cd
 8009874:	40023000 	.word	0x40023000

08009878 <ai_platform_network_process>:
 8009878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800987c:	460e      	mov	r6, r1
 800987e:	b085      	sub	sp, #20
 8009880:	4693      	mov	fp, r2
 8009882:	4605      	mov	r5, r0
 8009884:	b120      	cbz	r0, 8009890 <ai_platform_network_process+0x18>
 8009886:	4bb8      	ldr	r3, [pc, #736]	; (8009b68 <ai_platform_network_process+0x2f0>)
 8009888:	6802      	ldr	r2, [r0, #0]
 800988a:	429a      	cmp	r2, r3
 800988c:	bf18      	it	ne
 800988e:	2500      	movne	r5, #0
 8009890:	f7ff fabe 	bl	8008e10 <_ai_platform_acquire_crc>
 8009894:	4bb5      	ldr	r3, [pc, #724]	; (8009b6c <ai_platform_network_process+0x2f4>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800989c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098a0:	d010      	beq.n	80098c4 <ai_platform_network_process+0x4c>
 80098a2:	4ab3      	ldr	r2, [pc, #716]	; (8009b70 <ai_platform_network_process+0x2f8>)
 80098a4:	2301      	movs	r3, #1
 80098a6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80098aa:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d1fb      	bne.n	80098aa <ai_platform_network_process+0x32>
 80098b2:	4bb0      	ldr	r3, [pc, #704]	; (8009b74 <ai_platform_network_process+0x2fc>)
 80098b4:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80098b8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80098bc:	4bae      	ldr	r3, [pc, #696]	; (8009b78 <ai_platform_network_process+0x300>)
 80098be:	429a      	cmp	r2, r3
 80098c0:	d00d      	beq.n	80098de <ai_platform_network_process+0x66>
 80098c2:	e7fe      	b.n	80098c2 <ai_platform_network_process+0x4a>
 80098c4:	4aad      	ldr	r2, [pc, #692]	; (8009b7c <ai_platform_network_process+0x304>)
 80098c6:	2301      	movs	r3, #1
 80098c8:	6093      	str	r3, [r2, #8]
 80098ca:	6893      	ldr	r3, [r2, #8]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d1fc      	bne.n	80098ca <ai_platform_network_process+0x52>
 80098d0:	4ba8      	ldr	r3, [pc, #672]	; (8009b74 <ai_platform_network_process+0x2fc>)
 80098d2:	6013      	str	r3, [r2, #0]
 80098d4:	6812      	ldr	r2, [r2, #0]
 80098d6:	4ba8      	ldr	r3, [pc, #672]	; (8009b78 <ai_platform_network_process+0x300>)
 80098d8:	429a      	cmp	r2, r3
 80098da:	f040 812c 	bne.w	8009b36 <ai_platform_network_process+0x2be>
 80098de:	f7ff fa99 	bl	8008e14 <_ai_platform_release_crc>
 80098e2:	2d00      	cmp	r5, #0
 80098e4:	f000 8154 	beq.w	8009b90 <ai_platform_network_process+0x318>
 80098e8:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	f000 8124 	beq.w	8009b38 <ai_platform_network_process+0x2c0>
 80098f0:	68eb      	ldr	r3, [r5, #12]
 80098f2:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 80098f6:	f003 0303 	and.w	r3, r3, #3
 80098fa:	2700      	movs	r7, #0
 80098fc:	2b03      	cmp	r3, #3
 80098fe:	616f      	str	r7, [r5, #20]
 8009900:	f040 813e 	bne.w	8009b80 <ai_platform_network_process+0x308>
 8009904:	2e00      	cmp	r6, #0
 8009906:	f000 811d 	beq.w	8009b44 <ai_platform_network_process+0x2cc>
 800990a:	f1ba 0f00 	cmp.w	sl, #0
 800990e:	f000 8119 	beq.w	8009b44 <ai_platform_network_process+0x2cc>
 8009912:	f8ba 3000 	ldrh.w	r3, [sl]
 8009916:	2b00      	cmp	r3, #0
 8009918:	f000 8114 	beq.w	8009b44 <ai_platform_network_process+0x2cc>
 800991c:	69b3      	ldr	r3, [r6, #24]
 800991e:	f8cd b00c 	str.w	fp, [sp, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	e9cd 3501 	strd	r3, r5, [sp, #4]
 8009928:	f8da 3004 	ldr.w	r3, [sl, #4]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d072      	beq.n	8009a16 <ai_platform_network_process+0x19e>
 8009930:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8009934:	2c00      	cmp	r4, #0
 8009936:	d06e      	beq.n	8009a16 <ai_platform_network_process+0x19e>
 8009938:	f8da 3008 	ldr.w	r3, [sl, #8]
 800993c:	f8d3 9000 	ldr.w	r9, [r3]
 8009940:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8009944:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8009948:	f000 81de 	beq.w	8009d08 <ai_platform_network_process+0x490>
 800994c:	69a3      	ldr	r3, [r4, #24]
 800994e:	2101      	movs	r1, #1
 8009950:	4630      	mov	r0, r6
 8009952:	685d      	ldr	r5, [r3, #4]
 8009954:	f7ff fa0e 	bl	8008d74 <ai_buffer_get_size>
 8009958:	4285      	cmp	r5, r0
 800995a:	f0c0 811b 	bcc.w	8009b94 <ai_platform_network_process+0x31c>
 800995e:	68e0      	ldr	r0, [r4, #12]
 8009960:	69b1      	ldr	r1, [r6, #24]
 8009962:	68c2      	ldr	r2, [r0, #12]
 8009964:	68cb      	ldr	r3, [r1, #12]
 8009966:	429a      	cmp	r2, r3
 8009968:	f040 8114 	bne.w	8009b94 <ai_platform_network_process+0x31c>
 800996c:	6882      	ldr	r2, [r0, #8]
 800996e:	688b      	ldr	r3, [r1, #8]
 8009970:	429a      	cmp	r2, r3
 8009972:	f040 810f 	bne.w	8009b94 <ai_platform_network_process+0x31c>
 8009976:	6842      	ldr	r2, [r0, #4]
 8009978:	684b      	ldr	r3, [r1, #4]
 800997a:	429a      	cmp	r2, r3
 800997c:	f040 810a 	bne.w	8009b94 <ai_platform_network_process+0x31c>
 8009980:	69a3      	ldr	r3, [r4, #24]
 8009982:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009986:	f001 f94b 	bl	800ac20 <ai_array_get_data_byte_size>
 800998a:	4605      	mov	r5, r0
 800998c:	4620      	mov	r0, r4
 800998e:	f001 f95f 	bl	800ac50 <get_tensor_byte_size>
 8009992:	4285      	cmp	r5, r0
 8009994:	f0c0 80fe 	bcc.w	8009b94 <ai_platform_network_process+0x31c>
 8009998:	69a3      	ldr	r3, [r4, #24]
 800999a:	6818      	ldr	r0, [r3, #0]
 800999c:	f001 f8ac 	bl	800aaf8 <ai_array_to_buffer_fmt>
 80099a0:	6833      	ldr	r3, [r6, #0]
 80099a2:	4058      	eors	r0, r3
 80099a4:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 80099a8:	f040 81b9 	bne.w	8009d1e <ai_platform_network_process+0x4a6>
 80099ac:	6873      	ldr	r3, [r6, #4]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	f000 81ac 	beq.w	8009d0c <ai_platform_network_process+0x494>
 80099b4:	69b3      	ldr	r3, [r6, #24]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	f000 819c 	beq.w	8009cf6 <ai_platform_network_process+0x47e>
 80099be:	9a01      	ldr	r2, [sp, #4]
 80099c0:	429a      	cmp	r2, r3
 80099c2:	bf38      	it	cc
 80099c4:	461a      	movcc	r2, r3
 80099c6:	4620      	mov	r0, r4
 80099c8:	9201      	str	r2, [sp, #4]
 80099ca:	f001 f941 	bl	800ac50 <get_tensor_byte_size>
 80099ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80099d2:	69b3      	ldr	r3, [r6, #24]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	fb00 f303 	mul.w	r3, r0, r3
 80099da:	f8c8 300c 	str.w	r3, [r8, #12]
 80099de:	6871      	ldr	r1, [r6, #4]
 80099e0:	f8c8 1004 	str.w	r1, [r8, #4]
 80099e4:	440b      	add	r3, r1
 80099e6:	f849 300b 	str.w	r3, [r9, fp]
 80099ea:	69a0      	ldr	r0, [r4, #24]
 80099ec:	6803      	ldr	r3, [r0, #0]
 80099ee:	009a      	lsls	r2, r3, #2
 80099f0:	f107 0701 	add.w	r7, r7, #1
 80099f4:	f106 061c 	add.w	r6, r6, #28
 80099f8:	f100 80af 	bmi.w	8009b5a <ai_platform_network_process+0x2e2>
 80099fc:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8009a00:	1a9b      	subs	r3, r3, r2
 8009a02:	4419      	add	r1, r3
 8009a04:	6081      	str	r1, [r0, #8]
 8009a06:	69a3      	ldr	r3, [r4, #24]
 8009a08:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8009a0c:	60da      	str	r2, [r3, #12]
 8009a0e:	f8ba 3000 	ldrh.w	r3, [sl]
 8009a12:	42bb      	cmp	r3, r7
 8009a14:	d888      	bhi.n	8009928 <ai_platform_network_process+0xb0>
 8009a16:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 8009a1a:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8009a1c:	f1bb 0f00 	cmp.w	fp, #0
 8009a20:	f000 8186 	beq.w	8009d30 <ai_platform_network_process+0x4b8>
 8009a24:	2a01      	cmp	r2, #1
 8009a26:	f240 815e 	bls.w	8009ce6 <ai_platform_network_process+0x46e>
 8009a2a:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 8009a2e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	f000 8157 	beq.w	8009ce6 <ai_platform_network_process+0x46e>
 8009a38:	465e      	mov	r6, fp
 8009a3a:	2700      	movs	r7, #0
 8009a3c:	462c      	mov	r4, r5
 8009a3e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	f000 80b4 	beq.w	8009bb0 <ai_platform_network_process+0x338>
 8009a48:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 8009a4c:	2d00      	cmp	r5, #0
 8009a4e:	f000 80af 	beq.w	8009bb0 <ai_platform_network_process+0x338>
 8009a52:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8009a56:	f8d3 8000 	ldr.w	r8, [r3]
 8009a5a:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 8009a5e:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8009a62:	f000 8171 	beq.w	8009d48 <ai_platform_network_process+0x4d0>
 8009a66:	69ab      	ldr	r3, [r5, #24]
 8009a68:	2101      	movs	r1, #1
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	9302      	str	r3, [sp, #8]
 8009a6e:	4630      	mov	r0, r6
 8009a70:	f7ff f980 	bl	8008d74 <ai_buffer_get_size>
 8009a74:	9b02      	ldr	r3, [sp, #8]
 8009a76:	4283      	cmp	r3, r0
 8009a78:	f0c0 8134 	bcc.w	8009ce4 <ai_platform_network_process+0x46c>
 8009a7c:	68e8      	ldr	r0, [r5, #12]
 8009a7e:	69b1      	ldr	r1, [r6, #24]
 8009a80:	68c2      	ldr	r2, [r0, #12]
 8009a82:	68cb      	ldr	r3, [r1, #12]
 8009a84:	429a      	cmp	r2, r3
 8009a86:	f040 812d 	bne.w	8009ce4 <ai_platform_network_process+0x46c>
 8009a8a:	6882      	ldr	r2, [r0, #8]
 8009a8c:	688b      	ldr	r3, [r1, #8]
 8009a8e:	429a      	cmp	r2, r3
 8009a90:	f040 8128 	bne.w	8009ce4 <ai_platform_network_process+0x46c>
 8009a94:	6842      	ldr	r2, [r0, #4]
 8009a96:	684b      	ldr	r3, [r1, #4]
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	f040 8123 	bne.w	8009ce4 <ai_platform_network_process+0x46c>
 8009a9e:	69ab      	ldr	r3, [r5, #24]
 8009aa0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009aa4:	f001 f8bc 	bl	800ac20 <ai_array_get_data_byte_size>
 8009aa8:	9002      	str	r0, [sp, #8]
 8009aaa:	4628      	mov	r0, r5
 8009aac:	f001 f8d0 	bl	800ac50 <get_tensor_byte_size>
 8009ab0:	9b02      	ldr	r3, [sp, #8]
 8009ab2:	4283      	cmp	r3, r0
 8009ab4:	f0c0 8116 	bcc.w	8009ce4 <ai_platform_network_process+0x46c>
 8009ab8:	69ab      	ldr	r3, [r5, #24]
 8009aba:	6818      	ldr	r0, [r3, #0]
 8009abc:	f001 f81c 	bl	800aaf8 <ai_array_to_buffer_fmt>
 8009ac0:	6833      	ldr	r3, [r6, #0]
 8009ac2:	4058      	eors	r0, r3
 8009ac4:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8009ac8:	f040 8136 	bne.w	8009d38 <ai_platform_network_process+0x4c0>
 8009acc:	6873      	ldr	r3, [r6, #4]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	f000 814d 	beq.w	8009d6e <ai_platform_network_process+0x4f6>
 8009ad4:	69b3      	ldr	r3, [r6, #24]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	f000 813f 	beq.w	8009d5c <ai_platform_network_process+0x4e4>
 8009ade:	9a01      	ldr	r2, [sp, #4]
 8009ae0:	429a      	cmp	r2, r3
 8009ae2:	bf38      	it	cc
 8009ae4:	461a      	movcc	r2, r3
 8009ae6:	4628      	mov	r0, r5
 8009ae8:	9201      	str	r2, [sp, #4]
 8009aea:	f001 f8b1 	bl	800ac50 <get_tensor_byte_size>
 8009aee:	f8ca 0008 	str.w	r0, [sl, #8]
 8009af2:	69b3      	ldr	r3, [r6, #24]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	fb00 f303 	mul.w	r3, r0, r3
 8009afa:	f8ca 300c 	str.w	r3, [sl, #12]
 8009afe:	6871      	ldr	r1, [r6, #4]
 8009b00:	f8ca 1004 	str.w	r1, [sl, #4]
 8009b04:	440b      	add	r3, r1
 8009b06:	f848 300b 	str.w	r3, [r8, fp]
 8009b0a:	69a8      	ldr	r0, [r5, #24]
 8009b0c:	6803      	ldr	r3, [r0, #0]
 8009b0e:	009b      	lsls	r3, r3, #2
 8009b10:	f107 0701 	add.w	r7, r7, #1
 8009b14:	f106 061c 	add.w	r6, r6, #28
 8009b18:	d445      	bmi.n	8009ba6 <ai_platform_network_process+0x32e>
 8009b1a:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8009b1e:	1a9b      	subs	r3, r3, r2
 8009b20:	4419      	add	r1, r3
 8009b22:	6081      	str	r1, [r0, #8]
 8009b24:	69ab      	ldr	r3, [r5, #24]
 8009b26:	f8da 2004 	ldr.w	r2, [sl, #4]
 8009b2a:	60da      	str	r2, [r3, #12]
 8009b2c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8009b30:	429f      	cmp	r7, r3
 8009b32:	d384      	bcc.n	8009a3e <ai_platform_network_process+0x1c6>
 8009b34:	e03c      	b.n	8009bb0 <ai_platform_network_process+0x338>
 8009b36:	e7fe      	b.n	8009b36 <ai_platform_network_process+0x2be>
 8009b38:	68ea      	ldr	r2, [r5, #12]
 8009b3a:	616b      	str	r3, [r5, #20]
 8009b3c:	f002 0203 	and.w	r2, r2, #3
 8009b40:	2a03      	cmp	r2, #3
 8009b42:	d11d      	bne.n	8009b80 <ai_platform_network_process+0x308>
 8009b44:	2217      	movs	r2, #23
 8009b46:	2112      	movs	r1, #18
 8009b48:	f105 0010 	add.w	r0, r5, #16
 8009b4c:	f000 f920 	bl	8009d90 <core_set_error>
 8009b50:	2400      	movs	r4, #0
 8009b52:	4620      	mov	r0, r4
 8009b54:	b005      	add	sp, #20
 8009b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b5a:	f8ba 3000 	ldrh.w	r3, [sl]
 8009b5e:	429f      	cmp	r7, r3
 8009b60:	f4ff aee2 	bcc.w	8009928 <ai_platform_network_process+0xb0>
 8009b64:	e757      	b.n	8009a16 <ai_platform_network_process+0x19e>
 8009b66:	bf00      	nop
 8009b68:	a1c00100 	.word	0xa1c00100
 8009b6c:	e0042000 	.word	0xe0042000
 8009b70:	58024000 	.word	0x58024000
 8009b74:	f407a5c2 	.word	0xf407a5c2
 8009b78:	b5e8b5cd 	.word	0xb5e8b5cd
 8009b7c:	40023000 	.word	0x40023000
 8009b80:	2230      	movs	r2, #48	; 0x30
 8009b82:	2111      	movs	r1, #17
 8009b84:	f105 0010 	add.w	r0, r5, #16
 8009b88:	f000 f902 	bl	8009d90 <core_set_error>
 8009b8c:	2400      	movs	r4, #0
 8009b8e:	e7e0      	b.n	8009b52 <ai_platform_network_process+0x2da>
 8009b90:	462c      	mov	r4, r5
 8009b92:	e7de      	b.n	8009b52 <ai_platform_network_process+0x2da>
 8009b94:	9d02      	ldr	r5, [sp, #8]
 8009b96:	2218      	movs	r2, #24
 8009b98:	2112      	movs	r1, #18
 8009b9a:	f105 0010 	add.w	r0, r5, #16
 8009b9e:	f000 f8f7 	bl	8009d90 <core_set_error>
 8009ba2:	2400      	movs	r4, #0
 8009ba4:	e7d5      	b.n	8009b52 <ai_platform_network_process+0x2da>
 8009ba6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8009baa:	429f      	cmp	r7, r3
 8009bac:	f4ff af47 	bcc.w	8009a3e <ai_platform_network_process+0x1c6>
 8009bb0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8009bb4:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8009bb6:	82a3      	strh	r3, [r4, #20]
 8009bb8:	4625      	mov	r5, r4
 8009bba:	2a00      	cmp	r2, #0
 8009bbc:	f040 808c 	bne.w	8009cd8 <ai_platform_network_process+0x460>
 8009bc0:	4616      	mov	r6, r2
 8009bc2:	4617      	mov	r7, r2
 8009bc4:	8aec      	ldrh	r4, [r5, #22]
 8009bc6:	429c      	cmp	r4, r3
 8009bc8:	bf38      	it	cc
 8009bca:	46ab      	movcc	fp, r5
 8009bcc:	d2c1      	bcs.n	8009b52 <ai_platform_network_process+0x2da>
 8009bce:	2e00      	cmp	r6, #0
 8009bd0:	d030      	beq.n	8009c34 <ai_platform_network_process+0x3bc>
 8009bd2:	f04f 0800 	mov.w	r8, #0
 8009bd6:	e014      	b.n	8009c02 <ai_platform_network_process+0x38a>
 8009bd8:	6882      	ldr	r2, [r0, #8]
 8009bda:	68c5      	ldr	r5, [r0, #12]
 8009bdc:	6863      	ldr	r3, [r4, #4]
 8009bde:	1b52      	subs	r2, r2, r5
 8009be0:	4413      	add	r3, r2
 8009be2:	6083      	str	r3, [r0, #8]
 8009be4:	698b      	ldr	r3, [r1, #24]
 8009be6:	6862      	ldr	r2, [r4, #4]
 8009be8:	60da      	str	r2, [r3, #12]
 8009bea:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8009bee:	f859 200a 	ldr.w	r2, [r9, sl]
 8009bf2:	440b      	add	r3, r1
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	bf24      	itt	cs
 8009bf8:	68e3      	ldrcs	r3, [r4, #12]
 8009bfa:	1ad3      	subcs	r3, r2, r3
 8009bfc:	6063      	str	r3, [r4, #4]
 8009bfe:	f108 0801 	add.w	r8, r8, #1
 8009c02:	8833      	ldrh	r3, [r6, #0]
 8009c04:	4543      	cmp	r3, r8
 8009c06:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8009c0a:	d913      	bls.n	8009c34 <ai_platform_network_process+0x3bc>
 8009c0c:	6873      	ldr	r3, [r6, #4]
 8009c0e:	b18b      	cbz	r3, 8009c34 <ai_platform_network_process+0x3bc>
 8009c10:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8009c14:	b171      	cbz	r1, 8009c34 <ai_platform_network_process+0x3bc>
 8009c16:	6988      	ldr	r0, [r1, #24]
 8009c18:	68b2      	ldr	r2, [r6, #8]
 8009c1a:	6803      	ldr	r3, [r0, #0]
 8009c1c:	f8d2 9000 	ldr.w	r9, [r2]
 8009c20:	009d      	lsls	r5, r3, #2
 8009c22:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8009c26:	d5d7      	bpl.n	8009bd8 <ai_platform_network_process+0x360>
 8009c28:	6881      	ldr	r1, [r0, #8]
 8009c2a:	68a2      	ldr	r2, [r4, #8]
 8009c2c:	6860      	ldr	r0, [r4, #4]
 8009c2e:	f000 fedd 	bl	800a9ec <st_int8_copy>
 8009c32:	e7da      	b.n	8009bea <ai_platform_network_process+0x372>
 8009c34:	4658      	mov	r0, fp
 8009c36:	f000 f903 	bl	8009e40 <ai_layers_forward_all>
 8009c3a:	2f00      	cmp	r7, #0
 8009c3c:	d03d      	beq.n	8009cba <ai_platform_network_process+0x442>
 8009c3e:	2400      	movs	r4, #0
 8009c40:	e016      	b.n	8009c70 <ai_platform_network_process+0x3f8>
 8009c42:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8009c46:	f859 100a 	ldr.w	r1, [r9, sl]
 8009c4a:	4413      	add	r3, r2
 8009c4c:	428b      	cmp	r3, r1
 8009c4e:	bf24      	itt	cs
 8009c50:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8009c54:	1acb      	subcs	r3, r1, r3
 8009c56:	f8c8 3004 	str.w	r3, [r8, #4]
 8009c5a:	6981      	ldr	r1, [r0, #24]
 8009c5c:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8009c60:	1b52      	subs	r2, r2, r5
 8009c62:	4413      	add	r3, r2
 8009c64:	608b      	str	r3, [r1, #8]
 8009c66:	6983      	ldr	r3, [r0, #24]
 8009c68:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8009c6c:	60da      	str	r2, [r3, #12]
 8009c6e:	3401      	adds	r4, #1
 8009c70:	883b      	ldrh	r3, [r7, #0]
 8009c72:	42a3      	cmp	r3, r4
 8009c74:	d921      	bls.n	8009cba <ai_platform_network_process+0x442>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	b1fb      	cbz	r3, 8009cba <ai_platform_network_process+0x442>
 8009c7a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8009c7e:	b1e0      	cbz	r0, 8009cba <ai_platform_network_process+0x442>
 8009c80:	68ba      	ldr	r2, [r7, #8]
 8009c82:	6983      	ldr	r3, [r0, #24]
 8009c84:	f8d2 9000 	ldr.w	r9, [r2]
 8009c88:	681a      	ldr	r2, [r3, #0]
 8009c8a:	0092      	lsls	r2, r2, #2
 8009c8c:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8009c90:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8009c94:	d5d5      	bpl.n	8009c42 <ai_platform_network_process+0x3ca>
 8009c96:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8009c9a:	6898      	ldr	r0, [r3, #8]
 8009c9c:	f000 fea6 	bl	800a9ec <st_int8_copy>
 8009ca0:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8009ca4:	f859 200a 	ldr.w	r2, [r9, sl]
 8009ca8:	440b      	add	r3, r1
 8009caa:	4293      	cmp	r3, r2
 8009cac:	bf24      	itt	cs
 8009cae:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8009cb2:	1ad3      	subcs	r3, r2, r3
 8009cb4:	f8c8 3004 	str.w	r3, [r8, #4]
 8009cb8:	e7d9      	b.n	8009c6e <ai_platform_network_process+0x3f6>
 8009cba:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8009cbe:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8009cc2:	3401      	adds	r4, #1
 8009cc4:	b2a4      	uxth	r4, r4
 8009cc6:	42a3      	cmp	r3, r4
 8009cc8:	f8ab 4016 	strh.w	r4, [fp, #22]
 8009ccc:	f63f af7f 	bhi.w	8009bce <ai_platform_network_process+0x356>
 8009cd0:	4620      	mov	r0, r4
 8009cd2:	b005      	add	sp, #20
 8009cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cd8:	2a01      	cmp	r2, #1
 8009cda:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8009cdc:	d03c      	beq.n	8009d58 <ai_platform_network_process+0x4e0>
 8009cde:	f106 070c 	add.w	r7, r6, #12
 8009ce2:	e76f      	b.n	8009bc4 <ai_platform_network_process+0x34c>
 8009ce4:	4625      	mov	r5, r4
 8009ce6:	2218      	movs	r2, #24
 8009ce8:	2113      	movs	r1, #19
 8009cea:	f105 0010 	add.w	r0, r5, #16
 8009cee:	f000 f84f 	bl	8009d90 <core_set_error>
 8009cf2:	2400      	movs	r4, #0
 8009cf4:	e72d      	b.n	8009b52 <ai_platform_network_process+0x2da>
 8009cf6:	9d02      	ldr	r5, [sp, #8]
 8009cf8:	4604      	mov	r4, r0
 8009cfa:	2221      	movs	r2, #33	; 0x21
 8009cfc:	2112      	movs	r1, #18
 8009cfe:	f105 0010 	add.w	r0, r5, #16
 8009d02:	f000 f845 	bl	8009d90 <core_set_error>
 8009d06:	e724      	b.n	8009b52 <ai_platform_network_process+0x2da>
 8009d08:	9d02      	ldr	r5, [sp, #8]
 8009d0a:	e71b      	b.n	8009b44 <ai_platform_network_process+0x2cc>
 8009d0c:	9d02      	ldr	r5, [sp, #8]
 8009d0e:	4604      	mov	r4, r0
 8009d10:	2217      	movs	r2, #23
 8009d12:	2112      	movs	r1, #18
 8009d14:	f105 0010 	add.w	r0, r5, #16
 8009d18:	f000 f83a 	bl	8009d90 <core_set_error>
 8009d1c:	e719      	b.n	8009b52 <ai_platform_network_process+0x2da>
 8009d1e:	9d02      	ldr	r5, [sp, #8]
 8009d20:	2219      	movs	r2, #25
 8009d22:	2112      	movs	r1, #18
 8009d24:	f105 0010 	add.w	r0, r5, #16
 8009d28:	f000 f832 	bl	8009d90 <core_set_error>
 8009d2c:	2400      	movs	r4, #0
 8009d2e:	e710      	b.n	8009b52 <ai_platform_network_process+0x2da>
 8009d30:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8009d34:	82ab      	strh	r3, [r5, #20]
 8009d36:	e740      	b.n	8009bba <ai_platform_network_process+0x342>
 8009d38:	f104 0010 	add.w	r0, r4, #16
 8009d3c:	2219      	movs	r2, #25
 8009d3e:	2113      	movs	r1, #19
 8009d40:	f000 f826 	bl	8009d90 <core_set_error>
 8009d44:	2400      	movs	r4, #0
 8009d46:	e704      	b.n	8009b52 <ai_platform_network_process+0x2da>
 8009d48:	f104 0010 	add.w	r0, r4, #16
 8009d4c:	2217      	movs	r2, #23
 8009d4e:	2113      	movs	r1, #19
 8009d50:	f000 f81e 	bl	8009d90 <core_set_error>
 8009d54:	4654      	mov	r4, sl
 8009d56:	e6fc      	b.n	8009b52 <ai_platform_network_process+0x2da>
 8009d58:	2700      	movs	r7, #0
 8009d5a:	e733      	b.n	8009bc4 <ai_platform_network_process+0x34c>
 8009d5c:	4625      	mov	r5, r4
 8009d5e:	2221      	movs	r2, #33	; 0x21
 8009d60:	4604      	mov	r4, r0
 8009d62:	2113      	movs	r1, #19
 8009d64:	f105 0010 	add.w	r0, r5, #16
 8009d68:	f000 f812 	bl	8009d90 <core_set_error>
 8009d6c:	e6f1      	b.n	8009b52 <ai_platform_network_process+0x2da>
 8009d6e:	4625      	mov	r5, r4
 8009d70:	2217      	movs	r2, #23
 8009d72:	4604      	mov	r4, r0
 8009d74:	2113      	movs	r1, #19
 8009d76:	f105 0010 	add.w	r0, r5, #16
 8009d7a:	f000 f809 	bl	8009d90 <core_set_error>
 8009d7e:	e6e8      	b.n	8009b52 <ai_platform_network_process+0x2da>

08009d80 <core_init>:
 8009d80:	2001      	movs	r0, #1
 8009d82:	4770      	bx	lr

08009d84 <core_get_error>:
 8009d84:	4603      	mov	r3, r0
 8009d86:	2200      	movs	r2, #0
 8009d88:	6800      	ldr	r0, [r0, #0]
 8009d8a:	601a      	str	r2, [r3, #0]
 8009d8c:	4770      	bx	lr
 8009d8e:	bf00      	nop

08009d90 <core_set_error>:
 8009d90:	4603      	mov	r3, r0
 8009d92:	7800      	ldrb	r0, [r0, #0]
 8009d94:	b108      	cbz	r0, 8009d9a <core_set_error+0xa>
 8009d96:	2000      	movs	r0, #0
 8009d98:	4770      	bx	lr
 8009d9a:	7019      	strb	r1, [r3, #0]
 8009d9c:	6819      	ldr	r1, [r3, #0]
 8009d9e:	f362 211f 	bfi	r1, r2, #8, #24
 8009da2:	2001      	movs	r0, #1
 8009da4:	6019      	str	r1, [r3, #0]
 8009da6:	4770      	bx	lr

08009da8 <ai_check_custom_types>:
 8009da8:	b082      	sub	sp, #8
 8009daa:	4b13      	ldr	r3, [pc, #76]	; (8009df8 <ai_check_custom_types+0x50>)
 8009dac:	9301      	str	r3, [sp, #4]
 8009dae:	b118      	cbz	r0, 8009db8 <ai_check_custom_types+0x10>
 8009db0:	7803      	ldrb	r3, [r0, #0]
 8009db2:	2b03      	cmp	r3, #3
 8009db4:	d002      	beq.n	8009dbc <ai_check_custom_types+0x14>
 8009db6:	2000      	movs	r0, #0
 8009db8:	b002      	add	sp, #8
 8009dba:	4770      	bx	lr
 8009dbc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d004      	beq.n	8009dce <ai_check_custom_types+0x26>
 8009dc4:	2001      	movs	r0, #1
 8009dc6:	f080 0001 	eor.w	r0, r0, #1
 8009dca:	b002      	add	sp, #8
 8009dcc:	4770      	bx	lr
 8009dce:	7842      	ldrb	r2, [r0, #1]
 8009dd0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	f100 0001 	add.w	r0, r0, #1
 8009dda:	d1f3      	bne.n	8009dc4 <ai_check_custom_types+0x1c>
 8009ddc:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8009de0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d1ed      	bne.n	8009dc4 <ai_check_custom_types+0x1c>
 8009de8:	7842      	ldrb	r2, [r0, #1]
 8009dea:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009dee:	429a      	cmp	r2, r3
 8009df0:	d1e8      	bne.n	8009dc4 <ai_check_custom_types+0x1c>
 8009df2:	2000      	movs	r0, #0
 8009df4:	e7e7      	b.n	8009dc6 <ai_check_custom_types+0x1e>
 8009df6:	bf00      	nop
 8009df8:	84048403 	.word	0x84048403

08009dfc <ai_layers_init_all>:
 8009dfc:	4601      	mov	r1, r0
 8009dfe:	2000      	movs	r0, #0
 8009e00:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8009e02:	b143      	cbz	r3, 8009e16 <ai_layers_init_all+0x1a>
 8009e04:	691a      	ldr	r2, [r3, #16]
 8009e06:	60d9      	str	r1, [r3, #12]
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	f100 0001 	add.w	r0, r0, #1
 8009e0e:	d002      	beq.n	8009e16 <ai_layers_init_all+0x1a>
 8009e10:	b10a      	cbz	r2, 8009e16 <ai_layers_init_all+0x1a>
 8009e12:	4613      	mov	r3, r2
 8009e14:	e7f5      	b.n	8009e02 <ai_layers_init_all+0x6>
 8009e16:	4770      	bx	lr

08009e18 <ai_layers_post_init_all>:
 8009e18:	b538      	push	{r3, r4, r5, lr}
 8009e1a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8009e1c:	2500      	movs	r5, #0
 8009e1e:	b16c      	cbz	r4, 8009e3c <ai_layers_post_init_all+0x24>
 8009e20:	6863      	ldr	r3, [r4, #4]
 8009e22:	07db      	lsls	r3, r3, #31
 8009e24:	d504      	bpl.n	8009e30 <ai_layers_post_init_all+0x18>
 8009e26:	6a23      	ldr	r3, [r4, #32]
 8009e28:	4620      	mov	r0, r4
 8009e2a:	b10b      	cbz	r3, 8009e30 <ai_layers_post_init_all+0x18>
 8009e2c:	4798      	blx	r3
 8009e2e:	3501      	adds	r5, #1
 8009e30:	6923      	ldr	r3, [r4, #16]
 8009e32:	42a3      	cmp	r3, r4
 8009e34:	d002      	beq.n	8009e3c <ai_layers_post_init_all+0x24>
 8009e36:	b10b      	cbz	r3, 8009e3c <ai_layers_post_init_all+0x24>
 8009e38:	461c      	mov	r4, r3
 8009e3a:	e7f0      	b.n	8009e1e <ai_layers_post_init_all+0x6>
 8009e3c:	4628      	mov	r0, r5
 8009e3e:	bd38      	pop	{r3, r4, r5, pc}

08009e40 <ai_layers_forward_all>:
 8009e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e44:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 8009e48:	4604      	mov	r4, r0
 8009e4a:	f1b8 0f00 	cmp.w	r8, #0
 8009e4e:	d02b      	beq.n	8009ea8 <ai_layers_forward_all+0x68>
 8009e50:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8009e52:	6381      	str	r1, [r0, #56]	; 0x38
 8009e54:	b321      	cbz	r1, 8009ea0 <ai_layers_forward_all+0x60>
 8009e56:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8009e58:	2001      	movs	r0, #1
 8009e5a:	47c0      	blx	r8
 8009e5c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009e5e:	b1fe      	cbz	r6, 8009ea0 <ai_layers_forward_all+0x60>
 8009e60:	2700      	movs	r7, #0
 8009e62:	4631      	mov	r1, r6
 8009e64:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009e66:	2002      	movs	r0, #2
 8009e68:	47c0      	blx	r8
 8009e6a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8009e6c:	4628      	mov	r0, r5
 8009e6e:	696b      	ldr	r3, [r5, #20]
 8009e70:	4798      	blx	r3
 8009e72:	692e      	ldr	r6, [r5, #16]
 8009e74:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009e76:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009e78:	42b5      	cmp	r5, r6
 8009e7a:	f04f 0003 	mov.w	r0, #3
 8009e7e:	d007      	beq.n	8009e90 <ai_layers_forward_all+0x50>
 8009e80:	47c0      	blx	r8
 8009e82:	3701      	adds	r7, #1
 8009e84:	63a6      	str	r6, [r4, #56]	; 0x38
 8009e86:	2e00      	cmp	r6, #0
 8009e88:	d1eb      	bne.n	8009e62 <ai_layers_forward_all+0x22>
 8009e8a:	4638      	mov	r0, r7
 8009e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e90:	2003      	movs	r0, #3
 8009e92:	47c0      	blx	r8
 8009e94:	2300      	movs	r3, #0
 8009e96:	3701      	adds	r7, #1
 8009e98:	63a3      	str	r3, [r4, #56]	; 0x38
 8009e9a:	4638      	mov	r0, r7
 8009e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ea0:	2700      	movs	r7, #0
 8009ea2:	4638      	mov	r0, r7
 8009ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ea8:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8009eaa:	6385      	str	r5, [r0, #56]	; 0x38
 8009eac:	2d00      	cmp	r5, #0
 8009eae:	d0f7      	beq.n	8009ea0 <ai_layers_forward_all+0x60>
 8009eb0:	4647      	mov	r7, r8
 8009eb2:	696b      	ldr	r3, [r5, #20]
 8009eb4:	4628      	mov	r0, r5
 8009eb6:	4798      	blx	r3
 8009eb8:	462b      	mov	r3, r5
 8009eba:	692d      	ldr	r5, [r5, #16]
 8009ebc:	429d      	cmp	r5, r3
 8009ebe:	d004      	beq.n	8009eca <ai_layers_forward_all+0x8a>
 8009ec0:	63a5      	str	r5, [r4, #56]	; 0x38
 8009ec2:	3701      	adds	r7, #1
 8009ec4:	2d00      	cmp	r5, #0
 8009ec6:	d1f4      	bne.n	8009eb2 <ai_layers_forward_all+0x72>
 8009ec8:	e7df      	b.n	8009e8a <ai_layers_forward_all+0x4a>
 8009eca:	2300      	movs	r3, #0
 8009ecc:	63a3      	str	r3, [r4, #56]	; 0x38
 8009ece:	3701      	adds	r7, #1
 8009ed0:	e7db      	b.n	8009e8a <ai_layers_forward_all+0x4a>
 8009ed2:	bf00      	nop

08009ed4 <forward_dense>:
 8009ed4:	6983      	ldr	r3, [r0, #24]
 8009ed6:	881a      	ldrh	r2, [r3, #0]
 8009ed8:	2a00      	cmp	r2, #0
 8009eda:	f000 8181 	beq.w	800a1e0 <forward_dense+0x30c>
 8009ede:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ee2:	ed2d 8b02 	vpush	{d8}
 8009ee6:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8009eea:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8009eee:	b095      	sub	sp, #84	; 0x54
 8009ef0:	b105      	cbz	r5, 8009ef4 <forward_dense+0x20>
 8009ef2:	682d      	ldr	r5, [r5, #0]
 8009ef4:	2a01      	cmp	r2, #1
 8009ef6:	f000 828f 	beq.w	800a418 <forward_dense+0x544>
 8009efa:	f8dc 6010 	ldr.w	r6, [ip, #16]
 8009efe:	b106      	cbz	r6, 8009f02 <forward_dense+0x2e>
 8009f00:	6836      	ldr	r6, [r6, #0]
 8009f02:	2a02      	cmp	r2, #2
 8009f04:	f000 816e 	beq.w	800a1e4 <forward_dense+0x310>
 8009f08:	f8dc 301c 	ldr.w	r3, [ip, #28]
 8009f0c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	f000 8274 	beq.w	800a3fc <forward_dense+0x528>
 8009f14:	4619      	mov	r1, r3
 8009f16:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 8009f1a:	6809      	ldr	r1, [r1, #0]
 8009f1c:	910d      	str	r1, [sp, #52]	; 0x34
 8009f1e:	2b01      	cmp	r3, #1
 8009f20:	f240 826e 	bls.w	800a400 <forward_dense+0x52c>
 8009f24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f2a:	460b      	mov	r3, r1
 8009f2c:	68e8      	ldr	r0, [r5, #12]
 8009f2e:	68f7      	ldr	r7, [r6, #12]
 8009f30:	6840      	ldr	r0, [r0, #4]
 8009f32:	6999      	ldr	r1, [r3, #24]
 8009f34:	9013      	str	r0, [sp, #76]	; 0x4c
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	680b      	ldr	r3, [r1, #0]
 8009f3a:	9012      	str	r0, [sp, #72]	; 0x48
 8009f3c:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 8009f40:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 8009f44:	fb00 f404 	mul.w	r4, r0, r4
 8009f48:	f3c3 5041 	ubfx	r0, r3, #21, #2
 8009f4c:	fa4e f000 	asr.w	r0, lr, r0
 8009f50:	2a03      	cmp	r2, #3
 8009f52:	9010      	str	r0, [sp, #64]	; 0x40
 8009f54:	f000 825d 	beq.w	800a412 <forward_dense+0x53e>
 8009f58:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 8009f5c:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8009f60:	2a00      	cmp	r2, #0
 8009f62:	f000 8246 	beq.w	800a3f2 <forward_dense+0x51e>
 8009f66:	6812      	ldr	r2, [r2, #0]
 8009f68:	2a00      	cmp	r2, #0
 8009f6a:	f000 8242 	beq.w	800a3f2 <forward_dense+0x51e>
 8009f6e:	2b04      	cmp	r3, #4
 8009f70:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8009f74:	f000 822c 	beq.w	800a3d0 <forward_dense+0x4fc>
 8009f78:	2b08      	cmp	r3, #8
 8009f7a:	f000 8229 	beq.w	800a3d0 <forward_dense+0x4fc>
 8009f7e:	f04f 0b00 	mov.w	fp, #0
 8009f82:	69b2      	ldr	r2, [r6, #24]
 8009f84:	69ab      	ldr	r3, [r5, #24]
 8009f86:	6891      	ldr	r1, [r2, #8]
 8009f88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f8a:	689b      	ldr	r3, [r3, #8]
 8009f8c:	6952      	ldr	r2, [r2, #20]
 8009f8e:	9106      	str	r1, [sp, #24]
 8009f90:	fb07 f404 	mul.w	r4, r7, r4
 8009f94:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8009f98:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009f9a:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8009f9e:	4281      	cmp	r1, r0
 8009fa0:	ea4f 0482 	mov.w	r4, r2, lsl #2
 8009fa4:	900e      	str	r0, [sp, #56]	; 0x38
 8009fa6:	940c      	str	r4, [sp, #48]	; 0x30
 8009fa8:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 8009fac:	f080 8113 	bcs.w	800a1d6 <forward_dense+0x302>
 8009fb0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009fb2:	ed9f 8a93 	vldr	s16, [pc, #588]	; 800a200 <forward_dense+0x32c>
 8009fb6:	f021 0201 	bic.w	r2, r1, #1
 8009fba:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8009fbe:	9204      	str	r2, [sp, #16]
 8009fc0:	f001 0201 	and.w	r2, r1, #1
 8009fc4:	08c8      	lsrs	r0, r1, #3
 8009fc6:	9208      	str	r2, [sp, #32]
 8009fc8:	008a      	lsls	r2, r1, #2
 8009fca:	f001 0a07 	and.w	sl, r1, #7
 8009fce:	920f      	str	r2, [sp, #60]	; 0x3c
 8009fd0:	eb03 1240 	add.w	r2, r3, r0, lsl #5
 8009fd4:	3320      	adds	r3, #32
 8009fd6:	465c      	mov	r4, fp
 8009fd8:	9007      	str	r0, [sp, #28]
 8009fda:	46cb      	mov	fp, r9
 8009fdc:	9205      	str	r2, [sp, #20]
 8009fde:	9302      	str	r3, [sp, #8]
 8009fe0:	46c1      	mov	r9, r8
 8009fe2:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8009fe6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fe8:	699b      	ldr	r3, [r3, #24]
 8009fea:	689a      	ldr	r2, [r3, #8]
 8009fec:	9b02      	ldr	r3, [sp, #8]
 8009fee:	3b20      	subs	r3, #32
 8009ff0:	930a      	str	r3, [sp, #40]	; 0x28
 8009ff2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ff4:	b10b      	cbz	r3, 8009ffa <forward_dense+0x126>
 8009ff6:	699b      	ldr	r3, [r3, #24]
 8009ff8:	689b      	ldr	r3, [r3, #8]
 8009ffa:	2c00      	cmp	r4, #0
 8009ffc:	f000 81da 	beq.w	800a3b4 <forward_dense+0x4e0>
 800a000:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a002:	2904      	cmp	r1, #4
 800a004:	9906      	ldr	r1, [sp, #24]
 800a006:	f000 80fd 	beq.w	800a204 <forward_dense+0x330>
 800a00a:	4549      	cmp	r1, r9
 800a00c:	f080 80d2 	bcs.w	800a1b4 <forward_dense+0x2e0>
 800a010:	460f      	mov	r7, r1
 800a012:	9907      	ldr	r1, [sp, #28]
 800a014:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800a018:	f8dd a014 	ldr.w	sl, [sp, #20]
 800a01c:	1c4e      	adds	r6, r1, #1
 800a01e:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800a022:	4694      	mov	ip, r2
 800a024:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a026:	468e      	mov	lr, r1
 800a028:	2b00      	cmp	r3, #0
 800a02a:	f000 80de 	beq.w	800a1ea <forward_dense+0x316>
 800a02e:	ecf3 2a01 	vldmia	r3!, {s5}
 800a032:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800a200 <forward_dense+0x32c>
 800a036:	f1be 0f00 	cmp.w	lr, #0
 800a03a:	f000 80de 	beq.w	800a1fa <forward_dense+0x326>
 800a03e:	f10c 0108 	add.w	r1, ip, #8
 800a042:	4640      	mov	r0, r8
 800a044:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 800a048:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 800a04c:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 800a050:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 800a054:	ed50 4a05 	vldr	s9, [r0, #-20]	; 0xffffffec
 800a058:	ed10 5a04 	vldr	s10, [r0, #-16]
 800a05c:	ed50 5a03 	vldr	s11, [r0, #-12]
 800a060:	ed10 6a02 	vldr	s12, [r0, #-8]
 800a064:	ed50 6a01 	vldr	s13, [r0, #-4]
 800a068:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a06c:	edd5 7a00 	vldr	s15, [r5]
 800a070:	f811 5c08 	ldrb.w	r5, [r1, #-8]
 800a074:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a078:	ee67 7a83 	vmul.f32	s15, s15, s6
 800a07c:	ed95 3a00 	vldr	s6, [r5]
 800a080:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 800a084:	eee3 7a23 	vfma.f32	s15, s6, s7
 800a088:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a08c:	3108      	adds	r1, #8
 800a08e:	edd5 3a00 	vldr	s7, [r5]
 800a092:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 800a096:	eee3 7a84 	vfma.f32	s15, s7, s8
 800a09a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a09e:	3020      	adds	r0, #32
 800a0a0:	ed95 4a00 	vldr	s8, [r5]
 800a0a4:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 800a0a8:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a0ac:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a0b0:	edd5 4a00 	vldr	s9, [r5]
 800a0b4:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 800a0b8:	eee4 7a85 	vfma.f32	s15, s9, s10
 800a0bc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a0c0:	ed95 5a00 	vldr	s10, [r5]
 800a0c4:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 800a0c8:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a0cc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a0d0:	edd5 5a00 	vldr	s11, [r5]
 800a0d4:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 800a0d8:	eee5 7a86 	vfma.f32	s15, s11, s12
 800a0dc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a0e0:	428e      	cmp	r6, r1
 800a0e2:	ed95 6a00 	vldr	s12, [r5]
 800a0e6:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a0ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a0ee:	d1a9      	bne.n	800a044 <forward_dense+0x170>
 800a0f0:	f1a6 0108 	sub.w	r1, r6, #8
 800a0f4:	4650      	mov	r0, sl
 800a0f6:	2a00      	cmp	r2, #0
 800a0f8:	d04a      	beq.n	800a190 <forward_dense+0x2bc>
 800a0fa:	780d      	ldrb	r5, [r1, #0]
 800a0fc:	edd0 6a00 	vldr	s13, [r0]
 800a100:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a104:	edd5 7a00 	vldr	s15, [r5]
 800a108:	2a01      	cmp	r2, #1
 800a10a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a10e:	d03f      	beq.n	800a190 <forward_dense+0x2bc>
 800a110:	784d      	ldrb	r5, [r1, #1]
 800a112:	edd0 6a01 	vldr	s13, [r0, #4]
 800a116:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a11a:	edd5 7a00 	vldr	s15, [r5]
 800a11e:	2a02      	cmp	r2, #2
 800a120:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a124:	d034      	beq.n	800a190 <forward_dense+0x2bc>
 800a126:	788d      	ldrb	r5, [r1, #2]
 800a128:	edd0 6a02 	vldr	s13, [r0, #8]
 800a12c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a130:	edd5 7a00 	vldr	s15, [r5]
 800a134:	2a03      	cmp	r2, #3
 800a136:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a13a:	d029      	beq.n	800a190 <forward_dense+0x2bc>
 800a13c:	78cd      	ldrb	r5, [r1, #3]
 800a13e:	edd0 6a03 	vldr	s13, [r0, #12]
 800a142:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a146:	edd5 7a00 	vldr	s15, [r5]
 800a14a:	2a04      	cmp	r2, #4
 800a14c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a150:	d01e      	beq.n	800a190 <forward_dense+0x2bc>
 800a152:	790d      	ldrb	r5, [r1, #4]
 800a154:	edd0 6a04 	vldr	s13, [r0, #16]
 800a158:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a15c:	edd5 7a00 	vldr	s15, [r5]
 800a160:	2a05      	cmp	r2, #5
 800a162:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a166:	d013      	beq.n	800a190 <forward_dense+0x2bc>
 800a168:	794d      	ldrb	r5, [r1, #5]
 800a16a:	edd0 6a05 	vldr	s13, [r0, #20]
 800a16e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a172:	edd5 7a00 	vldr	s15, [r5]
 800a176:	2a06      	cmp	r2, #6
 800a178:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a17c:	d008      	beq.n	800a190 <forward_dense+0x2bc>
 800a17e:	7989      	ldrb	r1, [r1, #6]
 800a180:	edd0 7a06 	vldr	s15, [r0, #24]
 800a184:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800a188:	edd1 6a00 	vldr	s13, [r1]
 800a18c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a190:	44dc      	add	ip, fp
 800a192:	445e      	add	r6, fp
 800a194:	ee32 7a87 	vadd.f32	s14, s5, s14
 800a198:	eca7 7a01 	vstmia	r7!, {s14}
 800a19c:	454f      	cmp	r7, r9
 800a19e:	f4ff af43 	bcc.w	800a028 <forward_dense+0x154>
 800a1a2:	9a06      	ldr	r2, [sp, #24]
 800a1a4:	eba9 0302 	sub.w	r3, r9, r2
 800a1a8:	3b01      	subs	r3, #1
 800a1aa:	f023 0303 	bic.w	r3, r3, #3
 800a1ae:	3304      	adds	r3, #4
 800a1b0:	18d3      	adds	r3, r2, r3
 800a1b2:	9306      	str	r3, [sp, #24]
 800a1b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a1b6:	9a05      	ldr	r2, [sp, #20]
 800a1b8:	4499      	add	r9, r3
 800a1ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a1bc:	441a      	add	r2, r3
 800a1be:	9205      	str	r2, [sp, #20]
 800a1c0:	9a02      	ldr	r2, [sp, #8]
 800a1c2:	441a      	add	r2, r3
 800a1c4:	9202      	str	r2, [sp, #8]
 800a1c6:	9a04      	ldr	r2, [sp, #16]
 800a1c8:	441a      	add	r2, r3
 800a1ca:	9204      	str	r2, [sp, #16]
 800a1cc:	9b06      	ldr	r3, [sp, #24]
 800a1ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	f4ff af08 	bcc.w	8009fe6 <forward_dense+0x112>
 800a1d6:	b015      	add	sp, #84	; 0x54
 800a1d8:	ecbd 8b02 	vpop	{d8}
 800a1dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1e0:	6853      	ldr	r3, [r2, #4]
 800a1e2:	deff      	udf	#255	; 0xff
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	685b      	ldr	r3, [r3, #4]
 800a1e8:	deff      	udf	#255	; 0xff
 800a1ea:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800a200 <forward_dense+0x32c>
 800a1ee:	eef0 2a48 	vmov.f32	s5, s16
 800a1f2:	f1be 0f00 	cmp.w	lr, #0
 800a1f6:	f47f af22 	bne.w	800a03e <forward_dense+0x16a>
 800a1fa:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a1fc:	4661      	mov	r1, ip
 800a1fe:	e77a      	b.n	800a0f6 <forward_dense+0x222>
 800a200:	00000000 	.word	0x00000000
 800a204:	4549      	cmp	r1, r9
 800a206:	d2d5      	bcs.n	800a1b4 <forward_dense+0x2e0>
 800a208:	9807      	ldr	r0, [sp, #28]
 800a20a:	9103      	str	r1, [sp, #12]
 800a20c:	9904      	ldr	r1, [sp, #16]
 800a20e:	f100 0c01 	add.w	ip, r0, #1
 800a212:	3901      	subs	r1, #1
 800a214:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800a218:	9109      	str	r1, [sp, #36]	; 0x24
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	f000 80b2 	beq.w	800a384 <forward_dense+0x4b0>
 800a220:	9907      	ldr	r1, [sp, #28]
 800a222:	ecf3 2a01 	vldmia	r3!, {s5}
 800a226:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 800a200 <forward_dense+0x32c>
 800a22a:	2900      	cmp	r1, #0
 800a22c:	f000 80b2 	beq.w	800a394 <forward_dense+0x4c0>
 800a230:	9902      	ldr	r1, [sp, #8]
 800a232:	1d10      	adds	r0, r2, #4
 800a234:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 800a238:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 800a23c:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 800a240:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 800a244:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 800a248:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
 800a24c:	ed11 5a04 	vldr	s10, [r1, #-16]
 800a250:	ed51 5a03 	vldr	s11, [r1, #-12]
 800a254:	ed11 6a02 	vldr	s12, [r1, #-8]
 800a258:	ed51 6a01 	vldr	s13, [r1, #-4]
 800a25c:	f006 070f 	and.w	r7, r6, #15
 800a260:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800a264:	edd7 7a00 	vldr	s15, [r7]
 800a268:	0936      	lsrs	r6, r6, #4
 800a26a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800a26e:	ed96 3a00 	vldr	s6, [r6]
 800a272:	ee67 7a82 	vmul.f32	s15, s15, s4
 800a276:	092e      	lsrs	r6, r5, #4
 800a278:	eee3 7a23 	vfma.f32	s15, s6, s7
 800a27c:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800a280:	f005 050f 	and.w	r5, r5, #15
 800a284:	edd6 3a00 	vldr	s7, [r6]
 800a288:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 800a28c:	eee3 7a84 	vfma.f32	s15, s7, s8
 800a290:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a294:	0937      	lsrs	r7, r6, #4
 800a296:	ed95 4a00 	vldr	s8, [r5]
 800a29a:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 800a29e:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a2a2:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800a2a6:	f006 060f 	and.w	r6, r6, #15
 800a2aa:	edd7 4a00 	vldr	s9, [r7]
 800a2ae:	eee4 7a85 	vfma.f32	s15, s9, s10
 800a2b2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800a2b6:	3004      	adds	r0, #4
 800a2b8:	ed96 5a00 	vldr	s10, [r6]
 800a2bc:	092e      	lsrs	r6, r5, #4
 800a2be:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a2c2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800a2c6:	f005 050f 	and.w	r5, r5, #15
 800a2ca:	edd6 5a00 	vldr	s11, [r6]
 800a2ce:	eee5 7a86 	vfma.f32	s15, s11, s12
 800a2d2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a2d6:	4584      	cmp	ip, r0
 800a2d8:	ed95 6a00 	vldr	s12, [r5]
 800a2dc:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a2e0:	f101 0120 	add.w	r1, r1, #32
 800a2e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a2e8:	d1a4      	bne.n	800a234 <forward_dense+0x360>
 800a2ea:	f8dd e014 	ldr.w	lr, [sp, #20]
 800a2ee:	f1ac 0804 	sub.w	r8, ip, #4
 800a2f2:	9904      	ldr	r1, [sp, #16]
 800a2f4:	458e      	cmp	lr, r1
 800a2f6:	d22a      	bcs.n	800a34e <forward_dense+0x47a>
 800a2f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a2fa:	eba1 070e 	sub.w	r7, r1, lr
 800a2fe:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
 800a302:	f10e 0008 	add.w	r0, lr, #8
 800a306:	f108 36ff 	add.w	r6, r8, #4294967295
 800a30a:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 800a30e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a312:	ed50 5a01 	vldr	s11, [r0, #-4]
 800a316:	ed50 6a02 	vldr	s13, [r0, #-8]
 800a31a:	f001 050f 	and.w	r5, r1, #15
 800a31e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a322:	edd5 7a00 	vldr	s15, [r5]
 800a326:	0909      	lsrs	r1, r1, #4
 800a328:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800a32c:	ed91 6a00 	vldr	s12, [r1]
 800a330:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a334:	42b7      	cmp	r7, r6
 800a336:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a33a:	f100 0008 	add.w	r0, r0, #8
 800a33e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a342:	d1e4      	bne.n	800a30e <forward_dense+0x43a>
 800a344:	f10a 0a01 	add.w	sl, sl, #1
 800a348:	44d0      	add	r8, sl
 800a34a:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 800a34e:	9908      	ldr	r1, [sp, #32]
 800a350:	b321      	cbz	r1, 800a39c <forward_dense+0x4c8>
 800a352:	f898 1000 	ldrb.w	r1, [r8]
 800a356:	edde 7a00 	vldr	s15, [lr]
 800a35a:	0909      	lsrs	r1, r1, #4
 800a35c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800a360:	edd1 6a00 	vldr	s13, [r1]
 800a364:	9903      	ldr	r1, [sp, #12]
 800a366:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a36a:	445a      	add	r2, fp
 800a36c:	44dc      	add	ip, fp
 800a36e:	ee72 2a87 	vadd.f32	s5, s5, s14
 800a372:	ece1 2a01 	vstmia	r1!, {s5}
 800a376:	4589      	cmp	r9, r1
 800a378:	9103      	str	r1, [sp, #12]
 800a37a:	f67f af12 	bls.w	800a1a2 <forward_dense+0x2ce>
 800a37e:	2b00      	cmp	r3, #0
 800a380:	f47f af4e 	bne.w	800a220 <forward_dense+0x34c>
 800a384:	9907      	ldr	r1, [sp, #28]
 800a386:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 800a200 <forward_dense+0x32c>
 800a38a:	eef0 2a48 	vmov.f32	s5, s16
 800a38e:	2900      	cmp	r1, #0
 800a390:	f47f af4e 	bne.w	800a230 <forward_dense+0x35c>
 800a394:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 800a398:	4690      	mov	r8, r2
 800a39a:	e7aa      	b.n	800a2f2 <forward_dense+0x41e>
 800a39c:	9903      	ldr	r1, [sp, #12]
 800a39e:	ee32 7a87 	vadd.f32	s14, s5, s14
 800a3a2:	445a      	add	r2, fp
 800a3a4:	eca1 7a01 	vstmia	r1!, {s14}
 800a3a8:	4549      	cmp	r1, r9
 800a3aa:	9103      	str	r1, [sp, #12]
 800a3ac:	44dc      	add	ip, fp
 800a3ae:	f4ff af34 	bcc.w	800a21a <forward_dense+0x346>
 800a3b2:	e6f6      	b.n	800a1a2 <forward_dense+0x2ce>
 800a3b4:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a3b6:	9d06      	ldr	r5, [sp, #24]
 800a3b8:	9101      	str	r1, [sp, #4]
 800a3ba:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a3bc:	9100      	str	r1, [sp, #0]
 800a3be:	4628      	mov	r0, r5
 800a3c0:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a3c2:	f000 f9ef 	bl	800a7a4 <forward_lite_dense_if32of32wf32>
 800a3c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a3c8:	462b      	mov	r3, r5
 800a3ca:	4413      	add	r3, r2
 800a3cc:	9306      	str	r3, [sp, #24]
 800a3ce:	e6f1      	b.n	800a1b4 <forward_dense+0x2e0>
 800a3d0:	f8d1 800c 	ldr.w	r8, [r1, #12]
 800a3d4:	f1b9 0f00 	cmp.w	r9, #0
 800a3d8:	d016      	beq.n	800a408 <forward_dense+0x534>
 800a3da:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a3de:	f000 fbf7 	bl	800abd0 <ai_array_get_byte_size>
 800a3e2:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 800a3e6:	4602      	mov	r2, r0
 800a3e8:	4659      	mov	r1, fp
 800a3ea:	4640      	mov	r0, r8
 800a3ec:	f000 fafe 	bl	800a9ec <st_int8_copy>
 800a3f0:	e5c7      	b.n	8009f82 <forward_dense+0xae>
 800a3f2:	2b04      	cmp	r3, #4
 800a3f4:	d00a      	beq.n	800a40c <forward_dense+0x538>
 800a3f6:	f04f 0900 	mov.w	r9, #0
 800a3fa:	e5bd      	b.n	8009f78 <forward_dense+0xa4>
 800a3fc:	930d      	str	r3, [sp, #52]	; 0x34
 800a3fe:	e595      	b.n	8009f2c <forward_dense+0x58>
 800a400:	2300      	movs	r3, #0
 800a402:	930b      	str	r3, [sp, #44]	; 0x2c
 800a404:	460b      	mov	r3, r1
 800a406:	e591      	b.n	8009f2c <forward_dense+0x58>
 800a408:	46c3      	mov	fp, r8
 800a40a:	e5ba      	b.n	8009f82 <forward_dense+0xae>
 800a40c:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 800a410:	e5b7      	b.n	8009f82 <forward_dense+0xae>
 800a412:	2300      	movs	r3, #0
 800a414:	685b      	ldr	r3, [r3, #4]
 800a416:	deff      	udf	#255	; 0xff
 800a418:	2300      	movs	r3, #0
 800a41a:	685b      	ldr	r3, [r3, #4]
 800a41c:	deff      	udf	#255	; 0xff
 800a41e:	bf00      	nop

0800a420 <forward_relu>:
 800a420:	6982      	ldr	r2, [r0, #24]
 800a422:	8813      	ldrh	r3, [r2, #0]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d05b      	beq.n	800a4e0 <forward_relu+0xc0>
 800a428:	6851      	ldr	r1, [r2, #4]
 800a42a:	684a      	ldr	r2, [r1, #4]
 800a42c:	b102      	cbz	r2, 800a430 <forward_relu+0x10>
 800a42e:	6812      	ldr	r2, [r2, #0]
 800a430:	2b01      	cmp	r3, #1
 800a432:	f000 8123 	beq.w	800a67c <forward_relu+0x25c>
 800a436:	b470      	push	{r4, r5, r6}
 800a438:	6909      	ldr	r1, [r1, #16]
 800a43a:	b101      	cbz	r1, 800a43e <forward_relu+0x1e>
 800a43c:	6809      	ldr	r1, [r1, #0]
 800a43e:	69c6      	ldr	r6, [r0, #28]
 800a440:	2e00      	cmp	r6, #0
 800a442:	f000 8097 	beq.w	800a574 <forward_relu+0x154>
 800a446:	6873      	ldr	r3, [r6, #4]
 800a448:	6988      	ldr	r0, [r1, #24]
 800a44a:	6991      	ldr	r1, [r2, #24]
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	f000 80c1 	beq.w	800a5d4 <forward_relu+0x1b4>
 800a452:	6893      	ldr	r3, [r2, #8]
 800a454:	6880      	ldr	r0, [r0, #8]
 800a456:	688c      	ldr	r4, [r1, #8]
 800a458:	0a1b      	lsrs	r3, r3, #8
 800a45a:	f000 80f2 	beq.w	800a642 <forward_relu+0x222>
 800a45e:	68d5      	ldr	r5, [r2, #12]
 800a460:	2201      	movs	r2, #1
 800a462:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800a466:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a46a:	42ab      	cmp	r3, r5
 800a46c:	fb01 f202 	mul.w	r2, r1, r2
 800a470:	d1f9      	bne.n	800a466 <forward_relu+0x46>
 800a472:	68b3      	ldr	r3, [r6, #8]
 800a474:	ed93 7a02 	vldr	s14, [r3, #8]
 800a478:	edd3 6a00 	vldr	s13, [r3]
 800a47c:	ed93 6a01 	vldr	s12, [r3, #4]
 800a480:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800a484:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800a488:	3a01      	subs	r2, #1
 800a48a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a48e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a492:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800a496:	d425      	bmi.n	800a4e4 <forward_relu+0xc4>
 800a498:	429c      	cmp	r4, r3
 800a49a:	d81f      	bhi.n	800a4dc <forward_relu+0xbc>
 800a49c:	1d1a      	adds	r2, r3, #4
 800a49e:	1d01      	adds	r1, r0, #4
 800a4a0:	e00d      	b.n	800a4be <forward_relu+0x9e>
 800a4a2:	eef4 6ae7 	vcmpe.f32	s13, s15
 800a4a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4aa:	db03      	blt.n	800a4b4 <forward_relu+0x94>
 800a4ac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a4b0:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a4b4:	3b08      	subs	r3, #8
 800a4b6:	429c      	cmp	r4, r3
 800a4b8:	ed61 7a01 	vstmdb	r1!, {s15}
 800a4bc:	d80e      	bhi.n	800a4dc <forward_relu+0xbc>
 800a4be:	4613      	mov	r3, r2
 800a4c0:	ed72 7a01 	vldmdb	r2!, {s15}
 800a4c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a4c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4cc:	d9e9      	bls.n	800a4a2 <forward_relu+0x82>
 800a4ce:	3b08      	subs	r3, #8
 800a4d0:	eef0 7a47 	vmov.f32	s15, s14
 800a4d4:	429c      	cmp	r4, r3
 800a4d6:	ed61 7a01 	vstmdb	r1!, {s15}
 800a4da:	d9f0      	bls.n	800a4be <forward_relu+0x9e>
 800a4dc:	bc70      	pop	{r4, r5, r6}
 800a4de:	4770      	bx	lr
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	deff      	udf	#255	; 0xff
 800a4e4:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800a4e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4ec:	d11f      	bne.n	800a52e <forward_relu+0x10e>
 800a4ee:	429c      	cmp	r4, r3
 800a4f0:	d8f4      	bhi.n	800a4dc <forward_relu+0xbc>
 800a4f2:	1b1c      	subs	r4, r3, r4
 800a4f4:	f024 0403 	bic.w	r4, r4, #3
 800a4f8:	1d1a      	adds	r2, r3, #4
 800a4fa:	2500      	movs	r5, #0
 800a4fc:	1b1b      	subs	r3, r3, r4
 800a4fe:	1d01      	adds	r1, r0, #4
 800a500:	ed72 7a01 	vldmdb	r2!, {s15}
 800a504:	eef4 7ae6 	vcmpe.f32	s15, s13
 800a508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a50c:	dc0a      	bgt.n	800a524 <forward_relu+0x104>
 800a50e:	429a      	cmp	r2, r3
 800a510:	f841 5d04 	str.w	r5, [r1, #-4]!
 800a514:	d0e2      	beq.n	800a4dc <forward_relu+0xbc>
 800a516:	ed72 7a01 	vldmdb	r2!, {s15}
 800a51a:	eef4 7ae6 	vcmpe.f32	s15, s13
 800a51e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a522:	ddf4      	ble.n	800a50e <forward_relu+0xee>
 800a524:	429a      	cmp	r2, r3
 800a526:	ed61 7a01 	vstmdb	r1!, {s15}
 800a52a:	d1e9      	bne.n	800a500 <forward_relu+0xe0>
 800a52c:	e7d6      	b.n	800a4dc <forward_relu+0xbc>
 800a52e:	429c      	cmp	r4, r3
 800a530:	d8d4      	bhi.n	800a4dc <forward_relu+0xbc>
 800a532:	1b1c      	subs	r4, r3, r4
 800a534:	f024 0403 	bic.w	r4, r4, #3
 800a538:	1d1a      	adds	r2, r3, #4
 800a53a:	1d01      	adds	r1, r0, #4
 800a53c:	1b1b      	subs	r3, r3, r4
 800a53e:	ed72 7a01 	vldmdb	r2!, {s15}
 800a542:	eef4 6ae7 	vcmpe.f32	s13, s15
 800a546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a54a:	db0e      	blt.n	800a56a <forward_relu+0x14a>
 800a54c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a550:	4293      	cmp	r3, r2
 800a552:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a556:	ed61 7a01 	vstmdb	r1!, {s15}
 800a55a:	d0bf      	beq.n	800a4dc <forward_relu+0xbc>
 800a55c:	ed72 7a01 	vldmdb	r2!, {s15}
 800a560:	eef4 6ae7 	vcmpe.f32	s13, s15
 800a564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a568:	daf0      	bge.n	800a54c <forward_relu+0x12c>
 800a56a:	4293      	cmp	r3, r2
 800a56c:	ed61 7a01 	vstmdb	r1!, {s15}
 800a570:	d1e5      	bne.n	800a53e <forward_relu+0x11e>
 800a572:	e7b3      	b.n	800a4dc <forward_relu+0xbc>
 800a574:	6893      	ldr	r3, [r2, #8]
 800a576:	6989      	ldr	r1, [r1, #24]
 800a578:	6990      	ldr	r0, [r2, #24]
 800a57a:	6889      	ldr	r1, [r1, #8]
 800a57c:	6884      	ldr	r4, [r0, #8]
 800a57e:	0a1b      	lsrs	r3, r3, #8
 800a580:	d075      	beq.n	800a66e <forward_relu+0x24e>
 800a582:	68d5      	ldr	r5, [r2, #12]
 800a584:	2201      	movs	r2, #1
 800a586:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800a58a:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 800a58e:	429d      	cmp	r5, r3
 800a590:	fb00 f202 	mul.w	r2, r0, r2
 800a594:	d1f9      	bne.n	800a58a <forward_relu+0x16a>
 800a596:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 800a59a:	3b01      	subs	r3, #1
 800a59c:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800a5a0:	4294      	cmp	r4, r2
 800a5a2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800a5a6:	d899      	bhi.n	800a4dc <forward_relu+0xbc>
 800a5a8:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800a684 <forward_relu+0x264>
 800a5ac:	3204      	adds	r2, #4
 800a5ae:	3104      	adds	r1, #4
 800a5b0:	4613      	mov	r3, r2
 800a5b2:	ed72 7a01 	vldmdb	r2!, {s15}
 800a5b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a5ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5be:	f1a3 0308 	sub.w	r3, r3, #8
 800a5c2:	bfb8      	it	lt
 800a5c4:	eef0 7a47 	vmovlt.f32	s15, s14
 800a5c8:	429c      	cmp	r4, r3
 800a5ca:	ed61 7a01 	vstmdb	r1!, {s15}
 800a5ce:	d9ef      	bls.n	800a5b0 <forward_relu+0x190>
 800a5d0:	bc70      	pop	{r4, r5, r6}
 800a5d2:	4770      	bx	lr
 800a5d4:	688c      	ldr	r4, [r1, #8]
 800a5d6:	6891      	ldr	r1, [r2, #8]
 800a5d8:	6880      	ldr	r0, [r0, #8]
 800a5da:	0a09      	lsrs	r1, r1, #8
 800a5dc:	d049      	beq.n	800a672 <forward_relu+0x252>
 800a5de:	68d5      	ldr	r5, [r2, #12]
 800a5e0:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 800a5e4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a5e8:	42aa      	cmp	r2, r5
 800a5ea:	fb01 f303 	mul.w	r3, r1, r3
 800a5ee:	d1f9      	bne.n	800a5e4 <forward_relu+0x1c4>
 800a5f0:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 800a5f4:	3a01      	subs	r2, #1
 800a5f6:	68b1      	ldr	r1, [r6, #8]
 800a5f8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a5fc:	429c      	cmp	r4, r3
 800a5fe:	ed91 7a00 	vldr	s14, [r1]
 800a602:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800a606:	f63f af69 	bhi.w	800a4dc <forward_relu+0xbc>
 800a60a:	2500      	movs	r5, #0
 800a60c:	3304      	adds	r3, #4
 800a60e:	1d02      	adds	r2, r0, #4
 800a610:	ed53 7a01 	vldr	s15, [r3, #-4]
 800a614:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a61c:	f1a3 0104 	sub.w	r1, r3, #4
 800a620:	f1a3 0308 	sub.w	r3, r3, #8
 800a624:	d406      	bmi.n	800a634 <forward_relu+0x214>
 800a626:	429c      	cmp	r4, r3
 800a628:	f842 5d04 	str.w	r5, [r2, #-4]!
 800a62c:	f63f af56 	bhi.w	800a4dc <forward_relu+0xbc>
 800a630:	460b      	mov	r3, r1
 800a632:	e7ed      	b.n	800a610 <forward_relu+0x1f0>
 800a634:	429c      	cmp	r4, r3
 800a636:	ed62 7a01 	vstmdb	r2!, {s15}
 800a63a:	f63f af4f 	bhi.w	800a4dc <forward_relu+0xbc>
 800a63e:	460b      	mov	r3, r1
 800a640:	e7e6      	b.n	800a610 <forward_relu+0x1f0>
 800a642:	68b3      	ldr	r3, [r6, #8]
 800a644:	ed93 7a02 	vldr	s14, [r3, #8]
 800a648:	edd3 6a00 	vldr	s13, [r3]
 800a64c:	ed93 6a01 	vldr	s12, [r3, #4]
 800a650:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800a654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a658:	d401      	bmi.n	800a65e <forward_relu+0x23e>
 800a65a:	4623      	mov	r3, r4
 800a65c:	e71e      	b.n	800a49c <forward_relu+0x7c>
 800a65e:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800a662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a666:	4623      	mov	r3, r4
 800a668:	f47f af63 	bne.w	800a532 <forward_relu+0x112>
 800a66c:	e741      	b.n	800a4f2 <forward_relu+0xd2>
 800a66e:	4622      	mov	r2, r4
 800a670:	e79a      	b.n	800a5a8 <forward_relu+0x188>
 800a672:	68b2      	ldr	r2, [r6, #8]
 800a674:	4623      	mov	r3, r4
 800a676:	ed92 7a00 	vldr	s14, [r2]
 800a67a:	e7c6      	b.n	800a60a <forward_relu+0x1ea>
 800a67c:	2300      	movs	r3, #0
 800a67e:	685b      	ldr	r3, [r3, #4]
 800a680:	deff      	udf	#255	; 0xff
 800a682:	bf00      	nop
 800a684:	00000000 	.word	0x00000000

0800a688 <forward_sm>:
 800a688:	6982      	ldr	r2, [r0, #24]
 800a68a:	8813      	ldrh	r3, [r2, #0]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d07c      	beq.n	800a78a <forward_sm+0x102>
 800a690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a694:	ed2d 8b04 	vpush	{d8-d9}
 800a698:	6852      	ldr	r2, [r2, #4]
 800a69a:	6854      	ldr	r4, [r2, #4]
 800a69c:	b085      	sub	sp, #20
 800a69e:	b104      	cbz	r4, 800a6a2 <forward_sm+0x1a>
 800a6a0:	6824      	ldr	r4, [r4, #0]
 800a6a2:	2b01      	cmp	r3, #1
 800a6a4:	d076      	beq.n	800a794 <forward_sm+0x10c>
 800a6a6:	6913      	ldr	r3, [r2, #16]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d076      	beq.n	800a79a <forward_sm+0x112>
 800a6ac:	681e      	ldr	r6, [r3, #0]
 800a6ae:	68a3      	ldr	r3, [r4, #8]
 800a6b0:	68e0      	ldr	r0, [r4, #12]
 800a6b2:	68f2      	ldr	r2, [r6, #12]
 800a6b4:	6845      	ldr	r5, [r0, #4]
 800a6b6:	6857      	ldr	r7, [r2, #4]
 800a6b8:	0a1b      	lsrs	r3, r3, #8
 800a6ba:	d068      	beq.n	800a78e <forward_sm+0x106>
 800a6bc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800a6c0:	2201      	movs	r2, #1
 800a6c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a6c6:	4298      	cmp	r0, r3
 800a6c8:	fb01 f202 	mul.w	r2, r1, r2
 800a6cc:	d1f9      	bne.n	800a6c2 <forward_sm+0x3a>
 800a6ce:	ea4f 0982 	mov.w	r9, r2, lsl #2
 800a6d2:	69a2      	ldr	r2, [r4, #24]
 800a6d4:	69b3      	ldr	r3, [r6, #24]
 800a6d6:	6892      	ldr	r2, [r2, #8]
 800a6d8:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800a6dc:	eb02 0309 	add.w	r3, r2, r9
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	9301      	str	r3, [sp, #4]
 800a6e4:	d24c      	bcs.n	800a780 <forward_sm+0xf8>
 800a6e6:	00bb      	lsls	r3, r7, #2
 800a6e8:	9303      	str	r3, [sp, #12]
 800a6ea:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 800a6ee:	00ab      	lsls	r3, r5, #2
 800a6f0:	2d01      	cmp	r5, #1
 800a6f2:	ed92 8a00 	vldr	s16, [r2]
 800a6f6:	9302      	str	r3, [sp, #8]
 800a6f8:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800a6fc:	463e      	mov	r6, r7
 800a6fe:	d93c      	bls.n	800a77a <forward_sm+0xf2>
 800a700:	1d13      	adds	r3, r2, #4
 800a702:	ecf3 7a01 	vldmia	r3!, {s15}
 800a706:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800a70a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a70e:	bfb8      	it	lt
 800a710:	eeb0 8a67 	vmovlt.f32	s16, s15
 800a714:	429e      	cmp	r6, r3
 800a716:	d1f4      	bne.n	800a702 <forward_sm+0x7a>
 800a718:	eddf 8a21 	vldr	s17, [pc, #132]	; 800a7a0 <forward_sm+0x118>
 800a71c:	4692      	mov	sl, r2
 800a71e:	46c3      	mov	fp, r8
 800a720:	46c1      	mov	r9, r8
 800a722:	2400      	movs	r4, #0
 800a724:	ecba 0a01 	vldmia	sl!, {s0}
 800a728:	ee30 0a48 	vsub.f32	s0, s0, s16
 800a72c:	f001 fade 	bl	800bcec <expf>
 800a730:	3401      	adds	r4, #1
 800a732:	42a5      	cmp	r5, r4
 800a734:	ee78 8a80 	vadd.f32	s17, s17, s0
 800a738:	eca9 0a01 	vstmia	r9!, {s0}
 800a73c:	d8f2      	bhi.n	800a724 <forward_sm+0x9c>
 800a73e:	eef5 8a40 	vcmp.f32	s17, #0.0
 800a742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a746:	d00b      	beq.n	800a760 <forward_sm+0xd8>
 800a748:	ee89 7a28 	vdiv.f32	s14, s18, s17
 800a74c:	2300      	movs	r3, #0
 800a74e:	3301      	adds	r3, #1
 800a750:	429d      	cmp	r5, r3
 800a752:	eddb 7a00 	vldr	s15, [fp]
 800a756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a75a:	eceb 7a01 	vstmia	fp!, {s15}
 800a75e:	d8f6      	bhi.n	800a74e <forward_sm+0xc6>
 800a760:	9b03      	ldr	r3, [sp, #12]
 800a762:	9901      	ldr	r1, [sp, #4]
 800a764:	4498      	add	r8, r3
 800a766:	9b02      	ldr	r3, [sp, #8]
 800a768:	42b9      	cmp	r1, r7
 800a76a:	463a      	mov	r2, r7
 800a76c:	441e      	add	r6, r3
 800a76e:	d907      	bls.n	800a780 <forward_sm+0xf8>
 800a770:	2d01      	cmp	r5, #1
 800a772:	ed92 8a00 	vldr	s16, [r2]
 800a776:	441f      	add	r7, r3
 800a778:	d8c2      	bhi.n	800a700 <forward_sm+0x78>
 800a77a:	2d00      	cmp	r5, #0
 800a77c:	d0f0      	beq.n	800a760 <forward_sm+0xd8>
 800a77e:	e7cb      	b.n	800a718 <forward_sm+0x90>
 800a780:	b005      	add	sp, #20
 800a782:	ecbd 8b04 	vpop	{d8-d9}
 800a786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a78a:	685b      	ldr	r3, [r3, #4]
 800a78c:	deff      	udf	#255	; 0xff
 800a78e:	f04f 0904 	mov.w	r9, #4
 800a792:	e79e      	b.n	800a6d2 <forward_sm+0x4a>
 800a794:	2300      	movs	r3, #0
 800a796:	685b      	ldr	r3, [r3, #4]
 800a798:	deff      	udf	#255	; 0xff
 800a79a:	68db      	ldr	r3, [r3, #12]
 800a79c:	deff      	udf	#255	; 0xff
 800a79e:	bf00      	nop
 800a7a0:	00000000 	.word	0x00000000

0800a7a4 <forward_lite_dense_if32of32wf32>:
 800a7a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7a8:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
 800a7ac:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 800a7b0:	4287      	cmp	r7, r0
 800a7b2:	f240 8106 	bls.w	800a9c2 <forward_lite_dense_if32of32wf32+0x21e>
 800a7b6:	f1a6 0810 	sub.w	r8, r6, #16
 800a7ba:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800a7be:	f108 0801 	add.w	r8, r8, #1
 800a7c2:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800a7c6:	ea4f 0986 	mov.w	r9, r6, lsl #2
 800a7ca:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 800a7ce:	4605      	mov	r5, r0
 800a7d0:	f006 0a0f 	and.w	sl, r6, #15
 800a7d4:	2e0f      	cmp	r6, #15
 800a7d6:	ed9f 7a84 	vldr	s14, [pc, #528]	; 800a9e8 <forward_lite_dense_if32of32wf32+0x244>
 800a7da:	f240 8101 	bls.w	800a9e0 <forward_lite_dense_if32of32wf32+0x23c>
 800a7de:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 800a7e2:	f102 0440 	add.w	r4, r2, #64	; 0x40
 800a7e6:	46b6      	mov	lr, r6
 800a7e8:	ed54 5a0f 	vldr	s11, [r4, #-60]	; 0xffffffc4
 800a7ec:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 800a7f0:	ed1c 6a10 	vldr	s12, [ip, #-64]	; 0xffffffc0
 800a7f4:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 800a7f8:	ed5c 4a0d 	vldr	s9, [ip, #-52]	; 0xffffffcc
 800a7fc:	ed1c 5a0c 	vldr	s10, [ip, #-48]	; 0xffffffd0
 800a800:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
 800a804:	ed54 3a0a 	vldr	s7, [r4, #-40]	; 0xffffffd8
 800a808:	ed1c 4a09 	vldr	s8, [ip, #-36]	; 0xffffffdc
 800a80c:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
 800a810:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 800a814:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 800a818:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 800a81c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a820:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 800a824:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a828:	f1ae 0e10 	sub.w	lr, lr, #16
 800a82c:	f1be 0f0f 	cmp.w	lr, #15
 800a830:	ed14 6a0e 	vldr	s12, [r4, #-56]	; 0xffffffc8
 800a834:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 800a838:	eee5 7a86 	vfma.f32	s15, s11, s12
 800a83c:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 800a840:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800a844:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
 800a848:	ed1c 6a1b 	vldr	s12, [ip, #-108]	; 0xffffff94
 800a84c:	eee4 7aa6 	vfma.f32	s15, s9, s13
 800a850:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
 800a854:	ed54 4a19 	vldr	s9, [r4, #-100]	; 0xffffff9c
 800a858:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a85c:	ed1c 5a18 	vldr	s10, [ip, #-96]	; 0xffffffa0
 800a860:	ed54 5a18 	vldr	s11, [r4, #-96]	; 0xffffffa0
 800a864:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a868:	ed1c 6a17 	vldr	s12, [ip, #-92]	; 0xffffffa4
 800a86c:	ed54 6a17 	vldr	s13, [r4, #-92]	; 0xffffffa4
 800a870:	eee3 7a23 	vfma.f32	s15, s6, s7
 800a874:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 800a878:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 800a87c:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a880:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 800a884:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 800a888:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a88c:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 800a890:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 800a894:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a898:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 800a89c:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 800a8a0:	eee1 7a21 	vfma.f32	s15, s2, s3
 800a8a4:	eee2 7a22 	vfma.f32	s15, s4, s5
 800a8a8:	eee3 7a23 	vfma.f32	s15, s6, s7
 800a8ac:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a8b0:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a8b4:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a8b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a8bc:	d894      	bhi.n	800a7e8 <forward_lite_dense_if32of32wf32+0x44>
 800a8be:	eb02 0e0b 	add.w	lr, r2, fp
 800a8c2:	4654      	mov	r4, sl
 800a8c4:	46c4      	mov	ip, r8
 800a8c6:	2c00      	cmp	r4, #0
 800a8c8:	d075      	beq.n	800a9b6 <forward_lite_dense_if32of32wf32+0x212>
 800a8ca:	eddc 6a00 	vldr	s13, [ip]
 800a8ce:	edde 7a00 	vldr	s15, [lr]
 800a8d2:	2c01      	cmp	r4, #1
 800a8d4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a8d8:	d06d      	beq.n	800a9b6 <forward_lite_dense_if32of32wf32+0x212>
 800a8da:	eddc 6a01 	vldr	s13, [ip, #4]
 800a8de:	edde 7a01 	vldr	s15, [lr, #4]
 800a8e2:	2c02      	cmp	r4, #2
 800a8e4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a8e8:	d065      	beq.n	800a9b6 <forward_lite_dense_if32of32wf32+0x212>
 800a8ea:	eddc 6a02 	vldr	s13, [ip, #8]
 800a8ee:	edde 7a02 	vldr	s15, [lr, #8]
 800a8f2:	2c03      	cmp	r4, #3
 800a8f4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a8f8:	d05d      	beq.n	800a9b6 <forward_lite_dense_if32of32wf32+0x212>
 800a8fa:	eddc 6a03 	vldr	s13, [ip, #12]
 800a8fe:	edde 7a03 	vldr	s15, [lr, #12]
 800a902:	2c04      	cmp	r4, #4
 800a904:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a908:	d055      	beq.n	800a9b6 <forward_lite_dense_if32of32wf32+0x212>
 800a90a:	eddc 6a04 	vldr	s13, [ip, #16]
 800a90e:	edde 7a04 	vldr	s15, [lr, #16]
 800a912:	2c05      	cmp	r4, #5
 800a914:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a918:	d04d      	beq.n	800a9b6 <forward_lite_dense_if32of32wf32+0x212>
 800a91a:	eddc 6a05 	vldr	s13, [ip, #20]
 800a91e:	edde 7a05 	vldr	s15, [lr, #20]
 800a922:	2c06      	cmp	r4, #6
 800a924:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a928:	d045      	beq.n	800a9b6 <forward_lite_dense_if32of32wf32+0x212>
 800a92a:	eddc 6a06 	vldr	s13, [ip, #24]
 800a92e:	edde 7a06 	vldr	s15, [lr, #24]
 800a932:	2c07      	cmp	r4, #7
 800a934:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a938:	d03d      	beq.n	800a9b6 <forward_lite_dense_if32of32wf32+0x212>
 800a93a:	eddc 6a07 	vldr	s13, [ip, #28]
 800a93e:	edde 7a07 	vldr	s15, [lr, #28]
 800a942:	2c08      	cmp	r4, #8
 800a944:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a948:	d035      	beq.n	800a9b6 <forward_lite_dense_if32of32wf32+0x212>
 800a94a:	eddc 6a08 	vldr	s13, [ip, #32]
 800a94e:	edde 7a08 	vldr	s15, [lr, #32]
 800a952:	2c09      	cmp	r4, #9
 800a954:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a958:	d02d      	beq.n	800a9b6 <forward_lite_dense_if32of32wf32+0x212>
 800a95a:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 800a95e:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 800a962:	2c0a      	cmp	r4, #10
 800a964:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a968:	d025      	beq.n	800a9b6 <forward_lite_dense_if32of32wf32+0x212>
 800a96a:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 800a96e:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 800a972:	2c0b      	cmp	r4, #11
 800a974:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a978:	d01d      	beq.n	800a9b6 <forward_lite_dense_if32of32wf32+0x212>
 800a97a:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 800a97e:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 800a982:	2c0c      	cmp	r4, #12
 800a984:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a988:	d015      	beq.n	800a9b6 <forward_lite_dense_if32of32wf32+0x212>
 800a98a:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 800a98e:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 800a992:	3c0d      	subs	r4, #13
 800a994:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a998:	d00d      	beq.n	800a9b6 <forward_lite_dense_if32of32wf32+0x212>
 800a99a:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 800a99e:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 800a9a2:	2c01      	cmp	r4, #1
 800a9a4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a9a8:	d005      	beq.n	800a9b6 <forward_lite_dense_if32of32wf32+0x212>
 800a9aa:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 800a9ae:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 800a9b2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a9b6:	444a      	add	r2, r9
 800a9b8:	eca5 7a01 	vstmia	r5!, {s14}
 800a9bc:	42af      	cmp	r7, r5
 800a9be:	f63f af09 	bhi.w	800a7d4 <forward_lite_dense_if32of32wf32+0x30>
 800a9c2:	b15b      	cbz	r3, 800a9dc <forward_lite_dense_if32of32wf32+0x238>
 800a9c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a9c6:	b14a      	cbz	r2, 800a9dc <forward_lite_dense_if32of32wf32+0x238>
 800a9c8:	edd0 7a00 	vldr	s15, [r0]
 800a9cc:	ecb3 7a01 	vldmia	r3!, {s14}
 800a9d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a9d4:	ece0 7a01 	vstmia	r0!, {s15}
 800a9d8:	4287      	cmp	r7, r0
 800a9da:	d1f5      	bne.n	800a9c8 <forward_lite_dense_if32of32wf32+0x224>
 800a9dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9e0:	4634      	mov	r4, r6
 800a9e2:	4696      	mov	lr, r2
 800a9e4:	468c      	mov	ip, r1
 800a9e6:	e76e      	b.n	800a8c6 <forward_lite_dense_if32of32wf32+0x122>
 800a9e8:	00000000 	.word	0x00000000

0800a9ec <st_int8_copy>:
 800a9ec:	4288      	cmp	r0, r1
 800a9ee:	d057      	beq.n	800aaa0 <st_int8_copy+0xb4>
 800a9f0:	2a00      	cmp	r2, #0
 800a9f2:	d055      	beq.n	800aaa0 <st_int8_copy+0xb4>
 800a9f4:	4288      	cmp	r0, r1
 800a9f6:	d354      	bcc.n	800aaa2 <st_int8_copy+0xb6>
 800a9f8:	078b      	lsls	r3, r1, #30
 800a9fa:	d102      	bne.n	800aa02 <st_int8_copy+0x16>
 800a9fc:	e009      	b.n	800aa12 <st_int8_copy+0x26>
 800a9fe:	2a00      	cmp	r2, #0
 800aa00:	d05c      	beq.n	800aabc <st_int8_copy+0xd0>
 800aa02:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800aa06:	f801 3b01 	strb.w	r3, [r1], #1
 800aa0a:	078b      	lsls	r3, r1, #30
 800aa0c:	f102 32ff 	add.w	r2, r2, #4294967295
 800aa10:	d1f5      	bne.n	800a9fe <st_int8_copy+0x12>
 800aa12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa16:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 800aa1a:	d069      	beq.n	800aaf0 <st_int8_copy+0x104>
 800aa1c:	ea41 0300 	orr.w	r3, r1, r0
 800aa20:	075b      	lsls	r3, r3, #29
 800aa22:	d14c      	bne.n	800aabe <st_int8_copy+0xd2>
 800aa24:	f10e 33ff 	add.w	r3, lr, #4294967295
 800aa28:	2b01      	cmp	r3, #1
 800aa2a:	d948      	bls.n	800aabe <st_int8_copy+0xd2>
 800aa2c:	f100 0310 	add.w	r3, r0, #16
 800aa30:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800aa34:	f101 0c10 	add.w	ip, r1, #16
 800aa38:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 800aa3c:	ed13 6b04 	vldr	d6, [r3, #-16]
 800aa40:	ed13 7b02 	vldr	d7, [r3, #-8]
 800aa44:	3310      	adds	r3, #16
 800aa46:	4573      	cmp	r3, lr
 800aa48:	ed0c 6b04 	vstr	d6, [ip, #-16]
 800aa4c:	ed0c 7b02 	vstr	d7, [ip, #-8]
 800aa50:	f10c 0c10 	add.w	ip, ip, #16
 800aa54:	d1f2      	bne.n	800aa3c <st_int8_copy+0x50>
 800aa56:	f3c2 0381 	ubfx	r3, r2, #2, #2
 800aa5a:	4421      	add	r1, r4
 800aa5c:	4420      	add	r0, r4
 800aa5e:	f002 0203 	and.w	r2, r2, #3
 800aa62:	b16b      	cbz	r3, 800aa80 <st_int8_copy+0x94>
 800aa64:	6804      	ldr	r4, [r0, #0]
 800aa66:	600c      	str	r4, [r1, #0]
 800aa68:	1e5c      	subs	r4, r3, #1
 800aa6a:	d005      	beq.n	800aa78 <st_int8_copy+0x8c>
 800aa6c:	6845      	ldr	r5, [r0, #4]
 800aa6e:	604d      	str	r5, [r1, #4]
 800aa70:	2c01      	cmp	r4, #1
 800aa72:	bf1c      	itt	ne
 800aa74:	6884      	ldrne	r4, [r0, #8]
 800aa76:	608c      	strne	r4, [r1, #8]
 800aa78:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800aa7c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800aa80:	b162      	cbz	r2, 800aa9c <st_int8_copy+0xb0>
 800aa82:	f990 3000 	ldrsb.w	r3, [r0]
 800aa86:	700b      	strb	r3, [r1, #0]
 800aa88:	3a01      	subs	r2, #1
 800aa8a:	d007      	beq.n	800aa9c <st_int8_copy+0xb0>
 800aa8c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800aa90:	704b      	strb	r3, [r1, #1]
 800aa92:	2a01      	cmp	r2, #1
 800aa94:	bf1c      	itt	ne
 800aa96:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 800aa9a:	708b      	strbne	r3, [r1, #2]
 800aa9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aaa0:	4770      	bx	lr
 800aaa2:	1883      	adds	r3, r0, r2
 800aaa4:	428b      	cmp	r3, r1
 800aaa6:	d9a7      	bls.n	800a9f8 <st_int8_copy+0xc>
 800aaa8:	4283      	cmp	r3, r0
 800aaaa:	440a      	add	r2, r1
 800aaac:	d9f8      	bls.n	800aaa0 <st_int8_copy+0xb4>
 800aaae:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 800aab2:	f802 1d01 	strb.w	r1, [r2, #-1]!
 800aab6:	4283      	cmp	r3, r0
 800aab8:	d1f9      	bne.n	800aaae <st_int8_copy+0xc2>
 800aaba:	4770      	bx	lr
 800aabc:	4770      	bx	lr
 800aabe:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800aac2:	460b      	mov	r3, r1
 800aac4:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 800aac8:	4684      	mov	ip, r0
 800aaca:	f8dc 7000 	ldr.w	r7, [ip]
 800aace:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800aad2:	f8dc 5008 	ldr.w	r5, [ip, #8]
 800aad6:	f8dc 800c 	ldr.w	r8, [ip, #12]
 800aada:	f8c3 800c 	str.w	r8, [r3, #12]
 800aade:	601f      	str	r7, [r3, #0]
 800aae0:	605e      	str	r6, [r3, #4]
 800aae2:	609d      	str	r5, [r3, #8]
 800aae4:	3310      	adds	r3, #16
 800aae6:	459e      	cmp	lr, r3
 800aae8:	f10c 0c10 	add.w	ip, ip, #16
 800aaec:	d1ed      	bne.n	800aaca <st_int8_copy+0xde>
 800aaee:	e7b2      	b.n	800aa56 <st_int8_copy+0x6a>
 800aaf0:	0893      	lsrs	r3, r2, #2
 800aaf2:	f002 0203 	and.w	r2, r2, #3
 800aaf6:	e7b4      	b.n	800aa62 <st_int8_copy+0x76>

0800aaf8 <ai_array_to_buffer_fmt>:
 800aaf8:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800aafc:	2b02      	cmp	r3, #2
 800aafe:	d050      	beq.n	800aba2 <ai_array_to_buffer_fmt+0xaa>
 800ab00:	4b2a      	ldr	r3, [pc, #168]	; (800abac <ai_array_to_buffer_fmt+0xb4>)
 800ab02:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 800ab06:	429a      	cmp	r2, r3
 800ab08:	d00b      	beq.n	800ab22 <ai_array_to_buffer_fmt+0x2a>
 800ab0a:	dc1c      	bgt.n	800ab46 <ai_array_to_buffer_fmt+0x4e>
 800ab0c:	4b28      	ldr	r3, [pc, #160]	; (800abb0 <ai_array_to_buffer_fmt+0xb8>)
 800ab0e:	429a      	cmp	r2, r3
 800ab10:	d007      	beq.n	800ab22 <ai_array_to_buffer_fmt+0x2a>
 800ab12:	dd0b      	ble.n	800ab2c <ai_array_to_buffer_fmt+0x34>
 800ab14:	4b27      	ldr	r3, [pc, #156]	; (800abb4 <ai_array_to_buffer_fmt+0xbc>)
 800ab16:	429a      	cmp	r2, r3
 800ab18:	d003      	beq.n	800ab22 <ai_array_to_buffer_fmt+0x2a>
 800ab1a:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800ab1e:	429a      	cmp	r2, r3
 800ab20:	d131      	bne.n	800ab86 <ai_array_to_buffer_fmt+0x8e>
 800ab22:	4613      	mov	r3, r2
 800ab24:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800ab28:	4318      	orrs	r0, r3
 800ab2a:	4770      	bx	lr
 800ab2c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800ab30:	429a      	cmp	r2, r3
 800ab32:	d0f6      	beq.n	800ab22 <ai_array_to_buffer_fmt+0x2a>
 800ab34:	dd2c      	ble.n	800ab90 <ai_array_to_buffer_fmt+0x98>
 800ab36:	4b20      	ldr	r3, [pc, #128]	; (800abb8 <ai_array_to_buffer_fmt+0xc0>)
 800ab38:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	bf18      	it	ne
 800ab40:	2340      	movne	r3, #64	; 0x40
 800ab42:	4318      	orrs	r0, r3
 800ab44:	4770      	bx	lr
 800ab46:	4b1d      	ldr	r3, [pc, #116]	; (800abbc <ai_array_to_buffer_fmt+0xc4>)
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	d0ea      	beq.n	800ab22 <ai_array_to_buffer_fmt+0x2a>
 800ab4c:	dd0e      	ble.n	800ab6c <ai_array_to_buffer_fmt+0x74>
 800ab4e:	4b1c      	ldr	r3, [pc, #112]	; (800abc0 <ai_array_to_buffer_fmt+0xc8>)
 800ab50:	429a      	cmp	r2, r3
 800ab52:	d0e6      	beq.n	800ab22 <ai_array_to_buffer_fmt+0x2a>
 800ab54:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d0e2      	beq.n	800ab22 <ai_array_to_buffer_fmt+0x2a>
 800ab5c:	4b19      	ldr	r3, [pc, #100]	; (800abc4 <ai_array_to_buffer_fmt+0xcc>)
 800ab5e:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800ab62:	429a      	cmp	r2, r3
 800ab64:	bf18      	it	ne
 800ab66:	2340      	movne	r3, #64	; 0x40
 800ab68:	4318      	orrs	r0, r3
 800ab6a:	4770      	bx	lr
 800ab6c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800ab70:	429a      	cmp	r2, r3
 800ab72:	d0d6      	beq.n	800ab22 <ai_array_to_buffer_fmt+0x2a>
 800ab74:	3307      	adds	r3, #7
 800ab76:	429a      	cmp	r2, r3
 800ab78:	d0d3      	beq.n	800ab22 <ai_array_to_buffer_fmt+0x2a>
 800ab7a:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	bf18      	it	ne
 800ab82:	2340      	movne	r3, #64	; 0x40
 800ab84:	e7ce      	b.n	800ab24 <ai_array_to_buffer_fmt+0x2c>
 800ab86:	4b10      	ldr	r3, [pc, #64]	; (800abc8 <ai_array_to_buffer_fmt+0xd0>)
 800ab88:	429a      	cmp	r2, r3
 800ab8a:	bf18      	it	ne
 800ab8c:	2340      	movne	r3, #64	; 0x40
 800ab8e:	e7c9      	b.n	800ab24 <ai_array_to_buffer_fmt+0x2c>
 800ab90:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800ab94:	429a      	cmp	r2, r3
 800ab96:	d0c4      	beq.n	800ab22 <ai_array_to_buffer_fmt+0x2a>
 800ab98:	3380      	adds	r3, #128	; 0x80
 800ab9a:	429a      	cmp	r2, r3
 800ab9c:	bf18      	it	ne
 800ab9e:	2340      	movne	r3, #64	; 0x40
 800aba0:	e7c0      	b.n	800ab24 <ai_array_to_buffer_fmt+0x2c>
 800aba2:	4b0a      	ldr	r3, [pc, #40]	; (800abcc <ai_array_to_buffer_fmt+0xd4>)
 800aba4:	4003      	ands	r3, r0
 800aba6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800abaa:	e7bb      	b.n	800ab24 <ai_array_to_buffer_fmt+0x2c>
 800abac:	00840040 	.word	0x00840040
 800abb0:	00040840 	.word	0x00040840
 800abb4:	00041040 	.word	0x00041040
 800abb8:	00040447 	.word	0x00040447
 800abbc:	00840840 	.word	0x00840840
 800abc0:	00841040 	.word	0x00841040
 800abc4:	0084084f 	.word	0x0084084f
 800abc8:	0004084f 	.word	0x0004084f
 800abcc:	00803fff 	.word	0x00803fff

0800abd0 <ai_array_get_byte_size>:
 800abd0:	b319      	cbz	r1, 800ac1a <ai_array_get_byte_size+0x4a>
 800abd2:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800abd6:	fb03 f101 	mul.w	r1, r3, r1
 800abda:	3107      	adds	r1, #7
 800abdc:	f3c0 4243 	ubfx	r2, r0, #17, #4
 800abe0:	f021 0307 	bic.w	r3, r1, #7
 800abe4:	2a04      	cmp	r2, #4
 800abe6:	f3c0 5141 	ubfx	r1, r0, #21, #2
 800abea:	fa23 f101 	lsr.w	r1, r3, r1
 800abee:	ea4f 10e0 	mov.w	r0, r0, asr #7
 800abf2:	d00b      	beq.n	800ac0c <ai_array_get_byte_size+0x3c>
 800abf4:	2a08      	cmp	r2, #8
 800abf6:	d002      	beq.n	800abfe <ai_array_get_byte_size+0x2e>
 800abf8:	3107      	adds	r1, #7
 800abfa:	08c8      	lsrs	r0, r1, #3
 800abfc:	4770      	bx	lr
 800abfe:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800ac02:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800ac06:	3107      	adds	r1, #7
 800ac08:	08c8      	lsrs	r0, r1, #3
 800ac0a:	4770      	bx	lr
 800ac0c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800ac10:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 800ac14:	3107      	adds	r1, #7
 800ac16:	08c8      	lsrs	r0, r1, #3
 800ac18:	4770      	bx	lr
 800ac1a:	4608      	mov	r0, r1
 800ac1c:	4770      	bx	lr
 800ac1e:	bf00      	nop

0800ac20 <ai_array_get_data_byte_size>:
 800ac20:	b169      	cbz	r1, 800ac3e <ai_array_get_data_byte_size+0x1e>
 800ac22:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 800ac26:	fb02 f101 	mul.w	r1, r2, r1
 800ac2a:	1dcb      	adds	r3, r1, #7
 800ac2c:	f023 0307 	bic.w	r3, r3, #7
 800ac30:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800ac34:	fa23 f000 	lsr.w	r0, r3, r0
 800ac38:	3007      	adds	r0, #7
 800ac3a:	08c0      	lsrs	r0, r0, #3
 800ac3c:	4770      	bx	lr
 800ac3e:	4608      	mov	r0, r1
 800ac40:	4770      	bx	lr
 800ac42:	bf00      	nop

0800ac44 <ai_version_get>:
 800ac44:	0212      	lsls	r2, r2, #8
 800ac46:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800ac4a:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800ac4e:	4770      	bx	lr

0800ac50 <get_tensor_byte_size>:
 800ac50:	b410      	push	{r4}
 800ac52:	6983      	ldr	r3, [r0, #24]
 800ac54:	68c4      	ldr	r4, [r0, #12]
 800ac56:	6941      	ldr	r1, [r0, #20]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	68e0      	ldr	r0, [r4, #12]
 800ac5c:	4a07      	ldr	r2, [pc, #28]	; (800ac7c <get_tensor_byte_size+0x2c>)
 800ac5e:	68c9      	ldr	r1, [r1, #12]
 800ac60:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac64:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800ac68:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ac6c:	fb01 f000 	mul.w	r0, r1, r0
 800ac70:	4293      	cmp	r3, r2
 800ac72:	bf04      	itt	eq
 800ac74:	3007      	addeq	r0, #7
 800ac76:	08c0      	lsreq	r0, r0, #3
 800ac78:	4770      	bx	lr
 800ac7a:	bf00      	nop
 800ac7c:	000400c0 	.word	0x000400c0

0800ac80 <__errno>:
 800ac80:	4b01      	ldr	r3, [pc, #4]	; (800ac88 <__errno+0x8>)
 800ac82:	6818      	ldr	r0, [r3, #0]
 800ac84:	4770      	bx	lr
 800ac86:	bf00      	nop
 800ac88:	20000920 	.word	0x20000920

0800ac8c <__libc_init_array>:
 800ac8c:	b570      	push	{r4, r5, r6, lr}
 800ac8e:	4d0d      	ldr	r5, [pc, #52]	; (800acc4 <__libc_init_array+0x38>)
 800ac90:	4c0d      	ldr	r4, [pc, #52]	; (800acc8 <__libc_init_array+0x3c>)
 800ac92:	1b64      	subs	r4, r4, r5
 800ac94:	10a4      	asrs	r4, r4, #2
 800ac96:	2600      	movs	r6, #0
 800ac98:	42a6      	cmp	r6, r4
 800ac9a:	d109      	bne.n	800acb0 <__libc_init_array+0x24>
 800ac9c:	4d0b      	ldr	r5, [pc, #44]	; (800accc <__libc_init_array+0x40>)
 800ac9e:	4c0c      	ldr	r4, [pc, #48]	; (800acd0 <__libc_init_array+0x44>)
 800aca0:	f001 f988 	bl	800bfb4 <_init>
 800aca4:	1b64      	subs	r4, r4, r5
 800aca6:	10a4      	asrs	r4, r4, #2
 800aca8:	2600      	movs	r6, #0
 800acaa:	42a6      	cmp	r6, r4
 800acac:	d105      	bne.n	800acba <__libc_init_array+0x2e>
 800acae:	bd70      	pop	{r4, r5, r6, pc}
 800acb0:	f855 3b04 	ldr.w	r3, [r5], #4
 800acb4:	4798      	blx	r3
 800acb6:	3601      	adds	r6, #1
 800acb8:	e7ee      	b.n	800ac98 <__libc_init_array+0xc>
 800acba:	f855 3b04 	ldr.w	r3, [r5], #4
 800acbe:	4798      	blx	r3
 800acc0:	3601      	adds	r6, #1
 800acc2:	e7f2      	b.n	800acaa <__libc_init_array+0x1e>
 800acc4:	08023318 	.word	0x08023318
 800acc8:	08023318 	.word	0x08023318
 800accc:	08023318 	.word	0x08023318
 800acd0:	0802331c 	.word	0x0802331c

0800acd4 <memset>:
 800acd4:	4402      	add	r2, r0
 800acd6:	4603      	mov	r3, r0
 800acd8:	4293      	cmp	r3, r2
 800acda:	d100      	bne.n	800acde <memset+0xa>
 800acdc:	4770      	bx	lr
 800acde:	f803 1b01 	strb.w	r1, [r3], #1
 800ace2:	e7f9      	b.n	800acd8 <memset+0x4>

0800ace4 <_free_r>:
 800ace4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ace6:	2900      	cmp	r1, #0
 800ace8:	d044      	beq.n	800ad74 <_free_r+0x90>
 800acea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acee:	9001      	str	r0, [sp, #4]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	f1a1 0404 	sub.w	r4, r1, #4
 800acf6:	bfb8      	it	lt
 800acf8:	18e4      	addlt	r4, r4, r3
 800acfa:	f000 fc51 	bl	800b5a0 <__malloc_lock>
 800acfe:	4a1e      	ldr	r2, [pc, #120]	; (800ad78 <_free_r+0x94>)
 800ad00:	9801      	ldr	r0, [sp, #4]
 800ad02:	6813      	ldr	r3, [r2, #0]
 800ad04:	b933      	cbnz	r3, 800ad14 <_free_r+0x30>
 800ad06:	6063      	str	r3, [r4, #4]
 800ad08:	6014      	str	r4, [r2, #0]
 800ad0a:	b003      	add	sp, #12
 800ad0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad10:	f000 bc4c 	b.w	800b5ac <__malloc_unlock>
 800ad14:	42a3      	cmp	r3, r4
 800ad16:	d908      	bls.n	800ad2a <_free_r+0x46>
 800ad18:	6825      	ldr	r5, [r4, #0]
 800ad1a:	1961      	adds	r1, r4, r5
 800ad1c:	428b      	cmp	r3, r1
 800ad1e:	bf01      	itttt	eq
 800ad20:	6819      	ldreq	r1, [r3, #0]
 800ad22:	685b      	ldreq	r3, [r3, #4]
 800ad24:	1949      	addeq	r1, r1, r5
 800ad26:	6021      	streq	r1, [r4, #0]
 800ad28:	e7ed      	b.n	800ad06 <_free_r+0x22>
 800ad2a:	461a      	mov	r2, r3
 800ad2c:	685b      	ldr	r3, [r3, #4]
 800ad2e:	b10b      	cbz	r3, 800ad34 <_free_r+0x50>
 800ad30:	42a3      	cmp	r3, r4
 800ad32:	d9fa      	bls.n	800ad2a <_free_r+0x46>
 800ad34:	6811      	ldr	r1, [r2, #0]
 800ad36:	1855      	adds	r5, r2, r1
 800ad38:	42a5      	cmp	r5, r4
 800ad3a:	d10b      	bne.n	800ad54 <_free_r+0x70>
 800ad3c:	6824      	ldr	r4, [r4, #0]
 800ad3e:	4421      	add	r1, r4
 800ad40:	1854      	adds	r4, r2, r1
 800ad42:	42a3      	cmp	r3, r4
 800ad44:	6011      	str	r1, [r2, #0]
 800ad46:	d1e0      	bne.n	800ad0a <_free_r+0x26>
 800ad48:	681c      	ldr	r4, [r3, #0]
 800ad4a:	685b      	ldr	r3, [r3, #4]
 800ad4c:	6053      	str	r3, [r2, #4]
 800ad4e:	4421      	add	r1, r4
 800ad50:	6011      	str	r1, [r2, #0]
 800ad52:	e7da      	b.n	800ad0a <_free_r+0x26>
 800ad54:	d902      	bls.n	800ad5c <_free_r+0x78>
 800ad56:	230c      	movs	r3, #12
 800ad58:	6003      	str	r3, [r0, #0]
 800ad5a:	e7d6      	b.n	800ad0a <_free_r+0x26>
 800ad5c:	6825      	ldr	r5, [r4, #0]
 800ad5e:	1961      	adds	r1, r4, r5
 800ad60:	428b      	cmp	r3, r1
 800ad62:	bf04      	itt	eq
 800ad64:	6819      	ldreq	r1, [r3, #0]
 800ad66:	685b      	ldreq	r3, [r3, #4]
 800ad68:	6063      	str	r3, [r4, #4]
 800ad6a:	bf04      	itt	eq
 800ad6c:	1949      	addeq	r1, r1, r5
 800ad6e:	6021      	streq	r1, [r4, #0]
 800ad70:	6054      	str	r4, [r2, #4]
 800ad72:	e7ca      	b.n	800ad0a <_free_r+0x26>
 800ad74:	b003      	add	sp, #12
 800ad76:	bd30      	pop	{r4, r5, pc}
 800ad78:	2000176c 	.word	0x2000176c

0800ad7c <sbrk_aligned>:
 800ad7c:	b570      	push	{r4, r5, r6, lr}
 800ad7e:	4e0e      	ldr	r6, [pc, #56]	; (800adb8 <sbrk_aligned+0x3c>)
 800ad80:	460c      	mov	r4, r1
 800ad82:	6831      	ldr	r1, [r6, #0]
 800ad84:	4605      	mov	r5, r0
 800ad86:	b911      	cbnz	r1, 800ad8e <sbrk_aligned+0x12>
 800ad88:	f000 f91a 	bl	800afc0 <_sbrk_r>
 800ad8c:	6030      	str	r0, [r6, #0]
 800ad8e:	4621      	mov	r1, r4
 800ad90:	4628      	mov	r0, r5
 800ad92:	f000 f915 	bl	800afc0 <_sbrk_r>
 800ad96:	1c43      	adds	r3, r0, #1
 800ad98:	d00a      	beq.n	800adb0 <sbrk_aligned+0x34>
 800ad9a:	1cc4      	adds	r4, r0, #3
 800ad9c:	f024 0403 	bic.w	r4, r4, #3
 800ada0:	42a0      	cmp	r0, r4
 800ada2:	d007      	beq.n	800adb4 <sbrk_aligned+0x38>
 800ada4:	1a21      	subs	r1, r4, r0
 800ada6:	4628      	mov	r0, r5
 800ada8:	f000 f90a 	bl	800afc0 <_sbrk_r>
 800adac:	3001      	adds	r0, #1
 800adae:	d101      	bne.n	800adb4 <sbrk_aligned+0x38>
 800adb0:	f04f 34ff 	mov.w	r4, #4294967295
 800adb4:	4620      	mov	r0, r4
 800adb6:	bd70      	pop	{r4, r5, r6, pc}
 800adb8:	20001770 	.word	0x20001770

0800adbc <_malloc_r>:
 800adbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adc0:	1ccd      	adds	r5, r1, #3
 800adc2:	f025 0503 	bic.w	r5, r5, #3
 800adc6:	3508      	adds	r5, #8
 800adc8:	2d0c      	cmp	r5, #12
 800adca:	bf38      	it	cc
 800adcc:	250c      	movcc	r5, #12
 800adce:	2d00      	cmp	r5, #0
 800add0:	4607      	mov	r7, r0
 800add2:	db01      	blt.n	800add8 <_malloc_r+0x1c>
 800add4:	42a9      	cmp	r1, r5
 800add6:	d905      	bls.n	800ade4 <_malloc_r+0x28>
 800add8:	230c      	movs	r3, #12
 800adda:	603b      	str	r3, [r7, #0]
 800addc:	2600      	movs	r6, #0
 800adde:	4630      	mov	r0, r6
 800ade0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ade4:	4e2e      	ldr	r6, [pc, #184]	; (800aea0 <_malloc_r+0xe4>)
 800ade6:	f000 fbdb 	bl	800b5a0 <__malloc_lock>
 800adea:	6833      	ldr	r3, [r6, #0]
 800adec:	461c      	mov	r4, r3
 800adee:	bb34      	cbnz	r4, 800ae3e <_malloc_r+0x82>
 800adf0:	4629      	mov	r1, r5
 800adf2:	4638      	mov	r0, r7
 800adf4:	f7ff ffc2 	bl	800ad7c <sbrk_aligned>
 800adf8:	1c43      	adds	r3, r0, #1
 800adfa:	4604      	mov	r4, r0
 800adfc:	d14d      	bne.n	800ae9a <_malloc_r+0xde>
 800adfe:	6834      	ldr	r4, [r6, #0]
 800ae00:	4626      	mov	r6, r4
 800ae02:	2e00      	cmp	r6, #0
 800ae04:	d140      	bne.n	800ae88 <_malloc_r+0xcc>
 800ae06:	6823      	ldr	r3, [r4, #0]
 800ae08:	4631      	mov	r1, r6
 800ae0a:	4638      	mov	r0, r7
 800ae0c:	eb04 0803 	add.w	r8, r4, r3
 800ae10:	f000 f8d6 	bl	800afc0 <_sbrk_r>
 800ae14:	4580      	cmp	r8, r0
 800ae16:	d13a      	bne.n	800ae8e <_malloc_r+0xd2>
 800ae18:	6821      	ldr	r1, [r4, #0]
 800ae1a:	3503      	adds	r5, #3
 800ae1c:	1a6d      	subs	r5, r5, r1
 800ae1e:	f025 0503 	bic.w	r5, r5, #3
 800ae22:	3508      	adds	r5, #8
 800ae24:	2d0c      	cmp	r5, #12
 800ae26:	bf38      	it	cc
 800ae28:	250c      	movcc	r5, #12
 800ae2a:	4629      	mov	r1, r5
 800ae2c:	4638      	mov	r0, r7
 800ae2e:	f7ff ffa5 	bl	800ad7c <sbrk_aligned>
 800ae32:	3001      	adds	r0, #1
 800ae34:	d02b      	beq.n	800ae8e <_malloc_r+0xd2>
 800ae36:	6823      	ldr	r3, [r4, #0]
 800ae38:	442b      	add	r3, r5
 800ae3a:	6023      	str	r3, [r4, #0]
 800ae3c:	e00e      	b.n	800ae5c <_malloc_r+0xa0>
 800ae3e:	6822      	ldr	r2, [r4, #0]
 800ae40:	1b52      	subs	r2, r2, r5
 800ae42:	d41e      	bmi.n	800ae82 <_malloc_r+0xc6>
 800ae44:	2a0b      	cmp	r2, #11
 800ae46:	d916      	bls.n	800ae76 <_malloc_r+0xba>
 800ae48:	1961      	adds	r1, r4, r5
 800ae4a:	42a3      	cmp	r3, r4
 800ae4c:	6025      	str	r5, [r4, #0]
 800ae4e:	bf18      	it	ne
 800ae50:	6059      	strne	r1, [r3, #4]
 800ae52:	6863      	ldr	r3, [r4, #4]
 800ae54:	bf08      	it	eq
 800ae56:	6031      	streq	r1, [r6, #0]
 800ae58:	5162      	str	r2, [r4, r5]
 800ae5a:	604b      	str	r3, [r1, #4]
 800ae5c:	4638      	mov	r0, r7
 800ae5e:	f104 060b 	add.w	r6, r4, #11
 800ae62:	f000 fba3 	bl	800b5ac <__malloc_unlock>
 800ae66:	f026 0607 	bic.w	r6, r6, #7
 800ae6a:	1d23      	adds	r3, r4, #4
 800ae6c:	1af2      	subs	r2, r6, r3
 800ae6e:	d0b6      	beq.n	800adde <_malloc_r+0x22>
 800ae70:	1b9b      	subs	r3, r3, r6
 800ae72:	50a3      	str	r3, [r4, r2]
 800ae74:	e7b3      	b.n	800adde <_malloc_r+0x22>
 800ae76:	6862      	ldr	r2, [r4, #4]
 800ae78:	42a3      	cmp	r3, r4
 800ae7a:	bf0c      	ite	eq
 800ae7c:	6032      	streq	r2, [r6, #0]
 800ae7e:	605a      	strne	r2, [r3, #4]
 800ae80:	e7ec      	b.n	800ae5c <_malloc_r+0xa0>
 800ae82:	4623      	mov	r3, r4
 800ae84:	6864      	ldr	r4, [r4, #4]
 800ae86:	e7b2      	b.n	800adee <_malloc_r+0x32>
 800ae88:	4634      	mov	r4, r6
 800ae8a:	6876      	ldr	r6, [r6, #4]
 800ae8c:	e7b9      	b.n	800ae02 <_malloc_r+0x46>
 800ae8e:	230c      	movs	r3, #12
 800ae90:	603b      	str	r3, [r7, #0]
 800ae92:	4638      	mov	r0, r7
 800ae94:	f000 fb8a 	bl	800b5ac <__malloc_unlock>
 800ae98:	e7a1      	b.n	800adde <_malloc_r+0x22>
 800ae9a:	6025      	str	r5, [r4, #0]
 800ae9c:	e7de      	b.n	800ae5c <_malloc_r+0xa0>
 800ae9e:	bf00      	nop
 800aea0:	2000176c 	.word	0x2000176c

0800aea4 <iprintf>:
 800aea4:	b40f      	push	{r0, r1, r2, r3}
 800aea6:	4b0a      	ldr	r3, [pc, #40]	; (800aed0 <iprintf+0x2c>)
 800aea8:	b513      	push	{r0, r1, r4, lr}
 800aeaa:	681c      	ldr	r4, [r3, #0]
 800aeac:	b124      	cbz	r4, 800aeb8 <iprintf+0x14>
 800aeae:	69a3      	ldr	r3, [r4, #24]
 800aeb0:	b913      	cbnz	r3, 800aeb8 <iprintf+0x14>
 800aeb2:	4620      	mov	r0, r4
 800aeb4:	f000 fa6e 	bl	800b394 <__sinit>
 800aeb8:	ab05      	add	r3, sp, #20
 800aeba:	9a04      	ldr	r2, [sp, #16]
 800aebc:	68a1      	ldr	r1, [r4, #8]
 800aebe:	9301      	str	r3, [sp, #4]
 800aec0:	4620      	mov	r0, r4
 800aec2:	f000 fba3 	bl	800b60c <_vfiprintf_r>
 800aec6:	b002      	add	sp, #8
 800aec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aecc:	b004      	add	sp, #16
 800aece:	4770      	bx	lr
 800aed0:	20000920 	.word	0x20000920

0800aed4 <_puts_r>:
 800aed4:	b570      	push	{r4, r5, r6, lr}
 800aed6:	460e      	mov	r6, r1
 800aed8:	4605      	mov	r5, r0
 800aeda:	b118      	cbz	r0, 800aee4 <_puts_r+0x10>
 800aedc:	6983      	ldr	r3, [r0, #24]
 800aede:	b90b      	cbnz	r3, 800aee4 <_puts_r+0x10>
 800aee0:	f000 fa58 	bl	800b394 <__sinit>
 800aee4:	69ab      	ldr	r3, [r5, #24]
 800aee6:	68ac      	ldr	r4, [r5, #8]
 800aee8:	b913      	cbnz	r3, 800aef0 <_puts_r+0x1c>
 800aeea:	4628      	mov	r0, r5
 800aeec:	f000 fa52 	bl	800b394 <__sinit>
 800aef0:	4b2c      	ldr	r3, [pc, #176]	; (800afa4 <_puts_r+0xd0>)
 800aef2:	429c      	cmp	r4, r3
 800aef4:	d120      	bne.n	800af38 <_puts_r+0x64>
 800aef6:	686c      	ldr	r4, [r5, #4]
 800aef8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aefa:	07db      	lsls	r3, r3, #31
 800aefc:	d405      	bmi.n	800af0a <_puts_r+0x36>
 800aefe:	89a3      	ldrh	r3, [r4, #12]
 800af00:	0598      	lsls	r0, r3, #22
 800af02:	d402      	bmi.n	800af0a <_puts_r+0x36>
 800af04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af06:	f000 fae3 	bl	800b4d0 <__retarget_lock_acquire_recursive>
 800af0a:	89a3      	ldrh	r3, [r4, #12]
 800af0c:	0719      	lsls	r1, r3, #28
 800af0e:	d51d      	bpl.n	800af4c <_puts_r+0x78>
 800af10:	6923      	ldr	r3, [r4, #16]
 800af12:	b1db      	cbz	r3, 800af4c <_puts_r+0x78>
 800af14:	3e01      	subs	r6, #1
 800af16:	68a3      	ldr	r3, [r4, #8]
 800af18:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800af1c:	3b01      	subs	r3, #1
 800af1e:	60a3      	str	r3, [r4, #8]
 800af20:	bb39      	cbnz	r1, 800af72 <_puts_r+0x9e>
 800af22:	2b00      	cmp	r3, #0
 800af24:	da38      	bge.n	800af98 <_puts_r+0xc4>
 800af26:	4622      	mov	r2, r4
 800af28:	210a      	movs	r1, #10
 800af2a:	4628      	mov	r0, r5
 800af2c:	f000 f858 	bl	800afe0 <__swbuf_r>
 800af30:	3001      	adds	r0, #1
 800af32:	d011      	beq.n	800af58 <_puts_r+0x84>
 800af34:	250a      	movs	r5, #10
 800af36:	e011      	b.n	800af5c <_puts_r+0x88>
 800af38:	4b1b      	ldr	r3, [pc, #108]	; (800afa8 <_puts_r+0xd4>)
 800af3a:	429c      	cmp	r4, r3
 800af3c:	d101      	bne.n	800af42 <_puts_r+0x6e>
 800af3e:	68ac      	ldr	r4, [r5, #8]
 800af40:	e7da      	b.n	800aef8 <_puts_r+0x24>
 800af42:	4b1a      	ldr	r3, [pc, #104]	; (800afac <_puts_r+0xd8>)
 800af44:	429c      	cmp	r4, r3
 800af46:	bf08      	it	eq
 800af48:	68ec      	ldreq	r4, [r5, #12]
 800af4a:	e7d5      	b.n	800aef8 <_puts_r+0x24>
 800af4c:	4621      	mov	r1, r4
 800af4e:	4628      	mov	r0, r5
 800af50:	f000 f898 	bl	800b084 <__swsetup_r>
 800af54:	2800      	cmp	r0, #0
 800af56:	d0dd      	beq.n	800af14 <_puts_r+0x40>
 800af58:	f04f 35ff 	mov.w	r5, #4294967295
 800af5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af5e:	07da      	lsls	r2, r3, #31
 800af60:	d405      	bmi.n	800af6e <_puts_r+0x9a>
 800af62:	89a3      	ldrh	r3, [r4, #12]
 800af64:	059b      	lsls	r3, r3, #22
 800af66:	d402      	bmi.n	800af6e <_puts_r+0x9a>
 800af68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af6a:	f000 fab2 	bl	800b4d2 <__retarget_lock_release_recursive>
 800af6e:	4628      	mov	r0, r5
 800af70:	bd70      	pop	{r4, r5, r6, pc}
 800af72:	2b00      	cmp	r3, #0
 800af74:	da04      	bge.n	800af80 <_puts_r+0xac>
 800af76:	69a2      	ldr	r2, [r4, #24]
 800af78:	429a      	cmp	r2, r3
 800af7a:	dc06      	bgt.n	800af8a <_puts_r+0xb6>
 800af7c:	290a      	cmp	r1, #10
 800af7e:	d004      	beq.n	800af8a <_puts_r+0xb6>
 800af80:	6823      	ldr	r3, [r4, #0]
 800af82:	1c5a      	adds	r2, r3, #1
 800af84:	6022      	str	r2, [r4, #0]
 800af86:	7019      	strb	r1, [r3, #0]
 800af88:	e7c5      	b.n	800af16 <_puts_r+0x42>
 800af8a:	4622      	mov	r2, r4
 800af8c:	4628      	mov	r0, r5
 800af8e:	f000 f827 	bl	800afe0 <__swbuf_r>
 800af92:	3001      	adds	r0, #1
 800af94:	d1bf      	bne.n	800af16 <_puts_r+0x42>
 800af96:	e7df      	b.n	800af58 <_puts_r+0x84>
 800af98:	6823      	ldr	r3, [r4, #0]
 800af9a:	250a      	movs	r5, #10
 800af9c:	1c5a      	adds	r2, r3, #1
 800af9e:	6022      	str	r2, [r4, #0]
 800afa0:	701d      	strb	r5, [r3, #0]
 800afa2:	e7db      	b.n	800af5c <_puts_r+0x88>
 800afa4:	08023284 	.word	0x08023284
 800afa8:	080232a4 	.word	0x080232a4
 800afac:	08023264 	.word	0x08023264

0800afb0 <puts>:
 800afb0:	4b02      	ldr	r3, [pc, #8]	; (800afbc <puts+0xc>)
 800afb2:	4601      	mov	r1, r0
 800afb4:	6818      	ldr	r0, [r3, #0]
 800afb6:	f7ff bf8d 	b.w	800aed4 <_puts_r>
 800afba:	bf00      	nop
 800afbc:	20000920 	.word	0x20000920

0800afc0 <_sbrk_r>:
 800afc0:	b538      	push	{r3, r4, r5, lr}
 800afc2:	4d06      	ldr	r5, [pc, #24]	; (800afdc <_sbrk_r+0x1c>)
 800afc4:	2300      	movs	r3, #0
 800afc6:	4604      	mov	r4, r0
 800afc8:	4608      	mov	r0, r1
 800afca:	602b      	str	r3, [r5, #0]
 800afcc:	f7f6 fc04 	bl	80017d8 <_sbrk>
 800afd0:	1c43      	adds	r3, r0, #1
 800afd2:	d102      	bne.n	800afda <_sbrk_r+0x1a>
 800afd4:	682b      	ldr	r3, [r5, #0]
 800afd6:	b103      	cbz	r3, 800afda <_sbrk_r+0x1a>
 800afd8:	6023      	str	r3, [r4, #0]
 800afda:	bd38      	pop	{r3, r4, r5, pc}
 800afdc:	20001778 	.word	0x20001778

0800afe0 <__swbuf_r>:
 800afe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afe2:	460e      	mov	r6, r1
 800afe4:	4614      	mov	r4, r2
 800afe6:	4605      	mov	r5, r0
 800afe8:	b118      	cbz	r0, 800aff2 <__swbuf_r+0x12>
 800afea:	6983      	ldr	r3, [r0, #24]
 800afec:	b90b      	cbnz	r3, 800aff2 <__swbuf_r+0x12>
 800afee:	f000 f9d1 	bl	800b394 <__sinit>
 800aff2:	4b21      	ldr	r3, [pc, #132]	; (800b078 <__swbuf_r+0x98>)
 800aff4:	429c      	cmp	r4, r3
 800aff6:	d12b      	bne.n	800b050 <__swbuf_r+0x70>
 800aff8:	686c      	ldr	r4, [r5, #4]
 800affa:	69a3      	ldr	r3, [r4, #24]
 800affc:	60a3      	str	r3, [r4, #8]
 800affe:	89a3      	ldrh	r3, [r4, #12]
 800b000:	071a      	lsls	r2, r3, #28
 800b002:	d52f      	bpl.n	800b064 <__swbuf_r+0x84>
 800b004:	6923      	ldr	r3, [r4, #16]
 800b006:	b36b      	cbz	r3, 800b064 <__swbuf_r+0x84>
 800b008:	6923      	ldr	r3, [r4, #16]
 800b00a:	6820      	ldr	r0, [r4, #0]
 800b00c:	1ac0      	subs	r0, r0, r3
 800b00e:	6963      	ldr	r3, [r4, #20]
 800b010:	b2f6      	uxtb	r6, r6
 800b012:	4283      	cmp	r3, r0
 800b014:	4637      	mov	r7, r6
 800b016:	dc04      	bgt.n	800b022 <__swbuf_r+0x42>
 800b018:	4621      	mov	r1, r4
 800b01a:	4628      	mov	r0, r5
 800b01c:	f000 f926 	bl	800b26c <_fflush_r>
 800b020:	bb30      	cbnz	r0, 800b070 <__swbuf_r+0x90>
 800b022:	68a3      	ldr	r3, [r4, #8]
 800b024:	3b01      	subs	r3, #1
 800b026:	60a3      	str	r3, [r4, #8]
 800b028:	6823      	ldr	r3, [r4, #0]
 800b02a:	1c5a      	adds	r2, r3, #1
 800b02c:	6022      	str	r2, [r4, #0]
 800b02e:	701e      	strb	r6, [r3, #0]
 800b030:	6963      	ldr	r3, [r4, #20]
 800b032:	3001      	adds	r0, #1
 800b034:	4283      	cmp	r3, r0
 800b036:	d004      	beq.n	800b042 <__swbuf_r+0x62>
 800b038:	89a3      	ldrh	r3, [r4, #12]
 800b03a:	07db      	lsls	r3, r3, #31
 800b03c:	d506      	bpl.n	800b04c <__swbuf_r+0x6c>
 800b03e:	2e0a      	cmp	r6, #10
 800b040:	d104      	bne.n	800b04c <__swbuf_r+0x6c>
 800b042:	4621      	mov	r1, r4
 800b044:	4628      	mov	r0, r5
 800b046:	f000 f911 	bl	800b26c <_fflush_r>
 800b04a:	b988      	cbnz	r0, 800b070 <__swbuf_r+0x90>
 800b04c:	4638      	mov	r0, r7
 800b04e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b050:	4b0a      	ldr	r3, [pc, #40]	; (800b07c <__swbuf_r+0x9c>)
 800b052:	429c      	cmp	r4, r3
 800b054:	d101      	bne.n	800b05a <__swbuf_r+0x7a>
 800b056:	68ac      	ldr	r4, [r5, #8]
 800b058:	e7cf      	b.n	800affa <__swbuf_r+0x1a>
 800b05a:	4b09      	ldr	r3, [pc, #36]	; (800b080 <__swbuf_r+0xa0>)
 800b05c:	429c      	cmp	r4, r3
 800b05e:	bf08      	it	eq
 800b060:	68ec      	ldreq	r4, [r5, #12]
 800b062:	e7ca      	b.n	800affa <__swbuf_r+0x1a>
 800b064:	4621      	mov	r1, r4
 800b066:	4628      	mov	r0, r5
 800b068:	f000 f80c 	bl	800b084 <__swsetup_r>
 800b06c:	2800      	cmp	r0, #0
 800b06e:	d0cb      	beq.n	800b008 <__swbuf_r+0x28>
 800b070:	f04f 37ff 	mov.w	r7, #4294967295
 800b074:	e7ea      	b.n	800b04c <__swbuf_r+0x6c>
 800b076:	bf00      	nop
 800b078:	08023284 	.word	0x08023284
 800b07c:	080232a4 	.word	0x080232a4
 800b080:	08023264 	.word	0x08023264

0800b084 <__swsetup_r>:
 800b084:	4b32      	ldr	r3, [pc, #200]	; (800b150 <__swsetup_r+0xcc>)
 800b086:	b570      	push	{r4, r5, r6, lr}
 800b088:	681d      	ldr	r5, [r3, #0]
 800b08a:	4606      	mov	r6, r0
 800b08c:	460c      	mov	r4, r1
 800b08e:	b125      	cbz	r5, 800b09a <__swsetup_r+0x16>
 800b090:	69ab      	ldr	r3, [r5, #24]
 800b092:	b913      	cbnz	r3, 800b09a <__swsetup_r+0x16>
 800b094:	4628      	mov	r0, r5
 800b096:	f000 f97d 	bl	800b394 <__sinit>
 800b09a:	4b2e      	ldr	r3, [pc, #184]	; (800b154 <__swsetup_r+0xd0>)
 800b09c:	429c      	cmp	r4, r3
 800b09e:	d10f      	bne.n	800b0c0 <__swsetup_r+0x3c>
 800b0a0:	686c      	ldr	r4, [r5, #4]
 800b0a2:	89a3      	ldrh	r3, [r4, #12]
 800b0a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b0a8:	0719      	lsls	r1, r3, #28
 800b0aa:	d42c      	bmi.n	800b106 <__swsetup_r+0x82>
 800b0ac:	06dd      	lsls	r5, r3, #27
 800b0ae:	d411      	bmi.n	800b0d4 <__swsetup_r+0x50>
 800b0b0:	2309      	movs	r3, #9
 800b0b2:	6033      	str	r3, [r6, #0]
 800b0b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b0b8:	81a3      	strh	r3, [r4, #12]
 800b0ba:	f04f 30ff 	mov.w	r0, #4294967295
 800b0be:	e03e      	b.n	800b13e <__swsetup_r+0xba>
 800b0c0:	4b25      	ldr	r3, [pc, #148]	; (800b158 <__swsetup_r+0xd4>)
 800b0c2:	429c      	cmp	r4, r3
 800b0c4:	d101      	bne.n	800b0ca <__swsetup_r+0x46>
 800b0c6:	68ac      	ldr	r4, [r5, #8]
 800b0c8:	e7eb      	b.n	800b0a2 <__swsetup_r+0x1e>
 800b0ca:	4b24      	ldr	r3, [pc, #144]	; (800b15c <__swsetup_r+0xd8>)
 800b0cc:	429c      	cmp	r4, r3
 800b0ce:	bf08      	it	eq
 800b0d0:	68ec      	ldreq	r4, [r5, #12]
 800b0d2:	e7e6      	b.n	800b0a2 <__swsetup_r+0x1e>
 800b0d4:	0758      	lsls	r0, r3, #29
 800b0d6:	d512      	bpl.n	800b0fe <__swsetup_r+0x7a>
 800b0d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b0da:	b141      	cbz	r1, 800b0ee <__swsetup_r+0x6a>
 800b0dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b0e0:	4299      	cmp	r1, r3
 800b0e2:	d002      	beq.n	800b0ea <__swsetup_r+0x66>
 800b0e4:	4630      	mov	r0, r6
 800b0e6:	f7ff fdfd 	bl	800ace4 <_free_r>
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	6363      	str	r3, [r4, #52]	; 0x34
 800b0ee:	89a3      	ldrh	r3, [r4, #12]
 800b0f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b0f4:	81a3      	strh	r3, [r4, #12]
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	6063      	str	r3, [r4, #4]
 800b0fa:	6923      	ldr	r3, [r4, #16]
 800b0fc:	6023      	str	r3, [r4, #0]
 800b0fe:	89a3      	ldrh	r3, [r4, #12]
 800b100:	f043 0308 	orr.w	r3, r3, #8
 800b104:	81a3      	strh	r3, [r4, #12]
 800b106:	6923      	ldr	r3, [r4, #16]
 800b108:	b94b      	cbnz	r3, 800b11e <__swsetup_r+0x9a>
 800b10a:	89a3      	ldrh	r3, [r4, #12]
 800b10c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b110:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b114:	d003      	beq.n	800b11e <__swsetup_r+0x9a>
 800b116:	4621      	mov	r1, r4
 800b118:	4630      	mov	r0, r6
 800b11a:	f000 fa01 	bl	800b520 <__smakebuf_r>
 800b11e:	89a0      	ldrh	r0, [r4, #12]
 800b120:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b124:	f010 0301 	ands.w	r3, r0, #1
 800b128:	d00a      	beq.n	800b140 <__swsetup_r+0xbc>
 800b12a:	2300      	movs	r3, #0
 800b12c:	60a3      	str	r3, [r4, #8]
 800b12e:	6963      	ldr	r3, [r4, #20]
 800b130:	425b      	negs	r3, r3
 800b132:	61a3      	str	r3, [r4, #24]
 800b134:	6923      	ldr	r3, [r4, #16]
 800b136:	b943      	cbnz	r3, 800b14a <__swsetup_r+0xc6>
 800b138:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b13c:	d1ba      	bne.n	800b0b4 <__swsetup_r+0x30>
 800b13e:	bd70      	pop	{r4, r5, r6, pc}
 800b140:	0781      	lsls	r1, r0, #30
 800b142:	bf58      	it	pl
 800b144:	6963      	ldrpl	r3, [r4, #20]
 800b146:	60a3      	str	r3, [r4, #8]
 800b148:	e7f4      	b.n	800b134 <__swsetup_r+0xb0>
 800b14a:	2000      	movs	r0, #0
 800b14c:	e7f7      	b.n	800b13e <__swsetup_r+0xba>
 800b14e:	bf00      	nop
 800b150:	20000920 	.word	0x20000920
 800b154:	08023284 	.word	0x08023284
 800b158:	080232a4 	.word	0x080232a4
 800b15c:	08023264 	.word	0x08023264

0800b160 <__sflush_r>:
 800b160:	898a      	ldrh	r2, [r1, #12]
 800b162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b166:	4605      	mov	r5, r0
 800b168:	0710      	lsls	r0, r2, #28
 800b16a:	460c      	mov	r4, r1
 800b16c:	d458      	bmi.n	800b220 <__sflush_r+0xc0>
 800b16e:	684b      	ldr	r3, [r1, #4]
 800b170:	2b00      	cmp	r3, #0
 800b172:	dc05      	bgt.n	800b180 <__sflush_r+0x20>
 800b174:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b176:	2b00      	cmp	r3, #0
 800b178:	dc02      	bgt.n	800b180 <__sflush_r+0x20>
 800b17a:	2000      	movs	r0, #0
 800b17c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b180:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b182:	2e00      	cmp	r6, #0
 800b184:	d0f9      	beq.n	800b17a <__sflush_r+0x1a>
 800b186:	2300      	movs	r3, #0
 800b188:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b18c:	682f      	ldr	r7, [r5, #0]
 800b18e:	602b      	str	r3, [r5, #0]
 800b190:	d032      	beq.n	800b1f8 <__sflush_r+0x98>
 800b192:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b194:	89a3      	ldrh	r3, [r4, #12]
 800b196:	075a      	lsls	r2, r3, #29
 800b198:	d505      	bpl.n	800b1a6 <__sflush_r+0x46>
 800b19a:	6863      	ldr	r3, [r4, #4]
 800b19c:	1ac0      	subs	r0, r0, r3
 800b19e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b1a0:	b10b      	cbz	r3, 800b1a6 <__sflush_r+0x46>
 800b1a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b1a4:	1ac0      	subs	r0, r0, r3
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	4602      	mov	r2, r0
 800b1aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b1ac:	6a21      	ldr	r1, [r4, #32]
 800b1ae:	4628      	mov	r0, r5
 800b1b0:	47b0      	blx	r6
 800b1b2:	1c43      	adds	r3, r0, #1
 800b1b4:	89a3      	ldrh	r3, [r4, #12]
 800b1b6:	d106      	bne.n	800b1c6 <__sflush_r+0x66>
 800b1b8:	6829      	ldr	r1, [r5, #0]
 800b1ba:	291d      	cmp	r1, #29
 800b1bc:	d82c      	bhi.n	800b218 <__sflush_r+0xb8>
 800b1be:	4a2a      	ldr	r2, [pc, #168]	; (800b268 <__sflush_r+0x108>)
 800b1c0:	40ca      	lsrs	r2, r1
 800b1c2:	07d6      	lsls	r6, r2, #31
 800b1c4:	d528      	bpl.n	800b218 <__sflush_r+0xb8>
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	6062      	str	r2, [r4, #4]
 800b1ca:	04d9      	lsls	r1, r3, #19
 800b1cc:	6922      	ldr	r2, [r4, #16]
 800b1ce:	6022      	str	r2, [r4, #0]
 800b1d0:	d504      	bpl.n	800b1dc <__sflush_r+0x7c>
 800b1d2:	1c42      	adds	r2, r0, #1
 800b1d4:	d101      	bne.n	800b1da <__sflush_r+0x7a>
 800b1d6:	682b      	ldr	r3, [r5, #0]
 800b1d8:	b903      	cbnz	r3, 800b1dc <__sflush_r+0x7c>
 800b1da:	6560      	str	r0, [r4, #84]	; 0x54
 800b1dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b1de:	602f      	str	r7, [r5, #0]
 800b1e0:	2900      	cmp	r1, #0
 800b1e2:	d0ca      	beq.n	800b17a <__sflush_r+0x1a>
 800b1e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b1e8:	4299      	cmp	r1, r3
 800b1ea:	d002      	beq.n	800b1f2 <__sflush_r+0x92>
 800b1ec:	4628      	mov	r0, r5
 800b1ee:	f7ff fd79 	bl	800ace4 <_free_r>
 800b1f2:	2000      	movs	r0, #0
 800b1f4:	6360      	str	r0, [r4, #52]	; 0x34
 800b1f6:	e7c1      	b.n	800b17c <__sflush_r+0x1c>
 800b1f8:	6a21      	ldr	r1, [r4, #32]
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	4628      	mov	r0, r5
 800b1fe:	47b0      	blx	r6
 800b200:	1c41      	adds	r1, r0, #1
 800b202:	d1c7      	bne.n	800b194 <__sflush_r+0x34>
 800b204:	682b      	ldr	r3, [r5, #0]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d0c4      	beq.n	800b194 <__sflush_r+0x34>
 800b20a:	2b1d      	cmp	r3, #29
 800b20c:	d001      	beq.n	800b212 <__sflush_r+0xb2>
 800b20e:	2b16      	cmp	r3, #22
 800b210:	d101      	bne.n	800b216 <__sflush_r+0xb6>
 800b212:	602f      	str	r7, [r5, #0]
 800b214:	e7b1      	b.n	800b17a <__sflush_r+0x1a>
 800b216:	89a3      	ldrh	r3, [r4, #12]
 800b218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b21c:	81a3      	strh	r3, [r4, #12]
 800b21e:	e7ad      	b.n	800b17c <__sflush_r+0x1c>
 800b220:	690f      	ldr	r7, [r1, #16]
 800b222:	2f00      	cmp	r7, #0
 800b224:	d0a9      	beq.n	800b17a <__sflush_r+0x1a>
 800b226:	0793      	lsls	r3, r2, #30
 800b228:	680e      	ldr	r6, [r1, #0]
 800b22a:	bf08      	it	eq
 800b22c:	694b      	ldreq	r3, [r1, #20]
 800b22e:	600f      	str	r7, [r1, #0]
 800b230:	bf18      	it	ne
 800b232:	2300      	movne	r3, #0
 800b234:	eba6 0807 	sub.w	r8, r6, r7
 800b238:	608b      	str	r3, [r1, #8]
 800b23a:	f1b8 0f00 	cmp.w	r8, #0
 800b23e:	dd9c      	ble.n	800b17a <__sflush_r+0x1a>
 800b240:	6a21      	ldr	r1, [r4, #32]
 800b242:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b244:	4643      	mov	r3, r8
 800b246:	463a      	mov	r2, r7
 800b248:	4628      	mov	r0, r5
 800b24a:	47b0      	blx	r6
 800b24c:	2800      	cmp	r0, #0
 800b24e:	dc06      	bgt.n	800b25e <__sflush_r+0xfe>
 800b250:	89a3      	ldrh	r3, [r4, #12]
 800b252:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b256:	81a3      	strh	r3, [r4, #12]
 800b258:	f04f 30ff 	mov.w	r0, #4294967295
 800b25c:	e78e      	b.n	800b17c <__sflush_r+0x1c>
 800b25e:	4407      	add	r7, r0
 800b260:	eba8 0800 	sub.w	r8, r8, r0
 800b264:	e7e9      	b.n	800b23a <__sflush_r+0xda>
 800b266:	bf00      	nop
 800b268:	20400001 	.word	0x20400001

0800b26c <_fflush_r>:
 800b26c:	b538      	push	{r3, r4, r5, lr}
 800b26e:	690b      	ldr	r3, [r1, #16]
 800b270:	4605      	mov	r5, r0
 800b272:	460c      	mov	r4, r1
 800b274:	b913      	cbnz	r3, 800b27c <_fflush_r+0x10>
 800b276:	2500      	movs	r5, #0
 800b278:	4628      	mov	r0, r5
 800b27a:	bd38      	pop	{r3, r4, r5, pc}
 800b27c:	b118      	cbz	r0, 800b286 <_fflush_r+0x1a>
 800b27e:	6983      	ldr	r3, [r0, #24]
 800b280:	b90b      	cbnz	r3, 800b286 <_fflush_r+0x1a>
 800b282:	f000 f887 	bl	800b394 <__sinit>
 800b286:	4b14      	ldr	r3, [pc, #80]	; (800b2d8 <_fflush_r+0x6c>)
 800b288:	429c      	cmp	r4, r3
 800b28a:	d11b      	bne.n	800b2c4 <_fflush_r+0x58>
 800b28c:	686c      	ldr	r4, [r5, #4]
 800b28e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d0ef      	beq.n	800b276 <_fflush_r+0xa>
 800b296:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b298:	07d0      	lsls	r0, r2, #31
 800b29a:	d404      	bmi.n	800b2a6 <_fflush_r+0x3a>
 800b29c:	0599      	lsls	r1, r3, #22
 800b29e:	d402      	bmi.n	800b2a6 <_fflush_r+0x3a>
 800b2a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2a2:	f000 f915 	bl	800b4d0 <__retarget_lock_acquire_recursive>
 800b2a6:	4628      	mov	r0, r5
 800b2a8:	4621      	mov	r1, r4
 800b2aa:	f7ff ff59 	bl	800b160 <__sflush_r>
 800b2ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b2b0:	07da      	lsls	r2, r3, #31
 800b2b2:	4605      	mov	r5, r0
 800b2b4:	d4e0      	bmi.n	800b278 <_fflush_r+0xc>
 800b2b6:	89a3      	ldrh	r3, [r4, #12]
 800b2b8:	059b      	lsls	r3, r3, #22
 800b2ba:	d4dd      	bmi.n	800b278 <_fflush_r+0xc>
 800b2bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2be:	f000 f908 	bl	800b4d2 <__retarget_lock_release_recursive>
 800b2c2:	e7d9      	b.n	800b278 <_fflush_r+0xc>
 800b2c4:	4b05      	ldr	r3, [pc, #20]	; (800b2dc <_fflush_r+0x70>)
 800b2c6:	429c      	cmp	r4, r3
 800b2c8:	d101      	bne.n	800b2ce <_fflush_r+0x62>
 800b2ca:	68ac      	ldr	r4, [r5, #8]
 800b2cc:	e7df      	b.n	800b28e <_fflush_r+0x22>
 800b2ce:	4b04      	ldr	r3, [pc, #16]	; (800b2e0 <_fflush_r+0x74>)
 800b2d0:	429c      	cmp	r4, r3
 800b2d2:	bf08      	it	eq
 800b2d4:	68ec      	ldreq	r4, [r5, #12]
 800b2d6:	e7da      	b.n	800b28e <_fflush_r+0x22>
 800b2d8:	08023284 	.word	0x08023284
 800b2dc:	080232a4 	.word	0x080232a4
 800b2e0:	08023264 	.word	0x08023264

0800b2e4 <std>:
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	b510      	push	{r4, lr}
 800b2e8:	4604      	mov	r4, r0
 800b2ea:	e9c0 3300 	strd	r3, r3, [r0]
 800b2ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b2f2:	6083      	str	r3, [r0, #8]
 800b2f4:	8181      	strh	r1, [r0, #12]
 800b2f6:	6643      	str	r3, [r0, #100]	; 0x64
 800b2f8:	81c2      	strh	r2, [r0, #14]
 800b2fa:	6183      	str	r3, [r0, #24]
 800b2fc:	4619      	mov	r1, r3
 800b2fe:	2208      	movs	r2, #8
 800b300:	305c      	adds	r0, #92	; 0x5c
 800b302:	f7ff fce7 	bl	800acd4 <memset>
 800b306:	4b05      	ldr	r3, [pc, #20]	; (800b31c <std+0x38>)
 800b308:	6263      	str	r3, [r4, #36]	; 0x24
 800b30a:	4b05      	ldr	r3, [pc, #20]	; (800b320 <std+0x3c>)
 800b30c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b30e:	4b05      	ldr	r3, [pc, #20]	; (800b324 <std+0x40>)
 800b310:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b312:	4b05      	ldr	r3, [pc, #20]	; (800b328 <std+0x44>)
 800b314:	6224      	str	r4, [r4, #32]
 800b316:	6323      	str	r3, [r4, #48]	; 0x30
 800b318:	bd10      	pop	{r4, pc}
 800b31a:	bf00      	nop
 800b31c:	0800bb95 	.word	0x0800bb95
 800b320:	0800bbb7 	.word	0x0800bbb7
 800b324:	0800bbef 	.word	0x0800bbef
 800b328:	0800bc13 	.word	0x0800bc13

0800b32c <_cleanup_r>:
 800b32c:	4901      	ldr	r1, [pc, #4]	; (800b334 <_cleanup_r+0x8>)
 800b32e:	f000 b8af 	b.w	800b490 <_fwalk_reent>
 800b332:	bf00      	nop
 800b334:	0800b26d 	.word	0x0800b26d

0800b338 <__sfmoreglue>:
 800b338:	b570      	push	{r4, r5, r6, lr}
 800b33a:	2268      	movs	r2, #104	; 0x68
 800b33c:	1e4d      	subs	r5, r1, #1
 800b33e:	4355      	muls	r5, r2
 800b340:	460e      	mov	r6, r1
 800b342:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b346:	f7ff fd39 	bl	800adbc <_malloc_r>
 800b34a:	4604      	mov	r4, r0
 800b34c:	b140      	cbz	r0, 800b360 <__sfmoreglue+0x28>
 800b34e:	2100      	movs	r1, #0
 800b350:	e9c0 1600 	strd	r1, r6, [r0]
 800b354:	300c      	adds	r0, #12
 800b356:	60a0      	str	r0, [r4, #8]
 800b358:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b35c:	f7ff fcba 	bl	800acd4 <memset>
 800b360:	4620      	mov	r0, r4
 800b362:	bd70      	pop	{r4, r5, r6, pc}

0800b364 <__sfp_lock_acquire>:
 800b364:	4801      	ldr	r0, [pc, #4]	; (800b36c <__sfp_lock_acquire+0x8>)
 800b366:	f000 b8b3 	b.w	800b4d0 <__retarget_lock_acquire_recursive>
 800b36a:	bf00      	nop
 800b36c:	20001775 	.word	0x20001775

0800b370 <__sfp_lock_release>:
 800b370:	4801      	ldr	r0, [pc, #4]	; (800b378 <__sfp_lock_release+0x8>)
 800b372:	f000 b8ae 	b.w	800b4d2 <__retarget_lock_release_recursive>
 800b376:	bf00      	nop
 800b378:	20001775 	.word	0x20001775

0800b37c <__sinit_lock_acquire>:
 800b37c:	4801      	ldr	r0, [pc, #4]	; (800b384 <__sinit_lock_acquire+0x8>)
 800b37e:	f000 b8a7 	b.w	800b4d0 <__retarget_lock_acquire_recursive>
 800b382:	bf00      	nop
 800b384:	20001776 	.word	0x20001776

0800b388 <__sinit_lock_release>:
 800b388:	4801      	ldr	r0, [pc, #4]	; (800b390 <__sinit_lock_release+0x8>)
 800b38a:	f000 b8a2 	b.w	800b4d2 <__retarget_lock_release_recursive>
 800b38e:	bf00      	nop
 800b390:	20001776 	.word	0x20001776

0800b394 <__sinit>:
 800b394:	b510      	push	{r4, lr}
 800b396:	4604      	mov	r4, r0
 800b398:	f7ff fff0 	bl	800b37c <__sinit_lock_acquire>
 800b39c:	69a3      	ldr	r3, [r4, #24]
 800b39e:	b11b      	cbz	r3, 800b3a8 <__sinit+0x14>
 800b3a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3a4:	f7ff bff0 	b.w	800b388 <__sinit_lock_release>
 800b3a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b3ac:	6523      	str	r3, [r4, #80]	; 0x50
 800b3ae:	4b13      	ldr	r3, [pc, #76]	; (800b3fc <__sinit+0x68>)
 800b3b0:	4a13      	ldr	r2, [pc, #76]	; (800b400 <__sinit+0x6c>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	62a2      	str	r2, [r4, #40]	; 0x28
 800b3b6:	42a3      	cmp	r3, r4
 800b3b8:	bf04      	itt	eq
 800b3ba:	2301      	moveq	r3, #1
 800b3bc:	61a3      	streq	r3, [r4, #24]
 800b3be:	4620      	mov	r0, r4
 800b3c0:	f000 f820 	bl	800b404 <__sfp>
 800b3c4:	6060      	str	r0, [r4, #4]
 800b3c6:	4620      	mov	r0, r4
 800b3c8:	f000 f81c 	bl	800b404 <__sfp>
 800b3cc:	60a0      	str	r0, [r4, #8]
 800b3ce:	4620      	mov	r0, r4
 800b3d0:	f000 f818 	bl	800b404 <__sfp>
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	60e0      	str	r0, [r4, #12]
 800b3d8:	2104      	movs	r1, #4
 800b3da:	6860      	ldr	r0, [r4, #4]
 800b3dc:	f7ff ff82 	bl	800b2e4 <std>
 800b3e0:	68a0      	ldr	r0, [r4, #8]
 800b3e2:	2201      	movs	r2, #1
 800b3e4:	2109      	movs	r1, #9
 800b3e6:	f7ff ff7d 	bl	800b2e4 <std>
 800b3ea:	68e0      	ldr	r0, [r4, #12]
 800b3ec:	2202      	movs	r2, #2
 800b3ee:	2112      	movs	r1, #18
 800b3f0:	f7ff ff78 	bl	800b2e4 <std>
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	61a3      	str	r3, [r4, #24]
 800b3f8:	e7d2      	b.n	800b3a0 <__sinit+0xc>
 800b3fa:	bf00      	nop
 800b3fc:	08023260 	.word	0x08023260
 800b400:	0800b32d 	.word	0x0800b32d

0800b404 <__sfp>:
 800b404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b406:	4607      	mov	r7, r0
 800b408:	f7ff ffac 	bl	800b364 <__sfp_lock_acquire>
 800b40c:	4b1e      	ldr	r3, [pc, #120]	; (800b488 <__sfp+0x84>)
 800b40e:	681e      	ldr	r6, [r3, #0]
 800b410:	69b3      	ldr	r3, [r6, #24]
 800b412:	b913      	cbnz	r3, 800b41a <__sfp+0x16>
 800b414:	4630      	mov	r0, r6
 800b416:	f7ff ffbd 	bl	800b394 <__sinit>
 800b41a:	3648      	adds	r6, #72	; 0x48
 800b41c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b420:	3b01      	subs	r3, #1
 800b422:	d503      	bpl.n	800b42c <__sfp+0x28>
 800b424:	6833      	ldr	r3, [r6, #0]
 800b426:	b30b      	cbz	r3, 800b46c <__sfp+0x68>
 800b428:	6836      	ldr	r6, [r6, #0]
 800b42a:	e7f7      	b.n	800b41c <__sfp+0x18>
 800b42c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b430:	b9d5      	cbnz	r5, 800b468 <__sfp+0x64>
 800b432:	4b16      	ldr	r3, [pc, #88]	; (800b48c <__sfp+0x88>)
 800b434:	60e3      	str	r3, [r4, #12]
 800b436:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b43a:	6665      	str	r5, [r4, #100]	; 0x64
 800b43c:	f000 f847 	bl	800b4ce <__retarget_lock_init_recursive>
 800b440:	f7ff ff96 	bl	800b370 <__sfp_lock_release>
 800b444:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b448:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b44c:	6025      	str	r5, [r4, #0]
 800b44e:	61a5      	str	r5, [r4, #24]
 800b450:	2208      	movs	r2, #8
 800b452:	4629      	mov	r1, r5
 800b454:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b458:	f7ff fc3c 	bl	800acd4 <memset>
 800b45c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b460:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b464:	4620      	mov	r0, r4
 800b466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b468:	3468      	adds	r4, #104	; 0x68
 800b46a:	e7d9      	b.n	800b420 <__sfp+0x1c>
 800b46c:	2104      	movs	r1, #4
 800b46e:	4638      	mov	r0, r7
 800b470:	f7ff ff62 	bl	800b338 <__sfmoreglue>
 800b474:	4604      	mov	r4, r0
 800b476:	6030      	str	r0, [r6, #0]
 800b478:	2800      	cmp	r0, #0
 800b47a:	d1d5      	bne.n	800b428 <__sfp+0x24>
 800b47c:	f7ff ff78 	bl	800b370 <__sfp_lock_release>
 800b480:	230c      	movs	r3, #12
 800b482:	603b      	str	r3, [r7, #0]
 800b484:	e7ee      	b.n	800b464 <__sfp+0x60>
 800b486:	bf00      	nop
 800b488:	08023260 	.word	0x08023260
 800b48c:	ffff0001 	.word	0xffff0001

0800b490 <_fwalk_reent>:
 800b490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b494:	4606      	mov	r6, r0
 800b496:	4688      	mov	r8, r1
 800b498:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b49c:	2700      	movs	r7, #0
 800b49e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b4a2:	f1b9 0901 	subs.w	r9, r9, #1
 800b4a6:	d505      	bpl.n	800b4b4 <_fwalk_reent+0x24>
 800b4a8:	6824      	ldr	r4, [r4, #0]
 800b4aa:	2c00      	cmp	r4, #0
 800b4ac:	d1f7      	bne.n	800b49e <_fwalk_reent+0xe>
 800b4ae:	4638      	mov	r0, r7
 800b4b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4b4:	89ab      	ldrh	r3, [r5, #12]
 800b4b6:	2b01      	cmp	r3, #1
 800b4b8:	d907      	bls.n	800b4ca <_fwalk_reent+0x3a>
 800b4ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b4be:	3301      	adds	r3, #1
 800b4c0:	d003      	beq.n	800b4ca <_fwalk_reent+0x3a>
 800b4c2:	4629      	mov	r1, r5
 800b4c4:	4630      	mov	r0, r6
 800b4c6:	47c0      	blx	r8
 800b4c8:	4307      	orrs	r7, r0
 800b4ca:	3568      	adds	r5, #104	; 0x68
 800b4cc:	e7e9      	b.n	800b4a2 <_fwalk_reent+0x12>

0800b4ce <__retarget_lock_init_recursive>:
 800b4ce:	4770      	bx	lr

0800b4d0 <__retarget_lock_acquire_recursive>:
 800b4d0:	4770      	bx	lr

0800b4d2 <__retarget_lock_release_recursive>:
 800b4d2:	4770      	bx	lr

0800b4d4 <__swhatbuf_r>:
 800b4d4:	b570      	push	{r4, r5, r6, lr}
 800b4d6:	460e      	mov	r6, r1
 800b4d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4dc:	2900      	cmp	r1, #0
 800b4de:	b096      	sub	sp, #88	; 0x58
 800b4e0:	4614      	mov	r4, r2
 800b4e2:	461d      	mov	r5, r3
 800b4e4:	da08      	bge.n	800b4f8 <__swhatbuf_r+0x24>
 800b4e6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	602a      	str	r2, [r5, #0]
 800b4ee:	061a      	lsls	r2, r3, #24
 800b4f0:	d410      	bmi.n	800b514 <__swhatbuf_r+0x40>
 800b4f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4f6:	e00e      	b.n	800b516 <__swhatbuf_r+0x42>
 800b4f8:	466a      	mov	r2, sp
 800b4fa:	f000 fbb1 	bl	800bc60 <_fstat_r>
 800b4fe:	2800      	cmp	r0, #0
 800b500:	dbf1      	blt.n	800b4e6 <__swhatbuf_r+0x12>
 800b502:	9a01      	ldr	r2, [sp, #4]
 800b504:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b508:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b50c:	425a      	negs	r2, r3
 800b50e:	415a      	adcs	r2, r3
 800b510:	602a      	str	r2, [r5, #0]
 800b512:	e7ee      	b.n	800b4f2 <__swhatbuf_r+0x1e>
 800b514:	2340      	movs	r3, #64	; 0x40
 800b516:	2000      	movs	r0, #0
 800b518:	6023      	str	r3, [r4, #0]
 800b51a:	b016      	add	sp, #88	; 0x58
 800b51c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b520 <__smakebuf_r>:
 800b520:	898b      	ldrh	r3, [r1, #12]
 800b522:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b524:	079d      	lsls	r5, r3, #30
 800b526:	4606      	mov	r6, r0
 800b528:	460c      	mov	r4, r1
 800b52a:	d507      	bpl.n	800b53c <__smakebuf_r+0x1c>
 800b52c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b530:	6023      	str	r3, [r4, #0]
 800b532:	6123      	str	r3, [r4, #16]
 800b534:	2301      	movs	r3, #1
 800b536:	6163      	str	r3, [r4, #20]
 800b538:	b002      	add	sp, #8
 800b53a:	bd70      	pop	{r4, r5, r6, pc}
 800b53c:	ab01      	add	r3, sp, #4
 800b53e:	466a      	mov	r2, sp
 800b540:	f7ff ffc8 	bl	800b4d4 <__swhatbuf_r>
 800b544:	9900      	ldr	r1, [sp, #0]
 800b546:	4605      	mov	r5, r0
 800b548:	4630      	mov	r0, r6
 800b54a:	f7ff fc37 	bl	800adbc <_malloc_r>
 800b54e:	b948      	cbnz	r0, 800b564 <__smakebuf_r+0x44>
 800b550:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b554:	059a      	lsls	r2, r3, #22
 800b556:	d4ef      	bmi.n	800b538 <__smakebuf_r+0x18>
 800b558:	f023 0303 	bic.w	r3, r3, #3
 800b55c:	f043 0302 	orr.w	r3, r3, #2
 800b560:	81a3      	strh	r3, [r4, #12]
 800b562:	e7e3      	b.n	800b52c <__smakebuf_r+0xc>
 800b564:	4b0d      	ldr	r3, [pc, #52]	; (800b59c <__smakebuf_r+0x7c>)
 800b566:	62b3      	str	r3, [r6, #40]	; 0x28
 800b568:	89a3      	ldrh	r3, [r4, #12]
 800b56a:	6020      	str	r0, [r4, #0]
 800b56c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b570:	81a3      	strh	r3, [r4, #12]
 800b572:	9b00      	ldr	r3, [sp, #0]
 800b574:	6163      	str	r3, [r4, #20]
 800b576:	9b01      	ldr	r3, [sp, #4]
 800b578:	6120      	str	r0, [r4, #16]
 800b57a:	b15b      	cbz	r3, 800b594 <__smakebuf_r+0x74>
 800b57c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b580:	4630      	mov	r0, r6
 800b582:	f000 fb7f 	bl	800bc84 <_isatty_r>
 800b586:	b128      	cbz	r0, 800b594 <__smakebuf_r+0x74>
 800b588:	89a3      	ldrh	r3, [r4, #12]
 800b58a:	f023 0303 	bic.w	r3, r3, #3
 800b58e:	f043 0301 	orr.w	r3, r3, #1
 800b592:	81a3      	strh	r3, [r4, #12]
 800b594:	89a0      	ldrh	r0, [r4, #12]
 800b596:	4305      	orrs	r5, r0
 800b598:	81a5      	strh	r5, [r4, #12]
 800b59a:	e7cd      	b.n	800b538 <__smakebuf_r+0x18>
 800b59c:	0800b32d 	.word	0x0800b32d

0800b5a0 <__malloc_lock>:
 800b5a0:	4801      	ldr	r0, [pc, #4]	; (800b5a8 <__malloc_lock+0x8>)
 800b5a2:	f7ff bf95 	b.w	800b4d0 <__retarget_lock_acquire_recursive>
 800b5a6:	bf00      	nop
 800b5a8:	20001774 	.word	0x20001774

0800b5ac <__malloc_unlock>:
 800b5ac:	4801      	ldr	r0, [pc, #4]	; (800b5b4 <__malloc_unlock+0x8>)
 800b5ae:	f7ff bf90 	b.w	800b4d2 <__retarget_lock_release_recursive>
 800b5b2:	bf00      	nop
 800b5b4:	20001774 	.word	0x20001774

0800b5b8 <__sfputc_r>:
 800b5b8:	6893      	ldr	r3, [r2, #8]
 800b5ba:	3b01      	subs	r3, #1
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	b410      	push	{r4}
 800b5c0:	6093      	str	r3, [r2, #8]
 800b5c2:	da08      	bge.n	800b5d6 <__sfputc_r+0x1e>
 800b5c4:	6994      	ldr	r4, [r2, #24]
 800b5c6:	42a3      	cmp	r3, r4
 800b5c8:	db01      	blt.n	800b5ce <__sfputc_r+0x16>
 800b5ca:	290a      	cmp	r1, #10
 800b5cc:	d103      	bne.n	800b5d6 <__sfputc_r+0x1e>
 800b5ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5d2:	f7ff bd05 	b.w	800afe0 <__swbuf_r>
 800b5d6:	6813      	ldr	r3, [r2, #0]
 800b5d8:	1c58      	adds	r0, r3, #1
 800b5da:	6010      	str	r0, [r2, #0]
 800b5dc:	7019      	strb	r1, [r3, #0]
 800b5de:	4608      	mov	r0, r1
 800b5e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5e4:	4770      	bx	lr

0800b5e6 <__sfputs_r>:
 800b5e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5e8:	4606      	mov	r6, r0
 800b5ea:	460f      	mov	r7, r1
 800b5ec:	4614      	mov	r4, r2
 800b5ee:	18d5      	adds	r5, r2, r3
 800b5f0:	42ac      	cmp	r4, r5
 800b5f2:	d101      	bne.n	800b5f8 <__sfputs_r+0x12>
 800b5f4:	2000      	movs	r0, #0
 800b5f6:	e007      	b.n	800b608 <__sfputs_r+0x22>
 800b5f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5fc:	463a      	mov	r2, r7
 800b5fe:	4630      	mov	r0, r6
 800b600:	f7ff ffda 	bl	800b5b8 <__sfputc_r>
 800b604:	1c43      	adds	r3, r0, #1
 800b606:	d1f3      	bne.n	800b5f0 <__sfputs_r+0xa>
 800b608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b60c <_vfiprintf_r>:
 800b60c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b610:	460d      	mov	r5, r1
 800b612:	b09d      	sub	sp, #116	; 0x74
 800b614:	4614      	mov	r4, r2
 800b616:	4698      	mov	r8, r3
 800b618:	4606      	mov	r6, r0
 800b61a:	b118      	cbz	r0, 800b624 <_vfiprintf_r+0x18>
 800b61c:	6983      	ldr	r3, [r0, #24]
 800b61e:	b90b      	cbnz	r3, 800b624 <_vfiprintf_r+0x18>
 800b620:	f7ff feb8 	bl	800b394 <__sinit>
 800b624:	4b89      	ldr	r3, [pc, #548]	; (800b84c <_vfiprintf_r+0x240>)
 800b626:	429d      	cmp	r5, r3
 800b628:	d11b      	bne.n	800b662 <_vfiprintf_r+0x56>
 800b62a:	6875      	ldr	r5, [r6, #4]
 800b62c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b62e:	07d9      	lsls	r1, r3, #31
 800b630:	d405      	bmi.n	800b63e <_vfiprintf_r+0x32>
 800b632:	89ab      	ldrh	r3, [r5, #12]
 800b634:	059a      	lsls	r2, r3, #22
 800b636:	d402      	bmi.n	800b63e <_vfiprintf_r+0x32>
 800b638:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b63a:	f7ff ff49 	bl	800b4d0 <__retarget_lock_acquire_recursive>
 800b63e:	89ab      	ldrh	r3, [r5, #12]
 800b640:	071b      	lsls	r3, r3, #28
 800b642:	d501      	bpl.n	800b648 <_vfiprintf_r+0x3c>
 800b644:	692b      	ldr	r3, [r5, #16]
 800b646:	b9eb      	cbnz	r3, 800b684 <_vfiprintf_r+0x78>
 800b648:	4629      	mov	r1, r5
 800b64a:	4630      	mov	r0, r6
 800b64c:	f7ff fd1a 	bl	800b084 <__swsetup_r>
 800b650:	b1c0      	cbz	r0, 800b684 <_vfiprintf_r+0x78>
 800b652:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b654:	07dc      	lsls	r4, r3, #31
 800b656:	d50e      	bpl.n	800b676 <_vfiprintf_r+0x6a>
 800b658:	f04f 30ff 	mov.w	r0, #4294967295
 800b65c:	b01d      	add	sp, #116	; 0x74
 800b65e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b662:	4b7b      	ldr	r3, [pc, #492]	; (800b850 <_vfiprintf_r+0x244>)
 800b664:	429d      	cmp	r5, r3
 800b666:	d101      	bne.n	800b66c <_vfiprintf_r+0x60>
 800b668:	68b5      	ldr	r5, [r6, #8]
 800b66a:	e7df      	b.n	800b62c <_vfiprintf_r+0x20>
 800b66c:	4b79      	ldr	r3, [pc, #484]	; (800b854 <_vfiprintf_r+0x248>)
 800b66e:	429d      	cmp	r5, r3
 800b670:	bf08      	it	eq
 800b672:	68f5      	ldreq	r5, [r6, #12]
 800b674:	e7da      	b.n	800b62c <_vfiprintf_r+0x20>
 800b676:	89ab      	ldrh	r3, [r5, #12]
 800b678:	0598      	lsls	r0, r3, #22
 800b67a:	d4ed      	bmi.n	800b658 <_vfiprintf_r+0x4c>
 800b67c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b67e:	f7ff ff28 	bl	800b4d2 <__retarget_lock_release_recursive>
 800b682:	e7e9      	b.n	800b658 <_vfiprintf_r+0x4c>
 800b684:	2300      	movs	r3, #0
 800b686:	9309      	str	r3, [sp, #36]	; 0x24
 800b688:	2320      	movs	r3, #32
 800b68a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b68e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b692:	2330      	movs	r3, #48	; 0x30
 800b694:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b858 <_vfiprintf_r+0x24c>
 800b698:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b69c:	f04f 0901 	mov.w	r9, #1
 800b6a0:	4623      	mov	r3, r4
 800b6a2:	469a      	mov	sl, r3
 800b6a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6a8:	b10a      	cbz	r2, 800b6ae <_vfiprintf_r+0xa2>
 800b6aa:	2a25      	cmp	r2, #37	; 0x25
 800b6ac:	d1f9      	bne.n	800b6a2 <_vfiprintf_r+0x96>
 800b6ae:	ebba 0b04 	subs.w	fp, sl, r4
 800b6b2:	d00b      	beq.n	800b6cc <_vfiprintf_r+0xc0>
 800b6b4:	465b      	mov	r3, fp
 800b6b6:	4622      	mov	r2, r4
 800b6b8:	4629      	mov	r1, r5
 800b6ba:	4630      	mov	r0, r6
 800b6bc:	f7ff ff93 	bl	800b5e6 <__sfputs_r>
 800b6c0:	3001      	adds	r0, #1
 800b6c2:	f000 80aa 	beq.w	800b81a <_vfiprintf_r+0x20e>
 800b6c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6c8:	445a      	add	r2, fp
 800b6ca:	9209      	str	r2, [sp, #36]	; 0x24
 800b6cc:	f89a 3000 	ldrb.w	r3, [sl]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	f000 80a2 	beq.w	800b81a <_vfiprintf_r+0x20e>
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	f04f 32ff 	mov.w	r2, #4294967295
 800b6dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6e0:	f10a 0a01 	add.w	sl, sl, #1
 800b6e4:	9304      	str	r3, [sp, #16]
 800b6e6:	9307      	str	r3, [sp, #28]
 800b6e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b6ec:	931a      	str	r3, [sp, #104]	; 0x68
 800b6ee:	4654      	mov	r4, sl
 800b6f0:	2205      	movs	r2, #5
 800b6f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6f6:	4858      	ldr	r0, [pc, #352]	; (800b858 <_vfiprintf_r+0x24c>)
 800b6f8:	f7f4 fd82 	bl	8000200 <memchr>
 800b6fc:	9a04      	ldr	r2, [sp, #16]
 800b6fe:	b9d8      	cbnz	r0, 800b738 <_vfiprintf_r+0x12c>
 800b700:	06d1      	lsls	r1, r2, #27
 800b702:	bf44      	itt	mi
 800b704:	2320      	movmi	r3, #32
 800b706:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b70a:	0713      	lsls	r3, r2, #28
 800b70c:	bf44      	itt	mi
 800b70e:	232b      	movmi	r3, #43	; 0x2b
 800b710:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b714:	f89a 3000 	ldrb.w	r3, [sl]
 800b718:	2b2a      	cmp	r3, #42	; 0x2a
 800b71a:	d015      	beq.n	800b748 <_vfiprintf_r+0x13c>
 800b71c:	9a07      	ldr	r2, [sp, #28]
 800b71e:	4654      	mov	r4, sl
 800b720:	2000      	movs	r0, #0
 800b722:	f04f 0c0a 	mov.w	ip, #10
 800b726:	4621      	mov	r1, r4
 800b728:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b72c:	3b30      	subs	r3, #48	; 0x30
 800b72e:	2b09      	cmp	r3, #9
 800b730:	d94e      	bls.n	800b7d0 <_vfiprintf_r+0x1c4>
 800b732:	b1b0      	cbz	r0, 800b762 <_vfiprintf_r+0x156>
 800b734:	9207      	str	r2, [sp, #28]
 800b736:	e014      	b.n	800b762 <_vfiprintf_r+0x156>
 800b738:	eba0 0308 	sub.w	r3, r0, r8
 800b73c:	fa09 f303 	lsl.w	r3, r9, r3
 800b740:	4313      	orrs	r3, r2
 800b742:	9304      	str	r3, [sp, #16]
 800b744:	46a2      	mov	sl, r4
 800b746:	e7d2      	b.n	800b6ee <_vfiprintf_r+0xe2>
 800b748:	9b03      	ldr	r3, [sp, #12]
 800b74a:	1d19      	adds	r1, r3, #4
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	9103      	str	r1, [sp, #12]
 800b750:	2b00      	cmp	r3, #0
 800b752:	bfbb      	ittet	lt
 800b754:	425b      	neglt	r3, r3
 800b756:	f042 0202 	orrlt.w	r2, r2, #2
 800b75a:	9307      	strge	r3, [sp, #28]
 800b75c:	9307      	strlt	r3, [sp, #28]
 800b75e:	bfb8      	it	lt
 800b760:	9204      	strlt	r2, [sp, #16]
 800b762:	7823      	ldrb	r3, [r4, #0]
 800b764:	2b2e      	cmp	r3, #46	; 0x2e
 800b766:	d10c      	bne.n	800b782 <_vfiprintf_r+0x176>
 800b768:	7863      	ldrb	r3, [r4, #1]
 800b76a:	2b2a      	cmp	r3, #42	; 0x2a
 800b76c:	d135      	bne.n	800b7da <_vfiprintf_r+0x1ce>
 800b76e:	9b03      	ldr	r3, [sp, #12]
 800b770:	1d1a      	adds	r2, r3, #4
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	9203      	str	r2, [sp, #12]
 800b776:	2b00      	cmp	r3, #0
 800b778:	bfb8      	it	lt
 800b77a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b77e:	3402      	adds	r4, #2
 800b780:	9305      	str	r3, [sp, #20]
 800b782:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b868 <_vfiprintf_r+0x25c>
 800b786:	7821      	ldrb	r1, [r4, #0]
 800b788:	2203      	movs	r2, #3
 800b78a:	4650      	mov	r0, sl
 800b78c:	f7f4 fd38 	bl	8000200 <memchr>
 800b790:	b140      	cbz	r0, 800b7a4 <_vfiprintf_r+0x198>
 800b792:	2340      	movs	r3, #64	; 0x40
 800b794:	eba0 000a 	sub.w	r0, r0, sl
 800b798:	fa03 f000 	lsl.w	r0, r3, r0
 800b79c:	9b04      	ldr	r3, [sp, #16]
 800b79e:	4303      	orrs	r3, r0
 800b7a0:	3401      	adds	r4, #1
 800b7a2:	9304      	str	r3, [sp, #16]
 800b7a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7a8:	482c      	ldr	r0, [pc, #176]	; (800b85c <_vfiprintf_r+0x250>)
 800b7aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b7ae:	2206      	movs	r2, #6
 800b7b0:	f7f4 fd26 	bl	8000200 <memchr>
 800b7b4:	2800      	cmp	r0, #0
 800b7b6:	d03f      	beq.n	800b838 <_vfiprintf_r+0x22c>
 800b7b8:	4b29      	ldr	r3, [pc, #164]	; (800b860 <_vfiprintf_r+0x254>)
 800b7ba:	bb1b      	cbnz	r3, 800b804 <_vfiprintf_r+0x1f8>
 800b7bc:	9b03      	ldr	r3, [sp, #12]
 800b7be:	3307      	adds	r3, #7
 800b7c0:	f023 0307 	bic.w	r3, r3, #7
 800b7c4:	3308      	adds	r3, #8
 800b7c6:	9303      	str	r3, [sp, #12]
 800b7c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7ca:	443b      	add	r3, r7
 800b7cc:	9309      	str	r3, [sp, #36]	; 0x24
 800b7ce:	e767      	b.n	800b6a0 <_vfiprintf_r+0x94>
 800b7d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b7d4:	460c      	mov	r4, r1
 800b7d6:	2001      	movs	r0, #1
 800b7d8:	e7a5      	b.n	800b726 <_vfiprintf_r+0x11a>
 800b7da:	2300      	movs	r3, #0
 800b7dc:	3401      	adds	r4, #1
 800b7de:	9305      	str	r3, [sp, #20]
 800b7e0:	4619      	mov	r1, r3
 800b7e2:	f04f 0c0a 	mov.w	ip, #10
 800b7e6:	4620      	mov	r0, r4
 800b7e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7ec:	3a30      	subs	r2, #48	; 0x30
 800b7ee:	2a09      	cmp	r2, #9
 800b7f0:	d903      	bls.n	800b7fa <_vfiprintf_r+0x1ee>
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d0c5      	beq.n	800b782 <_vfiprintf_r+0x176>
 800b7f6:	9105      	str	r1, [sp, #20]
 800b7f8:	e7c3      	b.n	800b782 <_vfiprintf_r+0x176>
 800b7fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7fe:	4604      	mov	r4, r0
 800b800:	2301      	movs	r3, #1
 800b802:	e7f0      	b.n	800b7e6 <_vfiprintf_r+0x1da>
 800b804:	ab03      	add	r3, sp, #12
 800b806:	9300      	str	r3, [sp, #0]
 800b808:	462a      	mov	r2, r5
 800b80a:	4b16      	ldr	r3, [pc, #88]	; (800b864 <_vfiprintf_r+0x258>)
 800b80c:	a904      	add	r1, sp, #16
 800b80e:	4630      	mov	r0, r6
 800b810:	f3af 8000 	nop.w
 800b814:	4607      	mov	r7, r0
 800b816:	1c78      	adds	r0, r7, #1
 800b818:	d1d6      	bne.n	800b7c8 <_vfiprintf_r+0x1bc>
 800b81a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b81c:	07d9      	lsls	r1, r3, #31
 800b81e:	d405      	bmi.n	800b82c <_vfiprintf_r+0x220>
 800b820:	89ab      	ldrh	r3, [r5, #12]
 800b822:	059a      	lsls	r2, r3, #22
 800b824:	d402      	bmi.n	800b82c <_vfiprintf_r+0x220>
 800b826:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b828:	f7ff fe53 	bl	800b4d2 <__retarget_lock_release_recursive>
 800b82c:	89ab      	ldrh	r3, [r5, #12]
 800b82e:	065b      	lsls	r3, r3, #25
 800b830:	f53f af12 	bmi.w	800b658 <_vfiprintf_r+0x4c>
 800b834:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b836:	e711      	b.n	800b65c <_vfiprintf_r+0x50>
 800b838:	ab03      	add	r3, sp, #12
 800b83a:	9300      	str	r3, [sp, #0]
 800b83c:	462a      	mov	r2, r5
 800b83e:	4b09      	ldr	r3, [pc, #36]	; (800b864 <_vfiprintf_r+0x258>)
 800b840:	a904      	add	r1, sp, #16
 800b842:	4630      	mov	r0, r6
 800b844:	f000 f880 	bl	800b948 <_printf_i>
 800b848:	e7e4      	b.n	800b814 <_vfiprintf_r+0x208>
 800b84a:	bf00      	nop
 800b84c:	08023284 	.word	0x08023284
 800b850:	080232a4 	.word	0x080232a4
 800b854:	08023264 	.word	0x08023264
 800b858:	080232c4 	.word	0x080232c4
 800b85c:	080232ce 	.word	0x080232ce
 800b860:	00000000 	.word	0x00000000
 800b864:	0800b5e7 	.word	0x0800b5e7
 800b868:	080232ca 	.word	0x080232ca

0800b86c <_printf_common>:
 800b86c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b870:	4616      	mov	r6, r2
 800b872:	4699      	mov	r9, r3
 800b874:	688a      	ldr	r2, [r1, #8]
 800b876:	690b      	ldr	r3, [r1, #16]
 800b878:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b87c:	4293      	cmp	r3, r2
 800b87e:	bfb8      	it	lt
 800b880:	4613      	movlt	r3, r2
 800b882:	6033      	str	r3, [r6, #0]
 800b884:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b888:	4607      	mov	r7, r0
 800b88a:	460c      	mov	r4, r1
 800b88c:	b10a      	cbz	r2, 800b892 <_printf_common+0x26>
 800b88e:	3301      	adds	r3, #1
 800b890:	6033      	str	r3, [r6, #0]
 800b892:	6823      	ldr	r3, [r4, #0]
 800b894:	0699      	lsls	r1, r3, #26
 800b896:	bf42      	ittt	mi
 800b898:	6833      	ldrmi	r3, [r6, #0]
 800b89a:	3302      	addmi	r3, #2
 800b89c:	6033      	strmi	r3, [r6, #0]
 800b89e:	6825      	ldr	r5, [r4, #0]
 800b8a0:	f015 0506 	ands.w	r5, r5, #6
 800b8a4:	d106      	bne.n	800b8b4 <_printf_common+0x48>
 800b8a6:	f104 0a19 	add.w	sl, r4, #25
 800b8aa:	68e3      	ldr	r3, [r4, #12]
 800b8ac:	6832      	ldr	r2, [r6, #0]
 800b8ae:	1a9b      	subs	r3, r3, r2
 800b8b0:	42ab      	cmp	r3, r5
 800b8b2:	dc26      	bgt.n	800b902 <_printf_common+0x96>
 800b8b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b8b8:	1e13      	subs	r3, r2, #0
 800b8ba:	6822      	ldr	r2, [r4, #0]
 800b8bc:	bf18      	it	ne
 800b8be:	2301      	movne	r3, #1
 800b8c0:	0692      	lsls	r2, r2, #26
 800b8c2:	d42b      	bmi.n	800b91c <_printf_common+0xb0>
 800b8c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b8c8:	4649      	mov	r1, r9
 800b8ca:	4638      	mov	r0, r7
 800b8cc:	47c0      	blx	r8
 800b8ce:	3001      	adds	r0, #1
 800b8d0:	d01e      	beq.n	800b910 <_printf_common+0xa4>
 800b8d2:	6823      	ldr	r3, [r4, #0]
 800b8d4:	68e5      	ldr	r5, [r4, #12]
 800b8d6:	6832      	ldr	r2, [r6, #0]
 800b8d8:	f003 0306 	and.w	r3, r3, #6
 800b8dc:	2b04      	cmp	r3, #4
 800b8de:	bf08      	it	eq
 800b8e0:	1aad      	subeq	r5, r5, r2
 800b8e2:	68a3      	ldr	r3, [r4, #8]
 800b8e4:	6922      	ldr	r2, [r4, #16]
 800b8e6:	bf0c      	ite	eq
 800b8e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b8ec:	2500      	movne	r5, #0
 800b8ee:	4293      	cmp	r3, r2
 800b8f0:	bfc4      	itt	gt
 800b8f2:	1a9b      	subgt	r3, r3, r2
 800b8f4:	18ed      	addgt	r5, r5, r3
 800b8f6:	2600      	movs	r6, #0
 800b8f8:	341a      	adds	r4, #26
 800b8fa:	42b5      	cmp	r5, r6
 800b8fc:	d11a      	bne.n	800b934 <_printf_common+0xc8>
 800b8fe:	2000      	movs	r0, #0
 800b900:	e008      	b.n	800b914 <_printf_common+0xa8>
 800b902:	2301      	movs	r3, #1
 800b904:	4652      	mov	r2, sl
 800b906:	4649      	mov	r1, r9
 800b908:	4638      	mov	r0, r7
 800b90a:	47c0      	blx	r8
 800b90c:	3001      	adds	r0, #1
 800b90e:	d103      	bne.n	800b918 <_printf_common+0xac>
 800b910:	f04f 30ff 	mov.w	r0, #4294967295
 800b914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b918:	3501      	adds	r5, #1
 800b91a:	e7c6      	b.n	800b8aa <_printf_common+0x3e>
 800b91c:	18e1      	adds	r1, r4, r3
 800b91e:	1c5a      	adds	r2, r3, #1
 800b920:	2030      	movs	r0, #48	; 0x30
 800b922:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b926:	4422      	add	r2, r4
 800b928:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b92c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b930:	3302      	adds	r3, #2
 800b932:	e7c7      	b.n	800b8c4 <_printf_common+0x58>
 800b934:	2301      	movs	r3, #1
 800b936:	4622      	mov	r2, r4
 800b938:	4649      	mov	r1, r9
 800b93a:	4638      	mov	r0, r7
 800b93c:	47c0      	blx	r8
 800b93e:	3001      	adds	r0, #1
 800b940:	d0e6      	beq.n	800b910 <_printf_common+0xa4>
 800b942:	3601      	adds	r6, #1
 800b944:	e7d9      	b.n	800b8fa <_printf_common+0x8e>
	...

0800b948 <_printf_i>:
 800b948:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b94c:	7e0f      	ldrb	r7, [r1, #24]
 800b94e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b950:	2f78      	cmp	r7, #120	; 0x78
 800b952:	4691      	mov	r9, r2
 800b954:	4680      	mov	r8, r0
 800b956:	460c      	mov	r4, r1
 800b958:	469a      	mov	sl, r3
 800b95a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b95e:	d807      	bhi.n	800b970 <_printf_i+0x28>
 800b960:	2f62      	cmp	r7, #98	; 0x62
 800b962:	d80a      	bhi.n	800b97a <_printf_i+0x32>
 800b964:	2f00      	cmp	r7, #0
 800b966:	f000 80d8 	beq.w	800bb1a <_printf_i+0x1d2>
 800b96a:	2f58      	cmp	r7, #88	; 0x58
 800b96c:	f000 80a3 	beq.w	800bab6 <_printf_i+0x16e>
 800b970:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b974:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b978:	e03a      	b.n	800b9f0 <_printf_i+0xa8>
 800b97a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b97e:	2b15      	cmp	r3, #21
 800b980:	d8f6      	bhi.n	800b970 <_printf_i+0x28>
 800b982:	a101      	add	r1, pc, #4	; (adr r1, 800b988 <_printf_i+0x40>)
 800b984:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b988:	0800b9e1 	.word	0x0800b9e1
 800b98c:	0800b9f5 	.word	0x0800b9f5
 800b990:	0800b971 	.word	0x0800b971
 800b994:	0800b971 	.word	0x0800b971
 800b998:	0800b971 	.word	0x0800b971
 800b99c:	0800b971 	.word	0x0800b971
 800b9a0:	0800b9f5 	.word	0x0800b9f5
 800b9a4:	0800b971 	.word	0x0800b971
 800b9a8:	0800b971 	.word	0x0800b971
 800b9ac:	0800b971 	.word	0x0800b971
 800b9b0:	0800b971 	.word	0x0800b971
 800b9b4:	0800bb01 	.word	0x0800bb01
 800b9b8:	0800ba25 	.word	0x0800ba25
 800b9bc:	0800bae3 	.word	0x0800bae3
 800b9c0:	0800b971 	.word	0x0800b971
 800b9c4:	0800b971 	.word	0x0800b971
 800b9c8:	0800bb23 	.word	0x0800bb23
 800b9cc:	0800b971 	.word	0x0800b971
 800b9d0:	0800ba25 	.word	0x0800ba25
 800b9d4:	0800b971 	.word	0x0800b971
 800b9d8:	0800b971 	.word	0x0800b971
 800b9dc:	0800baeb 	.word	0x0800baeb
 800b9e0:	682b      	ldr	r3, [r5, #0]
 800b9e2:	1d1a      	adds	r2, r3, #4
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	602a      	str	r2, [r5, #0]
 800b9e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b9ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b9f0:	2301      	movs	r3, #1
 800b9f2:	e0a3      	b.n	800bb3c <_printf_i+0x1f4>
 800b9f4:	6820      	ldr	r0, [r4, #0]
 800b9f6:	6829      	ldr	r1, [r5, #0]
 800b9f8:	0606      	lsls	r6, r0, #24
 800b9fa:	f101 0304 	add.w	r3, r1, #4
 800b9fe:	d50a      	bpl.n	800ba16 <_printf_i+0xce>
 800ba00:	680e      	ldr	r6, [r1, #0]
 800ba02:	602b      	str	r3, [r5, #0]
 800ba04:	2e00      	cmp	r6, #0
 800ba06:	da03      	bge.n	800ba10 <_printf_i+0xc8>
 800ba08:	232d      	movs	r3, #45	; 0x2d
 800ba0a:	4276      	negs	r6, r6
 800ba0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba10:	485e      	ldr	r0, [pc, #376]	; (800bb8c <_printf_i+0x244>)
 800ba12:	230a      	movs	r3, #10
 800ba14:	e019      	b.n	800ba4a <_printf_i+0x102>
 800ba16:	680e      	ldr	r6, [r1, #0]
 800ba18:	602b      	str	r3, [r5, #0]
 800ba1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ba1e:	bf18      	it	ne
 800ba20:	b236      	sxthne	r6, r6
 800ba22:	e7ef      	b.n	800ba04 <_printf_i+0xbc>
 800ba24:	682b      	ldr	r3, [r5, #0]
 800ba26:	6820      	ldr	r0, [r4, #0]
 800ba28:	1d19      	adds	r1, r3, #4
 800ba2a:	6029      	str	r1, [r5, #0]
 800ba2c:	0601      	lsls	r1, r0, #24
 800ba2e:	d501      	bpl.n	800ba34 <_printf_i+0xec>
 800ba30:	681e      	ldr	r6, [r3, #0]
 800ba32:	e002      	b.n	800ba3a <_printf_i+0xf2>
 800ba34:	0646      	lsls	r6, r0, #25
 800ba36:	d5fb      	bpl.n	800ba30 <_printf_i+0xe8>
 800ba38:	881e      	ldrh	r6, [r3, #0]
 800ba3a:	4854      	ldr	r0, [pc, #336]	; (800bb8c <_printf_i+0x244>)
 800ba3c:	2f6f      	cmp	r7, #111	; 0x6f
 800ba3e:	bf0c      	ite	eq
 800ba40:	2308      	moveq	r3, #8
 800ba42:	230a      	movne	r3, #10
 800ba44:	2100      	movs	r1, #0
 800ba46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ba4a:	6865      	ldr	r5, [r4, #4]
 800ba4c:	60a5      	str	r5, [r4, #8]
 800ba4e:	2d00      	cmp	r5, #0
 800ba50:	bfa2      	ittt	ge
 800ba52:	6821      	ldrge	r1, [r4, #0]
 800ba54:	f021 0104 	bicge.w	r1, r1, #4
 800ba58:	6021      	strge	r1, [r4, #0]
 800ba5a:	b90e      	cbnz	r6, 800ba60 <_printf_i+0x118>
 800ba5c:	2d00      	cmp	r5, #0
 800ba5e:	d04d      	beq.n	800bafc <_printf_i+0x1b4>
 800ba60:	4615      	mov	r5, r2
 800ba62:	fbb6 f1f3 	udiv	r1, r6, r3
 800ba66:	fb03 6711 	mls	r7, r3, r1, r6
 800ba6a:	5dc7      	ldrb	r7, [r0, r7]
 800ba6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ba70:	4637      	mov	r7, r6
 800ba72:	42bb      	cmp	r3, r7
 800ba74:	460e      	mov	r6, r1
 800ba76:	d9f4      	bls.n	800ba62 <_printf_i+0x11a>
 800ba78:	2b08      	cmp	r3, #8
 800ba7a:	d10b      	bne.n	800ba94 <_printf_i+0x14c>
 800ba7c:	6823      	ldr	r3, [r4, #0]
 800ba7e:	07de      	lsls	r6, r3, #31
 800ba80:	d508      	bpl.n	800ba94 <_printf_i+0x14c>
 800ba82:	6923      	ldr	r3, [r4, #16]
 800ba84:	6861      	ldr	r1, [r4, #4]
 800ba86:	4299      	cmp	r1, r3
 800ba88:	bfde      	ittt	le
 800ba8a:	2330      	movle	r3, #48	; 0x30
 800ba8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ba90:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ba94:	1b52      	subs	r2, r2, r5
 800ba96:	6122      	str	r2, [r4, #16]
 800ba98:	f8cd a000 	str.w	sl, [sp]
 800ba9c:	464b      	mov	r3, r9
 800ba9e:	aa03      	add	r2, sp, #12
 800baa0:	4621      	mov	r1, r4
 800baa2:	4640      	mov	r0, r8
 800baa4:	f7ff fee2 	bl	800b86c <_printf_common>
 800baa8:	3001      	adds	r0, #1
 800baaa:	d14c      	bne.n	800bb46 <_printf_i+0x1fe>
 800baac:	f04f 30ff 	mov.w	r0, #4294967295
 800bab0:	b004      	add	sp, #16
 800bab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bab6:	4835      	ldr	r0, [pc, #212]	; (800bb8c <_printf_i+0x244>)
 800bab8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800babc:	6829      	ldr	r1, [r5, #0]
 800babe:	6823      	ldr	r3, [r4, #0]
 800bac0:	f851 6b04 	ldr.w	r6, [r1], #4
 800bac4:	6029      	str	r1, [r5, #0]
 800bac6:	061d      	lsls	r5, r3, #24
 800bac8:	d514      	bpl.n	800baf4 <_printf_i+0x1ac>
 800baca:	07df      	lsls	r7, r3, #31
 800bacc:	bf44      	itt	mi
 800bace:	f043 0320 	orrmi.w	r3, r3, #32
 800bad2:	6023      	strmi	r3, [r4, #0]
 800bad4:	b91e      	cbnz	r6, 800bade <_printf_i+0x196>
 800bad6:	6823      	ldr	r3, [r4, #0]
 800bad8:	f023 0320 	bic.w	r3, r3, #32
 800badc:	6023      	str	r3, [r4, #0]
 800bade:	2310      	movs	r3, #16
 800bae0:	e7b0      	b.n	800ba44 <_printf_i+0xfc>
 800bae2:	6823      	ldr	r3, [r4, #0]
 800bae4:	f043 0320 	orr.w	r3, r3, #32
 800bae8:	6023      	str	r3, [r4, #0]
 800baea:	2378      	movs	r3, #120	; 0x78
 800baec:	4828      	ldr	r0, [pc, #160]	; (800bb90 <_printf_i+0x248>)
 800baee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800baf2:	e7e3      	b.n	800babc <_printf_i+0x174>
 800baf4:	0659      	lsls	r1, r3, #25
 800baf6:	bf48      	it	mi
 800baf8:	b2b6      	uxthmi	r6, r6
 800bafa:	e7e6      	b.n	800baca <_printf_i+0x182>
 800bafc:	4615      	mov	r5, r2
 800bafe:	e7bb      	b.n	800ba78 <_printf_i+0x130>
 800bb00:	682b      	ldr	r3, [r5, #0]
 800bb02:	6826      	ldr	r6, [r4, #0]
 800bb04:	6961      	ldr	r1, [r4, #20]
 800bb06:	1d18      	adds	r0, r3, #4
 800bb08:	6028      	str	r0, [r5, #0]
 800bb0a:	0635      	lsls	r5, r6, #24
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	d501      	bpl.n	800bb14 <_printf_i+0x1cc>
 800bb10:	6019      	str	r1, [r3, #0]
 800bb12:	e002      	b.n	800bb1a <_printf_i+0x1d2>
 800bb14:	0670      	lsls	r0, r6, #25
 800bb16:	d5fb      	bpl.n	800bb10 <_printf_i+0x1c8>
 800bb18:	8019      	strh	r1, [r3, #0]
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	6123      	str	r3, [r4, #16]
 800bb1e:	4615      	mov	r5, r2
 800bb20:	e7ba      	b.n	800ba98 <_printf_i+0x150>
 800bb22:	682b      	ldr	r3, [r5, #0]
 800bb24:	1d1a      	adds	r2, r3, #4
 800bb26:	602a      	str	r2, [r5, #0]
 800bb28:	681d      	ldr	r5, [r3, #0]
 800bb2a:	6862      	ldr	r2, [r4, #4]
 800bb2c:	2100      	movs	r1, #0
 800bb2e:	4628      	mov	r0, r5
 800bb30:	f7f4 fb66 	bl	8000200 <memchr>
 800bb34:	b108      	cbz	r0, 800bb3a <_printf_i+0x1f2>
 800bb36:	1b40      	subs	r0, r0, r5
 800bb38:	6060      	str	r0, [r4, #4]
 800bb3a:	6863      	ldr	r3, [r4, #4]
 800bb3c:	6123      	str	r3, [r4, #16]
 800bb3e:	2300      	movs	r3, #0
 800bb40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb44:	e7a8      	b.n	800ba98 <_printf_i+0x150>
 800bb46:	6923      	ldr	r3, [r4, #16]
 800bb48:	462a      	mov	r2, r5
 800bb4a:	4649      	mov	r1, r9
 800bb4c:	4640      	mov	r0, r8
 800bb4e:	47d0      	blx	sl
 800bb50:	3001      	adds	r0, #1
 800bb52:	d0ab      	beq.n	800baac <_printf_i+0x164>
 800bb54:	6823      	ldr	r3, [r4, #0]
 800bb56:	079b      	lsls	r3, r3, #30
 800bb58:	d413      	bmi.n	800bb82 <_printf_i+0x23a>
 800bb5a:	68e0      	ldr	r0, [r4, #12]
 800bb5c:	9b03      	ldr	r3, [sp, #12]
 800bb5e:	4298      	cmp	r0, r3
 800bb60:	bfb8      	it	lt
 800bb62:	4618      	movlt	r0, r3
 800bb64:	e7a4      	b.n	800bab0 <_printf_i+0x168>
 800bb66:	2301      	movs	r3, #1
 800bb68:	4632      	mov	r2, r6
 800bb6a:	4649      	mov	r1, r9
 800bb6c:	4640      	mov	r0, r8
 800bb6e:	47d0      	blx	sl
 800bb70:	3001      	adds	r0, #1
 800bb72:	d09b      	beq.n	800baac <_printf_i+0x164>
 800bb74:	3501      	adds	r5, #1
 800bb76:	68e3      	ldr	r3, [r4, #12]
 800bb78:	9903      	ldr	r1, [sp, #12]
 800bb7a:	1a5b      	subs	r3, r3, r1
 800bb7c:	42ab      	cmp	r3, r5
 800bb7e:	dcf2      	bgt.n	800bb66 <_printf_i+0x21e>
 800bb80:	e7eb      	b.n	800bb5a <_printf_i+0x212>
 800bb82:	2500      	movs	r5, #0
 800bb84:	f104 0619 	add.w	r6, r4, #25
 800bb88:	e7f5      	b.n	800bb76 <_printf_i+0x22e>
 800bb8a:	bf00      	nop
 800bb8c:	080232d5 	.word	0x080232d5
 800bb90:	080232e6 	.word	0x080232e6

0800bb94 <__sread>:
 800bb94:	b510      	push	{r4, lr}
 800bb96:	460c      	mov	r4, r1
 800bb98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb9c:	f000 f894 	bl	800bcc8 <_read_r>
 800bba0:	2800      	cmp	r0, #0
 800bba2:	bfab      	itete	ge
 800bba4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bba6:	89a3      	ldrhlt	r3, [r4, #12]
 800bba8:	181b      	addge	r3, r3, r0
 800bbaa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bbae:	bfac      	ite	ge
 800bbb0:	6563      	strge	r3, [r4, #84]	; 0x54
 800bbb2:	81a3      	strhlt	r3, [r4, #12]
 800bbb4:	bd10      	pop	{r4, pc}

0800bbb6 <__swrite>:
 800bbb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbba:	461f      	mov	r7, r3
 800bbbc:	898b      	ldrh	r3, [r1, #12]
 800bbbe:	05db      	lsls	r3, r3, #23
 800bbc0:	4605      	mov	r5, r0
 800bbc2:	460c      	mov	r4, r1
 800bbc4:	4616      	mov	r6, r2
 800bbc6:	d505      	bpl.n	800bbd4 <__swrite+0x1e>
 800bbc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbcc:	2302      	movs	r3, #2
 800bbce:	2200      	movs	r2, #0
 800bbd0:	f000 f868 	bl	800bca4 <_lseek_r>
 800bbd4:	89a3      	ldrh	r3, [r4, #12]
 800bbd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bbda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bbde:	81a3      	strh	r3, [r4, #12]
 800bbe0:	4632      	mov	r2, r6
 800bbe2:	463b      	mov	r3, r7
 800bbe4:	4628      	mov	r0, r5
 800bbe6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbea:	f000 b817 	b.w	800bc1c <_write_r>

0800bbee <__sseek>:
 800bbee:	b510      	push	{r4, lr}
 800bbf0:	460c      	mov	r4, r1
 800bbf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbf6:	f000 f855 	bl	800bca4 <_lseek_r>
 800bbfa:	1c43      	adds	r3, r0, #1
 800bbfc:	89a3      	ldrh	r3, [r4, #12]
 800bbfe:	bf15      	itete	ne
 800bc00:	6560      	strne	r0, [r4, #84]	; 0x54
 800bc02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bc06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bc0a:	81a3      	strheq	r3, [r4, #12]
 800bc0c:	bf18      	it	ne
 800bc0e:	81a3      	strhne	r3, [r4, #12]
 800bc10:	bd10      	pop	{r4, pc}

0800bc12 <__sclose>:
 800bc12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc16:	f000 b813 	b.w	800bc40 <_close_r>
	...

0800bc1c <_write_r>:
 800bc1c:	b538      	push	{r3, r4, r5, lr}
 800bc1e:	4d07      	ldr	r5, [pc, #28]	; (800bc3c <_write_r+0x20>)
 800bc20:	4604      	mov	r4, r0
 800bc22:	4608      	mov	r0, r1
 800bc24:	4611      	mov	r1, r2
 800bc26:	2200      	movs	r2, #0
 800bc28:	602a      	str	r2, [r5, #0]
 800bc2a:	461a      	mov	r2, r3
 800bc2c:	f000 f9ba 	bl	800bfa4 <_write>
 800bc30:	1c43      	adds	r3, r0, #1
 800bc32:	d102      	bne.n	800bc3a <_write_r+0x1e>
 800bc34:	682b      	ldr	r3, [r5, #0]
 800bc36:	b103      	cbz	r3, 800bc3a <_write_r+0x1e>
 800bc38:	6023      	str	r3, [r4, #0]
 800bc3a:	bd38      	pop	{r3, r4, r5, pc}
 800bc3c:	20001778 	.word	0x20001778

0800bc40 <_close_r>:
 800bc40:	b538      	push	{r3, r4, r5, lr}
 800bc42:	4d06      	ldr	r5, [pc, #24]	; (800bc5c <_close_r+0x1c>)
 800bc44:	2300      	movs	r3, #0
 800bc46:	4604      	mov	r4, r0
 800bc48:	4608      	mov	r0, r1
 800bc4a:	602b      	str	r3, [r5, #0]
 800bc4c:	f000 f982 	bl	800bf54 <_close>
 800bc50:	1c43      	adds	r3, r0, #1
 800bc52:	d102      	bne.n	800bc5a <_close_r+0x1a>
 800bc54:	682b      	ldr	r3, [r5, #0]
 800bc56:	b103      	cbz	r3, 800bc5a <_close_r+0x1a>
 800bc58:	6023      	str	r3, [r4, #0]
 800bc5a:	bd38      	pop	{r3, r4, r5, pc}
 800bc5c:	20001778 	.word	0x20001778

0800bc60 <_fstat_r>:
 800bc60:	b538      	push	{r3, r4, r5, lr}
 800bc62:	4d07      	ldr	r5, [pc, #28]	; (800bc80 <_fstat_r+0x20>)
 800bc64:	2300      	movs	r3, #0
 800bc66:	4604      	mov	r4, r0
 800bc68:	4608      	mov	r0, r1
 800bc6a:	4611      	mov	r1, r2
 800bc6c:	602b      	str	r3, [r5, #0]
 800bc6e:	f000 f979 	bl	800bf64 <_fstat>
 800bc72:	1c43      	adds	r3, r0, #1
 800bc74:	d102      	bne.n	800bc7c <_fstat_r+0x1c>
 800bc76:	682b      	ldr	r3, [r5, #0]
 800bc78:	b103      	cbz	r3, 800bc7c <_fstat_r+0x1c>
 800bc7a:	6023      	str	r3, [r4, #0]
 800bc7c:	bd38      	pop	{r3, r4, r5, pc}
 800bc7e:	bf00      	nop
 800bc80:	20001778 	.word	0x20001778

0800bc84 <_isatty_r>:
 800bc84:	b538      	push	{r3, r4, r5, lr}
 800bc86:	4d06      	ldr	r5, [pc, #24]	; (800bca0 <_isatty_r+0x1c>)
 800bc88:	2300      	movs	r3, #0
 800bc8a:	4604      	mov	r4, r0
 800bc8c:	4608      	mov	r0, r1
 800bc8e:	602b      	str	r3, [r5, #0]
 800bc90:	f000 f970 	bl	800bf74 <_isatty>
 800bc94:	1c43      	adds	r3, r0, #1
 800bc96:	d102      	bne.n	800bc9e <_isatty_r+0x1a>
 800bc98:	682b      	ldr	r3, [r5, #0]
 800bc9a:	b103      	cbz	r3, 800bc9e <_isatty_r+0x1a>
 800bc9c:	6023      	str	r3, [r4, #0]
 800bc9e:	bd38      	pop	{r3, r4, r5, pc}
 800bca0:	20001778 	.word	0x20001778

0800bca4 <_lseek_r>:
 800bca4:	b538      	push	{r3, r4, r5, lr}
 800bca6:	4d07      	ldr	r5, [pc, #28]	; (800bcc4 <_lseek_r+0x20>)
 800bca8:	4604      	mov	r4, r0
 800bcaa:	4608      	mov	r0, r1
 800bcac:	4611      	mov	r1, r2
 800bcae:	2200      	movs	r2, #0
 800bcb0:	602a      	str	r2, [r5, #0]
 800bcb2:	461a      	mov	r2, r3
 800bcb4:	f000 f966 	bl	800bf84 <_lseek>
 800bcb8:	1c43      	adds	r3, r0, #1
 800bcba:	d102      	bne.n	800bcc2 <_lseek_r+0x1e>
 800bcbc:	682b      	ldr	r3, [r5, #0]
 800bcbe:	b103      	cbz	r3, 800bcc2 <_lseek_r+0x1e>
 800bcc0:	6023      	str	r3, [r4, #0]
 800bcc2:	bd38      	pop	{r3, r4, r5, pc}
 800bcc4:	20001778 	.word	0x20001778

0800bcc8 <_read_r>:
 800bcc8:	b538      	push	{r3, r4, r5, lr}
 800bcca:	4d07      	ldr	r5, [pc, #28]	; (800bce8 <_read_r+0x20>)
 800bccc:	4604      	mov	r4, r0
 800bcce:	4608      	mov	r0, r1
 800bcd0:	4611      	mov	r1, r2
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	602a      	str	r2, [r5, #0]
 800bcd6:	461a      	mov	r2, r3
 800bcd8:	f000 f95c 	bl	800bf94 <_read>
 800bcdc:	1c43      	adds	r3, r0, #1
 800bcde:	d102      	bne.n	800bce6 <_read_r+0x1e>
 800bce0:	682b      	ldr	r3, [r5, #0]
 800bce2:	b103      	cbz	r3, 800bce6 <_read_r+0x1e>
 800bce4:	6023      	str	r3, [r4, #0]
 800bce6:	bd38      	pop	{r3, r4, r5, pc}
 800bce8:	20001778 	.word	0x20001778

0800bcec <expf>:
 800bcec:	b508      	push	{r3, lr}
 800bcee:	ed2d 8b02 	vpush	{d8}
 800bcf2:	eef0 8a40 	vmov.f32	s17, s0
 800bcf6:	f000 f82f 	bl	800bd58 <__ieee754_expf>
 800bcfa:	eeb0 8a40 	vmov.f32	s16, s0
 800bcfe:	eeb0 0a68 	vmov.f32	s0, s17
 800bd02:	f000 f919 	bl	800bf38 <finitef>
 800bd06:	b160      	cbz	r0, 800bd22 <expf+0x36>
 800bd08:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800bd48 <expf+0x5c>
 800bd0c:	eef4 8ae7 	vcmpe.f32	s17, s15
 800bd10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd14:	dd0a      	ble.n	800bd2c <expf+0x40>
 800bd16:	f7fe ffb3 	bl	800ac80 <__errno>
 800bd1a:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 800bd4c <expf+0x60>
 800bd1e:	2322      	movs	r3, #34	; 0x22
 800bd20:	6003      	str	r3, [r0, #0]
 800bd22:	eeb0 0a48 	vmov.f32	s0, s16
 800bd26:	ecbd 8b02 	vpop	{d8}
 800bd2a:	bd08      	pop	{r3, pc}
 800bd2c:	eddf 7a08 	vldr	s15, [pc, #32]	; 800bd50 <expf+0x64>
 800bd30:	eef4 8ae7 	vcmpe.f32	s17, s15
 800bd34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd38:	d5f3      	bpl.n	800bd22 <expf+0x36>
 800bd3a:	f7fe ffa1 	bl	800ac80 <__errno>
 800bd3e:	2322      	movs	r3, #34	; 0x22
 800bd40:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800bd54 <expf+0x68>
 800bd44:	6003      	str	r3, [r0, #0]
 800bd46:	e7ec      	b.n	800bd22 <expf+0x36>
 800bd48:	42b17180 	.word	0x42b17180
 800bd4c:	7f800000 	.word	0x7f800000
 800bd50:	c2cff1b5 	.word	0xc2cff1b5
 800bd54:	00000000 	.word	0x00000000

0800bd58 <__ieee754_expf>:
 800bd58:	ee10 2a10 	vmov	r2, s0
 800bd5c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800bd60:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800bd64:	d902      	bls.n	800bd6c <__ieee754_expf+0x14>
 800bd66:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bd6a:	4770      	bx	lr
 800bd6c:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800bd70:	d106      	bne.n	800bd80 <__ieee754_expf+0x28>
 800bd72:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800beac <__ieee754_expf+0x154>
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	bf18      	it	ne
 800bd7a:	eeb0 0a67 	vmovne.f32	s0, s15
 800bd7e:	4770      	bx	lr
 800bd80:	484b      	ldr	r0, [pc, #300]	; (800beb0 <__ieee754_expf+0x158>)
 800bd82:	4282      	cmp	r2, r0
 800bd84:	dd02      	ble.n	800bd8c <__ieee754_expf+0x34>
 800bd86:	2000      	movs	r0, #0
 800bd88:	f000 b8d0 	b.w	800bf2c <__math_oflowf>
 800bd8c:	2a00      	cmp	r2, #0
 800bd8e:	da05      	bge.n	800bd9c <__ieee754_expf+0x44>
 800bd90:	4a48      	ldr	r2, [pc, #288]	; (800beb4 <__ieee754_expf+0x15c>)
 800bd92:	4291      	cmp	r1, r2
 800bd94:	d902      	bls.n	800bd9c <__ieee754_expf+0x44>
 800bd96:	2000      	movs	r0, #0
 800bd98:	f000 b8c2 	b.w	800bf20 <__math_uflowf>
 800bd9c:	4a46      	ldr	r2, [pc, #280]	; (800beb8 <__ieee754_expf+0x160>)
 800bd9e:	4291      	cmp	r1, r2
 800bda0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800bda4:	d952      	bls.n	800be4c <__ieee754_expf+0xf4>
 800bda6:	4a45      	ldr	r2, [pc, #276]	; (800bebc <__ieee754_expf+0x164>)
 800bda8:	4291      	cmp	r1, r2
 800bdaa:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800bdae:	d834      	bhi.n	800be1a <__ieee754_expf+0xc2>
 800bdb0:	4943      	ldr	r1, [pc, #268]	; (800bec0 <__ieee754_expf+0x168>)
 800bdb2:	4411      	add	r1, r2
 800bdb4:	ed91 7a00 	vldr	s14, [r1]
 800bdb8:	4942      	ldr	r1, [pc, #264]	; (800bec4 <__ieee754_expf+0x16c>)
 800bdba:	440a      	add	r2, r1
 800bdbc:	edd2 7a00 	vldr	s15, [r2]
 800bdc0:	ee30 7a47 	vsub.f32	s14, s0, s14
 800bdc4:	f1c3 0201 	rsb	r2, r3, #1
 800bdc8:	1ad2      	subs	r2, r2, r3
 800bdca:	ee37 0a67 	vsub.f32	s0, s14, s15
 800bdce:	ee20 6a00 	vmul.f32	s12, s0, s0
 800bdd2:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800bec8 <__ieee754_expf+0x170>
 800bdd6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800becc <__ieee754_expf+0x174>
 800bdda:	eee6 6a05 	vfma.f32	s13, s12, s10
 800bdde:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800bed0 <__ieee754_expf+0x178>
 800bde2:	eea6 5a86 	vfma.f32	s10, s13, s12
 800bde6:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800bed4 <__ieee754_expf+0x17c>
 800bdea:	eee5 6a06 	vfma.f32	s13, s10, s12
 800bdee:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800bed8 <__ieee754_expf+0x180>
 800bdf2:	eea6 5a86 	vfma.f32	s10, s13, s12
 800bdf6:	eef0 6a40 	vmov.f32	s13, s0
 800bdfa:	eee5 6a46 	vfms.f32	s13, s10, s12
 800bdfe:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800be02:	ee20 5a26 	vmul.f32	s10, s0, s13
 800be06:	bb92      	cbnz	r2, 800be6e <__ieee754_expf+0x116>
 800be08:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800be0c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800be10:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800be14:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800be18:	4770      	bx	lr
 800be1a:	4b30      	ldr	r3, [pc, #192]	; (800bedc <__ieee754_expf+0x184>)
 800be1c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800bee0 <__ieee754_expf+0x188>
 800be20:	eddf 6a30 	vldr	s13, [pc, #192]	; 800bee4 <__ieee754_expf+0x18c>
 800be24:	4413      	add	r3, r2
 800be26:	edd3 7a00 	vldr	s15, [r3]
 800be2a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800be2e:	eeb0 7a40 	vmov.f32	s14, s0
 800be32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800be36:	ee17 2a90 	vmov	r2, s15
 800be3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800be3e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800be42:	eddf 6a29 	vldr	s13, [pc, #164]	; 800bee8 <__ieee754_expf+0x190>
 800be46:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800be4a:	e7be      	b.n	800bdca <__ieee754_expf+0x72>
 800be4c:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 800be50:	d20b      	bcs.n	800be6a <__ieee754_expf+0x112>
 800be52:	eddf 6a26 	vldr	s13, [pc, #152]	; 800beec <__ieee754_expf+0x194>
 800be56:	ee70 6a26 	vadd.f32	s13, s0, s13
 800be5a:	eef4 6ae5 	vcmpe.f32	s13, s11
 800be5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be62:	dd02      	ble.n	800be6a <__ieee754_expf+0x112>
 800be64:	ee30 0a25 	vadd.f32	s0, s0, s11
 800be68:	4770      	bx	lr
 800be6a:	2200      	movs	r2, #0
 800be6c:	e7af      	b.n	800bdce <__ieee754_expf+0x76>
 800be6e:	ee76 6a66 	vsub.f32	s13, s12, s13
 800be72:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800be76:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800be7a:	bfb8      	it	lt
 800be7c:	3264      	addlt	r2, #100	; 0x64
 800be7e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800be82:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800be86:	ee75 7ac0 	vsub.f32	s15, s11, s0
 800be8a:	ee17 3a90 	vmov	r3, s15
 800be8e:	bfab      	itete	ge
 800be90:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800be94:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800be98:	ee00 3a10 	vmovge	s0, r3
 800be9c:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 800bef0 <__ieee754_expf+0x198>
 800bea0:	bfbc      	itt	lt
 800bea2:	ee00 3a10 	vmovlt	s0, r3
 800bea6:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800beaa:	4770      	bx	lr
 800beac:	00000000 	.word	0x00000000
 800beb0:	42b17217 	.word	0x42b17217
 800beb4:	42cff1b5 	.word	0x42cff1b5
 800beb8:	3eb17218 	.word	0x3eb17218
 800bebc:	3f851591 	.word	0x3f851591
 800bec0:	08023300 	.word	0x08023300
 800bec4:	08023308 	.word	0x08023308
 800bec8:	3331bb4c 	.word	0x3331bb4c
 800becc:	b5ddea0e 	.word	0xb5ddea0e
 800bed0:	388ab355 	.word	0x388ab355
 800bed4:	bb360b61 	.word	0xbb360b61
 800bed8:	3e2aaaab 	.word	0x3e2aaaab
 800bedc:	080232f8 	.word	0x080232f8
 800bee0:	3fb8aa3b 	.word	0x3fb8aa3b
 800bee4:	3f317180 	.word	0x3f317180
 800bee8:	3717f7d1 	.word	0x3717f7d1
 800beec:	7149f2ca 	.word	0x7149f2ca
 800bef0:	0d800000 	.word	0x0d800000

0800bef4 <with_errnof>:
 800bef4:	b513      	push	{r0, r1, r4, lr}
 800bef6:	4604      	mov	r4, r0
 800bef8:	ed8d 0a01 	vstr	s0, [sp, #4]
 800befc:	f7fe fec0 	bl	800ac80 <__errno>
 800bf00:	ed9d 0a01 	vldr	s0, [sp, #4]
 800bf04:	6004      	str	r4, [r0, #0]
 800bf06:	b002      	add	sp, #8
 800bf08:	bd10      	pop	{r4, pc}

0800bf0a <xflowf>:
 800bf0a:	b130      	cbz	r0, 800bf1a <xflowf+0x10>
 800bf0c:	eef1 7a40 	vneg.f32	s15, s0
 800bf10:	ee27 0a80 	vmul.f32	s0, s15, s0
 800bf14:	2022      	movs	r0, #34	; 0x22
 800bf16:	f7ff bfed 	b.w	800bef4 <with_errnof>
 800bf1a:	eef0 7a40 	vmov.f32	s15, s0
 800bf1e:	e7f7      	b.n	800bf10 <xflowf+0x6>

0800bf20 <__math_uflowf>:
 800bf20:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bf28 <__math_uflowf+0x8>
 800bf24:	f7ff bff1 	b.w	800bf0a <xflowf>
 800bf28:	10000000 	.word	0x10000000

0800bf2c <__math_oflowf>:
 800bf2c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bf34 <__math_oflowf+0x8>
 800bf30:	f7ff bfeb 	b.w	800bf0a <xflowf>
 800bf34:	70000000 	.word	0x70000000

0800bf38 <finitef>:
 800bf38:	b082      	sub	sp, #8
 800bf3a:	ed8d 0a01 	vstr	s0, [sp, #4]
 800bf3e:	9801      	ldr	r0, [sp, #4]
 800bf40:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800bf44:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800bf48:	bfac      	ite	ge
 800bf4a:	2000      	movge	r0, #0
 800bf4c:	2001      	movlt	r0, #1
 800bf4e:	b002      	add	sp, #8
 800bf50:	4770      	bx	lr
	...

0800bf54 <_close>:
 800bf54:	4b02      	ldr	r3, [pc, #8]	; (800bf60 <_close+0xc>)
 800bf56:	2258      	movs	r2, #88	; 0x58
 800bf58:	601a      	str	r2, [r3, #0]
 800bf5a:	f04f 30ff 	mov.w	r0, #4294967295
 800bf5e:	4770      	bx	lr
 800bf60:	20001778 	.word	0x20001778

0800bf64 <_fstat>:
 800bf64:	4b02      	ldr	r3, [pc, #8]	; (800bf70 <_fstat+0xc>)
 800bf66:	2258      	movs	r2, #88	; 0x58
 800bf68:	601a      	str	r2, [r3, #0]
 800bf6a:	f04f 30ff 	mov.w	r0, #4294967295
 800bf6e:	4770      	bx	lr
 800bf70:	20001778 	.word	0x20001778

0800bf74 <_isatty>:
 800bf74:	4b02      	ldr	r3, [pc, #8]	; (800bf80 <_isatty+0xc>)
 800bf76:	2258      	movs	r2, #88	; 0x58
 800bf78:	601a      	str	r2, [r3, #0]
 800bf7a:	2000      	movs	r0, #0
 800bf7c:	4770      	bx	lr
 800bf7e:	bf00      	nop
 800bf80:	20001778 	.word	0x20001778

0800bf84 <_lseek>:
 800bf84:	4b02      	ldr	r3, [pc, #8]	; (800bf90 <_lseek+0xc>)
 800bf86:	2258      	movs	r2, #88	; 0x58
 800bf88:	601a      	str	r2, [r3, #0]
 800bf8a:	f04f 30ff 	mov.w	r0, #4294967295
 800bf8e:	4770      	bx	lr
 800bf90:	20001778 	.word	0x20001778

0800bf94 <_read>:
 800bf94:	4b02      	ldr	r3, [pc, #8]	; (800bfa0 <_read+0xc>)
 800bf96:	2258      	movs	r2, #88	; 0x58
 800bf98:	601a      	str	r2, [r3, #0]
 800bf9a:	f04f 30ff 	mov.w	r0, #4294967295
 800bf9e:	4770      	bx	lr
 800bfa0:	20001778 	.word	0x20001778

0800bfa4 <_write>:
 800bfa4:	4b02      	ldr	r3, [pc, #8]	; (800bfb0 <_write+0xc>)
 800bfa6:	2258      	movs	r2, #88	; 0x58
 800bfa8:	601a      	str	r2, [r3, #0]
 800bfaa:	f04f 30ff 	mov.w	r0, #4294967295
 800bfae:	4770      	bx	lr
 800bfb0:	20001778 	.word	0x20001778

0800bfb4 <_init>:
 800bfb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfb6:	bf00      	nop
 800bfb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfba:	bc08      	pop	{r3}
 800bfbc:	469e      	mov	lr, r3
 800bfbe:	4770      	bx	lr

0800bfc0 <_fini>:
 800bfc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfc2:	bf00      	nop
 800bfc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfc6:	bc08      	pop	{r3}
 800bfc8:	469e      	mov	lr, r3
 800bfca:	4770      	bx	lr
